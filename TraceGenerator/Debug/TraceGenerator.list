
TraceGenerator.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000083f4  08000298  08000298  00010298  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000278  08008690  08008690  00018690  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008908  08008908  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  08008908  08008908  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008908  08008908  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008908  08008908  00018908  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800890c  0800890c  0001890c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  24000000  08008910  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000528  24000078  08008988  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  240005a0  08008988  000205a0  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018616  00000000  00000000  000200a6  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002bb4  00000000  00000000  000386bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000c60  00000000  00000000  0003b270  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000b48  00000000  00000000  0003bed0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00036624  00000000  00000000  0003ca18  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000c099  00000000  00000000  0007303c  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    001547e3  00000000  00000000  0007f0d5  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001d38b8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000035a8  00000000  00000000  001d3934  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000078 	.word	0x24000078
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08008674 	.word	0x08008674

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	2400007c 	.word	0x2400007c
 80002d4:	08008674 	.word	0x08008674

080002d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002d8:	b590      	push	{r4, r7, lr}
 80002da:	ed2d 8b02 	vpush	{d8}
 80002de:	f6ad 7dcc 	subw	sp, sp, #4044	; 0xfcc
 80002e2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002e4:	f000 fc08 	bl	8000af8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002e8:	f000 f8f2 	bl	80004d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002ec:	f000 f9f8 	bl	80006e0 <MX_GPIO_Init>
  MX_DAC1_Init();
 80002f0:	f000 f9a2 	bl	8000638 <MX_DAC1_Init>
  MX_SDMMC1_SD_Init();
 80002f4:	f000 f9d2 	bl	800069c <MX_SDMMC1_SD_Init>
  MX_FATFS_Init();
 80002f8:	f006 f95c 	bl	80065b4 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  HAL_DAC_Start(&hdac1, DAC1_CHANNEL_1);
 80002fc:	2100      	movs	r1, #0
 80002fe:	4872      	ldr	r0, [pc, #456]	; (80004c8 <main+0x1f0>)
 8000300:	f000 fdbf 	bl	8000e82 <HAL_DAC_Start>
  double x = 0.0;
 8000304:	f04f 0300 	mov.w	r3, #0
 8000308:	f04f 0400 	mov.w	r4, #0
 800030c:	f507 627b 	add.w	r2, r7, #4016	; 0xfb0
 8000310:	e9c2 3400 	strd	r3, r4, [r2]
  double x1 = 0.0;
 8000314:	f04f 0300 	mov.w	r3, #0
 8000318:	f04f 0400 	mov.w	r4, #0
 800031c:	f607 72a8 	addw	r2, r7, #4008	; 0xfa8
 8000320:	e9c2 3400 	strd	r3, r4, [r2]
  uint16_t y[2000];

  for(int i=0; i < 2000; i++)
 8000324:	2300      	movs	r3, #0
 8000326:	f8c7 3fc4 	str.w	r3, [r7, #4036]	; 0xfc4
 800032a:	e077      	b.n	800041c <main+0x144>
  {
	  int j = i - 500;
 800032c:	f8d7 3fc4 	ldr.w	r3, [r7, #4036]	; 0xfc4
 8000330:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 8000334:	f8c7 3fa4 	str.w	r3, [r7, #4004]	; 0xfa4
  	  x = (j*j*0.00002 + log(j+3));
 8000338:	f8d7 3fa4 	ldr.w	r3, [r7, #4004]	; 0xfa4
 800033c:	f8d7 2fa4 	ldr.w	r2, [r7, #4004]	; 0xfa4
 8000340:	fb02 f303 	mul.w	r3, r2, r3
 8000344:	ee07 3a90 	vmov	s15, r3
 8000348:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800034c:	ed9f 6b58 	vldr	d6, [pc, #352]	; 80004b0 <main+0x1d8>
 8000350:	ee27 8b06 	vmul.f64	d8, d7, d6
 8000354:	f8d7 3fa4 	ldr.w	r3, [r7, #4004]	; 0xfa4
 8000358:	3303      	adds	r3, #3
 800035a:	ee07 3a90 	vmov	s15, r3
 800035e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000362:	eeb0 0b47 	vmov.f64	d0, d7
 8000366:	f006 fbe7 	bl	8006b38 <log>
 800036a:	eeb0 7b40 	vmov.f64	d7, d0
 800036e:	ee38 7b07 	vadd.f64	d7, d8, d7
 8000372:	f507 637b 	add.w	r3, r7, #4016	; 0xfb0
 8000376:	ed83 7b00 	vstr	d7, [r3]
  	  x1 = exp(-fabs(j*0.01-3));
 800037a:	f8d7 3fa4 	ldr.w	r3, [r7, #4004]	; 0xfa4
 800037e:	ee07 3a90 	vmov	s15, r3
 8000382:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000386:	ed9f 6b4c 	vldr	d6, [pc, #304]	; 80004b8 <main+0x1e0>
 800038a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800038e:	eeb0 6b08 	vmov.f64	d6, #8	; 0x40400000  3.0
 8000392:	ee37 7b46 	vsub.f64	d7, d7, d6
 8000396:	eeb0 7bc7 	vabs.f64	d7, d7
 800039a:	eeb1 7b47 	vneg.f64	d7, d7
 800039e:	eeb0 0b47 	vmov.f64	d0, d7
 80003a2:	f006 fb55 	bl	8006a50 <exp>
 80003a6:	f607 73a8 	addw	r3, r7, #4008	; 0xfa8
 80003aa:	ed83 0b00 	vstr	d0, [r3]
  	  y[i]= (uint16_t)((sin(pow(x*0.5, 2) + 3)+1)*2000.0*x1);
 80003ae:	f507 637b 	add.w	r3, r7, #4016	; 0xfb0
 80003b2:	ed93 7b00 	vldr	d7, [r3]
 80003b6:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 80003ba:	ee27 7b06 	vmul.f64	d7, d7, d6
 80003be:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 80003c2:	eeb0 0b47 	vmov.f64	d0, d7
 80003c6:	f006 fc27 	bl	8006c18 <pow>
 80003ca:	eeb0 6b40 	vmov.f64	d6, d0
 80003ce:	eeb0 7b08 	vmov.f64	d7, #8	; 0x40400000  3.0
 80003d2:	ee36 7b07 	vadd.f64	d7, d6, d7
 80003d6:	eeb0 0b47 	vmov.f64	d0, d7
 80003da:	f006 fafd 	bl	80069d8 <sin>
 80003de:	eeb0 6b40 	vmov.f64	d6, d0
 80003e2:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 80003e6:	ee36 7b07 	vadd.f64	d7, d6, d7
 80003ea:	ed9f 6b35 	vldr	d6, [pc, #212]	; 80004c0 <main+0x1e8>
 80003ee:	ee27 6b06 	vmul.f64	d6, d7, d6
 80003f2:	f607 73a8 	addw	r3, r7, #4008	; 0xfa8
 80003f6:	ed93 7b00 	vldr	d7, [r3]
 80003fa:	ee26 7b07 	vmul.f64	d7, d6, d7
 80003fe:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000402:	ee17 3a90 	vmov	r3, s15
 8000406:	b299      	uxth	r1, r3
 8000408:	1d3b      	adds	r3, r7, #4
 800040a:	f8d7 2fc4 	ldr.w	r2, [r7, #4036]	; 0xfc4
 800040e:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
  for(int i=0; i < 2000; i++)
 8000412:	f8d7 3fc4 	ldr.w	r3, [r7, #4036]	; 0xfc4
 8000416:	3301      	adds	r3, #1
 8000418:	f8c7 3fc4 	str.w	r3, [r7, #4036]	; 0xfc4
 800041c:	f8d7 3fc4 	ldr.w	r3, [r7, #4036]	; 0xfc4
 8000420:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000424:	db82      	blt.n	800032c <main+0x54>
  }
  for(int i = 20; i < 50; i++) {
 8000426:	2314      	movs	r3, #20
 8000428:	f8c7 3fc0 	str.w	r3, [r7, #4032]	; 0xfc0
 800042c:	e00b      	b.n	8000446 <main+0x16e>
	  y[i] = 4000;
 800042e:	1d3b      	adds	r3, r7, #4
 8000430:	f8d7 2fc0 	ldr.w	r2, [r7, #4032]	; 0xfc0
 8000434:	f44f 617a 	mov.w	r1, #4000	; 0xfa0
 8000438:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
  for(int i = 20; i < 50; i++) {
 800043c:	f8d7 3fc0 	ldr.w	r3, [r7, #4032]	; 0xfc0
 8000440:	3301      	adds	r3, #1
 8000442:	f8c7 3fc0 	str.w	r3, [r7, #4032]	; 0xfc0
 8000446:	f8d7 3fc0 	ldr.w	r3, [r7, #4032]	; 0xfc0
 800044a:	2b31      	cmp	r3, #49	; 0x31
 800044c:	ddef      	ble.n	800042e <main+0x156>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 800044e:	2120      	movs	r1, #32
 8000450:	481e      	ldr	r0, [pc, #120]	; (80004cc <main+0x1f4>)
 8000452:	f001 f886 	bl	8001562 <HAL_GPIO_TogglePin>
	  for(int i =0; i<100; i++){}
 8000456:	2300      	movs	r3, #0
 8000458:	f8c7 3fbc 	str.w	r3, [r7, #4028]	; 0xfbc
 800045c:	e004      	b.n	8000468 <main+0x190>
 800045e:	f8d7 3fbc 	ldr.w	r3, [r7, #4028]	; 0xfbc
 8000462:	3301      	adds	r3, #1
 8000464:	f8c7 3fbc 	str.w	r3, [r7, #4028]	; 0xfbc
 8000468:	f8d7 3fbc 	ldr.w	r3, [r7, #4028]	; 0xfbc
 800046c:	2b63      	cmp	r3, #99	; 0x63
 800046e:	ddf6      	ble.n	800045e <main+0x186>
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000470:	2120      	movs	r1, #32
 8000472:	4816      	ldr	r0, [pc, #88]	; (80004cc <main+0x1f4>)
 8000474:	f001 f875 	bl	8001562 <HAL_GPIO_TogglePin>
	  for(int i=0; i < 2000; i++)
 8000478:	2300      	movs	r3, #0
 800047a:	f8c7 3fb8 	str.w	r3, [r7, #4024]	; 0xfb8
 800047e:	e00e      	b.n	800049e <main+0x1c6>
	  {
	  	  HAL_DAC_SetValue(&hdac1, DAC1_CHANNEL_1, DAC_ALIGN_12B_R, y[i]);
 8000480:	1d3b      	adds	r3, r7, #4
 8000482:	f8d7 2fb8 	ldr.w	r2, [r7, #4024]	; 0xfb8
 8000486:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800048a:	2200      	movs	r2, #0
 800048c:	2100      	movs	r1, #0
 800048e:	480e      	ldr	r0, [pc, #56]	; (80004c8 <main+0x1f0>)
 8000490:	f000 fd49 	bl	8000f26 <HAL_DAC_SetValue>
	  for(int i=0; i < 2000; i++)
 8000494:	f8d7 3fb8 	ldr.w	r3, [r7, #4024]	; 0xfb8
 8000498:	3301      	adds	r3, #1
 800049a:	f8c7 3fb8 	str.w	r3, [r7, #4024]	; 0xfb8
 800049e:	f8d7 3fb8 	ldr.w	r3, [r7, #4024]	; 0xfb8
 80004a2:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80004a6:	dbeb      	blt.n	8000480 <main+0x1a8>
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 80004a8:	e7d1      	b.n	800044e <main+0x176>
 80004aa:	bf00      	nop
 80004ac:	f3af 8000 	nop.w
 80004b0:	88e368f1 	.word	0x88e368f1
 80004b4:	3ef4f8b5 	.word	0x3ef4f8b5
 80004b8:	47ae147b 	.word	0x47ae147b
 80004bc:	3f847ae1 	.word	0x3f847ae1
 80004c0:	00000000 	.word	0x00000000
 80004c4:	409f4000 	.word	0x409f4000
 80004c8:	240000a0 	.word	0x240000a0
 80004cc:	58020000 	.word	0x58020000

080004d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b0cc      	sub	sp, #304	; 0x130
 80004d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004d6:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80004da:	224c      	movs	r2, #76	; 0x4c
 80004dc:	2100      	movs	r1, #0
 80004de:	4618      	mov	r0, r3
 80004e0:	f006 fa72 	bl	80069c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004e4:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80004e8:	2220      	movs	r2, #32
 80004ea:	2100      	movs	r1, #0
 80004ec:	4618      	mov	r0, r3
 80004ee:	f006 fa6b 	bl	80069c8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80004f2:	f107 0308 	add.w	r3, r7, #8
 80004f6:	4618      	mov	r0, r3
 80004f8:	23bc      	movs	r3, #188	; 0xbc
 80004fa:	461a      	mov	r2, r3
 80004fc:	2100      	movs	r1, #0
 80004fe:	f006 fa63 	bl	80069c8 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000502:	2002      	movs	r0, #2
 8000504:	f001 f848 	bl	8001598 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000508:	1d3b      	adds	r3, r7, #4
 800050a:	2200      	movs	r2, #0
 800050c:	601a      	str	r2, [r3, #0]
 800050e:	4b48      	ldr	r3, [pc, #288]	; (8000630 <SystemClock_Config+0x160>)
 8000510:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000512:	4a47      	ldr	r2, [pc, #284]	; (8000630 <SystemClock_Config+0x160>)
 8000514:	f023 0301 	bic.w	r3, r3, #1
 8000518:	62d3      	str	r3, [r2, #44]	; 0x2c
 800051a:	4b45      	ldr	r3, [pc, #276]	; (8000630 <SystemClock_Config+0x160>)
 800051c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800051e:	f003 0201 	and.w	r2, r3, #1
 8000522:	1d3b      	adds	r3, r7, #4
 8000524:	601a      	str	r2, [r3, #0]
 8000526:	4b43      	ldr	r3, [pc, #268]	; (8000634 <SystemClock_Config+0x164>)
 8000528:	699b      	ldr	r3, [r3, #24]
 800052a:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800052e:	4a41      	ldr	r2, [pc, #260]	; (8000634 <SystemClock_Config+0x164>)
 8000530:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000534:	6193      	str	r3, [r2, #24]
 8000536:	4b3f      	ldr	r3, [pc, #252]	; (8000634 <SystemClock_Config+0x164>)
 8000538:	699b      	ldr	r3, [r3, #24]
 800053a:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 800053e:	1d3b      	adds	r3, r7, #4
 8000540:	601a      	str	r2, [r3, #0]
 8000542:	1d3b      	adds	r3, r7, #4
 8000544:	681b      	ldr	r3, [r3, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000546:	bf00      	nop
 8000548:	4b3a      	ldr	r3, [pc, #232]	; (8000634 <SystemClock_Config+0x164>)
 800054a:	699b      	ldr	r3, [r3, #24]
 800054c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000550:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000554:	d1f8      	bne.n	8000548 <SystemClock_Config+0x78>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000556:	2302      	movs	r3, #2
 8000558:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 800055c:	2301      	movs	r3, #1
 800055e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000562:	2340      	movs	r3, #64	; 0x40
 8000564:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000568:	2302      	movs	r3, #2
 800056a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800056e:	2300      	movs	r3, #0
 8000570:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  RCC_OscInitStruct.PLL.PLLM = 32;
 8000574:	2320      	movs	r3, #32
 8000576:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  RCC_OscInitStruct.PLL.PLLN = 129;
 800057a:	2381      	movs	r3, #129	; 0x81
 800057c:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000580:	2302      	movs	r3, #2
 8000582:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000586:	2302      	movs	r3, #2
 8000588:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800058c:	2302      	movs	r3, #2
 800058e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
 8000592:	2304      	movs	r3, #4
 8000594:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000598:	2300      	movs	r3, #0
 800059a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800059e:	2300      	movs	r3, #0
 80005a0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005a4:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80005a8:	4618      	mov	r0, r3
 80005aa:	f001 f82f 	bl	800160c <HAL_RCC_OscConfig>
 80005ae:	4603      	mov	r3, r0
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	d001      	beq.n	80005b8 <SystemClock_Config+0xe8>
  {
    Error_Handler();
 80005b4:	f000 f8e8 	bl	8000788 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005b8:	233f      	movs	r3, #63	; 0x3f
 80005ba:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80005be:	2300      	movs	r3, #0
 80005c0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80005c4:	2300      	movs	r3, #0
 80005c6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80005ca:	2300      	movs	r3, #0
 80005cc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80005d0:	2300      	movs	r3, #0
 80005d2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 80005d6:	2300      	movs	r3, #0
 80005d8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 80005dc:	2300      	movs	r3, #0
 80005de:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80005e2:	2300      	movs	r3, #0
 80005e4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80005e8:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80005ec:	2100      	movs	r1, #0
 80005ee:	4618      	mov	r0, r3
 80005f0:	f001 fc1c 	bl	8001e2c <HAL_RCC_ClockConfig>
 80005f4:	4603      	mov	r3, r0
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d001      	beq.n	80005fe <SystemClock_Config+0x12e>
  {
    Error_Handler();
 80005fa:	f000 f8c5 	bl	8000788 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC;
 80005fe:	f107 0308 	add.w	r3, r7, #8
 8000602:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000606:	601a      	str	r2, [r3, #0]
  PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL;
 8000608:	f107 0308 	add.w	r3, r7, #8
 800060c:	2200      	movs	r2, #0
 800060e:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000610:	f107 0308 	add.w	r3, r7, #8
 8000614:	4618      	mov	r0, r3
 8000616:	f001 ff61 	bl	80024dc <HAL_RCCEx_PeriphCLKConfig>
 800061a:	4603      	mov	r3, r0
 800061c:	2b00      	cmp	r3, #0
 800061e:	d001      	beq.n	8000624 <SystemClock_Config+0x154>
  {
    Error_Handler();
 8000620:	f000 f8b2 	bl	8000788 <Error_Handler>
  }
}
 8000624:	bf00      	nop
 8000626:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800062a:	46bd      	mov	sp, r7
 800062c:	bd80      	pop	{r7, pc}
 800062e:	bf00      	nop
 8000630:	58000400 	.word	0x58000400
 8000634:	58024800 	.word	0x58024800

08000638 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b08a      	sub	sp, #40	; 0x28
 800063c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800063e:	1d3b      	adds	r3, r7, #4
 8000640:	2224      	movs	r2, #36	; 0x24
 8000642:	2100      	movs	r1, #0
 8000644:	4618      	mov	r0, r3
 8000646:	f006 f9bf 	bl	80069c8 <memset>
  /* USER CODE BEGIN DAC1_Init 1 */

  /* USER CODE END DAC1_Init 1 */
  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 800064a:	4b12      	ldr	r3, [pc, #72]	; (8000694 <MX_DAC1_Init+0x5c>)
 800064c:	4a12      	ldr	r2, [pc, #72]	; (8000698 <MX_DAC1_Init+0x60>)
 800064e:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000650:	4810      	ldr	r0, [pc, #64]	; (8000694 <MX_DAC1_Init+0x5c>)
 8000652:	f000 fbf4 	bl	8000e3e <HAL_DAC_Init>
 8000656:	4603      	mov	r3, r0
 8000658:	2b00      	cmp	r3, #0
 800065a:	d001      	beq.n	8000660 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 800065c:	f000 f894 	bl	8000788 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000660:	2300      	movs	r3, #0
 8000662:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000664:	2300      	movs	r3, #0
 8000666:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000668:	2300      	movs	r3, #0
 800066a:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 800066c:	2301      	movs	r3, #1
 800066e:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000670:	2300      	movs	r3, #0
 8000672:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000674:	1d3b      	adds	r3, r7, #4
 8000676:	2200      	movs	r2, #0
 8000678:	4619      	mov	r1, r3
 800067a:	4806      	ldr	r0, [pc, #24]	; (8000694 <MX_DAC1_Init+0x5c>)
 800067c:	f000 fc78 	bl	8000f70 <HAL_DAC_ConfigChannel>
 8000680:	4603      	mov	r3, r0
 8000682:	2b00      	cmp	r3, #0
 8000684:	d001      	beq.n	800068a <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 8000686:	f000 f87f 	bl	8000788 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 800068a:	bf00      	nop
 800068c:	3728      	adds	r7, #40	; 0x28
 800068e:	46bd      	mov	sp, r7
 8000690:	bd80      	pop	{r7, pc}
 8000692:	bf00      	nop
 8000694:	240000a0 	.word	0x240000a0
 8000698:	40007400 	.word	0x40007400

0800069c <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 800069c:	b480      	push	{r7}
 800069e:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 80006a0:	4b0d      	ldr	r3, [pc, #52]	; (80006d8 <MX_SDMMC1_SD_Init+0x3c>)
 80006a2:	4a0e      	ldr	r2, [pc, #56]	; (80006dc <MX_SDMMC1_SD_Init+0x40>)
 80006a4:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 80006a6:	4b0c      	ldr	r3, [pc, #48]	; (80006d8 <MX_SDMMC1_SD_Init+0x3c>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80006ac:	4b0a      	ldr	r3, [pc, #40]	; (80006d8 <MX_SDMMC1_SD_Init+0x3c>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 80006b2:	4b09      	ldr	r3, [pc, #36]	; (80006d8 <MX_SDMMC1_SD_Init+0x3c>)
 80006b4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80006b8:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80006ba:	4b07      	ldr	r3, [pc, #28]	; (80006d8 <MX_SDMMC1_SD_Init+0x3c>)
 80006bc:	2200      	movs	r2, #0
 80006be:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 0;
 80006c0:	4b05      	ldr	r3, [pc, #20]	; (80006d8 <MX_SDMMC1_SD_Init+0x3c>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	615a      	str	r2, [r3, #20]
  hsd1.Init.TranceiverPresent = SDMMC_TRANSCEIVER_NOT_PRESENT;
 80006c6:	4b04      	ldr	r3, [pc, #16]	; (80006d8 <MX_SDMMC1_SD_Init+0x3c>)
 80006c8:	2201      	movs	r2, #1
 80006ca:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 80006cc:	bf00      	nop
 80006ce:	46bd      	mov	sp, r7
 80006d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d4:	4770      	bx	lr
 80006d6:	bf00      	nop
 80006d8:	240000b4 	.word	0x240000b4
 80006dc:	52007000 	.word	0x52007000

080006e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b088      	sub	sp, #32
 80006e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006e6:	f107 030c 	add.w	r3, r7, #12
 80006ea:	2200      	movs	r2, #0
 80006ec:	601a      	str	r2, [r3, #0]
 80006ee:	605a      	str	r2, [r3, #4]
 80006f0:	609a      	str	r2, [r3, #8]
 80006f2:	60da      	str	r2, [r3, #12]
 80006f4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006f6:	4b22      	ldr	r3, [pc, #136]	; (8000780 <MX_GPIO_Init+0xa0>)
 80006f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006fc:	4a20      	ldr	r2, [pc, #128]	; (8000780 <MX_GPIO_Init+0xa0>)
 80006fe:	f043 0301 	orr.w	r3, r3, #1
 8000702:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000706:	4b1e      	ldr	r3, [pc, #120]	; (8000780 <MX_GPIO_Init+0xa0>)
 8000708:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800070c:	f003 0301 	and.w	r3, r3, #1
 8000710:	60bb      	str	r3, [r7, #8]
 8000712:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000714:	4b1a      	ldr	r3, [pc, #104]	; (8000780 <MX_GPIO_Init+0xa0>)
 8000716:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800071a:	4a19      	ldr	r2, [pc, #100]	; (8000780 <MX_GPIO_Init+0xa0>)
 800071c:	f043 0304 	orr.w	r3, r3, #4
 8000720:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000724:	4b16      	ldr	r3, [pc, #88]	; (8000780 <MX_GPIO_Init+0xa0>)
 8000726:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800072a:	f003 0304 	and.w	r3, r3, #4
 800072e:	607b      	str	r3, [r7, #4]
 8000730:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000732:	4b13      	ldr	r3, [pc, #76]	; (8000780 <MX_GPIO_Init+0xa0>)
 8000734:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000738:	4a11      	ldr	r2, [pc, #68]	; (8000780 <MX_GPIO_Init+0xa0>)
 800073a:	f043 0308 	orr.w	r3, r3, #8
 800073e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000742:	4b0f      	ldr	r3, [pc, #60]	; (8000780 <MX_GPIO_Init+0xa0>)
 8000744:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000748:	f003 0308 	and.w	r3, r3, #8
 800074c:	603b      	str	r3, [r7, #0]
 800074e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000750:	2200      	movs	r2, #0
 8000752:	2120      	movs	r1, #32
 8000754:	480b      	ldr	r0, [pc, #44]	; (8000784 <MX_GPIO_Init+0xa4>)
 8000756:	f000 feeb 	bl	8001530 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 800075a:	2320      	movs	r3, #32
 800075c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800075e:	2301      	movs	r3, #1
 8000760:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000762:	2300      	movs	r3, #0
 8000764:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000766:	2300      	movs	r3, #0
 8000768:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800076a:	f107 030c 	add.w	r3, r7, #12
 800076e:	4619      	mov	r1, r3
 8000770:	4804      	ldr	r0, [pc, #16]	; (8000784 <MX_GPIO_Init+0xa4>)
 8000772:	f000 fd2d 	bl	80011d0 <HAL_GPIO_Init>

}
 8000776:	bf00      	nop
 8000778:	3720      	adds	r7, #32
 800077a:	46bd      	mov	sp, r7
 800077c:	bd80      	pop	{r7, pc}
 800077e:	bf00      	nop
 8000780:	58024400 	.word	0x58024400
 8000784:	58020000 	.word	0x58020000

08000788 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000788:	b480      	push	{r7}
 800078a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800078c:	bf00      	nop
 800078e:	46bd      	mov	sp, r7
 8000790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000794:	4770      	bx	lr
	...

08000798 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000798:	b480      	push	{r7}
 800079a:	b083      	sub	sp, #12
 800079c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800079e:	4b0a      	ldr	r3, [pc, #40]	; (80007c8 <HAL_MspInit+0x30>)
 80007a0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80007a4:	4a08      	ldr	r2, [pc, #32]	; (80007c8 <HAL_MspInit+0x30>)
 80007a6:	f043 0302 	orr.w	r3, r3, #2
 80007aa:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80007ae:	4b06      	ldr	r3, [pc, #24]	; (80007c8 <HAL_MspInit+0x30>)
 80007b0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80007b4:	f003 0302 	and.w	r3, r3, #2
 80007b8:	607b      	str	r3, [r7, #4]
 80007ba:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007bc:	bf00      	nop
 80007be:	370c      	adds	r7, #12
 80007c0:	46bd      	mov	sp, r7
 80007c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c6:	4770      	bx	lr
 80007c8:	58024400 	.word	0x58024400

080007cc <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b08a      	sub	sp, #40	; 0x28
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007d4:	f107 0314 	add.w	r3, r7, #20
 80007d8:	2200      	movs	r2, #0
 80007da:	601a      	str	r2, [r3, #0]
 80007dc:	605a      	str	r2, [r3, #4]
 80007de:	609a      	str	r2, [r3, #8]
 80007e0:	60da      	str	r2, [r3, #12]
 80007e2:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	4a18      	ldr	r2, [pc, #96]	; (800084c <HAL_DAC_MspInit+0x80>)
 80007ea:	4293      	cmp	r3, r2
 80007ec:	d129      	bne.n	8000842 <HAL_DAC_MspInit+0x76>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 80007ee:	4b18      	ldr	r3, [pc, #96]	; (8000850 <HAL_DAC_MspInit+0x84>)
 80007f0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80007f4:	4a16      	ldr	r2, [pc, #88]	; (8000850 <HAL_DAC_MspInit+0x84>)
 80007f6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80007fa:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80007fe:	4b14      	ldr	r3, [pc, #80]	; (8000850 <HAL_DAC_MspInit+0x84>)
 8000800:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000804:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000808:	613b      	str	r3, [r7, #16]
 800080a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800080c:	4b10      	ldr	r3, [pc, #64]	; (8000850 <HAL_DAC_MspInit+0x84>)
 800080e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000812:	4a0f      	ldr	r2, [pc, #60]	; (8000850 <HAL_DAC_MspInit+0x84>)
 8000814:	f043 0301 	orr.w	r3, r3, #1
 8000818:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800081c:	4b0c      	ldr	r3, [pc, #48]	; (8000850 <HAL_DAC_MspInit+0x84>)
 800081e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000822:	f003 0301 	and.w	r3, r3, #1
 8000826:	60fb      	str	r3, [r7, #12]
 8000828:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800082a:	2310      	movs	r3, #16
 800082c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800082e:	2303      	movs	r3, #3
 8000830:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000832:	2300      	movs	r3, #0
 8000834:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000836:	f107 0314 	add.w	r3, r7, #20
 800083a:	4619      	mov	r1, r3
 800083c:	4805      	ldr	r0, [pc, #20]	; (8000854 <HAL_DAC_MspInit+0x88>)
 800083e:	f000 fcc7 	bl	80011d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8000842:	bf00      	nop
 8000844:	3728      	adds	r7, #40	; 0x28
 8000846:	46bd      	mov	sp, r7
 8000848:	bd80      	pop	{r7, pc}
 800084a:	bf00      	nop
 800084c:	40007400 	.word	0x40007400
 8000850:	58024400 	.word	0x58024400
 8000854:	58020000 	.word	0x58020000

08000858 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b08a      	sub	sp, #40	; 0x28
 800085c:	af00      	add	r7, sp, #0
 800085e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000860:	f107 0314 	add.w	r3, r7, #20
 8000864:	2200      	movs	r2, #0
 8000866:	601a      	str	r2, [r3, #0]
 8000868:	605a      	str	r2, [r3, #4]
 800086a:	609a      	str	r2, [r3, #8]
 800086c:	60da      	str	r2, [r3, #12]
 800086e:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDMMC1)
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	4a2a      	ldr	r2, [pc, #168]	; (8000920 <HAL_SD_MspInit+0xc8>)
 8000876:	4293      	cmp	r3, r2
 8000878:	d14d      	bne.n	8000916 <HAL_SD_MspInit+0xbe>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 800087a:	4b2a      	ldr	r3, [pc, #168]	; (8000924 <HAL_SD_MspInit+0xcc>)
 800087c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8000880:	4a28      	ldr	r2, [pc, #160]	; (8000924 <HAL_SD_MspInit+0xcc>)
 8000882:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000886:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 800088a:	4b26      	ldr	r3, [pc, #152]	; (8000924 <HAL_SD_MspInit+0xcc>)
 800088c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8000890:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000894:	613b      	str	r3, [r7, #16]
 8000896:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000898:	4b22      	ldr	r3, [pc, #136]	; (8000924 <HAL_SD_MspInit+0xcc>)
 800089a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800089e:	4a21      	ldr	r2, [pc, #132]	; (8000924 <HAL_SD_MspInit+0xcc>)
 80008a0:	f043 0304 	orr.w	r3, r3, #4
 80008a4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80008a8:	4b1e      	ldr	r3, [pc, #120]	; (8000924 <HAL_SD_MspInit+0xcc>)
 80008aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008ae:	f003 0304 	and.w	r3, r3, #4
 80008b2:	60fb      	str	r3, [r7, #12]
 80008b4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80008b6:	4b1b      	ldr	r3, [pc, #108]	; (8000924 <HAL_SD_MspInit+0xcc>)
 80008b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008bc:	4a19      	ldr	r2, [pc, #100]	; (8000924 <HAL_SD_MspInit+0xcc>)
 80008be:	f043 0308 	orr.w	r3, r3, #8
 80008c2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80008c6:	4b17      	ldr	r3, [pc, #92]	; (8000924 <HAL_SD_MspInit+0xcc>)
 80008c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008cc:	f003 0308 	and.w	r3, r3, #8
 80008d0:	60bb      	str	r3, [r7, #8]
 80008d2:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDMMC1_D2
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80008d4:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 80008d8:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008da:	2302      	movs	r3, #2
 80008dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008de:	2300      	movs	r3, #0
 80008e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008e2:	2303      	movs	r3, #3
 80008e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 80008e6:	230c      	movs	r3, #12
 80008e8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008ea:	f107 0314 	add.w	r3, r7, #20
 80008ee:	4619      	mov	r1, r3
 80008f0:	480d      	ldr	r0, [pc, #52]	; (8000928 <HAL_SD_MspInit+0xd0>)
 80008f2:	f000 fc6d 	bl	80011d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80008f6:	2304      	movs	r3, #4
 80008f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008fa:	2302      	movs	r3, #2
 80008fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008fe:	2300      	movs	r3, #0
 8000900:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000902:	2303      	movs	r3, #3
 8000904:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8000906:	230c      	movs	r3, #12
 8000908:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800090a:	f107 0314 	add.w	r3, r7, #20
 800090e:	4619      	mov	r1, r3
 8000910:	4806      	ldr	r0, [pc, #24]	; (800092c <HAL_SD_MspInit+0xd4>)
 8000912:	f000 fc5d 	bl	80011d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 8000916:	bf00      	nop
 8000918:	3728      	adds	r7, #40	; 0x28
 800091a:	46bd      	mov	sp, r7
 800091c:	bd80      	pop	{r7, pc}
 800091e:	bf00      	nop
 8000920:	52007000 	.word	0x52007000
 8000924:	58024400 	.word	0x58024400
 8000928:	58020800 	.word	0x58020800
 800092c:	58020c00 	.word	0x58020c00

08000930 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000930:	b480      	push	{r7}
 8000932:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000934:	bf00      	nop
 8000936:	46bd      	mov	sp, r7
 8000938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093c:	4770      	bx	lr

0800093e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800093e:	b480      	push	{r7}
 8000940:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000942:	e7fe      	b.n	8000942 <HardFault_Handler+0x4>

08000944 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000944:	b480      	push	{r7}
 8000946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000948:	e7fe      	b.n	8000948 <MemManage_Handler+0x4>

0800094a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800094a:	b480      	push	{r7}
 800094c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800094e:	e7fe      	b.n	800094e <BusFault_Handler+0x4>

08000950 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000950:	b480      	push	{r7}
 8000952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000954:	e7fe      	b.n	8000954 <UsageFault_Handler+0x4>

08000956 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000956:	b480      	push	{r7}
 8000958:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800095a:	bf00      	nop
 800095c:	46bd      	mov	sp, r7
 800095e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000962:	4770      	bx	lr

08000964 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000964:	b480      	push	{r7}
 8000966:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000968:	bf00      	nop
 800096a:	46bd      	mov	sp, r7
 800096c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000970:	4770      	bx	lr

08000972 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000972:	b480      	push	{r7}
 8000974:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000976:	bf00      	nop
 8000978:	46bd      	mov	sp, r7
 800097a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097e:	4770      	bx	lr

08000980 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000984:	f000 f92a 	bl	8000bdc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000988:	bf00      	nop
 800098a:	bd80      	pop	{r7, pc}

0800098c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800098c:	b480      	push	{r7}
 800098e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000990:	4b39      	ldr	r3, [pc, #228]	; (8000a78 <SystemInit+0xec>)
 8000992:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000996:	4a38      	ldr	r2, [pc, #224]	; (8000a78 <SystemInit+0xec>)
 8000998:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800099c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80009a0:	4b36      	ldr	r3, [pc, #216]	; (8000a7c <SystemInit+0xf0>)
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	f003 030f 	and.w	r3, r3, #15
 80009a8:	2b06      	cmp	r3, #6
 80009aa:	d807      	bhi.n	80009bc <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80009ac:	4b33      	ldr	r3, [pc, #204]	; (8000a7c <SystemInit+0xf0>)
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	f023 030f 	bic.w	r3, r3, #15
 80009b4:	4a31      	ldr	r2, [pc, #196]	; (8000a7c <SystemInit+0xf0>)
 80009b6:	f043 0307 	orr.w	r3, r3, #7
 80009ba:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80009bc:	4b30      	ldr	r3, [pc, #192]	; (8000a80 <SystemInit+0xf4>)
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	4a2f      	ldr	r2, [pc, #188]	; (8000a80 <SystemInit+0xf4>)
 80009c2:	f043 0301 	orr.w	r3, r3, #1
 80009c6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80009c8:	4b2d      	ldr	r3, [pc, #180]	; (8000a80 <SystemInit+0xf4>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80009ce:	4b2c      	ldr	r3, [pc, #176]	; (8000a80 <SystemInit+0xf4>)
 80009d0:	681a      	ldr	r2, [r3, #0]
 80009d2:	492b      	ldr	r1, [pc, #172]	; (8000a80 <SystemInit+0xf4>)
 80009d4:	4b2b      	ldr	r3, [pc, #172]	; (8000a84 <SystemInit+0xf8>)
 80009d6:	4013      	ands	r3, r2
 80009d8:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80009da:	4b28      	ldr	r3, [pc, #160]	; (8000a7c <SystemInit+0xf0>)
 80009dc:	681b      	ldr	r3, [r3, #0]
 80009de:	f003 030f 	and.w	r3, r3, #15
 80009e2:	2b07      	cmp	r3, #7
 80009e4:	d907      	bls.n	80009f6 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80009e6:	4b25      	ldr	r3, [pc, #148]	; (8000a7c <SystemInit+0xf0>)
 80009e8:	681b      	ldr	r3, [r3, #0]
 80009ea:	f023 030f 	bic.w	r3, r3, #15
 80009ee:	4a23      	ldr	r2, [pc, #140]	; (8000a7c <SystemInit+0xf0>)
 80009f0:	f043 0307 	orr.w	r3, r3, #7
 80009f4:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80009f6:	4b22      	ldr	r3, [pc, #136]	; (8000a80 <SystemInit+0xf4>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80009fc:	4b20      	ldr	r3, [pc, #128]	; (8000a80 <SystemInit+0xf4>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000a02:	4b1f      	ldr	r3, [pc, #124]	; (8000a80 <SystemInit+0xf4>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000a08:	4b1d      	ldr	r3, [pc, #116]	; (8000a80 <SystemInit+0xf4>)
 8000a0a:	4a1f      	ldr	r2, [pc, #124]	; (8000a88 <SystemInit+0xfc>)
 8000a0c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000a0e:	4b1c      	ldr	r3, [pc, #112]	; (8000a80 <SystemInit+0xf4>)
 8000a10:	4a1e      	ldr	r2, [pc, #120]	; (8000a8c <SystemInit+0x100>)
 8000a12:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000a14:	4b1a      	ldr	r3, [pc, #104]	; (8000a80 <SystemInit+0xf4>)
 8000a16:	4a1e      	ldr	r2, [pc, #120]	; (8000a90 <SystemInit+0x104>)
 8000a18:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000a1a:	4b19      	ldr	r3, [pc, #100]	; (8000a80 <SystemInit+0xf4>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000a20:	4b17      	ldr	r3, [pc, #92]	; (8000a80 <SystemInit+0xf4>)
 8000a22:	4a1b      	ldr	r2, [pc, #108]	; (8000a90 <SystemInit+0x104>)
 8000a24:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000a26:	4b16      	ldr	r3, [pc, #88]	; (8000a80 <SystemInit+0xf4>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000a2c:	4b14      	ldr	r3, [pc, #80]	; (8000a80 <SystemInit+0xf4>)
 8000a2e:	4a18      	ldr	r2, [pc, #96]	; (8000a90 <SystemInit+0x104>)
 8000a30:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000a32:	4b13      	ldr	r3, [pc, #76]	; (8000a80 <SystemInit+0xf4>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000a38:	4b11      	ldr	r3, [pc, #68]	; (8000a80 <SystemInit+0xf4>)
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	4a10      	ldr	r2, [pc, #64]	; (8000a80 <SystemInit+0xf4>)
 8000a3e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000a42:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000a44:	4b0e      	ldr	r3, [pc, #56]	; (8000a80 <SystemInit+0xf4>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000a4a:	4b12      	ldr	r3, [pc, #72]	; (8000a94 <SystemInit+0x108>)
 8000a4c:	681a      	ldr	r2, [r3, #0]
 8000a4e:	4b12      	ldr	r3, [pc, #72]	; (8000a98 <SystemInit+0x10c>)
 8000a50:	4013      	ands	r3, r2
 8000a52:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000a56:	d202      	bcs.n	8000a5e <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000a58:	4b10      	ldr	r3, [pc, #64]	; (8000a9c <SystemInit+0x110>)
 8000a5a:	2201      	movs	r2, #1
 8000a5c:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000a5e:	4b10      	ldr	r3, [pc, #64]	; (8000aa0 <SystemInit+0x114>)
 8000a60:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000a64:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000a66:	4b04      	ldr	r3, [pc, #16]	; (8000a78 <SystemInit+0xec>)
 8000a68:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000a6c:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8000a6e:	bf00      	nop
 8000a70:	46bd      	mov	sp, r7
 8000a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a76:	4770      	bx	lr
 8000a78:	e000ed00 	.word	0xe000ed00
 8000a7c:	52002000 	.word	0x52002000
 8000a80:	58024400 	.word	0x58024400
 8000a84:	eaf6ed7f 	.word	0xeaf6ed7f
 8000a88:	02020200 	.word	0x02020200
 8000a8c:	01ff0000 	.word	0x01ff0000
 8000a90:	01010280 	.word	0x01010280
 8000a94:	5c001000 	.word	0x5c001000
 8000a98:	ffff0000 	.word	0xffff0000
 8000a9c:	51008108 	.word	0x51008108
 8000aa0:	52004000 	.word	0x52004000

08000aa4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000aa4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000adc <LoopFillZerobss+0x10>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000aa8:	f7ff ff70 	bl	800098c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000aac:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000aae:	e003      	b.n	8000ab8 <LoopCopyDataInit>

08000ab0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000ab0:	4b0b      	ldr	r3, [pc, #44]	; (8000ae0 <LoopFillZerobss+0x14>)
  ldr  r3, [r3, r1]
 8000ab2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000ab4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000ab6:	3104      	adds	r1, #4

08000ab8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000ab8:	480a      	ldr	r0, [pc, #40]	; (8000ae4 <LoopFillZerobss+0x18>)
  ldr  r3, =_edata
 8000aba:	4b0b      	ldr	r3, [pc, #44]	; (8000ae8 <LoopFillZerobss+0x1c>)
  adds  r2, r0, r1
 8000abc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000abe:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000ac0:	d3f6      	bcc.n	8000ab0 <CopyDataInit>
  ldr  r2, =_sbss
 8000ac2:	4a0a      	ldr	r2, [pc, #40]	; (8000aec <LoopFillZerobss+0x20>)
  b  LoopFillZerobss
 8000ac4:	e002      	b.n	8000acc <LoopFillZerobss>

08000ac6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000ac6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000ac8:	f842 3b04 	str.w	r3, [r2], #4

08000acc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000acc:	4b08      	ldr	r3, [pc, #32]	; (8000af0 <LoopFillZerobss+0x24>)
  cmp  r2, r3
 8000ace:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000ad0:	d3f9      	bcc.n	8000ac6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000ad2:	f005 ff55 	bl	8006980 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ad6:	f7ff fbff 	bl	80002d8 <main>
  bx  lr    
 8000ada:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000adc:	24080000 	.word	0x24080000
  ldr  r3, =_sidata
 8000ae0:	08008910 	.word	0x08008910
  ldr  r0, =_sdata
 8000ae4:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 8000ae8:	24000078 	.word	0x24000078
  ldr  r2, =_sbss
 8000aec:	24000078 	.word	0x24000078
  ldr  r3, = _ebss
 8000af0:	240005a0 	.word	0x240005a0

08000af4 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000af4:	e7fe      	b.n	8000af4 <ADC3_IRQHandler>
	...

08000af8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b082      	sub	sp, #8
 8000afc:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000afe:	2003      	movs	r0, #3
 8000b00:	f000 f96c 	bl	8000ddc <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000b04:	f001 fb48 	bl	8002198 <HAL_RCC_GetSysClockFreq>
 8000b08:	4601      	mov	r1, r0
 8000b0a:	4b15      	ldr	r3, [pc, #84]	; (8000b60 <HAL_Init+0x68>)
 8000b0c:	699b      	ldr	r3, [r3, #24]
 8000b0e:	0a1b      	lsrs	r3, r3, #8
 8000b10:	f003 030f 	and.w	r3, r3, #15
 8000b14:	4a13      	ldr	r2, [pc, #76]	; (8000b64 <HAL_Init+0x6c>)
 8000b16:	5cd3      	ldrb	r3, [r2, r3]
 8000b18:	f003 031f 	and.w	r3, r3, #31
 8000b1c:	fa21 f303 	lsr.w	r3, r1, r3
 8000b20:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000b22:	4b0f      	ldr	r3, [pc, #60]	; (8000b60 <HAL_Init+0x68>)
 8000b24:	699b      	ldr	r3, [r3, #24]
 8000b26:	f003 030f 	and.w	r3, r3, #15
 8000b2a:	4a0e      	ldr	r2, [pc, #56]	; (8000b64 <HAL_Init+0x6c>)
 8000b2c:	5cd3      	ldrb	r3, [r2, r3]
 8000b2e:	f003 031f 	and.w	r3, r3, #31
 8000b32:	687a      	ldr	r2, [r7, #4]
 8000b34:	fa22 f303 	lsr.w	r3, r2, r3
 8000b38:	4a0b      	ldr	r2, [pc, #44]	; (8000b68 <HAL_Init+0x70>)
 8000b3a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000b3c:	4a0b      	ldr	r2, [pc, #44]	; (8000b6c <HAL_Init+0x74>)
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000b42:	2000      	movs	r0, #0
 8000b44:	f000 f814 	bl	8000b70 <HAL_InitTick>
 8000b48:	4603      	mov	r3, r0
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d001      	beq.n	8000b52 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000b4e:	2301      	movs	r3, #1
 8000b50:	e002      	b.n	8000b58 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000b52:	f7ff fe21 	bl	8000798 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b56:	2300      	movs	r3, #0
}
 8000b58:	4618      	mov	r0, r3
 8000b5a:	3708      	adds	r7, #8
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	bd80      	pop	{r7, pc}
 8000b60:	58024400 	.word	0x58024400
 8000b64:	08008690 	.word	0x08008690
 8000b68:	24000004 	.word	0x24000004
 8000b6c:	24000000 	.word	0x24000000

08000b70 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b082      	sub	sp, #8
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000b78:	4b15      	ldr	r3, [pc, #84]	; (8000bd0 <HAL_InitTick+0x60>)
 8000b7a:	781b      	ldrb	r3, [r3, #0]
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d101      	bne.n	8000b84 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000b80:	2301      	movs	r3, #1
 8000b82:	e021      	b.n	8000bc8 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000b84:	4b13      	ldr	r3, [pc, #76]	; (8000bd4 <HAL_InitTick+0x64>)
 8000b86:	681a      	ldr	r2, [r3, #0]
 8000b88:	4b11      	ldr	r3, [pc, #68]	; (8000bd0 <HAL_InitTick+0x60>)
 8000b8a:	781b      	ldrb	r3, [r3, #0]
 8000b8c:	4619      	mov	r1, r3
 8000b8e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b92:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b96:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	f000 f943 	bl	8000e26 <HAL_SYSTICK_Config>
 8000ba0:	4603      	mov	r3, r0
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d001      	beq.n	8000baa <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000ba6:	2301      	movs	r3, #1
 8000ba8:	e00e      	b.n	8000bc8 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	2b0f      	cmp	r3, #15
 8000bae:	d80a      	bhi.n	8000bc6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	6879      	ldr	r1, [r7, #4]
 8000bb4:	f04f 30ff 	mov.w	r0, #4294967295
 8000bb8:	f000 f91b 	bl	8000df2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000bbc:	4a06      	ldr	r2, [pc, #24]	; (8000bd8 <HAL_InitTick+0x68>)
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	e000      	b.n	8000bc8 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000bc6:	2301      	movs	r3, #1
}
 8000bc8:	4618      	mov	r0, r3
 8000bca:	3708      	adds	r7, #8
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	bd80      	pop	{r7, pc}
 8000bd0:	2400000c 	.word	0x2400000c
 8000bd4:	24000000 	.word	0x24000000
 8000bd8:	24000008 	.word	0x24000008

08000bdc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000be0:	4b06      	ldr	r3, [pc, #24]	; (8000bfc <HAL_IncTick+0x20>)
 8000be2:	781b      	ldrb	r3, [r3, #0]
 8000be4:	461a      	mov	r2, r3
 8000be6:	4b06      	ldr	r3, [pc, #24]	; (8000c00 <HAL_IncTick+0x24>)
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	4413      	add	r3, r2
 8000bec:	4a04      	ldr	r2, [pc, #16]	; (8000c00 <HAL_IncTick+0x24>)
 8000bee:	6013      	str	r3, [r2, #0]
}
 8000bf0:	bf00      	nop
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf8:	4770      	bx	lr
 8000bfa:	bf00      	nop
 8000bfc:	2400000c 	.word	0x2400000c
 8000c00:	24000134 	.word	0x24000134

08000c04 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c04:	b480      	push	{r7}
 8000c06:	af00      	add	r7, sp, #0
  return uwTick;
 8000c08:	4b03      	ldr	r3, [pc, #12]	; (8000c18 <HAL_GetTick+0x14>)
 8000c0a:	681b      	ldr	r3, [r3, #0]
}
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c14:	4770      	bx	lr
 8000c16:	bf00      	nop
 8000c18:	24000134 	.word	0x24000134

08000c1c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b084      	sub	sp, #16
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c24:	f7ff ffee 	bl	8000c04 <HAL_GetTick>
 8000c28:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c2e:	68fb      	ldr	r3, [r7, #12]
 8000c30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c34:	d005      	beq.n	8000c42 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c36:	4b09      	ldr	r3, [pc, #36]	; (8000c5c <HAL_Delay+0x40>)
 8000c38:	781b      	ldrb	r3, [r3, #0]
 8000c3a:	461a      	mov	r2, r3
 8000c3c:	68fb      	ldr	r3, [r7, #12]
 8000c3e:	4413      	add	r3, r2
 8000c40:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000c42:	bf00      	nop
 8000c44:	f7ff ffde 	bl	8000c04 <HAL_GetTick>
 8000c48:	4602      	mov	r2, r0
 8000c4a:	68bb      	ldr	r3, [r7, #8]
 8000c4c:	1ad3      	subs	r3, r2, r3
 8000c4e:	68fa      	ldr	r2, [r7, #12]
 8000c50:	429a      	cmp	r2, r3
 8000c52:	d8f7      	bhi.n	8000c44 <HAL_Delay+0x28>
  {
  }
}
 8000c54:	bf00      	nop
 8000c56:	3710      	adds	r7, #16
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	bd80      	pop	{r7, pc}
 8000c5c:	2400000c 	.word	0x2400000c

08000c60 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000c60:	b480      	push	{r7}
 8000c62:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8000c64:	4b03      	ldr	r3, [pc, #12]	; (8000c74 <HAL_GetREVID+0x14>)
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	0c1b      	lsrs	r3, r3, #16
}
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c72:	4770      	bx	lr
 8000c74:	5c001000 	.word	0x5c001000

08000c78 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	b085      	sub	sp, #20
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	f003 0307 	and.w	r3, r3, #7
 8000c86:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c88:	4b0b      	ldr	r3, [pc, #44]	; (8000cb8 <__NVIC_SetPriorityGrouping+0x40>)
 8000c8a:	68db      	ldr	r3, [r3, #12]
 8000c8c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c8e:	68ba      	ldr	r2, [r7, #8]
 8000c90:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c94:	4013      	ands	r3, r2
 8000c96:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c98:	68fb      	ldr	r3, [r7, #12]
 8000c9a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c9c:	68bb      	ldr	r3, [r7, #8]
 8000c9e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000ca0:	4b06      	ldr	r3, [pc, #24]	; (8000cbc <__NVIC_SetPriorityGrouping+0x44>)
 8000ca2:	4313      	orrs	r3, r2
 8000ca4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ca6:	4a04      	ldr	r2, [pc, #16]	; (8000cb8 <__NVIC_SetPriorityGrouping+0x40>)
 8000ca8:	68bb      	ldr	r3, [r7, #8]
 8000caa:	60d3      	str	r3, [r2, #12]
}
 8000cac:	bf00      	nop
 8000cae:	3714      	adds	r7, #20
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb6:	4770      	bx	lr
 8000cb8:	e000ed00 	.word	0xe000ed00
 8000cbc:	05fa0000 	.word	0x05fa0000

08000cc0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cc4:	4b04      	ldr	r3, [pc, #16]	; (8000cd8 <__NVIC_GetPriorityGrouping+0x18>)
 8000cc6:	68db      	ldr	r3, [r3, #12]
 8000cc8:	0a1b      	lsrs	r3, r3, #8
 8000cca:	f003 0307 	and.w	r3, r3, #7
}
 8000cce:	4618      	mov	r0, r3
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd6:	4770      	bx	lr
 8000cd8:	e000ed00 	.word	0xe000ed00

08000cdc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	b083      	sub	sp, #12
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	6039      	str	r1, [r7, #0]
 8000ce6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000ce8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	db0a      	blt.n	8000d06 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cf0:	683b      	ldr	r3, [r7, #0]
 8000cf2:	b2da      	uxtb	r2, r3
 8000cf4:	490c      	ldr	r1, [pc, #48]	; (8000d28 <__NVIC_SetPriority+0x4c>)
 8000cf6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000cfa:	0112      	lsls	r2, r2, #4
 8000cfc:	b2d2      	uxtb	r2, r2
 8000cfe:	440b      	add	r3, r1
 8000d00:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d04:	e00a      	b.n	8000d1c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d06:	683b      	ldr	r3, [r7, #0]
 8000d08:	b2da      	uxtb	r2, r3
 8000d0a:	4908      	ldr	r1, [pc, #32]	; (8000d2c <__NVIC_SetPriority+0x50>)
 8000d0c:	88fb      	ldrh	r3, [r7, #6]
 8000d0e:	f003 030f 	and.w	r3, r3, #15
 8000d12:	3b04      	subs	r3, #4
 8000d14:	0112      	lsls	r2, r2, #4
 8000d16:	b2d2      	uxtb	r2, r2
 8000d18:	440b      	add	r3, r1
 8000d1a:	761a      	strb	r2, [r3, #24]
}
 8000d1c:	bf00      	nop
 8000d1e:	370c      	adds	r7, #12
 8000d20:	46bd      	mov	sp, r7
 8000d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d26:	4770      	bx	lr
 8000d28:	e000e100 	.word	0xe000e100
 8000d2c:	e000ed00 	.word	0xe000ed00

08000d30 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d30:	b480      	push	{r7}
 8000d32:	b089      	sub	sp, #36	; 0x24
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	60f8      	str	r0, [r7, #12]
 8000d38:	60b9      	str	r1, [r7, #8]
 8000d3a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d3c:	68fb      	ldr	r3, [r7, #12]
 8000d3e:	f003 0307 	and.w	r3, r3, #7
 8000d42:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d44:	69fb      	ldr	r3, [r7, #28]
 8000d46:	f1c3 0307 	rsb	r3, r3, #7
 8000d4a:	2b04      	cmp	r3, #4
 8000d4c:	bf28      	it	cs
 8000d4e:	2304      	movcs	r3, #4
 8000d50:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d52:	69fb      	ldr	r3, [r7, #28]
 8000d54:	3304      	adds	r3, #4
 8000d56:	2b06      	cmp	r3, #6
 8000d58:	d902      	bls.n	8000d60 <NVIC_EncodePriority+0x30>
 8000d5a:	69fb      	ldr	r3, [r7, #28]
 8000d5c:	3b03      	subs	r3, #3
 8000d5e:	e000      	b.n	8000d62 <NVIC_EncodePriority+0x32>
 8000d60:	2300      	movs	r3, #0
 8000d62:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d64:	f04f 32ff 	mov.w	r2, #4294967295
 8000d68:	69bb      	ldr	r3, [r7, #24]
 8000d6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d6e:	43da      	mvns	r2, r3
 8000d70:	68bb      	ldr	r3, [r7, #8]
 8000d72:	401a      	ands	r2, r3
 8000d74:	697b      	ldr	r3, [r7, #20]
 8000d76:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d78:	f04f 31ff 	mov.w	r1, #4294967295
 8000d7c:	697b      	ldr	r3, [r7, #20]
 8000d7e:	fa01 f303 	lsl.w	r3, r1, r3
 8000d82:	43d9      	mvns	r1, r3
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d88:	4313      	orrs	r3, r2
         );
}
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	3724      	adds	r7, #36	; 0x24
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d94:	4770      	bx	lr
	...

08000d98 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b082      	sub	sp, #8
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	3b01      	subs	r3, #1
 8000da4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000da8:	d301      	bcc.n	8000dae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000daa:	2301      	movs	r3, #1
 8000dac:	e00f      	b.n	8000dce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000dae:	4a0a      	ldr	r2, [pc, #40]	; (8000dd8 <SysTick_Config+0x40>)
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	3b01      	subs	r3, #1
 8000db4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000db6:	210f      	movs	r1, #15
 8000db8:	f04f 30ff 	mov.w	r0, #4294967295
 8000dbc:	f7ff ff8e 	bl	8000cdc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000dc0:	4b05      	ldr	r3, [pc, #20]	; (8000dd8 <SysTick_Config+0x40>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000dc6:	4b04      	ldr	r3, [pc, #16]	; (8000dd8 <SysTick_Config+0x40>)
 8000dc8:	2207      	movs	r2, #7
 8000dca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000dcc:	2300      	movs	r3, #0
}
 8000dce:	4618      	mov	r0, r3
 8000dd0:	3708      	adds	r7, #8
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	bd80      	pop	{r7, pc}
 8000dd6:	bf00      	nop
 8000dd8:	e000e010 	.word	0xe000e010

08000ddc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b082      	sub	sp, #8
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000de4:	6878      	ldr	r0, [r7, #4]
 8000de6:	f7ff ff47 	bl	8000c78 <__NVIC_SetPriorityGrouping>
}
 8000dea:	bf00      	nop
 8000dec:	3708      	adds	r7, #8
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bd80      	pop	{r7, pc}

08000df2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000df2:	b580      	push	{r7, lr}
 8000df4:	b086      	sub	sp, #24
 8000df6:	af00      	add	r7, sp, #0
 8000df8:	4603      	mov	r3, r0
 8000dfa:	60b9      	str	r1, [r7, #8]
 8000dfc:	607a      	str	r2, [r7, #4]
 8000dfe:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000e00:	f7ff ff5e 	bl	8000cc0 <__NVIC_GetPriorityGrouping>
 8000e04:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e06:	687a      	ldr	r2, [r7, #4]
 8000e08:	68b9      	ldr	r1, [r7, #8]
 8000e0a:	6978      	ldr	r0, [r7, #20]
 8000e0c:	f7ff ff90 	bl	8000d30 <NVIC_EncodePriority>
 8000e10:	4602      	mov	r2, r0
 8000e12:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000e16:	4611      	mov	r1, r2
 8000e18:	4618      	mov	r0, r3
 8000e1a:	f7ff ff5f 	bl	8000cdc <__NVIC_SetPriority>
}
 8000e1e:	bf00      	nop
 8000e20:	3718      	adds	r7, #24
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bd80      	pop	{r7, pc}

08000e26 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e26:	b580      	push	{r7, lr}
 8000e28:	b082      	sub	sp, #8
 8000e2a:	af00      	add	r7, sp, #0
 8000e2c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e2e:	6878      	ldr	r0, [r7, #4]
 8000e30:	f7ff ffb2 	bl	8000d98 <SysTick_Config>
 8000e34:	4603      	mov	r3, r0
}
 8000e36:	4618      	mov	r0, r3
 8000e38:	3708      	adds	r7, #8
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bd80      	pop	{r7, pc}

08000e3e <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8000e3e:	b580      	push	{r7, lr}
 8000e40:	b082      	sub	sp, #8
 8000e42:	af00      	add	r7, sp, #0
 8000e44:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d101      	bne.n	8000e50 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8000e4c:	2301      	movs	r3, #1
 8000e4e:	e014      	b.n	8000e7a <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	791b      	ldrb	r3, [r3, #4]
 8000e54:	b2db      	uxtb	r3, r3
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d105      	bne.n	8000e66 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8000e60:	6878      	ldr	r0, [r7, #4]
 8000e62:	f7ff fcb3 	bl	80007cc <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	2202      	movs	r2, #2
 8000e6a:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	2200      	movs	r2, #0
 8000e70:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	2201      	movs	r2, #1
 8000e76:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8000e78:	2300      	movs	r3, #0
}
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	3708      	adds	r7, #8
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bd80      	pop	{r7, pc}

08000e82 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8000e82:	b480      	push	{r7}
 8000e84:	b083      	sub	sp, #12
 8000e86:	af00      	add	r7, sp, #0
 8000e88:	6078      	str	r0, [r7, #4]
 8000e8a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	795b      	ldrb	r3, [r3, #5]
 8000e90:	2b01      	cmp	r3, #1
 8000e92:	d101      	bne.n	8000e98 <HAL_DAC_Start+0x16>
 8000e94:	2302      	movs	r3, #2
 8000e96:	e040      	b.n	8000f1a <HAL_DAC_Start+0x98>
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	2201      	movs	r2, #1
 8000e9c:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	2202      	movs	r2, #2
 8000ea2:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	6819      	ldr	r1, [r3, #0]
 8000eaa:	683b      	ldr	r3, [r7, #0]
 8000eac:	f003 0310 	and.w	r3, r3, #16
 8000eb0:	2201      	movs	r2, #1
 8000eb2:	409a      	lsls	r2, r3
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	430a      	orrs	r2, r1
 8000eba:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 8000ebc:	683b      	ldr	r3, [r7, #0]
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d10f      	bne.n	8000ee2 <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8000ecc:	2b02      	cmp	r3, #2
 8000ece:	d11d      	bne.n	8000f0c <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	685a      	ldr	r2, [r3, #4]
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	f042 0201 	orr.w	r2, r2, #1
 8000ede:	605a      	str	r2, [r3, #4]
 8000ee0:	e014      	b.n	8000f0c <HAL_DAC_Start+0x8a>
    }
  }
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8000eec:	683b      	ldr	r3, [r7, #0]
 8000eee:	f003 0310 	and.w	r3, r3, #16
 8000ef2:	2102      	movs	r1, #2
 8000ef4:	fa01 f303 	lsl.w	r3, r1, r3
 8000ef8:	429a      	cmp	r2, r3
 8000efa:	d107      	bne.n	8000f0c <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	685a      	ldr	r2, [r3, #4]
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	f042 0202 	orr.w	r2, r2, #2
 8000f0a:	605a      	str	r2, [r3, #4]
    }
  }

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	2201      	movs	r2, #1
 8000f10:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	2200      	movs	r2, #0
 8000f16:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8000f18:	2300      	movs	r3, #0
}
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	370c      	adds	r7, #12
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f24:	4770      	bx	lr

08000f26 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8000f26:	b480      	push	{r7}
 8000f28:	b087      	sub	sp, #28
 8000f2a:	af00      	add	r7, sp, #0
 8000f2c:	60f8      	str	r0, [r7, #12]
 8000f2e:	60b9      	str	r1, [r7, #8]
 8000f30:	607a      	str	r2, [r7, #4]
 8000f32:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0;
 8000f34:	2300      	movs	r3, #0
 8000f36:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8000f38:	68fb      	ldr	r3, [r7, #12]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8000f3e:	68bb      	ldr	r3, [r7, #8]
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d105      	bne.n	8000f50 <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8000f44:	697a      	ldr	r2, [r7, #20]
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	4413      	add	r3, r2
 8000f4a:	3308      	adds	r3, #8
 8000f4c:	617b      	str	r3, [r7, #20]
 8000f4e:	e004      	b.n	8000f5a <HAL_DAC_SetValue+0x34>
  }
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8000f50:	697a      	ldr	r2, [r7, #20]
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	4413      	add	r3, r2
 8000f56:	3314      	adds	r3, #20
 8000f58:	617b      	str	r3, [r7, #20]
  }

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8000f5a:	697b      	ldr	r3, [r7, #20]
 8000f5c:	461a      	mov	r2, r3
 8000f5e:	683b      	ldr	r3, [r7, #0]
 8000f60:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8000f62:	2300      	movs	r3, #0
}
 8000f64:	4618      	mov	r0, r3
 8000f66:	371c      	adds	r7, #28
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6e:	4770      	bx	lr

08000f70 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b088      	sub	sp, #32
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	60f8      	str	r0, [r7, #12]
 8000f78:	60b9      	str	r1, [r7, #8]
 8000f7a:	607a      	str	r2, [r7, #4]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8000f7c:	68fb      	ldr	r3, [r7, #12]
 8000f7e:	795b      	ldrb	r3, [r3, #5]
 8000f80:	2b01      	cmp	r3, #1
 8000f82:	d101      	bne.n	8000f88 <HAL_DAC_ConfigChannel+0x18>
 8000f84:	2302      	movs	r3, #2
 8000f86:	e11d      	b.n	80011c4 <HAL_DAC_ConfigChannel+0x254>
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	2201      	movs	r2, #1
 8000f8c:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8000f8e:	68fb      	ldr	r3, [r7, #12]
 8000f90:	2202      	movs	r2, #2
 8000f92:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8000f94:	68bb      	ldr	r3, [r7, #8]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	2b04      	cmp	r3, #4
 8000f9a:	d174      	bne.n	8001086 <HAL_DAC_ConfigChannel+0x116>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8000f9c:	f7ff fe32 	bl	8000c04 <HAL_GetTick>
 8000fa0:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d134      	bne.n	8001012 <HAL_DAC_ConfigChannel+0xa2>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8000fa8:	e011      	b.n	8000fce <HAL_DAC_ConfigChannel+0x5e>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8000faa:	f7ff fe2b 	bl	8000c04 <HAL_GetTick>
 8000fae:	4602      	mov	r2, r0
 8000fb0:	69bb      	ldr	r3, [r7, #24]
 8000fb2:	1ad3      	subs	r3, r2, r3
 8000fb4:	2b01      	cmp	r3, #1
 8000fb6:	d90a      	bls.n	8000fce <HAL_DAC_ConfigChannel+0x5e>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	691b      	ldr	r3, [r3, #16]
 8000fbc:	f043 0208 	orr.w	r2, r3, #8
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	2203      	movs	r2, #3
 8000fc8:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8000fca:	2303      	movs	r3, #3
 8000fcc:	e0fa      	b.n	80011c4 <HAL_DAC_ConfigChannel+0x254>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8000fce:	68fb      	ldr	r3, [r7, #12]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000fd4:	4b7d      	ldr	r3, [pc, #500]	; (80011cc <HAL_DAC_ConfigChannel+0x25c>)
 8000fd6:	4013      	ands	r3, r2
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d1e6      	bne.n	8000faa <HAL_DAC_ConfigChannel+0x3a>
        }
      }
      HAL_Delay(1);
 8000fdc:	2001      	movs	r0, #1
 8000fde:	f7ff fe1d 	bl	8000c1c <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	68ba      	ldr	r2, [r7, #8]
 8000fe8:	6992      	ldr	r2, [r2, #24]
 8000fea:	641a      	str	r2, [r3, #64]	; 0x40
 8000fec:	e01e      	b.n	800102c <HAL_DAC_ConfigChannel+0xbc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8000fee:	f7ff fe09 	bl	8000c04 <HAL_GetTick>
 8000ff2:	4602      	mov	r2, r0
 8000ff4:	69bb      	ldr	r3, [r7, #24]
 8000ff6:	1ad3      	subs	r3, r2, r3
 8000ff8:	2b01      	cmp	r3, #1
 8000ffa:	d90a      	bls.n	8001012 <HAL_DAC_ConfigChannel+0xa2>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	691b      	ldr	r3, [r3, #16]
 8001000:	f043 0208 	orr.w	r2, r3, #8
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	2203      	movs	r2, #3
 800100c:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 800100e:	2303      	movs	r3, #3
 8001010:	e0d8      	b.n	80011c4 <HAL_DAC_ConfigChannel+0x254>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8001012:	68fb      	ldr	r3, [r7, #12]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001018:	2b00      	cmp	r3, #0
 800101a:	dbe8      	blt.n	8000fee <HAL_DAC_ConfigChannel+0x7e>
        }
      }
      HAL_Delay(1U);
 800101c:	2001      	movs	r0, #1
 800101e:	f7ff fdfd 	bl	8000c1c <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	68ba      	ldr	r2, [r7, #8]
 8001028:	6992      	ldr	r2, [r2, #24]
 800102a:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	f003 0310 	and.w	r3, r3, #16
 8001038:	f240 31ff 	movw	r1, #1023	; 0x3ff
 800103c:	fa01 f303 	lsl.w	r3, r1, r3
 8001040:	43db      	mvns	r3, r3
 8001042:	ea02 0103 	and.w	r1, r2, r3
 8001046:	68bb      	ldr	r3, [r7, #8]
 8001048:	69da      	ldr	r2, [r3, #28]
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	f003 0310 	and.w	r3, r3, #16
 8001050:	409a      	lsls	r2, r3
 8001052:	68fb      	ldr	r3, [r7, #12]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	430a      	orrs	r2, r1
 8001058:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	f003 0310 	and.w	r3, r3, #16
 8001066:	21ff      	movs	r1, #255	; 0xff
 8001068:	fa01 f303 	lsl.w	r3, r1, r3
 800106c:	43db      	mvns	r3, r3
 800106e:	ea02 0103 	and.w	r1, r2, r3
 8001072:	68bb      	ldr	r3, [r7, #8]
 8001074:	6a1a      	ldr	r2, [r3, #32]
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	f003 0310 	and.w	r3, r3, #16
 800107c:	409a      	lsls	r2, r3
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	430a      	orrs	r2, r1
 8001084:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8001086:	68bb      	ldr	r3, [r7, #8]
 8001088:	691b      	ldr	r3, [r3, #16]
 800108a:	2b01      	cmp	r3, #1
 800108c:	d11d      	bne.n	80010ca <HAL_DAC_ConfigChannel+0x15a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001094:	617b      	str	r3, [r7, #20]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	f003 0310 	and.w	r3, r3, #16
 800109c:	221f      	movs	r2, #31
 800109e:	fa02 f303 	lsl.w	r3, r2, r3
 80010a2:	43db      	mvns	r3, r3
 80010a4:	697a      	ldr	r2, [r7, #20]
 80010a6:	4013      	ands	r3, r2
 80010a8:	617b      	str	r3, [r7, #20]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 80010aa:	68bb      	ldr	r3, [r7, #8]
 80010ac:	695b      	ldr	r3, [r3, #20]
 80010ae:	613b      	str	r3, [r7, #16]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	f003 0310 	and.w	r3, r3, #16
 80010b6:	693a      	ldr	r2, [r7, #16]
 80010b8:	fa02 f303 	lsl.w	r3, r2, r3
 80010bc:	697a      	ldr	r2, [r7, #20]
 80010be:	4313      	orrs	r3, r2
 80010c0:	617b      	str	r3, [r7, #20]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	697a      	ldr	r2, [r7, #20]
 80010c8:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80010d0:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	f003 0310 	and.w	r3, r3, #16
 80010d8:	2207      	movs	r2, #7
 80010da:	fa02 f303 	lsl.w	r3, r2, r3
 80010de:	43db      	mvns	r3, r3
 80010e0:	697a      	ldr	r2, [r7, #20]
 80010e2:	4013      	ands	r3, r2
 80010e4:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 80010e6:	68bb      	ldr	r3, [r7, #8]
 80010e8:	68db      	ldr	r3, [r3, #12]
 80010ea:	2b01      	cmp	r3, #1
 80010ec:	d102      	bne.n	80010f4 <HAL_DAC_ConfigChannel+0x184>
  {
    connectOnChip = 0x00000000UL;
 80010ee:	2300      	movs	r3, #0
 80010f0:	61fb      	str	r3, [r7, #28]
 80010f2:	e00f      	b.n	8001114 <HAL_DAC_ConfigChannel+0x1a4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 80010f4:	68bb      	ldr	r3, [r7, #8]
 80010f6:	68db      	ldr	r3, [r3, #12]
 80010f8:	2b02      	cmp	r3, #2
 80010fa:	d102      	bne.n	8001102 <HAL_DAC_ConfigChannel+0x192>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 80010fc:	2301      	movs	r3, #1
 80010fe:	61fb      	str	r3, [r7, #28]
 8001100:	e008      	b.n	8001114 <HAL_DAC_ConfigChannel+0x1a4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8001102:	68bb      	ldr	r3, [r7, #8]
 8001104:	689b      	ldr	r3, [r3, #8]
 8001106:	2b00      	cmp	r3, #0
 8001108:	d102      	bne.n	8001110 <HAL_DAC_ConfigChannel+0x1a0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 800110a:	2301      	movs	r3, #1
 800110c:	61fb      	str	r3, [r7, #28]
 800110e:	e001      	b.n	8001114 <HAL_DAC_ConfigChannel+0x1a4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8001110:	2300      	movs	r3, #0
 8001112:	61fb      	str	r3, [r7, #28]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8001114:	68bb      	ldr	r3, [r7, #8]
 8001116:	681a      	ldr	r2, [r3, #0]
 8001118:	68bb      	ldr	r3, [r7, #8]
 800111a:	689b      	ldr	r3, [r3, #8]
 800111c:	4313      	orrs	r3, r2
 800111e:	69fa      	ldr	r2, [r7, #28]
 8001120:	4313      	orrs	r3, r2
 8001122:	613b      	str	r3, [r7, #16]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	f003 0310 	and.w	r3, r3, #16
 800112a:	693a      	ldr	r2, [r7, #16]
 800112c:	fa02 f303 	lsl.w	r3, r2, r3
 8001130:	697a      	ldr	r2, [r7, #20]
 8001132:	4313      	orrs	r3, r2
 8001134:	617b      	str	r3, [r7, #20]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	697a      	ldr	r2, [r7, #20]
 800113c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	6819      	ldr	r1, [r3, #0]
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	f003 0310 	and.w	r3, r3, #16
 800114a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800114e:	fa02 f303 	lsl.w	r3, r2, r3
 8001152:	43da      	mvns	r2, r3
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	400a      	ands	r2, r1
 800115a:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	617b      	str	r3, [r7, #20]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	f003 0310 	and.w	r3, r3, #16
 800116a:	f640 72fe 	movw	r2, #4094	; 0xffe
 800116e:	fa02 f303 	lsl.w	r3, r2, r3
 8001172:	43db      	mvns	r3, r3
 8001174:	697a      	ldr	r2, [r7, #20]
 8001176:	4013      	ands	r3, r2
 8001178:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 800117a:	68bb      	ldr	r3, [r7, #8]
 800117c:	685b      	ldr	r3, [r3, #4]
 800117e:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	f003 0310 	and.w	r3, r3, #16
 8001186:	693a      	ldr	r2, [r7, #16]
 8001188:	fa02 f303 	lsl.w	r3, r2, r3
 800118c:	697a      	ldr	r2, [r7, #20]
 800118e:	4313      	orrs	r3, r2
 8001190:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	697a      	ldr	r2, [r7, #20]
 8001198:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	6819      	ldr	r1, [r3, #0]
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	f003 0310 	and.w	r3, r3, #16
 80011a6:	22c0      	movs	r2, #192	; 0xc0
 80011a8:	fa02 f303 	lsl.w	r3, r2, r3
 80011ac:	43da      	mvns	r2, r3
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	400a      	ands	r2, r1
 80011b4:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	2201      	movs	r2, #1
 80011ba:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	2200      	movs	r2, #0
 80011c0:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80011c2:	2300      	movs	r3, #0
}
 80011c4:	4618      	mov	r0, r3
 80011c6:	3720      	adds	r7, #32
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bd80      	pop	{r7, pc}
 80011cc:	20008000 	.word	0x20008000

080011d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011d0:	b480      	push	{r7}
 80011d2:	b089      	sub	sp, #36	; 0x24
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
 80011d8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80011da:	2300      	movs	r3, #0
 80011dc:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80011de:	4b89      	ldr	r3, [pc, #548]	; (8001404 <HAL_GPIO_Init+0x234>)
 80011e0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80011e2:	e194      	b.n	800150e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80011e4:	683b      	ldr	r3, [r7, #0]
 80011e6:	681a      	ldr	r2, [r3, #0]
 80011e8:	2101      	movs	r1, #1
 80011ea:	69fb      	ldr	r3, [r7, #28]
 80011ec:	fa01 f303 	lsl.w	r3, r1, r3
 80011f0:	4013      	ands	r3, r2
 80011f2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80011f4:	693b      	ldr	r3, [r7, #16]
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	f000 8186 	beq.w	8001508 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80011fc:	683b      	ldr	r3, [r7, #0]
 80011fe:	685b      	ldr	r3, [r3, #4]
 8001200:	2b01      	cmp	r3, #1
 8001202:	d00b      	beq.n	800121c <HAL_GPIO_Init+0x4c>
 8001204:	683b      	ldr	r3, [r7, #0]
 8001206:	685b      	ldr	r3, [r3, #4]
 8001208:	2b02      	cmp	r3, #2
 800120a:	d007      	beq.n	800121c <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800120c:	683b      	ldr	r3, [r7, #0]
 800120e:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001210:	2b11      	cmp	r3, #17
 8001212:	d003      	beq.n	800121c <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001214:	683b      	ldr	r3, [r7, #0]
 8001216:	685b      	ldr	r3, [r3, #4]
 8001218:	2b12      	cmp	r3, #18
 800121a:	d130      	bne.n	800127e <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	689b      	ldr	r3, [r3, #8]
 8001220:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001222:	69fb      	ldr	r3, [r7, #28]
 8001224:	005b      	lsls	r3, r3, #1
 8001226:	2203      	movs	r2, #3
 8001228:	fa02 f303 	lsl.w	r3, r2, r3
 800122c:	43db      	mvns	r3, r3
 800122e:	69ba      	ldr	r2, [r7, #24]
 8001230:	4013      	ands	r3, r2
 8001232:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001234:	683b      	ldr	r3, [r7, #0]
 8001236:	68da      	ldr	r2, [r3, #12]
 8001238:	69fb      	ldr	r3, [r7, #28]
 800123a:	005b      	lsls	r3, r3, #1
 800123c:	fa02 f303 	lsl.w	r3, r2, r3
 8001240:	69ba      	ldr	r2, [r7, #24]
 8001242:	4313      	orrs	r3, r2
 8001244:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	69ba      	ldr	r2, [r7, #24]
 800124a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	685b      	ldr	r3, [r3, #4]
 8001250:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001252:	2201      	movs	r2, #1
 8001254:	69fb      	ldr	r3, [r7, #28]
 8001256:	fa02 f303 	lsl.w	r3, r2, r3
 800125a:	43db      	mvns	r3, r3
 800125c:	69ba      	ldr	r2, [r7, #24]
 800125e:	4013      	ands	r3, r2
 8001260:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001262:	683b      	ldr	r3, [r7, #0]
 8001264:	685b      	ldr	r3, [r3, #4]
 8001266:	091b      	lsrs	r3, r3, #4
 8001268:	f003 0201 	and.w	r2, r3, #1
 800126c:	69fb      	ldr	r3, [r7, #28]
 800126e:	fa02 f303 	lsl.w	r3, r2, r3
 8001272:	69ba      	ldr	r2, [r7, #24]
 8001274:	4313      	orrs	r3, r2
 8001276:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	69ba      	ldr	r2, [r7, #24]
 800127c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	68db      	ldr	r3, [r3, #12]
 8001282:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001284:	69fb      	ldr	r3, [r7, #28]
 8001286:	005b      	lsls	r3, r3, #1
 8001288:	2203      	movs	r2, #3
 800128a:	fa02 f303 	lsl.w	r3, r2, r3
 800128e:	43db      	mvns	r3, r3
 8001290:	69ba      	ldr	r2, [r7, #24]
 8001292:	4013      	ands	r3, r2
 8001294:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001296:	683b      	ldr	r3, [r7, #0]
 8001298:	689a      	ldr	r2, [r3, #8]
 800129a:	69fb      	ldr	r3, [r7, #28]
 800129c:	005b      	lsls	r3, r3, #1
 800129e:	fa02 f303 	lsl.w	r3, r2, r3
 80012a2:	69ba      	ldr	r2, [r7, #24]
 80012a4:	4313      	orrs	r3, r2
 80012a6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	69ba      	ldr	r2, [r7, #24]
 80012ac:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80012ae:	683b      	ldr	r3, [r7, #0]
 80012b0:	685b      	ldr	r3, [r3, #4]
 80012b2:	2b02      	cmp	r3, #2
 80012b4:	d003      	beq.n	80012be <HAL_GPIO_Init+0xee>
 80012b6:	683b      	ldr	r3, [r7, #0]
 80012b8:	685b      	ldr	r3, [r3, #4]
 80012ba:	2b12      	cmp	r3, #18
 80012bc:	d123      	bne.n	8001306 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80012be:	69fb      	ldr	r3, [r7, #28]
 80012c0:	08da      	lsrs	r2, r3, #3
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	3208      	adds	r2, #8
 80012c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80012ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80012cc:	69fb      	ldr	r3, [r7, #28]
 80012ce:	f003 0307 	and.w	r3, r3, #7
 80012d2:	009b      	lsls	r3, r3, #2
 80012d4:	220f      	movs	r2, #15
 80012d6:	fa02 f303 	lsl.w	r3, r2, r3
 80012da:	43db      	mvns	r3, r3
 80012dc:	69ba      	ldr	r2, [r7, #24]
 80012de:	4013      	ands	r3, r2
 80012e0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80012e2:	683b      	ldr	r3, [r7, #0]
 80012e4:	691a      	ldr	r2, [r3, #16]
 80012e6:	69fb      	ldr	r3, [r7, #28]
 80012e8:	f003 0307 	and.w	r3, r3, #7
 80012ec:	009b      	lsls	r3, r3, #2
 80012ee:	fa02 f303 	lsl.w	r3, r2, r3
 80012f2:	69ba      	ldr	r2, [r7, #24]
 80012f4:	4313      	orrs	r3, r2
 80012f6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80012f8:	69fb      	ldr	r3, [r7, #28]
 80012fa:	08da      	lsrs	r2, r3, #3
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	3208      	adds	r2, #8
 8001300:	69b9      	ldr	r1, [r7, #24]
 8001302:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800130c:	69fb      	ldr	r3, [r7, #28]
 800130e:	005b      	lsls	r3, r3, #1
 8001310:	2203      	movs	r2, #3
 8001312:	fa02 f303 	lsl.w	r3, r2, r3
 8001316:	43db      	mvns	r3, r3
 8001318:	69ba      	ldr	r2, [r7, #24]
 800131a:	4013      	ands	r3, r2
 800131c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800131e:	683b      	ldr	r3, [r7, #0]
 8001320:	685b      	ldr	r3, [r3, #4]
 8001322:	f003 0203 	and.w	r2, r3, #3
 8001326:	69fb      	ldr	r3, [r7, #28]
 8001328:	005b      	lsls	r3, r3, #1
 800132a:	fa02 f303 	lsl.w	r3, r2, r3
 800132e:	69ba      	ldr	r2, [r7, #24]
 8001330:	4313      	orrs	r3, r2
 8001332:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	69ba      	ldr	r2, [r7, #24]
 8001338:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800133a:	683b      	ldr	r3, [r7, #0]
 800133c:	685b      	ldr	r3, [r3, #4]
 800133e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001342:	2b00      	cmp	r3, #0
 8001344:	f000 80e0 	beq.w	8001508 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001348:	4b2f      	ldr	r3, [pc, #188]	; (8001408 <HAL_GPIO_Init+0x238>)
 800134a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800134e:	4a2e      	ldr	r2, [pc, #184]	; (8001408 <HAL_GPIO_Init+0x238>)
 8001350:	f043 0302 	orr.w	r3, r3, #2
 8001354:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001358:	4b2b      	ldr	r3, [pc, #172]	; (8001408 <HAL_GPIO_Init+0x238>)
 800135a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800135e:	f003 0302 	and.w	r3, r3, #2
 8001362:	60fb      	str	r3, [r7, #12]
 8001364:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001366:	4a29      	ldr	r2, [pc, #164]	; (800140c <HAL_GPIO_Init+0x23c>)
 8001368:	69fb      	ldr	r3, [r7, #28]
 800136a:	089b      	lsrs	r3, r3, #2
 800136c:	3302      	adds	r3, #2
 800136e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001372:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001374:	69fb      	ldr	r3, [r7, #28]
 8001376:	f003 0303 	and.w	r3, r3, #3
 800137a:	009b      	lsls	r3, r3, #2
 800137c:	220f      	movs	r2, #15
 800137e:	fa02 f303 	lsl.w	r3, r2, r3
 8001382:	43db      	mvns	r3, r3
 8001384:	69ba      	ldr	r2, [r7, #24]
 8001386:	4013      	ands	r3, r2
 8001388:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	4a20      	ldr	r2, [pc, #128]	; (8001410 <HAL_GPIO_Init+0x240>)
 800138e:	4293      	cmp	r3, r2
 8001390:	d052      	beq.n	8001438 <HAL_GPIO_Init+0x268>
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	4a1f      	ldr	r2, [pc, #124]	; (8001414 <HAL_GPIO_Init+0x244>)
 8001396:	4293      	cmp	r3, r2
 8001398:	d031      	beq.n	80013fe <HAL_GPIO_Init+0x22e>
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	4a1e      	ldr	r2, [pc, #120]	; (8001418 <HAL_GPIO_Init+0x248>)
 800139e:	4293      	cmp	r3, r2
 80013a0:	d02b      	beq.n	80013fa <HAL_GPIO_Init+0x22a>
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	4a1d      	ldr	r2, [pc, #116]	; (800141c <HAL_GPIO_Init+0x24c>)
 80013a6:	4293      	cmp	r3, r2
 80013a8:	d025      	beq.n	80013f6 <HAL_GPIO_Init+0x226>
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	4a1c      	ldr	r2, [pc, #112]	; (8001420 <HAL_GPIO_Init+0x250>)
 80013ae:	4293      	cmp	r3, r2
 80013b0:	d01f      	beq.n	80013f2 <HAL_GPIO_Init+0x222>
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	4a1b      	ldr	r2, [pc, #108]	; (8001424 <HAL_GPIO_Init+0x254>)
 80013b6:	4293      	cmp	r3, r2
 80013b8:	d019      	beq.n	80013ee <HAL_GPIO_Init+0x21e>
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	4a1a      	ldr	r2, [pc, #104]	; (8001428 <HAL_GPIO_Init+0x258>)
 80013be:	4293      	cmp	r3, r2
 80013c0:	d013      	beq.n	80013ea <HAL_GPIO_Init+0x21a>
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	4a19      	ldr	r2, [pc, #100]	; (800142c <HAL_GPIO_Init+0x25c>)
 80013c6:	4293      	cmp	r3, r2
 80013c8:	d00d      	beq.n	80013e6 <HAL_GPIO_Init+0x216>
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	4a18      	ldr	r2, [pc, #96]	; (8001430 <HAL_GPIO_Init+0x260>)
 80013ce:	4293      	cmp	r3, r2
 80013d0:	d007      	beq.n	80013e2 <HAL_GPIO_Init+0x212>
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	4a17      	ldr	r2, [pc, #92]	; (8001434 <HAL_GPIO_Init+0x264>)
 80013d6:	4293      	cmp	r3, r2
 80013d8:	d101      	bne.n	80013de <HAL_GPIO_Init+0x20e>
 80013da:	2309      	movs	r3, #9
 80013dc:	e02d      	b.n	800143a <HAL_GPIO_Init+0x26a>
 80013de:	230a      	movs	r3, #10
 80013e0:	e02b      	b.n	800143a <HAL_GPIO_Init+0x26a>
 80013e2:	2308      	movs	r3, #8
 80013e4:	e029      	b.n	800143a <HAL_GPIO_Init+0x26a>
 80013e6:	2307      	movs	r3, #7
 80013e8:	e027      	b.n	800143a <HAL_GPIO_Init+0x26a>
 80013ea:	2306      	movs	r3, #6
 80013ec:	e025      	b.n	800143a <HAL_GPIO_Init+0x26a>
 80013ee:	2305      	movs	r3, #5
 80013f0:	e023      	b.n	800143a <HAL_GPIO_Init+0x26a>
 80013f2:	2304      	movs	r3, #4
 80013f4:	e021      	b.n	800143a <HAL_GPIO_Init+0x26a>
 80013f6:	2303      	movs	r3, #3
 80013f8:	e01f      	b.n	800143a <HAL_GPIO_Init+0x26a>
 80013fa:	2302      	movs	r3, #2
 80013fc:	e01d      	b.n	800143a <HAL_GPIO_Init+0x26a>
 80013fe:	2301      	movs	r3, #1
 8001400:	e01b      	b.n	800143a <HAL_GPIO_Init+0x26a>
 8001402:	bf00      	nop
 8001404:	58000080 	.word	0x58000080
 8001408:	58024400 	.word	0x58024400
 800140c:	58000400 	.word	0x58000400
 8001410:	58020000 	.word	0x58020000
 8001414:	58020400 	.word	0x58020400
 8001418:	58020800 	.word	0x58020800
 800141c:	58020c00 	.word	0x58020c00
 8001420:	58021000 	.word	0x58021000
 8001424:	58021400 	.word	0x58021400
 8001428:	58021800 	.word	0x58021800
 800142c:	58021c00 	.word	0x58021c00
 8001430:	58022000 	.word	0x58022000
 8001434:	58022400 	.word	0x58022400
 8001438:	2300      	movs	r3, #0
 800143a:	69fa      	ldr	r2, [r7, #28]
 800143c:	f002 0203 	and.w	r2, r2, #3
 8001440:	0092      	lsls	r2, r2, #2
 8001442:	4093      	lsls	r3, r2
 8001444:	69ba      	ldr	r2, [r7, #24]
 8001446:	4313      	orrs	r3, r2
 8001448:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800144a:	4938      	ldr	r1, [pc, #224]	; (800152c <HAL_GPIO_Init+0x35c>)
 800144c:	69fb      	ldr	r3, [r7, #28]
 800144e:	089b      	lsrs	r3, r3, #2
 8001450:	3302      	adds	r3, #2
 8001452:	69ba      	ldr	r2, [r7, #24]
 8001454:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001458:	697b      	ldr	r3, [r7, #20]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800145e:	693b      	ldr	r3, [r7, #16]
 8001460:	43db      	mvns	r3, r3
 8001462:	69ba      	ldr	r2, [r7, #24]
 8001464:	4013      	ands	r3, r2
 8001466:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001468:	683b      	ldr	r3, [r7, #0]
 800146a:	685b      	ldr	r3, [r3, #4]
 800146c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001470:	2b00      	cmp	r3, #0
 8001472:	d003      	beq.n	800147c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001474:	69ba      	ldr	r2, [r7, #24]
 8001476:	693b      	ldr	r3, [r7, #16]
 8001478:	4313      	orrs	r3, r2
 800147a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800147c:	697b      	ldr	r3, [r7, #20]
 800147e:	69ba      	ldr	r2, [r7, #24]
 8001480:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8001482:	697b      	ldr	r3, [r7, #20]
 8001484:	685b      	ldr	r3, [r3, #4]
 8001486:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001488:	693b      	ldr	r3, [r7, #16]
 800148a:	43db      	mvns	r3, r3
 800148c:	69ba      	ldr	r2, [r7, #24]
 800148e:	4013      	ands	r3, r2
 8001490:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001492:	683b      	ldr	r3, [r7, #0]
 8001494:	685b      	ldr	r3, [r3, #4]
 8001496:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800149a:	2b00      	cmp	r3, #0
 800149c:	d003      	beq.n	80014a6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800149e:	69ba      	ldr	r2, [r7, #24]
 80014a0:	693b      	ldr	r3, [r7, #16]
 80014a2:	4313      	orrs	r3, r2
 80014a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80014a6:	697b      	ldr	r3, [r7, #20]
 80014a8:	69ba      	ldr	r2, [r7, #24]
 80014aa:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80014ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80014b4:	693b      	ldr	r3, [r7, #16]
 80014b6:	43db      	mvns	r3, r3
 80014b8:	69ba      	ldr	r2, [r7, #24]
 80014ba:	4013      	ands	r3, r2
 80014bc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80014be:	683b      	ldr	r3, [r7, #0]
 80014c0:	685b      	ldr	r3, [r3, #4]
 80014c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d003      	beq.n	80014d2 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 80014ca:	69ba      	ldr	r2, [r7, #24]
 80014cc:	693b      	ldr	r3, [r7, #16]
 80014ce:	4313      	orrs	r3, r2
 80014d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80014d2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80014d6:	69bb      	ldr	r3, [r7, #24]
 80014d8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80014da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80014de:	685b      	ldr	r3, [r3, #4]
 80014e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80014e2:	693b      	ldr	r3, [r7, #16]
 80014e4:	43db      	mvns	r3, r3
 80014e6:	69ba      	ldr	r2, [r7, #24]
 80014e8:	4013      	ands	r3, r2
 80014ea:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80014ec:	683b      	ldr	r3, [r7, #0]
 80014ee:	685b      	ldr	r3, [r3, #4]
 80014f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d003      	beq.n	8001500 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 80014f8:	69ba      	ldr	r2, [r7, #24]
 80014fa:	693b      	ldr	r3, [r7, #16]
 80014fc:	4313      	orrs	r3, r2
 80014fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001500:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001504:	69bb      	ldr	r3, [r7, #24]
 8001506:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8001508:	69fb      	ldr	r3, [r7, #28]
 800150a:	3301      	adds	r3, #1
 800150c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800150e:	683b      	ldr	r3, [r7, #0]
 8001510:	681a      	ldr	r2, [r3, #0]
 8001512:	69fb      	ldr	r3, [r7, #28]
 8001514:	fa22 f303 	lsr.w	r3, r2, r3
 8001518:	2b00      	cmp	r3, #0
 800151a:	f47f ae63 	bne.w	80011e4 <HAL_GPIO_Init+0x14>
  }
}
 800151e:	bf00      	nop
 8001520:	3724      	adds	r7, #36	; 0x24
 8001522:	46bd      	mov	sp, r7
 8001524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001528:	4770      	bx	lr
 800152a:	bf00      	nop
 800152c:	58000400 	.word	0x58000400

08001530 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001530:	b480      	push	{r7}
 8001532:	b083      	sub	sp, #12
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
 8001538:	460b      	mov	r3, r1
 800153a:	807b      	strh	r3, [r7, #2]
 800153c:	4613      	mov	r3, r2
 800153e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001540:	787b      	ldrb	r3, [r7, #1]
 8001542:	2b00      	cmp	r3, #0
 8001544:	d003      	beq.n	800154e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001546:	887a      	ldrh	r2, [r7, #2]
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800154c:	e003      	b.n	8001556 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800154e:	887b      	ldrh	r3, [r7, #2]
 8001550:	041a      	lsls	r2, r3, #16
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	619a      	str	r2, [r3, #24]
}
 8001556:	bf00      	nop
 8001558:	370c      	adds	r7, #12
 800155a:	46bd      	mov	sp, r7
 800155c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001560:	4770      	bx	lr

08001562 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001562:	b480      	push	{r7}
 8001564:	b083      	sub	sp, #12
 8001566:	af00      	add	r7, sp, #0
 8001568:	6078      	str	r0, [r7, #4]
 800156a:	460b      	mov	r3, r1
 800156c:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	695a      	ldr	r2, [r3, #20]
 8001572:	887b      	ldrh	r3, [r7, #2]
 8001574:	401a      	ands	r2, r3
 8001576:	887b      	ldrh	r3, [r7, #2]
 8001578:	429a      	cmp	r2, r3
 800157a:	d104      	bne.n	8001586 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800157c:	887b      	ldrh	r3, [r7, #2]
 800157e:	041a      	lsls	r2, r3, #16
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8001584:	e002      	b.n	800158c <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8001586:	887a      	ldrh	r2, [r7, #2]
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	619a      	str	r2, [r3, #24]
}
 800158c:	bf00      	nop
 800158e:	370c      	adds	r7, #12
 8001590:	46bd      	mov	sp, r7
 8001592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001596:	4770      	bx	lr

08001598 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b084      	sub	sp, #16
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80015a0:	4b19      	ldr	r3, [pc, #100]	; (8001608 <HAL_PWREx_ConfigSupply+0x70>)
 80015a2:	68db      	ldr	r3, [r3, #12]
 80015a4:	f003 0304 	and.w	r3, r3, #4
 80015a8:	2b04      	cmp	r3, #4
 80015aa:	d00a      	beq.n	80015c2 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80015ac:	4b16      	ldr	r3, [pc, #88]	; (8001608 <HAL_PWREx_ConfigSupply+0x70>)
 80015ae:	68db      	ldr	r3, [r3, #12]
 80015b0:	f003 0307 	and.w	r3, r3, #7
 80015b4:	687a      	ldr	r2, [r7, #4]
 80015b6:	429a      	cmp	r2, r3
 80015b8:	d001      	beq.n	80015be <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80015ba:	2301      	movs	r3, #1
 80015bc:	e01f      	b.n	80015fe <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80015be:	2300      	movs	r3, #0
 80015c0:	e01d      	b.n	80015fe <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80015c2:	4b11      	ldr	r3, [pc, #68]	; (8001608 <HAL_PWREx_ConfigSupply+0x70>)
 80015c4:	68db      	ldr	r3, [r3, #12]
 80015c6:	f023 0207 	bic.w	r2, r3, #7
 80015ca:	490f      	ldr	r1, [pc, #60]	; (8001608 <HAL_PWREx_ConfigSupply+0x70>)
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	4313      	orrs	r3, r2
 80015d0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80015d2:	f7ff fb17 	bl	8000c04 <HAL_GetTick>
 80015d6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80015d8:	e009      	b.n	80015ee <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80015da:	f7ff fb13 	bl	8000c04 <HAL_GetTick>
 80015de:	4602      	mov	r2, r0
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	1ad3      	subs	r3, r2, r3
 80015e4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80015e8:	d901      	bls.n	80015ee <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80015ea:	2301      	movs	r3, #1
 80015ec:	e007      	b.n	80015fe <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80015ee:	4b06      	ldr	r3, [pc, #24]	; (8001608 <HAL_PWREx_ConfigSupply+0x70>)
 80015f0:	685b      	ldr	r3, [r3, #4]
 80015f2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80015f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80015fa:	d1ee      	bne.n	80015da <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80015fc:	2300      	movs	r3, #0
}
 80015fe:	4618      	mov	r0, r3
 8001600:	3710      	adds	r7, #16
 8001602:	46bd      	mov	sp, r7
 8001604:	bd80      	pop	{r7, pc}
 8001606:	bf00      	nop
 8001608:	58024800 	.word	0x58024800

0800160c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b08c      	sub	sp, #48	; 0x30
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	2b00      	cmp	r3, #0
 8001618:	d101      	bne.n	800161e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800161a:	2301      	movs	r3, #1
 800161c:	e3ff      	b.n	8001e1e <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f003 0301 	and.w	r3, r3, #1
 8001626:	2b00      	cmp	r3, #0
 8001628:	f000 8087 	beq.w	800173a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800162c:	4b99      	ldr	r3, [pc, #612]	; (8001894 <HAL_RCC_OscConfig+0x288>)
 800162e:	691b      	ldr	r3, [r3, #16]
 8001630:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001634:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001636:	4b97      	ldr	r3, [pc, #604]	; (8001894 <HAL_RCC_OscConfig+0x288>)
 8001638:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800163a:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800163c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800163e:	2b10      	cmp	r3, #16
 8001640:	d007      	beq.n	8001652 <HAL_RCC_OscConfig+0x46>
 8001642:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001644:	2b18      	cmp	r3, #24
 8001646:	d110      	bne.n	800166a <HAL_RCC_OscConfig+0x5e>
 8001648:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800164a:	f003 0303 	and.w	r3, r3, #3
 800164e:	2b02      	cmp	r3, #2
 8001650:	d10b      	bne.n	800166a <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001652:	4b90      	ldr	r3, [pc, #576]	; (8001894 <HAL_RCC_OscConfig+0x288>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800165a:	2b00      	cmp	r3, #0
 800165c:	d06c      	beq.n	8001738 <HAL_RCC_OscConfig+0x12c>
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	685b      	ldr	r3, [r3, #4]
 8001662:	2b00      	cmp	r3, #0
 8001664:	d168      	bne.n	8001738 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001666:	2301      	movs	r3, #1
 8001668:	e3d9      	b.n	8001e1e <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	685b      	ldr	r3, [r3, #4]
 800166e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001672:	d106      	bne.n	8001682 <HAL_RCC_OscConfig+0x76>
 8001674:	4b87      	ldr	r3, [pc, #540]	; (8001894 <HAL_RCC_OscConfig+0x288>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	4a86      	ldr	r2, [pc, #536]	; (8001894 <HAL_RCC_OscConfig+0x288>)
 800167a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800167e:	6013      	str	r3, [r2, #0]
 8001680:	e02e      	b.n	80016e0 <HAL_RCC_OscConfig+0xd4>
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	685b      	ldr	r3, [r3, #4]
 8001686:	2b00      	cmp	r3, #0
 8001688:	d10c      	bne.n	80016a4 <HAL_RCC_OscConfig+0x98>
 800168a:	4b82      	ldr	r3, [pc, #520]	; (8001894 <HAL_RCC_OscConfig+0x288>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	4a81      	ldr	r2, [pc, #516]	; (8001894 <HAL_RCC_OscConfig+0x288>)
 8001690:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001694:	6013      	str	r3, [r2, #0]
 8001696:	4b7f      	ldr	r3, [pc, #508]	; (8001894 <HAL_RCC_OscConfig+0x288>)
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	4a7e      	ldr	r2, [pc, #504]	; (8001894 <HAL_RCC_OscConfig+0x288>)
 800169c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80016a0:	6013      	str	r3, [r2, #0]
 80016a2:	e01d      	b.n	80016e0 <HAL_RCC_OscConfig+0xd4>
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	685b      	ldr	r3, [r3, #4]
 80016a8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80016ac:	d10c      	bne.n	80016c8 <HAL_RCC_OscConfig+0xbc>
 80016ae:	4b79      	ldr	r3, [pc, #484]	; (8001894 <HAL_RCC_OscConfig+0x288>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	4a78      	ldr	r2, [pc, #480]	; (8001894 <HAL_RCC_OscConfig+0x288>)
 80016b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80016b8:	6013      	str	r3, [r2, #0]
 80016ba:	4b76      	ldr	r3, [pc, #472]	; (8001894 <HAL_RCC_OscConfig+0x288>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	4a75      	ldr	r2, [pc, #468]	; (8001894 <HAL_RCC_OscConfig+0x288>)
 80016c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016c4:	6013      	str	r3, [r2, #0]
 80016c6:	e00b      	b.n	80016e0 <HAL_RCC_OscConfig+0xd4>
 80016c8:	4b72      	ldr	r3, [pc, #456]	; (8001894 <HAL_RCC_OscConfig+0x288>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	4a71      	ldr	r2, [pc, #452]	; (8001894 <HAL_RCC_OscConfig+0x288>)
 80016ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80016d2:	6013      	str	r3, [r2, #0]
 80016d4:	4b6f      	ldr	r3, [pc, #444]	; (8001894 <HAL_RCC_OscConfig+0x288>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	4a6e      	ldr	r2, [pc, #440]	; (8001894 <HAL_RCC_OscConfig+0x288>)
 80016da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80016de:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	685b      	ldr	r3, [r3, #4]
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d013      	beq.n	8001710 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016e8:	f7ff fa8c 	bl	8000c04 <HAL_GetTick>
 80016ec:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80016ee:	e008      	b.n	8001702 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80016f0:	f7ff fa88 	bl	8000c04 <HAL_GetTick>
 80016f4:	4602      	mov	r2, r0
 80016f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016f8:	1ad3      	subs	r3, r2, r3
 80016fa:	2b64      	cmp	r3, #100	; 0x64
 80016fc:	d901      	bls.n	8001702 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80016fe:	2303      	movs	r3, #3
 8001700:	e38d      	b.n	8001e1e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001702:	4b64      	ldr	r3, [pc, #400]	; (8001894 <HAL_RCC_OscConfig+0x288>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800170a:	2b00      	cmp	r3, #0
 800170c:	d0f0      	beq.n	80016f0 <HAL_RCC_OscConfig+0xe4>
 800170e:	e014      	b.n	800173a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001710:	f7ff fa78 	bl	8000c04 <HAL_GetTick>
 8001714:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001716:	e008      	b.n	800172a <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001718:	f7ff fa74 	bl	8000c04 <HAL_GetTick>
 800171c:	4602      	mov	r2, r0
 800171e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001720:	1ad3      	subs	r3, r2, r3
 8001722:	2b64      	cmp	r3, #100	; 0x64
 8001724:	d901      	bls.n	800172a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001726:	2303      	movs	r3, #3
 8001728:	e379      	b.n	8001e1e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800172a:	4b5a      	ldr	r3, [pc, #360]	; (8001894 <HAL_RCC_OscConfig+0x288>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001732:	2b00      	cmp	r3, #0
 8001734:	d1f0      	bne.n	8001718 <HAL_RCC_OscConfig+0x10c>
 8001736:	e000      	b.n	800173a <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001738:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f003 0302 	and.w	r3, r3, #2
 8001742:	2b00      	cmp	r3, #0
 8001744:	f000 80ae 	beq.w	80018a4 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001748:	4b52      	ldr	r3, [pc, #328]	; (8001894 <HAL_RCC_OscConfig+0x288>)
 800174a:	691b      	ldr	r3, [r3, #16]
 800174c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001750:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001752:	4b50      	ldr	r3, [pc, #320]	; (8001894 <HAL_RCC_OscConfig+0x288>)
 8001754:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001756:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8001758:	6a3b      	ldr	r3, [r7, #32]
 800175a:	2b00      	cmp	r3, #0
 800175c:	d007      	beq.n	800176e <HAL_RCC_OscConfig+0x162>
 800175e:	6a3b      	ldr	r3, [r7, #32]
 8001760:	2b18      	cmp	r3, #24
 8001762:	d13a      	bne.n	80017da <HAL_RCC_OscConfig+0x1ce>
 8001764:	69fb      	ldr	r3, [r7, #28]
 8001766:	f003 0303 	and.w	r3, r3, #3
 800176a:	2b00      	cmp	r3, #0
 800176c:	d135      	bne.n	80017da <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800176e:	4b49      	ldr	r3, [pc, #292]	; (8001894 <HAL_RCC_OscConfig+0x288>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f003 0304 	and.w	r3, r3, #4
 8001776:	2b00      	cmp	r3, #0
 8001778:	d005      	beq.n	8001786 <HAL_RCC_OscConfig+0x17a>
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	68db      	ldr	r3, [r3, #12]
 800177e:	2b00      	cmp	r3, #0
 8001780:	d101      	bne.n	8001786 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001782:	2301      	movs	r3, #1
 8001784:	e34b      	b.n	8001e1e <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001786:	f7ff fa6b 	bl	8000c60 <HAL_GetREVID>
 800178a:	4602      	mov	r2, r0
 800178c:	f241 0303 	movw	r3, #4099	; 0x1003
 8001790:	429a      	cmp	r2, r3
 8001792:	d817      	bhi.n	80017c4 <HAL_RCC_OscConfig+0x1b8>
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	691b      	ldr	r3, [r3, #16]
 8001798:	2b40      	cmp	r3, #64	; 0x40
 800179a:	d108      	bne.n	80017ae <HAL_RCC_OscConfig+0x1a2>
 800179c:	4b3d      	ldr	r3, [pc, #244]	; (8001894 <HAL_RCC_OscConfig+0x288>)
 800179e:	685b      	ldr	r3, [r3, #4]
 80017a0:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80017a4:	4a3b      	ldr	r2, [pc, #236]	; (8001894 <HAL_RCC_OscConfig+0x288>)
 80017a6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017aa:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80017ac:	e07a      	b.n	80018a4 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017ae:	4b39      	ldr	r3, [pc, #228]	; (8001894 <HAL_RCC_OscConfig+0x288>)
 80017b0:	685b      	ldr	r3, [r3, #4]
 80017b2:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	691b      	ldr	r3, [r3, #16]
 80017ba:	031b      	lsls	r3, r3, #12
 80017bc:	4935      	ldr	r1, [pc, #212]	; (8001894 <HAL_RCC_OscConfig+0x288>)
 80017be:	4313      	orrs	r3, r2
 80017c0:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80017c2:	e06f      	b.n	80018a4 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017c4:	4b33      	ldr	r3, [pc, #204]	; (8001894 <HAL_RCC_OscConfig+0x288>)
 80017c6:	685b      	ldr	r3, [r3, #4]
 80017c8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	691b      	ldr	r3, [r3, #16]
 80017d0:	061b      	lsls	r3, r3, #24
 80017d2:	4930      	ldr	r1, [pc, #192]	; (8001894 <HAL_RCC_OscConfig+0x288>)
 80017d4:	4313      	orrs	r3, r2
 80017d6:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80017d8:	e064      	b.n	80018a4 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	68db      	ldr	r3, [r3, #12]
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d045      	beq.n	800186e <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80017e2:	4b2c      	ldr	r3, [pc, #176]	; (8001894 <HAL_RCC_OscConfig+0x288>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f023 0219 	bic.w	r2, r3, #25
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	68db      	ldr	r3, [r3, #12]
 80017ee:	4929      	ldr	r1, [pc, #164]	; (8001894 <HAL_RCC_OscConfig+0x288>)
 80017f0:	4313      	orrs	r3, r2
 80017f2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017f4:	f7ff fa06 	bl	8000c04 <HAL_GetTick>
 80017f8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80017fa:	e008      	b.n	800180e <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80017fc:	f7ff fa02 	bl	8000c04 <HAL_GetTick>
 8001800:	4602      	mov	r2, r0
 8001802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001804:	1ad3      	subs	r3, r2, r3
 8001806:	2b02      	cmp	r3, #2
 8001808:	d901      	bls.n	800180e <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 800180a:	2303      	movs	r3, #3
 800180c:	e307      	b.n	8001e1e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800180e:	4b21      	ldr	r3, [pc, #132]	; (8001894 <HAL_RCC_OscConfig+0x288>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f003 0304 	and.w	r3, r3, #4
 8001816:	2b00      	cmp	r3, #0
 8001818:	d0f0      	beq.n	80017fc <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800181a:	f7ff fa21 	bl	8000c60 <HAL_GetREVID>
 800181e:	4602      	mov	r2, r0
 8001820:	f241 0303 	movw	r3, #4099	; 0x1003
 8001824:	429a      	cmp	r2, r3
 8001826:	d817      	bhi.n	8001858 <HAL_RCC_OscConfig+0x24c>
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	691b      	ldr	r3, [r3, #16]
 800182c:	2b40      	cmp	r3, #64	; 0x40
 800182e:	d108      	bne.n	8001842 <HAL_RCC_OscConfig+0x236>
 8001830:	4b18      	ldr	r3, [pc, #96]	; (8001894 <HAL_RCC_OscConfig+0x288>)
 8001832:	685b      	ldr	r3, [r3, #4]
 8001834:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8001838:	4a16      	ldr	r2, [pc, #88]	; (8001894 <HAL_RCC_OscConfig+0x288>)
 800183a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800183e:	6053      	str	r3, [r2, #4]
 8001840:	e030      	b.n	80018a4 <HAL_RCC_OscConfig+0x298>
 8001842:	4b14      	ldr	r3, [pc, #80]	; (8001894 <HAL_RCC_OscConfig+0x288>)
 8001844:	685b      	ldr	r3, [r3, #4]
 8001846:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	691b      	ldr	r3, [r3, #16]
 800184e:	031b      	lsls	r3, r3, #12
 8001850:	4910      	ldr	r1, [pc, #64]	; (8001894 <HAL_RCC_OscConfig+0x288>)
 8001852:	4313      	orrs	r3, r2
 8001854:	604b      	str	r3, [r1, #4]
 8001856:	e025      	b.n	80018a4 <HAL_RCC_OscConfig+0x298>
 8001858:	4b0e      	ldr	r3, [pc, #56]	; (8001894 <HAL_RCC_OscConfig+0x288>)
 800185a:	685b      	ldr	r3, [r3, #4]
 800185c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	691b      	ldr	r3, [r3, #16]
 8001864:	061b      	lsls	r3, r3, #24
 8001866:	490b      	ldr	r1, [pc, #44]	; (8001894 <HAL_RCC_OscConfig+0x288>)
 8001868:	4313      	orrs	r3, r2
 800186a:	604b      	str	r3, [r1, #4]
 800186c:	e01a      	b.n	80018a4 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800186e:	4b09      	ldr	r3, [pc, #36]	; (8001894 <HAL_RCC_OscConfig+0x288>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	4a08      	ldr	r2, [pc, #32]	; (8001894 <HAL_RCC_OscConfig+0x288>)
 8001874:	f023 0301 	bic.w	r3, r3, #1
 8001878:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800187a:	f7ff f9c3 	bl	8000c04 <HAL_GetTick>
 800187e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001880:	e00a      	b.n	8001898 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001882:	f7ff f9bf 	bl	8000c04 <HAL_GetTick>
 8001886:	4602      	mov	r2, r0
 8001888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800188a:	1ad3      	subs	r3, r2, r3
 800188c:	2b02      	cmp	r3, #2
 800188e:	d903      	bls.n	8001898 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 8001890:	2303      	movs	r3, #3
 8001892:	e2c4      	b.n	8001e1e <HAL_RCC_OscConfig+0x812>
 8001894:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001898:	4ba4      	ldr	r3, [pc, #656]	; (8001b2c <HAL_RCC_OscConfig+0x520>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	f003 0304 	and.w	r3, r3, #4
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d1ee      	bne.n	8001882 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	f003 0310 	and.w	r3, r3, #16
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	f000 80a9 	beq.w	8001a04 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80018b2:	4b9e      	ldr	r3, [pc, #632]	; (8001b2c <HAL_RCC_OscConfig+0x520>)
 80018b4:	691b      	ldr	r3, [r3, #16]
 80018b6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80018ba:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80018bc:	4b9b      	ldr	r3, [pc, #620]	; (8001b2c <HAL_RCC_OscConfig+0x520>)
 80018be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018c0:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80018c2:	69bb      	ldr	r3, [r7, #24]
 80018c4:	2b08      	cmp	r3, #8
 80018c6:	d007      	beq.n	80018d8 <HAL_RCC_OscConfig+0x2cc>
 80018c8:	69bb      	ldr	r3, [r7, #24]
 80018ca:	2b18      	cmp	r3, #24
 80018cc:	d13a      	bne.n	8001944 <HAL_RCC_OscConfig+0x338>
 80018ce:	697b      	ldr	r3, [r7, #20]
 80018d0:	f003 0303 	and.w	r3, r3, #3
 80018d4:	2b01      	cmp	r3, #1
 80018d6:	d135      	bne.n	8001944 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80018d8:	4b94      	ldr	r3, [pc, #592]	; (8001b2c <HAL_RCC_OscConfig+0x520>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d005      	beq.n	80018f0 <HAL_RCC_OscConfig+0x2e4>
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	69db      	ldr	r3, [r3, #28]
 80018e8:	2b80      	cmp	r3, #128	; 0x80
 80018ea:	d001      	beq.n	80018f0 <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 80018ec:	2301      	movs	r3, #1
 80018ee:	e296      	b.n	8001e1e <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80018f0:	f7ff f9b6 	bl	8000c60 <HAL_GetREVID>
 80018f4:	4602      	mov	r2, r0
 80018f6:	f241 0303 	movw	r3, #4099	; 0x1003
 80018fa:	429a      	cmp	r2, r3
 80018fc:	d817      	bhi.n	800192e <HAL_RCC_OscConfig+0x322>
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	6a1b      	ldr	r3, [r3, #32]
 8001902:	2b20      	cmp	r3, #32
 8001904:	d108      	bne.n	8001918 <HAL_RCC_OscConfig+0x30c>
 8001906:	4b89      	ldr	r3, [pc, #548]	; (8001b2c <HAL_RCC_OscConfig+0x520>)
 8001908:	685b      	ldr	r3, [r3, #4]
 800190a:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800190e:	4a87      	ldr	r2, [pc, #540]	; (8001b2c <HAL_RCC_OscConfig+0x520>)
 8001910:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001914:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001916:	e075      	b.n	8001a04 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001918:	4b84      	ldr	r3, [pc, #528]	; (8001b2c <HAL_RCC_OscConfig+0x520>)
 800191a:	685b      	ldr	r3, [r3, #4]
 800191c:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	6a1b      	ldr	r3, [r3, #32]
 8001924:	069b      	lsls	r3, r3, #26
 8001926:	4981      	ldr	r1, [pc, #516]	; (8001b2c <HAL_RCC_OscConfig+0x520>)
 8001928:	4313      	orrs	r3, r2
 800192a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800192c:	e06a      	b.n	8001a04 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800192e:	4b7f      	ldr	r3, [pc, #508]	; (8001b2c <HAL_RCC_OscConfig+0x520>)
 8001930:	68db      	ldr	r3, [r3, #12]
 8001932:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	6a1b      	ldr	r3, [r3, #32]
 800193a:	061b      	lsls	r3, r3, #24
 800193c:	497b      	ldr	r1, [pc, #492]	; (8001b2c <HAL_RCC_OscConfig+0x520>)
 800193e:	4313      	orrs	r3, r2
 8001940:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001942:	e05f      	b.n	8001a04 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	69db      	ldr	r3, [r3, #28]
 8001948:	2b00      	cmp	r3, #0
 800194a:	d042      	beq.n	80019d2 <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800194c:	4b77      	ldr	r3, [pc, #476]	; (8001b2c <HAL_RCC_OscConfig+0x520>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	4a76      	ldr	r2, [pc, #472]	; (8001b2c <HAL_RCC_OscConfig+0x520>)
 8001952:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001956:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001958:	f7ff f954 	bl	8000c04 <HAL_GetTick>
 800195c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800195e:	e008      	b.n	8001972 <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8001960:	f7ff f950 	bl	8000c04 <HAL_GetTick>
 8001964:	4602      	mov	r2, r0
 8001966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001968:	1ad3      	subs	r3, r2, r3
 800196a:	2b02      	cmp	r3, #2
 800196c:	d901      	bls.n	8001972 <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 800196e:	2303      	movs	r3, #3
 8001970:	e255      	b.n	8001e1e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001972:	4b6e      	ldr	r3, [pc, #440]	; (8001b2c <HAL_RCC_OscConfig+0x520>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800197a:	2b00      	cmp	r3, #0
 800197c:	d0f0      	beq.n	8001960 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800197e:	f7ff f96f 	bl	8000c60 <HAL_GetREVID>
 8001982:	4602      	mov	r2, r0
 8001984:	f241 0303 	movw	r3, #4099	; 0x1003
 8001988:	429a      	cmp	r2, r3
 800198a:	d817      	bhi.n	80019bc <HAL_RCC_OscConfig+0x3b0>
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	6a1b      	ldr	r3, [r3, #32]
 8001990:	2b20      	cmp	r3, #32
 8001992:	d108      	bne.n	80019a6 <HAL_RCC_OscConfig+0x39a>
 8001994:	4b65      	ldr	r3, [pc, #404]	; (8001b2c <HAL_RCC_OscConfig+0x520>)
 8001996:	685b      	ldr	r3, [r3, #4]
 8001998:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800199c:	4a63      	ldr	r2, [pc, #396]	; (8001b2c <HAL_RCC_OscConfig+0x520>)
 800199e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80019a2:	6053      	str	r3, [r2, #4]
 80019a4:	e02e      	b.n	8001a04 <HAL_RCC_OscConfig+0x3f8>
 80019a6:	4b61      	ldr	r3, [pc, #388]	; (8001b2c <HAL_RCC_OscConfig+0x520>)
 80019a8:	685b      	ldr	r3, [r3, #4]
 80019aa:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	6a1b      	ldr	r3, [r3, #32]
 80019b2:	069b      	lsls	r3, r3, #26
 80019b4:	495d      	ldr	r1, [pc, #372]	; (8001b2c <HAL_RCC_OscConfig+0x520>)
 80019b6:	4313      	orrs	r3, r2
 80019b8:	604b      	str	r3, [r1, #4]
 80019ba:	e023      	b.n	8001a04 <HAL_RCC_OscConfig+0x3f8>
 80019bc:	4b5b      	ldr	r3, [pc, #364]	; (8001b2c <HAL_RCC_OscConfig+0x520>)
 80019be:	68db      	ldr	r3, [r3, #12]
 80019c0:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	6a1b      	ldr	r3, [r3, #32]
 80019c8:	061b      	lsls	r3, r3, #24
 80019ca:	4958      	ldr	r1, [pc, #352]	; (8001b2c <HAL_RCC_OscConfig+0x520>)
 80019cc:	4313      	orrs	r3, r2
 80019ce:	60cb      	str	r3, [r1, #12]
 80019d0:	e018      	b.n	8001a04 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80019d2:	4b56      	ldr	r3, [pc, #344]	; (8001b2c <HAL_RCC_OscConfig+0x520>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	4a55      	ldr	r2, [pc, #340]	; (8001b2c <HAL_RCC_OscConfig+0x520>)
 80019d8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80019dc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019de:	f7ff f911 	bl	8000c04 <HAL_GetTick>
 80019e2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80019e4:	e008      	b.n	80019f8 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80019e6:	f7ff f90d 	bl	8000c04 <HAL_GetTick>
 80019ea:	4602      	mov	r2, r0
 80019ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019ee:	1ad3      	subs	r3, r2, r3
 80019f0:	2b02      	cmp	r3, #2
 80019f2:	d901      	bls.n	80019f8 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 80019f4:	2303      	movs	r3, #3
 80019f6:	e212      	b.n	8001e1e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80019f8:	4b4c      	ldr	r3, [pc, #304]	; (8001b2c <HAL_RCC_OscConfig+0x520>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d1f0      	bne.n	80019e6 <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f003 0308 	and.w	r3, r3, #8
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d036      	beq.n	8001a7e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	695b      	ldr	r3, [r3, #20]
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d019      	beq.n	8001a4c <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a18:	4b44      	ldr	r3, [pc, #272]	; (8001b2c <HAL_RCC_OscConfig+0x520>)
 8001a1a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001a1c:	4a43      	ldr	r2, [pc, #268]	; (8001b2c <HAL_RCC_OscConfig+0x520>)
 8001a1e:	f043 0301 	orr.w	r3, r3, #1
 8001a22:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a24:	f7ff f8ee 	bl	8000c04 <HAL_GetTick>
 8001a28:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001a2a:	e008      	b.n	8001a3e <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a2c:	f7ff f8ea 	bl	8000c04 <HAL_GetTick>
 8001a30:	4602      	mov	r2, r0
 8001a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a34:	1ad3      	subs	r3, r2, r3
 8001a36:	2b02      	cmp	r3, #2
 8001a38:	d901      	bls.n	8001a3e <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 8001a3a:	2303      	movs	r3, #3
 8001a3c:	e1ef      	b.n	8001e1e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001a3e:	4b3b      	ldr	r3, [pc, #236]	; (8001b2c <HAL_RCC_OscConfig+0x520>)
 8001a40:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001a42:	f003 0302 	and.w	r3, r3, #2
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d0f0      	beq.n	8001a2c <HAL_RCC_OscConfig+0x420>
 8001a4a:	e018      	b.n	8001a7e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a4c:	4b37      	ldr	r3, [pc, #220]	; (8001b2c <HAL_RCC_OscConfig+0x520>)
 8001a4e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001a50:	4a36      	ldr	r2, [pc, #216]	; (8001b2c <HAL_RCC_OscConfig+0x520>)
 8001a52:	f023 0301 	bic.w	r3, r3, #1
 8001a56:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a58:	f7ff f8d4 	bl	8000c04 <HAL_GetTick>
 8001a5c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001a5e:	e008      	b.n	8001a72 <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a60:	f7ff f8d0 	bl	8000c04 <HAL_GetTick>
 8001a64:	4602      	mov	r2, r0
 8001a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a68:	1ad3      	subs	r3, r2, r3
 8001a6a:	2b02      	cmp	r3, #2
 8001a6c:	d901      	bls.n	8001a72 <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 8001a6e:	2303      	movs	r3, #3
 8001a70:	e1d5      	b.n	8001e1e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001a72:	4b2e      	ldr	r3, [pc, #184]	; (8001b2c <HAL_RCC_OscConfig+0x520>)
 8001a74:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001a76:	f003 0302 	and.w	r3, r3, #2
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d1f0      	bne.n	8001a60 <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f003 0320 	and.w	r3, r3, #32
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d036      	beq.n	8001af8 <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	699b      	ldr	r3, [r3, #24]
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d019      	beq.n	8001ac6 <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001a92:	4b26      	ldr	r3, [pc, #152]	; (8001b2c <HAL_RCC_OscConfig+0x520>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	4a25      	ldr	r2, [pc, #148]	; (8001b2c <HAL_RCC_OscConfig+0x520>)
 8001a98:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001a9c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001a9e:	f7ff f8b1 	bl	8000c04 <HAL_GetTick>
 8001aa2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001aa4:	e008      	b.n	8001ab8 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8001aa6:	f7ff f8ad 	bl	8000c04 <HAL_GetTick>
 8001aaa:	4602      	mov	r2, r0
 8001aac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aae:	1ad3      	subs	r3, r2, r3
 8001ab0:	2b02      	cmp	r3, #2
 8001ab2:	d901      	bls.n	8001ab8 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8001ab4:	2303      	movs	r3, #3
 8001ab6:	e1b2      	b.n	8001e1e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001ab8:	4b1c      	ldr	r3, [pc, #112]	; (8001b2c <HAL_RCC_OscConfig+0x520>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d0f0      	beq.n	8001aa6 <HAL_RCC_OscConfig+0x49a>
 8001ac4:	e018      	b.n	8001af8 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001ac6:	4b19      	ldr	r3, [pc, #100]	; (8001b2c <HAL_RCC_OscConfig+0x520>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	4a18      	ldr	r2, [pc, #96]	; (8001b2c <HAL_RCC_OscConfig+0x520>)
 8001acc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001ad0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001ad2:	f7ff f897 	bl	8000c04 <HAL_GetTick>
 8001ad6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001ad8:	e008      	b.n	8001aec <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8001ada:	f7ff f893 	bl	8000c04 <HAL_GetTick>
 8001ade:	4602      	mov	r2, r0
 8001ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ae2:	1ad3      	subs	r3, r2, r3
 8001ae4:	2b02      	cmp	r3, #2
 8001ae6:	d901      	bls.n	8001aec <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 8001ae8:	2303      	movs	r3, #3
 8001aea:	e198      	b.n	8001e1e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001aec:	4b0f      	ldr	r3, [pc, #60]	; (8001b2c <HAL_RCC_OscConfig+0x520>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d1f0      	bne.n	8001ada <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f003 0304 	and.w	r3, r3, #4
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	f000 8085 	beq.w	8001c10 <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001b06:	4b0a      	ldr	r3, [pc, #40]	; (8001b30 <HAL_RCC_OscConfig+0x524>)
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	4a09      	ldr	r2, [pc, #36]	; (8001b30 <HAL_RCC_OscConfig+0x524>)
 8001b0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b10:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001b12:	f7ff f877 	bl	8000c04 <HAL_GetTick>
 8001b16:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001b18:	e00c      	b.n	8001b34 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001b1a:	f7ff f873 	bl	8000c04 <HAL_GetTick>
 8001b1e:	4602      	mov	r2, r0
 8001b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b22:	1ad3      	subs	r3, r2, r3
 8001b24:	2b64      	cmp	r3, #100	; 0x64
 8001b26:	d905      	bls.n	8001b34 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 8001b28:	2303      	movs	r3, #3
 8001b2a:	e178      	b.n	8001e1e <HAL_RCC_OscConfig+0x812>
 8001b2c:	58024400 	.word	0x58024400
 8001b30:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001b34:	4b96      	ldr	r3, [pc, #600]	; (8001d90 <HAL_RCC_OscConfig+0x784>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d0ec      	beq.n	8001b1a <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	689b      	ldr	r3, [r3, #8]
 8001b44:	2b01      	cmp	r3, #1
 8001b46:	d106      	bne.n	8001b56 <HAL_RCC_OscConfig+0x54a>
 8001b48:	4b92      	ldr	r3, [pc, #584]	; (8001d94 <HAL_RCC_OscConfig+0x788>)
 8001b4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b4c:	4a91      	ldr	r2, [pc, #580]	; (8001d94 <HAL_RCC_OscConfig+0x788>)
 8001b4e:	f043 0301 	orr.w	r3, r3, #1
 8001b52:	6713      	str	r3, [r2, #112]	; 0x70
 8001b54:	e02d      	b.n	8001bb2 <HAL_RCC_OscConfig+0x5a6>
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	689b      	ldr	r3, [r3, #8]
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d10c      	bne.n	8001b78 <HAL_RCC_OscConfig+0x56c>
 8001b5e:	4b8d      	ldr	r3, [pc, #564]	; (8001d94 <HAL_RCC_OscConfig+0x788>)
 8001b60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b62:	4a8c      	ldr	r2, [pc, #560]	; (8001d94 <HAL_RCC_OscConfig+0x788>)
 8001b64:	f023 0301 	bic.w	r3, r3, #1
 8001b68:	6713      	str	r3, [r2, #112]	; 0x70
 8001b6a:	4b8a      	ldr	r3, [pc, #552]	; (8001d94 <HAL_RCC_OscConfig+0x788>)
 8001b6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b6e:	4a89      	ldr	r2, [pc, #548]	; (8001d94 <HAL_RCC_OscConfig+0x788>)
 8001b70:	f023 0304 	bic.w	r3, r3, #4
 8001b74:	6713      	str	r3, [r2, #112]	; 0x70
 8001b76:	e01c      	b.n	8001bb2 <HAL_RCC_OscConfig+0x5a6>
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	689b      	ldr	r3, [r3, #8]
 8001b7c:	2b05      	cmp	r3, #5
 8001b7e:	d10c      	bne.n	8001b9a <HAL_RCC_OscConfig+0x58e>
 8001b80:	4b84      	ldr	r3, [pc, #528]	; (8001d94 <HAL_RCC_OscConfig+0x788>)
 8001b82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b84:	4a83      	ldr	r2, [pc, #524]	; (8001d94 <HAL_RCC_OscConfig+0x788>)
 8001b86:	f043 0304 	orr.w	r3, r3, #4
 8001b8a:	6713      	str	r3, [r2, #112]	; 0x70
 8001b8c:	4b81      	ldr	r3, [pc, #516]	; (8001d94 <HAL_RCC_OscConfig+0x788>)
 8001b8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b90:	4a80      	ldr	r2, [pc, #512]	; (8001d94 <HAL_RCC_OscConfig+0x788>)
 8001b92:	f043 0301 	orr.w	r3, r3, #1
 8001b96:	6713      	str	r3, [r2, #112]	; 0x70
 8001b98:	e00b      	b.n	8001bb2 <HAL_RCC_OscConfig+0x5a6>
 8001b9a:	4b7e      	ldr	r3, [pc, #504]	; (8001d94 <HAL_RCC_OscConfig+0x788>)
 8001b9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b9e:	4a7d      	ldr	r2, [pc, #500]	; (8001d94 <HAL_RCC_OscConfig+0x788>)
 8001ba0:	f023 0301 	bic.w	r3, r3, #1
 8001ba4:	6713      	str	r3, [r2, #112]	; 0x70
 8001ba6:	4b7b      	ldr	r3, [pc, #492]	; (8001d94 <HAL_RCC_OscConfig+0x788>)
 8001ba8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001baa:	4a7a      	ldr	r2, [pc, #488]	; (8001d94 <HAL_RCC_OscConfig+0x788>)
 8001bac:	f023 0304 	bic.w	r3, r3, #4
 8001bb0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	689b      	ldr	r3, [r3, #8]
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d015      	beq.n	8001be6 <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bba:	f7ff f823 	bl	8000c04 <HAL_GetTick>
 8001bbe:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001bc0:	e00a      	b.n	8001bd8 <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001bc2:	f7ff f81f 	bl	8000c04 <HAL_GetTick>
 8001bc6:	4602      	mov	r2, r0
 8001bc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bca:	1ad3      	subs	r3, r2, r3
 8001bcc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bd0:	4293      	cmp	r3, r2
 8001bd2:	d901      	bls.n	8001bd8 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 8001bd4:	2303      	movs	r3, #3
 8001bd6:	e122      	b.n	8001e1e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001bd8:	4b6e      	ldr	r3, [pc, #440]	; (8001d94 <HAL_RCC_OscConfig+0x788>)
 8001bda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bdc:	f003 0302 	and.w	r3, r3, #2
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d0ee      	beq.n	8001bc2 <HAL_RCC_OscConfig+0x5b6>
 8001be4:	e014      	b.n	8001c10 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001be6:	f7ff f80d 	bl	8000c04 <HAL_GetTick>
 8001bea:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001bec:	e00a      	b.n	8001c04 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001bee:	f7ff f809 	bl	8000c04 <HAL_GetTick>
 8001bf2:	4602      	mov	r2, r0
 8001bf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bf6:	1ad3      	subs	r3, r2, r3
 8001bf8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bfc:	4293      	cmp	r3, r2
 8001bfe:	d901      	bls.n	8001c04 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 8001c00:	2303      	movs	r3, #3
 8001c02:	e10c      	b.n	8001e1e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001c04:	4b63      	ldr	r3, [pc, #396]	; (8001d94 <HAL_RCC_OscConfig+0x788>)
 8001c06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c08:	f003 0302 	and.w	r3, r3, #2
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d1ee      	bne.n	8001bee <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	f000 8101 	beq.w	8001e1c <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8001c1a:	4b5e      	ldr	r3, [pc, #376]	; (8001d94 <HAL_RCC_OscConfig+0x788>)
 8001c1c:	691b      	ldr	r3, [r3, #16]
 8001c1e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001c22:	2b18      	cmp	r3, #24
 8001c24:	f000 80bc 	beq.w	8001da0 <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c2c:	2b02      	cmp	r3, #2
 8001c2e:	f040 8095 	bne.w	8001d5c <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c32:	4b58      	ldr	r3, [pc, #352]	; (8001d94 <HAL_RCC_OscConfig+0x788>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	4a57      	ldr	r2, [pc, #348]	; (8001d94 <HAL_RCC_OscConfig+0x788>)
 8001c38:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001c3c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c3e:	f7fe ffe1 	bl	8000c04 <HAL_GetTick>
 8001c42:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001c44:	e008      	b.n	8001c58 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c46:	f7fe ffdd 	bl	8000c04 <HAL_GetTick>
 8001c4a:	4602      	mov	r2, r0
 8001c4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c4e:	1ad3      	subs	r3, r2, r3
 8001c50:	2b02      	cmp	r3, #2
 8001c52:	d901      	bls.n	8001c58 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 8001c54:	2303      	movs	r3, #3
 8001c56:	e0e2      	b.n	8001e1e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001c58:	4b4e      	ldr	r3, [pc, #312]	; (8001d94 <HAL_RCC_OscConfig+0x788>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d1f0      	bne.n	8001c46 <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c64:	4b4b      	ldr	r3, [pc, #300]	; (8001d94 <HAL_RCC_OscConfig+0x788>)
 8001c66:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001c68:	4b4b      	ldr	r3, [pc, #300]	; (8001d98 <HAL_RCC_OscConfig+0x78c>)
 8001c6a:	4013      	ands	r3, r2
 8001c6c:	687a      	ldr	r2, [r7, #4]
 8001c6e:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8001c70:	687a      	ldr	r2, [r7, #4]
 8001c72:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001c74:	0112      	lsls	r2, r2, #4
 8001c76:	430a      	orrs	r2, r1
 8001c78:	4946      	ldr	r1, [pc, #280]	; (8001d94 <HAL_RCC_OscConfig+0x788>)
 8001c7a:	4313      	orrs	r3, r2
 8001c7c:	628b      	str	r3, [r1, #40]	; 0x28
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c82:	3b01      	subs	r3, #1
 8001c84:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c8c:	3b01      	subs	r3, #1
 8001c8e:	025b      	lsls	r3, r3, #9
 8001c90:	b29b      	uxth	r3, r3
 8001c92:	431a      	orrs	r2, r3
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c98:	3b01      	subs	r3, #1
 8001c9a:	041b      	lsls	r3, r3, #16
 8001c9c:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8001ca0:	431a      	orrs	r2, r3
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ca6:	3b01      	subs	r3, #1
 8001ca8:	061b      	lsls	r3, r3, #24
 8001caa:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8001cae:	4939      	ldr	r1, [pc, #228]	; (8001d94 <HAL_RCC_OscConfig+0x788>)
 8001cb0:	4313      	orrs	r3, r2
 8001cb2:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8001cb4:	4b37      	ldr	r3, [pc, #220]	; (8001d94 <HAL_RCC_OscConfig+0x788>)
 8001cb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cb8:	4a36      	ldr	r2, [pc, #216]	; (8001d94 <HAL_RCC_OscConfig+0x788>)
 8001cba:	f023 0301 	bic.w	r3, r3, #1
 8001cbe:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001cc0:	4b34      	ldr	r3, [pc, #208]	; (8001d94 <HAL_RCC_OscConfig+0x788>)
 8001cc2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001cc4:	4b35      	ldr	r3, [pc, #212]	; (8001d9c <HAL_RCC_OscConfig+0x790>)
 8001cc6:	4013      	ands	r3, r2
 8001cc8:	687a      	ldr	r2, [r7, #4]
 8001cca:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001ccc:	00d2      	lsls	r2, r2, #3
 8001cce:	4931      	ldr	r1, [pc, #196]	; (8001d94 <HAL_RCC_OscConfig+0x788>)
 8001cd0:	4313      	orrs	r3, r2
 8001cd2:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8001cd4:	4b2f      	ldr	r3, [pc, #188]	; (8001d94 <HAL_RCC_OscConfig+0x788>)
 8001cd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cd8:	f023 020c 	bic.w	r2, r3, #12
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ce0:	492c      	ldr	r1, [pc, #176]	; (8001d94 <HAL_RCC_OscConfig+0x788>)
 8001ce2:	4313      	orrs	r3, r2
 8001ce4:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8001ce6:	4b2b      	ldr	r3, [pc, #172]	; (8001d94 <HAL_RCC_OscConfig+0x788>)
 8001ce8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cea:	f023 0202 	bic.w	r2, r3, #2
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cf2:	4928      	ldr	r1, [pc, #160]	; (8001d94 <HAL_RCC_OscConfig+0x788>)
 8001cf4:	4313      	orrs	r3, r2
 8001cf6:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8001cf8:	4b26      	ldr	r3, [pc, #152]	; (8001d94 <HAL_RCC_OscConfig+0x788>)
 8001cfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cfc:	4a25      	ldr	r2, [pc, #148]	; (8001d94 <HAL_RCC_OscConfig+0x788>)
 8001cfe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d02:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001d04:	4b23      	ldr	r3, [pc, #140]	; (8001d94 <HAL_RCC_OscConfig+0x788>)
 8001d06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d08:	4a22      	ldr	r2, [pc, #136]	; (8001d94 <HAL_RCC_OscConfig+0x788>)
 8001d0a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d0e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8001d10:	4b20      	ldr	r3, [pc, #128]	; (8001d94 <HAL_RCC_OscConfig+0x788>)
 8001d12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d14:	4a1f      	ldr	r2, [pc, #124]	; (8001d94 <HAL_RCC_OscConfig+0x788>)
 8001d16:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d1a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8001d1c:	4b1d      	ldr	r3, [pc, #116]	; (8001d94 <HAL_RCC_OscConfig+0x788>)
 8001d1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d20:	4a1c      	ldr	r2, [pc, #112]	; (8001d94 <HAL_RCC_OscConfig+0x788>)
 8001d22:	f043 0301 	orr.w	r3, r3, #1
 8001d26:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d28:	4b1a      	ldr	r3, [pc, #104]	; (8001d94 <HAL_RCC_OscConfig+0x788>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	4a19      	ldr	r2, [pc, #100]	; (8001d94 <HAL_RCC_OscConfig+0x788>)
 8001d2e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d32:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d34:	f7fe ff66 	bl	8000c04 <HAL_GetTick>
 8001d38:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001d3a:	e008      	b.n	8001d4e <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d3c:	f7fe ff62 	bl	8000c04 <HAL_GetTick>
 8001d40:	4602      	mov	r2, r0
 8001d42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d44:	1ad3      	subs	r3, r2, r3
 8001d46:	2b02      	cmp	r3, #2
 8001d48:	d901      	bls.n	8001d4e <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 8001d4a:	2303      	movs	r3, #3
 8001d4c:	e067      	b.n	8001e1e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001d4e:	4b11      	ldr	r3, [pc, #68]	; (8001d94 <HAL_RCC_OscConfig+0x788>)
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d0f0      	beq.n	8001d3c <HAL_RCC_OscConfig+0x730>
 8001d5a:	e05f      	b.n	8001e1c <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d5c:	4b0d      	ldr	r3, [pc, #52]	; (8001d94 <HAL_RCC_OscConfig+0x788>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	4a0c      	ldr	r2, [pc, #48]	; (8001d94 <HAL_RCC_OscConfig+0x788>)
 8001d62:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001d66:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d68:	f7fe ff4c 	bl	8000c04 <HAL_GetTick>
 8001d6c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001d6e:	e008      	b.n	8001d82 <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d70:	f7fe ff48 	bl	8000c04 <HAL_GetTick>
 8001d74:	4602      	mov	r2, r0
 8001d76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d78:	1ad3      	subs	r3, r2, r3
 8001d7a:	2b02      	cmp	r3, #2
 8001d7c:	d901      	bls.n	8001d82 <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 8001d7e:	2303      	movs	r3, #3
 8001d80:	e04d      	b.n	8001e1e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001d82:	4b04      	ldr	r3, [pc, #16]	; (8001d94 <HAL_RCC_OscConfig+0x788>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d1f0      	bne.n	8001d70 <HAL_RCC_OscConfig+0x764>
 8001d8e:	e045      	b.n	8001e1c <HAL_RCC_OscConfig+0x810>
 8001d90:	58024800 	.word	0x58024800
 8001d94:	58024400 	.word	0x58024400
 8001d98:	fffffc0c 	.word	0xfffffc0c
 8001d9c:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8001da0:	4b21      	ldr	r3, [pc, #132]	; (8001e28 <HAL_RCC_OscConfig+0x81c>)
 8001da2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001da4:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8001da6:	4b20      	ldr	r3, [pc, #128]	; (8001e28 <HAL_RCC_OscConfig+0x81c>)
 8001da8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001daa:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001db0:	2b01      	cmp	r3, #1
 8001db2:	d031      	beq.n	8001e18 <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001db4:	693b      	ldr	r3, [r7, #16]
 8001db6:	f003 0203 	and.w	r2, r3, #3
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001dbe:	429a      	cmp	r2, r3
 8001dc0:	d12a      	bne.n	8001e18 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001dc2:	693b      	ldr	r3, [r7, #16]
 8001dc4:	091b      	lsrs	r3, r3, #4
 8001dc6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001dce:	429a      	cmp	r2, r3
 8001dd0:	d122      	bne.n	8001e18 <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ddc:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001dde:	429a      	cmp	r2, r3
 8001de0:	d11a      	bne.n	8001e18 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	0a5b      	lsrs	r3, r3, #9
 8001de6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001dee:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001df0:	429a      	cmp	r2, r3
 8001df2:	d111      	bne.n	8001e18 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	0c1b      	lsrs	r3, r3, #16
 8001df8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e00:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001e02:	429a      	cmp	r2, r3
 8001e04:	d108      	bne.n	8001e18 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	0e1b      	lsrs	r3, r3, #24
 8001e0a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e12:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001e14:	429a      	cmp	r2, r3
 8001e16:	d001      	beq.n	8001e1c <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 8001e18:	2301      	movs	r3, #1
 8001e1a:	e000      	b.n	8001e1e <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 8001e1c:	2300      	movs	r3, #0
}
 8001e1e:	4618      	mov	r0, r3
 8001e20:	3730      	adds	r7, #48	; 0x30
 8001e22:	46bd      	mov	sp, r7
 8001e24:	bd80      	pop	{r7, pc}
 8001e26:	bf00      	nop
 8001e28:	58024400 	.word	0x58024400

08001e2c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b086      	sub	sp, #24
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
 8001e34:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d101      	bne.n	8001e40 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e3c:	2301      	movs	r3, #1
 8001e3e:	e19c      	b.n	800217a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001e40:	4b8a      	ldr	r3, [pc, #552]	; (800206c <HAL_RCC_ClockConfig+0x240>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f003 030f 	and.w	r3, r3, #15
 8001e48:	683a      	ldr	r2, [r7, #0]
 8001e4a:	429a      	cmp	r2, r3
 8001e4c:	d910      	bls.n	8001e70 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e4e:	4b87      	ldr	r3, [pc, #540]	; (800206c <HAL_RCC_ClockConfig+0x240>)
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f023 020f 	bic.w	r2, r3, #15
 8001e56:	4985      	ldr	r1, [pc, #532]	; (800206c <HAL_RCC_ClockConfig+0x240>)
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	4313      	orrs	r3, r2
 8001e5c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e5e:	4b83      	ldr	r3, [pc, #524]	; (800206c <HAL_RCC_ClockConfig+0x240>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f003 030f 	and.w	r3, r3, #15
 8001e66:	683a      	ldr	r2, [r7, #0]
 8001e68:	429a      	cmp	r2, r3
 8001e6a:	d001      	beq.n	8001e70 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001e6c:	2301      	movs	r3, #1
 8001e6e:	e184      	b.n	800217a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f003 0304 	and.w	r3, r3, #4
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d010      	beq.n	8001e9e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	691a      	ldr	r2, [r3, #16]
 8001e80:	4b7b      	ldr	r3, [pc, #492]	; (8002070 <HAL_RCC_ClockConfig+0x244>)
 8001e82:	699b      	ldr	r3, [r3, #24]
 8001e84:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001e88:	429a      	cmp	r2, r3
 8001e8a:	d908      	bls.n	8001e9e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001e8c:	4b78      	ldr	r3, [pc, #480]	; (8002070 <HAL_RCC_ClockConfig+0x244>)
 8001e8e:	699b      	ldr	r3, [r3, #24]
 8001e90:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	691b      	ldr	r3, [r3, #16]
 8001e98:	4975      	ldr	r1, [pc, #468]	; (8002070 <HAL_RCC_ClockConfig+0x244>)
 8001e9a:	4313      	orrs	r3, r2
 8001e9c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f003 0308 	and.w	r3, r3, #8
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d010      	beq.n	8001ecc <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	695a      	ldr	r2, [r3, #20]
 8001eae:	4b70      	ldr	r3, [pc, #448]	; (8002070 <HAL_RCC_ClockConfig+0x244>)
 8001eb0:	69db      	ldr	r3, [r3, #28]
 8001eb2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001eb6:	429a      	cmp	r2, r3
 8001eb8:	d908      	bls.n	8001ecc <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001eba:	4b6d      	ldr	r3, [pc, #436]	; (8002070 <HAL_RCC_ClockConfig+0x244>)
 8001ebc:	69db      	ldr	r3, [r3, #28]
 8001ebe:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	695b      	ldr	r3, [r3, #20]
 8001ec6:	496a      	ldr	r1, [pc, #424]	; (8002070 <HAL_RCC_ClockConfig+0x244>)
 8001ec8:	4313      	orrs	r3, r2
 8001eca:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f003 0310 	and.w	r3, r3, #16
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d010      	beq.n	8001efa <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	699a      	ldr	r2, [r3, #24]
 8001edc:	4b64      	ldr	r3, [pc, #400]	; (8002070 <HAL_RCC_ClockConfig+0x244>)
 8001ede:	69db      	ldr	r3, [r3, #28]
 8001ee0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001ee4:	429a      	cmp	r2, r3
 8001ee6:	d908      	bls.n	8001efa <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001ee8:	4b61      	ldr	r3, [pc, #388]	; (8002070 <HAL_RCC_ClockConfig+0x244>)
 8001eea:	69db      	ldr	r3, [r3, #28]
 8001eec:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	699b      	ldr	r3, [r3, #24]
 8001ef4:	495e      	ldr	r1, [pc, #376]	; (8002070 <HAL_RCC_ClockConfig+0x244>)
 8001ef6:	4313      	orrs	r3, r2
 8001ef8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f003 0320 	and.w	r3, r3, #32
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d010      	beq.n	8001f28 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	69da      	ldr	r2, [r3, #28]
 8001f0a:	4b59      	ldr	r3, [pc, #356]	; (8002070 <HAL_RCC_ClockConfig+0x244>)
 8001f0c:	6a1b      	ldr	r3, [r3, #32]
 8001f0e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001f12:	429a      	cmp	r2, r3
 8001f14:	d908      	bls.n	8001f28 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8001f16:	4b56      	ldr	r3, [pc, #344]	; (8002070 <HAL_RCC_ClockConfig+0x244>)
 8001f18:	6a1b      	ldr	r3, [r3, #32]
 8001f1a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	69db      	ldr	r3, [r3, #28]
 8001f22:	4953      	ldr	r1, [pc, #332]	; (8002070 <HAL_RCC_ClockConfig+0x244>)
 8001f24:	4313      	orrs	r3, r2
 8001f26:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f003 0302 	and.w	r3, r3, #2
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d010      	beq.n	8001f56 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	68da      	ldr	r2, [r3, #12]
 8001f38:	4b4d      	ldr	r3, [pc, #308]	; (8002070 <HAL_RCC_ClockConfig+0x244>)
 8001f3a:	699b      	ldr	r3, [r3, #24]
 8001f3c:	f003 030f 	and.w	r3, r3, #15
 8001f40:	429a      	cmp	r2, r3
 8001f42:	d908      	bls.n	8001f56 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f44:	4b4a      	ldr	r3, [pc, #296]	; (8002070 <HAL_RCC_ClockConfig+0x244>)
 8001f46:	699b      	ldr	r3, [r3, #24]
 8001f48:	f023 020f 	bic.w	r2, r3, #15
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	68db      	ldr	r3, [r3, #12]
 8001f50:	4947      	ldr	r1, [pc, #284]	; (8002070 <HAL_RCC_ClockConfig+0x244>)
 8001f52:	4313      	orrs	r3, r2
 8001f54:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f003 0301 	and.w	r3, r3, #1
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d055      	beq.n	800200e <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8001f62:	4b43      	ldr	r3, [pc, #268]	; (8002070 <HAL_RCC_ClockConfig+0x244>)
 8001f64:	699b      	ldr	r3, [r3, #24]
 8001f66:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	689b      	ldr	r3, [r3, #8]
 8001f6e:	4940      	ldr	r1, [pc, #256]	; (8002070 <HAL_RCC_ClockConfig+0x244>)
 8001f70:	4313      	orrs	r3, r2
 8001f72:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	685b      	ldr	r3, [r3, #4]
 8001f78:	2b02      	cmp	r3, #2
 8001f7a:	d107      	bne.n	8001f8c <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001f7c:	4b3c      	ldr	r3, [pc, #240]	; (8002070 <HAL_RCC_ClockConfig+0x244>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d121      	bne.n	8001fcc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001f88:	2301      	movs	r3, #1
 8001f8a:	e0f6      	b.n	800217a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	685b      	ldr	r3, [r3, #4]
 8001f90:	2b03      	cmp	r3, #3
 8001f92:	d107      	bne.n	8001fa4 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001f94:	4b36      	ldr	r3, [pc, #216]	; (8002070 <HAL_RCC_ClockConfig+0x244>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d115      	bne.n	8001fcc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001fa0:	2301      	movs	r3, #1
 8001fa2:	e0ea      	b.n	800217a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	685b      	ldr	r3, [r3, #4]
 8001fa8:	2b01      	cmp	r3, #1
 8001faa:	d107      	bne.n	8001fbc <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001fac:	4b30      	ldr	r3, [pc, #192]	; (8002070 <HAL_RCC_ClockConfig+0x244>)
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d109      	bne.n	8001fcc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001fb8:	2301      	movs	r3, #1
 8001fba:	e0de      	b.n	800217a <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001fbc:	4b2c      	ldr	r3, [pc, #176]	; (8002070 <HAL_RCC_ClockConfig+0x244>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f003 0304 	and.w	r3, r3, #4
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d101      	bne.n	8001fcc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001fc8:	2301      	movs	r3, #1
 8001fca:	e0d6      	b.n	800217a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001fcc:	4b28      	ldr	r3, [pc, #160]	; (8002070 <HAL_RCC_ClockConfig+0x244>)
 8001fce:	691b      	ldr	r3, [r3, #16]
 8001fd0:	f023 0207 	bic.w	r2, r3, #7
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	685b      	ldr	r3, [r3, #4]
 8001fd8:	4925      	ldr	r1, [pc, #148]	; (8002070 <HAL_RCC_ClockConfig+0x244>)
 8001fda:	4313      	orrs	r3, r2
 8001fdc:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fde:	f7fe fe11 	bl	8000c04 <HAL_GetTick>
 8001fe2:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fe4:	e00a      	b.n	8001ffc <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001fe6:	f7fe fe0d 	bl	8000c04 <HAL_GetTick>
 8001fea:	4602      	mov	r2, r0
 8001fec:	697b      	ldr	r3, [r7, #20]
 8001fee:	1ad3      	subs	r3, r2, r3
 8001ff0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ff4:	4293      	cmp	r3, r2
 8001ff6:	d901      	bls.n	8001ffc <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8001ff8:	2303      	movs	r3, #3
 8001ffa:	e0be      	b.n	800217a <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ffc:	4b1c      	ldr	r3, [pc, #112]	; (8002070 <HAL_RCC_ClockConfig+0x244>)
 8001ffe:	691b      	ldr	r3, [r3, #16]
 8002000:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	685b      	ldr	r3, [r3, #4]
 8002008:	00db      	lsls	r3, r3, #3
 800200a:	429a      	cmp	r2, r3
 800200c:	d1eb      	bne.n	8001fe6 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f003 0302 	and.w	r3, r3, #2
 8002016:	2b00      	cmp	r3, #0
 8002018:	d010      	beq.n	800203c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	68da      	ldr	r2, [r3, #12]
 800201e:	4b14      	ldr	r3, [pc, #80]	; (8002070 <HAL_RCC_ClockConfig+0x244>)
 8002020:	699b      	ldr	r3, [r3, #24]
 8002022:	f003 030f 	and.w	r3, r3, #15
 8002026:	429a      	cmp	r2, r3
 8002028:	d208      	bcs.n	800203c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800202a:	4b11      	ldr	r3, [pc, #68]	; (8002070 <HAL_RCC_ClockConfig+0x244>)
 800202c:	699b      	ldr	r3, [r3, #24]
 800202e:	f023 020f 	bic.w	r2, r3, #15
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	68db      	ldr	r3, [r3, #12]
 8002036:	490e      	ldr	r1, [pc, #56]	; (8002070 <HAL_RCC_ClockConfig+0x244>)
 8002038:	4313      	orrs	r3, r2
 800203a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800203c:	4b0b      	ldr	r3, [pc, #44]	; (800206c <HAL_RCC_ClockConfig+0x240>)
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f003 030f 	and.w	r3, r3, #15
 8002044:	683a      	ldr	r2, [r7, #0]
 8002046:	429a      	cmp	r2, r3
 8002048:	d214      	bcs.n	8002074 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800204a:	4b08      	ldr	r3, [pc, #32]	; (800206c <HAL_RCC_ClockConfig+0x240>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f023 020f 	bic.w	r2, r3, #15
 8002052:	4906      	ldr	r1, [pc, #24]	; (800206c <HAL_RCC_ClockConfig+0x240>)
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	4313      	orrs	r3, r2
 8002058:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800205a:	4b04      	ldr	r3, [pc, #16]	; (800206c <HAL_RCC_ClockConfig+0x240>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f003 030f 	and.w	r3, r3, #15
 8002062:	683a      	ldr	r2, [r7, #0]
 8002064:	429a      	cmp	r2, r3
 8002066:	d005      	beq.n	8002074 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002068:	2301      	movs	r3, #1
 800206a:	e086      	b.n	800217a <HAL_RCC_ClockConfig+0x34e>
 800206c:	52002000 	.word	0x52002000
 8002070:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f003 0304 	and.w	r3, r3, #4
 800207c:	2b00      	cmp	r3, #0
 800207e:	d010      	beq.n	80020a2 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	691a      	ldr	r2, [r3, #16]
 8002084:	4b3f      	ldr	r3, [pc, #252]	; (8002184 <HAL_RCC_ClockConfig+0x358>)
 8002086:	699b      	ldr	r3, [r3, #24]
 8002088:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800208c:	429a      	cmp	r2, r3
 800208e:	d208      	bcs.n	80020a2 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002090:	4b3c      	ldr	r3, [pc, #240]	; (8002184 <HAL_RCC_ClockConfig+0x358>)
 8002092:	699b      	ldr	r3, [r3, #24]
 8002094:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	691b      	ldr	r3, [r3, #16]
 800209c:	4939      	ldr	r1, [pc, #228]	; (8002184 <HAL_RCC_ClockConfig+0x358>)
 800209e:	4313      	orrs	r3, r2
 80020a0:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f003 0308 	and.w	r3, r3, #8
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d010      	beq.n	80020d0 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	695a      	ldr	r2, [r3, #20]
 80020b2:	4b34      	ldr	r3, [pc, #208]	; (8002184 <HAL_RCC_ClockConfig+0x358>)
 80020b4:	69db      	ldr	r3, [r3, #28]
 80020b6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80020ba:	429a      	cmp	r2, r3
 80020bc:	d208      	bcs.n	80020d0 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80020be:	4b31      	ldr	r3, [pc, #196]	; (8002184 <HAL_RCC_ClockConfig+0x358>)
 80020c0:	69db      	ldr	r3, [r3, #28]
 80020c2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	695b      	ldr	r3, [r3, #20]
 80020ca:	492e      	ldr	r1, [pc, #184]	; (8002184 <HAL_RCC_ClockConfig+0x358>)
 80020cc:	4313      	orrs	r3, r2
 80020ce:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f003 0310 	and.w	r3, r3, #16
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d010      	beq.n	80020fe <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	699a      	ldr	r2, [r3, #24]
 80020e0:	4b28      	ldr	r3, [pc, #160]	; (8002184 <HAL_RCC_ClockConfig+0x358>)
 80020e2:	69db      	ldr	r3, [r3, #28]
 80020e4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80020e8:	429a      	cmp	r2, r3
 80020ea:	d208      	bcs.n	80020fe <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80020ec:	4b25      	ldr	r3, [pc, #148]	; (8002184 <HAL_RCC_ClockConfig+0x358>)
 80020ee:	69db      	ldr	r3, [r3, #28]
 80020f0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	699b      	ldr	r3, [r3, #24]
 80020f8:	4922      	ldr	r1, [pc, #136]	; (8002184 <HAL_RCC_ClockConfig+0x358>)
 80020fa:	4313      	orrs	r3, r2
 80020fc:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f003 0320 	and.w	r3, r3, #32
 8002106:	2b00      	cmp	r3, #0
 8002108:	d010      	beq.n	800212c <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	69da      	ldr	r2, [r3, #28]
 800210e:	4b1d      	ldr	r3, [pc, #116]	; (8002184 <HAL_RCC_ClockConfig+0x358>)
 8002110:	6a1b      	ldr	r3, [r3, #32]
 8002112:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002116:	429a      	cmp	r2, r3
 8002118:	d208      	bcs.n	800212c <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800211a:	4b1a      	ldr	r3, [pc, #104]	; (8002184 <HAL_RCC_ClockConfig+0x358>)
 800211c:	6a1b      	ldr	r3, [r3, #32]
 800211e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	69db      	ldr	r3, [r3, #28]
 8002126:	4917      	ldr	r1, [pc, #92]	; (8002184 <HAL_RCC_ClockConfig+0x358>)
 8002128:	4313      	orrs	r3, r2
 800212a:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800212c:	f000 f834 	bl	8002198 <HAL_RCC_GetSysClockFreq>
 8002130:	4601      	mov	r1, r0
 8002132:	4b14      	ldr	r3, [pc, #80]	; (8002184 <HAL_RCC_ClockConfig+0x358>)
 8002134:	699b      	ldr	r3, [r3, #24]
 8002136:	0a1b      	lsrs	r3, r3, #8
 8002138:	f003 030f 	and.w	r3, r3, #15
 800213c:	4a12      	ldr	r2, [pc, #72]	; (8002188 <HAL_RCC_ClockConfig+0x35c>)
 800213e:	5cd3      	ldrb	r3, [r2, r3]
 8002140:	f003 031f 	and.w	r3, r3, #31
 8002144:	fa21 f303 	lsr.w	r3, r1, r3
 8002148:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800214a:	4b0e      	ldr	r3, [pc, #56]	; (8002184 <HAL_RCC_ClockConfig+0x358>)
 800214c:	699b      	ldr	r3, [r3, #24]
 800214e:	f003 030f 	and.w	r3, r3, #15
 8002152:	4a0d      	ldr	r2, [pc, #52]	; (8002188 <HAL_RCC_ClockConfig+0x35c>)
 8002154:	5cd3      	ldrb	r3, [r2, r3]
 8002156:	f003 031f 	and.w	r3, r3, #31
 800215a:	693a      	ldr	r2, [r7, #16]
 800215c:	fa22 f303 	lsr.w	r3, r2, r3
 8002160:	4a0a      	ldr	r2, [pc, #40]	; (800218c <HAL_RCC_ClockConfig+0x360>)
 8002162:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002164:	4a0a      	ldr	r2, [pc, #40]	; (8002190 <HAL_RCC_ClockConfig+0x364>)
 8002166:	693b      	ldr	r3, [r7, #16]
 8002168:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800216a:	4b0a      	ldr	r3, [pc, #40]	; (8002194 <HAL_RCC_ClockConfig+0x368>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	4618      	mov	r0, r3
 8002170:	f7fe fcfe 	bl	8000b70 <HAL_InitTick>
 8002174:	4603      	mov	r3, r0
 8002176:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002178:	7bfb      	ldrb	r3, [r7, #15]
}
 800217a:	4618      	mov	r0, r3
 800217c:	3718      	adds	r7, #24
 800217e:	46bd      	mov	sp, r7
 8002180:	bd80      	pop	{r7, pc}
 8002182:	bf00      	nop
 8002184:	58024400 	.word	0x58024400
 8002188:	08008690 	.word	0x08008690
 800218c:	24000004 	.word	0x24000004
 8002190:	24000000 	.word	0x24000000
 8002194:	24000008 	.word	0x24000008

08002198 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002198:	b480      	push	{r7}
 800219a:	b089      	sub	sp, #36	; 0x24
 800219c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800219e:	4baf      	ldr	r3, [pc, #700]	; (800245c <HAL_RCC_GetSysClockFreq+0x2c4>)
 80021a0:	691b      	ldr	r3, [r3, #16]
 80021a2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80021a6:	2b18      	cmp	r3, #24
 80021a8:	f200 814e 	bhi.w	8002448 <HAL_RCC_GetSysClockFreq+0x2b0>
 80021ac:	a201      	add	r2, pc, #4	; (adr r2, 80021b4 <HAL_RCC_GetSysClockFreq+0x1c>)
 80021ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021b2:	bf00      	nop
 80021b4:	08002219 	.word	0x08002219
 80021b8:	08002449 	.word	0x08002449
 80021bc:	08002449 	.word	0x08002449
 80021c0:	08002449 	.word	0x08002449
 80021c4:	08002449 	.word	0x08002449
 80021c8:	08002449 	.word	0x08002449
 80021cc:	08002449 	.word	0x08002449
 80021d0:	08002449 	.word	0x08002449
 80021d4:	0800223f 	.word	0x0800223f
 80021d8:	08002449 	.word	0x08002449
 80021dc:	08002449 	.word	0x08002449
 80021e0:	08002449 	.word	0x08002449
 80021e4:	08002449 	.word	0x08002449
 80021e8:	08002449 	.word	0x08002449
 80021ec:	08002449 	.word	0x08002449
 80021f0:	08002449 	.word	0x08002449
 80021f4:	08002245 	.word	0x08002245
 80021f8:	08002449 	.word	0x08002449
 80021fc:	08002449 	.word	0x08002449
 8002200:	08002449 	.word	0x08002449
 8002204:	08002449 	.word	0x08002449
 8002208:	08002449 	.word	0x08002449
 800220c:	08002449 	.word	0x08002449
 8002210:	08002449 	.word	0x08002449
 8002214:	0800224b 	.word	0x0800224b
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002218:	4b90      	ldr	r3, [pc, #576]	; (800245c <HAL_RCC_GetSysClockFreq+0x2c4>)
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f003 0320 	and.w	r3, r3, #32
 8002220:	2b00      	cmp	r3, #0
 8002222:	d009      	beq.n	8002238 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002224:	4b8d      	ldr	r3, [pc, #564]	; (800245c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	08db      	lsrs	r3, r3, #3
 800222a:	f003 0303 	and.w	r3, r3, #3
 800222e:	4a8c      	ldr	r2, [pc, #560]	; (8002460 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8002230:	fa22 f303 	lsr.w	r3, r2, r3
 8002234:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8002236:	e10a      	b.n	800244e <HAL_RCC_GetSysClockFreq+0x2b6>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002238:	4b89      	ldr	r3, [pc, #548]	; (8002460 <HAL_RCC_GetSysClockFreq+0x2c8>)
 800223a:	61bb      	str	r3, [r7, #24]
    break;
 800223c:	e107      	b.n	800244e <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800223e:	4b89      	ldr	r3, [pc, #548]	; (8002464 <HAL_RCC_GetSysClockFreq+0x2cc>)
 8002240:	61bb      	str	r3, [r7, #24]
    break;
 8002242:	e104      	b.n	800244e <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8002244:	4b88      	ldr	r3, [pc, #544]	; (8002468 <HAL_RCC_GetSysClockFreq+0x2d0>)
 8002246:	61bb      	str	r3, [r7, #24]
    break;
 8002248:	e101      	b.n	800244e <HAL_RCC_GetSysClockFreq+0x2b6>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800224a:	4b84      	ldr	r3, [pc, #528]	; (800245c <HAL_RCC_GetSysClockFreq+0x2c4>)
 800224c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800224e:	f003 0303 	and.w	r3, r3, #3
 8002252:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8002254:	4b81      	ldr	r3, [pc, #516]	; (800245c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8002256:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002258:	091b      	lsrs	r3, r3, #4
 800225a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800225e:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002260:	4b7e      	ldr	r3, [pc, #504]	; (800245c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8002262:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002264:	f003 0301 	and.w	r3, r3, #1
 8002268:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800226a:	4b7c      	ldr	r3, [pc, #496]	; (800245c <HAL_RCC_GetSysClockFreq+0x2c4>)
 800226c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800226e:	08db      	lsrs	r3, r3, #3
 8002270:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002274:	68fa      	ldr	r2, [r7, #12]
 8002276:	fb02 f303 	mul.w	r3, r2, r3
 800227a:	ee07 3a90 	vmov	s15, r3
 800227e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002282:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8002286:	693b      	ldr	r3, [r7, #16]
 8002288:	2b00      	cmp	r3, #0
 800228a:	f000 80da 	beq.w	8002442 <HAL_RCC_GetSysClockFreq+0x2aa>
    {
      switch (pllsource)
 800228e:	697b      	ldr	r3, [r7, #20]
 8002290:	2b01      	cmp	r3, #1
 8002292:	d05a      	beq.n	800234a <HAL_RCC_GetSysClockFreq+0x1b2>
 8002294:	2b01      	cmp	r3, #1
 8002296:	d302      	bcc.n	800229e <HAL_RCC_GetSysClockFreq+0x106>
 8002298:	2b02      	cmp	r3, #2
 800229a:	d078      	beq.n	800238e <HAL_RCC_GetSysClockFreq+0x1f6>
 800229c:	e099      	b.n	80023d2 <HAL_RCC_GetSysClockFreq+0x23a>
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800229e:	4b6f      	ldr	r3, [pc, #444]	; (800245c <HAL_RCC_GetSysClockFreq+0x2c4>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f003 0320 	and.w	r3, r3, #32
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d02d      	beq.n	8002306 <HAL_RCC_GetSysClockFreq+0x16e>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80022aa:	4b6c      	ldr	r3, [pc, #432]	; (800245c <HAL_RCC_GetSysClockFreq+0x2c4>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	08db      	lsrs	r3, r3, #3
 80022b0:	f003 0303 	and.w	r3, r3, #3
 80022b4:	4a6a      	ldr	r2, [pc, #424]	; (8002460 <HAL_RCC_GetSysClockFreq+0x2c8>)
 80022b6:	fa22 f303 	lsr.w	r3, r2, r3
 80022ba:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	ee07 3a90 	vmov	s15, r3
 80022c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80022c6:	693b      	ldr	r3, [r7, #16]
 80022c8:	ee07 3a90 	vmov	s15, r3
 80022cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80022d0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80022d4:	4b61      	ldr	r3, [pc, #388]	; (800245c <HAL_RCC_GetSysClockFreq+0x2c4>)
 80022d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80022dc:	ee07 3a90 	vmov	s15, r3
 80022e0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80022e4:	ed97 6a02 	vldr	s12, [r7, #8]
 80022e8:	eddf 5a60 	vldr	s11, [pc, #384]	; 800246c <HAL_RCC_GetSysClockFreq+0x2d4>
 80022ec:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80022f0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80022f4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80022f8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80022fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002300:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8002304:	e087      	b.n	8002416 <HAL_RCC_GetSysClockFreq+0x27e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002306:	693b      	ldr	r3, [r7, #16]
 8002308:	ee07 3a90 	vmov	s15, r3
 800230c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002310:	eddf 6a57 	vldr	s13, [pc, #348]	; 8002470 <HAL_RCC_GetSysClockFreq+0x2d8>
 8002314:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002318:	4b50      	ldr	r3, [pc, #320]	; (800245c <HAL_RCC_GetSysClockFreq+0x2c4>)
 800231a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800231c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002320:	ee07 3a90 	vmov	s15, r3
 8002324:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002328:	ed97 6a02 	vldr	s12, [r7, #8]
 800232c:	eddf 5a4f 	vldr	s11, [pc, #316]	; 800246c <HAL_RCC_GetSysClockFreq+0x2d4>
 8002330:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002334:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002338:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800233c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002340:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002344:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002348:	e065      	b.n	8002416 <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800234a:	693b      	ldr	r3, [r7, #16]
 800234c:	ee07 3a90 	vmov	s15, r3
 8002350:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002354:	eddf 6a47 	vldr	s13, [pc, #284]	; 8002474 <HAL_RCC_GetSysClockFreq+0x2dc>
 8002358:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800235c:	4b3f      	ldr	r3, [pc, #252]	; (800245c <HAL_RCC_GetSysClockFreq+0x2c4>)
 800235e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002360:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002364:	ee07 3a90 	vmov	s15, r3
 8002368:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800236c:	ed97 6a02 	vldr	s12, [r7, #8]
 8002370:	eddf 5a3e 	vldr	s11, [pc, #248]	; 800246c <HAL_RCC_GetSysClockFreq+0x2d4>
 8002374:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002378:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800237c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002380:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002384:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002388:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800238c:	e043      	b.n	8002416 <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800238e:	693b      	ldr	r3, [r7, #16]
 8002390:	ee07 3a90 	vmov	s15, r3
 8002394:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002398:	eddf 6a37 	vldr	s13, [pc, #220]	; 8002478 <HAL_RCC_GetSysClockFreq+0x2e0>
 800239c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80023a0:	4b2e      	ldr	r3, [pc, #184]	; (800245c <HAL_RCC_GetSysClockFreq+0x2c4>)
 80023a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80023a8:	ee07 3a90 	vmov	s15, r3
 80023ac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80023b0:	ed97 6a02 	vldr	s12, [r7, #8]
 80023b4:	eddf 5a2d 	vldr	s11, [pc, #180]	; 800246c <HAL_RCC_GetSysClockFreq+0x2d4>
 80023b8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80023bc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80023c0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80023c4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80023c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80023cc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80023d0:	e021      	b.n	8002416 <HAL_RCC_GetSysClockFreq+0x27e>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80023d2:	693b      	ldr	r3, [r7, #16]
 80023d4:	ee07 3a90 	vmov	s15, r3
 80023d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80023dc:	eddf 6a25 	vldr	s13, [pc, #148]	; 8002474 <HAL_RCC_GetSysClockFreq+0x2dc>
 80023e0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80023e4:	4b1d      	ldr	r3, [pc, #116]	; (800245c <HAL_RCC_GetSysClockFreq+0x2c4>)
 80023e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80023ec:	ee07 3a90 	vmov	s15, r3
 80023f0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80023f4:	ed97 6a02 	vldr	s12, [r7, #8]
 80023f8:	eddf 5a1c 	vldr	s11, [pc, #112]	; 800246c <HAL_RCC_GetSysClockFreq+0x2d4>
 80023fc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002400:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002404:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002408:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800240c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002410:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002414:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8002416:	4b11      	ldr	r3, [pc, #68]	; (800245c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8002418:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800241a:	0a5b      	lsrs	r3, r3, #9
 800241c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002420:	3301      	adds	r3, #1
 8002422:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	ee07 3a90 	vmov	s15, r3
 800242a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800242e:	edd7 6a07 	vldr	s13, [r7, #28]
 8002432:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002436:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800243a:	ee17 3a90 	vmov	r3, s15
 800243e:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8002440:	e005      	b.n	800244e <HAL_RCC_GetSysClockFreq+0x2b6>
      sysclockfreq = 0U;
 8002442:	2300      	movs	r3, #0
 8002444:	61bb      	str	r3, [r7, #24]
    break;
 8002446:	e002      	b.n	800244e <HAL_RCC_GetSysClockFreq+0x2b6>

  default:
    sysclockfreq = CSI_VALUE;
 8002448:	4b06      	ldr	r3, [pc, #24]	; (8002464 <HAL_RCC_GetSysClockFreq+0x2cc>)
 800244a:	61bb      	str	r3, [r7, #24]
    break;
 800244c:	bf00      	nop
  }

  return sysclockfreq;
 800244e:	69bb      	ldr	r3, [r7, #24]
}
 8002450:	4618      	mov	r0, r3
 8002452:	3724      	adds	r7, #36	; 0x24
 8002454:	46bd      	mov	sp, r7
 8002456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245a:	4770      	bx	lr
 800245c:	58024400 	.word	0x58024400
 8002460:	03d09000 	.word	0x03d09000
 8002464:	003d0900 	.word	0x003d0900
 8002468:	017d7840 	.word	0x017d7840
 800246c:	46000000 	.word	0x46000000
 8002470:	4c742400 	.word	0x4c742400
 8002474:	4a742400 	.word	0x4a742400
 8002478:	4bbebc20 	.word	0x4bbebc20

0800247c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b082      	sub	sp, #8
 8002480:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8002482:	f7ff fe89 	bl	8002198 <HAL_RCC_GetSysClockFreq>
 8002486:	4601      	mov	r1, r0
 8002488:	4b10      	ldr	r3, [pc, #64]	; (80024cc <HAL_RCC_GetHCLKFreq+0x50>)
 800248a:	699b      	ldr	r3, [r3, #24]
 800248c:	0a1b      	lsrs	r3, r3, #8
 800248e:	f003 030f 	and.w	r3, r3, #15
 8002492:	4a0f      	ldr	r2, [pc, #60]	; (80024d0 <HAL_RCC_GetHCLKFreq+0x54>)
 8002494:	5cd3      	ldrb	r3, [r2, r3]
 8002496:	f003 031f 	and.w	r3, r3, #31
 800249a:	fa21 f303 	lsr.w	r3, r1, r3
 800249e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80024a0:	4b0a      	ldr	r3, [pc, #40]	; (80024cc <HAL_RCC_GetHCLKFreq+0x50>)
 80024a2:	699b      	ldr	r3, [r3, #24]
 80024a4:	f003 030f 	and.w	r3, r3, #15
 80024a8:	4a09      	ldr	r2, [pc, #36]	; (80024d0 <HAL_RCC_GetHCLKFreq+0x54>)
 80024aa:	5cd3      	ldrb	r3, [r2, r3]
 80024ac:	f003 031f 	and.w	r3, r3, #31
 80024b0:	687a      	ldr	r2, [r7, #4]
 80024b2:	fa22 f303 	lsr.w	r3, r2, r3
 80024b6:	4a07      	ldr	r2, [pc, #28]	; (80024d4 <HAL_RCC_GetHCLKFreq+0x58>)
 80024b8:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80024ba:	4a07      	ldr	r2, [pc, #28]	; (80024d8 <HAL_RCC_GetHCLKFreq+0x5c>)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80024c0:	4b04      	ldr	r3, [pc, #16]	; (80024d4 <HAL_RCC_GetHCLKFreq+0x58>)
 80024c2:	681b      	ldr	r3, [r3, #0]
}
 80024c4:	4618      	mov	r0, r3
 80024c6:	3708      	adds	r7, #8
 80024c8:	46bd      	mov	sp, r7
 80024ca:	bd80      	pop	{r7, pc}
 80024cc:	58024400 	.word	0x58024400
 80024d0:	08008690 	.word	0x08008690
 80024d4:	24000004 	.word	0x24000004
 80024d8:	24000000 	.word	0x24000000

080024dc <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b086      	sub	sp, #24
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80024e4:	2300      	movs	r3, #0
 80024e6:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80024e8:	2300      	movs	r3, #0
 80024ea:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d03d      	beq.n	8002574 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80024fc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002500:	d013      	beq.n	800252a <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8002502:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002506:	d802      	bhi.n	800250e <HAL_RCCEx_PeriphCLKConfig+0x32>
 8002508:	2b00      	cmp	r3, #0
 800250a:	d007      	beq.n	800251c <HAL_RCCEx_PeriphCLKConfig+0x40>
 800250c:	e01f      	b.n	800254e <HAL_RCCEx_PeriphCLKConfig+0x72>
 800250e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002512:	d013      	beq.n	800253c <HAL_RCCEx_PeriphCLKConfig+0x60>
 8002514:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002518:	d01c      	beq.n	8002554 <HAL_RCCEx_PeriphCLKConfig+0x78>
 800251a:	e018      	b.n	800254e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800251c:	4baf      	ldr	r3, [pc, #700]	; (80027dc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800251e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002520:	4aae      	ldr	r2, [pc, #696]	; (80027dc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002522:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002526:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8002528:	e015      	b.n	8002556 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	3304      	adds	r3, #4
 800252e:	2102      	movs	r1, #2
 8002530:	4618      	mov	r0, r3
 8002532:	f001 fd33 	bl	8003f9c <RCCEx_PLL2_Config>
 8002536:	4603      	mov	r3, r0
 8002538:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800253a:	e00c      	b.n	8002556 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	3324      	adds	r3, #36	; 0x24
 8002540:	2102      	movs	r1, #2
 8002542:	4618      	mov	r0, r3
 8002544:	f001 fddc 	bl	8004100 <RCCEx_PLL3_Config>
 8002548:	4603      	mov	r3, r0
 800254a:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800254c:	e003      	b.n	8002556 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800254e:	2301      	movs	r3, #1
 8002550:	75fb      	strb	r3, [r7, #23]
      break;
 8002552:	e000      	b.n	8002556 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8002554:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002556:	7dfb      	ldrb	r3, [r7, #23]
 8002558:	2b00      	cmp	r3, #0
 800255a:	d109      	bne.n	8002570 <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800255c:	4b9f      	ldr	r3, [pc, #636]	; (80027dc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800255e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002560:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002568:	499c      	ldr	r1, [pc, #624]	; (80027dc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800256a:	4313      	orrs	r3, r2
 800256c:	650b      	str	r3, [r1, #80]	; 0x50
 800256e:	e001      	b.n	8002574 <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002570:	7dfb      	ldrb	r3, [r7, #23]
 8002572:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800257c:	2b00      	cmp	r3, #0
 800257e:	d03d      	beq.n	80025fc <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002584:	2b04      	cmp	r3, #4
 8002586:	d826      	bhi.n	80025d6 <HAL_RCCEx_PeriphCLKConfig+0xfa>
 8002588:	a201      	add	r2, pc, #4	; (adr r2, 8002590 <HAL_RCCEx_PeriphCLKConfig+0xb4>)
 800258a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800258e:	bf00      	nop
 8002590:	080025a5 	.word	0x080025a5
 8002594:	080025b3 	.word	0x080025b3
 8002598:	080025c5 	.word	0x080025c5
 800259c:	080025dd 	.word	0x080025dd
 80025a0:	080025dd 	.word	0x080025dd
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80025a4:	4b8d      	ldr	r3, [pc, #564]	; (80027dc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80025a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025a8:	4a8c      	ldr	r2, [pc, #560]	; (80027dc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80025aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80025ae:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80025b0:	e015      	b.n	80025de <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	3304      	adds	r3, #4
 80025b6:	2100      	movs	r1, #0
 80025b8:	4618      	mov	r0, r3
 80025ba:	f001 fcef 	bl	8003f9c <RCCEx_PLL2_Config>
 80025be:	4603      	mov	r3, r0
 80025c0:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80025c2:	e00c      	b.n	80025de <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	3324      	adds	r3, #36	; 0x24
 80025c8:	2100      	movs	r1, #0
 80025ca:	4618      	mov	r0, r3
 80025cc:	f001 fd98 	bl	8004100 <RCCEx_PLL3_Config>
 80025d0:	4603      	mov	r3, r0
 80025d2:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80025d4:	e003      	b.n	80025de <HAL_RCCEx_PeriphCLKConfig+0x102>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80025d6:	2301      	movs	r3, #1
 80025d8:	75fb      	strb	r3, [r7, #23]
      break;
 80025da:	e000      	b.n	80025de <HAL_RCCEx_PeriphCLKConfig+0x102>
      break;
 80025dc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80025de:	7dfb      	ldrb	r3, [r7, #23]
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d109      	bne.n	80025f8 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80025e4:	4b7d      	ldr	r3, [pc, #500]	; (80027dc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80025e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80025e8:	f023 0207 	bic.w	r2, r3, #7
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025f0:	497a      	ldr	r1, [pc, #488]	; (80027dc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80025f2:	4313      	orrs	r3, r2
 80025f4:	650b      	str	r3, [r1, #80]	; 0x50
 80025f6:	e001      	b.n	80025fc <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80025f8:	7dfb      	ldrb	r3, [r7, #23]
 80025fa:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002604:	2b00      	cmp	r3, #0
 8002606:	d03e      	beq.n	8002686 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800260c:	2b80      	cmp	r3, #128	; 0x80
 800260e:	d01c      	beq.n	800264a <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8002610:	2b80      	cmp	r3, #128	; 0x80
 8002612:	d804      	bhi.n	800261e <HAL_RCCEx_PeriphCLKConfig+0x142>
 8002614:	2b00      	cmp	r3, #0
 8002616:	d008      	beq.n	800262a <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8002618:	2b40      	cmp	r3, #64	; 0x40
 800261a:	d00d      	beq.n	8002638 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 800261c:	e01e      	b.n	800265c <HAL_RCCEx_PeriphCLKConfig+0x180>
 800261e:	2bc0      	cmp	r3, #192	; 0xc0
 8002620:	d01f      	beq.n	8002662 <HAL_RCCEx_PeriphCLKConfig+0x186>
 8002622:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002626:	d01e      	beq.n	8002666 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8002628:	e018      	b.n	800265c <HAL_RCCEx_PeriphCLKConfig+0x180>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800262a:	4b6c      	ldr	r3, [pc, #432]	; (80027dc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800262c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800262e:	4a6b      	ldr	r2, [pc, #428]	; (80027dc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002630:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002634:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8002636:	e017      	b.n	8002668 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	3304      	adds	r3, #4
 800263c:	2100      	movs	r1, #0
 800263e:	4618      	mov	r0, r3
 8002640:	f001 fcac 	bl	8003f9c <RCCEx_PLL2_Config>
 8002644:	4603      	mov	r3, r0
 8002646:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8002648:	e00e      	b.n	8002668 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	3324      	adds	r3, #36	; 0x24
 800264e:	2100      	movs	r1, #0
 8002650:	4618      	mov	r0, r3
 8002652:	f001 fd55 	bl	8004100 <RCCEx_PLL3_Config>
 8002656:	4603      	mov	r3, r0
 8002658:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800265a:	e005      	b.n	8002668 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800265c:	2301      	movs	r3, #1
 800265e:	75fb      	strb	r3, [r7, #23]
      break;
 8002660:	e002      	b.n	8002668 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 8002662:	bf00      	nop
 8002664:	e000      	b.n	8002668 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 8002666:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002668:	7dfb      	ldrb	r3, [r7, #23]
 800266a:	2b00      	cmp	r3, #0
 800266c:	d109      	bne.n	8002682 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800266e:	4b5b      	ldr	r3, [pc, #364]	; (80027dc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002670:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002672:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800267a:	4958      	ldr	r1, [pc, #352]	; (80027dc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800267c:	4313      	orrs	r3, r2
 800267e:	650b      	str	r3, [r1, #80]	; 0x50
 8002680:	e001      	b.n	8002686 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002682:	7dfb      	ldrb	r3, [r7, #23]
 8002684:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800268e:	2b00      	cmp	r3, #0
 8002690:	d044      	beq.n	800271c <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002698:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800269c:	d01f      	beq.n	80026de <HAL_RCCEx_PeriphCLKConfig+0x202>
 800269e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80026a2:	d805      	bhi.n	80026b0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d00a      	beq.n	80026be <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80026a8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80026ac:	d00e      	beq.n	80026cc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
 80026ae:	e01f      	b.n	80026f0 <HAL_RCCEx_PeriphCLKConfig+0x214>
 80026b0:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80026b4:	d01f      	beq.n	80026f6 <HAL_RCCEx_PeriphCLKConfig+0x21a>
 80026b6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80026ba:	d01e      	beq.n	80026fa <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80026bc:	e018      	b.n	80026f0 <HAL_RCCEx_PeriphCLKConfig+0x214>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80026be:	4b47      	ldr	r3, [pc, #284]	; (80027dc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80026c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026c2:	4a46      	ldr	r2, [pc, #280]	; (80027dc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80026c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80026c8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80026ca:	e017      	b.n	80026fc <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	3304      	adds	r3, #4
 80026d0:	2100      	movs	r1, #0
 80026d2:	4618      	mov	r0, r3
 80026d4:	f001 fc62 	bl	8003f9c <RCCEx_PLL2_Config>
 80026d8:	4603      	mov	r3, r0
 80026da:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80026dc:	e00e      	b.n	80026fc <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	3324      	adds	r3, #36	; 0x24
 80026e2:	2100      	movs	r1, #0
 80026e4:	4618      	mov	r0, r3
 80026e6:	f001 fd0b 	bl	8004100 <RCCEx_PLL3_Config>
 80026ea:	4603      	mov	r3, r0
 80026ec:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80026ee:	e005      	b.n	80026fc <HAL_RCCEx_PeriphCLKConfig+0x220>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80026f0:	2301      	movs	r3, #1
 80026f2:	75fb      	strb	r3, [r7, #23]
      break;
 80026f4:	e002      	b.n	80026fc <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 80026f6:	bf00      	nop
 80026f8:	e000      	b.n	80026fc <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 80026fa:	bf00      	nop
    }

    if(ret == HAL_OK)
 80026fc:	7dfb      	ldrb	r3, [r7, #23]
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d10a      	bne.n	8002718 <HAL_RCCEx_PeriphCLKConfig+0x23c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8002702:	4b36      	ldr	r3, [pc, #216]	; (80027dc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002704:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002706:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002710:	4932      	ldr	r1, [pc, #200]	; (80027dc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002712:	4313      	orrs	r3, r2
 8002714:	658b      	str	r3, [r1, #88]	; 0x58
 8002716:	e001      	b.n	800271c <HAL_RCCEx_PeriphCLKConfig+0x240>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002718:	7dfb      	ldrb	r3, [r7, #23]
 800271a:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002724:	2b00      	cmp	r3, #0
 8002726:	d044      	beq.n	80027b2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800272e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002732:	d01f      	beq.n	8002774 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8002734:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002738:	d805      	bhi.n	8002746 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 800273a:	2b00      	cmp	r3, #0
 800273c:	d00a      	beq.n	8002754 <HAL_RCCEx_PeriphCLKConfig+0x278>
 800273e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002742:	d00e      	beq.n	8002762 <HAL_RCCEx_PeriphCLKConfig+0x286>
 8002744:	e01f      	b.n	8002786 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
 8002746:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800274a:	d01f      	beq.n	800278c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 800274c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002750:	d01e      	beq.n	8002790 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8002752:	e018      	b.n	8002786 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002754:	4b21      	ldr	r3, [pc, #132]	; (80027dc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002756:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002758:	4a20      	ldr	r2, [pc, #128]	; (80027dc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800275a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800275e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002760:	e017      	b.n	8002792 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	3304      	adds	r3, #4
 8002766:	2100      	movs	r1, #0
 8002768:	4618      	mov	r0, r3
 800276a:	f001 fc17 	bl	8003f9c <RCCEx_PLL2_Config>
 800276e:	4603      	mov	r3, r0
 8002770:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8002772:	e00e      	b.n	8002792 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	3324      	adds	r3, #36	; 0x24
 8002778:	2100      	movs	r1, #0
 800277a:	4618      	mov	r0, r3
 800277c:	f001 fcc0 	bl	8004100 <RCCEx_PLL3_Config>
 8002780:	4603      	mov	r3, r0
 8002782:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002784:	e005      	b.n	8002792 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8002786:	2301      	movs	r3, #1
 8002788:	75fb      	strb	r3, [r7, #23]
      break;
 800278a:	e002      	b.n	8002792 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 800278c:	bf00      	nop
 800278e:	e000      	b.n	8002792 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 8002790:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002792:	7dfb      	ldrb	r3, [r7, #23]
 8002794:	2b00      	cmp	r3, #0
 8002796:	d10a      	bne.n	80027ae <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8002798:	4b10      	ldr	r3, [pc, #64]	; (80027dc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800279a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800279c:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80027a6:	490d      	ldr	r1, [pc, #52]	; (80027dc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80027a8:	4313      	orrs	r3, r2
 80027aa:	658b      	str	r3, [r1, #88]	; 0x58
 80027ac:	e001      	b.n	80027b2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80027ae:	7dfb      	ldrb	r3, [r7, #23]
 80027b0:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d035      	beq.n	800282a <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027c2:	2b10      	cmp	r3, #16
 80027c4:	d00c      	beq.n	80027e0 <HAL_RCCEx_PeriphCLKConfig+0x304>
 80027c6:	2b10      	cmp	r3, #16
 80027c8:	d802      	bhi.n	80027d0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d01b      	beq.n	8002806 <HAL_RCCEx_PeriphCLKConfig+0x32a>
 80027ce:	e017      	b.n	8002800 <HAL_RCCEx_PeriphCLKConfig+0x324>
 80027d0:	2b20      	cmp	r3, #32
 80027d2:	d00c      	beq.n	80027ee <HAL_RCCEx_PeriphCLKConfig+0x312>
 80027d4:	2b30      	cmp	r3, #48	; 0x30
 80027d6:	d018      	beq.n	800280a <HAL_RCCEx_PeriphCLKConfig+0x32e>
 80027d8:	e012      	b.n	8002800 <HAL_RCCEx_PeriphCLKConfig+0x324>
 80027da:	bf00      	nop
 80027dc:	58024400 	.word	0x58024400
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80027e0:	4baf      	ldr	r3, [pc, #700]	; (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80027e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027e4:	4aae      	ldr	r2, [pc, #696]	; (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80027e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80027ea:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80027ec:	e00e      	b.n	800280c <HAL_RCCEx_PeriphCLKConfig+0x330>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	3304      	adds	r3, #4
 80027f2:	2102      	movs	r1, #2
 80027f4:	4618      	mov	r0, r3
 80027f6:	f001 fbd1 	bl	8003f9c <RCCEx_PLL2_Config>
 80027fa:	4603      	mov	r3, r0
 80027fc:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80027fe:	e005      	b.n	800280c <HAL_RCCEx_PeriphCLKConfig+0x330>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8002800:	2301      	movs	r3, #1
 8002802:	75fb      	strb	r3, [r7, #23]
      break;
 8002804:	e002      	b.n	800280c <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 8002806:	bf00      	nop
 8002808:	e000      	b.n	800280c <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 800280a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800280c:	7dfb      	ldrb	r3, [r7, #23]
 800280e:	2b00      	cmp	r3, #0
 8002810:	d109      	bne.n	8002826 <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002812:	4ba3      	ldr	r3, [pc, #652]	; (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002814:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002816:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800281e:	49a0      	ldr	r1, [pc, #640]	; (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002820:	4313      	orrs	r3, r2
 8002822:	64cb      	str	r3, [r1, #76]	; 0x4c
 8002824:	e001      	b.n	800282a <HAL_RCCEx_PeriphCLKConfig+0x34e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002826:	7dfb      	ldrb	r3, [r7, #23]
 8002828:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002832:	2b00      	cmp	r3, #0
 8002834:	d042      	beq.n	80028bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800283a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800283e:	d01f      	beq.n	8002880 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 8002840:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002844:	d805      	bhi.n	8002852 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002846:	2b00      	cmp	r3, #0
 8002848:	d00a      	beq.n	8002860 <HAL_RCCEx_PeriphCLKConfig+0x384>
 800284a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800284e:	d00e      	beq.n	800286e <HAL_RCCEx_PeriphCLKConfig+0x392>
 8002850:	e01f      	b.n	8002892 <HAL_RCCEx_PeriphCLKConfig+0x3b6>
 8002852:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002856:	d01f      	beq.n	8002898 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8002858:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800285c:	d01e      	beq.n	800289c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 800285e:	e018      	b.n	8002892 <HAL_RCCEx_PeriphCLKConfig+0x3b6>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002860:	4b8f      	ldr	r3, [pc, #572]	; (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002862:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002864:	4a8e      	ldr	r2, [pc, #568]	; (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002866:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800286a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800286c:	e017      	b.n	800289e <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	3304      	adds	r3, #4
 8002872:	2100      	movs	r1, #0
 8002874:	4618      	mov	r0, r3
 8002876:	f001 fb91 	bl	8003f9c <RCCEx_PLL2_Config>
 800287a:	4603      	mov	r3, r0
 800287c:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800287e:	e00e      	b.n	800289e <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	3324      	adds	r3, #36	; 0x24
 8002884:	2100      	movs	r1, #0
 8002886:	4618      	mov	r0, r3
 8002888:	f001 fc3a 	bl	8004100 <RCCEx_PLL3_Config>
 800288c:	4603      	mov	r3, r0
 800288e:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8002890:	e005      	b.n	800289e <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002892:	2301      	movs	r3, #1
 8002894:	75fb      	strb	r3, [r7, #23]
      break;
 8002896:	e002      	b.n	800289e <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 8002898:	bf00      	nop
 800289a:	e000      	b.n	800289e <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 800289c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800289e:	7dfb      	ldrb	r3, [r7, #23]
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d109      	bne.n	80028b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80028a4:	4b7e      	ldr	r3, [pc, #504]	; (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80028a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028a8:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028b0:	497b      	ldr	r1, [pc, #492]	; (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80028b2:	4313      	orrs	r3, r2
 80028b4:	650b      	str	r3, [r1, #80]	; 0x50
 80028b6:	e001      	b.n	80028bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80028b8:	7dfb      	ldrb	r3, [r7, #23]
 80028ba:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d042      	beq.n	800294e <HAL_RCCEx_PeriphCLKConfig+0x472>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80028cc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80028d0:	d01b      	beq.n	800290a <HAL_RCCEx_PeriphCLKConfig+0x42e>
 80028d2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80028d6:	d805      	bhi.n	80028e4 <HAL_RCCEx_PeriphCLKConfig+0x408>
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d022      	beq.n	8002922 <HAL_RCCEx_PeriphCLKConfig+0x446>
 80028dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028e0:	d00a      	beq.n	80028f8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 80028e2:	e01b      	b.n	800291c <HAL_RCCEx_PeriphCLKConfig+0x440>
 80028e4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80028e8:	d01d      	beq.n	8002926 <HAL_RCCEx_PeriphCLKConfig+0x44a>
 80028ea:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80028ee:	d01c      	beq.n	800292a <HAL_RCCEx_PeriphCLKConfig+0x44e>
 80028f0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80028f4:	d01b      	beq.n	800292e <HAL_RCCEx_PeriphCLKConfig+0x452>
 80028f6:	e011      	b.n	800291c <HAL_RCCEx_PeriphCLKConfig+0x440>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	3304      	adds	r3, #4
 80028fc:	2101      	movs	r1, #1
 80028fe:	4618      	mov	r0, r3
 8002900:	f001 fb4c 	bl	8003f9c <RCCEx_PLL2_Config>
 8002904:	4603      	mov	r3, r0
 8002906:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8002908:	e012      	b.n	8002930 <HAL_RCCEx_PeriphCLKConfig+0x454>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	3324      	adds	r3, #36	; 0x24
 800290e:	2101      	movs	r1, #1
 8002910:	4618      	mov	r0, r3
 8002912:	f001 fbf5 	bl	8004100 <RCCEx_PLL3_Config>
 8002916:	4603      	mov	r3, r0
 8002918:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800291a:	e009      	b.n	8002930 <HAL_RCCEx_PeriphCLKConfig+0x454>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800291c:	2301      	movs	r3, #1
 800291e:	75fb      	strb	r3, [r7, #23]
      break;
 8002920:	e006      	b.n	8002930 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8002922:	bf00      	nop
 8002924:	e004      	b.n	8002930 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8002926:	bf00      	nop
 8002928:	e002      	b.n	8002930 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 800292a:	bf00      	nop
 800292c:	e000      	b.n	8002930 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 800292e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002930:	7dfb      	ldrb	r3, [r7, #23]
 8002932:	2b00      	cmp	r3, #0
 8002934:	d109      	bne.n	800294a <HAL_RCCEx_PeriphCLKConfig+0x46e>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8002936:	4b5a      	ldr	r3, [pc, #360]	; (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002938:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800293a:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002942:	4957      	ldr	r1, [pc, #348]	; (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002944:	4313      	orrs	r3, r2
 8002946:	650b      	str	r3, [r1, #80]	; 0x50
 8002948:	e001      	b.n	800294e <HAL_RCCEx_PeriphCLKConfig+0x472>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800294a:	7dfb      	ldrb	r3, [r7, #23]
 800294c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002956:	2b00      	cmp	r3, #0
 8002958:	d044      	beq.n	80029e4 <HAL_RCCEx_PeriphCLKConfig+0x508>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8002960:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002964:	d01b      	beq.n	800299e <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 8002966:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800296a:	d805      	bhi.n	8002978 <HAL_RCCEx_PeriphCLKConfig+0x49c>
 800296c:	2b00      	cmp	r3, #0
 800296e:	d022      	beq.n	80029b6 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8002970:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002974:	d00a      	beq.n	800298c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8002976:	e01b      	b.n	80029b0 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
 8002978:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800297c:	d01d      	beq.n	80029ba <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800297e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002982:	d01c      	beq.n	80029be <HAL_RCCEx_PeriphCLKConfig+0x4e2>
 8002984:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002988:	d01b      	beq.n	80029c2 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800298a:	e011      	b.n	80029b0 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	3304      	adds	r3, #4
 8002990:	2101      	movs	r1, #1
 8002992:	4618      	mov	r0, r3
 8002994:	f001 fb02 	bl	8003f9c <RCCEx_PLL2_Config>
 8002998:	4603      	mov	r3, r0
 800299a:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800299c:	e012      	b.n	80029c4 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	3324      	adds	r3, #36	; 0x24
 80029a2:	2101      	movs	r1, #1
 80029a4:	4618      	mov	r0, r3
 80029a6:	f001 fbab 	bl	8004100 <RCCEx_PLL3_Config>
 80029aa:	4603      	mov	r3, r0
 80029ac:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80029ae:	e009      	b.n	80029c4 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 80029b0:	2301      	movs	r3, #1
 80029b2:	75fb      	strb	r3, [r7, #23]
      break;
 80029b4:	e006      	b.n	80029c4 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 80029b6:	bf00      	nop
 80029b8:	e004      	b.n	80029c4 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 80029ba:	bf00      	nop
 80029bc:	e002      	b.n	80029c4 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 80029be:	bf00      	nop
 80029c0:	e000      	b.n	80029c4 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 80029c2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80029c4:	7dfb      	ldrb	r3, [r7, #23]
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d10a      	bne.n	80029e0 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80029ca:	4b35      	ldr	r3, [pc, #212]	; (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80029cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029ce:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80029d8:	4931      	ldr	r1, [pc, #196]	; (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80029da:	4313      	orrs	r3, r2
 80029dc:	658b      	str	r3, [r1, #88]	; 0x58
 80029de:	e001      	b.n	80029e4 <HAL_RCCEx_PeriphCLKConfig+0x508>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80029e0:	7dfb      	ldrb	r3, [r7, #23]
 80029e2:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d02d      	beq.n	8002a4c <HAL_RCCEx_PeriphCLKConfig+0x570>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80029f4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80029f8:	d005      	beq.n	8002a06 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 80029fa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80029fe:	d009      	beq.n	8002a14 <HAL_RCCEx_PeriphCLKConfig+0x538>
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d013      	beq.n	8002a2c <HAL_RCCEx_PeriphCLKConfig+0x550>
 8002a04:	e00f      	b.n	8002a26 <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002a06:	4b26      	ldr	r3, [pc, #152]	; (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002a08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a0a:	4a25      	ldr	r2, [pc, #148]	; (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002a0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a10:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8002a12:	e00c      	b.n	8002a2e <HAL_RCCEx_PeriphCLKConfig+0x552>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	3304      	adds	r3, #4
 8002a18:	2101      	movs	r1, #1
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	f001 fabe 	bl	8003f9c <RCCEx_PLL2_Config>
 8002a20:	4603      	mov	r3, r0
 8002a22:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8002a24:	e003      	b.n	8002a2e <HAL_RCCEx_PeriphCLKConfig+0x552>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002a26:	2301      	movs	r3, #1
 8002a28:	75fb      	strb	r3, [r7, #23]
      break;
 8002a2a:	e000      	b.n	8002a2e <HAL_RCCEx_PeriphCLKConfig+0x552>
      break;
 8002a2c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002a2e:	7dfb      	ldrb	r3, [r7, #23]
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d109      	bne.n	8002a48 <HAL_RCCEx_PeriphCLKConfig+0x56c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002a34:	4b1a      	ldr	r3, [pc, #104]	; (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002a36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a38:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002a40:	4917      	ldr	r1, [pc, #92]	; (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002a42:	4313      	orrs	r3, r2
 8002a44:	650b      	str	r3, [r1, #80]	; 0x50
 8002a46:	e001      	b.n	8002a4c <HAL_RCCEx_PeriphCLKConfig+0x570>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a48:	7dfb      	ldrb	r3, [r7, #23]
 8002a4a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d035      	beq.n	8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a5c:	2b03      	cmp	r3, #3
 8002a5e:	d81b      	bhi.n	8002a98 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8002a60:	a201      	add	r2, pc, #4	; (adr r2, 8002a68 <HAL_RCCEx_PeriphCLKConfig+0x58c>)
 8002a62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a66:	bf00      	nop
 8002a68:	08002aa5 	.word	0x08002aa5
 8002a6c:	08002a79 	.word	0x08002a79
 8002a70:	08002a87 	.word	0x08002a87
 8002a74:	08002aa5 	.word	0x08002aa5
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002a78:	4b09      	ldr	r3, [pc, #36]	; (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002a7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a7c:	4a08      	ldr	r2, [pc, #32]	; (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002a7e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a82:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8002a84:	e00f      	b.n	8002aa6 <HAL_RCCEx_PeriphCLKConfig+0x5ca>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	3304      	adds	r3, #4
 8002a8a:	2102      	movs	r1, #2
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	f001 fa85 	bl	8003f9c <RCCEx_PLL2_Config>
 8002a92:	4603      	mov	r3, r0
 8002a94:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8002a96:	e006      	b.n	8002aa6 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8002a98:	2301      	movs	r3, #1
 8002a9a:	75fb      	strb	r3, [r7, #23]
      break;
 8002a9c:	e003      	b.n	8002aa6 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
 8002a9e:	bf00      	nop
 8002aa0:	58024400 	.word	0x58024400
      break;
 8002aa4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002aa6:	7dfb      	ldrb	r3, [r7, #23]
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d109      	bne.n	8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8002aac:	4bba      	ldr	r3, [pc, #744]	; (8002d98 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002aae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ab0:	f023 0203 	bic.w	r2, r3, #3
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ab8:	49b7      	ldr	r1, [pc, #732]	; (8002d98 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002aba:	4313      	orrs	r3, r2
 8002abc:	64cb      	str	r3, [r1, #76]	; 0x4c
 8002abe:	e001      	b.n	8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ac0:	7dfb      	ldrb	r3, [r7, #23]
 8002ac2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	f000 8086 	beq.w	8002bde <HAL_RCCEx_PeriphCLKConfig+0x702>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002ad2:	4bb2      	ldr	r3, [pc, #712]	; (8002d9c <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	4ab1      	ldr	r2, [pc, #708]	; (8002d9c <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8002ad8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002adc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002ade:	f7fe f891 	bl	8000c04 <HAL_GetTick>
 8002ae2:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002ae4:	e009      	b.n	8002afa <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ae6:	f7fe f88d 	bl	8000c04 <HAL_GetTick>
 8002aea:	4602      	mov	r2, r0
 8002aec:	693b      	ldr	r3, [r7, #16]
 8002aee:	1ad3      	subs	r3, r2, r3
 8002af0:	2b64      	cmp	r3, #100	; 0x64
 8002af2:	d902      	bls.n	8002afa <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        ret = HAL_TIMEOUT;
 8002af4:	2303      	movs	r3, #3
 8002af6:	75fb      	strb	r3, [r7, #23]
        break;
 8002af8:	e005      	b.n	8002b06 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002afa:	4ba8      	ldr	r3, [pc, #672]	; (8002d9c <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d0ef      	beq.n	8002ae6 <HAL_RCCEx_PeriphCLKConfig+0x60a>
      }
    }

    if(ret == HAL_OK)
 8002b06:	7dfb      	ldrb	r3, [r7, #23]
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d166      	bne.n	8002bda <HAL_RCCEx_PeriphCLKConfig+0x6fe>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8002b0c:	4ba2      	ldr	r3, [pc, #648]	; (8002d98 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002b0e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002b16:	4053      	eors	r3, r2
 8002b18:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d013      	beq.n	8002b48 <HAL_RCCEx_PeriphCLKConfig+0x66c>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002b20:	4b9d      	ldr	r3, [pc, #628]	; (8002d98 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002b22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b24:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b28:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002b2a:	4b9b      	ldr	r3, [pc, #620]	; (8002d98 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002b2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b2e:	4a9a      	ldr	r2, [pc, #616]	; (8002d98 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002b30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b34:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002b36:	4b98      	ldr	r3, [pc, #608]	; (8002d98 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002b38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b3a:	4a97      	ldr	r2, [pc, #604]	; (8002d98 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002b3c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b40:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8002b42:	4a95      	ldr	r2, [pc, #596]	; (8002d98 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002b4e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002b52:	d115      	bne.n	8002b80 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b54:	f7fe f856 	bl	8000c04 <HAL_GetTick>
 8002b58:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002b5a:	e00b      	b.n	8002b74 <HAL_RCCEx_PeriphCLKConfig+0x698>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b5c:	f7fe f852 	bl	8000c04 <HAL_GetTick>
 8002b60:	4602      	mov	r2, r0
 8002b62:	693b      	ldr	r3, [r7, #16]
 8002b64:	1ad3      	subs	r3, r2, r3
 8002b66:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b6a:	4293      	cmp	r3, r2
 8002b6c:	d902      	bls.n	8002b74 <HAL_RCCEx_PeriphCLKConfig+0x698>
          {
            ret = HAL_TIMEOUT;
 8002b6e:	2303      	movs	r3, #3
 8002b70:	75fb      	strb	r3, [r7, #23]
            break;
 8002b72:	e005      	b.n	8002b80 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002b74:	4b88      	ldr	r3, [pc, #544]	; (8002d98 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002b76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b78:	f003 0302 	and.w	r3, r3, #2
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d0ed      	beq.n	8002b5c <HAL_RCCEx_PeriphCLKConfig+0x680>
          }
        }
      }

      if(ret == HAL_OK)
 8002b80:	7dfb      	ldrb	r3, [r7, #23]
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d126      	bne.n	8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002b8c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b90:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002b94:	d10d      	bne.n	8002bb2 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
 8002b96:	4b80      	ldr	r3, [pc, #512]	; (8002d98 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002b98:	691b      	ldr	r3, [r3, #16]
 8002b9a:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002ba4:	0919      	lsrs	r1, r3, #4
 8002ba6:	4b7e      	ldr	r3, [pc, #504]	; (8002da0 <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 8002ba8:	400b      	ands	r3, r1
 8002baa:	497b      	ldr	r1, [pc, #492]	; (8002d98 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002bac:	4313      	orrs	r3, r2
 8002bae:	610b      	str	r3, [r1, #16]
 8002bb0:	e005      	b.n	8002bbe <HAL_RCCEx_PeriphCLKConfig+0x6e2>
 8002bb2:	4b79      	ldr	r3, [pc, #484]	; (8002d98 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002bb4:	691b      	ldr	r3, [r3, #16]
 8002bb6:	4a78      	ldr	r2, [pc, #480]	; (8002d98 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002bb8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8002bbc:	6113      	str	r3, [r2, #16]
 8002bbe:	4b76      	ldr	r3, [pc, #472]	; (8002d98 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002bc0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002bc8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002bcc:	4972      	ldr	r1, [pc, #456]	; (8002d98 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002bce:	4313      	orrs	r3, r2
 8002bd0:	670b      	str	r3, [r1, #112]	; 0x70
 8002bd2:	e004      	b.n	8002bde <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002bd4:	7dfb      	ldrb	r3, [r7, #23]
 8002bd6:	75bb      	strb	r3, [r7, #22]
 8002bd8:	e001      	b.n	8002bde <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002bda:	7dfb      	ldrb	r3, [r7, #23]
 8002bdc:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f003 0301 	and.w	r3, r3, #1
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d07d      	beq.n	8002ce6 <HAL_RCCEx_PeriphCLKConfig+0x80a>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002bee:	2b28      	cmp	r3, #40	; 0x28
 8002bf0:	d866      	bhi.n	8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x7e4>
 8002bf2:	a201      	add	r2, pc, #4	; (adr r2, 8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8002bf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bf8:	08002cc7 	.word	0x08002cc7
 8002bfc:	08002cc1 	.word	0x08002cc1
 8002c00:	08002cc1 	.word	0x08002cc1
 8002c04:	08002cc1 	.word	0x08002cc1
 8002c08:	08002cc1 	.word	0x08002cc1
 8002c0c:	08002cc1 	.word	0x08002cc1
 8002c10:	08002cc1 	.word	0x08002cc1
 8002c14:	08002cc1 	.word	0x08002cc1
 8002c18:	08002c9d 	.word	0x08002c9d
 8002c1c:	08002cc1 	.word	0x08002cc1
 8002c20:	08002cc1 	.word	0x08002cc1
 8002c24:	08002cc1 	.word	0x08002cc1
 8002c28:	08002cc1 	.word	0x08002cc1
 8002c2c:	08002cc1 	.word	0x08002cc1
 8002c30:	08002cc1 	.word	0x08002cc1
 8002c34:	08002cc1 	.word	0x08002cc1
 8002c38:	08002caf 	.word	0x08002caf
 8002c3c:	08002cc1 	.word	0x08002cc1
 8002c40:	08002cc1 	.word	0x08002cc1
 8002c44:	08002cc1 	.word	0x08002cc1
 8002c48:	08002cc1 	.word	0x08002cc1
 8002c4c:	08002cc1 	.word	0x08002cc1
 8002c50:	08002cc1 	.word	0x08002cc1
 8002c54:	08002cc1 	.word	0x08002cc1
 8002c58:	08002cc7 	.word	0x08002cc7
 8002c5c:	08002cc1 	.word	0x08002cc1
 8002c60:	08002cc1 	.word	0x08002cc1
 8002c64:	08002cc1 	.word	0x08002cc1
 8002c68:	08002cc1 	.word	0x08002cc1
 8002c6c:	08002cc1 	.word	0x08002cc1
 8002c70:	08002cc1 	.word	0x08002cc1
 8002c74:	08002cc1 	.word	0x08002cc1
 8002c78:	08002cc7 	.word	0x08002cc7
 8002c7c:	08002cc1 	.word	0x08002cc1
 8002c80:	08002cc1 	.word	0x08002cc1
 8002c84:	08002cc1 	.word	0x08002cc1
 8002c88:	08002cc1 	.word	0x08002cc1
 8002c8c:	08002cc1 	.word	0x08002cc1
 8002c90:	08002cc1 	.word	0x08002cc1
 8002c94:	08002cc1 	.word	0x08002cc1
 8002c98:	08002cc7 	.word	0x08002cc7
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	3304      	adds	r3, #4
 8002ca0:	2101      	movs	r1, #1
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	f001 f97a 	bl	8003f9c <RCCEx_PLL2_Config>
 8002ca8:	4603      	mov	r3, r0
 8002caa:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8002cac:	e00c      	b.n	8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x7ec>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	3324      	adds	r3, #36	; 0x24
 8002cb2:	2101      	movs	r1, #1
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	f001 fa23 	bl	8004100 <RCCEx_PLL3_Config>
 8002cba:	4603      	mov	r3, r0
 8002cbc:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8002cbe:	e003      	b.n	8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002cc0:	2301      	movs	r3, #1
 8002cc2:	75fb      	strb	r3, [r7, #23]
      break;
 8002cc4:	e000      	b.n	8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      break;
 8002cc6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002cc8:	7dfb      	ldrb	r3, [r7, #23]
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d109      	bne.n	8002ce2 <HAL_RCCEx_PeriphCLKConfig+0x806>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8002cce:	4b32      	ldr	r3, [pc, #200]	; (8002d98 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002cd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cd2:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002cda:	492f      	ldr	r1, [pc, #188]	; (8002d98 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002cdc:	4313      	orrs	r3, r2
 8002cde:	654b      	str	r3, [r1, #84]	; 0x54
 8002ce0:	e001      	b.n	8002ce6 <HAL_RCCEx_PeriphCLKConfig+0x80a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ce2:	7dfb      	ldrb	r3, [r7, #23]
 8002ce4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f003 0302 	and.w	r3, r3, #2
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d037      	beq.n	8002d62 <HAL_RCCEx_PeriphCLKConfig+0x886>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002cf6:	2b05      	cmp	r3, #5
 8002cf8:	d820      	bhi.n	8002d3c <HAL_RCCEx_PeriphCLKConfig+0x860>
 8002cfa:	a201      	add	r2, pc, #4	; (adr r2, 8002d00 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8002cfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d00:	08002d43 	.word	0x08002d43
 8002d04:	08002d19 	.word	0x08002d19
 8002d08:	08002d2b 	.word	0x08002d2b
 8002d0c:	08002d43 	.word	0x08002d43
 8002d10:	08002d43 	.word	0x08002d43
 8002d14:	08002d43 	.word	0x08002d43
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	3304      	adds	r3, #4
 8002d1c:	2101      	movs	r1, #1
 8002d1e:	4618      	mov	r0, r3
 8002d20:	f001 f93c 	bl	8003f9c <RCCEx_PLL2_Config>
 8002d24:	4603      	mov	r3, r0
 8002d26:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8002d28:	e00c      	b.n	8002d44 <HAL_RCCEx_PeriphCLKConfig+0x868>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	3324      	adds	r3, #36	; 0x24
 8002d2e:	2101      	movs	r1, #1
 8002d30:	4618      	mov	r0, r3
 8002d32:	f001 f9e5 	bl	8004100 <RCCEx_PLL3_Config>
 8002d36:	4603      	mov	r3, r0
 8002d38:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8002d3a:	e003      	b.n	8002d44 <HAL_RCCEx_PeriphCLKConfig+0x868>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002d3c:	2301      	movs	r3, #1
 8002d3e:	75fb      	strb	r3, [r7, #23]
      break;
 8002d40:	e000      	b.n	8002d44 <HAL_RCCEx_PeriphCLKConfig+0x868>
      break;
 8002d42:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002d44:	7dfb      	ldrb	r3, [r7, #23]
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d109      	bne.n	8002d5e <HAL_RCCEx_PeriphCLKConfig+0x882>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8002d4a:	4b13      	ldr	r3, [pc, #76]	; (8002d98 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002d4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d4e:	f023 0207 	bic.w	r2, r3, #7
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d56:	4910      	ldr	r1, [pc, #64]	; (8002d98 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002d58:	4313      	orrs	r3, r2
 8002d5a:	654b      	str	r3, [r1, #84]	; 0x54
 8002d5c:	e001      	b.n	8002d62 <HAL_RCCEx_PeriphCLKConfig+0x886>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d5e:	7dfb      	ldrb	r3, [r7, #23]
 8002d60:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f003 0304 	and.w	r3, r3, #4
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d040      	beq.n	8002df0 <HAL_RCCEx_PeriphCLKConfig+0x914>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d74:	2b05      	cmp	r3, #5
 8002d76:	d827      	bhi.n	8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
 8002d78:	a201      	add	r2, pc, #4	; (adr r2, 8002d80 <HAL_RCCEx_PeriphCLKConfig+0x8a4>)
 8002d7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d7e:	bf00      	nop
 8002d80:	08002dcf 	.word	0x08002dcf
 8002d84:	08002da5 	.word	0x08002da5
 8002d88:	08002db7 	.word	0x08002db7
 8002d8c:	08002dcf 	.word	0x08002dcf
 8002d90:	08002dcf 	.word	0x08002dcf
 8002d94:	08002dcf 	.word	0x08002dcf
 8002d98:	58024400 	.word	0x58024400
 8002d9c:	58024800 	.word	0x58024800
 8002da0:	00ffffcf 	.word	0x00ffffcf
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	3304      	adds	r3, #4
 8002da8:	2101      	movs	r1, #1
 8002daa:	4618      	mov	r0, r3
 8002dac:	f001 f8f6 	bl	8003f9c <RCCEx_PLL2_Config>
 8002db0:	4603      	mov	r3, r0
 8002db2:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8002db4:	e00c      	b.n	8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x8f4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	3324      	adds	r3, #36	; 0x24
 8002dba:	2101      	movs	r1, #1
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	f001 f99f 	bl	8004100 <RCCEx_PLL3_Config>
 8002dc2:	4603      	mov	r3, r0
 8002dc4:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8002dc6:	e003      	b.n	8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002dc8:	2301      	movs	r3, #1
 8002dca:	75fb      	strb	r3, [r7, #23]
      break;
 8002dcc:	e000      	b.n	8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      break;
 8002dce:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002dd0:	7dfb      	ldrb	r3, [r7, #23]
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d10a      	bne.n	8002dec <HAL_RCCEx_PeriphCLKConfig+0x910>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002dd6:	4bb2      	ldr	r3, [pc, #712]	; (80030a0 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8002dd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dda:	f023 0207 	bic.w	r2, r3, #7
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002de4:	49ae      	ldr	r1, [pc, #696]	; (80030a0 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8002de6:	4313      	orrs	r3, r2
 8002de8:	658b      	str	r3, [r1, #88]	; 0x58
 8002dea:	e001      	b.n	8002df0 <HAL_RCCEx_PeriphCLKConfig+0x914>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002dec:	7dfb      	ldrb	r3, [r7, #23]
 8002dee:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f003 0320 	and.w	r3, r3, #32
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d044      	beq.n	8002e86 <HAL_RCCEx_PeriphCLKConfig+0x9aa>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002e02:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002e06:	d01b      	beq.n	8002e40 <HAL_RCCEx_PeriphCLKConfig+0x964>
 8002e08:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002e0c:	d805      	bhi.n	8002e1a <HAL_RCCEx_PeriphCLKConfig+0x93e>
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d022      	beq.n	8002e58 <HAL_RCCEx_PeriphCLKConfig+0x97c>
 8002e12:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002e16:	d00a      	beq.n	8002e2e <HAL_RCCEx_PeriphCLKConfig+0x952>
 8002e18:	e01b      	b.n	8002e52 <HAL_RCCEx_PeriphCLKConfig+0x976>
 8002e1a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e1e:	d01d      	beq.n	8002e5c <HAL_RCCEx_PeriphCLKConfig+0x980>
 8002e20:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002e24:	d01c      	beq.n	8002e60 <HAL_RCCEx_PeriphCLKConfig+0x984>
 8002e26:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002e2a:	d01b      	beq.n	8002e64 <HAL_RCCEx_PeriphCLKConfig+0x988>
 8002e2c:	e011      	b.n	8002e52 <HAL_RCCEx_PeriphCLKConfig+0x976>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	3304      	adds	r3, #4
 8002e32:	2100      	movs	r1, #0
 8002e34:	4618      	mov	r0, r3
 8002e36:	f001 f8b1 	bl	8003f9c <RCCEx_PLL2_Config>
 8002e3a:	4603      	mov	r3, r0
 8002e3c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8002e3e:	e012      	b.n	8002e66 <HAL_RCCEx_PeriphCLKConfig+0x98a>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	3324      	adds	r3, #36	; 0x24
 8002e44:	2102      	movs	r1, #2
 8002e46:	4618      	mov	r0, r3
 8002e48:	f001 f95a 	bl	8004100 <RCCEx_PLL3_Config>
 8002e4c:	4603      	mov	r3, r0
 8002e4e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8002e50:	e009      	b.n	8002e66 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002e52:	2301      	movs	r3, #1
 8002e54:	75fb      	strb	r3, [r7, #23]
      break;
 8002e56:	e006      	b.n	8002e66 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8002e58:	bf00      	nop
 8002e5a:	e004      	b.n	8002e66 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8002e5c:	bf00      	nop
 8002e5e:	e002      	b.n	8002e66 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8002e60:	bf00      	nop
 8002e62:	e000      	b.n	8002e66 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8002e64:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002e66:	7dfb      	ldrb	r3, [r7, #23]
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d10a      	bne.n	8002e82 <HAL_RCCEx_PeriphCLKConfig+0x9a6>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002e6c:	4b8c      	ldr	r3, [pc, #560]	; (80030a0 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8002e6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e70:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002e7a:	4989      	ldr	r1, [pc, #548]	; (80030a0 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8002e7c:	4313      	orrs	r3, r2
 8002e7e:	654b      	str	r3, [r1, #84]	; 0x54
 8002e80:	e001      	b.n	8002e86 <HAL_RCCEx_PeriphCLKConfig+0x9aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e82:	7dfb      	ldrb	r3, [r7, #23]
 8002e84:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d044      	beq.n	8002f1c <HAL_RCCEx_PeriphCLKConfig+0xa40>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002e98:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002e9c:	d01b      	beq.n	8002ed6 <HAL_RCCEx_PeriphCLKConfig+0x9fa>
 8002e9e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002ea2:	d805      	bhi.n	8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x9d4>
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d022      	beq.n	8002eee <HAL_RCCEx_PeriphCLKConfig+0xa12>
 8002ea8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002eac:	d00a      	beq.n	8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x9e8>
 8002eae:	e01b      	b.n	8002ee8 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
 8002eb0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002eb4:	d01d      	beq.n	8002ef2 <HAL_RCCEx_PeriphCLKConfig+0xa16>
 8002eb6:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8002eba:	d01c      	beq.n	8002ef6 <HAL_RCCEx_PeriphCLKConfig+0xa1a>
 8002ebc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002ec0:	d01b      	beq.n	8002efa <HAL_RCCEx_PeriphCLKConfig+0xa1e>
 8002ec2:	e011      	b.n	8002ee8 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	3304      	adds	r3, #4
 8002ec8:	2100      	movs	r1, #0
 8002eca:	4618      	mov	r0, r3
 8002ecc:	f001 f866 	bl	8003f9c <RCCEx_PLL2_Config>
 8002ed0:	4603      	mov	r3, r0
 8002ed2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8002ed4:	e012      	b.n	8002efc <HAL_RCCEx_PeriphCLKConfig+0xa20>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	3324      	adds	r3, #36	; 0x24
 8002eda:	2102      	movs	r1, #2
 8002edc:	4618      	mov	r0, r3
 8002ede:	f001 f90f 	bl	8004100 <RCCEx_PLL3_Config>
 8002ee2:	4603      	mov	r3, r0
 8002ee4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8002ee6:	e009      	b.n	8002efc <HAL_RCCEx_PeriphCLKConfig+0xa20>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002ee8:	2301      	movs	r3, #1
 8002eea:	75fb      	strb	r3, [r7, #23]
      break;
 8002eec:	e006      	b.n	8002efc <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8002eee:	bf00      	nop
 8002ef0:	e004      	b.n	8002efc <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8002ef2:	bf00      	nop
 8002ef4:	e002      	b.n	8002efc <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8002ef6:	bf00      	nop
 8002ef8:	e000      	b.n	8002efc <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8002efa:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002efc:	7dfb      	ldrb	r3, [r7, #23]
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d10a      	bne.n	8002f18 <HAL_RCCEx_PeriphCLKConfig+0xa3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002f02:	4b67      	ldr	r3, [pc, #412]	; (80030a0 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8002f04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f06:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002f10:	4963      	ldr	r1, [pc, #396]	; (80030a0 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8002f12:	4313      	orrs	r3, r2
 8002f14:	658b      	str	r3, [r1, #88]	; 0x58
 8002f16:	e001      	b.n	8002f1c <HAL_RCCEx_PeriphCLKConfig+0xa40>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f18:	7dfb      	ldrb	r3, [r7, #23]
 8002f1a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d044      	beq.n	8002fb2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002f2e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002f32:	d01b      	beq.n	8002f6c <HAL_RCCEx_PeriphCLKConfig+0xa90>
 8002f34:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002f38:	d805      	bhi.n	8002f46 <HAL_RCCEx_PeriphCLKConfig+0xa6a>
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d022      	beq.n	8002f84 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8002f3e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f42:	d00a      	beq.n	8002f5a <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8002f44:	e01b      	b.n	8002f7e <HAL_RCCEx_PeriphCLKConfig+0xaa2>
 8002f46:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002f4a:	d01d      	beq.n	8002f88 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8002f4c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8002f50:	d01c      	beq.n	8002f8c <HAL_RCCEx_PeriphCLKConfig+0xab0>
 8002f52:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8002f56:	d01b      	beq.n	8002f90 <HAL_RCCEx_PeriphCLKConfig+0xab4>
 8002f58:	e011      	b.n	8002f7e <HAL_RCCEx_PeriphCLKConfig+0xaa2>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	3304      	adds	r3, #4
 8002f5e:	2100      	movs	r1, #0
 8002f60:	4618      	mov	r0, r3
 8002f62:	f001 f81b 	bl	8003f9c <RCCEx_PLL2_Config>
 8002f66:	4603      	mov	r3, r0
 8002f68:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8002f6a:	e012      	b.n	8002f92 <HAL_RCCEx_PeriphCLKConfig+0xab6>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	3324      	adds	r3, #36	; 0x24
 8002f70:	2102      	movs	r1, #2
 8002f72:	4618      	mov	r0, r3
 8002f74:	f001 f8c4 	bl	8004100 <RCCEx_PLL3_Config>
 8002f78:	4603      	mov	r3, r0
 8002f7a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8002f7c:	e009      	b.n	8002f92 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002f7e:	2301      	movs	r3, #1
 8002f80:	75fb      	strb	r3, [r7, #23]
      break;
 8002f82:	e006      	b.n	8002f92 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8002f84:	bf00      	nop
 8002f86:	e004      	b.n	8002f92 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8002f88:	bf00      	nop
 8002f8a:	e002      	b.n	8002f92 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8002f8c:	bf00      	nop
 8002f8e:	e000      	b.n	8002f92 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8002f90:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002f92:	7dfb      	ldrb	r3, [r7, #23]
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d10a      	bne.n	8002fae <HAL_RCCEx_PeriphCLKConfig+0xad2>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8002f98:	4b41      	ldr	r3, [pc, #260]	; (80030a0 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8002f9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f9c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002fa6:	493e      	ldr	r1, [pc, #248]	; (80030a0 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8002fa8:	4313      	orrs	r3, r2
 8002faa:	658b      	str	r3, [r1, #88]	; 0x58
 8002fac:	e001      	b.n	8002fb2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002fae:	7dfb      	ldrb	r3, [r7, #23]
 8002fb0:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f003 0308 	and.w	r3, r3, #8
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d01a      	beq.n	8002ff4 <HAL_RCCEx_PeriphCLKConfig+0xb18>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002fc4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002fc8:	d10a      	bne.n	8002fe0 <HAL_RCCEx_PeriphCLKConfig+0xb04>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	3324      	adds	r3, #36	; 0x24
 8002fce:	2102      	movs	r1, #2
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	f001 f895 	bl	8004100 <RCCEx_PLL3_Config>
 8002fd6:	4603      	mov	r3, r0
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d001      	beq.n	8002fe0 <HAL_RCCEx_PeriphCLKConfig+0xb04>
        {
          status = HAL_ERROR;
 8002fdc:	2301      	movs	r3, #1
 8002fde:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8002fe0:	4b2f      	ldr	r3, [pc, #188]	; (80030a0 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8002fe2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fe4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002fee:	492c      	ldr	r1, [pc, #176]	; (80030a0 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8002ff0:	4313      	orrs	r3, r2
 8002ff2:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f003 0310 	and.w	r3, r3, #16
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d01a      	beq.n	8003036 <HAL_RCCEx_PeriphCLKConfig+0xb5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003006:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800300a:	d10a      	bne.n	8003022 <HAL_RCCEx_PeriphCLKConfig+0xb46>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	3324      	adds	r3, #36	; 0x24
 8003010:	2102      	movs	r1, #2
 8003012:	4618      	mov	r0, r3
 8003014:	f001 f874 	bl	8004100 <RCCEx_PLL3_Config>
 8003018:	4603      	mov	r3, r0
 800301a:	2b00      	cmp	r3, #0
 800301c:	d001      	beq.n	8003022 <HAL_RCCEx_PeriphCLKConfig+0xb46>
      {
        status = HAL_ERROR;
 800301e:	2301      	movs	r3, #1
 8003020:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003022:	4b1f      	ldr	r3, [pc, #124]	; (80030a0 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8003024:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003026:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003030:	491b      	ldr	r1, [pc, #108]	; (80030a0 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8003032:	4313      	orrs	r3, r2
 8003034:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800303e:	2b00      	cmp	r3, #0
 8003040:	d032      	beq.n	80030a8 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003048:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800304c:	d00d      	beq.n	800306a <HAL_RCCEx_PeriphCLKConfig+0xb8e>
 800304e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003052:	d016      	beq.n	8003082 <HAL_RCCEx_PeriphCLKConfig+0xba6>
 8003054:	2b00      	cmp	r3, #0
 8003056:	d111      	bne.n	800307c <HAL_RCCEx_PeriphCLKConfig+0xba0>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	3304      	adds	r3, #4
 800305c:	2100      	movs	r1, #0
 800305e:	4618      	mov	r0, r3
 8003060:	f000 ff9c 	bl	8003f9c <RCCEx_PLL2_Config>
 8003064:	4603      	mov	r3, r0
 8003066:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8003068:	e00c      	b.n	8003084 <HAL_RCCEx_PeriphCLKConfig+0xba8>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	3324      	adds	r3, #36	; 0x24
 800306e:	2102      	movs	r1, #2
 8003070:	4618      	mov	r0, r3
 8003072:	f001 f845 	bl	8004100 <RCCEx_PLL3_Config>
 8003076:	4603      	mov	r3, r0
 8003078:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800307a:	e003      	b.n	8003084 <HAL_RCCEx_PeriphCLKConfig+0xba8>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800307c:	2301      	movs	r3, #1
 800307e:	75fb      	strb	r3, [r7, #23]
      break;
 8003080:	e000      	b.n	8003084 <HAL_RCCEx_PeriphCLKConfig+0xba8>
      break;
 8003082:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003084:	7dfb      	ldrb	r3, [r7, #23]
 8003086:	2b00      	cmp	r3, #0
 8003088:	d10c      	bne.n	80030a4 <HAL_RCCEx_PeriphCLKConfig+0xbc8>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800308a:	4b05      	ldr	r3, [pc, #20]	; (80030a0 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800308c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800308e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003098:	4901      	ldr	r1, [pc, #4]	; (80030a0 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800309a:	4313      	orrs	r3, r2
 800309c:	658b      	str	r3, [r1, #88]	; 0x58
 800309e:	e003      	b.n	80030a8 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
 80030a0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030a4:	7dfb      	ldrb	r3, [r7, #23]
 80030a6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d02f      	beq.n	8003114 <HAL_RCCEx_PeriphCLKConfig+0xc38>
  {

    switch(PeriphClkInit->UsbClockSelection)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80030ba:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80030be:	d00c      	beq.n	80030da <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 80030c0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80030c4:	d015      	beq.n	80030f2 <HAL_RCCEx_PeriphCLKConfig+0xc16>
 80030c6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80030ca:	d10f      	bne.n	80030ec <HAL_RCCEx_PeriphCLKConfig+0xc10>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80030cc:	4b79      	ldr	r3, [pc, #484]	; (80032b4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80030ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030d0:	4a78      	ldr	r2, [pc, #480]	; (80032b4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80030d2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80030d6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 80030d8:	e00c      	b.n	80030f4 <HAL_RCCEx_PeriphCLKConfig+0xc18>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	3324      	adds	r3, #36	; 0x24
 80030de:	2101      	movs	r1, #1
 80030e0:	4618      	mov	r0, r3
 80030e2:	f001 f80d 	bl	8004100 <RCCEx_PLL3_Config>
 80030e6:	4603      	mov	r3, r0
 80030e8:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 80030ea:	e003      	b.n	80030f4 <HAL_RCCEx_PeriphCLKConfig+0xc18>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80030ec:	2301      	movs	r3, #1
 80030ee:	75fb      	strb	r3, [r7, #23]
      break;
 80030f0:	e000      	b.n	80030f4 <HAL_RCCEx_PeriphCLKConfig+0xc18>
      break;
 80030f2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80030f4:	7dfb      	ldrb	r3, [r7, #23]
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d10a      	bne.n	8003110 <HAL_RCCEx_PeriphCLKConfig+0xc34>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80030fa:	4b6e      	ldr	r3, [pc, #440]	; (80032b4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80030fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030fe:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003108:	496a      	ldr	r1, [pc, #424]	; (80032b4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800310a:	4313      	orrs	r3, r2
 800310c:	654b      	str	r3, [r1, #84]	; 0x54
 800310e:	e001      	b.n	8003114 <HAL_RCCEx_PeriphCLKConfig+0xc38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003110:	7dfb      	ldrb	r3, [r7, #23]
 8003112:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800311c:	2b00      	cmp	r3, #0
 800311e:	d029      	beq.n	8003174 <HAL_RCCEx_PeriphCLKConfig+0xc98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003124:	2b00      	cmp	r3, #0
 8003126:	d003      	beq.n	8003130 <HAL_RCCEx_PeriphCLKConfig+0xc54>
 8003128:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800312c:	d007      	beq.n	800313e <HAL_RCCEx_PeriphCLKConfig+0xc62>
 800312e:	e00f      	b.n	8003150 <HAL_RCCEx_PeriphCLKConfig+0xc74>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003130:	4b60      	ldr	r3, [pc, #384]	; (80032b4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8003132:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003134:	4a5f      	ldr	r2, [pc, #380]	; (80032b4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8003136:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800313a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800313c:	e00b      	b.n	8003156 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	3304      	adds	r3, #4
 8003142:	2102      	movs	r1, #2
 8003144:	4618      	mov	r0, r3
 8003146:	f000 ff29 	bl	8003f9c <RCCEx_PLL2_Config>
 800314a:	4603      	mov	r3, r0
 800314c:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800314e:	e002      	b.n	8003156 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    default:
      ret = HAL_ERROR;
 8003150:	2301      	movs	r3, #1
 8003152:	75fb      	strb	r3, [r7, #23]
      break;
 8003154:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003156:	7dfb      	ldrb	r3, [r7, #23]
 8003158:	2b00      	cmp	r3, #0
 800315a:	d109      	bne.n	8003170 <HAL_RCCEx_PeriphCLKConfig+0xc94>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800315c:	4b55      	ldr	r3, [pc, #340]	; (80032b4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800315e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003160:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003168:	4952      	ldr	r1, [pc, #328]	; (80032b4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800316a:	4313      	orrs	r3, r2
 800316c:	64cb      	str	r3, [r1, #76]	; 0x4c
 800316e:	e001      	b.n	8003174 <HAL_RCCEx_PeriphCLKConfig+0xc98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003170:	7dfb      	ldrb	r3, [r7, #23]
 8003172:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800317c:	2b00      	cmp	r3, #0
 800317e:	d00a      	beq.n	8003196 <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	3324      	adds	r3, #36	; 0x24
 8003184:	2102      	movs	r1, #2
 8003186:	4618      	mov	r0, r3
 8003188:	f000 ffba 	bl	8004100 <RCCEx_PLL3_Config>
 800318c:	4603      	mov	r3, r0
 800318e:	2b00      	cmp	r3, #0
 8003190:	d001      	beq.n	8003196 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      status=HAL_ERROR;
 8003192:	2301      	movs	r3, #1
 8003194:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d02f      	beq.n	8003202 <HAL_RCCEx_PeriphCLKConfig+0xd26>
  {

    switch(PeriphClkInit->RngClockSelection)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80031a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80031aa:	d00c      	beq.n	80031c6 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 80031ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80031b0:	d802      	bhi.n	80031b8 <HAL_RCCEx_PeriphCLKConfig+0xcdc>
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d011      	beq.n	80031da <HAL_RCCEx_PeriphCLKConfig+0xcfe>
 80031b6:	e00d      	b.n	80031d4 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
 80031b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80031bc:	d00f      	beq.n	80031de <HAL_RCCEx_PeriphCLKConfig+0xd02>
 80031be:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80031c2:	d00e      	beq.n	80031e2 <HAL_RCCEx_PeriphCLKConfig+0xd06>
 80031c4:	e006      	b.n	80031d4 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80031c6:	4b3b      	ldr	r3, [pc, #236]	; (80032b4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80031c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031ca:	4a3a      	ldr	r2, [pc, #232]	; (80032b4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80031cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80031d0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 80031d2:	e007      	b.n	80031e4 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80031d4:	2301      	movs	r3, #1
 80031d6:	75fb      	strb	r3, [r7, #23]
      break;
 80031d8:	e004      	b.n	80031e4 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 80031da:	bf00      	nop
 80031dc:	e002      	b.n	80031e4 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 80031de:	bf00      	nop
 80031e0:	e000      	b.n	80031e4 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 80031e2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80031e4:	7dfb      	ldrb	r3, [r7, #23]
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d109      	bne.n	80031fe <HAL_RCCEx_PeriphCLKConfig+0xd22>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80031ea:	4b32      	ldr	r3, [pc, #200]	; (80032b4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80031ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031ee:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80031f6:	492f      	ldr	r1, [pc, #188]	; (80032b4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80031f8:	4313      	orrs	r3, r2
 80031fa:	654b      	str	r3, [r1, #84]	; 0x54
 80031fc:	e001      	b.n	8003202 <HAL_RCCEx_PeriphCLKConfig+0xd26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031fe:	7dfb      	ldrb	r3, [r7, #23]
 8003200:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800320a:	2b00      	cmp	r3, #0
 800320c:	d008      	beq.n	8003220 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800320e:	4b29      	ldr	r3, [pc, #164]	; (80032b4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8003210:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003212:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800321a:	4926      	ldr	r1, [pc, #152]	; (80032b4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800321c:	4313      	orrs	r3, r2
 800321e:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003228:	2b00      	cmp	r3, #0
 800322a:	d009      	beq.n	8003240 <HAL_RCCEx_PeriphCLKConfig+0xd64>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800322c:	4b21      	ldr	r3, [pc, #132]	; (80032b4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800322e:	691b      	ldr	r3, [r3, #16]
 8003230:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800323a:	491e      	ldr	r1, [pc, #120]	; (80032b4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800323c:	4313      	orrs	r3, r2
 800323e:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003248:	2b00      	cmp	r3, #0
 800324a:	d008      	beq.n	800325e <HAL_RCCEx_PeriphCLKConfig+0xd82>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800324c:	4b19      	ldr	r3, [pc, #100]	; (80032b4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800324e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003250:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003258:	4916      	ldr	r1, [pc, #88]	; (80032b4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800325a:	4313      	orrs	r3, r2
 800325c:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003266:	2b00      	cmp	r3, #0
 8003268:	d00d      	beq.n	8003286 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800326a:	4b12      	ldr	r3, [pc, #72]	; (80032b4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800326c:	691b      	ldr	r3, [r3, #16]
 800326e:	4a11      	ldr	r2, [pc, #68]	; (80032b4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8003270:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003274:	6113      	str	r3, [r2, #16]
 8003276:	4b0f      	ldr	r3, [pc, #60]	; (80032b4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8003278:	691a      	ldr	r2, [r3, #16]
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8003280:	490c      	ldr	r1, [pc, #48]	; (80032b4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8003282:	4313      	orrs	r3, r2
 8003284:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	2b00      	cmp	r3, #0
 800328c:	da08      	bge.n	80032a0 <HAL_RCCEx_PeriphCLKConfig+0xdc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800328e:	4b09      	ldr	r3, [pc, #36]	; (80032b4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8003290:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003292:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800329a:	4906      	ldr	r1, [pc, #24]	; (80032b4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800329c:	4313      	orrs	r3, r2
 800329e:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  if (status == HAL_OK)
 80032a0:	7dbb      	ldrb	r3, [r7, #22]
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d101      	bne.n	80032aa <HAL_RCCEx_PeriphCLKConfig+0xdce>
  {
    return HAL_OK;
 80032a6:	2300      	movs	r3, #0
 80032a8:	e000      	b.n	80032ac <HAL_RCCEx_PeriphCLKConfig+0xdd0>
  }
  return HAL_ERROR;
 80032aa:	2301      	movs	r3, #1
}
 80032ac:	4618      	mov	r0, r3
 80032ae:	3718      	adds	r7, #24
 80032b0:	46bd      	mov	sp, r7
 80032b2:	bd80      	pop	{r7, pc}
 80032b4:	58024400 	.word	0x58024400

080032b8 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80032b8:	b580      	push	{r7, lr}
 80032ba:	b090      	sub	sp, #64	; 0x40
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80032c6:	d150      	bne.n	800336a <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 80032c8:	4ba1      	ldr	r3, [pc, #644]	; (8003550 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80032ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80032cc:	f003 0307 	and.w	r3, r3, #7
 80032d0:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 80032d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032d4:	2b04      	cmp	r3, #4
 80032d6:	d844      	bhi.n	8003362 <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
 80032d8:	a201      	add	r2, pc, #4	; (adr r2, 80032e0 <HAL_RCCEx_GetPeriphCLKFreq+0x28>)
 80032da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032de:	bf00      	nop
 80032e0:	080032f5 	.word	0x080032f5
 80032e4:	08003305 	.word	0x08003305
 80032e8:	08003315 	.word	0x08003315
 80032ec:	0800335d 	.word	0x0800335d
 80032f0:	08003325 	.word	0x08003325
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80032f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80032f8:	4618      	mov	r0, r3
 80032fa:	f000 fd03 	bl	8003d04 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80032fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003300:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003302:	e241      	b.n	8003788 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8003304:	f107 0318 	add.w	r3, r7, #24
 8003308:	4618      	mov	r0, r3
 800330a:	f000 fa63 	bl	80037d4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800330e:	69bb      	ldr	r3, [r7, #24]
 8003310:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003312:	e239      	b.n	8003788 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8003314:	f107 030c 	add.w	r3, r7, #12
 8003318:	4618      	mov	r0, r3
 800331a:	f000 fba7 	bl	8003a6c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003322:	e231      	b.n	8003788 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8003324:	4b8a      	ldr	r3, [pc, #552]	; (8003550 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8003326:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003328:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800332c:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 800332e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003330:	2b00      	cmp	r3, #0
 8003332:	d102      	bne.n	800333a <HAL_RCCEx_GetPeriphCLKFreq+0x82>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8003334:	4b87      	ldr	r3, [pc, #540]	; (8003554 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8003336:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8003338:	e226      	b.n	8003788 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 800333a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800333c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003340:	d102      	bne.n	8003348 <HAL_RCCEx_GetPeriphCLKFreq+0x90>
            frequency = CSI_VALUE;
 8003342:	4b85      	ldr	r3, [pc, #532]	; (8003558 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8003344:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003346:	e21f      	b.n	8003788 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8003348:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800334a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800334e:	d102      	bne.n	8003356 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
            frequency = HSE_VALUE;
 8003350:	4b82      	ldr	r3, [pc, #520]	; (800355c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8003352:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003354:	e218      	b.n	8003788 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 8003356:	2300      	movs	r3, #0
 8003358:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800335a:	e215      	b.n	8003788 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800335c:	4b80      	ldr	r3, [pc, #512]	; (8003560 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 800335e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003360:	e212      	b.n	8003788 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      default :
        {
          frequency = 0;
 8003362:	2300      	movs	r3, #0
 8003364:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003366:	bf00      	nop
 8003368:	e20e      	b.n	8003788 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003370:	d14f      	bne.n	8003412 <HAL_RCCEx_GetPeriphCLKFreq+0x15a>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 8003372:	4b77      	ldr	r3, [pc, #476]	; (8003550 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8003374:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003376:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800337a:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800337c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800337e:	2b80      	cmp	r3, #128	; 0x80
 8003380:	d01c      	beq.n	80033bc <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 8003382:	2b80      	cmp	r3, #128	; 0x80
 8003384:	d804      	bhi.n	8003390 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
 8003386:	2b00      	cmp	r3, #0
 8003388:	d008      	beq.n	800339c <HAL_RCCEx_GetPeriphCLKFreq+0xe4>
 800338a:	2b40      	cmp	r3, #64	; 0x40
 800338c:	d00e      	beq.n	80033ac <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 800338e:	e03c      	b.n	800340a <HAL_RCCEx_GetPeriphCLKFreq+0x152>
 8003390:	2bc0      	cmp	r3, #192	; 0xc0
 8003392:	d037      	beq.n	8003404 <HAL_RCCEx_GetPeriphCLKFreq+0x14c>
 8003394:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003398:	d018      	beq.n	80033cc <HAL_RCCEx_GetPeriphCLKFreq+0x114>
 800339a:	e036      	b.n	800340a <HAL_RCCEx_GetPeriphCLKFreq+0x152>
      {
      case 0: /* PLL1 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800339c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80033a0:	4618      	mov	r0, r3
 80033a2:	f000 fcaf 	bl	8003d04 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80033a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033a8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80033aa:	e1ed      	b.n	8003788 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80033ac:	f107 0318 	add.w	r3, r7, #24
 80033b0:	4618      	mov	r0, r3
 80033b2:	f000 fa0f 	bl	80037d4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80033b6:	69bb      	ldr	r3, [r7, #24]
 80033b8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80033ba:	e1e5      	b.n	8003788 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80033bc:	f107 030c 	add.w	r3, r7, #12
 80033c0:	4618      	mov	r0, r3
 80033c2:	f000 fb53 	bl	8003a6c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80033ca:	e1dd      	b.n	8003788 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80033cc:	4b60      	ldr	r3, [pc, #384]	; (8003550 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80033ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033d0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80033d4:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 80033d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d102      	bne.n	80033e2 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 80033dc:	4b5d      	ldr	r3, [pc, #372]	; (8003554 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 80033de:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 80033e0:	e1d2      	b.n	8003788 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 80033e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80033e4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80033e8:	d102      	bne.n	80033f0 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
            frequency = CSI_VALUE;
 80033ea:	4b5b      	ldr	r3, [pc, #364]	; (8003558 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 80033ec:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80033ee:	e1cb      	b.n	8003788 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 80033f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80033f2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80033f6:	d102      	bne.n	80033fe <HAL_RCCEx_GetPeriphCLKFreq+0x146>
            frequency = HSE_VALUE;
 80033f8:	4b58      	ldr	r3, [pc, #352]	; (800355c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 80033fa:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80033fc:	e1c4      	b.n	8003788 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 80033fe:	2300      	movs	r3, #0
 8003400:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003402:	e1c1      	b.n	8003788 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8003404:	4b56      	ldr	r3, [pc, #344]	; (8003560 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 8003406:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003408:	e1be      	b.n	8003788 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      default :
        {
          frequency = 0;
 800340a:	2300      	movs	r3, #0
 800340c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800340e:	bf00      	nop
 8003410:	e1ba      	b.n	8003788 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003418:	d153      	bne.n	80034c2 <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 800341a:	4b4d      	ldr	r3, [pc, #308]	; (8003550 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800341c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800341e:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8003422:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8003424:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003426:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800342a:	d01f      	beq.n	800346c <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>
 800342c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003430:	d805      	bhi.n	800343e <HAL_RCCEx_GetPeriphCLKFreq+0x186>
 8003432:	2b00      	cmp	r3, #0
 8003434:	d00a      	beq.n	800344c <HAL_RCCEx_GetPeriphCLKFreq+0x194>
 8003436:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800343a:	d00f      	beq.n	800345c <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
 800343c:	e03d      	b.n	80034ba <HAL_RCCEx_GetPeriphCLKFreq+0x202>
 800343e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003442:	d037      	beq.n	80034b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>
 8003444:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003448:	d018      	beq.n	800347c <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>
 800344a:	e036      	b.n	80034ba <HAL_RCCEx_GetPeriphCLKFreq+0x202>
      {
      case 0: /* PLL1 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800344c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003450:	4618      	mov	r0, r3
 8003452:	f000 fc57 	bl	8003d04 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8003456:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003458:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800345a:	e195      	b.n	8003788 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_D3CCIPR_SAI4ASEL_0: /* PLLI2 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800345c:	f107 0318 	add.w	r3, r7, #24
 8003460:	4618      	mov	r0, r3
 8003462:	f000 f9b7 	bl	80037d4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8003466:	69bb      	ldr	r3, [r7, #24]
 8003468:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800346a:	e18d      	b.n	8003788 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4ASEL_1: /* PLLI3 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800346c:	f107 030c 	add.w	r3, r7, #12
 8003470:	4618      	mov	r0, r3
 8003472:	f000 fafb 	bl	8003a6c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800347a:	e185      	b.n	8003788 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4ASEL_2: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800347c:	4b34      	ldr	r3, [pc, #208]	; (8003550 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800347e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003480:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003484:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8003486:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003488:	2b00      	cmp	r3, #0
 800348a:	d102      	bne.n	8003492 <HAL_RCCEx_GetPeriphCLKFreq+0x1da>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 800348c:	4b31      	ldr	r3, [pc, #196]	; (8003554 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800348e:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8003490:	e17a      	b.n	8003788 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8003492:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003494:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003498:	d102      	bne.n	80034a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>
            frequency = CSI_VALUE;
 800349a:	4b2f      	ldr	r3, [pc, #188]	; (8003558 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800349c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800349e:	e173      	b.n	8003788 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 80034a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034a2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80034a6:	d102      	bne.n	80034ae <HAL_RCCEx_GetPeriphCLKFreq+0x1f6>
            frequency = HSE_VALUE;
 80034a8:	4b2c      	ldr	r3, [pc, #176]	; (800355c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 80034aa:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80034ac:	e16c      	b.n	8003788 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 80034ae:	2300      	movs	r3, #0
 80034b0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80034b2:	e169      	b.n	8003788 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_D3CCIPR_SAI4ASEL_0 | RCC_D3CCIPR_SAI4ASEL_1 ): /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80034b4:	4b2a      	ldr	r3, [pc, #168]	; (8003560 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 80034b6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80034b8:	e166      	b.n	8003788 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 80034ba:	2300      	movs	r3, #0
 80034bc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80034be:	bf00      	nop
 80034c0:	e162      	b.n	8003788 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80034c8:	d15d      	bne.n	8003586 <HAL_RCCEx_GetPeriphCLKFreq+0x2ce>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 80034ca:	4b21      	ldr	r3, [pc, #132]	; (8003550 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80034cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034ce:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 80034d2:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 80034d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034d6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80034da:	d01f      	beq.n	800351c <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 80034dc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80034e0:	d805      	bhi.n	80034ee <HAL_RCCEx_GetPeriphCLKFreq+0x236>
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d00a      	beq.n	80034fc <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 80034e6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80034ea:	d00f      	beq.n	800350c <HAL_RCCEx_GetPeriphCLKFreq+0x254>
 80034ec:	e047      	b.n	800357e <HAL_RCCEx_GetPeriphCLKFreq+0x2c6>
 80034ee:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80034f2:	d041      	beq.n	8003578 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>
 80034f4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80034f8:	d018      	beq.n	800352c <HAL_RCCEx_GetPeriphCLKFreq+0x274>
 80034fa:	e040      	b.n	800357e <HAL_RCCEx_GetPeriphCLKFreq+0x2c6>
      {
      case 0: /* PLL1 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80034fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003500:	4618      	mov	r0, r3
 8003502:	f000 fbff 	bl	8003d04 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8003506:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003508:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800350a:	e13d      	b.n	8003788 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_D3CCIPR_SAI4BSEL_0: /* PLLI2 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800350c:	f107 0318 	add.w	r3, r7, #24
 8003510:	4618      	mov	r0, r3
 8003512:	f000 f95f 	bl	80037d4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8003516:	69bb      	ldr	r3, [r7, #24]
 8003518:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800351a:	e135      	b.n	8003788 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4BSEL_1: /* PLLI3 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800351c:	f107 030c 	add.w	r3, r7, #12
 8003520:	4618      	mov	r0, r3
 8003522:	f000 faa3 	bl	8003a6c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800352a:	e12d      	b.n	8003788 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4BSEL_2: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800352c:	4b08      	ldr	r3, [pc, #32]	; (8003550 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800352e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003530:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003534:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8003536:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003538:	2b00      	cmp	r3, #0
 800353a:	d102      	bne.n	8003542 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 800353c:	4b05      	ldr	r3, [pc, #20]	; (8003554 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800353e:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8003540:	e122      	b.n	8003788 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8003542:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003544:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003548:	d10c      	bne.n	8003564 <HAL_RCCEx_GetPeriphCLKFreq+0x2ac>
            frequency = CSI_VALUE;
 800354a:	4b03      	ldr	r3, [pc, #12]	; (8003558 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800354c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800354e:	e11b      	b.n	8003788 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 8003550:	58024400 	.word	0x58024400
 8003554:	03d09000 	.word	0x03d09000
 8003558:	003d0900 	.word	0x003d0900
 800355c:	017d7840 	.word	0x017d7840
 8003560:	00bb8000 	.word	0x00bb8000
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8003564:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003566:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800356a:	d102      	bne.n	8003572 <HAL_RCCEx_GetPeriphCLKFreq+0x2ba>
            frequency = HSE_VALUE;
 800356c:	4b89      	ldr	r3, [pc, #548]	; (8003794 <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 800356e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003570:	e10a      	b.n	8003788 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 8003572:	2300      	movs	r3, #0
 8003574:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003576:	e107      	b.n	8003788 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_D3CCIPR_SAI4BSEL_0 | RCC_D3CCIPR_SAI4BSEL_1 ): /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8003578:	4b87      	ldr	r3, [pc, #540]	; (8003798 <HAL_RCCEx_GetPeriphCLKFreq+0x4e0>)
 800357a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800357c:	e104      	b.n	8003788 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 800357e:	2300      	movs	r3, #0
 8003580:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003582:	bf00      	nop
 8003584:	e100      	b.n	8003788 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800358c:	d153      	bne.n	8003636 <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 800358e:	4b83      	ldr	r3, [pc, #524]	; (800379c <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 8003590:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003592:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8003596:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8003598:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800359a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800359e:	d01f      	beq.n	80035e0 <HAL_RCCEx_GetPeriphCLKFreq+0x328>
 80035a0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80035a4:	d805      	bhi.n	80035b2 <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d00a      	beq.n	80035c0 <HAL_RCCEx_GetPeriphCLKFreq+0x308>
 80035aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80035ae:	d00f      	beq.n	80035d0 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
 80035b0:	e03d      	b.n	800362e <HAL_RCCEx_GetPeriphCLKFreq+0x376>
 80035b2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80035b6:	d037      	beq.n	8003628 <HAL_RCCEx_GetPeriphCLKFreq+0x370>
 80035b8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80035bc:	d018      	beq.n	80035f0 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 80035be:	e036      	b.n	800362e <HAL_RCCEx_GetPeriphCLKFreq+0x376>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80035c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80035c4:	4618      	mov	r0, r3
 80035c6:	f000 fb9d 	bl	8003d04 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80035ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035cc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80035ce:	e0db      	b.n	8003788 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80035d0:	f107 0318 	add.w	r3, r7, #24
 80035d4:	4618      	mov	r0, r3
 80035d6:	f000 f8fd 	bl	80037d4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80035da:	69bb      	ldr	r3, [r7, #24]
 80035dc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80035de:	e0d3      	b.n	8003788 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80035e0:	f107 030c 	add.w	r3, r7, #12
 80035e4:	4618      	mov	r0, r3
 80035e6:	f000 fa41 	bl	8003a6c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80035ee:	e0cb      	b.n	8003788 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for I2S */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80035f0:	4b6a      	ldr	r3, [pc, #424]	; (800379c <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 80035f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035f4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80035f8:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 80035fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d102      	bne.n	8003606 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8003600:	4b67      	ldr	r3, [pc, #412]	; (80037a0 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 8003602:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8003604:	e0c0      	b.n	8003788 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8003606:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003608:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800360c:	d102      	bne.n	8003614 <HAL_RCCEx_GetPeriphCLKFreq+0x35c>
            frequency = CSI_VALUE;
 800360e:	4b65      	ldr	r3, [pc, #404]	; (80037a4 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8003610:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003612:	e0b9      	b.n	8003788 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8003614:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003616:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800361a:	d102      	bne.n	8003622 <HAL_RCCEx_GetPeriphCLKFreq+0x36a>
            frequency = HSE_VALUE;
 800361c:	4b5d      	ldr	r3, [pc, #372]	; (8003794 <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 800361e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003620:	e0b2      	b.n	8003788 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 8003622:	2300      	movs	r3, #0
 8003624:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003626:	e0af      	b.n	8003788 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8003628:	4b5b      	ldr	r3, [pc, #364]	; (8003798 <HAL_RCCEx_GetPeriphCLKFreq+0x4e0>)
 800362a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800362c:	e0ac      	b.n	8003788 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      default :
        {
          frequency = 0;
 800362e:	2300      	movs	r3, #0
 8003630:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003632:	bf00      	nop
 8003634:	e0a8      	b.n	8003788 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800363c:	d13d      	bne.n	80036ba <HAL_RCCEx_GetPeriphCLKFreq+0x402>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 800363e:	4b57      	ldr	r3, [pc, #348]	; (800379c <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 8003640:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003642:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003646:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8003648:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800364a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800364e:	d00c      	beq.n	800366a <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 8003650:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003654:	d011      	beq.n	800367a <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 8003656:	2b00      	cmp	r3, #0
 8003658:	d12b      	bne.n	80036b2 <HAL_RCCEx_GetPeriphCLKFreq+0x3fa>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800365a:	f107 0318 	add.w	r3, r7, #24
 800365e:	4618      	mov	r0, r3
 8003660:	f000 f8b8 	bl	80037d4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8003664:	69bb      	ldr	r3, [r7, #24]
 8003666:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003668:	e08e      	b.n	8003788 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800366a:	f107 030c 	add.w	r3, r7, #12
 800366e:	4618      	mov	r0, r3
 8003670:	f000 f9fc 	bl	8003a6c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8003674:	697b      	ldr	r3, [r7, #20]
 8003676:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003678:	e086      	b.n	8003788 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800367a:	4b48      	ldr	r3, [pc, #288]	; (800379c <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 800367c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800367e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003682:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8003684:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003686:	2b00      	cmp	r3, #0
 8003688:	d102      	bne.n	8003690 <HAL_RCCEx_GetPeriphCLKFreq+0x3d8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 800368a:	4b45      	ldr	r3, [pc, #276]	; (80037a0 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 800368c:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 800368e:	e07b      	b.n	8003788 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8003690:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003692:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003696:	d102      	bne.n	800369e <HAL_RCCEx_GetPeriphCLKFreq+0x3e6>
            frequency = CSI_VALUE;
 8003698:	4b42      	ldr	r3, [pc, #264]	; (80037a4 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 800369a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800369c:	e074      	b.n	8003788 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 800369e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80036a0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80036a4:	d102      	bne.n	80036ac <HAL_RCCEx_GetPeriphCLKFreq+0x3f4>
            frequency = HSE_VALUE;
 80036a6:	4b3b      	ldr	r3, [pc, #236]	; (8003794 <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 80036a8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80036aa:	e06d      	b.n	8003788 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 80036ac:	2300      	movs	r3, #0
 80036ae:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80036b0:	e06a      	b.n	8003788 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 80036b2:	2300      	movs	r3, #0
 80036b4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80036b6:	bf00      	nop
 80036b8:	e066      	b.n	8003788 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036c0:	d11f      	bne.n	8003702 <HAL_RCCEx_GetPeriphCLKFreq+0x44a>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 80036c2:	4b36      	ldr	r3, [pc, #216]	; (800379c <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 80036c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80036ca:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80036cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d003      	beq.n	80036da <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 80036d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036d6:	d008      	beq.n	80036ea <HAL_RCCEx_GetPeriphCLKFreq+0x432>
 80036d8:	e00f      	b.n	80036fa <HAL_RCCEx_GetPeriphCLKFreq+0x442>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80036da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80036de:	4618      	mov	r0, r3
 80036e0:	f000 fb10 	bl	8003d04 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80036e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036e6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80036e8:	e04e      	b.n	8003788 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80036ea:	f107 0318 	add.w	r3, r7, #24
 80036ee:	4618      	mov	r0, r3
 80036f0:	f000 f870 	bl	80037d4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 80036f4:	6a3b      	ldr	r3, [r7, #32]
 80036f6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80036f8:	e046      	b.n	8003788 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 80036fa:	2300      	movs	r3, #0
 80036fc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80036fe:	bf00      	nop
 8003700:	e042      	b.n	8003788 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003708:	d13c      	bne.n	8003784 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 800370a:	4b24      	ldr	r3, [pc, #144]	; (800379c <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 800370c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800370e:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8003712:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8003714:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003716:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800371a:	d01e      	beq.n	800375a <HAL_RCCEx_GetPeriphCLKFreq+0x4a2>
 800371c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003720:	d805      	bhi.n	800372e <HAL_RCCEx_GetPeriphCLKFreq+0x476>
 8003722:	2b00      	cmp	r3, #0
 8003724:	d00d      	beq.n	8003742 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 8003726:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800372a:	d00e      	beq.n	800374a <HAL_RCCEx_GetPeriphCLKFreq+0x492>
 800372c:	e026      	b.n	800377c <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>
 800372e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003732:	d01d      	beq.n	8003770 <HAL_RCCEx_GetPeriphCLKFreq+0x4b8>
 8003734:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003738:	d01d      	beq.n	8003776 <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
 800373a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800373e:	d014      	beq.n	800376a <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
 8003740:	e01c      	b.n	800377c <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8003742:	f000 f831 	bl	80037a8 <HAL_RCCEx_GetD3PCLK1Freq>
 8003746:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 8003748:	e01e      	b.n	8003788 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800374a:	f107 0318 	add.w	r3, r7, #24
 800374e:	4618      	mov	r0, r3
 8003750:	f000 f840 	bl	80037d4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8003754:	69fb      	ldr	r3, [r7, #28]
 8003756:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003758:	e016      	b.n	8003788 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800375a:	f107 030c 	add.w	r3, r7, #12
 800375e:	4618      	mov	r0, r3
 8003760:	f000 f984 	bl	8003a6c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8003764:	693b      	ldr	r3, [r7, #16]
 8003766:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003768:	e00e      	b.n	8003788 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
          frequency = HSI_VALUE;
 800376a:	4b0d      	ldr	r3, [pc, #52]	; (80037a0 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 800376c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800376e:	e00b      	b.n	8003788 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
          frequency = CSI_VALUE;
 8003770:	4b0c      	ldr	r3, [pc, #48]	; (80037a4 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8003772:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003774:	e008      	b.n	8003788 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
          frequency = HSE_VALUE;
 8003776:	4b07      	ldr	r3, [pc, #28]	; (8003794 <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 8003778:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800377a:	e005      	b.n	8003788 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 800377c:	2300      	movs	r3, #0
 800377e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003780:	bf00      	nop
 8003782:	e001      	b.n	8003788 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else
    {
      frequency = 0;
 8003784:	2300      	movs	r3, #0
 8003786:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 8003788:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800378a:	4618      	mov	r0, r3
 800378c:	3740      	adds	r7, #64	; 0x40
 800378e:	46bd      	mov	sp, r7
 8003790:	bd80      	pop	{r7, pc}
 8003792:	bf00      	nop
 8003794:	017d7840 	.word	0x017d7840
 8003798:	00bb8000 	.word	0x00bb8000
 800379c:	58024400 	.word	0x58024400
 80037a0:	03d09000 	.word	0x03d09000
 80037a4:	003d0900 	.word	0x003d0900

080037a8 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80037ac:	f7fe fe66 	bl	800247c <HAL_RCC_GetHCLKFreq>
 80037b0:	4601      	mov	r1, r0
 80037b2:	4b06      	ldr	r3, [pc, #24]	; (80037cc <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80037b4:	6a1b      	ldr	r3, [r3, #32]
 80037b6:	091b      	lsrs	r3, r3, #4
 80037b8:	f003 0307 	and.w	r3, r3, #7
 80037bc:	4a04      	ldr	r2, [pc, #16]	; (80037d0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80037be:	5cd3      	ldrb	r3, [r2, r3]
 80037c0:	f003 031f 	and.w	r3, r3, #31
 80037c4:	fa21 f303 	lsr.w	r3, r1, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80037c8:	4618      	mov	r0, r3
 80037ca:	bd80      	pop	{r7, pc}
 80037cc:	58024400 	.word	0x58024400
 80037d0:	08008690 	.word	0x08008690

080037d4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 80037d4:	b480      	push	{r7}
 80037d6:	b089      	sub	sp, #36	; 0x24
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80037dc:	4b9d      	ldr	r3, [pc, #628]	; (8003a54 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80037de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037e0:	f003 0303 	and.w	r3, r3, #3
 80037e4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 80037e6:	4b9b      	ldr	r3, [pc, #620]	; (8003a54 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80037e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037ea:	0b1b      	lsrs	r3, r3, #12
 80037ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80037f0:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80037f2:	4b98      	ldr	r3, [pc, #608]	; (8003a54 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80037f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037f6:	091b      	lsrs	r3, r3, #4
 80037f8:	f003 0301 	and.w	r3, r3, #1
 80037fc:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 80037fe:	4b95      	ldr	r3, [pc, #596]	; (8003a54 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8003800:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003802:	08db      	lsrs	r3, r3, #3
 8003804:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003808:	693a      	ldr	r2, [r7, #16]
 800380a:	fb02 f303 	mul.w	r3, r2, r3
 800380e:	ee07 3a90 	vmov	s15, r3
 8003812:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003816:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800381a:	697b      	ldr	r3, [r7, #20]
 800381c:	2b00      	cmp	r3, #0
 800381e:	f000 810a 	beq.w	8003a36 <HAL_RCCEx_GetPLL2ClockFreq+0x262>
  {
    switch (pllsource)
 8003822:	69bb      	ldr	r3, [r7, #24]
 8003824:	2b01      	cmp	r3, #1
 8003826:	d05a      	beq.n	80038de <HAL_RCCEx_GetPLL2ClockFreq+0x10a>
 8003828:	2b01      	cmp	r3, #1
 800382a:	d302      	bcc.n	8003832 <HAL_RCCEx_GetPLL2ClockFreq+0x5e>
 800382c:	2b02      	cmp	r3, #2
 800382e:	d078      	beq.n	8003922 <HAL_RCCEx_GetPLL2ClockFreq+0x14e>
 8003830:	e099      	b.n	8003966 <HAL_RCCEx_GetPLL2ClockFreq+0x192>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003832:	4b88      	ldr	r3, [pc, #544]	; (8003a54 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f003 0320 	and.w	r3, r3, #32
 800383a:	2b00      	cmp	r3, #0
 800383c:	d02d      	beq.n	800389a <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800383e:	4b85      	ldr	r3, [pc, #532]	; (8003a54 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	08db      	lsrs	r3, r3, #3
 8003844:	f003 0303 	and.w	r3, r3, #3
 8003848:	4a83      	ldr	r2, [pc, #524]	; (8003a58 <HAL_RCCEx_GetPLL2ClockFreq+0x284>)
 800384a:	fa22 f303 	lsr.w	r3, r2, r3
 800384e:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003850:	68bb      	ldr	r3, [r7, #8]
 8003852:	ee07 3a90 	vmov	s15, r3
 8003856:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800385a:	697b      	ldr	r3, [r7, #20]
 800385c:	ee07 3a90 	vmov	s15, r3
 8003860:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003864:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003868:	4b7a      	ldr	r3, [pc, #488]	; (8003a54 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800386a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800386c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003870:	ee07 3a90 	vmov	s15, r3
 8003874:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003878:	ed97 6a03 	vldr	s12, [r7, #12]
 800387c:	eddf 5a77 	vldr	s11, [pc, #476]	; 8003a5c <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8003880:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003884:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003888:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800388c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003890:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003894:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8003898:	e087      	b.n	80039aa <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800389a:	697b      	ldr	r3, [r7, #20]
 800389c:	ee07 3a90 	vmov	s15, r3
 80038a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80038a4:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8003a60 <HAL_RCCEx_GetPLL2ClockFreq+0x28c>
 80038a8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80038ac:	4b69      	ldr	r3, [pc, #420]	; (8003a54 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80038ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80038b4:	ee07 3a90 	vmov	s15, r3
 80038b8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80038bc:	ed97 6a03 	vldr	s12, [r7, #12]
 80038c0:	eddf 5a66 	vldr	s11, [pc, #408]	; 8003a5c <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 80038c4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80038c8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80038cc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80038d0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80038d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80038d8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80038dc:	e065      	b.n	80039aa <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80038de:	697b      	ldr	r3, [r7, #20]
 80038e0:	ee07 3a90 	vmov	s15, r3
 80038e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80038e8:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8003a64 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 80038ec:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80038f0:	4b58      	ldr	r3, [pc, #352]	; (8003a54 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80038f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80038f8:	ee07 3a90 	vmov	s15, r3
 80038fc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003900:	ed97 6a03 	vldr	s12, [r7, #12]
 8003904:	eddf 5a55 	vldr	s11, [pc, #340]	; 8003a5c <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8003908:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800390c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003910:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003914:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003918:	ee67 7a27 	vmul.f32	s15, s14, s15
 800391c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003920:	e043      	b.n	80039aa <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003922:	697b      	ldr	r3, [r7, #20]
 8003924:	ee07 3a90 	vmov	s15, r3
 8003928:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800392c:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8003a68 <HAL_RCCEx_GetPLL2ClockFreq+0x294>
 8003930:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003934:	4b47      	ldr	r3, [pc, #284]	; (8003a54 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8003936:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003938:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800393c:	ee07 3a90 	vmov	s15, r3
 8003940:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003944:	ed97 6a03 	vldr	s12, [r7, #12]
 8003948:	eddf 5a44 	vldr	s11, [pc, #272]	; 8003a5c <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 800394c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003950:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003954:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003958:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800395c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003960:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003964:	e021      	b.n	80039aa <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003966:	697b      	ldr	r3, [r7, #20]
 8003968:	ee07 3a90 	vmov	s15, r3
 800396c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003970:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8003a64 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8003974:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003978:	4b36      	ldr	r3, [pc, #216]	; (8003a54 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800397a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800397c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003980:	ee07 3a90 	vmov	s15, r3
 8003984:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003988:	ed97 6a03 	vldr	s12, [r7, #12]
 800398c:	eddf 5a33 	vldr	s11, [pc, #204]	; 8003a5c <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8003990:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003994:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003998:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800399c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80039a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80039a4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80039a8:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 80039aa:	4b2a      	ldr	r3, [pc, #168]	; (8003a54 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80039ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039ae:	0a5b      	lsrs	r3, r3, #9
 80039b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80039b4:	ee07 3a90 	vmov	s15, r3
 80039b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80039bc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80039c0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80039c4:	edd7 6a07 	vldr	s13, [r7, #28]
 80039c8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80039cc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80039d0:	ee17 2a90 	vmov	r2, s15
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 80039d8:	4b1e      	ldr	r3, [pc, #120]	; (8003a54 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80039da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039dc:	0c1b      	lsrs	r3, r3, #16
 80039de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80039e2:	ee07 3a90 	vmov	s15, r3
 80039e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80039ea:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80039ee:	ee37 7a87 	vadd.f32	s14, s15, s14
 80039f2:	edd7 6a07 	vldr	s13, [r7, #28]
 80039f6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80039fa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80039fe:	ee17 2a90 	vmov	r2, s15
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8003a06:	4b13      	ldr	r3, [pc, #76]	; (8003a54 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8003a08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a0a:	0e1b      	lsrs	r3, r3, #24
 8003a0c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003a10:	ee07 3a90 	vmov	s15, r3
 8003a14:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a18:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003a1c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003a20:	edd7 6a07 	vldr	s13, [r7, #28]
 8003a24:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003a28:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003a2c:	ee17 2a90 	vmov	r2, s15
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8003a34:	e008      	b.n	8003a48 <HAL_RCCEx_GetPLL2ClockFreq+0x274>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	2200      	movs	r2, #0
 8003a3a:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2200      	movs	r2, #0
 8003a40:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	2200      	movs	r2, #0
 8003a46:	609a      	str	r2, [r3, #8]
}
 8003a48:	bf00      	nop
 8003a4a:	3724      	adds	r7, #36	; 0x24
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a52:	4770      	bx	lr
 8003a54:	58024400 	.word	0x58024400
 8003a58:	03d09000 	.word	0x03d09000
 8003a5c:	46000000 	.word	0x46000000
 8003a60:	4c742400 	.word	0x4c742400
 8003a64:	4a742400 	.word	0x4a742400
 8003a68:	4bbebc20 	.word	0x4bbebc20

08003a6c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8003a6c:	b480      	push	{r7}
 8003a6e:	b089      	sub	sp, #36	; 0x24
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003a74:	4b9d      	ldr	r3, [pc, #628]	; (8003cec <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8003a76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a78:	f003 0303 	and.w	r3, r3, #3
 8003a7c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8003a7e:	4b9b      	ldr	r3, [pc, #620]	; (8003cec <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8003a80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a82:	0d1b      	lsrs	r3, r3, #20
 8003a84:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003a88:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8003a8a:	4b98      	ldr	r3, [pc, #608]	; (8003cec <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8003a8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a8e:	0a1b      	lsrs	r3, r3, #8
 8003a90:	f003 0301 	and.w	r3, r3, #1
 8003a94:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8003a96:	4b95      	ldr	r3, [pc, #596]	; (8003cec <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8003a98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a9a:	08db      	lsrs	r3, r3, #3
 8003a9c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003aa0:	693a      	ldr	r2, [r7, #16]
 8003aa2:	fb02 f303 	mul.w	r3, r2, r3
 8003aa6:	ee07 3a90 	vmov	s15, r3
 8003aaa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003aae:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8003ab2:	697b      	ldr	r3, [r7, #20]
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	f000 810a 	beq.w	8003cce <HAL_RCCEx_GetPLL3ClockFreq+0x262>
  {
    switch (pllsource)
 8003aba:	69bb      	ldr	r3, [r7, #24]
 8003abc:	2b01      	cmp	r3, #1
 8003abe:	d05a      	beq.n	8003b76 <HAL_RCCEx_GetPLL3ClockFreq+0x10a>
 8003ac0:	2b01      	cmp	r3, #1
 8003ac2:	d302      	bcc.n	8003aca <HAL_RCCEx_GetPLL3ClockFreq+0x5e>
 8003ac4:	2b02      	cmp	r3, #2
 8003ac6:	d078      	beq.n	8003bba <HAL_RCCEx_GetPLL3ClockFreq+0x14e>
 8003ac8:	e099      	b.n	8003bfe <HAL_RCCEx_GetPLL3ClockFreq+0x192>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003aca:	4b88      	ldr	r3, [pc, #544]	; (8003cec <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f003 0320 	and.w	r3, r3, #32
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d02d      	beq.n	8003b32 <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003ad6:	4b85      	ldr	r3, [pc, #532]	; (8003cec <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	08db      	lsrs	r3, r3, #3
 8003adc:	f003 0303 	and.w	r3, r3, #3
 8003ae0:	4a83      	ldr	r2, [pc, #524]	; (8003cf0 <HAL_RCCEx_GetPLL3ClockFreq+0x284>)
 8003ae2:	fa22 f303 	lsr.w	r3, r2, r3
 8003ae6:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003ae8:	68bb      	ldr	r3, [r7, #8]
 8003aea:	ee07 3a90 	vmov	s15, r3
 8003aee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003af2:	697b      	ldr	r3, [r7, #20]
 8003af4:	ee07 3a90 	vmov	s15, r3
 8003af8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003afc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003b00:	4b7a      	ldr	r3, [pc, #488]	; (8003cec <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8003b02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b04:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b08:	ee07 3a90 	vmov	s15, r3
 8003b0c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003b10:	ed97 6a03 	vldr	s12, [r7, #12]
 8003b14:	eddf 5a77 	vldr	s11, [pc, #476]	; 8003cf4 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8003b18:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003b1c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003b20:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003b24:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003b28:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b2c:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8003b30:	e087      	b.n	8003c42 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003b32:	697b      	ldr	r3, [r7, #20]
 8003b34:	ee07 3a90 	vmov	s15, r3
 8003b38:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b3c:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8003cf8 <HAL_RCCEx_GetPLL3ClockFreq+0x28c>
 8003b40:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003b44:	4b69      	ldr	r3, [pc, #420]	; (8003cec <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8003b46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b48:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b4c:	ee07 3a90 	vmov	s15, r3
 8003b50:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003b54:	ed97 6a03 	vldr	s12, [r7, #12]
 8003b58:	eddf 5a66 	vldr	s11, [pc, #408]	; 8003cf4 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8003b5c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003b60:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003b64:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003b68:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003b6c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b70:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003b74:	e065      	b.n	8003c42 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003b76:	697b      	ldr	r3, [r7, #20]
 8003b78:	ee07 3a90 	vmov	s15, r3
 8003b7c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b80:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8003cfc <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8003b84:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003b88:	4b58      	ldr	r3, [pc, #352]	; (8003cec <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8003b8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b8c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b90:	ee07 3a90 	vmov	s15, r3
 8003b94:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003b98:	ed97 6a03 	vldr	s12, [r7, #12]
 8003b9c:	eddf 5a55 	vldr	s11, [pc, #340]	; 8003cf4 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8003ba0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003ba4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003ba8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003bac:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003bb0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003bb4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003bb8:	e043      	b.n	8003c42 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003bba:	697b      	ldr	r3, [r7, #20]
 8003bbc:	ee07 3a90 	vmov	s15, r3
 8003bc0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003bc4:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8003d00 <HAL_RCCEx_GetPLL3ClockFreq+0x294>
 8003bc8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003bcc:	4b47      	ldr	r3, [pc, #284]	; (8003cec <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8003bce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bd0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003bd4:	ee07 3a90 	vmov	s15, r3
 8003bd8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003bdc:	ed97 6a03 	vldr	s12, [r7, #12]
 8003be0:	eddf 5a44 	vldr	s11, [pc, #272]	; 8003cf4 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8003be4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003be8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003bec:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003bf0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003bf4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003bf8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003bfc:	e021      	b.n	8003c42 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003bfe:	697b      	ldr	r3, [r7, #20]
 8003c00:	ee07 3a90 	vmov	s15, r3
 8003c04:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c08:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8003cfc <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8003c0c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003c10:	4b36      	ldr	r3, [pc, #216]	; (8003cec <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8003c12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c14:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c18:	ee07 3a90 	vmov	s15, r3
 8003c1c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003c20:	ed97 6a03 	vldr	s12, [r7, #12]
 8003c24:	eddf 5a33 	vldr	s11, [pc, #204]	; 8003cf4 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8003c28:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003c2c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003c30:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003c34:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003c38:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c3c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003c40:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8003c42:	4b2a      	ldr	r3, [pc, #168]	; (8003cec <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8003c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c46:	0a5b      	lsrs	r3, r3, #9
 8003c48:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003c4c:	ee07 3a90 	vmov	s15, r3
 8003c50:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c54:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003c58:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003c5c:	edd7 6a07 	vldr	s13, [r7, #28]
 8003c60:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003c64:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003c68:	ee17 2a90 	vmov	r2, s15
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8003c70:	4b1e      	ldr	r3, [pc, #120]	; (8003cec <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8003c72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c74:	0c1b      	lsrs	r3, r3, #16
 8003c76:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003c7a:	ee07 3a90 	vmov	s15, r3
 8003c7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c82:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003c86:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003c8a:	edd7 6a07 	vldr	s13, [r7, #28]
 8003c8e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003c92:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003c96:	ee17 2a90 	vmov	r2, s15
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8003c9e:	4b13      	ldr	r3, [pc, #76]	; (8003cec <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8003ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ca2:	0e1b      	lsrs	r3, r3, #24
 8003ca4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003ca8:	ee07 3a90 	vmov	s15, r3
 8003cac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003cb0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003cb4:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003cb8:	edd7 6a07 	vldr	s13, [r7, #28]
 8003cbc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003cc0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003cc4:	ee17 2a90 	vmov	r2, s15
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8003ccc:	e008      	b.n	8003ce0 <HAL_RCCEx_GetPLL3ClockFreq+0x274>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2200      	movs	r2, #0
 8003cd8:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	2200      	movs	r2, #0
 8003cde:	609a      	str	r2, [r3, #8]
}
 8003ce0:	bf00      	nop
 8003ce2:	3724      	adds	r7, #36	; 0x24
 8003ce4:	46bd      	mov	sp, r7
 8003ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cea:	4770      	bx	lr
 8003cec:	58024400 	.word	0x58024400
 8003cf0:	03d09000 	.word	0x03d09000
 8003cf4:	46000000 	.word	0x46000000
 8003cf8:	4c742400 	.word	0x4c742400
 8003cfc:	4a742400 	.word	0x4a742400
 8003d00:	4bbebc20 	.word	0x4bbebc20

08003d04 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 8003d04:	b480      	push	{r7}
 8003d06:	b089      	sub	sp, #36	; 0x24
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003d0c:	4b9d      	ldr	r3, [pc, #628]	; (8003f84 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8003d0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d10:	f003 0303 	and.w	r3, r3, #3
 8003d14:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 8003d16:	4b9b      	ldr	r3, [pc, #620]	; (8003f84 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8003d18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d1a:	091b      	lsrs	r3, r3, #4
 8003d1c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003d20:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8003d22:	4b98      	ldr	r3, [pc, #608]	; (8003f84 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8003d24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d26:	f003 0301 	and.w	r3, r3, #1
 8003d2a:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8003d2c:	4b95      	ldr	r3, [pc, #596]	; (8003f84 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8003d2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d30:	08db      	lsrs	r3, r3, #3
 8003d32:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003d36:	693a      	ldr	r2, [r7, #16]
 8003d38:	fb02 f303 	mul.w	r3, r2, r3
 8003d3c:	ee07 3a90 	vmov	s15, r3
 8003d40:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d44:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8003d48:	697b      	ldr	r3, [r7, #20]
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	f000 810a 	beq.w	8003f64 <HAL_RCCEx_GetPLL1ClockFreq+0x260>
  {
    switch (pllsource)
 8003d50:	69bb      	ldr	r3, [r7, #24]
 8003d52:	2b01      	cmp	r3, #1
 8003d54:	d05a      	beq.n	8003e0c <HAL_RCCEx_GetPLL1ClockFreq+0x108>
 8003d56:	2b01      	cmp	r3, #1
 8003d58:	d302      	bcc.n	8003d60 <HAL_RCCEx_GetPLL1ClockFreq+0x5c>
 8003d5a:	2b02      	cmp	r3, #2
 8003d5c:	d078      	beq.n	8003e50 <HAL_RCCEx_GetPLL1ClockFreq+0x14c>
 8003d5e:	e099      	b.n	8003e94 <HAL_RCCEx_GetPLL1ClockFreq+0x190>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003d60:	4b88      	ldr	r3, [pc, #544]	; (8003f84 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f003 0320 	and.w	r3, r3, #32
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d02d      	beq.n	8003dc8 <HAL_RCCEx_GetPLL1ClockFreq+0xc4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003d6c:	4b85      	ldr	r3, [pc, #532]	; (8003f84 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	08db      	lsrs	r3, r3, #3
 8003d72:	f003 0303 	and.w	r3, r3, #3
 8003d76:	4a84      	ldr	r2, [pc, #528]	; (8003f88 <HAL_RCCEx_GetPLL1ClockFreq+0x284>)
 8003d78:	fa22 f303 	lsr.w	r3, r2, r3
 8003d7c:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003d7e:	68bb      	ldr	r3, [r7, #8]
 8003d80:	ee07 3a90 	vmov	s15, r3
 8003d84:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003d88:	697b      	ldr	r3, [r7, #20]
 8003d8a:	ee07 3a90 	vmov	s15, r3
 8003d8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d92:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003d96:	4b7b      	ldr	r3, [pc, #492]	; (8003f84 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8003d98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d9e:	ee07 3a90 	vmov	s15, r3
 8003da2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003da6:	ed97 6a03 	vldr	s12, [r7, #12]
 8003daa:	eddf 5a78 	vldr	s11, [pc, #480]	; 8003f8c <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 8003dae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003db2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003db6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003dba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003dbe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003dc2:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8003dc6:	e087      	b.n	8003ed8 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003dc8:	697b      	ldr	r3, [r7, #20]
 8003dca:	ee07 3a90 	vmov	s15, r3
 8003dce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003dd2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8003f90 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>
 8003dd6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003dda:	4b6a      	ldr	r3, [pc, #424]	; (8003f84 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8003ddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dde:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003de2:	ee07 3a90 	vmov	s15, r3
 8003de6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003dea:	ed97 6a03 	vldr	s12, [r7, #12]
 8003dee:	eddf 5a67 	vldr	s11, [pc, #412]	; 8003f8c <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 8003df2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003df6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003dfa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003dfe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003e02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e06:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003e0a:	e065      	b.n	8003ed8 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003e0c:	697b      	ldr	r3, [r7, #20]
 8003e0e:	ee07 3a90 	vmov	s15, r3
 8003e12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e16:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8003f94 <HAL_RCCEx_GetPLL1ClockFreq+0x290>
 8003e1a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003e1e:	4b59      	ldr	r3, [pc, #356]	; (8003f84 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8003e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e26:	ee07 3a90 	vmov	s15, r3
 8003e2a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003e2e:	ed97 6a03 	vldr	s12, [r7, #12]
 8003e32:	eddf 5a56 	vldr	s11, [pc, #344]	; 8003f8c <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 8003e36:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003e3a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003e3e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003e42:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003e46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e4a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003e4e:	e043      	b.n	8003ed8 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003e50:	697b      	ldr	r3, [r7, #20]
 8003e52:	ee07 3a90 	vmov	s15, r3
 8003e56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e5a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8003f98 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8003e5e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003e62:	4b48      	ldr	r3, [pc, #288]	; (8003f84 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8003e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e6a:	ee07 3a90 	vmov	s15, r3
 8003e6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003e72:	ed97 6a03 	vldr	s12, [r7, #12]
 8003e76:	eddf 5a45 	vldr	s11, [pc, #276]	; 8003f8c <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 8003e7a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003e7e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003e82:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003e86:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003e8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e8e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003e92:	e021      	b.n	8003ed8 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>

    default:
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003e94:	697b      	ldr	r3, [r7, #20]
 8003e96:	ee07 3a90 	vmov	s15, r3
 8003e9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e9e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8003f94 <HAL_RCCEx_GetPLL1ClockFreq+0x290>
 8003ea2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003ea6:	4b37      	ldr	r3, [pc, #220]	; (8003f84 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8003ea8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eaa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003eae:	ee07 3a90 	vmov	s15, r3
 8003eb2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003eb6:	ed97 6a03 	vldr	s12, [r7, #12]
 8003eba:	eddf 5a34 	vldr	s11, [pc, #208]	; 8003f8c <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 8003ebe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003ec2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003ec6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003eca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003ece:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ed2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003ed6:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 8003ed8:	4b2a      	ldr	r3, [pc, #168]	; (8003f84 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8003eda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003edc:	0a5b      	lsrs	r3, r3, #9
 8003ede:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003ee2:	ee07 3a90 	vmov	s15, r3
 8003ee6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003eea:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003eee:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003ef2:	edd7 6a07 	vldr	s13, [r7, #28]
 8003ef6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003efa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003efe:	ee17 2a90 	vmov	r2, s15
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 8003f06:	4b1f      	ldr	r3, [pc, #124]	; (8003f84 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8003f08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f0a:	0c1b      	lsrs	r3, r3, #16
 8003f0c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003f10:	ee07 3a90 	vmov	s15, r3
 8003f14:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f18:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003f1c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003f20:	edd7 6a07 	vldr	s13, [r7, #28]
 8003f24:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003f28:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003f2c:	ee17 2a90 	vmov	r2, s15
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 8003f34:	4b13      	ldr	r3, [pc, #76]	; (8003f84 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8003f36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f38:	0e1b      	lsrs	r3, r3, #24
 8003f3a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003f3e:	ee07 3a90 	vmov	s15, r3
 8003f42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f46:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003f4a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003f4e:	edd7 6a07 	vldr	s13, [r7, #28]
 8003f52:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003f56:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003f5a:	ee17 2a90 	vmov	r2, s15
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8003f62:	e008      	b.n	8003f76 <HAL_RCCEx_GetPLL1ClockFreq+0x272>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2200      	movs	r2, #0
 8003f68:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2200      	movs	r2, #0
 8003f74:	609a      	str	r2, [r3, #8]
}
 8003f76:	bf00      	nop
 8003f78:	3724      	adds	r7, #36	; 0x24
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f80:	4770      	bx	lr
 8003f82:	bf00      	nop
 8003f84:	58024400 	.word	0x58024400
 8003f88:	03d09000 	.word	0x03d09000
 8003f8c:	46000000 	.word	0x46000000
 8003f90:	4c742400 	.word	0x4c742400
 8003f94:	4a742400 	.word	0x4a742400
 8003f98:	4bbebc20 	.word	0x4bbebc20

08003f9c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8003f9c:	b580      	push	{r7, lr}
 8003f9e:	b084      	sub	sp, #16
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	6078      	str	r0, [r7, #4]
 8003fa4:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003fa6:	2300      	movs	r3, #0
 8003fa8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003faa:	4b53      	ldr	r3, [pc, #332]	; (80040f8 <RCCEx_PLL2_Config+0x15c>)
 8003fac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fae:	f003 0303 	and.w	r3, r3, #3
 8003fb2:	2b03      	cmp	r3, #3
 8003fb4:	d101      	bne.n	8003fba <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8003fb6:	2301      	movs	r3, #1
 8003fb8:	e099      	b.n	80040ee <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8003fba:	4b4f      	ldr	r3, [pc, #316]	; (80040f8 <RCCEx_PLL2_Config+0x15c>)
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	4a4e      	ldr	r2, [pc, #312]	; (80040f8 <RCCEx_PLL2_Config+0x15c>)
 8003fc0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003fc4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003fc6:	f7fc fe1d 	bl	8000c04 <HAL_GetTick>
 8003fca:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003fcc:	e008      	b.n	8003fe0 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8003fce:	f7fc fe19 	bl	8000c04 <HAL_GetTick>
 8003fd2:	4602      	mov	r2, r0
 8003fd4:	68bb      	ldr	r3, [r7, #8]
 8003fd6:	1ad3      	subs	r3, r2, r3
 8003fd8:	2b02      	cmp	r3, #2
 8003fda:	d901      	bls.n	8003fe0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003fdc:	2303      	movs	r3, #3
 8003fde:	e086      	b.n	80040ee <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003fe0:	4b45      	ldr	r3, [pc, #276]	; (80040f8 <RCCEx_PLL2_Config+0x15c>)
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d1f0      	bne.n	8003fce <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8003fec:	4b42      	ldr	r3, [pc, #264]	; (80040f8 <RCCEx_PLL2_Config+0x15c>)
 8003fee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ff0:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	031b      	lsls	r3, r3, #12
 8003ffa:	493f      	ldr	r1, [pc, #252]	; (80040f8 <RCCEx_PLL2_Config+0x15c>)
 8003ffc:	4313      	orrs	r3, r2
 8003ffe:	628b      	str	r3, [r1, #40]	; 0x28
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	685b      	ldr	r3, [r3, #4]
 8004004:	3b01      	subs	r3, #1
 8004006:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	689b      	ldr	r3, [r3, #8]
 800400e:	3b01      	subs	r3, #1
 8004010:	025b      	lsls	r3, r3, #9
 8004012:	b29b      	uxth	r3, r3
 8004014:	431a      	orrs	r2, r3
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	68db      	ldr	r3, [r3, #12]
 800401a:	3b01      	subs	r3, #1
 800401c:	041b      	lsls	r3, r3, #16
 800401e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004022:	431a      	orrs	r2, r3
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	691b      	ldr	r3, [r3, #16]
 8004028:	3b01      	subs	r3, #1
 800402a:	061b      	lsls	r3, r3, #24
 800402c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004030:	4931      	ldr	r1, [pc, #196]	; (80040f8 <RCCEx_PLL2_Config+0x15c>)
 8004032:	4313      	orrs	r3, r2
 8004034:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004036:	4b30      	ldr	r3, [pc, #192]	; (80040f8 <RCCEx_PLL2_Config+0x15c>)
 8004038:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800403a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	695b      	ldr	r3, [r3, #20]
 8004042:	492d      	ldr	r1, [pc, #180]	; (80040f8 <RCCEx_PLL2_Config+0x15c>)
 8004044:	4313      	orrs	r3, r2
 8004046:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004048:	4b2b      	ldr	r3, [pc, #172]	; (80040f8 <RCCEx_PLL2_Config+0x15c>)
 800404a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800404c:	f023 0220 	bic.w	r2, r3, #32
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	699b      	ldr	r3, [r3, #24]
 8004054:	4928      	ldr	r1, [pc, #160]	; (80040f8 <RCCEx_PLL2_Config+0x15c>)
 8004056:	4313      	orrs	r3, r2
 8004058:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800405a:	4b27      	ldr	r3, [pc, #156]	; (80040f8 <RCCEx_PLL2_Config+0x15c>)
 800405c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800405e:	4a26      	ldr	r2, [pc, #152]	; (80040f8 <RCCEx_PLL2_Config+0x15c>)
 8004060:	f023 0310 	bic.w	r3, r3, #16
 8004064:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004066:	4b24      	ldr	r3, [pc, #144]	; (80040f8 <RCCEx_PLL2_Config+0x15c>)
 8004068:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800406a:	4b24      	ldr	r3, [pc, #144]	; (80040fc <RCCEx_PLL2_Config+0x160>)
 800406c:	4013      	ands	r3, r2
 800406e:	687a      	ldr	r2, [r7, #4]
 8004070:	69d2      	ldr	r2, [r2, #28]
 8004072:	00d2      	lsls	r2, r2, #3
 8004074:	4920      	ldr	r1, [pc, #128]	; (80040f8 <RCCEx_PLL2_Config+0x15c>)
 8004076:	4313      	orrs	r3, r2
 8004078:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800407a:	4b1f      	ldr	r3, [pc, #124]	; (80040f8 <RCCEx_PLL2_Config+0x15c>)
 800407c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800407e:	4a1e      	ldr	r2, [pc, #120]	; (80040f8 <RCCEx_PLL2_Config+0x15c>)
 8004080:	f043 0310 	orr.w	r3, r3, #16
 8004084:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8004086:	683b      	ldr	r3, [r7, #0]
 8004088:	2b00      	cmp	r3, #0
 800408a:	d106      	bne.n	800409a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800408c:	4b1a      	ldr	r3, [pc, #104]	; (80040f8 <RCCEx_PLL2_Config+0x15c>)
 800408e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004090:	4a19      	ldr	r2, [pc, #100]	; (80040f8 <RCCEx_PLL2_Config+0x15c>)
 8004092:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004096:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004098:	e00f      	b.n	80040ba <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800409a:	683b      	ldr	r3, [r7, #0]
 800409c:	2b01      	cmp	r3, #1
 800409e:	d106      	bne.n	80040ae <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80040a0:	4b15      	ldr	r3, [pc, #84]	; (80040f8 <RCCEx_PLL2_Config+0x15c>)
 80040a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040a4:	4a14      	ldr	r2, [pc, #80]	; (80040f8 <RCCEx_PLL2_Config+0x15c>)
 80040a6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80040aa:	62d3      	str	r3, [r2, #44]	; 0x2c
 80040ac:	e005      	b.n	80040ba <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80040ae:	4b12      	ldr	r3, [pc, #72]	; (80040f8 <RCCEx_PLL2_Config+0x15c>)
 80040b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040b2:	4a11      	ldr	r2, [pc, #68]	; (80040f8 <RCCEx_PLL2_Config+0x15c>)
 80040b4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80040b8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80040ba:	4b0f      	ldr	r3, [pc, #60]	; (80040f8 <RCCEx_PLL2_Config+0x15c>)
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	4a0e      	ldr	r2, [pc, #56]	; (80040f8 <RCCEx_PLL2_Config+0x15c>)
 80040c0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80040c4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80040c6:	f7fc fd9d 	bl	8000c04 <HAL_GetTick>
 80040ca:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80040cc:	e008      	b.n	80040e0 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80040ce:	f7fc fd99 	bl	8000c04 <HAL_GetTick>
 80040d2:	4602      	mov	r2, r0
 80040d4:	68bb      	ldr	r3, [r7, #8]
 80040d6:	1ad3      	subs	r3, r2, r3
 80040d8:	2b02      	cmp	r3, #2
 80040da:	d901      	bls.n	80040e0 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80040dc:	2303      	movs	r3, #3
 80040de:	e006      	b.n	80040ee <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80040e0:	4b05      	ldr	r3, [pc, #20]	; (80040f8 <RCCEx_PLL2_Config+0x15c>)
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d0f0      	beq.n	80040ce <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80040ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80040ee:	4618      	mov	r0, r3
 80040f0:	3710      	adds	r7, #16
 80040f2:	46bd      	mov	sp, r7
 80040f4:	bd80      	pop	{r7, pc}
 80040f6:	bf00      	nop
 80040f8:	58024400 	.word	0x58024400
 80040fc:	ffff0007 	.word	0xffff0007

08004100 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004100:	b580      	push	{r7, lr}
 8004102:	b084      	sub	sp, #16
 8004104:	af00      	add	r7, sp, #0
 8004106:	6078      	str	r0, [r7, #4]
 8004108:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800410a:	2300      	movs	r3, #0
 800410c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800410e:	4b53      	ldr	r3, [pc, #332]	; (800425c <RCCEx_PLL3_Config+0x15c>)
 8004110:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004112:	f003 0303 	and.w	r3, r3, #3
 8004116:	2b03      	cmp	r3, #3
 8004118:	d101      	bne.n	800411e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800411a:	2301      	movs	r3, #1
 800411c:	e099      	b.n	8004252 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800411e:	4b4f      	ldr	r3, [pc, #316]	; (800425c <RCCEx_PLL3_Config+0x15c>)
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	4a4e      	ldr	r2, [pc, #312]	; (800425c <RCCEx_PLL3_Config+0x15c>)
 8004124:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004128:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800412a:	f7fc fd6b 	bl	8000c04 <HAL_GetTick>
 800412e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004130:	e008      	b.n	8004144 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8004132:	f7fc fd67 	bl	8000c04 <HAL_GetTick>
 8004136:	4602      	mov	r2, r0
 8004138:	68bb      	ldr	r3, [r7, #8]
 800413a:	1ad3      	subs	r3, r2, r3
 800413c:	2b02      	cmp	r3, #2
 800413e:	d901      	bls.n	8004144 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004140:	2303      	movs	r3, #3
 8004142:	e086      	b.n	8004252 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004144:	4b45      	ldr	r3, [pc, #276]	; (800425c <RCCEx_PLL3_Config+0x15c>)
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800414c:	2b00      	cmp	r3, #0
 800414e:	d1f0      	bne.n	8004132 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004150:	4b42      	ldr	r3, [pc, #264]	; (800425c <RCCEx_PLL3_Config+0x15c>)
 8004152:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004154:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	051b      	lsls	r3, r3, #20
 800415e:	493f      	ldr	r1, [pc, #252]	; (800425c <RCCEx_PLL3_Config+0x15c>)
 8004160:	4313      	orrs	r3, r2
 8004162:	628b      	str	r3, [r1, #40]	; 0x28
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	685b      	ldr	r3, [r3, #4]
 8004168:	3b01      	subs	r3, #1
 800416a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	689b      	ldr	r3, [r3, #8]
 8004172:	3b01      	subs	r3, #1
 8004174:	025b      	lsls	r3, r3, #9
 8004176:	b29b      	uxth	r3, r3
 8004178:	431a      	orrs	r2, r3
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	68db      	ldr	r3, [r3, #12]
 800417e:	3b01      	subs	r3, #1
 8004180:	041b      	lsls	r3, r3, #16
 8004182:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004186:	431a      	orrs	r2, r3
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	691b      	ldr	r3, [r3, #16]
 800418c:	3b01      	subs	r3, #1
 800418e:	061b      	lsls	r3, r3, #24
 8004190:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004194:	4931      	ldr	r1, [pc, #196]	; (800425c <RCCEx_PLL3_Config+0x15c>)
 8004196:	4313      	orrs	r3, r2
 8004198:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800419a:	4b30      	ldr	r3, [pc, #192]	; (800425c <RCCEx_PLL3_Config+0x15c>)
 800419c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800419e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	695b      	ldr	r3, [r3, #20]
 80041a6:	492d      	ldr	r1, [pc, #180]	; (800425c <RCCEx_PLL3_Config+0x15c>)
 80041a8:	4313      	orrs	r3, r2
 80041aa:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80041ac:	4b2b      	ldr	r3, [pc, #172]	; (800425c <RCCEx_PLL3_Config+0x15c>)
 80041ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041b0:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	699b      	ldr	r3, [r3, #24]
 80041b8:	4928      	ldr	r1, [pc, #160]	; (800425c <RCCEx_PLL3_Config+0x15c>)
 80041ba:	4313      	orrs	r3, r2
 80041bc:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80041be:	4b27      	ldr	r3, [pc, #156]	; (800425c <RCCEx_PLL3_Config+0x15c>)
 80041c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041c2:	4a26      	ldr	r2, [pc, #152]	; (800425c <RCCEx_PLL3_Config+0x15c>)
 80041c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80041c8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80041ca:	4b24      	ldr	r3, [pc, #144]	; (800425c <RCCEx_PLL3_Config+0x15c>)
 80041cc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80041ce:	4b24      	ldr	r3, [pc, #144]	; (8004260 <RCCEx_PLL3_Config+0x160>)
 80041d0:	4013      	ands	r3, r2
 80041d2:	687a      	ldr	r2, [r7, #4]
 80041d4:	69d2      	ldr	r2, [r2, #28]
 80041d6:	00d2      	lsls	r2, r2, #3
 80041d8:	4920      	ldr	r1, [pc, #128]	; (800425c <RCCEx_PLL3_Config+0x15c>)
 80041da:	4313      	orrs	r3, r2
 80041dc:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80041de:	4b1f      	ldr	r3, [pc, #124]	; (800425c <RCCEx_PLL3_Config+0x15c>)
 80041e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041e2:	4a1e      	ldr	r2, [pc, #120]	; (800425c <RCCEx_PLL3_Config+0x15c>)
 80041e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80041e8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80041ea:	683b      	ldr	r3, [r7, #0]
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d106      	bne.n	80041fe <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80041f0:	4b1a      	ldr	r3, [pc, #104]	; (800425c <RCCEx_PLL3_Config+0x15c>)
 80041f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041f4:	4a19      	ldr	r2, [pc, #100]	; (800425c <RCCEx_PLL3_Config+0x15c>)
 80041f6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80041fa:	62d3      	str	r3, [r2, #44]	; 0x2c
 80041fc:	e00f      	b.n	800421e <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80041fe:	683b      	ldr	r3, [r7, #0]
 8004200:	2b01      	cmp	r3, #1
 8004202:	d106      	bne.n	8004212 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004204:	4b15      	ldr	r3, [pc, #84]	; (800425c <RCCEx_PLL3_Config+0x15c>)
 8004206:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004208:	4a14      	ldr	r2, [pc, #80]	; (800425c <RCCEx_PLL3_Config+0x15c>)
 800420a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800420e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004210:	e005      	b.n	800421e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8004212:	4b12      	ldr	r3, [pc, #72]	; (800425c <RCCEx_PLL3_Config+0x15c>)
 8004214:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004216:	4a11      	ldr	r2, [pc, #68]	; (800425c <RCCEx_PLL3_Config+0x15c>)
 8004218:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800421c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800421e:	4b0f      	ldr	r3, [pc, #60]	; (800425c <RCCEx_PLL3_Config+0x15c>)
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	4a0e      	ldr	r2, [pc, #56]	; (800425c <RCCEx_PLL3_Config+0x15c>)
 8004224:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004228:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800422a:	f7fc fceb 	bl	8000c04 <HAL_GetTick>
 800422e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004230:	e008      	b.n	8004244 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8004232:	f7fc fce7 	bl	8000c04 <HAL_GetTick>
 8004236:	4602      	mov	r2, r0
 8004238:	68bb      	ldr	r3, [r7, #8]
 800423a:	1ad3      	subs	r3, r2, r3
 800423c:	2b02      	cmp	r3, #2
 800423e:	d901      	bls.n	8004244 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004240:	2303      	movs	r3, #3
 8004242:	e006      	b.n	8004252 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004244:	4b05      	ldr	r3, [pc, #20]	; (800425c <RCCEx_PLL3_Config+0x15c>)
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800424c:	2b00      	cmp	r3, #0
 800424e:	d0f0      	beq.n	8004232 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8004250:	7bfb      	ldrb	r3, [r7, #15]
}
 8004252:	4618      	mov	r0, r3
 8004254:	3710      	adds	r7, #16
 8004256:	46bd      	mov	sp, r7
 8004258:	bd80      	pop	{r7, pc}
 800425a:	bf00      	nop
 800425c:	58024400 	.word	0x58024400
 8004260:	ffff0007 	.word	0xffff0007

08004264 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8004264:	b580      	push	{r7, lr}
 8004266:	b08a      	sub	sp, #40	; 0x28
 8004268:	af00      	add	r7, sp, #0
 800426a:	6078      	str	r0, [r7, #4]
  HAL_SD_CardStatusTypeDef CardStatus;
  uint32_t speedgrade, unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if(hsd == NULL)
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2b00      	cmp	r3, #0
 8004270:	d101      	bne.n	8004276 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8004272:	2301      	movs	r3, #1
 8004274:	e07c      	b.n	8004370 <HAL_SD_Init+0x10c>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800427c:	b2db      	uxtb	r3, r3
 800427e:	2b00      	cmp	r3, #0
 8004280:	d10c      	bne.n	800429c <HAL_SD_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	2200      	movs	r2, #0
 8004286:	771a      	strb	r2, [r3, #28]

#if (USE_SD_TRANSCEIVER != 0U)
    /* Force  SDMMC_TRANSCEIVER_PRESENT for Legacy usage */
    if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_UNKNOWN)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	699b      	ldr	r3, [r3, #24]
 800428c:	2b00      	cmp	r3, #0
 800428e:	d102      	bne.n	8004296 <HAL_SD_Init+0x32>
    {
      hsd->Init.TranceiverPresent = SDMMC_TRANSCEIVER_PRESENT;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	2202      	movs	r2, #2
 8004294:	619a      	str	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8004296:	6878      	ldr	r0, [r7, #4]
 8004298:	f7fc fade 	bl	8000858 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2203      	movs	r2, #3
 80042a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 80042a4:	6878      	ldr	r0, [r7, #4]
 80042a6:	f000 f867 	bl	8004378 <HAL_SD_InitCard>
 80042aa:	4603      	mov	r3, r0
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d001      	beq.n	80042b4 <HAL_SD_Init+0x50>
  {
    return HAL_ERROR;
 80042b0:	2301      	movs	r3, #1
 80042b2:	e05d      	b.n	8004370 <HAL_SD_Init+0x10c>
  }

  if( HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 80042b4:	f107 0308 	add.w	r3, r7, #8
 80042b8:	4619      	mov	r1, r3
 80042ba:	6878      	ldr	r0, [r7, #4]
 80042bc:	f000 fdbe 	bl	8004e3c <HAL_SD_GetCardStatus>
 80042c0:	4603      	mov	r3, r0
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d001      	beq.n	80042ca <HAL_SD_Init+0x66>
  {
    return HAL_ERROR;
 80042c6:	2301      	movs	r3, #1
 80042c8:	e052      	b.n	8004370 <HAL_SD_Init+0x10c>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 80042ca:	7e3b      	ldrb	r3, [r7, #24]
 80042cc:	b2db      	uxtb	r3, r3
 80042ce:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 80042d0:	7e7b      	ldrb	r3, [r7, #25]
 80042d2:	b2db      	uxtb	r3, r3
 80042d4:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042da:	2b01      	cmp	r3, #1
 80042dc:	d10a      	bne.n	80042f4 <HAL_SD_Init+0x90>
 80042de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d102      	bne.n	80042ea <HAL_SD_Init+0x86>
 80042e4:	6a3b      	ldr	r3, [r7, #32]
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d004      	beq.n	80042f4 <HAL_SD_Init+0x90>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	f44f 7200 	mov.w	r2, #512	; 0x200
 80042f0:	65da      	str	r2, [r3, #92]	; 0x5c
 80042f2:	e00b      	b.n	800430c <HAL_SD_Init+0xa8>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042f8:	2b01      	cmp	r3, #1
 80042fa:	d104      	bne.n	8004306 <HAL_SD_Init+0xa2>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004302:	65da      	str	r2, [r3, #92]	; 0x5c
 8004304:	e002      	b.n	800430c <HAL_SD_Init+0xa8>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	2200      	movs	r2, #0
 800430a:	65da      	str	r2, [r3, #92]	; 0x5c
    }

  }
  /* Configure the bus wide */
  if(HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	68db      	ldr	r3, [r3, #12]
 8004310:	4619      	mov	r1, r3
 8004312:	6878      	ldr	r0, [r7, #4]
 8004314:	f000 fe74 	bl	8005000 <HAL_SD_ConfigWideBusOperation>
 8004318:	4603      	mov	r3, r0
 800431a:	2b00      	cmp	r3, #0
 800431c:	d001      	beq.n	8004322 <HAL_SD_Init+0xbe>
  {
    return HAL_ERROR;
 800431e:	2301      	movs	r3, #1
 8004320:	e026      	b.n	8004370 <HAL_SD_Init+0x10c>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 8004322:	f7fc fc6f 	bl	8000c04 <HAL_GetTick>
 8004326:	61f8      	str	r0, [r7, #28]
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8004328:	e011      	b.n	800434e <HAL_SD_Init+0xea>
  {
    if((HAL_GetTick()-tickstart) >=  SDMMC_DATATIMEOUT)
 800432a:	f7fc fc6b 	bl	8000c04 <HAL_GetTick>
 800432e:	4602      	mov	r2, r0
 8004330:	69fb      	ldr	r3, [r7, #28]
 8004332:	1ad3      	subs	r3, r2, r3
 8004334:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004338:	d109      	bne.n	800434e <HAL_SD_Init+0xea>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004340:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State= HAL_SD_STATE_READY;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	2201      	movs	r2, #1
 8004346:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_TIMEOUT;
 800434a:	2303      	movs	r3, #3
 800434c:	e010      	b.n	8004370 <HAL_SD_Init+0x10c>
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800434e:	6878      	ldr	r0, [r7, #4]
 8004350:	f000 ff00 	bl	8005154 <HAL_SD_GetCardState>
 8004354:	4603      	mov	r3, r0
 8004356:	2b04      	cmp	r3, #4
 8004358:	d1e7      	bne.n	800432a <HAL_SD_Init+0xc6>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	2200      	movs	r2, #0
 800435e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2200      	movs	r2, #0
 8004364:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	2201      	movs	r2, #1
 800436a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800436e:	2300      	movs	r3, #0
}
 8004370:	4618      	mov	r0, r3
 8004372:	3728      	adds	r7, #40	; 0x28
 8004374:	46bd      	mov	sp, r7
 8004376:	bd80      	pop	{r7, pc}

08004378 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8004378:	b5b0      	push	{r4, r5, r7, lr}
 800437a:	b08e      	sub	sp, #56	; 0x38
 800437c:	af04      	add	r7, sp, #16
 800437e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8004380:	2300      	movs	r3, #0
 8004382:	60bb      	str	r3, [r7, #8]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8004384:	2300      	movs	r3, #0
 8004386:	60fb      	str	r3, [r7, #12]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8004388:	2300      	movs	r3, #0
 800438a:	613b      	str	r3, [r7, #16]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800438c:	2300      	movs	r3, #0
 800438e:	617b      	str	r3, [r7, #20]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 8004390:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8004394:	f7fe ff90 	bl	80032b8 <HAL_RCCEx_GetPeriphCLKFreq>
 8004398:	6278      	str	r0, [r7, #36]	; 0x24
  Init.ClockDiv = sdmmc_clk/(2U*400000U);
 800439a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800439c:	0a1b      	lsrs	r3, r3, #8
 800439e:	4a40      	ldr	r2, [pc, #256]	; (80044a0 <HAL_SD_InitCard+0x128>)
 80043a0:	fba2 2303 	umull	r2, r3, r2, r3
 80043a4:	091b      	lsrs	r3, r3, #4
 80043a6:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
  if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	699b      	ldr	r3, [r3, #24]
 80043ac:	2b02      	cmp	r3, #2
 80043ae:	d107      	bne.n	80043c0 <HAL_SD_InitCard+0x48>
  {
    /* Set Transceiver polarity */
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	681a      	ldr	r2, [r3, #0]
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f042 0210 	orr.w	r2, r2, #16
 80043be:	601a      	str	r2, [r3, #0]
    /* Set Transceiver polarity */
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681d      	ldr	r5, [r3, #0]
 80043c4:	466c      	mov	r4, sp
 80043c6:	f107 0314 	add.w	r3, r7, #20
 80043ca:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80043ce:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80043d2:	f107 0308 	add.w	r3, r7, #8
 80043d6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80043d8:	4628      	mov	r0, r5
 80043da:	f001 faff 	bl	80059dc <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	4618      	mov	r0, r3
 80043e4:	f001 fb42 	bl	8005a6c <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  sdmmc_clk = sdmmc_clk/(2U*Init.ClockDiv);
 80043e8:	69bb      	ldr	r3, [r7, #24]
 80043ea:	005b      	lsls	r3, r3, #1
 80043ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80043f2:	627b      	str	r3, [r7, #36]	; 0x24

  if(sdmmc_clk != 0U)
 80043f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d008      	beq.n	800440c <HAL_SD_InitCard+0x94>
  {
    HAL_Delay(1U+ (74U*1000U/(sdmmc_clk)));
 80043fa:	4a2a      	ldr	r2, [pc, #168]	; (80044a4 <HAL_SD_InitCard+0x12c>)
 80043fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8004402:	3301      	adds	r3, #1
 8004404:	4618      	mov	r0, r3
 8004406:	f7fc fc09 	bl	8000c1c <HAL_Delay>
 800440a:	e002      	b.n	8004412 <HAL_SD_InitCard+0x9a>
  }
  else
  {
    HAL_Delay(2U);
 800440c:	2002      	movs	r0, #2
 800440e:	f7fc fc05 	bl	8000c1c <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8004412:	6878      	ldr	r0, [r7, #4]
 8004414:	f000 ff7c 	bl	8005310 <SD_PowerON>
 8004418:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800441a:	6a3b      	ldr	r3, [r7, #32]
 800441c:	2b00      	cmp	r3, #0
 800441e:	d00b      	beq.n	8004438 <HAL_SD_InitCard+0xc0>
  {
    hsd->State = HAL_SD_STATE_READY;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	2201      	movs	r2, #1
 8004424:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800442c:	6a3b      	ldr	r3, [r7, #32]
 800442e:	431a      	orrs	r2, r3
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8004434:	2301      	movs	r3, #1
 8004436:	e02e      	b.n	8004496 <HAL_SD_InitCard+0x11e>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8004438:	6878      	ldr	r0, [r7, #4]
 800443a:	f000 feab 	bl	8005194 <SD_InitCard>
 800443e:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004440:	6a3b      	ldr	r3, [r7, #32]
 8004442:	2b00      	cmp	r3, #0
 8004444:	d00b      	beq.n	800445e <HAL_SD_InitCard+0xe6>
  {
    hsd->State = HAL_SD_STATE_READY;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	2201      	movs	r2, #1
 800444a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004452:	6a3b      	ldr	r3, [r7, #32]
 8004454:	431a      	orrs	r2, r3
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800445a:	2301      	movs	r3, #1
 800445c:	e01b      	b.n	8004496 <HAL_SD_InitCard+0x11e>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004466:	4618      	mov	r0, r3
 8004468:	f001 fb96 	bl	8005b98 <SDMMC_CmdBlockLength>
 800446c:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800446e:	6a3b      	ldr	r3, [r7, #32]
 8004470:	2b00      	cmp	r3, #0
 8004472:	d00f      	beq.n	8004494 <HAL_SD_InitCard+0x11c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	4a0b      	ldr	r2, [pc, #44]	; (80044a8 <HAL_SD_InitCard+0x130>)
 800447a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004480:	6a3b      	ldr	r3, [r7, #32]
 8004482:	431a      	orrs	r2, r3
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	2201      	movs	r2, #1
 800448c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8004490:	2301      	movs	r3, #1
 8004492:	e000      	b.n	8004496 <HAL_SD_InitCard+0x11e>
  }

  return HAL_OK;
 8004494:	2300      	movs	r3, #0
}
 8004496:	4618      	mov	r0, r3
 8004498:	3728      	adds	r7, #40	; 0x28
 800449a:	46bd      	mov	sp, r7
 800449c:	bdb0      	pop	{r4, r5, r7, pc}
 800449e:	bf00      	nop
 80044a0:	014f8b59 	.word	0x014f8b59
 80044a4:	00012110 	.word	0x00012110
 80044a8:	1fe00fff 	.word	0x1fe00fff

080044ac <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 80044ac:	b580      	push	{r7, lr}
 80044ae:	b092      	sub	sp, #72	; 0x48
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	60f8      	str	r0, [r7, #12]
 80044b4:	60b9      	str	r1, [r7, #8]
 80044b6:	607a      	str	r2, [r7, #4]
 80044b8:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80044ba:	f7fc fba3 	bl	8000c04 <HAL_GetTick>
 80044be:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 80044c4:	68bb      	ldr	r3, [r7, #8]
 80044c6:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 80044c8:	68bb      	ldr	r3, [r7, #8]
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d107      	bne.n	80044de <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044d2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80044da:	2301      	movs	r3, #1
 80044dc:	e167      	b.n	80047ae <HAL_SD_ReadBlocks+0x302>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80044e4:	b2db      	uxtb	r3, r3
 80044e6:	2b01      	cmp	r3, #1
 80044e8:	f040 815a 	bne.w	80047a0 <HAL_SD_ReadBlocks+0x2f4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	2200      	movs	r2, #0
 80044f0:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80044f2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80044f4:	683b      	ldr	r3, [r7, #0]
 80044f6:	441a      	add	r2, r3
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044fc:	429a      	cmp	r2, r3
 80044fe:	d907      	bls.n	8004510 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004504:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800450c:	2301      	movs	r3, #1
 800450e:	e14e      	b.n	80047ae <HAL_SD_ReadBlocks+0x302>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	2203      	movs	r2, #3
 8004514:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	2200      	movs	r2, #0
 800451e:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004524:	2b01      	cmp	r3, #1
 8004526:	d002      	beq.n	800452e <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 8004528:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800452a:	025b      	lsls	r3, r3, #9
 800452c:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800452e:	f04f 33ff 	mov.w	r3, #4294967295
 8004532:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8004534:	683b      	ldr	r3, [r7, #0]
 8004536:	025b      	lsls	r3, r3, #9
 8004538:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800453a:	2390      	movs	r3, #144	; 0x90
 800453c:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800453e:	2302      	movs	r3, #2
 8004540:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8004542:	2300      	movs	r3, #0
 8004544:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8004546:	2300      	movs	r3, #0
 8004548:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f107 0214 	add.w	r2, r7, #20
 8004552:	4611      	mov	r1, r2
 8004554:	4618      	mov	r0, r3
 8004556:	f001 faf3 	bl	8005b40 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	68da      	ldr	r2, [r3, #12]
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004568:	60da      	str	r2, [r3, #12]

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 800456a:	683b      	ldr	r3, [r7, #0]
 800456c:	2b01      	cmp	r3, #1
 800456e:	d90a      	bls.n	8004586 <HAL_SD_ReadBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	2202      	movs	r2, #2
 8004574:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800457c:	4618      	mov	r0, r3
 800457e:	f001 fb51 	bl	8005c24 <SDMMC_CmdReadMultiBlock>
 8004582:	6478      	str	r0, [r7, #68]	; 0x44
 8004584:	e009      	b.n	800459a <HAL_SD_ReadBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	2201      	movs	r2, #1
 800458a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004592:	4618      	mov	r0, r3
 8004594:	f001 fb23 	bl	8005bde <SDMMC_CmdReadSingleBlock>
 8004598:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800459a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800459c:	2b00      	cmp	r3, #0
 800459e:	d012      	beq.n	80045c6 <HAL_SD_ReadBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	4a84      	ldr	r2, [pc, #528]	; (80047b8 <HAL_SD_ReadBlocks+0x30c>)
 80045a6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80045ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80045ae:	431a      	orrs	r2, r3
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	2201      	movs	r2, #1
 80045b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	2200      	movs	r2, #0
 80045c0:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80045c2:	2301      	movs	r3, #1
 80045c4:	e0f3      	b.n	80047ae <HAL_SD_ReadBlocks+0x302>
    }

    /* Poll on SDMMC flags */
    dataremaining = config.DataLength;
 80045c6:	69bb      	ldr	r3, [r7, #24]
 80045c8:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 80045ca:	e058      	b.n	800467e <HAL_SD_ReadBlocks+0x1d2>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) && (dataremaining >= 32U))
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045d2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d033      	beq.n	8004642 <HAL_SD_ReadBlocks+0x196>
 80045da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80045dc:	2b1f      	cmp	r3, #31
 80045de:	d930      	bls.n	8004642 <HAL_SD_ReadBlocks+0x196>
      {
        /* Read data from SDMMC Rx FIFO */
        for(count = 0U; count < 8U; count++)
 80045e0:	2300      	movs	r3, #0
 80045e2:	643b      	str	r3, [r7, #64]	; 0x40
 80045e4:	e027      	b.n	8004636 <HAL_SD_ReadBlocks+0x18a>
        {
          data = SDMMC_ReadFIFO(hsd->Instance);
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	4618      	mov	r0, r3
 80045ec:	f001 fa20 	bl	8005a30 <SDMMC_ReadFIFO>
 80045f0:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 80045f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045f4:	b2da      	uxtb	r2, r3
 80045f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80045f8:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80045fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80045fc:	3301      	adds	r3, #1
 80045fe:	637b      	str	r3, [r7, #52]	; 0x34
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8004600:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004602:	0a1b      	lsrs	r3, r3, #8
 8004604:	b2da      	uxtb	r2, r3
 8004606:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004608:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800460a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800460c:	3301      	adds	r3, #1
 800460e:	637b      	str	r3, [r7, #52]	; 0x34
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8004610:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004612:	0c1b      	lsrs	r3, r3, #16
 8004614:	b2da      	uxtb	r2, r3
 8004616:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004618:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800461a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800461c:	3301      	adds	r3, #1
 800461e:	637b      	str	r3, [r7, #52]	; 0x34
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8004620:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004622:	0e1b      	lsrs	r3, r3, #24
 8004624:	b2da      	uxtb	r2, r3
 8004626:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004628:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800462a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800462c:	3301      	adds	r3, #1
 800462e:	637b      	str	r3, [r7, #52]	; 0x34
        for(count = 0U; count < 8U; count++)
 8004630:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004632:	3301      	adds	r3, #1
 8004634:	643b      	str	r3, [r7, #64]	; 0x40
 8004636:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004638:	2b07      	cmp	r3, #7
 800463a:	d9d4      	bls.n	80045e6 <HAL_SD_ReadBlocks+0x13a>
        }
        dataremaining -= 32U;
 800463c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800463e:	3b20      	subs	r3, #32
 8004640:	63fb      	str	r3, [r7, #60]	; 0x3c
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8004642:	f7fc fadf 	bl	8000c04 <HAL_GetTick>
 8004646:	4602      	mov	r2, r0
 8004648:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800464a:	1ad3      	subs	r3, r2, r3
 800464c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800464e:	429a      	cmp	r2, r3
 8004650:	d902      	bls.n	8004658 <HAL_SD_ReadBlocks+0x1ac>
 8004652:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004654:	2b00      	cmp	r3, #0
 8004656:	d112      	bne.n	800467e <HAL_SD_ReadBlocks+0x1d2>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	4a56      	ldr	r2, [pc, #344]	; (80047b8 <HAL_SD_ReadBlocks+0x30c>)
 800465e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004664:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	2201      	movs	r2, #1
 8004670:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	2200      	movs	r2, #0
 8004678:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 800467a:	2303      	movs	r3, #3
 800467c:	e097      	b.n	80047ae <HAL_SD_ReadBlocks+0x302>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004684:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 8004688:	2b00      	cmp	r3, #0
 800468a:	d09f      	beq.n	80045cc <HAL_SD_ReadBlocks+0x120>
      }
    }
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	68da      	ldr	r2, [r3, #12]
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800469a:	60da      	str	r2, [r3, #12]

    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d022      	beq.n	80046f0 <HAL_SD_ReadBlocks+0x244>
 80046aa:	683b      	ldr	r3, [r7, #0]
 80046ac:	2b01      	cmp	r3, #1
 80046ae:	d91f      	bls.n	80046f0 <HAL_SD_ReadBlocks+0x244>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046b4:	2b03      	cmp	r3, #3
 80046b6:	d01b      	beq.n	80046f0 <HAL_SD_ReadBlocks+0x244>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	4618      	mov	r0, r3
 80046be:	f001 fb1b 	bl	8005cf8 <SDMMC_CmdStopTransfer>
 80046c2:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 80046c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d012      	beq.n	80046f0 <HAL_SD_ReadBlocks+0x244>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	4a3a      	ldr	r2, [pc, #232]	; (80047b8 <HAL_SD_ReadBlocks+0x30c>)
 80046d0:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80046d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80046d8:	431a      	orrs	r2, r3
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	2201      	movs	r2, #1
 80046e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	2200      	movs	r2, #0
 80046ea:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 80046ec:	2301      	movs	r3, #1
 80046ee:	e05e      	b.n	80047ae <HAL_SD_ReadBlocks+0x302>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046f6:	f003 0308 	and.w	r3, r3, #8
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d012      	beq.n	8004724 <HAL_SD_ReadBlocks+0x278>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	4a2d      	ldr	r2, [pc, #180]	; (80047b8 <HAL_SD_ReadBlocks+0x30c>)
 8004704:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800470a:	f043 0208 	orr.w	r2, r3, #8
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	2201      	movs	r2, #1
 8004716:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	2200      	movs	r2, #0
 800471e:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8004720:	2301      	movs	r3, #1
 8004722:	e044      	b.n	80047ae <HAL_SD_ReadBlocks+0x302>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800472a:	f003 0302 	and.w	r3, r3, #2
 800472e:	2b00      	cmp	r3, #0
 8004730:	d012      	beq.n	8004758 <HAL_SD_ReadBlocks+0x2ac>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	4a20      	ldr	r2, [pc, #128]	; (80047b8 <HAL_SD_ReadBlocks+0x30c>)
 8004738:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800473e:	f043 0202 	orr.w	r2, r3, #2
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	2201      	movs	r2, #1
 800474a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	2200      	movs	r2, #0
 8004752:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8004754:	2301      	movs	r3, #1
 8004756:	e02a      	b.n	80047ae <HAL_SD_ReadBlocks+0x302>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800475e:	f003 0320 	and.w	r3, r3, #32
 8004762:	2b00      	cmp	r3, #0
 8004764:	d012      	beq.n	800478c <HAL_SD_ReadBlocks+0x2e0>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	4a13      	ldr	r2, [pc, #76]	; (80047b8 <HAL_SD_ReadBlocks+0x30c>)
 800476c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004772:	f043 0220 	orr.w	r2, r3, #32
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	2201      	movs	r2, #1
 800477e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	2200      	movs	r2, #0
 8004786:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8004788:	2301      	movs	r3, #1
 800478a:	e010      	b.n	80047ae <HAL_SD_ReadBlocks+0x302>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	4a0a      	ldr	r2, [pc, #40]	; (80047bc <HAL_SD_ReadBlocks+0x310>)
 8004792:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	2201      	movs	r2, #1
 8004798:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 800479c:	2300      	movs	r3, #0
 800479e:	e006      	b.n	80047ae <HAL_SD_ReadBlocks+0x302>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047a4:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80047ac:	2301      	movs	r3, #1
  }
}
 80047ae:	4618      	mov	r0, r3
 80047b0:	3748      	adds	r7, #72	; 0x48
 80047b2:	46bd      	mov	sp, r7
 80047b4:	bd80      	pop	{r7, pc}
 80047b6:	bf00      	nop
 80047b8:	1fe00fff 	.word	0x1fe00fff
 80047bc:	18000f3a 	.word	0x18000f3a

080047c0 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 80047c0:	b580      	push	{r7, lr}
 80047c2:	b092      	sub	sp, #72	; 0x48
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	60f8      	str	r0, [r7, #12]
 80047c8:	60b9      	str	r1, [r7, #8]
 80047ca:	607a      	str	r2, [r7, #4]
 80047cc:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80047ce:	f7fc fa19 	bl	8000c04 <HAL_GetTick>
 80047d2:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 80047d8:	68bb      	ldr	r3, [r7, #8]
 80047da:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 80047dc:	68bb      	ldr	r3, [r7, #8]
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d107      	bne.n	80047f2 <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047e6:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80047ee:	2301      	movs	r3, #1
 80047f0:	e16b      	b.n	8004aca <HAL_SD_WriteBlocks+0x30a>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80047f8:	b2db      	uxtb	r3, r3
 80047fa:	2b01      	cmp	r3, #1
 80047fc:	f040 815e 	bne.w	8004abc <HAL_SD_WriteBlocks+0x2fc>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	2200      	movs	r2, #0
 8004804:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8004806:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004808:	683b      	ldr	r3, [r7, #0]
 800480a:	441a      	add	r2, r3
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004810:	429a      	cmp	r2, r3
 8004812:	d907      	bls.n	8004824 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004818:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8004820:	2301      	movs	r3, #1
 8004822:	e152      	b.n	8004aca <HAL_SD_WriteBlocks+0x30a>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	2203      	movs	r2, #3
 8004828:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	2200      	movs	r2, #0
 8004832:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004838:	2b01      	cmp	r3, #1
 800483a:	d002      	beq.n	8004842 <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 800483c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800483e:	025b      	lsls	r3, r3, #9
 8004840:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8004842:	f04f 33ff 	mov.w	r3, #4294967295
 8004846:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8004848:	683b      	ldr	r3, [r7, #0]
 800484a:	025b      	lsls	r3, r3, #9
 800484c:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800484e:	2390      	movs	r3, #144	; 0x90
 8004850:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8004852:	2300      	movs	r3, #0
 8004854:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8004856:	2300      	movs	r3, #0
 8004858:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800485a:	2300      	movs	r3, #0
 800485c:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f107 0218 	add.w	r2, r7, #24
 8004866:	4611      	mov	r1, r2
 8004868:	4618      	mov	r0, r3
 800486a:	f001 f969 	bl	8005b40 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	68da      	ldr	r2, [r3, #12]
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800487c:	60da      	str	r2, [r3, #12]

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800487e:	683b      	ldr	r3, [r7, #0]
 8004880:	2b01      	cmp	r3, #1
 8004882:	d90a      	bls.n	800489a <HAL_SD_WriteBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	2220      	movs	r2, #32
 8004888:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004890:	4618      	mov	r0, r3
 8004892:	f001 fa0d 	bl	8005cb0 <SDMMC_CmdWriteMultiBlock>
 8004896:	6478      	str	r0, [r7, #68]	; 0x44
 8004898:	e009      	b.n	80048ae <HAL_SD_WriteBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	2210      	movs	r2, #16
 800489e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80048a6:	4618      	mov	r0, r3
 80048a8:	f001 f9df 	bl	8005c6a <SDMMC_CmdWriteSingleBlock>
 80048ac:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 80048ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d012      	beq.n	80048da <HAL_SD_WriteBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	4a86      	ldr	r2, [pc, #536]	; (8004ad4 <HAL_SD_WriteBlocks+0x314>)
 80048ba:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80048c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80048c2:	431a      	orrs	r2, r3
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	2201      	movs	r2, #1
 80048cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	2200      	movs	r2, #0
 80048d4:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80048d6:	2301      	movs	r3, #1
 80048d8:	e0f7      	b.n	8004aca <HAL_SD_WriteBlocks+0x30a>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 80048da:	69fb      	ldr	r3, [r7, #28]
 80048dc:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 80048de:	e05c      	b.n	800499a <HAL_SD_WriteBlocks+0x1da>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) && (dataremaining >= 32U))
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d037      	beq.n	800495e <HAL_SD_WriteBlocks+0x19e>
 80048ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80048f0:	2b1f      	cmp	r3, #31
 80048f2:	d934      	bls.n	800495e <HAL_SD_WriteBlocks+0x19e>
      {
        /* Write data to SDMMC Tx FIFO */
        for(count = 0U; count < 8U; count++)
 80048f4:	2300      	movs	r3, #0
 80048f6:	643b      	str	r3, [r7, #64]	; 0x40
 80048f8:	e02b      	b.n	8004952 <HAL_SD_WriteBlocks+0x192>
        {
          data = (uint32_t)(*tempbuff);
 80048fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048fc:	781b      	ldrb	r3, [r3, #0]
 80048fe:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8004900:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004902:	3301      	adds	r3, #1
 8004904:	637b      	str	r3, [r7, #52]	; 0x34
          data |= ((uint32_t)(*tempbuff) << 8U);
 8004906:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004908:	781b      	ldrb	r3, [r3, #0]
 800490a:	021a      	lsls	r2, r3, #8
 800490c:	697b      	ldr	r3, [r7, #20]
 800490e:	4313      	orrs	r3, r2
 8004910:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8004912:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004914:	3301      	adds	r3, #1
 8004916:	637b      	str	r3, [r7, #52]	; 0x34
          data |= ((uint32_t)(*tempbuff) << 16U);
 8004918:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800491a:	781b      	ldrb	r3, [r3, #0]
 800491c:	041a      	lsls	r2, r3, #16
 800491e:	697b      	ldr	r3, [r7, #20]
 8004920:	4313      	orrs	r3, r2
 8004922:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8004924:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004926:	3301      	adds	r3, #1
 8004928:	637b      	str	r3, [r7, #52]	; 0x34
          data |= ((uint32_t)(*tempbuff) << 24U);
 800492a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800492c:	781b      	ldrb	r3, [r3, #0]
 800492e:	061a      	lsls	r2, r3, #24
 8004930:	697b      	ldr	r3, [r7, #20]
 8004932:	4313      	orrs	r3, r2
 8004934:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8004936:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004938:	3301      	adds	r3, #1
 800493a:	637b      	str	r3, [r7, #52]	; 0x34
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	f107 0214 	add.w	r2, r7, #20
 8004944:	4611      	mov	r1, r2
 8004946:	4618      	mov	r0, r3
 8004948:	f001 f87f 	bl	8005a4a <SDMMC_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 800494c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800494e:	3301      	adds	r3, #1
 8004950:	643b      	str	r3, [r7, #64]	; 0x40
 8004952:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004954:	2b07      	cmp	r3, #7
 8004956:	d9d0      	bls.n	80048fa <HAL_SD_WriteBlocks+0x13a>
        }
        dataremaining -= 32U;
 8004958:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800495a:	3b20      	subs	r3, #32
 800495c:	63fb      	str	r3, [r7, #60]	; 0x3c
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800495e:	f7fc f951 	bl	8000c04 <HAL_GetTick>
 8004962:	4602      	mov	r2, r0
 8004964:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004966:	1ad3      	subs	r3, r2, r3
 8004968:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800496a:	429a      	cmp	r2, r3
 800496c:	d902      	bls.n	8004974 <HAL_SD_WriteBlocks+0x1b4>
 800496e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004970:	2b00      	cmp	r3, #0
 8004972:	d112      	bne.n	800499a <HAL_SD_WriteBlocks+0x1da>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	4a56      	ldr	r2, [pc, #344]	; (8004ad4 <HAL_SD_WriteBlocks+0x314>)
 800497a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004980:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004982:	431a      	orrs	r2, r3
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	2201      	movs	r2, #1
 800498c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	2200      	movs	r2, #0
 8004994:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8004996:	2303      	movs	r3, #3
 8004998:	e097      	b.n	8004aca <HAL_SD_WriteBlocks+0x30a>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049a0:	f403 738d 	and.w	r3, r3, #282	; 0x11a
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d09b      	beq.n	80048e0 <HAL_SD_WriteBlocks+0x120>
      }
    }
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	68da      	ldr	r2, [r3, #12]
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80049b6:	60da      	str	r2, [r3, #12]

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d022      	beq.n	8004a0c <HAL_SD_WriteBlocks+0x24c>
 80049c6:	683b      	ldr	r3, [r7, #0]
 80049c8:	2b01      	cmp	r3, #1
 80049ca:	d91f      	bls.n	8004a0c <HAL_SD_WriteBlocks+0x24c>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049d0:	2b03      	cmp	r3, #3
 80049d2:	d01b      	beq.n	8004a0c <HAL_SD_WriteBlocks+0x24c>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	4618      	mov	r0, r3
 80049da:	f001 f98d 	bl	8005cf8 <SDMMC_CmdStopTransfer>
 80049de:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 80049e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d012      	beq.n	8004a0c <HAL_SD_WriteBlocks+0x24c>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	4a3a      	ldr	r2, [pc, #232]	; (8004ad4 <HAL_SD_WriteBlocks+0x314>)
 80049ec:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80049f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80049f4:	431a      	orrs	r2, r3
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	2201      	movs	r2, #1
 80049fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	2200      	movs	r2, #0
 8004a06:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8004a08:	2301      	movs	r3, #1
 8004a0a:	e05e      	b.n	8004aca <HAL_SD_WriteBlocks+0x30a>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a12:	f003 0308 	and.w	r3, r3, #8
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d012      	beq.n	8004a40 <HAL_SD_WriteBlocks+0x280>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	4a2d      	ldr	r2, [pc, #180]	; (8004ad4 <HAL_SD_WriteBlocks+0x314>)
 8004a20:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a26:	f043 0208 	orr.w	r2, r3, #8
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	2201      	movs	r2, #1
 8004a32:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	2200      	movs	r2, #0
 8004a3a:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8004a3c:	2301      	movs	r3, #1
 8004a3e:	e044      	b.n	8004aca <HAL_SD_WriteBlocks+0x30a>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a46:	f003 0302 	and.w	r3, r3, #2
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d012      	beq.n	8004a74 <HAL_SD_WriteBlocks+0x2b4>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	4a20      	ldr	r2, [pc, #128]	; (8004ad4 <HAL_SD_WriteBlocks+0x314>)
 8004a54:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a5a:	f043 0202 	orr.w	r2, r3, #2
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	2201      	movs	r2, #1
 8004a66:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	2200      	movs	r2, #0
 8004a6e:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8004a70:	2301      	movs	r3, #1
 8004a72:	e02a      	b.n	8004aca <HAL_SD_WriteBlocks+0x30a>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a7a:	f003 0310 	and.w	r3, r3, #16
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d012      	beq.n	8004aa8 <HAL_SD_WriteBlocks+0x2e8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	4a13      	ldr	r2, [pc, #76]	; (8004ad4 <HAL_SD_WriteBlocks+0x314>)
 8004a88:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a8e:	f043 0210 	orr.w	r2, r3, #16
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	2201      	movs	r2, #1
 8004a9a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	2200      	movs	r2, #0
 8004aa2:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8004aa4:	2301      	movs	r3, #1
 8004aa6:	e010      	b.n	8004aca <HAL_SD_WriteBlocks+0x30a>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	4a0a      	ldr	r2, [pc, #40]	; (8004ad8 <HAL_SD_WriteBlocks+0x318>)
 8004aae:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	2201      	movs	r2, #1
 8004ab4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8004ab8:	2300      	movs	r3, #0
 8004aba:	e006      	b.n	8004aca <HAL_SD_WriteBlocks+0x30a>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ac0:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8004ac8:	2301      	movs	r3, #1
  }
}
 8004aca:	4618      	mov	r0, r3
 8004acc:	3748      	adds	r7, #72	; 0x48
 8004ace:	46bd      	mov	sp, r7
 8004ad0:	bd80      	pop	{r7, pc}
 8004ad2:	bf00      	nop
 8004ad4:	1fe00fff 	.word	0x1fe00fff
 8004ad8:	18000f3a 	.word	0x18000f3a

08004adc <HAL_SD_DriveTransceiver_1_8V_Callback>:
  * @brief  Enable/Disable the SD Transceiver 1.8V Mode Callback.
  * @param  status: Voltage Switch State
  * @retval None
  */
__weak  void HAL_SD_DriveTransceiver_1_8V_Callback(FlagStatus status)
{
 8004adc:	b480      	push	{r7}
 8004ade:	b083      	sub	sp, #12
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	4603      	mov	r3, r0
 8004ae4:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(status);
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_EnableTransceiver could be implemented in the user file
   */
}
 8004ae6:	bf00      	nop
 8004ae8:	370c      	adds	r7, #12
 8004aea:	46bd      	mov	sp, r7
 8004aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af0:	4770      	bx	lr
	...

08004af4 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8004af4:	b480      	push	{r7}
 8004af6:	b083      	sub	sp, #12
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	6078      	str	r0, [r7, #4]
 8004afc:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b02:	0f9b      	lsrs	r3, r3, #30
 8004b04:	b2da      	uxtb	r2, r3
 8004b06:	683b      	ldr	r3, [r7, #0]
 8004b08:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b0e:	0e9b      	lsrs	r3, r3, #26
 8004b10:	b2db      	uxtb	r3, r3
 8004b12:	f003 030f 	and.w	r3, r3, #15
 8004b16:	b2da      	uxtb	r2, r3
 8004b18:	683b      	ldr	r3, [r7, #0]
 8004b1a:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b20:	0e1b      	lsrs	r3, r3, #24
 8004b22:	b2db      	uxtb	r3, r3
 8004b24:	f003 0303 	and.w	r3, r3, #3
 8004b28:	b2da      	uxtb	r2, r3
 8004b2a:	683b      	ldr	r3, [r7, #0]
 8004b2c:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b32:	0c1b      	lsrs	r3, r3, #16
 8004b34:	b2da      	uxtb	r2, r3
 8004b36:	683b      	ldr	r3, [r7, #0]
 8004b38:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b3e:	0a1b      	lsrs	r3, r3, #8
 8004b40:	b2da      	uxtb	r2, r3
 8004b42:	683b      	ldr	r3, [r7, #0]
 8004b44:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b4a:	b2da      	uxtb	r2, r3
 8004b4c:	683b      	ldr	r3, [r7, #0]
 8004b4e:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004b54:	0d1b      	lsrs	r3, r3, #20
 8004b56:	b29a      	uxth	r2, r3
 8004b58:	683b      	ldr	r3, [r7, #0]
 8004b5a:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004b60:	0c1b      	lsrs	r3, r3, #16
 8004b62:	b2db      	uxtb	r3, r3
 8004b64:	f003 030f 	and.w	r3, r3, #15
 8004b68:	b2da      	uxtb	r2, r3
 8004b6a:	683b      	ldr	r3, [r7, #0]
 8004b6c:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004b72:	0bdb      	lsrs	r3, r3, #15
 8004b74:	b2db      	uxtb	r3, r3
 8004b76:	f003 0301 	and.w	r3, r3, #1
 8004b7a:	b2da      	uxtb	r2, r3
 8004b7c:	683b      	ldr	r3, [r7, #0]
 8004b7e:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004b84:	0b9b      	lsrs	r3, r3, #14
 8004b86:	b2db      	uxtb	r3, r3
 8004b88:	f003 0301 	and.w	r3, r3, #1
 8004b8c:	b2da      	uxtb	r2, r3
 8004b8e:	683b      	ldr	r3, [r7, #0]
 8004b90:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004b96:	0b5b      	lsrs	r3, r3, #13
 8004b98:	b2db      	uxtb	r3, r3
 8004b9a:	f003 0301 	and.w	r3, r3, #1
 8004b9e:	b2da      	uxtb	r2, r3
 8004ba0:	683b      	ldr	r3, [r7, #0]
 8004ba2:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004ba8:	0b1b      	lsrs	r3, r3, #12
 8004baa:	b2db      	uxtb	r3, r3
 8004bac:	f003 0301 	and.w	r3, r3, #1
 8004bb0:	b2da      	uxtb	r2, r3
 8004bb2:	683b      	ldr	r3, [r7, #0]
 8004bb4:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8004bb6:	683b      	ldr	r3, [r7, #0]
 8004bb8:	2200      	movs	r2, #0
 8004bba:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d163      	bne.n	8004c8c <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004bc8:	009a      	lsls	r2, r3, #2
 8004bca:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004bce:	4013      	ands	r3, r2
 8004bd0:	687a      	ldr	r2, [r7, #4]
 8004bd2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8004bd4:	0f92      	lsrs	r2, r2, #30
 8004bd6:	431a      	orrs	r2, r3
 8004bd8:	683b      	ldr	r3, [r7, #0]
 8004bda:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004be0:	0edb      	lsrs	r3, r3, #27
 8004be2:	b2db      	uxtb	r3, r3
 8004be4:	f003 0307 	and.w	r3, r3, #7
 8004be8:	b2da      	uxtb	r2, r3
 8004bea:	683b      	ldr	r3, [r7, #0]
 8004bec:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004bf2:	0e1b      	lsrs	r3, r3, #24
 8004bf4:	b2db      	uxtb	r3, r3
 8004bf6:	f003 0307 	and.w	r3, r3, #7
 8004bfa:	b2da      	uxtb	r2, r3
 8004bfc:	683b      	ldr	r3, [r7, #0]
 8004bfe:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004c04:	0d5b      	lsrs	r3, r3, #21
 8004c06:	b2db      	uxtb	r3, r3
 8004c08:	f003 0307 	and.w	r3, r3, #7
 8004c0c:	b2da      	uxtb	r2, r3
 8004c0e:	683b      	ldr	r3, [r7, #0]
 8004c10:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004c16:	0c9b      	lsrs	r3, r3, #18
 8004c18:	b2db      	uxtb	r3, r3
 8004c1a:	f003 0307 	and.w	r3, r3, #7
 8004c1e:	b2da      	uxtb	r2, r3
 8004c20:	683b      	ldr	r3, [r7, #0]
 8004c22:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004c28:	0bdb      	lsrs	r3, r3, #15
 8004c2a:	b2db      	uxtb	r3, r3
 8004c2c:	f003 0307 	and.w	r3, r3, #7
 8004c30:	b2da      	uxtb	r2, r3
 8004c32:	683b      	ldr	r3, [r7, #0]
 8004c34:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8004c36:	683b      	ldr	r3, [r7, #0]
 8004c38:	691b      	ldr	r3, [r3, #16]
 8004c3a:	1c5a      	adds	r2, r3, #1
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8004c40:	683b      	ldr	r3, [r7, #0]
 8004c42:	7e1b      	ldrb	r3, [r3, #24]
 8004c44:	b2db      	uxtb	r3, r3
 8004c46:	f003 0307 	and.w	r3, r3, #7
 8004c4a:	3302      	adds	r3, #2
 8004c4c:	2201      	movs	r2, #1
 8004c4e:	fa02 f303 	lsl.w	r3, r2, r3
 8004c52:	687a      	ldr	r2, [r7, #4]
 8004c54:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8004c56:	fb02 f203 	mul.w	r2, r2, r3
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8004c5e:	683b      	ldr	r3, [r7, #0]
 8004c60:	7a1b      	ldrb	r3, [r3, #8]
 8004c62:	b2db      	uxtb	r3, r3
 8004c64:	f003 030f 	and.w	r3, r3, #15
 8004c68:	2201      	movs	r2, #1
 8004c6a:	409a      	lsls	r2, r3
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	651a      	str	r2, [r3, #80]	; 0x50

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c74:	687a      	ldr	r2, [r7, #4]
 8004c76:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004c78:	0a52      	lsrs	r2, r2, #9
 8004c7a:	fb02 f203 	mul.w	r2, r2, r3
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockSize = 512U;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004c88:	659a      	str	r2, [r3, #88]	; 0x58
 8004c8a:	e031      	b.n	8004cf0 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c90:	2b01      	cmp	r3, #1
 8004c92:	d11d      	bne.n	8004cd0 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004c98:	041b      	lsls	r3, r3, #16
 8004c9a:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004ca2:	0c1b      	lsrs	r3, r3, #16
 8004ca4:	431a      	orrs	r2, r3
 8004ca6:	683b      	ldr	r3, [r7, #0]
 8004ca8:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8004caa:	683b      	ldr	r3, [r7, #0]
 8004cac:	691b      	ldr	r3, [r3, #16]
 8004cae:	3301      	adds	r3, #1
 8004cb0:	029a      	lsls	r2, r3, #10
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = 512U;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004cc4:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	659a      	str	r2, [r3, #88]	; 0x58
 8004cce:	e00f      	b.n	8004cf0 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	4a58      	ldr	r2, [pc, #352]	; (8004e38 <HAL_SD_GetCardCSD+0x344>)
 8004cd6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cdc:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	2201      	movs	r2, #1
 8004ce8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8004cec:	2301      	movs	r3, #1
 8004cee:	e09d      	b.n	8004e2c <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004cf4:	0b9b      	lsrs	r3, r3, #14
 8004cf6:	b2db      	uxtb	r3, r3
 8004cf8:	f003 0301 	and.w	r3, r3, #1
 8004cfc:	b2da      	uxtb	r2, r3
 8004cfe:	683b      	ldr	r3, [r7, #0]
 8004d00:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004d06:	09db      	lsrs	r3, r3, #7
 8004d08:	b2db      	uxtb	r3, r3
 8004d0a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004d0e:	b2da      	uxtb	r2, r3
 8004d10:	683b      	ldr	r3, [r7, #0]
 8004d12:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004d18:	b2db      	uxtb	r3, r3
 8004d1a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004d1e:	b2da      	uxtb	r2, r3
 8004d20:	683b      	ldr	r3, [r7, #0]
 8004d22:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004d28:	0fdb      	lsrs	r3, r3, #31
 8004d2a:	b2da      	uxtb	r2, r3
 8004d2c:	683b      	ldr	r3, [r7, #0]
 8004d2e:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004d34:	0f5b      	lsrs	r3, r3, #29
 8004d36:	b2db      	uxtb	r3, r3
 8004d38:	f003 0303 	and.w	r3, r3, #3
 8004d3c:	b2da      	uxtb	r2, r3
 8004d3e:	683b      	ldr	r3, [r7, #0]
 8004d40:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004d46:	0e9b      	lsrs	r3, r3, #26
 8004d48:	b2db      	uxtb	r3, r3
 8004d4a:	f003 0307 	and.w	r3, r3, #7
 8004d4e:	b2da      	uxtb	r2, r3
 8004d50:	683b      	ldr	r3, [r7, #0]
 8004d52:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004d58:	0d9b      	lsrs	r3, r3, #22
 8004d5a:	b2db      	uxtb	r3, r3
 8004d5c:	f003 030f 	and.w	r3, r3, #15
 8004d60:	b2da      	uxtb	r2, r3
 8004d62:	683b      	ldr	r3, [r7, #0]
 8004d64:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004d6a:	0d5b      	lsrs	r3, r3, #21
 8004d6c:	b2db      	uxtb	r3, r3
 8004d6e:	f003 0301 	and.w	r3, r3, #1
 8004d72:	b2da      	uxtb	r2, r3
 8004d74:	683b      	ldr	r3, [r7, #0]
 8004d76:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8004d7a:	683b      	ldr	r3, [r7, #0]
 8004d7c:	2200      	movs	r2, #0
 8004d7e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004d86:	0c1b      	lsrs	r3, r3, #16
 8004d88:	b2db      	uxtb	r3, r3
 8004d8a:	f003 0301 	and.w	r3, r3, #1
 8004d8e:	b2da      	uxtb	r2, r3
 8004d90:	683b      	ldr	r3, [r7, #0]
 8004d92:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004d9a:	0bdb      	lsrs	r3, r3, #15
 8004d9c:	b2db      	uxtb	r3, r3
 8004d9e:	f003 0301 	and.w	r3, r3, #1
 8004da2:	b2da      	uxtb	r2, r3
 8004da4:	683b      	ldr	r3, [r7, #0]
 8004da6:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004dae:	0b9b      	lsrs	r3, r3, #14
 8004db0:	b2db      	uxtb	r3, r3
 8004db2:	f003 0301 	and.w	r3, r3, #1
 8004db6:	b2da      	uxtb	r2, r3
 8004db8:	683b      	ldr	r3, [r7, #0]
 8004dba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004dc2:	0b5b      	lsrs	r3, r3, #13
 8004dc4:	b2db      	uxtb	r3, r3
 8004dc6:	f003 0301 	and.w	r3, r3, #1
 8004dca:	b2da      	uxtb	r2, r3
 8004dcc:	683b      	ldr	r3, [r7, #0]
 8004dce:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004dd6:	0b1b      	lsrs	r3, r3, #12
 8004dd8:	b2db      	uxtb	r3, r3
 8004dda:	f003 0301 	and.w	r3, r3, #1
 8004dde:	b2da      	uxtb	r2, r3
 8004de0:	683b      	ldr	r3, [r7, #0]
 8004de2:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004dea:	0a9b      	lsrs	r3, r3, #10
 8004dec:	b2db      	uxtb	r3, r3
 8004dee:	f003 0303 	and.w	r3, r3, #3
 8004df2:	b2da      	uxtb	r2, r3
 8004df4:	683b      	ldr	r3, [r7, #0]
 8004df6:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004dfe:	0a1b      	lsrs	r3, r3, #8
 8004e00:	b2db      	uxtb	r3, r3
 8004e02:	f003 0303 	and.w	r3, r3, #3
 8004e06:	b2da      	uxtb	r2, r3
 8004e08:	683b      	ldr	r3, [r7, #0]
 8004e0a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004e12:	085b      	lsrs	r3, r3, #1
 8004e14:	b2db      	uxtb	r3, r3
 8004e16:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004e1a:	b2da      	uxtb	r2, r3
 8004e1c:	683b      	ldr	r3, [r7, #0]
 8004e1e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8004e22:	683b      	ldr	r3, [r7, #0]
 8004e24:	2201      	movs	r2, #1
 8004e26:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8004e2a:	2300      	movs	r3, #0
}
 8004e2c:	4618      	mov	r0, r3
 8004e2e:	370c      	adds	r7, #12
 8004e30:	46bd      	mov	sp, r7
 8004e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e36:	4770      	bx	lr
 8004e38:	1fe00fff 	.word	0x1fe00fff

08004e3c <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 8004e3c:	b580      	push	{r7, lr}
 8004e3e:	b094      	sub	sp, #80	; 0x50
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	6078      	str	r0, [r7, #4]
 8004e44:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8004e46:	2300      	movs	r3, #0
 8004e48:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  errorstate = SD_SendSDStatus(hsd, sd_status);
 8004e4c:	f107 0308 	add.w	r3, r7, #8
 8004e50:	4619      	mov	r1, r3
 8004e52:	6878      	ldr	r0, [r7, #4]
 8004e54:	f000 fb64 	bl	8005520 <SD_SendSDStatus>
 8004e58:	64b8      	str	r0, [r7, #72]	; 0x48
  if(errorstate != HAL_SD_ERROR_NONE)
 8004e5a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d011      	beq.n	8004e84 <HAL_SD_GetCardStatus+0x48>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	4a4f      	ldr	r2, [pc, #316]	; (8004fa4 <HAL_SD_GetCardStatus+0x168>)
 8004e66:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004e6c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004e6e:	431a      	orrs	r2, r3
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	2201      	movs	r2, #1
 8004e78:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 8004e7c:	2301      	movs	r3, #1
 8004e7e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8004e82:	e070      	b.n	8004f66 <HAL_SD_GetCardStatus+0x12a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 8004e84:	68bb      	ldr	r3, [r7, #8]
 8004e86:	099b      	lsrs	r3, r3, #6
 8004e88:	b2db      	uxtb	r3, r3
 8004e8a:	f003 0303 	and.w	r3, r3, #3
 8004e8e:	b2da      	uxtb	r2, r3
 8004e90:	683b      	ldr	r3, [r7, #0]
 8004e92:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 8004e94:	68bb      	ldr	r3, [r7, #8]
 8004e96:	095b      	lsrs	r3, r3, #5
 8004e98:	b2db      	uxtb	r3, r3
 8004e9a:	f003 0301 	and.w	r3, r3, #1
 8004e9e:	b2da      	uxtb	r2, r3
 8004ea0:	683b      	ldr	r3, [r7, #0]
 8004ea2:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 8004ea4:	68bb      	ldr	r3, [r7, #8]
 8004ea6:	0a1b      	lsrs	r3, r3, #8
 8004ea8:	b29b      	uxth	r3, r3
 8004eaa:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004eae:	b29a      	uxth	r2, r3
 8004eb0:	68bb      	ldr	r3, [r7, #8]
 8004eb2:	0e1b      	lsrs	r3, r3, #24
 8004eb4:	b29b      	uxth	r3, r3
 8004eb6:	4313      	orrs	r3, r2
 8004eb8:	b29a      	uxth	r2, r3
 8004eba:	683b      	ldr	r3, [r7, #0]
 8004ebc:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	061a      	lsls	r2, r3, #24
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	021b      	lsls	r3, r3, #8
 8004ec6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004eca:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	0a1b      	lsrs	r3, r3, #8
 8004ed0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8004ed4:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	0e1b      	lsrs	r3, r3, #24
 8004eda:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8004edc:	683b      	ldr	r3, [r7, #0]
 8004ede:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 8004ee0:	693b      	ldr	r3, [r7, #16]
 8004ee2:	b2da      	uxtb	r2, r3
 8004ee4:	683b      	ldr	r3, [r7, #0]
 8004ee6:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 8004ee8:	693b      	ldr	r3, [r7, #16]
 8004eea:	0a1b      	lsrs	r3, r3, #8
 8004eec:	b2da      	uxtb	r2, r3
 8004eee:	683b      	ldr	r3, [r7, #0]
 8004ef0:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 8004ef2:	693b      	ldr	r3, [r7, #16]
 8004ef4:	0d1b      	lsrs	r3, r3, #20
 8004ef6:	b2db      	uxtb	r3, r3
 8004ef8:	f003 030f 	and.w	r3, r3, #15
 8004efc:	b2da      	uxtb	r2, r3
 8004efe:	683b      	ldr	r3, [r7, #0]
 8004f00:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 8004f02:	693b      	ldr	r3, [r7, #16]
 8004f04:	0c1b      	lsrs	r3, r3, #16
 8004f06:	b29b      	uxth	r3, r3
 8004f08:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004f0c:	b29a      	uxth	r2, r3
 8004f0e:	697b      	ldr	r3, [r7, #20]
 8004f10:	b29b      	uxth	r3, r3
 8004f12:	b2db      	uxtb	r3, r3
 8004f14:	b29b      	uxth	r3, r3
 8004f16:	4313      	orrs	r3, r2
 8004f18:	b29a      	uxth	r2, r3
 8004f1a:	683b      	ldr	r3, [r7, #0]
 8004f1c:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 8004f1e:	697b      	ldr	r3, [r7, #20]
 8004f20:	0a9b      	lsrs	r3, r3, #10
 8004f22:	b2db      	uxtb	r3, r3
 8004f24:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004f28:	b2da      	uxtb	r2, r3
 8004f2a:	683b      	ldr	r3, [r7, #0]
 8004f2c:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 8004f2e:	697b      	ldr	r3, [r7, #20]
 8004f30:	0a1b      	lsrs	r3, r3, #8
 8004f32:	b2db      	uxtb	r3, r3
 8004f34:	f003 0303 	and.w	r3, r3, #3
 8004f38:	b2da      	uxtb	r2, r3
 8004f3a:	683b      	ldr	r3, [r7, #0]
 8004f3c:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 8004f3e:	697b      	ldr	r3, [r7, #20]
 8004f40:	091b      	lsrs	r3, r3, #4
 8004f42:	b2db      	uxtb	r3, r3
 8004f44:	f003 030f 	and.w	r3, r3, #15
 8004f48:	b2da      	uxtb	r2, r3
 8004f4a:	683b      	ldr	r3, [r7, #0]
 8004f4c:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 8004f4e:	697b      	ldr	r3, [r7, #20]
 8004f50:	b2db      	uxtb	r3, r3
 8004f52:	f003 030f 	and.w	r3, r3, #15
 8004f56:	b2da      	uxtb	r2, r3
 8004f58:	683b      	ldr	r3, [r7, #0]
 8004f5a:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 8004f5c:	69bb      	ldr	r3, [r7, #24]
 8004f5e:	0e1b      	lsrs	r3, r3, #24
 8004f60:	b2da      	uxtb	r2, r3
 8004f62:	683b      	ldr	r3, [r7, #0]
 8004f64:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004f6e:	4618      	mov	r0, r3
 8004f70:	f000 fe12 	bl	8005b98 <SDMMC_CmdBlockLength>
 8004f74:	64b8      	str	r0, [r7, #72]	; 0x48
  if(errorstate != HAL_SD_ERROR_NONE)
 8004f76:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d00d      	beq.n	8004f98 <HAL_SD_GetCardStatus+0x15c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	4a08      	ldr	r2, [pc, #32]	; (8004fa4 <HAL_SD_GetCardStatus+0x168>)
 8004f82:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004f88:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	2201      	movs	r2, #1
 8004f8e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 8004f92:	2301      	movs	r3, #1
 8004f94:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }

  return status;
 8004f98:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 8004f9c:	4618      	mov	r0, r3
 8004f9e:	3750      	adds	r7, #80	; 0x50
 8004fa0:	46bd      	mov	sp, r7
 8004fa2:	bd80      	pop	{r7, pc}
 8004fa4:	1fe00fff 	.word	0x1fe00fff

08004fa8 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8004fa8:	b480      	push	{r7}
 8004faa:	b083      	sub	sp, #12
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	6078      	str	r0, [r7, #4]
 8004fb0:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004fb6:	683b      	ldr	r3, [r7, #0]
 8004fb8:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004fbe:	683b      	ldr	r3, [r7, #0]
 8004fc0:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004fc6:	683b      	ldr	r3, [r7, #0]
 8004fc8:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004fce:	683b      	ldr	r3, [r7, #0]
 8004fd0:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004fd6:	683b      	ldr	r3, [r7, #0]
 8004fd8:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004fde:	683b      	ldr	r3, [r7, #0]
 8004fe0:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004fe6:	683b      	ldr	r3, [r7, #0]
 8004fe8:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004fee:	683b      	ldr	r3, [r7, #0]
 8004ff0:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8004ff2:	2300      	movs	r3, #0
}
 8004ff4:	4618      	mov	r0, r3
 8004ff6:	370c      	adds	r7, #12
 8004ff8:	46bd      	mov	sp, r7
 8004ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ffe:	4770      	bx	lr

08005000 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8005000:	b5b0      	push	{r4, r5, r7, lr}
 8005002:	b08e      	sub	sp, #56	; 0x38
 8005004:	af04      	add	r7, sp, #16
 8005006:	6078      	str	r0, [r7, #4]
 8005008:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800500a:	2300      	movs	r3, #0
 800500c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	2203      	movs	r2, #3
 8005014:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800501c:	2b03      	cmp	r3, #3
 800501e:	d02e      	beq.n	800507e <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 8005020:	683b      	ldr	r3, [r7, #0]
 8005022:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005026:	d106      	bne.n	8005036 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800502c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	639a      	str	r2, [r3, #56]	; 0x38
 8005034:	e029      	b.n	800508a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 8005036:	683b      	ldr	r3, [r7, #0]
 8005038:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800503c:	d10a      	bne.n	8005054 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800503e:	6878      	ldr	r0, [r7, #4]
 8005040:	f000 fb66 	bl	8005710 <SD_WideBus_Enable>
 8005044:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800504a:	6a3b      	ldr	r3, [r7, #32]
 800504c:	431a      	orrs	r2, r3
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	639a      	str	r2, [r3, #56]	; 0x38
 8005052:	e01a      	b.n	800508a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 8005054:	683b      	ldr	r3, [r7, #0]
 8005056:	2b00      	cmp	r3, #0
 8005058:	d10a      	bne.n	8005070 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800505a:	6878      	ldr	r0, [r7, #4]
 800505c:	f000 fba3 	bl	80057a6 <SD_WideBus_Disable>
 8005060:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005066:	6a3b      	ldr	r3, [r7, #32]
 8005068:	431a      	orrs	r2, r3
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	639a      	str	r2, [r3, #56]	; 0x38
 800506e:	e00c      	b.n	800508a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005074:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	639a      	str	r2, [r3, #56]	; 0x38
 800507c:	e005      	b.n	800508a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005082:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800508e:	2b00      	cmp	r3, #0
 8005090:	d007      	beq.n	80050a2 <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	4a2e      	ldr	r2, [pc, #184]	; (8005150 <HAL_SD_ConfigWideBusOperation+0x150>)
 8005098:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800509a:	2301      	movs	r3, #1
 800509c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80050a0:	e034      	b.n	800510c <HAL_SD_ConfigWideBusOperation+0x10c>
  }
  else
  {
    /* Configure the SDMMC peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	685b      	ldr	r3, [r3, #4]
 80050a6:	60bb      	str	r3, [r7, #8]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	689b      	ldr	r3, [r3, #8]
 80050ac:	60fb      	str	r3, [r7, #12]
    Init.BusWide             = WideMode;
 80050ae:	683b      	ldr	r3, [r7, #0]
 80050b0:	613b      	str	r3, [r7, #16]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	691b      	ldr	r3, [r3, #16]
 80050b6:	617b      	str	r3, [r7, #20]

    /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
    if(hsd->Init.ClockDiv >= SDMMC_NSpeed_CLK_DIV)
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	695b      	ldr	r3, [r3, #20]
 80050bc:	2b03      	cmp	r3, #3
 80050be:	d903      	bls.n	80050c8 <HAL_SD_ConfigWideBusOperation+0xc8>
    {
      Init.ClockDiv = hsd->Init.ClockDiv;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	695b      	ldr	r3, [r3, #20]
 80050c4:	61bb      	str	r3, [r7, #24]
 80050c6:	e012      	b.n	80050ee <HAL_SD_ConfigWideBusOperation+0xee>
    }
    else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80050cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80050d0:	d103      	bne.n	80050da <HAL_SD_ConfigWideBusOperation+0xda>
    {
      /* UltraHigh speed SD card,user Clock div */
      Init.ClockDiv = hsd->Init.ClockDiv;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	695b      	ldr	r3, [r3, #20]
 80050d6:	61bb      	str	r3, [r7, #24]
 80050d8:	e009      	b.n	80050ee <HAL_SD_ConfigWideBusOperation+0xee>
    }
    else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80050de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80050e2:	d102      	bne.n	80050ea <HAL_SD_ConfigWideBusOperation+0xea>
    {
      /* High speed SD card, Max Frequency = 50Mhz */
      Init.ClockDiv = SDMMC_HSpeed_CLK_DIV;
 80050e4:	2302      	movs	r3, #2
 80050e6:	61bb      	str	r3, [r7, #24]
 80050e8:	e001      	b.n	80050ee <HAL_SD_ConfigWideBusOperation+0xee>
    }
    else
    {
      /* No High speed SD card, Max Frequency = 25Mhz */
      Init.ClockDiv = SDMMC_NSpeed_CLK_DIV;
 80050ea:	2304      	movs	r3, #4
 80050ec:	61bb      	str	r3, [r7, #24]
    }

    (void)SDMMC_Init(hsd->Instance, Init);
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681d      	ldr	r5, [r3, #0]
 80050f2:	466c      	mov	r4, sp
 80050f4:	f107 0314 	add.w	r3, r7, #20
 80050f8:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80050fc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8005100:	f107 0308 	add.w	r3, r7, #8
 8005104:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005106:	4628      	mov	r0, r5
 8005108:	f000 fc68 	bl	80059dc <SDMMC_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005114:	4618      	mov	r0, r3
 8005116:	f000 fd3f 	bl	8005b98 <SDMMC_CmdBlockLength>
 800511a:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800511c:	6a3b      	ldr	r3, [r7, #32]
 800511e:	2b00      	cmp	r3, #0
 8005120:	d00c      	beq.n	800513c <HAL_SD_ConfigWideBusOperation+0x13c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	4a0a      	ldr	r2, [pc, #40]	; (8005150 <HAL_SD_ConfigWideBusOperation+0x150>)
 8005128:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800512e:	6a3b      	ldr	r3, [r7, #32]
 8005130:	431a      	orrs	r2, r3
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8005136:	2301      	movs	r3, #1
 8005138:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	2201      	movs	r2, #1
 8005140:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 8005144:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8005148:	4618      	mov	r0, r3
 800514a:	3728      	adds	r7, #40	; 0x28
 800514c:	46bd      	mov	sp, r7
 800514e:	bdb0      	pop	{r4, r5, r7, pc}
 8005150:	1fe00fff 	.word	0x1fe00fff

08005154 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8005154:	b580      	push	{r7, lr}
 8005156:	b086      	sub	sp, #24
 8005158:	af00      	add	r7, sp, #0
 800515a:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800515c:	2300      	movs	r3, #0
 800515e:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8005160:	f107 030c 	add.w	r3, r7, #12
 8005164:	4619      	mov	r1, r3
 8005166:	6878      	ldr	r0, [r7, #4]
 8005168:	f000 faaa 	bl	80056c0 <SD_SendStatus>
 800516c:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800516e:	697b      	ldr	r3, [r7, #20]
 8005170:	2b00      	cmp	r3, #0
 8005172:	d005      	beq.n	8005180 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005178:	697b      	ldr	r3, [r7, #20]
 800517a:	431a      	orrs	r2, r3
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	0a5b      	lsrs	r3, r3, #9
 8005184:	f003 030f 	and.w	r3, r3, #15
 8005188:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800518a:	693b      	ldr	r3, [r7, #16]
}
 800518c:	4618      	mov	r0, r3
 800518e:	3718      	adds	r7, #24
 8005190:	46bd      	mov	sp, r7
 8005192:	bd80      	pop	{r7, pc}

08005194 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8005194:	b590      	push	{r4, r7, lr}
 8005196:	b091      	sub	sp, #68	; 0x44
 8005198:	af00      	add	r7, sp, #0
 800519a:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800519c:	2301      	movs	r3, #1
 800519e:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	4618      	mov	r0, r3
 80051a6:	f000 fc72 	bl	8005a8e <SDMMC_GetPowerState>
 80051aa:	4603      	mov	r3, r0
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d102      	bne.n	80051b6 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80051b0:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80051b4:	e0a8      	b.n	8005308 <SD_InitCard+0x174>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051ba:	2b03      	cmp	r3, #3
 80051bc:	d02e      	beq.n	800521c <SD_InitCard+0x88>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	4618      	mov	r0, r3
 80051c4:	f000 febe 	bl	8005f44 <SDMMC_CmdSendCID>
 80051c8:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80051ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d001      	beq.n	80051d4 <SD_InitCard+0x40>
    {
      return errorstate;
 80051d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80051d2:	e099      	b.n	8005308 <SD_InitCard+0x174>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	2100      	movs	r1, #0
 80051da:	4618      	mov	r0, r3
 80051dc:	f000 fc9d 	bl	8005b1a <SDMMC_GetResponse>
 80051e0:	4602      	mov	r2, r0
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	2104      	movs	r1, #4
 80051ec:	4618      	mov	r0, r3
 80051ee:	f000 fc94 	bl	8005b1a <SDMMC_GetResponse>
 80051f2:	4602      	mov	r2, r0
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	2108      	movs	r1, #8
 80051fe:	4618      	mov	r0, r3
 8005200:	f000 fc8b 	bl	8005b1a <SDMMC_GetResponse>
 8005204:	4602      	mov	r2, r0
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	210c      	movs	r1, #12
 8005210:	4618      	mov	r0, r3
 8005212:	f000 fc82 	bl	8005b1a <SDMMC_GetResponse>
 8005216:	4602      	mov	r2, r0
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	67da      	str	r2, [r3, #124]	; 0x7c
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005220:	2b03      	cmp	r3, #3
 8005222:	d00d      	beq.n	8005240 <SD_InitCard+0xac>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	f107 020e 	add.w	r2, r7, #14
 800522c:	4611      	mov	r1, r2
 800522e:	4618      	mov	r0, r3
 8005230:	f000 fec7 	bl	8005fc2 <SDMMC_CmdSetRelAdd>
 8005234:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8005236:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005238:	2b00      	cmp	r3, #0
 800523a:	d001      	beq.n	8005240 <SD_InitCard+0xac>
    {
      return errorstate;
 800523c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800523e:	e063      	b.n	8005308 <SD_InitCard+0x174>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005244:	2b03      	cmp	r3, #3
 8005246:	d036      	beq.n	80052b6 <SD_InitCard+0x122>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8005248:	89fb      	ldrh	r3, [r7, #14]
 800524a:	461a      	mov	r2, r3
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	649a      	str	r2, [r3, #72]	; 0x48

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681a      	ldr	r2, [r3, #0]
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005258:	041b      	lsls	r3, r3, #16
 800525a:	4619      	mov	r1, r3
 800525c:	4610      	mov	r0, r2
 800525e:	f000 fe90 	bl	8005f82 <SDMMC_CmdSendCSD>
 8005262:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8005264:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005266:	2b00      	cmp	r3, #0
 8005268:	d001      	beq.n	800526e <SD_InitCard+0xda>
    {
      return errorstate;
 800526a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800526c:	e04c      	b.n	8005308 <SD_InitCard+0x174>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	2100      	movs	r1, #0
 8005274:	4618      	mov	r0, r3
 8005276:	f000 fc50 	bl	8005b1a <SDMMC_GetResponse>
 800527a:	4602      	mov	r2, r0
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	2104      	movs	r1, #4
 8005286:	4618      	mov	r0, r3
 8005288:	f000 fc47 	bl	8005b1a <SDMMC_GetResponse>
 800528c:	4602      	mov	r2, r0
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	2108      	movs	r1, #8
 8005298:	4618      	mov	r0, r3
 800529a:	f000 fc3e 	bl	8005b1a <SDMMC_GetResponse>
 800529e:	4602      	mov	r2, r0
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	210c      	movs	r1, #12
 80052aa:	4618      	mov	r0, r3
 80052ac:	f000 fc35 	bl	8005b1a <SDMMC_GetResponse>
 80052b0:	4602      	mov	r2, r0
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	66da      	str	r2, [r3, #108]	; 0x6c
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	2104      	movs	r1, #4
 80052bc:	4618      	mov	r0, r3
 80052be:	f000 fc2c 	bl	8005b1a <SDMMC_GetResponse>
 80052c2:	4603      	mov	r3, r0
 80052c4:	0d1a      	lsrs	r2, r3, #20
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	645a      	str	r2, [r3, #68]	; 0x44

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 80052ca:	f107 0310 	add.w	r3, r7, #16
 80052ce:	4619      	mov	r1, r3
 80052d0:	6878      	ldr	r0, [r7, #4]
 80052d2:	f7ff fc0f 	bl	8004af4 <HAL_SD_GetCardCSD>
 80052d6:	4603      	mov	r3, r0
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d002      	beq.n	80052e2 <SD_InitCard+0x14e>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80052dc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80052e0:	e012      	b.n	8005308 <SD_InitCard+0x174>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	6819      	ldr	r1, [r3, #0]
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80052ea:	041b      	lsls	r3, r3, #16
 80052ec:	f04f 0400 	mov.w	r4, #0
 80052f0:	461a      	mov	r2, r3
 80052f2:	4623      	mov	r3, r4
 80052f4:	4608      	mov	r0, r1
 80052f6:	f000 fd3b 	bl	8005d70 <SDMMC_CmdSelDesel>
 80052fa:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 80052fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d001      	beq.n	8005306 <SD_InitCard+0x172>
  {
    return errorstate;
 8005302:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005304:	e000      	b.n	8005308 <SD_InitCard+0x174>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8005306:	2300      	movs	r3, #0
}
 8005308:	4618      	mov	r0, r3
 800530a:	3744      	adds	r7, #68	; 0x44
 800530c:	46bd      	mov	sp, r7
 800530e:	bd90      	pop	{r4, r7, pc}

08005310 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8005310:	b580      	push	{r7, lr}
 8005312:	b088      	sub	sp, #32
 8005314:	af00      	add	r7, sp, #0
 8005316:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005318:	2300      	movs	r3, #0
 800531a:	60fb      	str	r3, [r7, #12]
  uint32_t response = 0U, validvoltage = 0U;
 800531c:	2300      	movs	r3, #0
 800531e:	61fb      	str	r3, [r7, #28]
 8005320:	2300      	movs	r3, #0
 8005322:	61bb      	str	r3, [r7, #24]
  uint32_t errorstate;
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
 8005324:	f7fb fc6e 	bl	8000c04 <HAL_GetTick>
 8005328:	6178      	str	r0, [r7, #20]
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	4618      	mov	r0, r3
 8005330:	f000 fd42 	bl	8005db8 <SDMMC_CmdGoIdleState>
 8005334:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005336:	693b      	ldr	r3, [r7, #16]
 8005338:	2b00      	cmp	r3, #0
 800533a:	d001      	beq.n	8005340 <SD_PowerON+0x30>
  {
    return errorstate;
 800533c:	693b      	ldr	r3, [r7, #16]
 800533e:	e0e9      	b.n	8005514 <SD_PowerON+0x204>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	4618      	mov	r0, r3
 8005346:	f000 fd55 	bl	8005df4 <SDMMC_CmdOperCond>
 800534a:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_SD_ERROR_NONE)
 800534c:	693b      	ldr	r3, [r7, #16]
 800534e:	2b00      	cmp	r3, #0
 8005350:	d00d      	beq.n	800536e <SD_PowerON+0x5e>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	2200      	movs	r2, #0
 8005356:	641a      	str	r2, [r3, #64]	; 0x40
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	4618      	mov	r0, r3
 800535e:	f000 fd2b 	bl	8005db8 <SDMMC_CmdGoIdleState>
 8005362:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005364:	693b      	ldr	r3, [r7, #16]
 8005366:	2b00      	cmp	r3, #0
 8005368:	d004      	beq.n	8005374 <SD_PowerON+0x64>
    {
      return errorstate;
 800536a:	693b      	ldr	r3, [r7, #16]
 800536c:	e0d2      	b.n	8005514 <SD_PowerON+0x204>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	2201      	movs	r2, #1
 8005372:	641a      	str	r2, [r3, #64]	; 0x40
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005378:	2b01      	cmp	r3, #1
 800537a:	d137      	bne.n	80053ec <SD_PowerON+0xdc>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	2100      	movs	r1, #0
 8005382:	4618      	mov	r0, r3
 8005384:	f000 fd56 	bl	8005e34 <SDMMC_CmdAppCommand>
 8005388:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 800538a:	693b      	ldr	r3, [r7, #16]
 800538c:	2b00      	cmp	r3, #0
 800538e:	d02d      	beq.n	80053ec <SD_PowerON+0xdc>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005390:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8005394:	e0be      	b.n	8005514 <SD_PowerON+0x204>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	2100      	movs	r1, #0
 800539c:	4618      	mov	r0, r3
 800539e:	f000 fd49 	bl	8005e34 <SDMMC_CmdAppCommand>
 80053a2:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 80053a4:	693b      	ldr	r3, [r7, #16]
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d001      	beq.n	80053ae <SD_PowerON+0x9e>
    {
      return errorstate;
 80053aa:	693b      	ldr	r3, [r7, #16]
 80053ac:	e0b2      	b.n	8005514 <SD_PowerON+0x204>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	495a      	ldr	r1, [pc, #360]	; (800551c <SD_PowerON+0x20c>)
 80053b4:	4618      	mov	r0, r3
 80053b6:	f000 fd60 	bl	8005e7a <SDMMC_CmdAppOperCommand>
 80053ba:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 80053bc:	693b      	ldr	r3, [r7, #16]
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d002      	beq.n	80053c8 <SD_PowerON+0xb8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80053c2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80053c6:	e0a5      	b.n	8005514 <SD_PowerON+0x204>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	2100      	movs	r1, #0
 80053ce:	4618      	mov	r0, r3
 80053d0:	f000 fba3 	bl	8005b1a <SDMMC_GetResponse>
 80053d4:	61f8      	str	r0, [r7, #28]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 80053d6:	69fb      	ldr	r3, [r7, #28]
 80053d8:	0fdb      	lsrs	r3, r3, #31
 80053da:	2b01      	cmp	r3, #1
 80053dc:	d101      	bne.n	80053e2 <SD_PowerON+0xd2>
 80053de:	2301      	movs	r3, #1
 80053e0:	e000      	b.n	80053e4 <SD_PowerON+0xd4>
 80053e2:	2300      	movs	r3, #0
 80053e4:	61bb      	str	r3, [r7, #24]

    count++;
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	3301      	adds	r3, #1
 80053ea:	60fb      	str	r3, [r7, #12]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80053f2:	4293      	cmp	r3, r2
 80053f4:	d802      	bhi.n	80053fc <SD_PowerON+0xec>
 80053f6:	69bb      	ldr	r3, [r7, #24]
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d0cc      	beq.n	8005396 <SD_PowerON+0x86>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8005402:	4293      	cmp	r3, r2
 8005404:	d902      	bls.n	800540c <SD_PowerON+0xfc>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8005406:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800540a:	e083      	b.n	8005514 <SD_PowerON+0x204>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800540c:	69fb      	ldr	r3, [r7, #28]
 800540e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005412:	2b00      	cmp	r3, #0
 8005414:	d07d      	beq.n	8005512 <SD_PowerON+0x202>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	2201      	movs	r2, #1
 800541a:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_SD_TRANSCEIVER != 0U)
    if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	699b      	ldr	r3, [r3, #24]
 8005420:	2b02      	cmp	r3, #2
 8005422:	d176      	bne.n	8005512 <SD_PowerON+0x202>
    {
      if((response & SD_SWITCH_1_8V_CAPACITY) == SD_SWITCH_1_8V_CAPACITY)
 8005424:	69fb      	ldr	r3, [r7, #28]
 8005426:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800542a:	2b00      	cmp	r3, #0
 800542c:	d071      	beq.n	8005512 <SD_PowerON+0x202>
      {
        hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005434:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Start switching procedue */
        hsd->Instance->POWER |= SDMMC_POWER_VSWITCHEN;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	681a      	ldr	r2, [r3, #0]
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	f042 0208 	orr.w	r2, r2, #8
 8005444:	601a      	str	r2, [r3, #0]

        /* Send CMD11 to switch 1.8V mode */
        errorstate = SDMMC_CmdVoltageSwitch(hsd->Instance);
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	4618      	mov	r0, r3
 800544c:	f000 fe20 	bl	8006090 <SDMMC_CmdVoltageSwitch>
 8005450:	6138      	str	r0, [r7, #16]
        if(errorstate != HAL_SD_ERROR_NONE)
 8005452:	693b      	ldr	r3, [r7, #16]
 8005454:	2b00      	cmp	r3, #0
 8005456:	d00c      	beq.n	8005472 <SD_PowerON+0x162>
        {
          return errorstate;
 8005458:	693b      	ldr	r3, [r7, #16]
 800545a:	e05b      	b.n	8005514 <SD_PowerON+0x204>
        }

        /* Check to CKSTOP */
        while(( hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
        {
          if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800545c:	f7fb fbd2 	bl	8000c04 <HAL_GetTick>
 8005460:	4602      	mov	r2, r0
 8005462:	697b      	ldr	r3, [r7, #20]
 8005464:	1ad3      	subs	r3, r2, r3
 8005466:	f1b3 3fff 	cmp.w	r3, #4294967295
 800546a:	d102      	bne.n	8005472 <SD_PowerON+0x162>
          {
            return HAL_SD_ERROR_TIMEOUT;
 800546c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005470:	e050      	b.n	8005514 <SD_PowerON+0x204>
        while(( hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005478:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800547c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005480:	d1ec      	bne.n	800545c <SD_PowerON+0x14c>
          }
        }

        /* Clear CKSTOP Flag */
        hsd->Instance->ICR = SDMMC_FLAG_CKSTOP;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800548a:	639a      	str	r2, [r3, #56]	; 0x38

        /* Check to BusyD0 */
        if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) != SDMMC_FLAG_BUSYD0)
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005492:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005496:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800549a:	d002      	beq.n	80054a2 <SD_PowerON+0x192>
        {
          /* Error when activate Voltage Switch in SDMMC Peripheral */
          return SDMMC_ERROR_UNSUPPORTED_FEATURE;
 800549c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80054a0:	e038      	b.n	8005514 <SD_PowerON+0x204>
        {
          /* Enable Transceiver Switch PIN */
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->DriveTransceiver_1_8V_Callback(SET);
#else
          HAL_SD_DriveTransceiver_1_8V_Callback(SET);
 80054a2:	2001      	movs	r0, #1
 80054a4:	f7ff fb1a 	bl	8004adc <HAL_SD_DriveTransceiver_1_8V_Callback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */

          /* Switch ready */
          hsd->Instance->POWER |= SDMMC_POWER_VSWITCH;
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	681a      	ldr	r2, [r3, #0]
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	f042 0204 	orr.w	r2, r2, #4
 80054b6:	601a      	str	r2, [r3, #0]

          /* Check VSWEND Flag */
          while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 80054b8:	e00a      	b.n	80054d0 <SD_PowerON+0x1c0>
          {
            if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80054ba:	f7fb fba3 	bl	8000c04 <HAL_GetTick>
 80054be:	4602      	mov	r2, r0
 80054c0:	697b      	ldr	r3, [r7, #20]
 80054c2:	1ad3      	subs	r3, r2, r3
 80054c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054c8:	d102      	bne.n	80054d0 <SD_PowerON+0x1c0>
            {
              return HAL_SD_ERROR_TIMEOUT;
 80054ca:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80054ce:	e021      	b.n	8005514 <SD_PowerON+0x204>
          while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80054da:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80054de:	d1ec      	bne.n	80054ba <SD_PowerON+0x1aa>
            }
          }

          /* Clear VSWEND Flag */
          hsd->Instance->ICR = SDMMC_FLAG_VSWEND;
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80054e8:	639a      	str	r2, [r3, #56]	; 0x38

          /* Check BusyD0 status */
          if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) == SDMMC_FLAG_BUSYD0)
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054f0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80054f4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80054f8:	d102      	bne.n	8005500 <SD_PowerON+0x1f0>
          {
            /* Error when enabling 1.8V mode */
            return HAL_SD_ERROR_INVALID_VOLTRANGE;
 80054fa:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80054fe:	e009      	b.n	8005514 <SD_PowerON+0x204>
          }
          /* Switch to 1.8V OK */

          /* Disable VSWITCH FLAG from SDMMC Peripheral */
          hsd->Instance->POWER = 0x13U;
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	2213      	movs	r2, #19
 8005506:	601a      	str	r2, [r3, #0]

          /* Clean Status flags */
          hsd->Instance->ICR = 0xFFFFFFFFU;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	f04f 32ff 	mov.w	r2, #4294967295
 8005510:	639a      	str	r2, [r3, #56]	; 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 8005512:	2300      	movs	r3, #0
}
 8005514:	4618      	mov	r0, r3
 8005516:	3720      	adds	r7, #32
 8005518:	46bd      	mov	sp, r7
 800551a:	bd80      	pop	{r7, pc}
 800551c:	c1100000 	.word	0xc1100000

08005520 <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 8005520:	b580      	push	{r7, lr}
 8005522:	b08c      	sub	sp, #48	; 0x30
 8005524:	af00      	add	r7, sp, #0
 8005526:	6078      	str	r0, [r7, #4]
 8005528:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800552a:	f7fb fb6b 	bl	8000c04 <HAL_GetTick>
 800552e:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 8005530:	683b      	ldr	r3, [r7, #0]
 8005532:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	2100      	movs	r1, #0
 800553a:	4618      	mov	r0, r3
 800553c:	f000 faed 	bl	8005b1a <SDMMC_GetResponse>
 8005540:	4603      	mov	r3, r0
 8005542:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005546:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800554a:	d102      	bne.n	8005552 <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800554c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005550:	e0b0      	b.n	80056b4 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	2140      	movs	r1, #64	; 0x40
 8005558:	4618      	mov	r0, r3
 800555a:	f000 fb1d 	bl	8005b98 <SDMMC_CmdBlockLength>
 800555e:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005560:	6a3b      	ldr	r3, [r7, #32]
 8005562:	2b00      	cmp	r3, #0
 8005564:	d005      	beq.n	8005572 <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 800556e:	6a3b      	ldr	r3, [r7, #32]
 8005570:	e0a0      	b.n	80056b4 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681a      	ldr	r2, [r3, #0]
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800557a:	041b      	lsls	r3, r3, #16
 800557c:	4619      	mov	r1, r3
 800557e:	4610      	mov	r0, r2
 8005580:	f000 fc58 	bl	8005e34 <SDMMC_CmdAppCommand>
 8005584:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005586:	6a3b      	ldr	r3, [r7, #32]
 8005588:	2b00      	cmp	r3, #0
 800558a:	d005      	beq.n	8005598 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 8005594:	6a3b      	ldr	r3, [r7, #32]
 8005596:	e08d      	b.n	80056b4 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8005598:	f04f 33ff 	mov.w	r3, #4294967295
 800559c:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 800559e:	2340      	movs	r3, #64	; 0x40
 80055a0:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 80055a2:	2360      	movs	r3, #96	; 0x60
 80055a4:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80055a6:	2302      	movs	r3, #2
 80055a8:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80055aa:	2300      	movs	r3, #0
 80055ac:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 80055ae:	2301      	movs	r3, #1
 80055b0:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	f107 0208 	add.w	r2, r7, #8
 80055ba:	4611      	mov	r1, r2
 80055bc:	4618      	mov	r0, r3
 80055be:	f000 fabf 	bl	8005b40 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	4618      	mov	r0, r3
 80055c8:	f000 fd40 	bl	800604c <SDMMC_CmdStatusRegister>
 80055cc:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80055ce:	6a3b      	ldr	r3, [r7, #32]
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d02b      	beq.n	800562c <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 80055dc:	6a3b      	ldr	r3, [r7, #32]
 80055de:	e069      	b.n	80056b4 <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055e6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d013      	beq.n	8005616 <SD_SendSDStatus+0xf6>
    {
      for(count = 0U; count < 8U; count++)
 80055ee:	2300      	movs	r3, #0
 80055f0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80055f2:	e00d      	b.n	8005610 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	4618      	mov	r0, r3
 80055fa:	f000 fa19 	bl	8005a30 <SDMMC_ReadFIFO>
 80055fe:	4602      	mov	r2, r0
 8005600:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005602:	601a      	str	r2, [r3, #0]
        pData++;
 8005604:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005606:	3304      	adds	r3, #4
 8005608:	62bb      	str	r3, [r7, #40]	; 0x28
      for(count = 0U; count < 8U; count++)
 800560a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800560c:	3301      	adds	r3, #1
 800560e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005610:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005612:	2b07      	cmp	r3, #7
 8005614:	d9ee      	bls.n	80055f4 <SD_SendSDStatus+0xd4>
      }
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8005616:	f7fb faf5 	bl	8000c04 <HAL_GetTick>
 800561a:	4602      	mov	r2, r0
 800561c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800561e:	1ad3      	subs	r3, r2, r3
 8005620:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005624:	d102      	bne.n	800562c <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8005626:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800562a:	e043      	b.n	80056b4 <SD_SendSDStatus+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005632:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 8005636:	2b00      	cmp	r3, #0
 8005638:	d0d2      	beq.n	80055e0 <SD_SendSDStatus+0xc0>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005640:	f003 0308 	and.w	r3, r3, #8
 8005644:	2b00      	cmp	r3, #0
 8005646:	d001      	beq.n	800564c <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 8005648:	2308      	movs	r3, #8
 800564a:	e033      	b.n	80056b4 <SD_SendSDStatus+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005652:	f003 0302 	and.w	r3, r3, #2
 8005656:	2b00      	cmp	r3, #0
 8005658:	d001      	beq.n	800565e <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800565a:	2302      	movs	r3, #2
 800565c:	e02a      	b.n	80056b4 <SD_SendSDStatus+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005664:	f003 0320 	and.w	r3, r3, #32
 8005668:	2b00      	cmp	r3, #0
 800566a:	d017      	beq.n	800569c <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 800566c:	2320      	movs	r3, #32
 800566e:	e021      	b.n	80056b4 <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	4618      	mov	r0, r3
 8005676:	f000 f9db 	bl	8005a30 <SDMMC_ReadFIFO>
 800567a:	4602      	mov	r2, r0
 800567c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800567e:	601a      	str	r2, [r3, #0]
    pData++;
 8005680:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005682:	3304      	adds	r3, #4
 8005684:	62bb      	str	r3, [r7, #40]	; 0x28

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8005686:	f7fb fabd 	bl	8000c04 <HAL_GetTick>
 800568a:	4602      	mov	r2, r0
 800568c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800568e:	1ad3      	subs	r3, r2, r3
 8005690:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005694:	d102      	bne.n	800569c <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8005696:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800569a:	e00b      	b.n	80056b4 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056a2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d1e2      	bne.n	8005670 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	4a03      	ldr	r2, [pc, #12]	; (80056bc <SD_SendSDStatus+0x19c>)
 80056b0:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 80056b2:	2300      	movs	r3, #0
}
 80056b4:	4618      	mov	r0, r3
 80056b6:	3730      	adds	r7, #48	; 0x30
 80056b8:	46bd      	mov	sp, r7
 80056ba:	bd80      	pop	{r7, pc}
 80056bc:	18000f3a 	.word	0x18000f3a

080056c0 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 80056c0:	b580      	push	{r7, lr}
 80056c2:	b084      	sub	sp, #16
 80056c4:	af00      	add	r7, sp, #0
 80056c6:	6078      	str	r0, [r7, #4]
 80056c8:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 80056ca:	683b      	ldr	r3, [r7, #0]
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d102      	bne.n	80056d6 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 80056d0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80056d4:	e018      	b.n	8005708 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681a      	ldr	r2, [r3, #0]
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80056de:	041b      	lsls	r3, r3, #16
 80056e0:	4619      	mov	r1, r3
 80056e2:	4610      	mov	r0, r2
 80056e4:	f000 fc8f 	bl	8006006 <SDMMC_CmdSendStatus>
 80056e8:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d001      	beq.n	80056f4 <SD_SendStatus+0x34>
  {
    return errorstate;
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	e009      	b.n	8005708 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	2100      	movs	r1, #0
 80056fa:	4618      	mov	r0, r3
 80056fc:	f000 fa0d 	bl	8005b1a <SDMMC_GetResponse>
 8005700:	4602      	mov	r2, r0
 8005702:	683b      	ldr	r3, [r7, #0]
 8005704:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8005706:	2300      	movs	r3, #0
}
 8005708:	4618      	mov	r0, r3
 800570a:	3710      	adds	r7, #16
 800570c:	46bd      	mov	sp, r7
 800570e:	bd80      	pop	{r7, pc}

08005710 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8005710:	b580      	push	{r7, lr}
 8005712:	b086      	sub	sp, #24
 8005714:	af00      	add	r7, sp, #0
 8005716:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8005718:	2300      	movs	r3, #0
 800571a:	60fb      	str	r3, [r7, #12]
 800571c:	2300      	movs	r3, #0
 800571e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	2100      	movs	r1, #0
 8005726:	4618      	mov	r0, r3
 8005728:	f000 f9f7 	bl	8005b1a <SDMMC_GetResponse>
 800572c:	4603      	mov	r3, r0
 800572e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005732:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005736:	d102      	bne.n	800573e <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8005738:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800573c:	e02f      	b.n	800579e <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800573e:	f107 030c 	add.w	r3, r7, #12
 8005742:	4619      	mov	r1, r3
 8005744:	6878      	ldr	r0, [r7, #4]
 8005746:	f000 f879 	bl	800583c <SD_FindSCR>
 800574a:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800574c:	697b      	ldr	r3, [r7, #20]
 800574e:	2b00      	cmp	r3, #0
 8005750:	d001      	beq.n	8005756 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8005752:	697b      	ldr	r3, [r7, #20]
 8005754:	e023      	b.n	800579e <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8005756:	693b      	ldr	r3, [r7, #16]
 8005758:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800575c:	2b00      	cmp	r3, #0
 800575e:	d01c      	beq.n	800579a <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681a      	ldr	r2, [r3, #0]
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005768:	041b      	lsls	r3, r3, #16
 800576a:	4619      	mov	r1, r3
 800576c:	4610      	mov	r0, r2
 800576e:	f000 fb61 	bl	8005e34 <SDMMC_CmdAppCommand>
 8005772:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005774:	697b      	ldr	r3, [r7, #20]
 8005776:	2b00      	cmp	r3, #0
 8005778:	d001      	beq.n	800577e <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800577a:	697b      	ldr	r3, [r7, #20]
 800577c:	e00f      	b.n	800579e <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	2102      	movs	r1, #2
 8005784:	4618      	mov	r0, r3
 8005786:	f000 fb98 	bl	8005eba <SDMMC_CmdBusWidth>
 800578a:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800578c:	697b      	ldr	r3, [r7, #20]
 800578e:	2b00      	cmp	r3, #0
 8005790:	d001      	beq.n	8005796 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8005792:	697b      	ldr	r3, [r7, #20]
 8005794:	e003      	b.n	800579e <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8005796:	2300      	movs	r3, #0
 8005798:	e001      	b.n	800579e <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800579a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800579e:	4618      	mov	r0, r3
 80057a0:	3718      	adds	r7, #24
 80057a2:	46bd      	mov	sp, r7
 80057a4:	bd80      	pop	{r7, pc}

080057a6 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 80057a6:	b580      	push	{r7, lr}
 80057a8:	b086      	sub	sp, #24
 80057aa:	af00      	add	r7, sp, #0
 80057ac:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 80057ae:	2300      	movs	r3, #0
 80057b0:	60fb      	str	r3, [r7, #12]
 80057b2:	2300      	movs	r3, #0
 80057b4:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	2100      	movs	r1, #0
 80057bc:	4618      	mov	r0, r3
 80057be:	f000 f9ac 	bl	8005b1a <SDMMC_GetResponse>
 80057c2:	4603      	mov	r3, r0
 80057c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80057c8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80057cc:	d102      	bne.n	80057d4 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80057ce:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80057d2:	e02f      	b.n	8005834 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80057d4:	f107 030c 	add.w	r3, r7, #12
 80057d8:	4619      	mov	r1, r3
 80057da:	6878      	ldr	r0, [r7, #4]
 80057dc:	f000 f82e 	bl	800583c <SD_FindSCR>
 80057e0:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80057e2:	697b      	ldr	r3, [r7, #20]
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d001      	beq.n	80057ec <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 80057e8:	697b      	ldr	r3, [r7, #20]
 80057ea:	e023      	b.n	8005834 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80057ec:	693b      	ldr	r3, [r7, #16]
 80057ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d01c      	beq.n	8005830 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681a      	ldr	r2, [r3, #0]
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80057fe:	041b      	lsls	r3, r3, #16
 8005800:	4619      	mov	r1, r3
 8005802:	4610      	mov	r0, r2
 8005804:	f000 fb16 	bl	8005e34 <SDMMC_CmdAppCommand>
 8005808:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800580a:	697b      	ldr	r3, [r7, #20]
 800580c:	2b00      	cmp	r3, #0
 800580e:	d001      	beq.n	8005814 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8005810:	697b      	ldr	r3, [r7, #20]
 8005812:	e00f      	b.n	8005834 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	2100      	movs	r1, #0
 800581a:	4618      	mov	r0, r3
 800581c:	f000 fb4d 	bl	8005eba <SDMMC_CmdBusWidth>
 8005820:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005822:	697b      	ldr	r3, [r7, #20]
 8005824:	2b00      	cmp	r3, #0
 8005826:	d001      	beq.n	800582c <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8005828:	697b      	ldr	r3, [r7, #20]
 800582a:	e003      	b.n	8005834 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800582c:	2300      	movs	r3, #0
 800582e:	e001      	b.n	8005834 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8005830:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8005834:	4618      	mov	r0, r3
 8005836:	3718      	adds	r7, #24
 8005838:	46bd      	mov	sp, r7
 800583a:	bd80      	pop	{r7, pc}

0800583c <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800583c:	b580      	push	{r7, lr}
 800583e:	b08e      	sub	sp, #56	; 0x38
 8005840:	af00      	add	r7, sp, #0
 8005842:	6078      	str	r0, [r7, #4]
 8005844:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8005846:	f7fb f9dd 	bl	8000c04 <HAL_GetTick>
 800584a:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800584c:	2300      	movs	r3, #0
 800584e:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 8005850:	2300      	movs	r3, #0
 8005852:	60bb      	str	r3, [r7, #8]
 8005854:	2300      	movs	r3, #0
 8005856:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8005858:	683b      	ldr	r3, [r7, #0]
 800585a:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	2108      	movs	r1, #8
 8005862:	4618      	mov	r0, r3
 8005864:	f000 f998 	bl	8005b98 <SDMMC_CmdBlockLength>
 8005868:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800586a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800586c:	2b00      	cmp	r3, #0
 800586e:	d001      	beq.n	8005874 <SD_FindSCR+0x38>
  {
    return errorstate;
 8005870:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005872:	e0ad      	b.n	80059d0 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681a      	ldr	r2, [r3, #0]
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800587c:	041b      	lsls	r3, r3, #16
 800587e:	4619      	mov	r1, r3
 8005880:	4610      	mov	r0, r2
 8005882:	f000 fad7 	bl	8005e34 <SDMMC_CmdAppCommand>
 8005886:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8005888:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800588a:	2b00      	cmp	r3, #0
 800588c:	d001      	beq.n	8005892 <SD_FindSCR+0x56>
  {
    return errorstate;
 800588e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005890:	e09e      	b.n	80059d0 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8005892:	f04f 33ff 	mov.w	r3, #4294967295
 8005896:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8005898:	2308      	movs	r3, #8
 800589a:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800589c:	2330      	movs	r3, #48	; 0x30
 800589e:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80058a0:	2302      	movs	r3, #2
 80058a2:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80058a4:	2300      	movs	r3, #0
 80058a6:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 80058a8:	2301      	movs	r3, #1
 80058aa:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	f107 0210 	add.w	r2, r7, #16
 80058b4:	4611      	mov	r1, r2
 80058b6:	4618      	mov	r0, r3
 80058b8:	f000 f942 	bl	8005b40 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	4618      	mov	r0, r3
 80058c2:	f000 fb1d 	bl	8005f00 <SDMMC_CmdSendSCR>
 80058c6:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80058c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d027      	beq.n	800591e <SD_FindSCR+0xe2>
  {
    return errorstate;
 80058ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058d0:	e07e      	b.n	80059d0 <SD_FindSCR+0x194>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
  {
    if((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058d8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d113      	bne.n	8005908 <SD_FindSCR+0xcc>
 80058e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d110      	bne.n	8005908 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	4618      	mov	r0, r3
 80058ec:	f000 f8a0 	bl	8005a30 <SDMMC_ReadFIFO>
 80058f0:	4603      	mov	r3, r0
 80058f2:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	4618      	mov	r0, r3
 80058fa:	f000 f899 	bl	8005a30 <SDMMC_ReadFIFO>
 80058fe:	4603      	mov	r3, r0
 8005900:	60fb      	str	r3, [r7, #12]
      index++;
 8005902:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005904:	3301      	adds	r3, #1
 8005906:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8005908:	f7fb f97c 	bl	8000c04 <HAL_GetTick>
 800590c:	4602      	mov	r2, r0
 800590e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005910:	1ad3      	subs	r3, r2, r3
 8005912:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005916:	d102      	bne.n	800591e <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8005918:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800591c:	e058      	b.n	80059d0 <SD_FindSCR+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005924:	f240 532a 	movw	r3, #1322	; 0x52a
 8005928:	4013      	ands	r3, r2
 800592a:	2b00      	cmp	r3, #0
 800592c:	d0d1      	beq.n	80058d2 <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005934:	f003 0308 	and.w	r3, r3, #8
 8005938:	2b00      	cmp	r3, #0
 800593a:	d005      	beq.n	8005948 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	2208      	movs	r2, #8
 8005942:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8005944:	2308      	movs	r3, #8
 8005946:	e043      	b.n	80059d0 <SD_FindSCR+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800594e:	f003 0302 	and.w	r3, r3, #2
 8005952:	2b00      	cmp	r3, #0
 8005954:	d005      	beq.n	8005962 <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	2202      	movs	r2, #2
 800595c:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800595e:	2302      	movs	r3, #2
 8005960:	e036      	b.n	80059d0 <SD_FindSCR+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005968:	f003 0320 	and.w	r3, r3, #32
 800596c:	2b00      	cmp	r3, #0
 800596e:	d005      	beq.n	800597c <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	2220      	movs	r2, #32
 8005976:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8005978:	2320      	movs	r3, #32
 800597a:	e029      	b.n	80059d0 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	4a15      	ldr	r2, [pc, #84]	; (80059d8 <SD_FindSCR+0x19c>)
 8005982:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	061a      	lsls	r2, r3, #24
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	021b      	lsls	r3, r3, #8
 800598c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005990:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	0a1b      	lsrs	r3, r3, #8
 8005996:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800599a:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	0e1b      	lsrs	r3, r3, #24
 80059a0:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80059a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059a4:	601a      	str	r2, [r3, #0]
    scr++;
 80059a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059a8:	3304      	adds	r3, #4
 80059aa:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80059ac:	68bb      	ldr	r3, [r7, #8]
 80059ae:	061a      	lsls	r2, r3, #24
 80059b0:	68bb      	ldr	r3, [r7, #8]
 80059b2:	021b      	lsls	r3, r3, #8
 80059b4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80059b8:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80059ba:	68bb      	ldr	r3, [r7, #8]
 80059bc:	0a1b      	lsrs	r3, r3, #8
 80059be:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80059c2:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80059c4:	68bb      	ldr	r3, [r7, #8]
 80059c6:	0e1b      	lsrs	r3, r3, #24
 80059c8:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80059ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059cc:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 80059ce:	2300      	movs	r3, #0
}
 80059d0:	4618      	mov	r0, r3
 80059d2:	3738      	adds	r7, #56	; 0x38
 80059d4:	46bd      	mov	sp, r7
 80059d6:	bd80      	pop	{r7, pc}
 80059d8:	18000f3a 	.word	0x18000f3a

080059dc <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 80059dc:	b084      	sub	sp, #16
 80059de:	b480      	push	{r7}
 80059e0:	b085      	sub	sp, #20
 80059e2:	af00      	add	r7, sp, #0
 80059e4:	6078      	str	r0, [r7, #4]
 80059e6:	f107 001c 	add.w	r0, r7, #28
 80059ea:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 80059ee:	2300      	movs	r3, #0
 80059f0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 80059f2:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      |\
 80059f4:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 80059f6:	431a      	orrs	r2, r3
             Init.BusWide             |\
 80059f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      |\
 80059fa:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 80059fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             |\
 80059fe:	431a      	orrs	r2, r3
             Init.ClockDiv
 8005a00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl |\
 8005a02:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8005a04:	68fa      	ldr	r2, [r7, #12]
 8005a06:	4313      	orrs	r3, r2
 8005a08:	60fb      	str	r3, [r7, #12]
             );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	685a      	ldr	r2, [r3, #4]
 8005a0e:	4b07      	ldr	r3, [pc, #28]	; (8005a2c <SDMMC_Init+0x50>)
 8005a10:	4013      	ands	r3, r2
 8005a12:	68fa      	ldr	r2, [r7, #12]
 8005a14:	431a      	orrs	r2, r3
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8005a1a:	2300      	movs	r3, #0
}
 8005a1c:	4618      	mov	r0, r3
 8005a1e:	3714      	adds	r7, #20
 8005a20:	46bd      	mov	sp, r7
 8005a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a26:	b004      	add	sp, #16
 8005a28:	4770      	bx	lr
 8005a2a:	bf00      	nop
 8005a2c:	ffc02c00 	.word	0xffc02c00

08005a30 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 8005a30:	b480      	push	{r7}
 8005a32:	b083      	sub	sp, #12
 8005a34:	af00      	add	r7, sp, #0
 8005a36:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8005a3e:	4618      	mov	r0, r3
 8005a40:	370c      	adds	r7, #12
 8005a42:	46bd      	mov	sp, r7
 8005a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a48:	4770      	bx	lr

08005a4a <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 8005a4a:	b480      	push	{r7}
 8005a4c:	b083      	sub	sp, #12
 8005a4e:	af00      	add	r7, sp, #0
 8005a50:	6078      	str	r0, [r7, #4]
 8005a52:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 8005a54:	683b      	ldr	r3, [r7, #0]
 8005a56:	681a      	ldr	r2, [r3, #0]
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005a5e:	2300      	movs	r3, #0
}
 8005a60:	4618      	mov	r0, r3
 8005a62:	370c      	adds	r7, #12
 8005a64:	46bd      	mov	sp, r7
 8005a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a6a:	4770      	bx	lr

08005a6c <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 8005a6c:	b480      	push	{r7}
 8005a6e:	b083      	sub	sp, #12
 8005a70:	af00      	add	r7, sp, #0
 8005a72:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	f043 0203 	orr.w	r2, r3, #3
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8005a80:	2300      	movs	r3, #0
}
 8005a82:	4618      	mov	r0, r3
 8005a84:	370c      	adds	r7, #12
 8005a86:	46bd      	mov	sp, r7
 8005a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a8c:	4770      	bx	lr

08005a8e <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 8005a8e:	b480      	push	{r7}
 8005a90:	b083      	sub	sp, #12
 8005a92:	af00      	add	r7, sp, #0
 8005a94:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	f003 0303 	and.w	r3, r3, #3
}
 8005a9e:	4618      	mov	r0, r3
 8005aa0:	370c      	adds	r7, #12
 8005aa2:	46bd      	mov	sp, r7
 8005aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa8:	4770      	bx	lr
	...

08005aac <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 8005aac:	b480      	push	{r7}
 8005aae:	b085      	sub	sp, #20
 8005ab0:	af00      	add	r7, sp, #0
 8005ab2:	6078      	str	r0, [r7, #4]
 8005ab4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8005ab6:	2300      	movs	r3, #0
 8005ab8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 8005aba:	683b      	ldr	r3, [r7, #0]
 8005abc:	681a      	ldr	r2, [r3, #0]
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8005ac2:	683b      	ldr	r3, [r7, #0]
 8005ac4:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8005ac6:	683b      	ldr	r3, [r7, #0]
 8005ac8:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8005aca:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8005acc:	683b      	ldr	r3, [r7, #0]
 8005ace:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8005ad0:	431a      	orrs	r2, r3
                       Command->CPSM);
 8005ad2:	683b      	ldr	r3, [r7, #0]
 8005ad4:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8005ad6:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8005ad8:	68fa      	ldr	r2, [r7, #12]
 8005ada:	4313      	orrs	r3, r2
 8005adc:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	68da      	ldr	r2, [r3, #12]
 8005ae2:	4b06      	ldr	r3, [pc, #24]	; (8005afc <SDMMC_SendCommand+0x50>)
 8005ae4:	4013      	ands	r3, r2
 8005ae6:	68fa      	ldr	r2, [r7, #12]
 8005ae8:	431a      	orrs	r2, r3
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005aee:	2300      	movs	r3, #0
}
 8005af0:	4618      	mov	r0, r3
 8005af2:	3714      	adds	r7, #20
 8005af4:	46bd      	mov	sp, r7
 8005af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005afa:	4770      	bx	lr
 8005afc:	fffee0c0 	.word	0xfffee0c0

08005b00 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8005b00:	b480      	push	{r7}
 8005b02:	b083      	sub	sp, #12
 8005b04:	af00      	add	r7, sp, #0
 8005b06:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	691b      	ldr	r3, [r3, #16]
 8005b0c:	b2db      	uxtb	r3, r3
}
 8005b0e:	4618      	mov	r0, r3
 8005b10:	370c      	adds	r7, #12
 8005b12:	46bd      	mov	sp, r7
 8005b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b18:	4770      	bx	lr

08005b1a <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 8005b1a:	b480      	push	{r7}
 8005b1c:	b085      	sub	sp, #20
 8005b1e:	af00      	add	r7, sp, #0
 8005b20:	6078      	str	r0, [r7, #4]
 8005b22:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	3314      	adds	r3, #20
 8005b28:	461a      	mov	r2, r3
 8005b2a:	683b      	ldr	r3, [r7, #0]
 8005b2c:	4413      	add	r3, r2
 8005b2e:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	681b      	ldr	r3, [r3, #0]
}
 8005b34:	4618      	mov	r0, r3
 8005b36:	3714      	adds	r7, #20
 8005b38:	46bd      	mov	sp, r7
 8005b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b3e:	4770      	bx	lr

08005b40 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 8005b40:	b480      	push	{r7}
 8005b42:	b085      	sub	sp, #20
 8005b44:	af00      	add	r7, sp, #0
 8005b46:	6078      	str	r0, [r7, #4]
 8005b48:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8005b4a:	2300      	movs	r3, #0
 8005b4c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 8005b4e:	683b      	ldr	r3, [r7, #0]
 8005b50:	681a      	ldr	r2, [r3, #0]
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 8005b56:	683b      	ldr	r3, [r7, #0]
 8005b58:	685a      	ldr	r2, [r3, #4]
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8005b5e:	683b      	ldr	r3, [r7, #0]
 8005b60:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8005b62:	683b      	ldr	r3, [r7, #0]
 8005b64:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8005b66:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8005b68:	683b      	ldr	r3, [r7, #0]
 8005b6a:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8005b6c:	431a      	orrs	r2, r3
                       Data->DPSM);
 8005b6e:	683b      	ldr	r3, [r7, #0]
 8005b70:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8005b72:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8005b74:	68fa      	ldr	r2, [r7, #12]
 8005b76:	4313      	orrs	r3, r2
 8005b78:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b7e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	431a      	orrs	r2, r3
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8005b8a:	2300      	movs	r3, #0

}
 8005b8c:	4618      	mov	r0, r3
 8005b8e:	3714      	adds	r7, #20
 8005b90:	46bd      	mov	sp, r7
 8005b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b96:	4770      	bx	lr

08005b98 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8005b98:	b580      	push	{r7, lr}
 8005b9a:	b088      	sub	sp, #32
 8005b9c:	af00      	add	r7, sp, #0
 8005b9e:	6078      	str	r0, [r7, #4]
 8005ba0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8005ba2:	683b      	ldr	r3, [r7, #0]
 8005ba4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8005ba6:	2310      	movs	r3, #16
 8005ba8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005baa:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005bae:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005bb0:	2300      	movs	r3, #0
 8005bb2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005bb4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005bb8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005bba:	f107 0308 	add.w	r3, r7, #8
 8005bbe:	4619      	mov	r1, r3
 8005bc0:	6878      	ldr	r0, [r7, #4]
 8005bc2:	f7ff ff73 	bl	8005aac <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8005bc6:	f241 3288 	movw	r2, #5000	; 0x1388
 8005bca:	2110      	movs	r1, #16
 8005bcc:	6878      	ldr	r0, [r7, #4]
 8005bce:	f000 faaf 	bl	8006130 <SDMMC_GetCmdResp1>
 8005bd2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005bd4:	69fb      	ldr	r3, [r7, #28]
}
 8005bd6:	4618      	mov	r0, r3
 8005bd8:	3720      	adds	r7, #32
 8005bda:	46bd      	mov	sp, r7
 8005bdc:	bd80      	pop	{r7, pc}

08005bde <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8005bde:	b580      	push	{r7, lr}
 8005be0:	b088      	sub	sp, #32
 8005be2:	af00      	add	r7, sp, #0
 8005be4:	6078      	str	r0, [r7, #4]
 8005be6:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8005be8:	683b      	ldr	r3, [r7, #0]
 8005bea:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8005bec:	2311      	movs	r3, #17
 8005bee:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005bf0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005bf4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005bf6:	2300      	movs	r3, #0
 8005bf8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005bfa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005bfe:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005c00:	f107 0308 	add.w	r3, r7, #8
 8005c04:	4619      	mov	r1, r3
 8005c06:	6878      	ldr	r0, [r7, #4]
 8005c08:	f7ff ff50 	bl	8005aac <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8005c0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c10:	2111      	movs	r1, #17
 8005c12:	6878      	ldr	r0, [r7, #4]
 8005c14:	f000 fa8c 	bl	8006130 <SDMMC_GetCmdResp1>
 8005c18:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005c1a:	69fb      	ldr	r3, [r7, #28]
}
 8005c1c:	4618      	mov	r0, r3
 8005c1e:	3720      	adds	r7, #32
 8005c20:	46bd      	mov	sp, r7
 8005c22:	bd80      	pop	{r7, pc}

08005c24 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8005c24:	b580      	push	{r7, lr}
 8005c26:	b088      	sub	sp, #32
 8005c28:	af00      	add	r7, sp, #0
 8005c2a:	6078      	str	r0, [r7, #4]
 8005c2c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8005c2e:	683b      	ldr	r3, [r7, #0]
 8005c30:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8005c32:	2312      	movs	r3, #18
 8005c34:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005c36:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005c3a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005c3c:	2300      	movs	r3, #0
 8005c3e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005c40:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005c44:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005c46:	f107 0308 	add.w	r3, r7, #8
 8005c4a:	4619      	mov	r1, r3
 8005c4c:	6878      	ldr	r0, [r7, #4]
 8005c4e:	f7ff ff2d 	bl	8005aac <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8005c52:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c56:	2112      	movs	r1, #18
 8005c58:	6878      	ldr	r0, [r7, #4]
 8005c5a:	f000 fa69 	bl	8006130 <SDMMC_GetCmdResp1>
 8005c5e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005c60:	69fb      	ldr	r3, [r7, #28]
}
 8005c62:	4618      	mov	r0, r3
 8005c64:	3720      	adds	r7, #32
 8005c66:	46bd      	mov	sp, r7
 8005c68:	bd80      	pop	{r7, pc}

08005c6a <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8005c6a:	b580      	push	{r7, lr}
 8005c6c:	b088      	sub	sp, #32
 8005c6e:	af00      	add	r7, sp, #0
 8005c70:	6078      	str	r0, [r7, #4]
 8005c72:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8005c74:	683b      	ldr	r3, [r7, #0]
 8005c76:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8005c78:	2318      	movs	r3, #24
 8005c7a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005c7c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005c80:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005c82:	2300      	movs	r3, #0
 8005c84:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005c86:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005c8a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005c8c:	f107 0308 	add.w	r3, r7, #8
 8005c90:	4619      	mov	r1, r3
 8005c92:	6878      	ldr	r0, [r7, #4]
 8005c94:	f7ff ff0a 	bl	8005aac <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8005c98:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c9c:	2118      	movs	r1, #24
 8005c9e:	6878      	ldr	r0, [r7, #4]
 8005ca0:	f000 fa46 	bl	8006130 <SDMMC_GetCmdResp1>
 8005ca4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005ca6:	69fb      	ldr	r3, [r7, #28]
}
 8005ca8:	4618      	mov	r0, r3
 8005caa:	3720      	adds	r7, #32
 8005cac:	46bd      	mov	sp, r7
 8005cae:	bd80      	pop	{r7, pc}

08005cb0 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8005cb0:	b580      	push	{r7, lr}
 8005cb2:	b088      	sub	sp, #32
 8005cb4:	af00      	add	r7, sp, #0
 8005cb6:	6078      	str	r0, [r7, #4]
 8005cb8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8005cba:	683b      	ldr	r3, [r7, #0]
 8005cbc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8005cbe:	2319      	movs	r3, #25
 8005cc0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005cc2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005cc6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005cc8:	2300      	movs	r3, #0
 8005cca:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005ccc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005cd0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005cd2:	f107 0308 	add.w	r3, r7, #8
 8005cd6:	4619      	mov	r1, r3
 8005cd8:	6878      	ldr	r0, [r7, #4]
 8005cda:	f7ff fee7 	bl	8005aac <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8005cde:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ce2:	2119      	movs	r1, #25
 8005ce4:	6878      	ldr	r0, [r7, #4]
 8005ce6:	f000 fa23 	bl	8006130 <SDMMC_GetCmdResp1>
 8005cea:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005cec:	69fb      	ldr	r3, [r7, #28]
}
 8005cee:	4618      	mov	r0, r3
 8005cf0:	3720      	adds	r7, #32
 8005cf2:	46bd      	mov	sp, r7
 8005cf4:	bd80      	pop	{r7, pc}
	...

08005cf8 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 8005cf8:	b580      	push	{r7, lr}
 8005cfa:	b088      	sub	sp, #32
 8005cfc:	af00      	add	r7, sp, #0
 8005cfe:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8005d00:	2300      	movs	r3, #0
 8005d02:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8005d04:	230c      	movs	r3, #12
 8005d06:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005d08:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005d0c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005d0e:	2300      	movs	r3, #0
 8005d10:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005d12:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005d16:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	68db      	ldr	r3, [r3, #12]
 8005d1c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	68db      	ldr	r3, [r3, #12]
 8005d28:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005d30:	f107 0308 	add.w	r3, r7, #8
 8005d34:	4619      	mov	r1, r3
 8005d36:	6878      	ldr	r0, [r7, #4]
 8005d38:	f7ff feb8 	bl	8005aac <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 8005d3c:	4a0b      	ldr	r2, [pc, #44]	; (8005d6c <SDMMC_CmdStopTransfer+0x74>)
 8005d3e:	210c      	movs	r1, #12
 8005d40:	6878      	ldr	r0, [r7, #4]
 8005d42:	f000 f9f5 	bl	8006130 <SDMMC_GetCmdResp1>
 8005d46:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	68db      	ldr	r3, [r3, #12]
 8005d4c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8005d54:	69fb      	ldr	r3, [r7, #28]
 8005d56:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005d5a:	d101      	bne.n	8005d60 <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 8005d5c:	2300      	movs	r3, #0
 8005d5e:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 8005d60:	69fb      	ldr	r3, [r7, #28]
}
 8005d62:	4618      	mov	r0, r3
 8005d64:	3720      	adds	r7, #32
 8005d66:	46bd      	mov	sp, r7
 8005d68:	bd80      	pop	{r7, pc}
 8005d6a:	bf00      	nop
 8005d6c:	05f5e100 	.word	0x05f5e100

08005d70 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 8005d70:	b580      	push	{r7, lr}
 8005d72:	b08a      	sub	sp, #40	; 0x28
 8005d74:	af00      	add	r7, sp, #0
 8005d76:	60f8      	str	r0, [r7, #12]
 8005d78:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8005d7c:	683b      	ldr	r3, [r7, #0]
 8005d7e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8005d80:	2307      	movs	r3, #7
 8005d82:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005d84:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005d88:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005d8a:	2300      	movs	r3, #0
 8005d8c:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005d8e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005d92:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005d94:	f107 0310 	add.w	r3, r7, #16
 8005d98:	4619      	mov	r1, r3
 8005d9a:	68f8      	ldr	r0, [r7, #12]
 8005d9c:	f7ff fe86 	bl	8005aac <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 8005da0:	f241 3288 	movw	r2, #5000	; 0x1388
 8005da4:	2107      	movs	r1, #7
 8005da6:	68f8      	ldr	r0, [r7, #12]
 8005da8:	f000 f9c2 	bl	8006130 <SDMMC_GetCmdResp1>
 8005dac:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8005dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005db0:	4618      	mov	r0, r3
 8005db2:	3728      	adds	r7, #40	; 0x28
 8005db4:	46bd      	mov	sp, r7
 8005db6:	bd80      	pop	{r7, pc}

08005db8 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 8005db8:	b580      	push	{r7, lr}
 8005dba:	b088      	sub	sp, #32
 8005dbc:	af00      	add	r7, sp, #0
 8005dbe:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8005dc0:	2300      	movs	r3, #0
 8005dc2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8005dc4:	2300      	movs	r3, #0
 8005dc6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 8005dc8:	2300      	movs	r3, #0
 8005dca:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005dcc:	2300      	movs	r3, #0
 8005dce:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005dd0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005dd4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005dd6:	f107 0308 	add.w	r3, r7, #8
 8005dda:	4619      	mov	r1, r3
 8005ddc:	6878      	ldr	r0, [r7, #4]
 8005dde:	f7ff fe65 	bl	8005aac <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8005de2:	6878      	ldr	r0, [r7, #4]
 8005de4:	f000 f976 	bl	80060d4 <SDMMC_GetCmdError>
 8005de8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005dea:	69fb      	ldr	r3, [r7, #28]
}
 8005dec:	4618      	mov	r0, r3
 8005dee:	3720      	adds	r7, #32
 8005df0:	46bd      	mov	sp, r7
 8005df2:	bd80      	pop	{r7, pc}

08005df4 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 8005df4:	b580      	push	{r7, lr}
 8005df6:	b088      	sub	sp, #32
 8005df8:	af00      	add	r7, sp, #0
 8005dfa:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8005dfc:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8005e00:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8005e02:	2308      	movs	r3, #8
 8005e04:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005e06:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005e0a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005e0c:	2300      	movs	r3, #0
 8005e0e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005e10:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005e14:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005e16:	f107 0308 	add.w	r3, r7, #8
 8005e1a:	4619      	mov	r1, r3
 8005e1c:	6878      	ldr	r0, [r7, #4]
 8005e1e:	f7ff fe45 	bl	8005aac <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 8005e22:	6878      	ldr	r0, [r7, #4]
 8005e24:	f000 fb78 	bl	8006518 <SDMMC_GetCmdResp7>
 8005e28:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005e2a:	69fb      	ldr	r3, [r7, #28]
}
 8005e2c:	4618      	mov	r0, r3
 8005e2e:	3720      	adds	r7, #32
 8005e30:	46bd      	mov	sp, r7
 8005e32:	bd80      	pop	{r7, pc}

08005e34 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8005e34:	b580      	push	{r7, lr}
 8005e36:	b088      	sub	sp, #32
 8005e38:	af00      	add	r7, sp, #0
 8005e3a:	6078      	str	r0, [r7, #4]
 8005e3c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8005e3e:	683b      	ldr	r3, [r7, #0]
 8005e40:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8005e42:	2337      	movs	r3, #55	; 0x37
 8005e44:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005e46:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005e4a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005e4c:	2300      	movs	r3, #0
 8005e4e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005e50:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005e54:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005e56:	f107 0308 	add.w	r3, r7, #8
 8005e5a:	4619      	mov	r1, r3
 8005e5c:	6878      	ldr	r0, [r7, #4]
 8005e5e:	f7ff fe25 	bl	8005aac <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 8005e62:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e66:	2137      	movs	r1, #55	; 0x37
 8005e68:	6878      	ldr	r0, [r7, #4]
 8005e6a:	f000 f961 	bl	8006130 <SDMMC_GetCmdResp1>
 8005e6e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005e70:	69fb      	ldr	r3, [r7, #28]
}
 8005e72:	4618      	mov	r0, r3
 8005e74:	3720      	adds	r7, #32
 8005e76:	46bd      	mov	sp, r7
 8005e78:	bd80      	pop	{r7, pc}

08005e7a <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8005e7a:	b580      	push	{r7, lr}
 8005e7c:	b088      	sub	sp, #32
 8005e7e:	af00      	add	r7, sp, #0
 8005e80:	6078      	str	r0, [r7, #4]
 8005e82:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 8005e84:	683b      	ldr	r3, [r7, #0]
 8005e86:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8005e88:	2329      	movs	r3, #41	; 0x29
 8005e8a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005e8c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005e90:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005e92:	2300      	movs	r3, #0
 8005e94:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005e96:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005e9a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005e9c:	f107 0308 	add.w	r3, r7, #8
 8005ea0:	4619      	mov	r1, r3
 8005ea2:	6878      	ldr	r0, [r7, #4]
 8005ea4:	f7ff fe02 	bl	8005aac <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8005ea8:	6878      	ldr	r0, [r7, #4]
 8005eaa:	f000 fa7d 	bl	80063a8 <SDMMC_GetCmdResp3>
 8005eae:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005eb0:	69fb      	ldr	r3, [r7, #28]
}
 8005eb2:	4618      	mov	r0, r3
 8005eb4:	3720      	adds	r7, #32
 8005eb6:	46bd      	mov	sp, r7
 8005eb8:	bd80      	pop	{r7, pc}

08005eba <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 8005eba:	b580      	push	{r7, lr}
 8005ebc:	b088      	sub	sp, #32
 8005ebe:	af00      	add	r7, sp, #0
 8005ec0:	6078      	str	r0, [r7, #4]
 8005ec2:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8005ec4:	683b      	ldr	r3, [r7, #0]
 8005ec6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8005ec8:	2306      	movs	r3, #6
 8005eca:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005ecc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005ed0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005ed2:	2300      	movs	r3, #0
 8005ed4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005ed6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005eda:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005edc:	f107 0308 	add.w	r3, r7, #8
 8005ee0:	4619      	mov	r1, r3
 8005ee2:	6878      	ldr	r0, [r7, #4]
 8005ee4:	f7ff fde2 	bl	8005aac <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 8005ee8:	f241 3288 	movw	r2, #5000	; 0x1388
 8005eec:	2106      	movs	r1, #6
 8005eee:	6878      	ldr	r0, [r7, #4]
 8005ef0:	f000 f91e 	bl	8006130 <SDMMC_GetCmdResp1>
 8005ef4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005ef6:	69fb      	ldr	r3, [r7, #28]
}
 8005ef8:	4618      	mov	r0, r3
 8005efa:	3720      	adds	r7, #32
 8005efc:	46bd      	mov	sp, r7
 8005efe:	bd80      	pop	{r7, pc}

08005f00 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 8005f00:	b580      	push	{r7, lr}
 8005f02:	b088      	sub	sp, #32
 8005f04:	af00      	add	r7, sp, #0
 8005f06:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8005f08:	2300      	movs	r3, #0
 8005f0a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8005f0c:	2333      	movs	r3, #51	; 0x33
 8005f0e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005f10:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005f14:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005f16:	2300      	movs	r3, #0
 8005f18:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005f1a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005f1e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005f20:	f107 0308 	add.w	r3, r7, #8
 8005f24:	4619      	mov	r1, r3
 8005f26:	6878      	ldr	r0, [r7, #4]
 8005f28:	f7ff fdc0 	bl	8005aac <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 8005f2c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f30:	2133      	movs	r1, #51	; 0x33
 8005f32:	6878      	ldr	r0, [r7, #4]
 8005f34:	f000 f8fc 	bl	8006130 <SDMMC_GetCmdResp1>
 8005f38:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005f3a:	69fb      	ldr	r3, [r7, #28]
}
 8005f3c:	4618      	mov	r0, r3
 8005f3e:	3720      	adds	r7, #32
 8005f40:	46bd      	mov	sp, r7
 8005f42:	bd80      	pop	{r7, pc}

08005f44 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 8005f44:	b580      	push	{r7, lr}
 8005f46:	b088      	sub	sp, #32
 8005f48:	af00      	add	r7, sp, #0
 8005f4a:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8005f4c:	2300      	movs	r3, #0
 8005f4e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8005f50:	2302      	movs	r3, #2
 8005f52:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8005f54:	f44f 7340 	mov.w	r3, #768	; 0x300
 8005f58:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005f5a:	2300      	movs	r3, #0
 8005f5c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005f5e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005f62:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005f64:	f107 0308 	add.w	r3, r7, #8
 8005f68:	4619      	mov	r1, r3
 8005f6a:	6878      	ldr	r0, [r7, #4]
 8005f6c:	f7ff fd9e 	bl	8005aac <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8005f70:	6878      	ldr	r0, [r7, #4]
 8005f72:	f000 f9cf 	bl	8006314 <SDMMC_GetCmdResp2>
 8005f76:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005f78:	69fb      	ldr	r3, [r7, #28]
}
 8005f7a:	4618      	mov	r0, r3
 8005f7c:	3720      	adds	r7, #32
 8005f7e:	46bd      	mov	sp, r7
 8005f80:	bd80      	pop	{r7, pc}

08005f82 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8005f82:	b580      	push	{r7, lr}
 8005f84:	b088      	sub	sp, #32
 8005f86:	af00      	add	r7, sp, #0
 8005f88:	6078      	str	r0, [r7, #4]
 8005f8a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8005f8c:	683b      	ldr	r3, [r7, #0]
 8005f8e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8005f90:	2309      	movs	r3, #9
 8005f92:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8005f94:	f44f 7340 	mov.w	r3, #768	; 0x300
 8005f98:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005f9a:	2300      	movs	r3, #0
 8005f9c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005f9e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005fa2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005fa4:	f107 0308 	add.w	r3, r7, #8
 8005fa8:	4619      	mov	r1, r3
 8005faa:	6878      	ldr	r0, [r7, #4]
 8005fac:	f7ff fd7e 	bl	8005aac <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8005fb0:	6878      	ldr	r0, [r7, #4]
 8005fb2:	f000 f9af 	bl	8006314 <SDMMC_GetCmdResp2>
 8005fb6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005fb8:	69fb      	ldr	r3, [r7, #28]
}
 8005fba:	4618      	mov	r0, r3
 8005fbc:	3720      	adds	r7, #32
 8005fbe:	46bd      	mov	sp, r7
 8005fc0:	bd80      	pop	{r7, pc}

08005fc2 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 8005fc2:	b580      	push	{r7, lr}
 8005fc4:	b088      	sub	sp, #32
 8005fc6:	af00      	add	r7, sp, #0
 8005fc8:	6078      	str	r0, [r7, #4]
 8005fca:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8005fcc:	2300      	movs	r3, #0
 8005fce:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8005fd0:	2303      	movs	r3, #3
 8005fd2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005fd4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005fd8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005fda:	2300      	movs	r3, #0
 8005fdc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005fde:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005fe2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005fe4:	f107 0308 	add.w	r3, r7, #8
 8005fe8:	4619      	mov	r1, r3
 8005fea:	6878      	ldr	r0, [r7, #4]
 8005fec:	f7ff fd5e 	bl	8005aac <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8005ff0:	683a      	ldr	r2, [r7, #0]
 8005ff2:	2103      	movs	r1, #3
 8005ff4:	6878      	ldr	r0, [r7, #4]
 8005ff6:	f000 fa17 	bl	8006428 <SDMMC_GetCmdResp6>
 8005ffa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005ffc:	69fb      	ldr	r3, [r7, #28]
}
 8005ffe:	4618      	mov	r0, r3
 8006000:	3720      	adds	r7, #32
 8006002:	46bd      	mov	sp, r7
 8006004:	bd80      	pop	{r7, pc}

08006006 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8006006:	b580      	push	{r7, lr}
 8006008:	b088      	sub	sp, #32
 800600a:	af00      	add	r7, sp, #0
 800600c:	6078      	str	r0, [r7, #4]
 800600e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 8006010:	683b      	ldr	r3, [r7, #0]
 8006012:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8006014:	230d      	movs	r3, #13
 8006016:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8006018:	f44f 7380 	mov.w	r3, #256	; 0x100
 800601c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800601e:	2300      	movs	r3, #0
 8006020:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006022:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006026:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006028:	f107 0308 	add.w	r3, r7, #8
 800602c:	4619      	mov	r1, r3
 800602e:	6878      	ldr	r0, [r7, #4]
 8006030:	f7ff fd3c 	bl	8005aac <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 8006034:	f241 3288 	movw	r2, #5000	; 0x1388
 8006038:	210d      	movs	r1, #13
 800603a:	6878      	ldr	r0, [r7, #4]
 800603c:	f000 f878 	bl	8006130 <SDMMC_GetCmdResp1>
 8006040:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006042:	69fb      	ldr	r3, [r7, #28]
}
 8006044:	4618      	mov	r0, r3
 8006046:	3720      	adds	r7, #32
 8006048:	46bd      	mov	sp, r7
 800604a:	bd80      	pop	{r7, pc}

0800604c <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 800604c:	b580      	push	{r7, lr}
 800604e:	b088      	sub	sp, #32
 8006050:	af00      	add	r7, sp, #0
 8006052:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8006054:	2300      	movs	r3, #0
 8006056:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 8006058:	230d      	movs	r3, #13
 800605a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800605c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006060:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006062:	2300      	movs	r3, #0
 8006064:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006066:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800606a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800606c:	f107 0308 	add.w	r3, r7, #8
 8006070:	4619      	mov	r1, r3
 8006072:	6878      	ldr	r0, [r7, #4]
 8006074:	f7ff fd1a 	bl	8005aac <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 8006078:	f241 3288 	movw	r2, #5000	; 0x1388
 800607c:	210d      	movs	r1, #13
 800607e:	6878      	ldr	r0, [r7, #4]
 8006080:	f000 f856 	bl	8006130 <SDMMC_GetCmdResp1>
 8006084:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006086:	69fb      	ldr	r3, [r7, #28]
}
 8006088:	4618      	mov	r0, r3
 800608a:	3720      	adds	r7, #32
 800608c:	46bd      	mov	sp, r7
 800608e:	bd80      	pop	{r7, pc}

08006090 <SDMMC_CmdVoltageSwitch>:
  *         condition register (OCR)
  * @param  None
  * @retval HAL status
  */
uint32_t SDMMC_CmdVoltageSwitch(SDMMC_TypeDef *SDMMCx)
{
 8006090:	b580      	push	{r7, lr}
 8006092:	b088      	sub	sp, #32
 8006094:	af00      	add	r7, sp, #0
 8006096:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0x00000000;
 8006098:	2300      	movs	r3, #0
 800609a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_VOLTAGE_SWITCH;
 800609c:	230b      	movs	r3, #11
 800609e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80060a0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80060a4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80060a6:	2300      	movs	r3, #0
 80060a8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80060aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80060ae:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80060b0:	f107 0308 	add.w	r3, r7, #8
 80060b4:	4619      	mov	r1, r3
 80060b6:	6878      	ldr	r0, [r7, #4]
 80060b8:	f7ff fcf8 	bl	8005aac <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_VOLTAGE_SWITCH, SDMMC_CMDTIMEOUT);
 80060bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80060c0:	210b      	movs	r1, #11
 80060c2:	6878      	ldr	r0, [r7, #4]
 80060c4:	f000 f834 	bl	8006130 <SDMMC_GetCmdResp1>
 80060c8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80060ca:	69fb      	ldr	r3, [r7, #28]
}
 80060cc:	4618      	mov	r0, r3
 80060ce:	3720      	adds	r7, #32
 80060d0:	46bd      	mov	sp, r7
 80060d2:	bd80      	pop	{r7, pc}

080060d4 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 80060d4:	b480      	push	{r7}
 80060d6:	b085      	sub	sp, #20
 80060d8:	af00      	add	r7, sp, #0
 80060da:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80060dc:	4b11      	ldr	r3, [pc, #68]	; (8006124 <SDMMC_GetCmdError+0x50>)
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	4a11      	ldr	r2, [pc, #68]	; (8006128 <SDMMC_GetCmdError+0x54>)
 80060e2:	fba2 2303 	umull	r2, r3, r2, r3
 80060e6:	0a5b      	lsrs	r3, r3, #9
 80060e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80060ec:	fb02 f303 	mul.w	r3, r2, r3
 80060f0:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	1e5a      	subs	r2, r3, #1
 80060f6:	60fa      	str	r2, [r7, #12]
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d102      	bne.n	8006102 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80060fc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006100:	e009      	b.n	8006116 <SDMMC_GetCmdError+0x42>
    }

  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006106:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800610a:	2b00      	cmp	r3, #0
 800610c:	d0f1      	beq.n	80060f2 <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	4a06      	ldr	r2, [pc, #24]	; (800612c <SDMMC_GetCmdError+0x58>)
 8006112:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 8006114:	2300      	movs	r3, #0
}
 8006116:	4618      	mov	r0, r3
 8006118:	3714      	adds	r7, #20
 800611a:	46bd      	mov	sp, r7
 800611c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006120:	4770      	bx	lr
 8006122:	bf00      	nop
 8006124:	24000000 	.word	0x24000000
 8006128:	10624dd3 	.word	0x10624dd3
 800612c:	002000c5 	.word	0x002000c5

08006130 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 8006130:	b580      	push	{r7, lr}
 8006132:	b088      	sub	sp, #32
 8006134:	af00      	add	r7, sp, #0
 8006136:	60f8      	str	r0, [r7, #12]
 8006138:	460b      	mov	r3, r1
 800613a:	607a      	str	r2, [r7, #4]
 800613c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800613e:	4b70      	ldr	r3, [pc, #448]	; (8006300 <SDMMC_GetCmdResp1+0x1d0>)
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	4a70      	ldr	r2, [pc, #448]	; (8006304 <SDMMC_GetCmdResp1+0x1d4>)
 8006144:	fba2 2303 	umull	r2, r3, r2, r3
 8006148:	0a5a      	lsrs	r2, r3, #9
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	fb02 f303 	mul.w	r3, r2, r3
 8006150:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8006152:	69fb      	ldr	r3, [r7, #28]
 8006154:	1e5a      	subs	r2, r3, #1
 8006156:	61fa      	str	r2, [r7, #28]
 8006158:	2b00      	cmp	r3, #0
 800615a:	d102      	bne.n	8006162 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800615c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006160:	e0c9      	b.n	80062f6 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006166:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 8006168:	69ba      	ldr	r2, [r7, #24]
 800616a:	4b67      	ldr	r3, [pc, #412]	; (8006308 <SDMMC_GetCmdResp1+0x1d8>)
 800616c:	4013      	ands	r3, r2
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800616e:	2b00      	cmp	r3, #0
 8006170:	d0ef      	beq.n	8006152 <SDMMC_GetCmdResp1+0x22>
 8006172:	69bb      	ldr	r3, [r7, #24]
 8006174:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 8006178:	2b00      	cmp	r3, #0
 800617a:	d1ea      	bne.n	8006152 <SDMMC_GetCmdResp1+0x22>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006180:	f003 0304 	and.w	r3, r3, #4
 8006184:	2b00      	cmp	r3, #0
 8006186:	d004      	beq.n	8006192 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	2204      	movs	r2, #4
 800618c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800618e:	2304      	movs	r3, #4
 8006190:	e0b1      	b.n	80062f6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006196:	f003 0301 	and.w	r3, r3, #1
 800619a:	2b00      	cmp	r3, #0
 800619c:	d004      	beq.n	80061a8 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	2201      	movs	r2, #1
 80061a2:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 80061a4:	2301      	movs	r3, #1
 80061a6:	e0a6      	b.n	80062f6 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	4a58      	ldr	r2, [pc, #352]	; (800630c <SDMMC_GetCmdResp1+0x1dc>)
 80061ac:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 80061ae:	68f8      	ldr	r0, [r7, #12]
 80061b0:	f7ff fca6 	bl	8005b00 <SDMMC_GetCommandResponse>
 80061b4:	4603      	mov	r3, r0
 80061b6:	461a      	mov	r2, r3
 80061b8:	7afb      	ldrb	r3, [r7, #11]
 80061ba:	4293      	cmp	r3, r2
 80061bc:	d001      	beq.n	80061c2 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80061be:	2301      	movs	r3, #1
 80061c0:	e099      	b.n	80062f6 <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 80061c2:	2100      	movs	r1, #0
 80061c4:	68f8      	ldr	r0, [r7, #12]
 80061c6:	f7ff fca8 	bl	8005b1a <SDMMC_GetResponse>
 80061ca:	6178      	str	r0, [r7, #20]

  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 80061cc:	697a      	ldr	r2, [r7, #20]
 80061ce:	4b50      	ldr	r3, [pc, #320]	; (8006310 <SDMMC_GetCmdResp1+0x1e0>)
 80061d0:	4013      	ands	r3, r2
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d101      	bne.n	80061da <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 80061d6:	2300      	movs	r3, #0
 80061d8:	e08d      	b.n	80062f6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 80061da:	697b      	ldr	r3, [r7, #20]
 80061dc:	2b00      	cmp	r3, #0
 80061de:	da02      	bge.n	80061e6 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 80061e0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80061e4:	e087      	b.n	80062f6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 80061e6:	697b      	ldr	r3, [r7, #20]
 80061e8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d001      	beq.n	80061f4 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 80061f0:	2340      	movs	r3, #64	; 0x40
 80061f2:	e080      	b.n	80062f6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 80061f4:	697b      	ldr	r3, [r7, #20]
 80061f6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d001      	beq.n	8006202 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 80061fe:	2380      	movs	r3, #128	; 0x80
 8006200:	e079      	b.n	80062f6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8006202:	697b      	ldr	r3, [r7, #20]
 8006204:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006208:	2b00      	cmp	r3, #0
 800620a:	d002      	beq.n	8006212 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800620c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006210:	e071      	b.n	80062f6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8006212:	697b      	ldr	r3, [r7, #20]
 8006214:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006218:	2b00      	cmp	r3, #0
 800621a:	d002      	beq.n	8006222 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800621c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006220:	e069      	b.n	80062f6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8006222:	697b      	ldr	r3, [r7, #20]
 8006224:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006228:	2b00      	cmp	r3, #0
 800622a:	d002      	beq.n	8006232 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800622c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006230:	e061      	b.n	80062f6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8006232:	697b      	ldr	r3, [r7, #20]
 8006234:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006238:	2b00      	cmp	r3, #0
 800623a:	d002      	beq.n	8006242 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800623c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006240:	e059      	b.n	80062f6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8006242:	697b      	ldr	r3, [r7, #20]
 8006244:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006248:	2b00      	cmp	r3, #0
 800624a:	d002      	beq.n	8006252 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800624c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006250:	e051      	b.n	80062f6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8006252:	697b      	ldr	r3, [r7, #20]
 8006254:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006258:	2b00      	cmp	r3, #0
 800625a:	d002      	beq.n	8006262 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800625c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006260:	e049      	b.n	80062f6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8006262:	697b      	ldr	r3, [r7, #20]
 8006264:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006268:	2b00      	cmp	r3, #0
 800626a:	d002      	beq.n	8006272 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800626c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006270:	e041      	b.n	80062f6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8006272:	697b      	ldr	r3, [r7, #20]
 8006274:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006278:	2b00      	cmp	r3, #0
 800627a:	d002      	beq.n	8006282 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800627c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006280:	e039      	b.n	80062f6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8006282:	697b      	ldr	r3, [r7, #20]
 8006284:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006288:	2b00      	cmp	r3, #0
 800628a:	d002      	beq.n	8006292 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800628c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006290:	e031      	b.n	80062f6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8006292:	697b      	ldr	r3, [r7, #20]
 8006294:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006298:	2b00      	cmp	r3, #0
 800629a:	d002      	beq.n	80062a2 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800629c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80062a0:	e029      	b.n	80062f6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 80062a2:	697b      	ldr	r3, [r7, #20]
 80062a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d002      	beq.n	80062b2 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 80062ac:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80062b0:	e021      	b.n	80062f6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 80062b2:	697b      	ldr	r3, [r7, #20]
 80062b4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d002      	beq.n	80062c2 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 80062bc:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80062c0:	e019      	b.n	80062f6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 80062c2:	697b      	ldr	r3, [r7, #20]
 80062c4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d002      	beq.n	80062d2 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 80062cc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80062d0:	e011      	b.n	80062f6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 80062d2:	697b      	ldr	r3, [r7, #20]
 80062d4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d002      	beq.n	80062e2 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 80062dc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80062e0:	e009      	b.n	80062f6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 80062e2:	697b      	ldr	r3, [r7, #20]
 80062e4:	f003 0308 	and.w	r3, r3, #8
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d002      	beq.n	80062f2 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 80062ec:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80062f0:	e001      	b.n	80062f6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80062f2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80062f6:	4618      	mov	r0, r3
 80062f8:	3720      	adds	r7, #32
 80062fa:	46bd      	mov	sp, r7
 80062fc:	bd80      	pop	{r7, pc}
 80062fe:	bf00      	nop
 8006300:	24000000 	.word	0x24000000
 8006304:	10624dd3 	.word	0x10624dd3
 8006308:	00200045 	.word	0x00200045
 800630c:	002000c5 	.word	0x002000c5
 8006310:	fdffe008 	.word	0xfdffe008

08006314 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 8006314:	b480      	push	{r7}
 8006316:	b085      	sub	sp, #20
 8006318:	af00      	add	r7, sp, #0
 800631a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800631c:	4b1f      	ldr	r3, [pc, #124]	; (800639c <SDMMC_GetCmdResp2+0x88>)
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	4a1f      	ldr	r2, [pc, #124]	; (80063a0 <SDMMC_GetCmdResp2+0x8c>)
 8006322:	fba2 2303 	umull	r2, r3, r2, r3
 8006326:	0a5b      	lsrs	r3, r3, #9
 8006328:	f241 3288 	movw	r2, #5000	; 0x1388
 800632c:	fb02 f303 	mul.w	r3, r2, r3
 8006330:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	1e5a      	subs	r2, r3, #1
 8006336:	60fa      	str	r2, [r7, #12]
 8006338:	2b00      	cmp	r3, #0
 800633a:	d102      	bne.n	8006342 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800633c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006340:	e026      	b.n	8006390 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006346:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8006348:	68bb      	ldr	r3, [r7, #8]
 800634a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800634e:	2b00      	cmp	r3, #0
 8006350:	d0ef      	beq.n	8006332 <SDMMC_GetCmdResp2+0x1e>
 8006352:	68bb      	ldr	r3, [r7, #8]
 8006354:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8006358:	2b00      	cmp	r3, #0
 800635a:	d1ea      	bne.n	8006332 <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006360:	f003 0304 	and.w	r3, r3, #4
 8006364:	2b00      	cmp	r3, #0
 8006366:	d004      	beq.n	8006372 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	2204      	movs	r2, #4
 800636c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800636e:	2304      	movs	r3, #4
 8006370:	e00e      	b.n	8006390 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006376:	f003 0301 	and.w	r3, r3, #1
 800637a:	2b00      	cmp	r3, #0
 800637c:	d004      	beq.n	8006388 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	2201      	movs	r2, #1
 8006382:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006384:	2301      	movs	r3, #1
 8006386:	e003      	b.n	8006390 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	4a06      	ldr	r2, [pc, #24]	; (80063a4 <SDMMC_GetCmdResp2+0x90>)
 800638c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800638e:	2300      	movs	r3, #0
}
 8006390:	4618      	mov	r0, r3
 8006392:	3714      	adds	r7, #20
 8006394:	46bd      	mov	sp, r7
 8006396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800639a:	4770      	bx	lr
 800639c:	24000000 	.word	0x24000000
 80063a0:	10624dd3 	.word	0x10624dd3
 80063a4:	002000c5 	.word	0x002000c5

080063a8 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 80063a8:	b480      	push	{r7}
 80063aa:	b085      	sub	sp, #20
 80063ac:	af00      	add	r7, sp, #0
 80063ae:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80063b0:	4b1a      	ldr	r3, [pc, #104]	; (800641c <SDMMC_GetCmdResp3+0x74>)
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	4a1a      	ldr	r2, [pc, #104]	; (8006420 <SDMMC_GetCmdResp3+0x78>)
 80063b6:	fba2 2303 	umull	r2, r3, r2, r3
 80063ba:	0a5b      	lsrs	r3, r3, #9
 80063bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80063c0:	fb02 f303 	mul.w	r3, r2, r3
 80063c4:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	1e5a      	subs	r2, r3, #1
 80063ca:	60fa      	str	r2, [r7, #12]
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d102      	bne.n	80063d6 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80063d0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80063d4:	e01b      	b.n	800640e <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063da:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80063dc:	68bb      	ldr	r3, [r7, #8]
 80063de:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d0ef      	beq.n	80063c6 <SDMMC_GetCmdResp3+0x1e>
 80063e6:	68bb      	ldr	r3, [r7, #8]
 80063e8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d1ea      	bne.n	80063c6 <SDMMC_GetCmdResp3+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063f4:	f003 0304 	and.w	r3, r3, #4
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d004      	beq.n	8006406 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	2204      	movs	r2, #4
 8006400:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8006402:	2304      	movs	r3, #4
 8006404:	e003      	b.n	800640e <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	4a06      	ldr	r2, [pc, #24]	; (8006424 <SDMMC_GetCmdResp3+0x7c>)
 800640a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800640c:	2300      	movs	r3, #0
}
 800640e:	4618      	mov	r0, r3
 8006410:	3714      	adds	r7, #20
 8006412:	46bd      	mov	sp, r7
 8006414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006418:	4770      	bx	lr
 800641a:	bf00      	nop
 800641c:	24000000 	.word	0x24000000
 8006420:	10624dd3 	.word	0x10624dd3
 8006424:	002000c5 	.word	0x002000c5

08006428 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8006428:	b580      	push	{r7, lr}
 800642a:	b088      	sub	sp, #32
 800642c:	af00      	add	r7, sp, #0
 800642e:	60f8      	str	r0, [r7, #12]
 8006430:	460b      	mov	r3, r1
 8006432:	607a      	str	r2, [r7, #4]
 8006434:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8006436:	4b35      	ldr	r3, [pc, #212]	; (800650c <SDMMC_GetCmdResp6+0xe4>)
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	4a35      	ldr	r2, [pc, #212]	; (8006510 <SDMMC_GetCmdResp6+0xe8>)
 800643c:	fba2 2303 	umull	r2, r3, r2, r3
 8006440:	0a5b      	lsrs	r3, r3, #9
 8006442:	f241 3288 	movw	r2, #5000	; 0x1388
 8006446:	fb02 f303 	mul.w	r3, r2, r3
 800644a:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800644c:	69fb      	ldr	r3, [r7, #28]
 800644e:	1e5a      	subs	r2, r3, #1
 8006450:	61fa      	str	r2, [r7, #28]
 8006452:	2b00      	cmp	r3, #0
 8006454:	d102      	bne.n	800645c <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006456:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800645a:	e052      	b.n	8006502 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006460:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8006462:	69bb      	ldr	r3, [r7, #24]
 8006464:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8006468:	2b00      	cmp	r3, #0
 800646a:	d0ef      	beq.n	800644c <SDMMC_GetCmdResp6+0x24>
 800646c:	69bb      	ldr	r3, [r7, #24]
 800646e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8006472:	2b00      	cmp	r3, #0
 8006474:	d1ea      	bne.n	800644c <SDMMC_GetCmdResp6+0x24>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800647a:	f003 0304 	and.w	r3, r3, #4
 800647e:	2b00      	cmp	r3, #0
 8006480:	d004      	beq.n	800648c <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	2204      	movs	r2, #4
 8006486:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8006488:	2304      	movs	r3, #4
 800648a:	e03a      	b.n	8006502 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006490:	f003 0301 	and.w	r3, r3, #1
 8006494:	2b00      	cmp	r3, #0
 8006496:	d004      	beq.n	80064a2 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	2201      	movs	r2, #1
 800649c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800649e:	2301      	movs	r3, #1
 80064a0:	e02f      	b.n	8006502 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 80064a2:	68f8      	ldr	r0, [r7, #12]
 80064a4:	f7ff fb2c 	bl	8005b00 <SDMMC_GetCommandResponse>
 80064a8:	4603      	mov	r3, r0
 80064aa:	461a      	mov	r2, r3
 80064ac:	7afb      	ldrb	r3, [r7, #11]
 80064ae:	4293      	cmp	r3, r2
 80064b0:	d001      	beq.n	80064b6 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80064b2:	2301      	movs	r3, #1
 80064b4:	e025      	b.n	8006502 <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	4a16      	ldr	r2, [pc, #88]	; (8006514 <SDMMC_GetCmdResp6+0xec>)
 80064ba:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 80064bc:	2100      	movs	r1, #0
 80064be:	68f8      	ldr	r0, [r7, #12]
 80064c0:	f7ff fb2b 	bl	8005b1a <SDMMC_GetResponse>
 80064c4:	6178      	str	r0, [r7, #20]

  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 80064c6:	697b      	ldr	r3, [r7, #20]
 80064c8:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d106      	bne.n	80064de <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 80064d0:	697b      	ldr	r3, [r7, #20]
 80064d2:	0c1b      	lsrs	r3, r3, #16
 80064d4:	b29a      	uxth	r2, r3
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 80064da:	2300      	movs	r3, #0
 80064dc:	e011      	b.n	8006502 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 80064de:	697b      	ldr	r3, [r7, #20]
 80064e0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d002      	beq.n	80064ee <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80064e8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80064ec:	e009      	b.n	8006502 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 80064ee:	697b      	ldr	r3, [r7, #20]
 80064f0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d002      	beq.n	80064fe <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80064f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80064fc:	e001      	b.n	8006502 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80064fe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8006502:	4618      	mov	r0, r3
 8006504:	3720      	adds	r7, #32
 8006506:	46bd      	mov	sp, r7
 8006508:	bd80      	pop	{r7, pc}
 800650a:	bf00      	nop
 800650c:	24000000 	.word	0x24000000
 8006510:	10624dd3 	.word	0x10624dd3
 8006514:	002000c5 	.word	0x002000c5

08006518 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 8006518:	b480      	push	{r7}
 800651a:	b085      	sub	sp, #20
 800651c:	af00      	add	r7, sp, #0
 800651e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8006520:	4b22      	ldr	r3, [pc, #136]	; (80065ac <SDMMC_GetCmdResp7+0x94>)
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	4a22      	ldr	r2, [pc, #136]	; (80065b0 <SDMMC_GetCmdResp7+0x98>)
 8006526:	fba2 2303 	umull	r2, r3, r2, r3
 800652a:	0a5b      	lsrs	r3, r3, #9
 800652c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006530:	fb02 f303 	mul.w	r3, r2, r3
 8006534:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	1e5a      	subs	r2, r3, #1
 800653a:	60fa      	str	r2, [r7, #12]
 800653c:	2b00      	cmp	r3, #0
 800653e:	d102      	bne.n	8006546 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006540:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006544:	e02c      	b.n	80065a0 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800654a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800654c:	68bb      	ldr	r3, [r7, #8]
 800654e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8006552:	2b00      	cmp	r3, #0
 8006554:	d0ef      	beq.n	8006536 <SDMMC_GetCmdResp7+0x1e>
 8006556:	68bb      	ldr	r3, [r7, #8]
 8006558:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800655c:	2b00      	cmp	r3, #0
 800655e:	d1ea      	bne.n	8006536 <SDMMC_GetCmdResp7+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006564:	f003 0304 	and.w	r3, r3, #4
 8006568:	2b00      	cmp	r3, #0
 800656a:	d004      	beq.n	8006576 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	2204      	movs	r2, #4
 8006570:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8006572:	2304      	movs	r3, #4
 8006574:	e014      	b.n	80065a0 <SDMMC_GetCmdResp7+0x88>
  }

  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800657a:	f003 0301 	and.w	r3, r3, #1
 800657e:	2b00      	cmp	r3, #0
 8006580:	d004      	beq.n	800658c <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	2201      	movs	r2, #1
 8006586:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006588:	2301      	movs	r3, #1
 800658a:	e009      	b.n	80065a0 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006590:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006594:	2b00      	cmp	r3, #0
 8006596:	d002      	beq.n	800659e <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	2240      	movs	r2, #64	; 0x40
 800659c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800659e:	2300      	movs	r3, #0

}
 80065a0:	4618      	mov	r0, r3
 80065a2:	3714      	adds	r7, #20
 80065a4:	46bd      	mov	sp, r7
 80065a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065aa:	4770      	bx	lr
 80065ac:	24000000 	.word	0x24000000
 80065b0:	10624dd3 	.word	0x10624dd3

080065b4 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80065b4:	b580      	push	{r7, lr}
 80065b6:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 80065b8:	4904      	ldr	r1, [pc, #16]	; (80065cc <MX_FATFS_Init+0x18>)
 80065ba:	4805      	ldr	r0, [pc, #20]	; (80065d0 <MX_FATFS_Init+0x1c>)
 80065bc:	f000 f9ca 	bl	8006954 <FATFS_LinkDriver>
 80065c0:	4603      	mov	r3, r0
 80065c2:	461a      	mov	r2, r3
 80065c4:	4b03      	ldr	r3, [pc, #12]	; (80065d4 <MX_FATFS_Init+0x20>)
 80065c6:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80065c8:	bf00      	nop
 80065ca:	bd80      	pop	{r7, pc}
 80065cc:	2400013c 	.word	0x2400013c
 80065d0:	080086a0 	.word	0x080086a0
 80065d4:	24000138 	.word	0x24000138

080065d8 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 80065d8:	b580      	push	{r7, lr}
 80065da:	b082      	sub	sp, #8
 80065dc:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 80065de:	2300      	movs	r3, #0
 80065e0:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 80065e2:	f000 f879 	bl	80066d8 <BSP_SD_IsDetected>
 80065e6:	4603      	mov	r3, r0
 80065e8:	2b01      	cmp	r3, #1
 80065ea:	d001      	beq.n	80065f0 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 80065ec:	2302      	movs	r3, #2
 80065ee:	e012      	b.n	8006616 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 80065f0:	480b      	ldr	r0, [pc, #44]	; (8006620 <BSP_SD_Init+0x48>)
 80065f2:	f7fd fe37 	bl	8004264 <HAL_SD_Init>
 80065f6:	4603      	mov	r3, r0
 80065f8:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 80065fa:	79fb      	ldrb	r3, [r7, #7]
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d109      	bne.n	8006614 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 8006600:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006604:	4806      	ldr	r0, [pc, #24]	; (8006620 <BSP_SD_Init+0x48>)
 8006606:	f7fe fcfb 	bl	8005000 <HAL_SD_ConfigWideBusOperation>
 800660a:	4603      	mov	r3, r0
 800660c:	2b00      	cmp	r3, #0
 800660e:	d001      	beq.n	8006614 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8006610:	2301      	movs	r3, #1
 8006612:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8006614:	79fb      	ldrb	r3, [r7, #7]
}
 8006616:	4618      	mov	r0, r3
 8006618:	3708      	adds	r7, #8
 800661a:	46bd      	mov	sp, r7
 800661c:	bd80      	pop	{r7, pc}
 800661e:	bf00      	nop
 8006620:	240000b4 	.word	0x240000b4

08006624 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8006624:	b580      	push	{r7, lr}
 8006626:	b088      	sub	sp, #32
 8006628:	af02      	add	r7, sp, #8
 800662a:	60f8      	str	r0, [r7, #12]
 800662c:	60b9      	str	r1, [r7, #8]
 800662e:	607a      	str	r2, [r7, #4]
 8006630:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8006632:	2300      	movs	r3, #0
 8006634:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 8006636:	683b      	ldr	r3, [r7, #0]
 8006638:	9300      	str	r3, [sp, #0]
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	68ba      	ldr	r2, [r7, #8]
 800663e:	68f9      	ldr	r1, [r7, #12]
 8006640:	4806      	ldr	r0, [pc, #24]	; (800665c <BSP_SD_ReadBlocks+0x38>)
 8006642:	f7fd ff33 	bl	80044ac <HAL_SD_ReadBlocks>
 8006646:	4603      	mov	r3, r0
 8006648:	2b00      	cmp	r3, #0
 800664a:	d001      	beq.n	8006650 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800664c:	2301      	movs	r3, #1
 800664e:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8006650:	7dfb      	ldrb	r3, [r7, #23]
}
 8006652:	4618      	mov	r0, r3
 8006654:	3718      	adds	r7, #24
 8006656:	46bd      	mov	sp, r7
 8006658:	bd80      	pop	{r7, pc}
 800665a:	bf00      	nop
 800665c:	240000b4 	.word	0x240000b4

08006660 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8006660:	b580      	push	{r7, lr}
 8006662:	b088      	sub	sp, #32
 8006664:	af02      	add	r7, sp, #8
 8006666:	60f8      	str	r0, [r7, #12]
 8006668:	60b9      	str	r1, [r7, #8]
 800666a:	607a      	str	r2, [r7, #4]
 800666c:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800666e:	2300      	movs	r3, #0
 8006670:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 8006672:	683b      	ldr	r3, [r7, #0]
 8006674:	9300      	str	r3, [sp, #0]
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	68ba      	ldr	r2, [r7, #8]
 800667a:	68f9      	ldr	r1, [r7, #12]
 800667c:	4806      	ldr	r0, [pc, #24]	; (8006698 <BSP_SD_WriteBlocks+0x38>)
 800667e:	f7fe f89f 	bl	80047c0 <HAL_SD_WriteBlocks>
 8006682:	4603      	mov	r3, r0
 8006684:	2b00      	cmp	r3, #0
 8006686:	d001      	beq.n	800668c <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8006688:	2301      	movs	r3, #1
 800668a:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800668c:	7dfb      	ldrb	r3, [r7, #23]
}
 800668e:	4618      	mov	r0, r3
 8006690:	3718      	adds	r7, #24
 8006692:	46bd      	mov	sp, r7
 8006694:	bd80      	pop	{r7, pc}
 8006696:	bf00      	nop
 8006698:	240000b4 	.word	0x240000b4

0800669c <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800669c:	b580      	push	{r7, lr}
 800669e:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 80066a0:	4805      	ldr	r0, [pc, #20]	; (80066b8 <BSP_SD_GetCardState+0x1c>)
 80066a2:	f7fe fd57 	bl	8005154 <HAL_SD_GetCardState>
 80066a6:	4603      	mov	r3, r0
 80066a8:	2b04      	cmp	r3, #4
 80066aa:	bf14      	ite	ne
 80066ac:	2301      	movne	r3, #1
 80066ae:	2300      	moveq	r3, #0
 80066b0:	b2db      	uxtb	r3, r3
}
 80066b2:	4618      	mov	r0, r3
 80066b4:	bd80      	pop	{r7, pc}
 80066b6:	bf00      	nop
 80066b8:	240000b4 	.word	0x240000b4

080066bc <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 80066bc:	b580      	push	{r7, lr}
 80066be:	b082      	sub	sp, #8
 80066c0:	af00      	add	r7, sp, #0
 80066c2:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 80066c4:	6879      	ldr	r1, [r7, #4]
 80066c6:	4803      	ldr	r0, [pc, #12]	; (80066d4 <BSP_SD_GetCardInfo+0x18>)
 80066c8:	f7fe fc6e 	bl	8004fa8 <HAL_SD_GetCardInfo>
}
 80066cc:	bf00      	nop
 80066ce:	3708      	adds	r7, #8
 80066d0:	46bd      	mov	sp, r7
 80066d2:	bd80      	pop	{r7, pc}
 80066d4:	240000b4 	.word	0x240000b4

080066d8 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 80066d8:	b480      	push	{r7}
 80066da:	b083      	sub	sp, #12
 80066dc:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 80066de:	2301      	movs	r3, #1
 80066e0:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN IsDetectedSection */
  /* user code can be inserted here */
  /* USER CODE END IsDetectedSection */

  return status;
 80066e2:	79fb      	ldrb	r3, [r7, #7]
 80066e4:	b2db      	uxtb	r3, r3
}
 80066e6:	4618      	mov	r0, r3
 80066e8:	370c      	adds	r7, #12
 80066ea:	46bd      	mov	sp, r7
 80066ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f0:	4770      	bx	lr
	...

080066f4 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 80066f4:	b580      	push	{r7, lr}
 80066f6:	b082      	sub	sp, #8
 80066f8:	af00      	add	r7, sp, #0
 80066fa:	4603      	mov	r3, r0
 80066fc:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 80066fe:	4b0b      	ldr	r3, [pc, #44]	; (800672c <SD_CheckStatus+0x38>)
 8006700:	2201      	movs	r2, #1
 8006702:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8006704:	f7ff ffca 	bl	800669c <BSP_SD_GetCardState>
 8006708:	4603      	mov	r3, r0
 800670a:	2b00      	cmp	r3, #0
 800670c:	d107      	bne.n	800671e <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800670e:	4b07      	ldr	r3, [pc, #28]	; (800672c <SD_CheckStatus+0x38>)
 8006710:	781b      	ldrb	r3, [r3, #0]
 8006712:	b2db      	uxtb	r3, r3
 8006714:	f023 0301 	bic.w	r3, r3, #1
 8006718:	b2da      	uxtb	r2, r3
 800671a:	4b04      	ldr	r3, [pc, #16]	; (800672c <SD_CheckStatus+0x38>)
 800671c:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800671e:	4b03      	ldr	r3, [pc, #12]	; (800672c <SD_CheckStatus+0x38>)
 8006720:	781b      	ldrb	r3, [r3, #0]
 8006722:	b2db      	uxtb	r3, r3
}
 8006724:	4618      	mov	r0, r3
 8006726:	3708      	adds	r7, #8
 8006728:	46bd      	mov	sp, r7
 800672a:	bd80      	pop	{r7, pc}
 800672c:	2400000d 	.word	0x2400000d

08006730 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8006730:	b580      	push	{r7, lr}
 8006732:	b082      	sub	sp, #8
 8006734:	af00      	add	r7, sp, #0
 8006736:	4603      	mov	r3, r0
 8006738:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 800673a:	4b0b      	ldr	r3, [pc, #44]	; (8006768 <SD_initialize+0x38>)
 800673c:	2201      	movs	r2, #1
 800673e:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8006740:	f7ff ff4a 	bl	80065d8 <BSP_SD_Init>
 8006744:	4603      	mov	r3, r0
 8006746:	2b00      	cmp	r3, #0
 8006748:	d107      	bne.n	800675a <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 800674a:	79fb      	ldrb	r3, [r7, #7]
 800674c:	4618      	mov	r0, r3
 800674e:	f7ff ffd1 	bl	80066f4 <SD_CheckStatus>
 8006752:	4603      	mov	r3, r0
 8006754:	461a      	mov	r2, r3
 8006756:	4b04      	ldr	r3, [pc, #16]	; (8006768 <SD_initialize+0x38>)
 8006758:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800675a:	4b03      	ldr	r3, [pc, #12]	; (8006768 <SD_initialize+0x38>)
 800675c:	781b      	ldrb	r3, [r3, #0]
 800675e:	b2db      	uxtb	r3, r3
}
 8006760:	4618      	mov	r0, r3
 8006762:	3708      	adds	r7, #8
 8006764:	46bd      	mov	sp, r7
 8006766:	bd80      	pop	{r7, pc}
 8006768:	2400000d 	.word	0x2400000d

0800676c <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800676c:	b580      	push	{r7, lr}
 800676e:	b082      	sub	sp, #8
 8006770:	af00      	add	r7, sp, #0
 8006772:	4603      	mov	r3, r0
 8006774:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8006776:	79fb      	ldrb	r3, [r7, #7]
 8006778:	4618      	mov	r0, r3
 800677a:	f7ff ffbb 	bl	80066f4 <SD_CheckStatus>
 800677e:	4603      	mov	r3, r0
}
 8006780:	4618      	mov	r0, r3
 8006782:	3708      	adds	r7, #8
 8006784:	46bd      	mov	sp, r7
 8006786:	bd80      	pop	{r7, pc}

08006788 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8006788:	b580      	push	{r7, lr}
 800678a:	b086      	sub	sp, #24
 800678c:	af00      	add	r7, sp, #0
 800678e:	60b9      	str	r1, [r7, #8]
 8006790:	607a      	str	r2, [r7, #4]
 8006792:	603b      	str	r3, [r7, #0]
 8006794:	4603      	mov	r3, r0
 8006796:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8006798:	2301      	movs	r3, #1
 800679a:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 800679c:	f04f 33ff 	mov.w	r3, #4294967295
 80067a0:	683a      	ldr	r2, [r7, #0]
 80067a2:	6879      	ldr	r1, [r7, #4]
 80067a4:	68b8      	ldr	r0, [r7, #8]
 80067a6:	f7ff ff3d 	bl	8006624 <BSP_SD_ReadBlocks>
 80067aa:	4603      	mov	r3, r0
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d107      	bne.n	80067c0 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 80067b0:	bf00      	nop
 80067b2:	f7ff ff73 	bl	800669c <BSP_SD_GetCardState>
 80067b6:	4603      	mov	r3, r0
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d1fa      	bne.n	80067b2 <SD_read+0x2a>
    {
    }
    res = RES_OK;
 80067bc:	2300      	movs	r3, #0
 80067be:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 80067c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80067c2:	4618      	mov	r0, r3
 80067c4:	3718      	adds	r7, #24
 80067c6:	46bd      	mov	sp, r7
 80067c8:	bd80      	pop	{r7, pc}

080067ca <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 80067ca:	b580      	push	{r7, lr}
 80067cc:	b086      	sub	sp, #24
 80067ce:	af00      	add	r7, sp, #0
 80067d0:	60b9      	str	r1, [r7, #8]
 80067d2:	607a      	str	r2, [r7, #4]
 80067d4:	603b      	str	r3, [r7, #0]
 80067d6:	4603      	mov	r3, r0
 80067d8:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80067da:	2301      	movs	r3, #1
 80067dc:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 80067de:	f04f 33ff 	mov.w	r3, #4294967295
 80067e2:	683a      	ldr	r2, [r7, #0]
 80067e4:	6879      	ldr	r1, [r7, #4]
 80067e6:	68b8      	ldr	r0, [r7, #8]
 80067e8:	f7ff ff3a 	bl	8006660 <BSP_SD_WriteBlocks>
 80067ec:	4603      	mov	r3, r0
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d107      	bne.n	8006802 <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 80067f2:	bf00      	nop
 80067f4:	f7ff ff52 	bl	800669c <BSP_SD_GetCardState>
 80067f8:	4603      	mov	r3, r0
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d1fa      	bne.n	80067f4 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 80067fe:	2300      	movs	r3, #0
 8006800:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8006802:	7dfb      	ldrb	r3, [r7, #23]
}
 8006804:	4618      	mov	r0, r3
 8006806:	3718      	adds	r7, #24
 8006808:	46bd      	mov	sp, r7
 800680a:	bd80      	pop	{r7, pc}

0800680c <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800680c:	b580      	push	{r7, lr}
 800680e:	b08c      	sub	sp, #48	; 0x30
 8006810:	af00      	add	r7, sp, #0
 8006812:	4603      	mov	r3, r0
 8006814:	603a      	str	r2, [r7, #0]
 8006816:	71fb      	strb	r3, [r7, #7]
 8006818:	460b      	mov	r3, r1
 800681a:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800681c:	2301      	movs	r3, #1
 800681e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8006822:	4b25      	ldr	r3, [pc, #148]	; (80068b8 <SD_ioctl+0xac>)
 8006824:	781b      	ldrb	r3, [r3, #0]
 8006826:	b2db      	uxtb	r3, r3
 8006828:	f003 0301 	and.w	r3, r3, #1
 800682c:	2b00      	cmp	r3, #0
 800682e:	d001      	beq.n	8006834 <SD_ioctl+0x28>
 8006830:	2303      	movs	r3, #3
 8006832:	e03c      	b.n	80068ae <SD_ioctl+0xa2>

  switch (cmd)
 8006834:	79bb      	ldrb	r3, [r7, #6]
 8006836:	2b03      	cmp	r3, #3
 8006838:	d834      	bhi.n	80068a4 <SD_ioctl+0x98>
 800683a:	a201      	add	r2, pc, #4	; (adr r2, 8006840 <SD_ioctl+0x34>)
 800683c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006840:	08006851 	.word	0x08006851
 8006844:	08006859 	.word	0x08006859
 8006848:	08006871 	.word	0x08006871
 800684c:	0800688b 	.word	0x0800688b
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8006850:	2300      	movs	r3, #0
 8006852:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8006856:	e028      	b.n	80068aa <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8006858:	f107 0308 	add.w	r3, r7, #8
 800685c:	4618      	mov	r0, r3
 800685e:	f7ff ff2d 	bl	80066bc <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8006862:	6a3a      	ldr	r2, [r7, #32]
 8006864:	683b      	ldr	r3, [r7, #0]
 8006866:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8006868:	2300      	movs	r3, #0
 800686a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800686e:	e01c      	b.n	80068aa <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8006870:	f107 0308 	add.w	r3, r7, #8
 8006874:	4618      	mov	r0, r3
 8006876:	f7ff ff21 	bl	80066bc <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800687a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800687c:	b29a      	uxth	r2, r3
 800687e:	683b      	ldr	r3, [r7, #0]
 8006880:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8006882:	2300      	movs	r3, #0
 8006884:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8006888:	e00f      	b.n	80068aa <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800688a:	f107 0308 	add.w	r3, r7, #8
 800688e:	4618      	mov	r0, r3
 8006890:	f7ff ff14 	bl	80066bc <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8006894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006896:	0a5a      	lsrs	r2, r3, #9
 8006898:	683b      	ldr	r3, [r7, #0]
 800689a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800689c:	2300      	movs	r3, #0
 800689e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80068a2:	e002      	b.n	80068aa <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 80068a4:	2304      	movs	r3, #4
 80068a6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 80068aa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80068ae:	4618      	mov	r0, r3
 80068b0:	3730      	adds	r7, #48	; 0x30
 80068b2:	46bd      	mov	sp, r7
 80068b4:	bd80      	pop	{r7, pc}
 80068b6:	bf00      	nop
 80068b8:	2400000d 	.word	0x2400000d

080068bc <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80068bc:	b480      	push	{r7}
 80068be:	b087      	sub	sp, #28
 80068c0:	af00      	add	r7, sp, #0
 80068c2:	60f8      	str	r0, [r7, #12]
 80068c4:	60b9      	str	r1, [r7, #8]
 80068c6:	4613      	mov	r3, r2
 80068c8:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80068ca:	2301      	movs	r3, #1
 80068cc:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80068ce:	2300      	movs	r3, #0
 80068d0:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80068d2:	4b1f      	ldr	r3, [pc, #124]	; (8006950 <FATFS_LinkDriverEx+0x94>)
 80068d4:	7a5b      	ldrb	r3, [r3, #9]
 80068d6:	b2db      	uxtb	r3, r3
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d131      	bne.n	8006940 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80068dc:	4b1c      	ldr	r3, [pc, #112]	; (8006950 <FATFS_LinkDriverEx+0x94>)
 80068de:	7a5b      	ldrb	r3, [r3, #9]
 80068e0:	b2db      	uxtb	r3, r3
 80068e2:	461a      	mov	r2, r3
 80068e4:	4b1a      	ldr	r3, [pc, #104]	; (8006950 <FATFS_LinkDriverEx+0x94>)
 80068e6:	2100      	movs	r1, #0
 80068e8:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80068ea:	4b19      	ldr	r3, [pc, #100]	; (8006950 <FATFS_LinkDriverEx+0x94>)
 80068ec:	7a5b      	ldrb	r3, [r3, #9]
 80068ee:	b2db      	uxtb	r3, r3
 80068f0:	4a17      	ldr	r2, [pc, #92]	; (8006950 <FATFS_LinkDriverEx+0x94>)
 80068f2:	009b      	lsls	r3, r3, #2
 80068f4:	4413      	add	r3, r2
 80068f6:	68fa      	ldr	r2, [r7, #12]
 80068f8:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80068fa:	4b15      	ldr	r3, [pc, #84]	; (8006950 <FATFS_LinkDriverEx+0x94>)
 80068fc:	7a5b      	ldrb	r3, [r3, #9]
 80068fe:	b2db      	uxtb	r3, r3
 8006900:	461a      	mov	r2, r3
 8006902:	4b13      	ldr	r3, [pc, #76]	; (8006950 <FATFS_LinkDriverEx+0x94>)
 8006904:	4413      	add	r3, r2
 8006906:	79fa      	ldrb	r2, [r7, #7]
 8006908:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800690a:	4b11      	ldr	r3, [pc, #68]	; (8006950 <FATFS_LinkDriverEx+0x94>)
 800690c:	7a5b      	ldrb	r3, [r3, #9]
 800690e:	b2db      	uxtb	r3, r3
 8006910:	1c5a      	adds	r2, r3, #1
 8006912:	b2d1      	uxtb	r1, r2
 8006914:	4a0e      	ldr	r2, [pc, #56]	; (8006950 <FATFS_LinkDriverEx+0x94>)
 8006916:	7251      	strb	r1, [r2, #9]
 8006918:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800691a:	7dbb      	ldrb	r3, [r7, #22]
 800691c:	3330      	adds	r3, #48	; 0x30
 800691e:	b2da      	uxtb	r2, r3
 8006920:	68bb      	ldr	r3, [r7, #8]
 8006922:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8006924:	68bb      	ldr	r3, [r7, #8]
 8006926:	3301      	adds	r3, #1
 8006928:	223a      	movs	r2, #58	; 0x3a
 800692a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800692c:	68bb      	ldr	r3, [r7, #8]
 800692e:	3302      	adds	r3, #2
 8006930:	222f      	movs	r2, #47	; 0x2f
 8006932:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8006934:	68bb      	ldr	r3, [r7, #8]
 8006936:	3303      	adds	r3, #3
 8006938:	2200      	movs	r2, #0
 800693a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800693c:	2300      	movs	r3, #0
 800693e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8006940:	7dfb      	ldrb	r3, [r7, #23]
}
 8006942:	4618      	mov	r0, r3
 8006944:	371c      	adds	r7, #28
 8006946:	46bd      	mov	sp, r7
 8006948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800694c:	4770      	bx	lr
 800694e:	bf00      	nop
 8006950:	24000094 	.word	0x24000094

08006954 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8006954:	b580      	push	{r7, lr}
 8006956:	b082      	sub	sp, #8
 8006958:	af00      	add	r7, sp, #0
 800695a:	6078      	str	r0, [r7, #4]
 800695c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800695e:	2200      	movs	r2, #0
 8006960:	6839      	ldr	r1, [r7, #0]
 8006962:	6878      	ldr	r0, [r7, #4]
 8006964:	f7ff ffaa 	bl	80068bc <FATFS_LinkDriverEx>
 8006968:	4603      	mov	r3, r0
}
 800696a:	4618      	mov	r0, r3
 800696c:	3708      	adds	r7, #8
 800696e:	46bd      	mov	sp, r7
 8006970:	bd80      	pop	{r7, pc}
	...

08006974 <__errno>:
 8006974:	4b01      	ldr	r3, [pc, #4]	; (800697c <__errno+0x8>)
 8006976:	6818      	ldr	r0, [r3, #0]
 8006978:	4770      	bx	lr
 800697a:	bf00      	nop
 800697c:	24000010 	.word	0x24000010

08006980 <__libc_init_array>:
 8006980:	b570      	push	{r4, r5, r6, lr}
 8006982:	4e0d      	ldr	r6, [pc, #52]	; (80069b8 <__libc_init_array+0x38>)
 8006984:	4c0d      	ldr	r4, [pc, #52]	; (80069bc <__libc_init_array+0x3c>)
 8006986:	1ba4      	subs	r4, r4, r6
 8006988:	10a4      	asrs	r4, r4, #2
 800698a:	2500      	movs	r5, #0
 800698c:	42a5      	cmp	r5, r4
 800698e:	d109      	bne.n	80069a4 <__libc_init_array+0x24>
 8006990:	4e0b      	ldr	r6, [pc, #44]	; (80069c0 <__libc_init_array+0x40>)
 8006992:	4c0c      	ldr	r4, [pc, #48]	; (80069c4 <__libc_init_array+0x44>)
 8006994:	f001 fe6e 	bl	8008674 <_init>
 8006998:	1ba4      	subs	r4, r4, r6
 800699a:	10a4      	asrs	r4, r4, #2
 800699c:	2500      	movs	r5, #0
 800699e:	42a5      	cmp	r5, r4
 80069a0:	d105      	bne.n	80069ae <__libc_init_array+0x2e>
 80069a2:	bd70      	pop	{r4, r5, r6, pc}
 80069a4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80069a8:	4798      	blx	r3
 80069aa:	3501      	adds	r5, #1
 80069ac:	e7ee      	b.n	800698c <__libc_init_array+0xc>
 80069ae:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80069b2:	4798      	blx	r3
 80069b4:	3501      	adds	r5, #1
 80069b6:	e7f2      	b.n	800699e <__libc_init_array+0x1e>
 80069b8:	08008908 	.word	0x08008908
 80069bc:	08008908 	.word	0x08008908
 80069c0:	08008908 	.word	0x08008908
 80069c4:	0800890c 	.word	0x0800890c

080069c8 <memset>:
 80069c8:	4402      	add	r2, r0
 80069ca:	4603      	mov	r3, r0
 80069cc:	4293      	cmp	r3, r2
 80069ce:	d100      	bne.n	80069d2 <memset+0xa>
 80069d0:	4770      	bx	lr
 80069d2:	f803 1b01 	strb.w	r1, [r3], #1
 80069d6:	e7f9      	b.n	80069cc <memset+0x4>

080069d8 <sin>:
 80069d8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80069da:	eeb0 7b40 	vmov.f64	d7, d0
 80069de:	ee17 3a90 	vmov	r3, s15
 80069e2:	4a19      	ldr	r2, [pc, #100]	; (8006a48 <sin+0x70>)
 80069e4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80069e8:	4293      	cmp	r3, r2
 80069ea:	dc05      	bgt.n	80069f8 <sin+0x20>
 80069ec:	ed9f 1b14 	vldr	d1, [pc, #80]	; 8006a40 <sin+0x68>
 80069f0:	2000      	movs	r0, #0
 80069f2:	f001 fc35 	bl	8008260 <__kernel_sin>
 80069f6:	e004      	b.n	8006a02 <sin+0x2a>
 80069f8:	4a14      	ldr	r2, [pc, #80]	; (8006a4c <sin+0x74>)
 80069fa:	4293      	cmp	r3, r2
 80069fc:	dd04      	ble.n	8006a08 <sin+0x30>
 80069fe:	ee30 0b40 	vsub.f64	d0, d0, d0
 8006a02:	b005      	add	sp, #20
 8006a04:	f85d fb04 	ldr.w	pc, [sp], #4
 8006a08:	4668      	mov	r0, sp
 8006a0a:	f000 ffe1 	bl	80079d0 <__ieee754_rem_pio2>
 8006a0e:	f000 0003 	and.w	r0, r0, #3
 8006a12:	2801      	cmp	r0, #1
 8006a14:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006a18:	ed9d 0b00 	vldr	d0, [sp]
 8006a1c:	d004      	beq.n	8006a28 <sin+0x50>
 8006a1e:	2802      	cmp	r0, #2
 8006a20:	d005      	beq.n	8006a2e <sin+0x56>
 8006a22:	b950      	cbnz	r0, 8006a3a <sin+0x62>
 8006a24:	2001      	movs	r0, #1
 8006a26:	e7e4      	b.n	80069f2 <sin+0x1a>
 8006a28:	f001 f912 	bl	8007c50 <__kernel_cos>
 8006a2c:	e7e9      	b.n	8006a02 <sin+0x2a>
 8006a2e:	2001      	movs	r0, #1
 8006a30:	f001 fc16 	bl	8008260 <__kernel_sin>
 8006a34:	eeb1 0b40 	vneg.f64	d0, d0
 8006a38:	e7e3      	b.n	8006a02 <sin+0x2a>
 8006a3a:	f001 f909 	bl	8007c50 <__kernel_cos>
 8006a3e:	e7f9      	b.n	8006a34 <sin+0x5c>
	...
 8006a48:	3fe921fb 	.word	0x3fe921fb
 8006a4c:	7fefffff 	.word	0x7fefffff

08006a50 <exp>:
 8006a50:	b510      	push	{r4, lr}
 8006a52:	ed2d 8b04 	vpush	{d8-d9}
 8006a56:	eeb0 8b40 	vmov.f64	d8, d0
 8006a5a:	4c33      	ldr	r4, [pc, #204]	; (8006b28 <exp+0xd8>)
 8006a5c:	b08a      	sub	sp, #40	; 0x28
 8006a5e:	f000 fa0b 	bl	8006e78 <__ieee754_exp>
 8006a62:	f994 3000 	ldrsb.w	r3, [r4]
 8006a66:	eeb0 9b40 	vmov.f64	d9, d0
 8006a6a:	3301      	adds	r3, #1
 8006a6c:	d029      	beq.n	8006ac2 <exp+0x72>
 8006a6e:	eeb0 0b48 	vmov.f64	d0, d8
 8006a72:	f001 fc56 	bl	8008322 <finite>
 8006a76:	b320      	cbz	r0, 8006ac2 <exp+0x72>
 8006a78:	ed9f 7b27 	vldr	d7, [pc, #156]	; 8006b18 <exp+0xc8>
 8006a7c:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8006a80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006a84:	dd2e      	ble.n	8006ae4 <exp+0x94>
 8006a86:	2303      	movs	r3, #3
 8006a88:	9300      	str	r3, [sp, #0]
 8006a8a:	4b28      	ldr	r3, [pc, #160]	; (8006b2c <exp+0xdc>)
 8006a8c:	9301      	str	r3, [sp, #4]
 8006a8e:	2300      	movs	r3, #0
 8006a90:	9308      	str	r3, [sp, #32]
 8006a92:	f994 3000 	ldrsb.w	r3, [r4]
 8006a96:	ed8d 8b04 	vstr	d8, [sp, #16]
 8006a9a:	ed8d 8b02 	vstr	d8, [sp, #8]
 8006a9e:	b9b3      	cbnz	r3, 8006ace <exp+0x7e>
 8006aa0:	4b23      	ldr	r3, [pc, #140]	; (8006b30 <exp+0xe0>)
 8006aa2:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8006aa6:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006aaa:	4668      	mov	r0, sp
 8006aac:	f001 fcbc 	bl	8008428 <matherr>
 8006ab0:	b198      	cbz	r0, 8006ada <exp+0x8a>
 8006ab2:	9b08      	ldr	r3, [sp, #32]
 8006ab4:	b11b      	cbz	r3, 8006abe <exp+0x6e>
 8006ab6:	f7ff ff5d 	bl	8006974 <__errno>
 8006aba:	9b08      	ldr	r3, [sp, #32]
 8006abc:	6003      	str	r3, [r0, #0]
 8006abe:	ed9d 9b06 	vldr	d9, [sp, #24]
 8006ac2:	eeb0 0b49 	vmov.f64	d0, d9
 8006ac6:	b00a      	add	sp, #40	; 0x28
 8006ac8:	ecbd 8b04 	vpop	{d8-d9}
 8006acc:	bd10      	pop	{r4, pc}
 8006ace:	4919      	ldr	r1, [pc, #100]	; (8006b34 <exp+0xe4>)
 8006ad0:	2000      	movs	r0, #0
 8006ad2:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006ad6:	2b02      	cmp	r3, #2
 8006ad8:	d1e7      	bne.n	8006aaa <exp+0x5a>
 8006ada:	f7ff ff4b 	bl	8006974 <__errno>
 8006ade:	2322      	movs	r3, #34	; 0x22
 8006ae0:	6003      	str	r3, [r0, #0]
 8006ae2:	e7e6      	b.n	8006ab2 <exp+0x62>
 8006ae4:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 8006b20 <exp+0xd0>
 8006ae8:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8006aec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006af0:	d5e7      	bpl.n	8006ac2 <exp+0x72>
 8006af2:	2304      	movs	r3, #4
 8006af4:	9300      	str	r3, [sp, #0]
 8006af6:	4b0d      	ldr	r3, [pc, #52]	; (8006b2c <exp+0xdc>)
 8006af8:	9301      	str	r3, [sp, #4]
 8006afa:	2300      	movs	r3, #0
 8006afc:	9308      	str	r3, [sp, #32]
 8006afe:	2200      	movs	r2, #0
 8006b00:	2300      	movs	r3, #0
 8006b02:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006b06:	ed8d 8b04 	vstr	d8, [sp, #16]
 8006b0a:	ed8d 8b02 	vstr	d8, [sp, #8]
 8006b0e:	f994 3000 	ldrsb.w	r3, [r4]
 8006b12:	e7e0      	b.n	8006ad6 <exp+0x86>
 8006b14:	f3af 8000 	nop.w
 8006b18:	fefa39ef 	.word	0xfefa39ef
 8006b1c:	40862e42 	.word	0x40862e42
 8006b20:	d52d3051 	.word	0xd52d3051
 8006b24:	c0874910 	.word	0xc0874910
 8006b28:	24000074 	.word	0x24000074
 8006b2c:	080086b4 	.word	0x080086b4
 8006b30:	47efffff 	.word	0x47efffff
 8006b34:	7ff00000 	.word	0x7ff00000

08006b38 <log>:
 8006b38:	b500      	push	{lr}
 8006b3a:	ed2d 8b02 	vpush	{d8}
 8006b3e:	eeb0 8b40 	vmov.f64	d8, d0
 8006b42:	b08b      	sub	sp, #44	; 0x2c
 8006b44:	f000 faa0 	bl	8007088 <__ieee754_log>
 8006b48:	4b2d      	ldr	r3, [pc, #180]	; (8006c00 <log+0xc8>)
 8006b4a:	f993 3000 	ldrsb.w	r3, [r3]
 8006b4e:	1c5a      	adds	r2, r3, #1
 8006b50:	d051      	beq.n	8006bf6 <log+0xbe>
 8006b52:	eeb4 8b48 	vcmp.f64	d8, d8
 8006b56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006b5a:	d64c      	bvs.n	8006bf6 <log+0xbe>
 8006b5c:	eeb5 8bc0 	vcmpe.f64	d8, #0.0
 8006b60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006b64:	dc47      	bgt.n	8006bf6 <log+0xbe>
 8006b66:	4a27      	ldr	r2, [pc, #156]	; (8006c04 <log+0xcc>)
 8006b68:	9201      	str	r2, [sp, #4]
 8006b6a:	2200      	movs	r2, #0
 8006b6c:	9208      	str	r2, [sp, #32]
 8006b6e:	ed8d 8b02 	vstr	d8, [sp, #8]
 8006b72:	ed8d 8b04 	vstr	d8, [sp, #16]
 8006b76:	b993      	cbnz	r3, 8006b9e <log+0x66>
 8006b78:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8006b7c:	4922      	ldr	r1, [pc, #136]	; (8006c08 <log+0xd0>)
 8006b7e:	f04f 4060 	mov.w	r0, #3758096384	; 0xe0000000
 8006b82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006b86:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006b8a:	d025      	beq.n	8006bd8 <log+0xa0>
 8006b8c:	2201      	movs	r2, #1
 8006b8e:	2b02      	cmp	r3, #2
 8006b90:	9200      	str	r2, [sp, #0]
 8006b92:	d116      	bne.n	8006bc2 <log+0x8a>
 8006b94:	f7ff feee 	bl	8006974 <__errno>
 8006b98:	2321      	movs	r3, #33	; 0x21
 8006b9a:	6003      	str	r3, [r0, #0]
 8006b9c:	e016      	b.n	8006bcc <log+0x94>
 8006b9e:	491b      	ldr	r1, [pc, #108]	; (8006c0c <log+0xd4>)
 8006ba0:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8006ba4:	2000      	movs	r0, #0
 8006ba6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006baa:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006bae:	d1ed      	bne.n	8006b8c <log+0x54>
 8006bb0:	2202      	movs	r2, #2
 8006bb2:	4293      	cmp	r3, r2
 8006bb4:	9200      	str	r2, [sp, #0]
 8006bb6:	d111      	bne.n	8006bdc <log+0xa4>
 8006bb8:	f7ff fedc 	bl	8006974 <__errno>
 8006bbc:	2322      	movs	r3, #34	; 0x22
 8006bbe:	6003      	str	r3, [r0, #0]
 8006bc0:	e011      	b.n	8006be6 <log+0xae>
 8006bc2:	4668      	mov	r0, sp
 8006bc4:	f001 fc30 	bl	8008428 <matherr>
 8006bc8:	2800      	cmp	r0, #0
 8006bca:	d0e3      	beq.n	8006b94 <log+0x5c>
 8006bcc:	4810      	ldr	r0, [pc, #64]	; (8006c10 <log+0xd8>)
 8006bce:	f001 fc2f 	bl	8008430 <nan>
 8006bd2:	ed8d 0b06 	vstr	d0, [sp, #24]
 8006bd6:	e006      	b.n	8006be6 <log+0xae>
 8006bd8:	2302      	movs	r3, #2
 8006bda:	9300      	str	r3, [sp, #0]
 8006bdc:	4668      	mov	r0, sp
 8006bde:	f001 fc23 	bl	8008428 <matherr>
 8006be2:	2800      	cmp	r0, #0
 8006be4:	d0e8      	beq.n	8006bb8 <log+0x80>
 8006be6:	9b08      	ldr	r3, [sp, #32]
 8006be8:	b11b      	cbz	r3, 8006bf2 <log+0xba>
 8006bea:	f7ff fec3 	bl	8006974 <__errno>
 8006bee:	9b08      	ldr	r3, [sp, #32]
 8006bf0:	6003      	str	r3, [r0, #0]
 8006bf2:	ed9d 0b06 	vldr	d0, [sp, #24]
 8006bf6:	b00b      	add	sp, #44	; 0x2c
 8006bf8:	ecbd 8b02 	vpop	{d8}
 8006bfc:	f85d fb04 	ldr.w	pc, [sp], #4
 8006c00:	24000074 	.word	0x24000074
 8006c04:	080086b8 	.word	0x080086b8
 8006c08:	c7efffff 	.word	0xc7efffff
 8006c0c:	fff00000 	.word	0xfff00000
 8006c10:	080086bb 	.word	0x080086bb
 8006c14:	00000000 	.word	0x00000000

08006c18 <pow>:
 8006c18:	b570      	push	{r4, r5, r6, lr}
 8006c1a:	ed2d 8b0a 	vpush	{d8-d12}
 8006c1e:	eeb0 9b40 	vmov.f64	d9, d0
 8006c22:	eeb0 8b41 	vmov.f64	d8, d1
 8006c26:	4c8c      	ldr	r4, [pc, #560]	; (8006e58 <pow+0x240>)
 8006c28:	b08a      	sub	sp, #40	; 0x28
 8006c2a:	f000 fb49 	bl	80072c0 <__ieee754_pow>
 8006c2e:	f994 3000 	ldrsb.w	r3, [r4]
 8006c32:	eeb0 ab40 	vmov.f64	d10, d0
 8006c36:	1c5a      	adds	r2, r3, #1
 8006c38:	4626      	mov	r6, r4
 8006c3a:	d04b      	beq.n	8006cd4 <pow+0xbc>
 8006c3c:	eeb4 8b48 	vcmp.f64	d8, d8
 8006c40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006c44:	d646      	bvs.n	8006cd4 <pow+0xbc>
 8006c46:	eeb4 9b49 	vcmp.f64	d9, d9
 8006c4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006c4e:	d719      	bvc.n	8006c84 <pow+0x6c>
 8006c50:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8006c54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006c58:	d13c      	bne.n	8006cd4 <pow+0xbc>
 8006c5a:	2201      	movs	r2, #1
 8006c5c:	9200      	str	r2, [sp, #0]
 8006c5e:	497f      	ldr	r1, [pc, #508]	; (8006e5c <pow+0x244>)
 8006c60:	4a7f      	ldr	r2, [pc, #508]	; (8006e60 <pow+0x248>)
 8006c62:	9201      	str	r2, [sp, #4]
 8006c64:	2000      	movs	r0, #0
 8006c66:	2200      	movs	r2, #0
 8006c68:	2b02      	cmp	r3, #2
 8006c6a:	9208      	str	r2, [sp, #32]
 8006c6c:	ed8d 9b02 	vstr	d9, [sp, #8]
 8006c70:	ed8d 8b04 	vstr	d8, [sp, #16]
 8006c74:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006c78:	d02a      	beq.n	8006cd0 <pow+0xb8>
 8006c7a:	4668      	mov	r0, sp
 8006c7c:	f001 fbd4 	bl	8008428 <matherr>
 8006c80:	bb00      	cbnz	r0, 8006cc4 <pow+0xac>
 8006c82:	e04e      	b.n	8006d22 <pow+0x10a>
 8006c84:	ed9f bb72 	vldr	d11, [pc, #456]	; 8006e50 <pow+0x238>
 8006c88:	eeb4 9b4b 	vcmp.f64	d9, d11
 8006c8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006c90:	eeb0 cb4b 	vmov.f64	d12, d11
 8006c94:	d14a      	bne.n	8006d2c <pow+0x114>
 8006c96:	eeb4 8b4b 	vcmp.f64	d8, d11
 8006c9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006c9e:	d11f      	bne.n	8006ce0 <pow+0xc8>
 8006ca0:	2201      	movs	r2, #1
 8006ca2:	9200      	str	r2, [sp, #0]
 8006ca4:	4a6e      	ldr	r2, [pc, #440]	; (8006e60 <pow+0x248>)
 8006ca6:	9201      	str	r2, [sp, #4]
 8006ca8:	2200      	movs	r2, #0
 8006caa:	9208      	str	r2, [sp, #32]
 8006cac:	ed8d 9b02 	vstr	d9, [sp, #8]
 8006cb0:	ed8d 8b04 	vstr	d8, [sp, #16]
 8006cb4:	ed8d bb06 	vstr	d11, [sp, #24]
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d0de      	beq.n	8006c7a <pow+0x62>
 8006cbc:	4b67      	ldr	r3, [pc, #412]	; (8006e5c <pow+0x244>)
 8006cbe:	2200      	movs	r2, #0
 8006cc0:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006cc4:	9b08      	ldr	r3, [sp, #32]
 8006cc6:	b11b      	cbz	r3, 8006cd0 <pow+0xb8>
 8006cc8:	f7ff fe54 	bl	8006974 <__errno>
 8006ccc:	9b08      	ldr	r3, [sp, #32]
 8006cce:	6003      	str	r3, [r0, #0]
 8006cd0:	ed9d ab06 	vldr	d10, [sp, #24]
 8006cd4:	eeb0 0b4a 	vmov.f64	d0, d10
 8006cd8:	b00a      	add	sp, #40	; 0x28
 8006cda:	ecbd 8b0a 	vpop	{d8-d12}
 8006cde:	bd70      	pop	{r4, r5, r6, pc}
 8006ce0:	eeb0 0b48 	vmov.f64	d0, d8
 8006ce4:	f001 fb1d 	bl	8008322 <finite>
 8006ce8:	2800      	cmp	r0, #0
 8006cea:	d0f3      	beq.n	8006cd4 <pow+0xbc>
 8006cec:	eeb5 8bc0 	vcmpe.f64	d8, #0.0
 8006cf0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006cf4:	d5ee      	bpl.n	8006cd4 <pow+0xbc>
 8006cf6:	2301      	movs	r3, #1
 8006cf8:	9300      	str	r3, [sp, #0]
 8006cfa:	4b59      	ldr	r3, [pc, #356]	; (8006e60 <pow+0x248>)
 8006cfc:	9301      	str	r3, [sp, #4]
 8006cfe:	2300      	movs	r3, #0
 8006d00:	9308      	str	r3, [sp, #32]
 8006d02:	f994 3000 	ldrsb.w	r3, [r4]
 8006d06:	ed8d 9b02 	vstr	d9, [sp, #8]
 8006d0a:	ed8d 8b04 	vstr	d8, [sp, #16]
 8006d0e:	b913      	cbnz	r3, 8006d16 <pow+0xfe>
 8006d10:	ed8d bb06 	vstr	d11, [sp, #24]
 8006d14:	e7b1      	b.n	8006c7a <pow+0x62>
 8006d16:	4953      	ldr	r1, [pc, #332]	; (8006e64 <pow+0x24c>)
 8006d18:	2000      	movs	r0, #0
 8006d1a:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006d1e:	2b02      	cmp	r3, #2
 8006d20:	d1ab      	bne.n	8006c7a <pow+0x62>
 8006d22:	f7ff fe27 	bl	8006974 <__errno>
 8006d26:	2321      	movs	r3, #33	; 0x21
 8006d28:	6003      	str	r3, [r0, #0]
 8006d2a:	e7cb      	b.n	8006cc4 <pow+0xac>
 8006d2c:	f001 faf9 	bl	8008322 <finite>
 8006d30:	4605      	mov	r5, r0
 8006d32:	2800      	cmp	r0, #0
 8006d34:	d164      	bne.n	8006e00 <pow+0x1e8>
 8006d36:	eeb0 0b49 	vmov.f64	d0, d9
 8006d3a:	f001 faf2 	bl	8008322 <finite>
 8006d3e:	2800      	cmp	r0, #0
 8006d40:	d05e      	beq.n	8006e00 <pow+0x1e8>
 8006d42:	eeb0 0b48 	vmov.f64	d0, d8
 8006d46:	f001 faec 	bl	8008322 <finite>
 8006d4a:	2800      	cmp	r0, #0
 8006d4c:	d058      	beq.n	8006e00 <pow+0x1e8>
 8006d4e:	eeb4 ab4a 	vcmp.f64	d10, d10
 8006d52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006d56:	f994 3000 	ldrsb.w	r3, [r4]
 8006d5a:	4a41      	ldr	r2, [pc, #260]	; (8006e60 <pow+0x248>)
 8006d5c:	d70e      	bvc.n	8006d7c <pow+0x164>
 8006d5e:	2101      	movs	r1, #1
 8006d60:	e9cd 1200 	strd	r1, r2, [sp]
 8006d64:	9508      	str	r5, [sp, #32]
 8006d66:	ed8d 9b02 	vstr	d9, [sp, #8]
 8006d6a:	ed8d 8b04 	vstr	d8, [sp, #16]
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d0ce      	beq.n	8006d10 <pow+0xf8>
 8006d72:	ee8b 7b0b 	vdiv.f64	d7, d11, d11
 8006d76:	ed8d 7b06 	vstr	d7, [sp, #24]
 8006d7a:	e7d0      	b.n	8006d1e <pow+0x106>
 8006d7c:	2103      	movs	r1, #3
 8006d7e:	ed8d 8b04 	vstr	d8, [sp, #16]
 8006d82:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 8006d86:	ee28 8b07 	vmul.f64	d8, d8, d7
 8006d8a:	e9cd 1200 	strd	r1, r2, [sp]
 8006d8e:	9508      	str	r5, [sp, #32]
 8006d90:	ed8d 9b02 	vstr	d9, [sp, #8]
 8006d94:	b9fb      	cbnz	r3, 8006dd6 <pow+0x1be>
 8006d96:	eeb5 9bc0 	vcmpe.f64	d9, #0.0
 8006d9a:	4b33      	ldr	r3, [pc, #204]	; (8006e68 <pow+0x250>)
 8006d9c:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8006da0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006da4:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006da8:	d54b      	bpl.n	8006e42 <pow+0x22a>
 8006daa:	eeb0 0b48 	vmov.f64	d0, d8
 8006dae:	f001 fb47 	bl	8008440 <rint>
 8006db2:	eeb4 0b48 	vcmp.f64	d0, d8
 8006db6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006dba:	d004      	beq.n	8006dc6 <pow+0x1ae>
 8006dbc:	4b2b      	ldr	r3, [pc, #172]	; (8006e6c <pow+0x254>)
 8006dbe:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8006dc2:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006dc6:	f996 3000 	ldrsb.w	r3, [r6]
 8006dca:	2b02      	cmp	r3, #2
 8006dcc:	d139      	bne.n	8006e42 <pow+0x22a>
 8006dce:	f7ff fdd1 	bl	8006974 <__errno>
 8006dd2:	2322      	movs	r3, #34	; 0x22
 8006dd4:	e7a8      	b.n	8006d28 <pow+0x110>
 8006dd6:	4b26      	ldr	r3, [pc, #152]	; (8006e70 <pow+0x258>)
 8006dd8:	eeb5 9bc0 	vcmpe.f64	d9, #0.0
 8006ddc:	2200      	movs	r2, #0
 8006dde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006de2:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006de6:	d5ee      	bpl.n	8006dc6 <pow+0x1ae>
 8006de8:	eeb0 0b48 	vmov.f64	d0, d8
 8006dec:	f001 fb28 	bl	8008440 <rint>
 8006df0:	eeb4 0b48 	vcmp.f64	d0, d8
 8006df4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006df8:	d0e5      	beq.n	8006dc6 <pow+0x1ae>
 8006dfa:	2200      	movs	r2, #0
 8006dfc:	4b19      	ldr	r3, [pc, #100]	; (8006e64 <pow+0x24c>)
 8006dfe:	e7e0      	b.n	8006dc2 <pow+0x1aa>
 8006e00:	eeb5 ab40 	vcmp.f64	d10, #0.0
 8006e04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006e08:	f47f af64 	bne.w	8006cd4 <pow+0xbc>
 8006e0c:	eeb0 0b49 	vmov.f64	d0, d9
 8006e10:	f001 fa87 	bl	8008322 <finite>
 8006e14:	2800      	cmp	r0, #0
 8006e16:	f43f af5d 	beq.w	8006cd4 <pow+0xbc>
 8006e1a:	eeb0 0b48 	vmov.f64	d0, d8
 8006e1e:	f001 fa80 	bl	8008322 <finite>
 8006e22:	2800      	cmp	r0, #0
 8006e24:	f43f af56 	beq.w	8006cd4 <pow+0xbc>
 8006e28:	2304      	movs	r3, #4
 8006e2a:	9300      	str	r3, [sp, #0]
 8006e2c:	4b0c      	ldr	r3, [pc, #48]	; (8006e60 <pow+0x248>)
 8006e2e:	9301      	str	r3, [sp, #4]
 8006e30:	2300      	movs	r3, #0
 8006e32:	9308      	str	r3, [sp, #32]
 8006e34:	ed8d 9b02 	vstr	d9, [sp, #8]
 8006e38:	ed8d 8b04 	vstr	d8, [sp, #16]
 8006e3c:	ed8d cb06 	vstr	d12, [sp, #24]
 8006e40:	e7c1      	b.n	8006dc6 <pow+0x1ae>
 8006e42:	4668      	mov	r0, sp
 8006e44:	f001 faf0 	bl	8008428 <matherr>
 8006e48:	2800      	cmp	r0, #0
 8006e4a:	f47f af3b 	bne.w	8006cc4 <pow+0xac>
 8006e4e:	e7be      	b.n	8006dce <pow+0x1b6>
	...
 8006e58:	24000074 	.word	0x24000074
 8006e5c:	3ff00000 	.word	0x3ff00000
 8006e60:	080086bc 	.word	0x080086bc
 8006e64:	fff00000 	.word	0xfff00000
 8006e68:	47efffff 	.word	0x47efffff
 8006e6c:	c7efffff 	.word	0xc7efffff
 8006e70:	7ff00000 	.word	0x7ff00000
 8006e74:	00000000 	.word	0x00000000

08006e78 <__ieee754_exp>:
 8006e78:	ee10 1a90 	vmov	r1, s1
 8006e7c:	4b7a      	ldr	r3, [pc, #488]	; (8007068 <__ieee754_exp+0x1f0>)
 8006e7e:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8006e82:	429a      	cmp	r2, r3
 8006e84:	b082      	sub	sp, #8
 8006e86:	ea4f 70d1 	mov.w	r0, r1, lsr #31
 8006e8a:	d928      	bls.n	8006ede <__ieee754_exp+0x66>
 8006e8c:	4b77      	ldr	r3, [pc, #476]	; (800706c <__ieee754_exp+0x1f4>)
 8006e8e:	429a      	cmp	r2, r3
 8006e90:	d90f      	bls.n	8006eb2 <__ieee754_exp+0x3a>
 8006e92:	ee10 3a10 	vmov	r3, s0
 8006e96:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8006e9a:	430b      	orrs	r3, r1
 8006e9c:	d003      	beq.n	8006ea6 <__ieee754_exp+0x2e>
 8006e9e:	ee30 0b00 	vadd.f64	d0, d0, d0
 8006ea2:	b002      	add	sp, #8
 8006ea4:	4770      	bx	lr
 8006ea6:	ed9f 7b56 	vldr	d7, [pc, #344]	; 8007000 <__ieee754_exp+0x188>
 8006eaa:	2800      	cmp	r0, #0
 8006eac:	fe00 0b07 	vseleq.f64	d0, d0, d7
 8006eb0:	e7f7      	b.n	8006ea2 <__ieee754_exp+0x2a>
 8006eb2:	ed9f 7b55 	vldr	d7, [pc, #340]	; 8007008 <__ieee754_exp+0x190>
 8006eb6:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8006eba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006ebe:	dd04      	ble.n	8006eca <__ieee754_exp+0x52>
 8006ec0:	ed9f 0b53 	vldr	d0, [pc, #332]	; 8007010 <__ieee754_exp+0x198>
 8006ec4:	ee20 0b00 	vmul.f64	d0, d0, d0
 8006ec8:	e7eb      	b.n	8006ea2 <__ieee754_exp+0x2a>
 8006eca:	ed9f 7b53 	vldr	d7, [pc, #332]	; 8007018 <__ieee754_exp+0x1a0>
 8006ece:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8006ed2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006ed6:	d505      	bpl.n	8006ee4 <__ieee754_exp+0x6c>
 8006ed8:	ed9f 0b49 	vldr	d0, [pc, #292]	; 8007000 <__ieee754_exp+0x188>
 8006edc:	e7e1      	b.n	8006ea2 <__ieee754_exp+0x2a>
 8006ede:	4b64      	ldr	r3, [pc, #400]	; (8007070 <__ieee754_exp+0x1f8>)
 8006ee0:	429a      	cmp	r2, r3
 8006ee2:	d956      	bls.n	8006f92 <__ieee754_exp+0x11a>
 8006ee4:	4b63      	ldr	r3, [pc, #396]	; (8007074 <__ieee754_exp+0x1fc>)
 8006ee6:	429a      	cmp	r2, r3
 8006ee8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8006eec:	d838      	bhi.n	8006f60 <__ieee754_exp+0xe8>
 8006eee:	4b62      	ldr	r3, [pc, #392]	; (8007078 <__ieee754_exp+0x200>)
 8006ef0:	4413      	add	r3, r2
 8006ef2:	ed93 6b00 	vldr	d6, [r3]
 8006ef6:	4b61      	ldr	r3, [pc, #388]	; (800707c <__ieee754_exp+0x204>)
 8006ef8:	ee30 6b46 	vsub.f64	d6, d0, d6
 8006efc:	4413      	add	r3, r2
 8006efe:	ed93 7b00 	vldr	d7, [r3]
 8006f02:	f1c0 0301 	rsb	r3, r0, #1
 8006f06:	1a1b      	subs	r3, r3, r0
 8006f08:	ee36 0b47 	vsub.f64	d0, d6, d7
 8006f0c:	ed9f 4b44 	vldr	d4, [pc, #272]	; 8007020 <__ieee754_exp+0x1a8>
 8006f10:	ee20 5b00 	vmul.f64	d5, d0, d0
 8006f14:	ed9f 3b44 	vldr	d3, [pc, #272]	; 8007028 <__ieee754_exp+0x1b0>
 8006f18:	eea5 3b04 	vfma.f64	d3, d5, d4
 8006f1c:	ed9f 4b44 	vldr	d4, [pc, #272]	; 8007030 <__ieee754_exp+0x1b8>
 8006f20:	eea3 4b05 	vfma.f64	d4, d3, d5
 8006f24:	ed9f 3b44 	vldr	d3, [pc, #272]	; 8007038 <__ieee754_exp+0x1c0>
 8006f28:	eea4 3b05 	vfma.f64	d3, d4, d5
 8006f2c:	ed9f 4b44 	vldr	d4, [pc, #272]	; 8007040 <__ieee754_exp+0x1c8>
 8006f30:	eea3 4b05 	vfma.f64	d4, d3, d5
 8006f34:	eeb0 3b40 	vmov.f64	d3, d0
 8006f38:	eea4 3b45 	vfms.f64	d3, d4, d5
 8006f3c:	eeb0 4b00 	vmov.f64	d4, #0	; 0x40000000  2.0
 8006f40:	eeb0 5b43 	vmov.f64	d5, d3
 8006f44:	ee20 2b03 	vmul.f64	d2, d0, d3
 8006f48:	eeb7 3b00 	vmov.f64	d3, #112	; 0x3f800000  1.0
 8006f4c:	bba3      	cbnz	r3, 8006fb8 <__ieee754_exp+0x140>
 8006f4e:	ee35 5b44 	vsub.f64	d5, d5, d4
 8006f52:	ee82 7b05 	vdiv.f64	d7, d2, d5
 8006f56:	ee37 0b40 	vsub.f64	d0, d7, d0
 8006f5a:	ee33 0b40 	vsub.f64	d0, d3, d0
 8006f5e:	e7a0      	b.n	8006ea2 <__ieee754_exp+0x2a>
 8006f60:	4b47      	ldr	r3, [pc, #284]	; (8007080 <__ieee754_exp+0x208>)
 8006f62:	4413      	add	r3, r2
 8006f64:	ed93 7b00 	vldr	d7, [r3]
 8006f68:	ed9f 6b37 	vldr	d6, [pc, #220]	; 8007048 <__ieee754_exp+0x1d0>
 8006f6c:	ed9f 5b38 	vldr	d5, [pc, #224]	; 8007050 <__ieee754_exp+0x1d8>
 8006f70:	eea0 7b06 	vfma.f64	d7, d0, d6
 8006f74:	ed9f 6b38 	vldr	d6, [pc, #224]	; 8007058 <__ieee754_exp+0x1e0>
 8006f78:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8006f7c:	ee17 3a90 	vmov	r3, s15
 8006f80:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006f84:	eea7 0b46 	vfms.f64	d0, d7, d6
 8006f88:	ee27 7b05 	vmul.f64	d7, d7, d5
 8006f8c:	eeb0 6b40 	vmov.f64	d6, d0
 8006f90:	e7ba      	b.n	8006f08 <__ieee754_exp+0x90>
 8006f92:	4b3c      	ldr	r3, [pc, #240]	; (8007084 <__ieee754_exp+0x20c>)
 8006f94:	429a      	cmp	r2, r3
 8006f96:	d80d      	bhi.n	8006fb4 <__ieee754_exp+0x13c>
 8006f98:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 8006f9c:	ed9f 5b1c 	vldr	d5, [pc, #112]	; 8007010 <__ieee754_exp+0x198>
 8006fa0:	ee30 5b05 	vadd.f64	d5, d0, d5
 8006fa4:	eeb4 5bc4 	vcmpe.f64	d5, d4
 8006fa8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006fac:	dd02      	ble.n	8006fb4 <__ieee754_exp+0x13c>
 8006fae:	ee30 0b04 	vadd.f64	d0, d0, d4
 8006fb2:	e776      	b.n	8006ea2 <__ieee754_exp+0x2a>
 8006fb4:	2300      	movs	r3, #0
 8006fb6:	e7a9      	b.n	8006f0c <__ieee754_exp+0x94>
 8006fb8:	f46f 717f 	mvn.w	r1, #1020	; 0x3fc
 8006fbc:	ee34 5b45 	vsub.f64	d5, d4, d5
 8006fc0:	428b      	cmp	r3, r1
 8006fc2:	ee82 4b05 	vdiv.f64	d4, d2, d5
 8006fc6:	ee37 7b44 	vsub.f64	d7, d7, d4
 8006fca:	ee37 7b46 	vsub.f64	d7, d7, d6
 8006fce:	ee33 7b47 	vsub.f64	d7, d3, d7
 8006fd2:	ed8d 7b00 	vstr	d7, [sp]
 8006fd6:	9a01      	ldr	r2, [sp, #4]
 8006fd8:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006fdc:	db04      	blt.n	8006fe8 <__ieee754_exp+0x170>
 8006fde:	eb02 5103 	add.w	r1, r2, r3, lsl #20
 8006fe2:	ec41 0b10 	vmov	d0, r0, r1
 8006fe6:	e75c      	b.n	8006ea2 <__ieee754_exp+0x2a>
 8006fe8:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8006fec:	eb02 5103 	add.w	r1, r2, r3, lsl #20
 8006ff0:	ed9f 7b1b 	vldr	d7, [pc, #108]	; 8007060 <__ieee754_exp+0x1e8>
 8006ff4:	ec41 0b10 	vmov	d0, r0, r1
 8006ff8:	ee20 0b07 	vmul.f64	d0, d0, d7
 8006ffc:	e751      	b.n	8006ea2 <__ieee754_exp+0x2a>
 8006ffe:	bf00      	nop
	...
 8007008:	fefa39ef 	.word	0xfefa39ef
 800700c:	40862e42 	.word	0x40862e42
 8007010:	8800759c 	.word	0x8800759c
 8007014:	7e37e43c 	.word	0x7e37e43c
 8007018:	d52d3051 	.word	0xd52d3051
 800701c:	c0874910 	.word	0xc0874910
 8007020:	72bea4d0 	.word	0x72bea4d0
 8007024:	3e663769 	.word	0x3e663769
 8007028:	c5d26bf1 	.word	0xc5d26bf1
 800702c:	bebbbd41 	.word	0xbebbbd41
 8007030:	af25de2c 	.word	0xaf25de2c
 8007034:	3f11566a 	.word	0x3f11566a
 8007038:	16bebd93 	.word	0x16bebd93
 800703c:	bf66c16c 	.word	0xbf66c16c
 8007040:	5555553e 	.word	0x5555553e
 8007044:	3fc55555 	.word	0x3fc55555
 8007048:	652b82fe 	.word	0x652b82fe
 800704c:	3ff71547 	.word	0x3ff71547
 8007050:	35793c76 	.word	0x35793c76
 8007054:	3dea39ef 	.word	0x3dea39ef
 8007058:	fee00000 	.word	0xfee00000
 800705c:	3fe62e42 	.word	0x3fe62e42
 8007060:	00000000 	.word	0x00000000
 8007064:	01700000 	.word	0x01700000
 8007068:	40862e41 	.word	0x40862e41
 800706c:	7fefffff 	.word	0x7fefffff
 8007070:	3fd62e42 	.word	0x3fd62e42
 8007074:	3ff0a2b1 	.word	0x3ff0a2b1
 8007078:	080086d0 	.word	0x080086d0
 800707c:	080086e0 	.word	0x080086e0
 8007080:	080086c0 	.word	0x080086c0
 8007084:	3e2fffff 	.word	0x3e2fffff

08007088 <__ieee754_log>:
 8007088:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800708a:	ed8d 0b00 	vstr	d0, [sp]
 800708e:	9a01      	ldr	r2, [sp, #4]
 8007090:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 8007094:	da26      	bge.n	80070e4 <__ieee754_log+0x5c>
 8007096:	9900      	ldr	r1, [sp, #0]
 8007098:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 800709c:	430b      	orrs	r3, r1
 800709e:	d107      	bne.n	80070b0 <__ieee754_log+0x28>
 80070a0:	ed9f 6b6b 	vldr	d6, [pc, #428]	; 8007250 <__ieee754_log+0x1c8>
 80070a4:	ed9f 7b6c 	vldr	d7, [pc, #432]	; 8007258 <__ieee754_log+0x1d0>
 80070a8:	ee86 0b07 	vdiv.f64	d0, d6, d7
 80070ac:	b003      	add	sp, #12
 80070ae:	bd30      	pop	{r4, r5, pc}
 80070b0:	2a00      	cmp	r2, #0
 80070b2:	da04      	bge.n	80070be <__ieee754_log+0x36>
 80070b4:	ed9d 7b00 	vldr	d7, [sp]
 80070b8:	ee37 6b47 	vsub.f64	d6, d7, d7
 80070bc:	e7f2      	b.n	80070a4 <__ieee754_log+0x1c>
 80070be:	ed9d 6b00 	vldr	d6, [sp]
 80070c2:	ed9f 7b67 	vldr	d7, [pc, #412]	; 8007260 <__ieee754_log+0x1d8>
 80070c6:	ee26 7b07 	vmul.f64	d7, d6, d7
 80070ca:	ed8d 7b00 	vstr	d7, [sp]
 80070ce:	9a01      	ldr	r2, [sp, #4]
 80070d0:	f06f 0135 	mvn.w	r1, #53	; 0x35
 80070d4:	4b78      	ldr	r3, [pc, #480]	; (80072b8 <__ieee754_log+0x230>)
 80070d6:	429a      	cmp	r2, r3
 80070d8:	dd06      	ble.n	80070e8 <__ieee754_log+0x60>
 80070da:	ed9d 7b00 	vldr	d7, [sp]
 80070de:	ee37 0b07 	vadd.f64	d0, d7, d7
 80070e2:	e7e3      	b.n	80070ac <__ieee754_log+0x24>
 80070e4:	2100      	movs	r1, #0
 80070e6:	e7f5      	b.n	80070d4 <__ieee754_log+0x4c>
 80070e8:	1513      	asrs	r3, r2, #20
 80070ea:	f3c2 0013 	ubfx	r0, r2, #0, #20
 80070ee:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80070f2:	4419      	add	r1, r3
 80070f4:	f500 2315 	add.w	r3, r0, #610304	; 0x95000
 80070f8:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 80070fc:	f403 1480 	and.w	r4, r3, #1048576	; 0x100000
 8007100:	f084 557f 	eor.w	r5, r4, #1069547520	; 0x3fc00000
 8007104:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007108:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 800710c:	f485 1540 	eor.w	r5, r5, #3145728	; 0x300000
 8007110:	ea45 0300 	orr.w	r3, r5, r0
 8007114:	ec43 2b10 	vmov	d0, r2, r3
 8007118:	1c82      	adds	r2, r0, #2
 800711a:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800711e:	2a02      	cmp	r2, #2
 8007120:	eb01 5414 	add.w	r4, r1, r4, lsr #20
 8007124:	ee30 0b47 	vsub.f64	d0, d0, d7
 8007128:	dc31      	bgt.n	800718e <__ieee754_log+0x106>
 800712a:	eeb5 0b40 	vcmp.f64	d0, #0.0
 800712e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007132:	d10f      	bne.n	8007154 <__ieee754_log+0xcc>
 8007134:	2c00      	cmp	r4, #0
 8007136:	f000 8086 	beq.w	8007246 <__ieee754_log+0x1be>
 800713a:	ed9f 0b4b 	vldr	d0, [pc, #300]	; 8007268 <__ieee754_log+0x1e0>
 800713e:	ed9f 6b4c 	vldr	d6, [pc, #304]	; 8007270 <__ieee754_log+0x1e8>
 8007142:	ee07 4a90 	vmov	s15, r4
 8007146:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800714a:	ee27 0b00 	vmul.f64	d0, d7, d0
 800714e:	eea7 0b06 	vfma.f64	d0, d7, d6
 8007152:	e7ab      	b.n	80070ac <__ieee754_log+0x24>
 8007154:	ed9f 7b48 	vldr	d7, [pc, #288]	; 8007278 <__ieee754_log+0x1f0>
 8007158:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 800715c:	eea0 6b47 	vfms.f64	d6, d0, d7
 8007160:	ee20 7b00 	vmul.f64	d7, d0, d0
 8007164:	ee26 6b07 	vmul.f64	d6, d6, d7
 8007168:	b914      	cbnz	r4, 8007170 <__ieee754_log+0xe8>
 800716a:	ee30 0b46 	vsub.f64	d0, d0, d6
 800716e:	e79d      	b.n	80070ac <__ieee754_log+0x24>
 8007170:	ed9f 5b3d 	vldr	d5, [pc, #244]	; 8007268 <__ieee754_log+0x1e0>
 8007174:	ee07 4a90 	vmov	s15, r4
 8007178:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800717c:	eea7 6b45 	vfms.f64	d6, d7, d5
 8007180:	ee36 0b40 	vsub.f64	d0, d6, d0
 8007184:	ed9f 6b3a 	vldr	d6, [pc, #232]	; 8007270 <__ieee754_log+0x1e8>
 8007188:	ee97 0b06 	vfnms.f64	d0, d7, d6
 800718c:	e78e      	b.n	80070ac <__ieee754_log+0x24>
 800718e:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 8007192:	ee30 7b07 	vadd.f64	d7, d0, d7
 8007196:	ee80 4b07 	vdiv.f64	d4, d0, d7
 800719a:	ee07 4a90 	vmov	s15, r4
 800719e:	ee24 2b04 	vmul.f64	d2, d4, d4
 80071a2:	ed9f 3b37 	vldr	d3, [pc, #220]	; 8007280 <__ieee754_log+0x1f8>
 80071a6:	ee22 5b02 	vmul.f64	d5, d2, d2
 80071aa:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80071ae:	ed9f 7b36 	vldr	d7, [pc, #216]	; 8007288 <__ieee754_log+0x200>
 80071b2:	eea5 7b03 	vfma.f64	d7, d5, d3
 80071b6:	ed9f 3b36 	vldr	d3, [pc, #216]	; 8007290 <__ieee754_log+0x208>
 80071ba:	ed9f 1b37 	vldr	d1, [pc, #220]	; 8007298 <__ieee754_log+0x210>
 80071be:	eea7 3b05 	vfma.f64	d3, d7, d5
 80071c2:	ed9f 7b37 	vldr	d7, [pc, #220]	; 80072a0 <__ieee754_log+0x218>
 80071c6:	eea5 7b01 	vfma.f64	d7, d5, d1
 80071ca:	ed9f 1b37 	vldr	d1, [pc, #220]	; 80072a8 <__ieee754_log+0x220>
 80071ce:	f5a0 21c2 	sub.w	r1, r0, #397312	; 0x61000
 80071d2:	f5c0 22d7 	rsb	r2, r0, #440320	; 0x6b800
 80071d6:	eea7 1b05 	vfma.f64	d1, d7, d5
 80071da:	f2a1 417a 	subw	r1, r1, #1146	; 0x47a
 80071de:	ed9f 7b34 	vldr	d7, [pc, #208]	; 80072b0 <__ieee754_log+0x228>
 80071e2:	3251      	adds	r2, #81	; 0x51
 80071e4:	430a      	orrs	r2, r1
 80071e6:	2a00      	cmp	r2, #0
 80071e8:	eea1 7b05 	vfma.f64	d7, d1, d5
 80071ec:	ee27 7b02 	vmul.f64	d7, d7, d2
 80071f0:	eea3 7b05 	vfma.f64	d7, d3, d5
 80071f4:	dd1c      	ble.n	8007230 <__ieee754_log+0x1a8>
 80071f6:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 80071fa:	ee20 5b05 	vmul.f64	d5, d0, d5
 80071fe:	ee25 5b00 	vmul.f64	d5, d5, d0
 8007202:	ee37 7b05 	vadd.f64	d7, d7, d5
 8007206:	ee27 7b04 	vmul.f64	d7, d7, d4
 800720a:	b924      	cbnz	r4, 8007216 <__ieee754_log+0x18e>
 800720c:	ee35 7b47 	vsub.f64	d7, d5, d7
 8007210:	ee30 0b47 	vsub.f64	d0, d0, d7
 8007214:	e74a      	b.n	80070ac <__ieee754_log+0x24>
 8007216:	ed9f 4b14 	vldr	d4, [pc, #80]	; 8007268 <__ieee754_log+0x1e0>
 800721a:	eea6 7b04 	vfma.f64	d7, d6, d4
 800721e:	ee35 7b47 	vsub.f64	d7, d5, d7
 8007222:	ee37 0b40 	vsub.f64	d0, d7, d0
 8007226:	ed9f 7b12 	vldr	d7, [pc, #72]	; 8007270 <__ieee754_log+0x1e8>
 800722a:	ee96 0b07 	vfnms.f64	d0, d6, d7
 800722e:	e73d      	b.n	80070ac <__ieee754_log+0x24>
 8007230:	ee30 7b47 	vsub.f64	d7, d0, d7
 8007234:	ee27 7b04 	vmul.f64	d7, d7, d4
 8007238:	2c00      	cmp	r4, #0
 800723a:	d0e9      	beq.n	8007210 <__ieee754_log+0x188>
 800723c:	ed9f 5b0a 	vldr	d5, [pc, #40]	; 8007268 <__ieee754_log+0x1e0>
 8007240:	eea6 7b45 	vfms.f64	d7, d6, d5
 8007244:	e7ed      	b.n	8007222 <__ieee754_log+0x19a>
 8007246:	ed9f 0b04 	vldr	d0, [pc, #16]	; 8007258 <__ieee754_log+0x1d0>
 800724a:	e72f      	b.n	80070ac <__ieee754_log+0x24>
 800724c:	f3af 8000 	nop.w
 8007250:	00000000 	.word	0x00000000
 8007254:	c3500000 	.word	0xc3500000
	...
 8007264:	43500000 	.word	0x43500000
 8007268:	35793c76 	.word	0x35793c76
 800726c:	3dea39ef 	.word	0x3dea39ef
 8007270:	fee00000 	.word	0xfee00000
 8007274:	3fe62e42 	.word	0x3fe62e42
 8007278:	55555555 	.word	0x55555555
 800727c:	3fd55555 	.word	0x3fd55555
 8007280:	d078c69f 	.word	0xd078c69f
 8007284:	3fc39a09 	.word	0x3fc39a09
 8007288:	1d8e78af 	.word	0x1d8e78af
 800728c:	3fcc71c5 	.word	0x3fcc71c5
 8007290:	9997fa04 	.word	0x9997fa04
 8007294:	3fd99999 	.word	0x3fd99999
 8007298:	df3e5244 	.word	0xdf3e5244
 800729c:	3fc2f112 	.word	0x3fc2f112
 80072a0:	96cb03de 	.word	0x96cb03de
 80072a4:	3fc74664 	.word	0x3fc74664
 80072a8:	94229359 	.word	0x94229359
 80072ac:	3fd24924 	.word	0x3fd24924
 80072b0:	55555593 	.word	0x55555593
 80072b4:	3fe55555 	.word	0x3fe55555
 80072b8:	7fefffff 	.word	0x7fefffff
 80072bc:	00000000 	.word	0x00000000

080072c0 <__ieee754_pow>:
 80072c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072c4:	ec57 6b11 	vmov	r6, r7, d1
 80072c8:	ed2d 8b02 	vpush	{d8}
 80072cc:	eeb0 8b40 	vmov.f64	d8, d0
 80072d0:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 80072d4:	ea58 0306 	orrs.w	r3, r8, r6
 80072d8:	b085      	sub	sp, #20
 80072da:	46b9      	mov	r9, r7
 80072dc:	ee11 2a10 	vmov	r2, s2
 80072e0:	f000 8306 	beq.w	80078f0 <__ieee754_pow+0x630>
 80072e4:	ee18 aa90 	vmov	sl, s17
 80072e8:	4bb9      	ldr	r3, [pc, #740]	; (80075d0 <__ieee754_pow+0x310>)
 80072ea:	f02a 4400 	bic.w	r4, sl, #2147483648	; 0x80000000
 80072ee:	429c      	cmp	r4, r3
 80072f0:	ee10 ba10 	vmov	fp, s0
 80072f4:	dc0b      	bgt.n	800730e <__ieee754_pow+0x4e>
 80072f6:	d105      	bne.n	8007304 <__ieee754_pow+0x44>
 80072f8:	f1bb 0f00 	cmp.w	fp, #0
 80072fc:	d107      	bne.n	800730e <__ieee754_pow+0x4e>
 80072fe:	45a0      	cmp	r8, r4
 8007300:	dc0d      	bgt.n	800731e <__ieee754_pow+0x5e>
 8007302:	e001      	b.n	8007308 <__ieee754_pow+0x48>
 8007304:	4598      	cmp	r8, r3
 8007306:	dc02      	bgt.n	800730e <__ieee754_pow+0x4e>
 8007308:	4598      	cmp	r8, r3
 800730a:	d110      	bne.n	800732e <__ieee754_pow+0x6e>
 800730c:	b17a      	cbz	r2, 800732e <__ieee754_pow+0x6e>
 800730e:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8007312:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8007316:	ea54 030b 	orrs.w	r3, r4, fp
 800731a:	f000 82e9 	beq.w	80078f0 <__ieee754_pow+0x630>
 800731e:	48ad      	ldr	r0, [pc, #692]	; (80075d4 <__ieee754_pow+0x314>)
 8007320:	b005      	add	sp, #20
 8007322:	ecbd 8b02 	vpop	{d8}
 8007326:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800732a:	f001 b881 	b.w	8008430 <nan>
 800732e:	f1ba 0f00 	cmp.w	sl, #0
 8007332:	da4e      	bge.n	80073d2 <__ieee754_pow+0x112>
 8007334:	4ba8      	ldr	r3, [pc, #672]	; (80075d8 <__ieee754_pow+0x318>)
 8007336:	4598      	cmp	r8, r3
 8007338:	dc49      	bgt.n	80073ce <__ieee754_pow+0x10e>
 800733a:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800733e:	4598      	cmp	r8, r3
 8007340:	dd47      	ble.n	80073d2 <__ieee754_pow+0x112>
 8007342:	ea4f 5328 	mov.w	r3, r8, asr #20
 8007346:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800734a:	2b14      	cmp	r3, #20
 800734c:	dd24      	ble.n	8007398 <__ieee754_pow+0xd8>
 800734e:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8007352:	fa22 f503 	lsr.w	r5, r2, r3
 8007356:	fa05 f303 	lsl.w	r3, r5, r3
 800735a:	4293      	cmp	r3, r2
 800735c:	d139      	bne.n	80073d2 <__ieee754_pow+0x112>
 800735e:	f005 0501 	and.w	r5, r5, #1
 8007362:	f1c5 0502 	rsb	r5, r5, #2
 8007366:	2a00      	cmp	r2, #0
 8007368:	d15a      	bne.n	8007420 <__ieee754_pow+0x160>
 800736a:	4b99      	ldr	r3, [pc, #612]	; (80075d0 <__ieee754_pow+0x310>)
 800736c:	4598      	cmp	r8, r3
 800736e:	d122      	bne.n	80073b6 <__ieee754_pow+0xf6>
 8007370:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8007374:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8007378:	ea53 030b 	orrs.w	r3, r3, fp
 800737c:	f000 82b8 	beq.w	80078f0 <__ieee754_pow+0x630>
 8007380:	4b96      	ldr	r3, [pc, #600]	; (80075dc <__ieee754_pow+0x31c>)
 8007382:	429c      	cmp	r4, r3
 8007384:	dd27      	ble.n	80073d6 <__ieee754_pow+0x116>
 8007386:	f1b9 0f00 	cmp.w	r9, #0
 800738a:	f280 82b4 	bge.w	80078f6 <__ieee754_pow+0x636>
 800738e:	ed9f 7b84 	vldr	d7, [pc, #528]	; 80075a0 <__ieee754_pow+0x2e0>
 8007392:	ed8d 7b00 	vstr	d7, [sp]
 8007396:	e026      	b.n	80073e6 <__ieee754_pow+0x126>
 8007398:	2a00      	cmp	r2, #0
 800739a:	d140      	bne.n	800741e <__ieee754_pow+0x15e>
 800739c:	f1c3 0314 	rsb	r3, r3, #20
 80073a0:	fa48 f503 	asr.w	r5, r8, r3
 80073a4:	fa05 f303 	lsl.w	r3, r5, r3
 80073a8:	4543      	cmp	r3, r8
 80073aa:	f040 82aa 	bne.w	8007902 <__ieee754_pow+0x642>
 80073ae:	f005 0501 	and.w	r5, r5, #1
 80073b2:	f1c5 0502 	rsb	r5, r5, #2
 80073b6:	4b8a      	ldr	r3, [pc, #552]	; (80075e0 <__ieee754_pow+0x320>)
 80073b8:	4598      	cmp	r8, r3
 80073ba:	d11b      	bne.n	80073f4 <__ieee754_pow+0x134>
 80073bc:	f1b9 0f00 	cmp.w	r9, #0
 80073c0:	f280 829c 	bge.w	80078fc <__ieee754_pow+0x63c>
 80073c4:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 80073c8:	ee87 7b08 	vdiv.f64	d7, d7, d8
 80073cc:	e7e1      	b.n	8007392 <__ieee754_pow+0xd2>
 80073ce:	2502      	movs	r5, #2
 80073d0:	e7c9      	b.n	8007366 <__ieee754_pow+0xa6>
 80073d2:	2500      	movs	r5, #0
 80073d4:	e7c7      	b.n	8007366 <__ieee754_pow+0xa6>
 80073d6:	f1b9 0f00 	cmp.w	r9, #0
 80073da:	dad8      	bge.n	800738e <__ieee754_pow+0xce>
 80073dc:	f087 4400 	eor.w	r4, r7, #2147483648	; 0x80000000
 80073e0:	4633      	mov	r3, r6
 80073e2:	e9cd 3400 	strd	r3, r4, [sp]
 80073e6:	ed9d 0b00 	vldr	d0, [sp]
 80073ea:	b005      	add	sp, #20
 80073ec:	ecbd 8b02 	vpop	{d8}
 80073f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80073f4:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 80073f8:	d102      	bne.n	8007400 <__ieee754_pow+0x140>
 80073fa:	ee28 7b08 	vmul.f64	d7, d8, d8
 80073fe:	e7c8      	b.n	8007392 <__ieee754_pow+0xd2>
 8007400:	4b78      	ldr	r3, [pc, #480]	; (80075e4 <__ieee754_pow+0x324>)
 8007402:	4599      	cmp	r9, r3
 8007404:	d10c      	bne.n	8007420 <__ieee754_pow+0x160>
 8007406:	f1ba 0f00 	cmp.w	sl, #0
 800740a:	db09      	blt.n	8007420 <__ieee754_pow+0x160>
 800740c:	eeb0 0b48 	vmov.f64	d0, d8
 8007410:	b005      	add	sp, #20
 8007412:	ecbd 8b02 	vpop	{d8}
 8007416:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800741a:	f000 bc15 	b.w	8007c48 <__ieee754_sqrt>
 800741e:	2500      	movs	r5, #0
 8007420:	eeb0 0b48 	vmov.f64	d0, d8
 8007424:	f000 ff74 	bl	8008310 <fabs>
 8007428:	ed8d 0b00 	vstr	d0, [sp]
 800742c:	f1bb 0f00 	cmp.w	fp, #0
 8007430:	d128      	bne.n	8007484 <__ieee754_pow+0x1c4>
 8007432:	b124      	cbz	r4, 800743e <__ieee754_pow+0x17e>
 8007434:	4b6a      	ldr	r3, [pc, #424]	; (80075e0 <__ieee754_pow+0x320>)
 8007436:	f02a 4240 	bic.w	r2, sl, #3221225472	; 0xc0000000
 800743a:	429a      	cmp	r2, r3
 800743c:	d122      	bne.n	8007484 <__ieee754_pow+0x1c4>
 800743e:	f1b9 0f00 	cmp.w	r9, #0
 8007442:	da07      	bge.n	8007454 <__ieee754_pow+0x194>
 8007444:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 8007448:	ed9d 6b00 	vldr	d6, [sp]
 800744c:	ee87 7b06 	vdiv.f64	d7, d7, d6
 8007450:	ed8d 7b00 	vstr	d7, [sp]
 8007454:	f1ba 0f00 	cmp.w	sl, #0
 8007458:	dac5      	bge.n	80073e6 <__ieee754_pow+0x126>
 800745a:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800745e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8007462:	ea54 0305 	orrs.w	r3, r4, r5
 8007466:	d106      	bne.n	8007476 <__ieee754_pow+0x1b6>
 8007468:	ed9d 7b00 	vldr	d7, [sp]
 800746c:	ee37 7b47 	vsub.f64	d7, d7, d7
 8007470:	ee87 7b07 	vdiv.f64	d7, d7, d7
 8007474:	e78d      	b.n	8007392 <__ieee754_pow+0xd2>
 8007476:	2d01      	cmp	r5, #1
 8007478:	d1b5      	bne.n	80073e6 <__ieee754_pow+0x126>
 800747a:	ed9d 7b00 	vldr	d7, [sp]
 800747e:	eeb1 7b47 	vneg.f64	d7, d7
 8007482:	e786      	b.n	8007392 <__ieee754_pow+0xd2>
 8007484:	ea4f 7ada 	mov.w	sl, sl, lsr #31
 8007488:	f10a 3aff 	add.w	sl, sl, #4294967295
 800748c:	ea55 030a 	orrs.w	r3, r5, sl
 8007490:	d104      	bne.n	800749c <__ieee754_pow+0x1dc>
 8007492:	ee38 8b48 	vsub.f64	d8, d8, d8
 8007496:	ee88 7b08 	vdiv.f64	d7, d8, d8
 800749a:	e77a      	b.n	8007392 <__ieee754_pow+0xd2>
 800749c:	4b52      	ldr	r3, [pc, #328]	; (80075e8 <__ieee754_pow+0x328>)
 800749e:	4598      	cmp	r8, r3
 80074a0:	f340 80a8 	ble.w	80075f4 <__ieee754_pow+0x334>
 80074a4:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 80074a8:	4598      	cmp	r8, r3
 80074aa:	dd0b      	ble.n	80074c4 <__ieee754_pow+0x204>
 80074ac:	4b4b      	ldr	r3, [pc, #300]	; (80075dc <__ieee754_pow+0x31c>)
 80074ae:	429c      	cmp	r4, r3
 80074b0:	dc0e      	bgt.n	80074d0 <__ieee754_pow+0x210>
 80074b2:	f1b9 0f00 	cmp.w	r9, #0
 80074b6:	f6bf af6a 	bge.w	800738e <__ieee754_pow+0xce>
 80074ba:	ed9f 7b3b 	vldr	d7, [pc, #236]	; 80075a8 <__ieee754_pow+0x2e8>
 80074be:	ee27 7b07 	vmul.f64	d7, d7, d7
 80074c2:	e766      	b.n	8007392 <__ieee754_pow+0xd2>
 80074c4:	4b49      	ldr	r3, [pc, #292]	; (80075ec <__ieee754_pow+0x32c>)
 80074c6:	429c      	cmp	r4, r3
 80074c8:	ddf3      	ble.n	80074b2 <__ieee754_pow+0x1f2>
 80074ca:	4b45      	ldr	r3, [pc, #276]	; (80075e0 <__ieee754_pow+0x320>)
 80074cc:	429c      	cmp	r4, r3
 80074ce:	dd03      	ble.n	80074d8 <__ieee754_pow+0x218>
 80074d0:	f1b9 0f00 	cmp.w	r9, #0
 80074d4:	dcf1      	bgt.n	80074ba <__ieee754_pow+0x1fa>
 80074d6:	e75a      	b.n	800738e <__ieee754_pow+0xce>
 80074d8:	ed9d 7b00 	vldr	d7, [sp]
 80074dc:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80074e0:	ed9f 5b33 	vldr	d5, [pc, #204]	; 80075b0 <__ieee754_pow+0x2f0>
 80074e4:	ee37 6b46 	vsub.f64	d6, d7, d6
 80074e8:	eeb5 7b00 	vmov.f64	d7, #80	; 0x3e800000  0.250
 80074ec:	eeb1 3b46 	vneg.f64	d3, d6
 80074f0:	eea3 5b07 	vfma.f64	d5, d3, d7
 80074f4:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 80074f8:	eea5 7b46 	vfms.f64	d7, d5, d6
 80074fc:	ee26 5b06 	vmul.f64	d5, d6, d6
 8007500:	ee27 5b05 	vmul.f64	d5, d7, d5
 8007504:	ed9f 7b2c 	vldr	d7, [pc, #176]	; 80075b8 <__ieee754_pow+0x2f8>
 8007508:	ee27 7b45 	vnmul.f64	d7, d7, d5
 800750c:	ed9f 5b2c 	vldr	d5, [pc, #176]	; 80075c0 <__ieee754_pow+0x300>
 8007510:	eea6 7b05 	vfma.f64	d7, d6, d5
 8007514:	ed9f 5b2c 	vldr	d5, [pc, #176]	; 80075c8 <__ieee754_pow+0x308>
 8007518:	eeb0 4b47 	vmov.f64	d4, d7
 800751c:	eea6 4b05 	vfma.f64	d4, d6, d5
 8007520:	ec53 2b14 	vmov	r2, r3, d4
 8007524:	2200      	movs	r2, #0
 8007526:	ec43 2b14 	vmov	d4, r2, r3
 800752a:	eeb0 6b44 	vmov.f64	d6, d4
 800752e:	eea3 6b05 	vfma.f64	d6, d3, d5
 8007532:	ee37 7b46 	vsub.f64	d7, d7, d6
 8007536:	3d01      	subs	r5, #1
 8007538:	ea55 030a 	orrs.w	r3, r5, sl
 800753c:	f04f 0200 	mov.w	r2, #0
 8007540:	463b      	mov	r3, r7
 8007542:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 8007546:	eeb7 8b00 	vmov.f64	d8, #112	; 0x3f800000  1.0
 800754a:	ec47 6b15 	vmov	d5, r6, r7
 800754e:	fe06 8b08 	vseleq.f64	d8, d6, d8
 8007552:	ec47 6b13 	vmov	d3, r6, r7
 8007556:	ec43 2b16 	vmov	d6, r2, r3
 800755a:	ee27 7b03 	vmul.f64	d7, d7, d3
 800755e:	ee35 5b46 	vsub.f64	d5, d5, d6
 8007562:	4b23      	ldr	r3, [pc, #140]	; (80075f0 <__ieee754_pow+0x330>)
 8007564:	eea5 7b04 	vfma.f64	d7, d5, d4
 8007568:	ee24 6b06 	vmul.f64	d6, d4, d6
 800756c:	ee37 5b06 	vadd.f64	d5, d7, d6
 8007570:	ee15 1a90 	vmov	r1, s11
 8007574:	4299      	cmp	r1, r3
 8007576:	ee15 2a10 	vmov	r2, s10
 800757a:	f340 819b 	ble.w	80078b4 <__ieee754_pow+0x5f4>
 800757e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8007582:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8007586:	4313      	orrs	r3, r2
 8007588:	f000 810a 	beq.w	80077a0 <__ieee754_pow+0x4e0>
 800758c:	ed9f 7b06 	vldr	d7, [pc, #24]	; 80075a8 <__ieee754_pow+0x2e8>
 8007590:	ee28 8b07 	vmul.f64	d8, d8, d7
 8007594:	ee28 7b07 	vmul.f64	d7, d8, d7
 8007598:	e6fb      	b.n	8007392 <__ieee754_pow+0xd2>
 800759a:	bf00      	nop
 800759c:	f3af 8000 	nop.w
	...
 80075a8:	8800759c 	.word	0x8800759c
 80075ac:	7e37e43c 	.word	0x7e37e43c
 80075b0:	55555555 	.word	0x55555555
 80075b4:	3fd55555 	.word	0x3fd55555
 80075b8:	652b82fe 	.word	0x652b82fe
 80075bc:	3ff71547 	.word	0x3ff71547
 80075c0:	f85ddf44 	.word	0xf85ddf44
 80075c4:	3e54ae0b 	.word	0x3e54ae0b
 80075c8:	60000000 	.word	0x60000000
 80075cc:	3ff71547 	.word	0x3ff71547
 80075d0:	7ff00000 	.word	0x7ff00000
 80075d4:	080086bb 	.word	0x080086bb
 80075d8:	433fffff 	.word	0x433fffff
 80075dc:	3fefffff 	.word	0x3fefffff
 80075e0:	3ff00000 	.word	0x3ff00000
 80075e4:	3fe00000 	.word	0x3fe00000
 80075e8:	41e00000 	.word	0x41e00000
 80075ec:	3feffffe 	.word	0x3feffffe
 80075f0:	408fffff 	.word	0x408fffff
 80075f4:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 80075f8:	f280 80ce 	bge.w	8007798 <__ieee754_pow+0x4d8>
 80075fc:	ed9d 6b00 	vldr	d6, [sp]
 8007600:	ed9f 7bc1 	vldr	d7, [pc, #772]	; 8007908 <__ieee754_pow+0x648>
 8007604:	ee26 7b07 	vmul.f64	d7, d6, d7
 8007608:	ed8d 7b00 	vstr	d7, [sp]
 800760c:	9c01      	ldr	r4, [sp, #4]
 800760e:	f06f 0334 	mvn.w	r3, #52	; 0x34
 8007612:	1521      	asrs	r1, r4, #20
 8007614:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8007618:	4419      	add	r1, r3
 800761a:	4be3      	ldr	r3, [pc, #908]	; (80079a8 <__ieee754_pow+0x6e8>)
 800761c:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8007620:	f044 507f 	orr.w	r0, r4, #1069547520	; 0x3fc00000
 8007624:	429c      	cmp	r4, r3
 8007626:	f440 1040 	orr.w	r0, r0, #3145728	; 0x300000
 800762a:	dd06      	ble.n	800763a <__ieee754_pow+0x37a>
 800762c:	4bdf      	ldr	r3, [pc, #892]	; (80079ac <__ieee754_pow+0x6ec>)
 800762e:	429c      	cmp	r4, r3
 8007630:	f340 80b4 	ble.w	800779c <__ieee754_pow+0x4dc>
 8007634:	3101      	adds	r1, #1
 8007636:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 800763a:	2400      	movs	r4, #0
 800763c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007640:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 8007644:	4603      	mov	r3, r0
 8007646:	ec43 2b17 	vmov	d7, r2, r3
 800764a:	4bd9      	ldr	r3, [pc, #868]	; (80079b0 <__ieee754_pow+0x6f0>)
 800764c:	ea4f 0cc4 	mov.w	ip, r4, lsl #3
 8007650:	4463      	add	r3, ip
 8007652:	ed93 5b00 	vldr	d5, [r3]
 8007656:	1040      	asrs	r0, r0, #1
 8007658:	ee37 2b45 	vsub.f64	d2, d7, d5
 800765c:	ee35 6b07 	vadd.f64	d6, d5, d7
 8007660:	ee84 1b06 	vdiv.f64	d1, d4, d6
 8007664:	ee22 6b01 	vmul.f64	d6, d2, d1
 8007668:	ed8d 6b00 	vstr	d6, [sp]
 800766c:	e9dd 8900 	ldrd	r8, r9, [sp]
 8007670:	f040 5000 	orr.w	r0, r0, #536870912	; 0x20000000
 8007674:	f500 2000 	add.w	r0, r0, #524288	; 0x80000
 8007678:	f04f 0800 	mov.w	r8, #0
 800767c:	eb00 4384 	add.w	r3, r0, r4, lsl #18
 8007680:	2200      	movs	r2, #0
 8007682:	ec49 8b14 	vmov	d4, r8, r9
 8007686:	ec43 2b16 	vmov	d6, r2, r3
 800768a:	eeb1 3b44 	vneg.f64	d3, d4
 800768e:	eea3 2b06 	vfma.f64	d2, d3, d6
 8007692:	ee36 6b45 	vsub.f64	d6, d6, d5
 8007696:	ee37 7b46 	vsub.f64	d7, d7, d6
 800769a:	eea3 2b07 	vfma.f64	d2, d3, d7
 800769e:	ed9d 7b00 	vldr	d7, [sp]
 80076a2:	ee22 2b01 	vmul.f64	d2, d2, d1
 80076a6:	ee27 5b07 	vmul.f64	d5, d7, d7
 80076aa:	ee37 6b04 	vadd.f64	d6, d7, d4
 80076ae:	ed9f 1b98 	vldr	d1, [pc, #608]	; 8007910 <__ieee754_pow+0x650>
 80076b2:	ee25 0b05 	vmul.f64	d0, d5, d5
 80076b6:	ee26 6b02 	vmul.f64	d6, d6, d2
 80076ba:	ed9f 7b97 	vldr	d7, [pc, #604]	; 8007918 <__ieee754_pow+0x658>
 80076be:	eea5 7b01 	vfma.f64	d7, d5, d1
 80076c2:	ed9f 1b97 	vldr	d1, [pc, #604]	; 8007920 <__ieee754_pow+0x660>
 80076c6:	eea7 1b05 	vfma.f64	d1, d7, d5
 80076ca:	ed9f 7b97 	vldr	d7, [pc, #604]	; 8007928 <__ieee754_pow+0x668>
 80076ce:	eea1 7b05 	vfma.f64	d7, d1, d5
 80076d2:	ed9f 1b97 	vldr	d1, [pc, #604]	; 8007930 <__ieee754_pow+0x670>
 80076d6:	eea7 1b05 	vfma.f64	d1, d7, d5
 80076da:	ed9f 7b97 	vldr	d7, [pc, #604]	; 8007938 <__ieee754_pow+0x678>
 80076de:	eea1 7b05 	vfma.f64	d7, d1, d5
 80076e2:	eea0 6b07 	vfma.f64	d6, d0, d7
 80076e6:	eeb0 7b08 	vmov.f64	d7, #8	; 0x40400000  3.0
 80076ea:	eeb0 5b47 	vmov.f64	d5, d7
 80076ee:	eea4 5b04 	vfma.f64	d5, d4, d4
 80076f2:	ee35 5b06 	vadd.f64	d5, d5, d6
 80076f6:	ed8d 5b02 	vstr	d5, [sp, #8]
 80076fa:	f8cd 8008 	str.w	r8, [sp, #8]
 80076fe:	ed9d 5b02 	vldr	d5, [sp, #8]
 8007702:	ee35 7b47 	vsub.f64	d7, d5, d7
 8007706:	eea3 7b04 	vfma.f64	d7, d3, d4
 800770a:	ee36 7b47 	vsub.f64	d7, d6, d7
 800770e:	ed9d 6b00 	vldr	d6, [sp]
 8007712:	ee27 7b06 	vmul.f64	d7, d7, d6
 8007716:	eea2 7b05 	vfma.f64	d7, d2, d5
 800771a:	eeb0 6b47 	vmov.f64	d6, d7
 800771e:	eea4 6b05 	vfma.f64	d6, d4, d5
 8007722:	ed8d 6b00 	vstr	d6, [sp]
 8007726:	f8cd 8000 	str.w	r8, [sp]
 800772a:	ed9d 2b00 	vldr	d2, [sp]
 800772e:	eeb0 6b42 	vmov.f64	d6, d2
 8007732:	eea3 6b05 	vfma.f64	d6, d3, d5
 8007736:	ee37 7b46 	vsub.f64	d7, d7, d6
 800773a:	ed9f 6b81 	vldr	d6, [pc, #516]	; 8007940 <__ieee754_pow+0x680>
 800773e:	4b9d      	ldr	r3, [pc, #628]	; (80079b4 <__ieee754_pow+0x6f4>)
 8007740:	ee27 7b06 	vmul.f64	d7, d7, d6
 8007744:	ed9f 6b80 	vldr	d6, [pc, #512]	; 8007948 <__ieee754_pow+0x688>
 8007748:	4463      	add	r3, ip
 800774a:	eea2 7b06 	vfma.f64	d7, d2, d6
 800774e:	ed93 6b00 	vldr	d6, [r3]
 8007752:	4b99      	ldr	r3, [pc, #612]	; (80079b8 <__ieee754_pow+0x6f8>)
 8007754:	ee37 6b06 	vadd.f64	d6, d7, d6
 8007758:	449c      	add	ip, r3
 800775a:	ed9c 1b00 	vldr	d1, [ip]
 800775e:	eeb0 4b46 	vmov.f64	d4, d6
 8007762:	ed9f 3b7b 	vldr	d3, [pc, #492]	; 8007950 <__ieee754_pow+0x690>
 8007766:	ee07 1a90 	vmov	s15, r1
 800776a:	eea2 4b03 	vfma.f64	d4, d2, d3
 800776e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8007772:	ee34 4b01 	vadd.f64	d4, d4, d1
 8007776:	ee34 5b07 	vadd.f64	d5, d4, d7
 800777a:	ed8d 5b00 	vstr	d5, [sp]
 800777e:	f8cd 8000 	str.w	r8, [sp]
 8007782:	ed9d 4b00 	vldr	d4, [sp]
 8007786:	ee34 7b47 	vsub.f64	d7, d4, d7
 800778a:	ee37 7b41 	vsub.f64	d7, d7, d1
 800778e:	eea2 7b43 	vfms.f64	d7, d2, d3
 8007792:	ee36 7b47 	vsub.f64	d7, d6, d7
 8007796:	e6ce      	b.n	8007536 <__ieee754_pow+0x276>
 8007798:	2300      	movs	r3, #0
 800779a:	e73a      	b.n	8007612 <__ieee754_pow+0x352>
 800779c:	2401      	movs	r4, #1
 800779e:	e74d      	b.n	800763c <__ieee754_pow+0x37c>
 80077a0:	ed9f 4b6d 	vldr	d4, [pc, #436]	; 8007958 <__ieee754_pow+0x698>
 80077a4:	ee35 5b46 	vsub.f64	d5, d5, d6
 80077a8:	ee37 4b04 	vadd.f64	d4, d7, d4
 80077ac:	eeb4 4bc5 	vcmpe.f64	d4, d5
 80077b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80077b4:	f73f aeea 	bgt.w	800758c <__ieee754_pow+0x2cc>
 80077b8:	4a80      	ldr	r2, [pc, #512]	; (80079bc <__ieee754_pow+0x6fc>)
 80077ba:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80077be:	4293      	cmp	r3, r2
 80077c0:	f340 808e 	ble.w	80078e0 <__ieee754_pow+0x620>
 80077c4:	151b      	asrs	r3, r3, #20
 80077c6:	f2a3 30fe 	subw	r0, r3, #1022	; 0x3fe
 80077ca:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80077ce:	4103      	asrs	r3, r0
 80077d0:	440b      	add	r3, r1
 80077d2:	f3c3 520a 	ubfx	r2, r3, #20, #11
 80077d6:	487a      	ldr	r0, [pc, #488]	; (80079c0 <__ieee754_pow+0x700>)
 80077d8:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 80077dc:	4110      	asrs	r0, r2
 80077de:	ea23 0500 	bic.w	r5, r3, r0
 80077e2:	f3c3 0013 	ubfx	r0, r3, #0, #20
 80077e6:	2400      	movs	r4, #0
 80077e8:	f440 1080 	orr.w	r0, r0, #1048576	; 0x100000
 80077ec:	f1c2 0214 	rsb	r2, r2, #20
 80077f0:	ec45 4b15 	vmov	d5, r4, r5
 80077f4:	4110      	asrs	r0, r2
 80077f6:	2900      	cmp	r1, #0
 80077f8:	bfb8      	it	lt
 80077fa:	4240      	neglt	r0, r0
 80077fc:	ee36 6b45 	vsub.f64	d6, d6, d5
 8007800:	ee36 5b07 	vadd.f64	d5, d6, d7
 8007804:	ec53 2b15 	vmov	r2, r3, d5
 8007808:	2200      	movs	r2, #0
 800780a:	ec43 2b15 	vmov	d5, r2, r3
 800780e:	ed9f 4b54 	vldr	d4, [pc, #336]	; 8007960 <__ieee754_pow+0x6a0>
 8007812:	ee35 6b46 	vsub.f64	d6, d5, d6
 8007816:	ee37 6b46 	vsub.f64	d6, d7, d6
 800781a:	ed9f 7b53 	vldr	d7, [pc, #332]	; 8007968 <__ieee754_pow+0x6a8>
 800781e:	ee25 7b07 	vmul.f64	d7, d5, d7
 8007822:	eea6 7b04 	vfma.f64	d7, d6, d4
 8007826:	ed9f 6b52 	vldr	d6, [pc, #328]	; 8007970 <__ieee754_pow+0x6b0>
 800782a:	eeb0 4b47 	vmov.f64	d4, d7
 800782e:	eea5 4b06 	vfma.f64	d4, d5, d6
 8007832:	eeb0 3b44 	vmov.f64	d3, d4
 8007836:	eea5 3b46 	vfms.f64	d3, d5, d6
 800783a:	ed9f 5b4f 	vldr	d5, [pc, #316]	; 8007978 <__ieee754_pow+0x6b8>
 800783e:	ee37 7b43 	vsub.f64	d7, d7, d3
 8007842:	ee24 6b04 	vmul.f64	d6, d4, d4
 8007846:	ed9f 3b4e 	vldr	d3, [pc, #312]	; 8007980 <__ieee754_pow+0x6c0>
 800784a:	eea4 7b07 	vfma.f64	d7, d4, d7
 800784e:	eea6 3b05 	vfma.f64	d3, d6, d5
 8007852:	ed9f 5b4d 	vldr	d5, [pc, #308]	; 8007988 <__ieee754_pow+0x6c8>
 8007856:	eea3 5b06 	vfma.f64	d5, d3, d6
 800785a:	ed9f 3b4d 	vldr	d3, [pc, #308]	; 8007990 <__ieee754_pow+0x6d0>
 800785e:	eea5 3b06 	vfma.f64	d3, d5, d6
 8007862:	ed9f 5b4d 	vldr	d5, [pc, #308]	; 8007998 <__ieee754_pow+0x6d8>
 8007866:	eea3 5b06 	vfma.f64	d5, d3, d6
 800786a:	eeb0 3b44 	vmov.f64	d3, d4
 800786e:	eea5 3b46 	vfms.f64	d3, d5, d6
 8007872:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8007876:	eeb0 6b43 	vmov.f64	d6, d3
 800787a:	ee24 3b03 	vmul.f64	d3, d4, d3
 800787e:	ee36 5b45 	vsub.f64	d5, d6, d5
 8007882:	ee83 6b05 	vdiv.f64	d6, d3, d5
 8007886:	ee36 7b47 	vsub.f64	d7, d6, d7
 800788a:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800788e:	ee37 7b44 	vsub.f64	d7, d7, d4
 8007892:	ee36 7b47 	vsub.f64	d7, d6, d7
 8007896:	ed8d 7b00 	vstr	d7, [sp]
 800789a:	9901      	ldr	r1, [sp, #4]
 800789c:	eb01 5100 	add.w	r1, r1, r0, lsl #20
 80078a0:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80078a4:	da1e      	bge.n	80078e4 <__ieee754_pow+0x624>
 80078a6:	eeb0 0b47 	vmov.f64	d0, d7
 80078aa:	f000 fe55 	bl	8008558 <scalbn>
 80078ae:	ee20 7b08 	vmul.f64	d7, d0, d8
 80078b2:	e56e      	b.n	8007392 <__ieee754_pow+0xd2>
 80078b4:	4b43      	ldr	r3, [pc, #268]	; (80079c4 <__ieee754_pow+0x704>)
 80078b6:	f021 4000 	bic.w	r0, r1, #2147483648	; 0x80000000
 80078ba:	4298      	cmp	r0, r3
 80078bc:	f77f af7c 	ble.w	80077b8 <__ieee754_pow+0x4f8>
 80078c0:	4b41      	ldr	r3, [pc, #260]	; (80079c8 <__ieee754_pow+0x708>)
 80078c2:	440b      	add	r3, r1
 80078c4:	4313      	orrs	r3, r2
 80078c6:	d002      	beq.n	80078ce <__ieee754_pow+0x60e>
 80078c8:	ed9f 7b35 	vldr	d7, [pc, #212]	; 80079a0 <__ieee754_pow+0x6e0>
 80078cc:	e660      	b.n	8007590 <__ieee754_pow+0x2d0>
 80078ce:	ee35 5b46 	vsub.f64	d5, d5, d6
 80078d2:	eeb4 5bc7 	vcmpe.f64	d5, d7
 80078d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80078da:	f6ff af6d 	blt.w	80077b8 <__ieee754_pow+0x4f8>
 80078de:	e7f3      	b.n	80078c8 <__ieee754_pow+0x608>
 80078e0:	2000      	movs	r0, #0
 80078e2:	e78d      	b.n	8007800 <__ieee754_pow+0x540>
 80078e4:	e9dd 2300 	ldrd	r2, r3, [sp]
 80078e8:	460b      	mov	r3, r1
 80078ea:	ec43 2b10 	vmov	d0, r2, r3
 80078ee:	e7de      	b.n	80078ae <__ieee754_pow+0x5ee>
 80078f0:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 80078f4:	e54d      	b.n	8007392 <__ieee754_pow+0xd2>
 80078f6:	e9cd 6700 	strd	r6, r7, [sp]
 80078fa:	e574      	b.n	80073e6 <__ieee754_pow+0x126>
 80078fc:	ed8d 8b00 	vstr	d8, [sp]
 8007900:	e571      	b.n	80073e6 <__ieee754_pow+0x126>
 8007902:	4615      	mov	r5, r2
 8007904:	e557      	b.n	80073b6 <__ieee754_pow+0xf6>
 8007906:	bf00      	nop
 8007908:	00000000 	.word	0x00000000
 800790c:	43400000 	.word	0x43400000
 8007910:	4a454eef 	.word	0x4a454eef
 8007914:	3fca7e28 	.word	0x3fca7e28
 8007918:	93c9db65 	.word	0x93c9db65
 800791c:	3fcd864a 	.word	0x3fcd864a
 8007920:	a91d4101 	.word	0xa91d4101
 8007924:	3fd17460 	.word	0x3fd17460
 8007928:	518f264d 	.word	0x518f264d
 800792c:	3fd55555 	.word	0x3fd55555
 8007930:	db6fabff 	.word	0xdb6fabff
 8007934:	3fdb6db6 	.word	0x3fdb6db6
 8007938:	33333303 	.word	0x33333303
 800793c:	3fe33333 	.word	0x3fe33333
 8007940:	dc3a03fd 	.word	0xdc3a03fd
 8007944:	3feec709 	.word	0x3feec709
 8007948:	145b01f5 	.word	0x145b01f5
 800794c:	be3e2fe0 	.word	0xbe3e2fe0
 8007950:	e0000000 	.word	0xe0000000
 8007954:	3feec709 	.word	0x3feec709
 8007958:	652b82fe 	.word	0x652b82fe
 800795c:	3c971547 	.word	0x3c971547
 8007960:	fefa39ef 	.word	0xfefa39ef
 8007964:	3fe62e42 	.word	0x3fe62e42
 8007968:	0ca86c39 	.word	0x0ca86c39
 800796c:	be205c61 	.word	0xbe205c61
 8007970:	00000000 	.word	0x00000000
 8007974:	3fe62e43 	.word	0x3fe62e43
 8007978:	72bea4d0 	.word	0x72bea4d0
 800797c:	3e663769 	.word	0x3e663769
 8007980:	c5d26bf1 	.word	0xc5d26bf1
 8007984:	bebbbd41 	.word	0xbebbbd41
 8007988:	af25de2c 	.word	0xaf25de2c
 800798c:	3f11566a 	.word	0x3f11566a
 8007990:	16bebd93 	.word	0x16bebd93
 8007994:	bf66c16c 	.word	0xbf66c16c
 8007998:	5555553e 	.word	0x5555553e
 800799c:	3fc55555 	.word	0x3fc55555
 80079a0:	c2f8f359 	.word	0xc2f8f359
 80079a4:	01a56e1f 	.word	0x01a56e1f
 80079a8:	0003988e 	.word	0x0003988e
 80079ac:	000bb679 	.word	0x000bb679
 80079b0:	080086f0 	.word	0x080086f0
 80079b4:	08008710 	.word	0x08008710
 80079b8:	08008700 	.word	0x08008700
 80079bc:	3fe00000 	.word	0x3fe00000
 80079c0:	000fffff 	.word	0x000fffff
 80079c4:	4090cbff 	.word	0x4090cbff
 80079c8:	3f6f3400 	.word	0x3f6f3400
 80079cc:	00000000 	.word	0x00000000

080079d0 <__ieee754_rem_pio2>:
 80079d0:	b570      	push	{r4, r5, r6, lr}
 80079d2:	eeb0 7b40 	vmov.f64	d7, d0
 80079d6:	ee17 5a90 	vmov	r5, s15
 80079da:	4b95      	ldr	r3, [pc, #596]	; (8007c30 <__ieee754_rem_pio2+0x260>)
 80079dc:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80079e0:	429e      	cmp	r6, r3
 80079e2:	b088      	sub	sp, #32
 80079e4:	4604      	mov	r4, r0
 80079e6:	dc07      	bgt.n	80079f8 <__ieee754_rem_pio2+0x28>
 80079e8:	2200      	movs	r2, #0
 80079ea:	2300      	movs	r3, #0
 80079ec:	ed84 0b00 	vstr	d0, [r4]
 80079f0:	e9c0 2302 	strd	r2, r3, [r0, #8]
 80079f4:	2000      	movs	r0, #0
 80079f6:	e01b      	b.n	8007a30 <__ieee754_rem_pio2+0x60>
 80079f8:	4b8e      	ldr	r3, [pc, #568]	; (8007c34 <__ieee754_rem_pio2+0x264>)
 80079fa:	429e      	cmp	r6, r3
 80079fc:	dc3b      	bgt.n	8007a76 <__ieee754_rem_pio2+0xa6>
 80079fe:	f5a3 231b 	sub.w	r3, r3, #634880	; 0x9b000
 8007a02:	2d00      	cmp	r5, #0
 8007a04:	ed9f 6b7a 	vldr	d6, [pc, #488]	; 8007bf0 <__ieee754_rem_pio2+0x220>
 8007a08:	f5a3 63f0 	sub.w	r3, r3, #1920	; 0x780
 8007a0c:	dd19      	ble.n	8007a42 <__ieee754_rem_pio2+0x72>
 8007a0e:	ee30 7b46 	vsub.f64	d7, d0, d6
 8007a12:	429e      	cmp	r6, r3
 8007a14:	d00e      	beq.n	8007a34 <__ieee754_rem_pio2+0x64>
 8007a16:	ed9f 6b78 	vldr	d6, [pc, #480]	; 8007bf8 <__ieee754_rem_pio2+0x228>
 8007a1a:	ee37 5b46 	vsub.f64	d5, d7, d6
 8007a1e:	ee37 7b45 	vsub.f64	d7, d7, d5
 8007a22:	ed84 5b00 	vstr	d5, [r4]
 8007a26:	ee37 7b46 	vsub.f64	d7, d7, d6
 8007a2a:	ed84 7b02 	vstr	d7, [r4, #8]
 8007a2e:	2001      	movs	r0, #1
 8007a30:	b008      	add	sp, #32
 8007a32:	bd70      	pop	{r4, r5, r6, pc}
 8007a34:	ed9f 6b72 	vldr	d6, [pc, #456]	; 8007c00 <__ieee754_rem_pio2+0x230>
 8007a38:	ee37 7b46 	vsub.f64	d7, d7, d6
 8007a3c:	ed9f 6b72 	vldr	d6, [pc, #456]	; 8007c08 <__ieee754_rem_pio2+0x238>
 8007a40:	e7eb      	b.n	8007a1a <__ieee754_rem_pio2+0x4a>
 8007a42:	429e      	cmp	r6, r3
 8007a44:	ee30 7b06 	vadd.f64	d7, d0, d6
 8007a48:	d00e      	beq.n	8007a68 <__ieee754_rem_pio2+0x98>
 8007a4a:	ed9f 6b6b 	vldr	d6, [pc, #428]	; 8007bf8 <__ieee754_rem_pio2+0x228>
 8007a4e:	ee37 5b06 	vadd.f64	d5, d7, d6
 8007a52:	ee37 7b45 	vsub.f64	d7, d7, d5
 8007a56:	ed84 5b00 	vstr	d5, [r4]
 8007a5a:	ee37 7b06 	vadd.f64	d7, d7, d6
 8007a5e:	f04f 30ff 	mov.w	r0, #4294967295
 8007a62:	ed84 7b02 	vstr	d7, [r4, #8]
 8007a66:	e7e3      	b.n	8007a30 <__ieee754_rem_pio2+0x60>
 8007a68:	ed9f 6b65 	vldr	d6, [pc, #404]	; 8007c00 <__ieee754_rem_pio2+0x230>
 8007a6c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8007a70:	ed9f 6b65 	vldr	d6, [pc, #404]	; 8007c08 <__ieee754_rem_pio2+0x238>
 8007a74:	e7eb      	b.n	8007a4e <__ieee754_rem_pio2+0x7e>
 8007a76:	4b70      	ldr	r3, [pc, #448]	; (8007c38 <__ieee754_rem_pio2+0x268>)
 8007a78:	429e      	cmp	r6, r3
 8007a7a:	dc6c      	bgt.n	8007b56 <__ieee754_rem_pio2+0x186>
 8007a7c:	f000 fc48 	bl	8008310 <fabs>
 8007a80:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 8007a84:	ed9f 6b62 	vldr	d6, [pc, #392]	; 8007c10 <__ieee754_rem_pio2+0x240>
 8007a88:	eea0 7b06 	vfma.f64	d7, d0, d6
 8007a8c:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8007a90:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8007a94:	ee17 0a90 	vmov	r0, s15
 8007a98:	eeb1 5b44 	vneg.f64	d5, d4
 8007a9c:	ed9f 7b54 	vldr	d7, [pc, #336]	; 8007bf0 <__ieee754_rem_pio2+0x220>
 8007aa0:	eea5 0b07 	vfma.f64	d0, d5, d7
 8007aa4:	ed9f 7b54 	vldr	d7, [pc, #336]	; 8007bf8 <__ieee754_rem_pio2+0x228>
 8007aa8:	281f      	cmp	r0, #31
 8007aaa:	ee24 7b07 	vmul.f64	d7, d4, d7
 8007aae:	ee30 6b47 	vsub.f64	d6, d0, d7
 8007ab2:	dc08      	bgt.n	8007ac6 <__ieee754_rem_pio2+0xf6>
 8007ab4:	1e42      	subs	r2, r0, #1
 8007ab6:	4b61      	ldr	r3, [pc, #388]	; (8007c3c <__ieee754_rem_pio2+0x26c>)
 8007ab8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007abc:	42b3      	cmp	r3, r6
 8007abe:	d002      	beq.n	8007ac6 <__ieee754_rem_pio2+0xf6>
 8007ac0:	ed84 6b00 	vstr	d6, [r4]
 8007ac4:	e022      	b.n	8007b0c <__ieee754_rem_pio2+0x13c>
 8007ac6:	ee16 3a90 	vmov	r3, s13
 8007aca:	1536      	asrs	r6, r6, #20
 8007acc:	f3c3 530a 	ubfx	r3, r3, #20, #11
 8007ad0:	1af3      	subs	r3, r6, r3
 8007ad2:	2b10      	cmp	r3, #16
 8007ad4:	ddf4      	ble.n	8007ac0 <__ieee754_rem_pio2+0xf0>
 8007ad6:	eeb0 6b40 	vmov.f64	d6, d0
 8007ada:	ed9f 3b49 	vldr	d3, [pc, #292]	; 8007c00 <__ieee754_rem_pio2+0x230>
 8007ade:	eea5 6b03 	vfma.f64	d6, d5, d3
 8007ae2:	ee30 7b46 	vsub.f64	d7, d0, d6
 8007ae6:	eea5 7b03 	vfma.f64	d7, d5, d3
 8007aea:	ed9f 3b47 	vldr	d3, [pc, #284]	; 8007c08 <__ieee754_rem_pio2+0x238>
 8007aee:	ee94 7b03 	vfnms.f64	d7, d4, d3
 8007af2:	ee36 3b47 	vsub.f64	d3, d6, d7
 8007af6:	ee13 3a90 	vmov	r3, s7
 8007afa:	f3c3 530a 	ubfx	r3, r3, #20, #11
 8007afe:	1af6      	subs	r6, r6, r3
 8007b00:	2e31      	cmp	r6, #49	; 0x31
 8007b02:	dc17      	bgt.n	8007b34 <__ieee754_rem_pio2+0x164>
 8007b04:	eeb0 0b46 	vmov.f64	d0, d6
 8007b08:	ed84 3b00 	vstr	d3, [r4]
 8007b0c:	ed94 6b00 	vldr	d6, [r4]
 8007b10:	2d00      	cmp	r5, #0
 8007b12:	ee30 0b46 	vsub.f64	d0, d0, d6
 8007b16:	ee30 7b47 	vsub.f64	d7, d0, d7
 8007b1a:	ed84 7b02 	vstr	d7, [r4, #8]
 8007b1e:	da87      	bge.n	8007a30 <__ieee754_rem_pio2+0x60>
 8007b20:	eeb1 6b46 	vneg.f64	d6, d6
 8007b24:	ed84 6b00 	vstr	d6, [r4]
 8007b28:	eeb1 7b47 	vneg.f64	d7, d7
 8007b2c:	4240      	negs	r0, r0
 8007b2e:	ed84 7b02 	vstr	d7, [r4, #8]
 8007b32:	e77d      	b.n	8007a30 <__ieee754_rem_pio2+0x60>
 8007b34:	ed9f 3b38 	vldr	d3, [pc, #224]	; 8007c18 <__ieee754_rem_pio2+0x248>
 8007b38:	eeb0 0b46 	vmov.f64	d0, d6
 8007b3c:	eea5 0b03 	vfma.f64	d0, d5, d3
 8007b40:	ee36 7b40 	vsub.f64	d7, d6, d0
 8007b44:	ed9f 6b36 	vldr	d6, [pc, #216]	; 8007c20 <__ieee754_rem_pio2+0x250>
 8007b48:	eea5 7b03 	vfma.f64	d7, d5, d3
 8007b4c:	ee94 7b06 	vfnms.f64	d7, d4, d6
 8007b50:	ee30 6b47 	vsub.f64	d6, d0, d7
 8007b54:	e7b4      	b.n	8007ac0 <__ieee754_rem_pio2+0xf0>
 8007b56:	4b3a      	ldr	r3, [pc, #232]	; (8007c40 <__ieee754_rem_pio2+0x270>)
 8007b58:	429e      	cmp	r6, r3
 8007b5a:	dd06      	ble.n	8007b6a <__ieee754_rem_pio2+0x19a>
 8007b5c:	ee30 7b40 	vsub.f64	d7, d0, d0
 8007b60:	ed80 7b02 	vstr	d7, [r0, #8]
 8007b64:	ed80 7b00 	vstr	d7, [r0]
 8007b68:	e744      	b.n	80079f4 <__ieee754_rem_pio2+0x24>
 8007b6a:	1532      	asrs	r2, r6, #20
 8007b6c:	f2a2 4216 	subw	r2, r2, #1046	; 0x416
 8007b70:	ee10 0a10 	vmov	r0, s0
 8007b74:	eba6 5102 	sub.w	r1, r6, r2, lsl #20
 8007b78:	ec41 0b17 	vmov	d7, r0, r1
 8007b7c:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 8007b80:	ed9f 5b29 	vldr	d5, [pc, #164]	; 8007c28 <__ieee754_rem_pio2+0x258>
 8007b84:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 8007b88:	ee37 7b46 	vsub.f64	d7, d7, d6
 8007b8c:	ed8d 6b02 	vstr	d6, [sp, #8]
 8007b90:	ee27 7b05 	vmul.f64	d7, d7, d5
 8007b94:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 8007b98:	a908      	add	r1, sp, #32
 8007b9a:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 8007b9e:	ee37 7b46 	vsub.f64	d7, d7, d6
 8007ba2:	ed8d 6b04 	vstr	d6, [sp, #16]
 8007ba6:	ee27 7b05 	vmul.f64	d7, d7, d5
 8007baa:	ed8d 7b06 	vstr	d7, [sp, #24]
 8007bae:	2303      	movs	r3, #3
 8007bb0:	ed31 7b02 	vldmdb	r1!, {d7}
 8007bb4:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8007bb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007bbc:	f103 30ff 	add.w	r0, r3, #4294967295
 8007bc0:	d013      	beq.n	8007bea <__ieee754_rem_pio2+0x21a>
 8007bc2:	4920      	ldr	r1, [pc, #128]	; (8007c44 <__ieee754_rem_pio2+0x274>)
 8007bc4:	9101      	str	r1, [sp, #4]
 8007bc6:	2102      	movs	r1, #2
 8007bc8:	9100      	str	r1, [sp, #0]
 8007bca:	a802      	add	r0, sp, #8
 8007bcc:	4621      	mov	r1, r4
 8007bce:	f000 f8ab 	bl	8007d28 <__kernel_rem_pio2>
 8007bd2:	2d00      	cmp	r5, #0
 8007bd4:	f6bf af2c 	bge.w	8007a30 <__ieee754_rem_pio2+0x60>
 8007bd8:	ed94 7b00 	vldr	d7, [r4]
 8007bdc:	eeb1 7b47 	vneg.f64	d7, d7
 8007be0:	ed84 7b00 	vstr	d7, [r4]
 8007be4:	ed94 7b02 	vldr	d7, [r4, #8]
 8007be8:	e79e      	b.n	8007b28 <__ieee754_rem_pio2+0x158>
 8007bea:	4603      	mov	r3, r0
 8007bec:	e7e0      	b.n	8007bb0 <__ieee754_rem_pio2+0x1e0>
 8007bee:	bf00      	nop
 8007bf0:	54400000 	.word	0x54400000
 8007bf4:	3ff921fb 	.word	0x3ff921fb
 8007bf8:	1a626331 	.word	0x1a626331
 8007bfc:	3dd0b461 	.word	0x3dd0b461
 8007c00:	1a600000 	.word	0x1a600000
 8007c04:	3dd0b461 	.word	0x3dd0b461
 8007c08:	2e037073 	.word	0x2e037073
 8007c0c:	3ba3198a 	.word	0x3ba3198a
 8007c10:	6dc9c883 	.word	0x6dc9c883
 8007c14:	3fe45f30 	.word	0x3fe45f30
 8007c18:	2e000000 	.word	0x2e000000
 8007c1c:	3ba3198a 	.word	0x3ba3198a
 8007c20:	252049c1 	.word	0x252049c1
 8007c24:	397b839a 	.word	0x397b839a
 8007c28:	00000000 	.word	0x00000000
 8007c2c:	41700000 	.word	0x41700000
 8007c30:	3fe921fb 	.word	0x3fe921fb
 8007c34:	4002d97b 	.word	0x4002d97b
 8007c38:	413921fb 	.word	0x413921fb
 8007c3c:	08008720 	.word	0x08008720
 8007c40:	7fefffff 	.word	0x7fefffff
 8007c44:	080087a0 	.word	0x080087a0

08007c48 <__ieee754_sqrt>:
 8007c48:	eeb1 0bc0 	vsqrt.f64	d0, d0
 8007c4c:	4770      	bx	lr
	...

08007c50 <__kernel_cos>:
 8007c50:	ee10 1a90 	vmov	r1, s1
 8007c54:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 8007c58:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8007c5c:	f1b1 5f79 	cmp.w	r1, #1044381696	; 0x3e400000
 8007c60:	da05      	bge.n	8007c6e <__kernel_cos+0x1e>
 8007c62:	eefd 6bc0 	vcvt.s32.f64	s13, d0
 8007c66:	ee16 3a90 	vmov	r3, s13
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d03d      	beq.n	8007cea <__kernel_cos+0x9a>
 8007c6e:	ee20 4b00 	vmul.f64	d4, d0, d0
 8007c72:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 8007c76:	ed9f 3b1e 	vldr	d3, [pc, #120]	; 8007cf0 <__kernel_cos+0xa0>
 8007c7a:	ee21 1b40 	vnmul.f64	d1, d1, d0
 8007c7e:	ee24 6b06 	vmul.f64	d6, d4, d6
 8007c82:	ed9f 5b1d 	vldr	d5, [pc, #116]	; 8007cf8 <__kernel_cos+0xa8>
 8007c86:	eea4 5b03 	vfma.f64	d5, d4, d3
 8007c8a:	ed9f 3b1d 	vldr	d3, [pc, #116]	; 8007d00 <__kernel_cos+0xb0>
 8007c8e:	eea5 3b04 	vfma.f64	d3, d5, d4
 8007c92:	ed9f 5b1d 	vldr	d5, [pc, #116]	; 8007d08 <__kernel_cos+0xb8>
 8007c96:	eea3 5b04 	vfma.f64	d5, d3, d4
 8007c9a:	ed9f 3b1d 	vldr	d3, [pc, #116]	; 8007d10 <__kernel_cos+0xc0>
 8007c9e:	4b20      	ldr	r3, [pc, #128]	; (8007d20 <__kernel_cos+0xd0>)
 8007ca0:	eea5 3b04 	vfma.f64	d3, d5, d4
 8007ca4:	ed9f 5b1c 	vldr	d5, [pc, #112]	; 8007d18 <__kernel_cos+0xc8>
 8007ca8:	4299      	cmp	r1, r3
 8007caa:	eea3 5b04 	vfma.f64	d5, d3, d4
 8007cae:	ee25 5b04 	vmul.f64	d5, d5, d4
 8007cb2:	eea4 1b05 	vfma.f64	d1, d4, d5
 8007cb6:	dc04      	bgt.n	8007cc2 <__kernel_cos+0x72>
 8007cb8:	ee36 6b41 	vsub.f64	d6, d6, d1
 8007cbc:	ee37 0b46 	vsub.f64	d0, d7, d6
 8007cc0:	4770      	bx	lr
 8007cc2:	4b18      	ldr	r3, [pc, #96]	; (8007d24 <__kernel_cos+0xd4>)
 8007cc4:	4299      	cmp	r1, r3
 8007cc6:	dc0d      	bgt.n	8007ce4 <__kernel_cos+0x94>
 8007cc8:	2200      	movs	r2, #0
 8007cca:	f5a1 1300 	sub.w	r3, r1, #2097152	; 0x200000
 8007cce:	ec43 2b15 	vmov	d5, r2, r3
 8007cd2:	ee37 0b45 	vsub.f64	d0, d7, d5
 8007cd6:	ee36 6b45 	vsub.f64	d6, d6, d5
 8007cda:	ee36 6b41 	vsub.f64	d6, d6, d1
 8007cde:	ee30 0b46 	vsub.f64	d0, d0, d6
 8007ce2:	4770      	bx	lr
 8007ce4:	eeb5 5b02 	vmov.f64	d5, #82	; 0x3e900000  0.2812500
 8007ce8:	e7f3      	b.n	8007cd2 <__kernel_cos+0x82>
 8007cea:	eeb0 0b47 	vmov.f64	d0, d7
 8007cee:	4770      	bx	lr
 8007cf0:	be8838d4 	.word	0xbe8838d4
 8007cf4:	bda8fae9 	.word	0xbda8fae9
 8007cf8:	bdb4b1c4 	.word	0xbdb4b1c4
 8007cfc:	3e21ee9e 	.word	0x3e21ee9e
 8007d00:	809c52ad 	.word	0x809c52ad
 8007d04:	be927e4f 	.word	0xbe927e4f
 8007d08:	19cb1590 	.word	0x19cb1590
 8007d0c:	3efa01a0 	.word	0x3efa01a0
 8007d10:	16c15177 	.word	0x16c15177
 8007d14:	bf56c16c 	.word	0xbf56c16c
 8007d18:	5555554c 	.word	0x5555554c
 8007d1c:	3fa55555 	.word	0x3fa55555
 8007d20:	3fd33332 	.word	0x3fd33332
 8007d24:	3fe90000 	.word	0x3fe90000

08007d28 <__kernel_rem_pio2>:
 8007d28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d2c:	ed2d 8b06 	vpush	{d8-d10}
 8007d30:	f5ad 7d13 	sub.w	sp, sp, #588	; 0x24c
 8007d34:	469b      	mov	fp, r3
 8007d36:	460e      	mov	r6, r1
 8007d38:	4bc7      	ldr	r3, [pc, #796]	; (8008058 <__kernel_rem_pio2+0x330>)
 8007d3a:	99a2      	ldr	r1, [sp, #648]	; 0x288
 8007d3c:	9002      	str	r0, [sp, #8]
 8007d3e:	f853 9021 	ldr.w	r9, [r3, r1, lsl #2]
 8007d42:	98a3      	ldr	r0, [sp, #652]	; 0x28c
 8007d44:	1ed1      	subs	r1, r2, #3
 8007d46:	2318      	movs	r3, #24
 8007d48:	f06f 0417 	mvn.w	r4, #23
 8007d4c:	fb91 f1f3 	sdiv	r1, r1, r3
 8007d50:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 8007d54:	f10b 3aff 	add.w	sl, fp, #4294967295
 8007d58:	fb01 4404 	mla	r4, r1, r4, r4
 8007d5c:	ed9f 6bb8 	vldr	d6, [pc, #736]	; 8008040 <__kernel_rem_pio2+0x318>
 8007d60:	4414      	add	r4, r2
 8007d62:	eba1 050a 	sub.w	r5, r1, sl
 8007d66:	aa1a      	add	r2, sp, #104	; 0x68
 8007d68:	eb09 070a 	add.w	r7, r9, sl
 8007d6c:	eb00 0c85 	add.w	ip, r0, r5, lsl #2
 8007d70:	4696      	mov	lr, r2
 8007d72:	2300      	movs	r3, #0
 8007d74:	42bb      	cmp	r3, r7
 8007d76:	dd0f      	ble.n	8007d98 <__kernel_rem_pio2+0x70>
 8007d78:	af6a      	add	r7, sp, #424	; 0x1a8
 8007d7a:	2200      	movs	r2, #0
 8007d7c:	454a      	cmp	r2, r9
 8007d7e:	dc28      	bgt.n	8007dd2 <__kernel_rem_pio2+0xaa>
 8007d80:	f10d 0c68 	add.w	ip, sp, #104	; 0x68
 8007d84:	eb0b 0302 	add.w	r3, fp, r2
 8007d88:	eb0c 03c3 	add.w	r3, ip, r3, lsl #3
 8007d8c:	9d02      	ldr	r5, [sp, #8]
 8007d8e:	ed9f 7bac 	vldr	d7, [pc, #688]	; 8008040 <__kernel_rem_pio2+0x318>
 8007d92:	f04f 0c00 	mov.w	ip, #0
 8007d96:	e016      	b.n	8007dc6 <__kernel_rem_pio2+0x9e>
 8007d98:	42dd      	cmn	r5, r3
 8007d9a:	d409      	bmi.n	8007db0 <__kernel_rem_pio2+0x88>
 8007d9c:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 8007da0:	ee07 2a90 	vmov	s15, r2
 8007da4:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8007da8:	ecae 7b02 	vstmia	lr!, {d7}
 8007dac:	3301      	adds	r3, #1
 8007dae:	e7e1      	b.n	8007d74 <__kernel_rem_pio2+0x4c>
 8007db0:	eeb0 7b46 	vmov.f64	d7, d6
 8007db4:	e7f8      	b.n	8007da8 <__kernel_rem_pio2+0x80>
 8007db6:	ecb5 5b02 	vldmia	r5!, {d5}
 8007dba:	ed33 6b02 	vldmdb	r3!, {d6}
 8007dbe:	f10c 0c01 	add.w	ip, ip, #1
 8007dc2:	eea5 7b06 	vfma.f64	d7, d5, d6
 8007dc6:	45d4      	cmp	ip, sl
 8007dc8:	ddf5      	ble.n	8007db6 <__kernel_rem_pio2+0x8e>
 8007dca:	eca7 7b02 	vstmia	r7!, {d7}
 8007dce:	3201      	adds	r2, #1
 8007dd0:	e7d4      	b.n	8007d7c <__kernel_rem_pio2+0x54>
 8007dd2:	ab06      	add	r3, sp, #24
 8007dd4:	eb03 0389 	add.w	r3, r3, r9, lsl #2
 8007dd8:	ed9f 9b9b 	vldr	d9, [pc, #620]	; 8008048 <__kernel_rem_pio2+0x320>
 8007ddc:	ed9f ab9c 	vldr	d10, [pc, #624]	; 8008050 <__kernel_rem_pio2+0x328>
 8007de0:	9304      	str	r3, [sp, #16]
 8007de2:	eb00 0381 	add.w	r3, r0, r1, lsl #2
 8007de6:	9303      	str	r3, [sp, #12]
 8007de8:	464d      	mov	r5, r9
 8007dea:	ab92      	add	r3, sp, #584	; 0x248
 8007dec:	f105 5700 	add.w	r7, r5, #536870912	; 0x20000000
 8007df0:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8007df4:	3f01      	subs	r7, #1
 8007df6:	ed13 0b28 	vldr	d0, [r3, #-160]	; 0xffffff60
 8007dfa:	00ff      	lsls	r7, r7, #3
 8007dfc:	ab92      	add	r3, sp, #584	; 0x248
 8007dfe:	19da      	adds	r2, r3, r7
 8007e00:	3a98      	subs	r2, #152	; 0x98
 8007e02:	2300      	movs	r3, #0
 8007e04:	1ae9      	subs	r1, r5, r3
 8007e06:	2900      	cmp	r1, #0
 8007e08:	dc4e      	bgt.n	8007ea8 <__kernel_rem_pio2+0x180>
 8007e0a:	4620      	mov	r0, r4
 8007e0c:	f000 fba4 	bl	8008558 <scalbn>
 8007e10:	eeb0 8b40 	vmov.f64	d8, d0
 8007e14:	eeb4 0b00 	vmov.f64	d0, #64	; 0x3e000000  0.125
 8007e18:	ee28 0b00 	vmul.f64	d0, d8, d0
 8007e1c:	f000 fa8c 	bl	8008338 <floor>
 8007e20:	eeb2 7b00 	vmov.f64	d7, #32	; 0x41000000  8.0
 8007e24:	eea0 8b47 	vfms.f64	d8, d0, d7
 8007e28:	eefd 7bc8 	vcvt.s32.f64	s15, d8
 8007e2c:	2c00      	cmp	r4, #0
 8007e2e:	edcd 7a01 	vstr	s15, [sp, #4]
 8007e32:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8007e36:	ee38 8b47 	vsub.f64	d8, d8, d7
 8007e3a:	dd4a      	ble.n	8007ed2 <__kernel_rem_pio2+0x1aa>
 8007e3c:	1e69      	subs	r1, r5, #1
 8007e3e:	ab06      	add	r3, sp, #24
 8007e40:	f1c4 0018 	rsb	r0, r4, #24
 8007e44:	f853 c021 	ldr.w	ip, [r3, r1, lsl #2]
 8007e48:	9a01      	ldr	r2, [sp, #4]
 8007e4a:	fa4c f300 	asr.w	r3, ip, r0
 8007e4e:	441a      	add	r2, r3
 8007e50:	4083      	lsls	r3, r0
 8007e52:	9201      	str	r2, [sp, #4]
 8007e54:	ebac 0203 	sub.w	r2, ip, r3
 8007e58:	ab06      	add	r3, sp, #24
 8007e5a:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
 8007e5e:	f1c4 0317 	rsb	r3, r4, #23
 8007e62:	fa42 f803 	asr.w	r8, r2, r3
 8007e66:	f1b8 0f00 	cmp.w	r8, #0
 8007e6a:	dd43      	ble.n	8007ef4 <__kernel_rem_pio2+0x1cc>
 8007e6c:	9b01      	ldr	r3, [sp, #4]
 8007e6e:	2000      	movs	r0, #0
 8007e70:	3301      	adds	r3, #1
 8007e72:	9301      	str	r3, [sp, #4]
 8007e74:	4601      	mov	r1, r0
 8007e76:	f06f 4c7f 	mvn.w	ip, #4278190080	; 0xff000000
 8007e7a:	4285      	cmp	r5, r0
 8007e7c:	dc6e      	bgt.n	8007f5c <__kernel_rem_pio2+0x234>
 8007e7e:	2c00      	cmp	r4, #0
 8007e80:	dd04      	ble.n	8007e8c <__kernel_rem_pio2+0x164>
 8007e82:	2c01      	cmp	r4, #1
 8007e84:	d07f      	beq.n	8007f86 <__kernel_rem_pio2+0x25e>
 8007e86:	2c02      	cmp	r4, #2
 8007e88:	f000 8087 	beq.w	8007f9a <__kernel_rem_pio2+0x272>
 8007e8c:	f1b8 0f02 	cmp.w	r8, #2
 8007e90:	d130      	bne.n	8007ef4 <__kernel_rem_pio2+0x1cc>
 8007e92:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8007e96:	ee30 8b48 	vsub.f64	d8, d0, d8
 8007e9a:	b359      	cbz	r1, 8007ef4 <__kernel_rem_pio2+0x1cc>
 8007e9c:	4620      	mov	r0, r4
 8007e9e:	f000 fb5b 	bl	8008558 <scalbn>
 8007ea2:	ee38 8b40 	vsub.f64	d8, d8, d0
 8007ea6:	e025      	b.n	8007ef4 <__kernel_rem_pio2+0x1cc>
 8007ea8:	ee20 7b09 	vmul.f64	d7, d0, d9
 8007eac:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 8007eb0:	a806      	add	r0, sp, #24
 8007eb2:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 8007eb6:	eea7 0b4a 	vfms.f64	d0, d7, d10
 8007eba:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 8007ebe:	ee10 1a10 	vmov	r1, s0
 8007ec2:	ed32 0b02 	vldmdb	r2!, {d0}
 8007ec6:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
 8007eca:	ee37 0b00 	vadd.f64	d0, d7, d0
 8007ece:	3301      	adds	r3, #1
 8007ed0:	e798      	b.n	8007e04 <__kernel_rem_pio2+0xdc>
 8007ed2:	d106      	bne.n	8007ee2 <__kernel_rem_pio2+0x1ba>
 8007ed4:	1e6b      	subs	r3, r5, #1
 8007ed6:	aa06      	add	r2, sp, #24
 8007ed8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8007edc:	ea4f 58e2 	mov.w	r8, r2, asr #23
 8007ee0:	e7c1      	b.n	8007e66 <__kernel_rem_pio2+0x13e>
 8007ee2:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 8007ee6:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8007eea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007eee:	da32      	bge.n	8007f56 <__kernel_rem_pio2+0x22e>
 8007ef0:	f04f 0800 	mov.w	r8, #0
 8007ef4:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8007ef8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007efc:	f040 80b0 	bne.w	8008060 <__kernel_rem_pio2+0x338>
 8007f00:	1e6b      	subs	r3, r5, #1
 8007f02:	4618      	mov	r0, r3
 8007f04:	2200      	movs	r2, #0
 8007f06:	4548      	cmp	r0, r9
 8007f08:	da4e      	bge.n	8007fa8 <__kernel_rem_pio2+0x280>
 8007f0a:	2a00      	cmp	r2, #0
 8007f0c:	f000 8088 	beq.w	8008020 <__kernel_rem_pio2+0x2f8>
 8007f10:	aa06      	add	r2, sp, #24
 8007f12:	3c18      	subs	r4, #24
 8007f14:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8007f18:	2900      	cmp	r1, #0
 8007f1a:	f000 808e 	beq.w	800803a <__kernel_rem_pio2+0x312>
 8007f1e:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8007f22:	4620      	mov	r0, r4
 8007f24:	9302      	str	r3, [sp, #8]
 8007f26:	f000 fb17 	bl	8008558 <scalbn>
 8007f2a:	9b02      	ldr	r3, [sp, #8]
 8007f2c:	aa6a      	add	r2, sp, #424	; 0x1a8
 8007f2e:	00d9      	lsls	r1, r3, #3
 8007f30:	ed9f 6b45 	vldr	d6, [pc, #276]	; 8008048 <__kernel_rem_pio2+0x320>
 8007f34:	1850      	adds	r0, r2, r1
 8007f36:	f100 0508 	add.w	r5, r0, #8
 8007f3a:	461c      	mov	r4, r3
 8007f3c:	2c00      	cmp	r4, #0
 8007f3e:	f280 80bd 	bge.w	80080bc <__kernel_rem_pio2+0x394>
 8007f42:	2500      	movs	r5, #0
 8007f44:	1b5c      	subs	r4, r3, r5
 8007f46:	2c00      	cmp	r4, #0
 8007f48:	f2c0 80dd 	blt.w	8008106 <__kernel_rem_pio2+0x3de>
 8007f4c:	4f43      	ldr	r7, [pc, #268]	; (800805c <__kernel_rem_pio2+0x334>)
 8007f4e:	ed9f 7b3c 	vldr	d7, [pc, #240]	; 8008040 <__kernel_rem_pio2+0x318>
 8007f52:	2400      	movs	r4, #0
 8007f54:	e0cb      	b.n	80080ee <__kernel_rem_pio2+0x3c6>
 8007f56:	f04f 0802 	mov.w	r8, #2
 8007f5a:	e787      	b.n	8007e6c <__kernel_rem_pio2+0x144>
 8007f5c:	ab06      	add	r3, sp, #24
 8007f5e:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8007f62:	b949      	cbnz	r1, 8007f78 <__kernel_rem_pio2+0x250>
 8007f64:	b12b      	cbz	r3, 8007f72 <__kernel_rem_pio2+0x24a>
 8007f66:	aa06      	add	r2, sp, #24
 8007f68:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8007f6c:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 8007f70:	2301      	movs	r3, #1
 8007f72:	3001      	adds	r0, #1
 8007f74:	4619      	mov	r1, r3
 8007f76:	e780      	b.n	8007e7a <__kernel_rem_pio2+0x152>
 8007f78:	aa06      	add	r2, sp, #24
 8007f7a:	ebac 0303 	sub.w	r3, ip, r3
 8007f7e:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 8007f82:	460b      	mov	r3, r1
 8007f84:	e7f5      	b.n	8007f72 <__kernel_rem_pio2+0x24a>
 8007f86:	1e68      	subs	r0, r5, #1
 8007f88:	ab06      	add	r3, sp, #24
 8007f8a:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8007f8e:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8007f92:	aa06      	add	r2, sp, #24
 8007f94:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 8007f98:	e778      	b.n	8007e8c <__kernel_rem_pio2+0x164>
 8007f9a:	1e68      	subs	r0, r5, #1
 8007f9c:	ab06      	add	r3, sp, #24
 8007f9e:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8007fa2:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8007fa6:	e7f4      	b.n	8007f92 <__kernel_rem_pio2+0x26a>
 8007fa8:	a906      	add	r1, sp, #24
 8007faa:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 8007fae:	3801      	subs	r0, #1
 8007fb0:	430a      	orrs	r2, r1
 8007fb2:	e7a8      	b.n	8007f06 <__kernel_rem_pio2+0x1de>
 8007fb4:	f10c 0c01 	add.w	ip, ip, #1
 8007fb8:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8007fbc:	2a00      	cmp	r2, #0
 8007fbe:	d0f9      	beq.n	8007fb4 <__kernel_rem_pio2+0x28c>
 8007fc0:	eb0b 0305 	add.w	r3, fp, r5
 8007fc4:	aa1a      	add	r2, sp, #104	; 0x68
 8007fc6:	00db      	lsls	r3, r3, #3
 8007fc8:	1898      	adds	r0, r3, r2
 8007fca:	3008      	adds	r0, #8
 8007fcc:	1c69      	adds	r1, r5, #1
 8007fce:	3708      	adds	r7, #8
 8007fd0:	2200      	movs	r2, #0
 8007fd2:	4465      	add	r5, ip
 8007fd4:	9005      	str	r0, [sp, #20]
 8007fd6:	428d      	cmp	r5, r1
 8007fd8:	f6ff af07 	blt.w	8007dea <__kernel_rem_pio2+0xc2>
 8007fdc:	a81a      	add	r0, sp, #104	; 0x68
 8007fde:	eb02 0c03 	add.w	ip, r2, r3
 8007fe2:	4484      	add	ip, r0
 8007fe4:	9803      	ldr	r0, [sp, #12]
 8007fe6:	f8dd e008 	ldr.w	lr, [sp, #8]
 8007fea:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
 8007fee:	9001      	str	r0, [sp, #4]
 8007ff0:	ee07 0a90 	vmov	s15, r0
 8007ff4:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8007ff8:	9805      	ldr	r0, [sp, #20]
 8007ffa:	ed8c 7b00 	vstr	d7, [ip]
 8007ffe:	ed9f 7b10 	vldr	d7, [pc, #64]	; 8008040 <__kernel_rem_pio2+0x318>
 8008002:	eb00 0802 	add.w	r8, r0, r2
 8008006:	f04f 0c00 	mov.w	ip, #0
 800800a:	45d4      	cmp	ip, sl
 800800c:	dd0c      	ble.n	8008028 <__kernel_rem_pio2+0x300>
 800800e:	eb02 0c07 	add.w	ip, r2, r7
 8008012:	a86a      	add	r0, sp, #424	; 0x1a8
 8008014:	4484      	add	ip, r0
 8008016:	ed8c 7b02 	vstr	d7, [ip, #8]
 800801a:	3101      	adds	r1, #1
 800801c:	3208      	adds	r2, #8
 800801e:	e7da      	b.n	8007fd6 <__kernel_rem_pio2+0x2ae>
 8008020:	9b04      	ldr	r3, [sp, #16]
 8008022:	f04f 0c01 	mov.w	ip, #1
 8008026:	e7c7      	b.n	8007fb8 <__kernel_rem_pio2+0x290>
 8008028:	ecbe 5b02 	vldmia	lr!, {d5}
 800802c:	ed38 6b02 	vldmdb	r8!, {d6}
 8008030:	f10c 0c01 	add.w	ip, ip, #1
 8008034:	eea5 7b06 	vfma.f64	d7, d5, d6
 8008038:	e7e7      	b.n	800800a <__kernel_rem_pio2+0x2e2>
 800803a:	3b01      	subs	r3, #1
 800803c:	e768      	b.n	8007f10 <__kernel_rem_pio2+0x1e8>
 800803e:	bf00      	nop
	...
 800804c:	3e700000 	.word	0x3e700000
 8008050:	00000000 	.word	0x00000000
 8008054:	41700000 	.word	0x41700000
 8008058:	080088e8 	.word	0x080088e8
 800805c:	080088a8 	.word	0x080088a8
 8008060:	4260      	negs	r0, r4
 8008062:	eeb0 0b48 	vmov.f64	d0, d8
 8008066:	f000 fa77 	bl	8008558 <scalbn>
 800806a:	ed9f 6b77 	vldr	d6, [pc, #476]	; 8008248 <__kernel_rem_pio2+0x520>
 800806e:	eeb4 0bc6 	vcmpe.f64	d0, d6
 8008072:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008076:	db18      	blt.n	80080aa <__kernel_rem_pio2+0x382>
 8008078:	ed9f 7b75 	vldr	d7, [pc, #468]	; 8008250 <__kernel_rem_pio2+0x528>
 800807c:	ee20 7b07 	vmul.f64	d7, d0, d7
 8008080:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 8008084:	aa06      	add	r2, sp, #24
 8008086:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
 800808a:	eea5 0b46 	vfms.f64	d0, d5, d6
 800808e:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 8008092:	a906      	add	r1, sp, #24
 8008094:	ee10 3a10 	vmov	r3, s0
 8008098:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 800809c:	1c6b      	adds	r3, r5, #1
 800809e:	ee17 2a10 	vmov	r2, s14
 80080a2:	3418      	adds	r4, #24
 80080a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80080a8:	e739      	b.n	8007f1e <__kernel_rem_pio2+0x1f6>
 80080aa:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 80080ae:	aa06      	add	r2, sp, #24
 80080b0:	ee10 3a10 	vmov	r3, s0
 80080b4:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 80080b8:	462b      	mov	r3, r5
 80080ba:	e730      	b.n	8007f1e <__kernel_rem_pio2+0x1f6>
 80080bc:	aa06      	add	r2, sp, #24
 80080be:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
 80080c2:	9202      	str	r2, [sp, #8]
 80080c4:	ee07 2a90 	vmov	s15, r2
 80080c8:	3c01      	subs	r4, #1
 80080ca:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80080ce:	ee27 7b00 	vmul.f64	d7, d7, d0
 80080d2:	ee20 0b06 	vmul.f64	d0, d0, d6
 80080d6:	ed25 7b02 	vstmdb	r5!, {d7}
 80080da:	e72f      	b.n	8007f3c <__kernel_rem_pio2+0x214>
 80080dc:	eb00 0cc4 	add.w	ip, r0, r4, lsl #3
 80080e0:	ecb7 5b02 	vldmia	r7!, {d5}
 80080e4:	ed9c 6b00 	vldr	d6, [ip]
 80080e8:	3401      	adds	r4, #1
 80080ea:	eea5 7b06 	vfma.f64	d7, d5, d6
 80080ee:	454c      	cmp	r4, r9
 80080f0:	dc01      	bgt.n	80080f6 <__kernel_rem_pio2+0x3ce>
 80080f2:	42a5      	cmp	r5, r4
 80080f4:	daf2      	bge.n	80080dc <__kernel_rem_pio2+0x3b4>
 80080f6:	aa42      	add	r2, sp, #264	; 0x108
 80080f8:	eb02 04c5 	add.w	r4, r2, r5, lsl #3
 80080fc:	ed84 7b00 	vstr	d7, [r4]
 8008100:	3501      	adds	r5, #1
 8008102:	3808      	subs	r0, #8
 8008104:	e71e      	b.n	8007f44 <__kernel_rem_pio2+0x21c>
 8008106:	9aa2      	ldr	r2, [sp, #648]	; 0x288
 8008108:	2a03      	cmp	r2, #3
 800810a:	d84e      	bhi.n	80081aa <__kernel_rem_pio2+0x482>
 800810c:	e8df f002 	tbb	[pc, r2]
 8008110:	021f1f3e 	.word	0x021f1f3e
 8008114:	3108      	adds	r1, #8
 8008116:	aa42      	add	r2, sp, #264	; 0x108
 8008118:	4411      	add	r1, r2
 800811a:	4608      	mov	r0, r1
 800811c:	461c      	mov	r4, r3
 800811e:	2c00      	cmp	r4, #0
 8008120:	dc61      	bgt.n	80081e6 <__kernel_rem_pio2+0x4be>
 8008122:	4608      	mov	r0, r1
 8008124:	461c      	mov	r4, r3
 8008126:	2c01      	cmp	r4, #1
 8008128:	dc6d      	bgt.n	8008206 <__kernel_rem_pio2+0x4de>
 800812a:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 8008258 <__kernel_rem_pio2+0x530>
 800812e:	2b01      	cmp	r3, #1
 8008130:	dc79      	bgt.n	8008226 <__kernel_rem_pio2+0x4fe>
 8008132:	ed9d 5b42 	vldr	d5, [sp, #264]	; 0x108
 8008136:	ed9d 6b44 	vldr	d6, [sp, #272]	; 0x110
 800813a:	f1b8 0f00 	cmp.w	r8, #0
 800813e:	d178      	bne.n	8008232 <__kernel_rem_pio2+0x50a>
 8008140:	ed86 5b00 	vstr	d5, [r6]
 8008144:	ed86 6b02 	vstr	d6, [r6, #8]
 8008148:	ed86 7b04 	vstr	d7, [r6, #16]
 800814c:	e02d      	b.n	80081aa <__kernel_rem_pio2+0x482>
 800814e:	ed9f 6b42 	vldr	d6, [pc, #264]	; 8008258 <__kernel_rem_pio2+0x530>
 8008152:	3108      	adds	r1, #8
 8008154:	aa42      	add	r2, sp, #264	; 0x108
 8008156:	4411      	add	r1, r2
 8008158:	4618      	mov	r0, r3
 800815a:	2800      	cmp	r0, #0
 800815c:	da34      	bge.n	80081c8 <__kernel_rem_pio2+0x4a0>
 800815e:	f1b8 0f00 	cmp.w	r8, #0
 8008162:	d037      	beq.n	80081d4 <__kernel_rem_pio2+0x4ac>
 8008164:	eeb1 7b46 	vneg.f64	d7, d6
 8008168:	ed86 7b00 	vstr	d7, [r6]
 800816c:	ed9d 7b42 	vldr	d7, [sp, #264]	; 0x108
 8008170:	a844      	add	r0, sp, #272	; 0x110
 8008172:	2101      	movs	r1, #1
 8008174:	ee37 7b46 	vsub.f64	d7, d7, d6
 8008178:	428b      	cmp	r3, r1
 800817a:	da2e      	bge.n	80081da <__kernel_rem_pio2+0x4b2>
 800817c:	f1b8 0f00 	cmp.w	r8, #0
 8008180:	d001      	beq.n	8008186 <__kernel_rem_pio2+0x45e>
 8008182:	eeb1 7b47 	vneg.f64	d7, d7
 8008186:	ed86 7b02 	vstr	d7, [r6, #8]
 800818a:	e00e      	b.n	80081aa <__kernel_rem_pio2+0x482>
 800818c:	aa92      	add	r2, sp, #584	; 0x248
 800818e:	ed9f 7b32 	vldr	d7, [pc, #200]	; 8008258 <__kernel_rem_pio2+0x530>
 8008192:	4411      	add	r1, r2
 8008194:	f5a1 719c 	sub.w	r1, r1, #312	; 0x138
 8008198:	2b00      	cmp	r3, #0
 800819a:	da0f      	bge.n	80081bc <__kernel_rem_pio2+0x494>
 800819c:	f1b8 0f00 	cmp.w	r8, #0
 80081a0:	d001      	beq.n	80081a6 <__kernel_rem_pio2+0x47e>
 80081a2:	eeb1 7b47 	vneg.f64	d7, d7
 80081a6:	ed86 7b00 	vstr	d7, [r6]
 80081aa:	9b01      	ldr	r3, [sp, #4]
 80081ac:	f003 0007 	and.w	r0, r3, #7
 80081b0:	f50d 7d13 	add.w	sp, sp, #588	; 0x24c
 80081b4:	ecbd 8b06 	vpop	{d8-d10}
 80081b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80081bc:	ed31 6b02 	vldmdb	r1!, {d6}
 80081c0:	3b01      	subs	r3, #1
 80081c2:	ee37 7b06 	vadd.f64	d7, d7, d6
 80081c6:	e7e7      	b.n	8008198 <__kernel_rem_pio2+0x470>
 80081c8:	ed31 7b02 	vldmdb	r1!, {d7}
 80081cc:	3801      	subs	r0, #1
 80081ce:	ee36 6b07 	vadd.f64	d6, d6, d7
 80081d2:	e7c2      	b.n	800815a <__kernel_rem_pio2+0x432>
 80081d4:	eeb0 7b46 	vmov.f64	d7, d6
 80081d8:	e7c6      	b.n	8008168 <__kernel_rem_pio2+0x440>
 80081da:	ecb0 6b02 	vldmia	r0!, {d6}
 80081de:	3101      	adds	r1, #1
 80081e0:	ee37 7b06 	vadd.f64	d7, d7, d6
 80081e4:	e7c8      	b.n	8008178 <__kernel_rem_pio2+0x450>
 80081e6:	ed10 7b04 	vldr	d7, [r0, #-16]
 80081ea:	ed30 5b02 	vldmdb	r0!, {d5}
 80081ee:	3c01      	subs	r4, #1
 80081f0:	ee37 6b05 	vadd.f64	d6, d7, d5
 80081f4:	ee37 7b46 	vsub.f64	d7, d7, d6
 80081f8:	ed00 6b02 	vstr	d6, [r0, #-8]
 80081fc:	ee37 7b05 	vadd.f64	d7, d7, d5
 8008200:	ed80 7b00 	vstr	d7, [r0]
 8008204:	e78b      	b.n	800811e <__kernel_rem_pio2+0x3f6>
 8008206:	ed10 7b04 	vldr	d7, [r0, #-16]
 800820a:	ed30 5b02 	vldmdb	r0!, {d5}
 800820e:	3c01      	subs	r4, #1
 8008210:	ee37 6b05 	vadd.f64	d6, d7, d5
 8008214:	ee37 7b46 	vsub.f64	d7, d7, d6
 8008218:	ed00 6b02 	vstr	d6, [r0, #-8]
 800821c:	ee37 7b05 	vadd.f64	d7, d7, d5
 8008220:	ed80 7b00 	vstr	d7, [r0]
 8008224:	e77f      	b.n	8008126 <__kernel_rem_pio2+0x3fe>
 8008226:	ed31 6b02 	vldmdb	r1!, {d6}
 800822a:	3b01      	subs	r3, #1
 800822c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8008230:	e77d      	b.n	800812e <__kernel_rem_pio2+0x406>
 8008232:	eeb1 5b45 	vneg.f64	d5, d5
 8008236:	eeb1 6b46 	vneg.f64	d6, d6
 800823a:	ed86 5b00 	vstr	d5, [r6]
 800823e:	eeb1 7b47 	vneg.f64	d7, d7
 8008242:	ed86 6b02 	vstr	d6, [r6, #8]
 8008246:	e77f      	b.n	8008148 <__kernel_rem_pio2+0x420>
 8008248:	00000000 	.word	0x00000000
 800824c:	41700000 	.word	0x41700000
 8008250:	00000000 	.word	0x00000000
 8008254:	3e700000 	.word	0x3e700000
	...

08008260 <__kernel_sin>:
 8008260:	ee10 3a90 	vmov	r3, s1
 8008264:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008268:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800826c:	da04      	bge.n	8008278 <__kernel_sin+0x18>
 800826e:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 8008272:	ee17 3a90 	vmov	r3, s15
 8008276:	b35b      	cbz	r3, 80082d0 <__kernel_sin+0x70>
 8008278:	ee20 6b00 	vmul.f64	d6, d0, d0
 800827c:	ee20 5b06 	vmul.f64	d5, d0, d6
 8008280:	ed9f 7b15 	vldr	d7, [pc, #84]	; 80082d8 <__kernel_sin+0x78>
 8008284:	ed9f 4b16 	vldr	d4, [pc, #88]	; 80082e0 <__kernel_sin+0x80>
 8008288:	eea6 4b07 	vfma.f64	d4, d6, d7
 800828c:	ed9f 7b16 	vldr	d7, [pc, #88]	; 80082e8 <__kernel_sin+0x88>
 8008290:	eea4 7b06 	vfma.f64	d7, d4, d6
 8008294:	ed9f 4b16 	vldr	d4, [pc, #88]	; 80082f0 <__kernel_sin+0x90>
 8008298:	eea7 4b06 	vfma.f64	d4, d7, d6
 800829c:	ed9f 7b16 	vldr	d7, [pc, #88]	; 80082f8 <__kernel_sin+0x98>
 80082a0:	eea4 7b06 	vfma.f64	d7, d4, d6
 80082a4:	b930      	cbnz	r0, 80082b4 <__kernel_sin+0x54>
 80082a6:	ed9f 4b16 	vldr	d4, [pc, #88]	; 8008300 <__kernel_sin+0xa0>
 80082aa:	eea6 4b07 	vfma.f64	d4, d6, d7
 80082ae:	eea4 0b05 	vfma.f64	d0, d4, d5
 80082b2:	4770      	bx	lr
 80082b4:	ee27 7b45 	vnmul.f64	d7, d7, d5
 80082b8:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 80082bc:	eea1 7b04 	vfma.f64	d7, d1, d4
 80082c0:	ee97 1b06 	vfnms.f64	d1, d7, d6
 80082c4:	ed9f 7b10 	vldr	d7, [pc, #64]	; 8008308 <__kernel_sin+0xa8>
 80082c8:	eea5 1b07 	vfma.f64	d1, d5, d7
 80082cc:	ee30 0b41 	vsub.f64	d0, d0, d1
 80082d0:	4770      	bx	lr
 80082d2:	bf00      	nop
 80082d4:	f3af 8000 	nop.w
 80082d8:	5acfd57c 	.word	0x5acfd57c
 80082dc:	3de5d93a 	.word	0x3de5d93a
 80082e0:	8a2b9ceb 	.word	0x8a2b9ceb
 80082e4:	be5ae5e6 	.word	0xbe5ae5e6
 80082e8:	57b1fe7d 	.word	0x57b1fe7d
 80082ec:	3ec71de3 	.word	0x3ec71de3
 80082f0:	19c161d5 	.word	0x19c161d5
 80082f4:	bf2a01a0 	.word	0xbf2a01a0
 80082f8:	1110f8a6 	.word	0x1110f8a6
 80082fc:	3f811111 	.word	0x3f811111
 8008300:	55555549 	.word	0x55555549
 8008304:	bfc55555 	.word	0xbfc55555
 8008308:	55555549 	.word	0x55555549
 800830c:	3fc55555 	.word	0x3fc55555

08008310 <fabs>:
 8008310:	ec51 0b10 	vmov	r0, r1, d0
 8008314:	ee10 2a10 	vmov	r2, s0
 8008318:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800831c:	ec43 2b10 	vmov	d0, r2, r3
 8008320:	4770      	bx	lr

08008322 <finite>:
 8008322:	ee10 3a90 	vmov	r3, s1
 8008326:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 800832a:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800832e:	0fc0      	lsrs	r0, r0, #31
 8008330:	4770      	bx	lr
 8008332:	0000      	movs	r0, r0
 8008334:	0000      	movs	r0, r0
	...

08008338 <floor>:
 8008338:	ee10 1a90 	vmov	r1, s1
 800833c:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8008340:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 8008344:	2b13      	cmp	r3, #19
 8008346:	b530      	push	{r4, r5, lr}
 8008348:	ee10 0a10 	vmov	r0, s0
 800834c:	ee10 5a10 	vmov	r5, s0
 8008350:	dc33      	bgt.n	80083ba <floor+0x82>
 8008352:	2b00      	cmp	r3, #0
 8008354:	da17      	bge.n	8008386 <floor+0x4e>
 8008356:	ed9f 7b30 	vldr	d7, [pc, #192]	; 8008418 <floor+0xe0>
 800835a:	ee30 0b07 	vadd.f64	d0, d0, d7
 800835e:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8008362:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008366:	dd09      	ble.n	800837c <floor+0x44>
 8008368:	2900      	cmp	r1, #0
 800836a:	da50      	bge.n	800840e <floor+0xd6>
 800836c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8008370:	4a2b      	ldr	r2, [pc, #172]	; (8008420 <floor+0xe8>)
 8008372:	4303      	orrs	r3, r0
 8008374:	2000      	movs	r0, #0
 8008376:	4283      	cmp	r3, r0
 8008378:	bf18      	it	ne
 800837a:	4611      	movne	r1, r2
 800837c:	460b      	mov	r3, r1
 800837e:	4602      	mov	r2, r0
 8008380:	ec43 2b10 	vmov	d0, r2, r3
 8008384:	e020      	b.n	80083c8 <floor+0x90>
 8008386:	4a27      	ldr	r2, [pc, #156]	; (8008424 <floor+0xec>)
 8008388:	411a      	asrs	r2, r3
 800838a:	ea01 0402 	and.w	r4, r1, r2
 800838e:	4304      	orrs	r4, r0
 8008390:	d01a      	beq.n	80083c8 <floor+0x90>
 8008392:	ed9f 7b21 	vldr	d7, [pc, #132]	; 8008418 <floor+0xe0>
 8008396:	ee30 0b07 	vadd.f64	d0, d0, d7
 800839a:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800839e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80083a2:	ddeb      	ble.n	800837c <floor+0x44>
 80083a4:	2900      	cmp	r1, #0
 80083a6:	bfbe      	ittt	lt
 80083a8:	f44f 1080 	movlt.w	r0, #1048576	; 0x100000
 80083ac:	fa40 f303 	asrlt.w	r3, r0, r3
 80083b0:	18c9      	addlt	r1, r1, r3
 80083b2:	ea21 0102 	bic.w	r1, r1, r2
 80083b6:	2000      	movs	r0, #0
 80083b8:	e7e0      	b.n	800837c <floor+0x44>
 80083ba:	2b33      	cmp	r3, #51	; 0x33
 80083bc:	dd05      	ble.n	80083ca <floor+0x92>
 80083be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80083c2:	d101      	bne.n	80083c8 <floor+0x90>
 80083c4:	ee30 0b00 	vadd.f64	d0, d0, d0
 80083c8:	bd30      	pop	{r4, r5, pc}
 80083ca:	f2a2 4413 	subw	r4, r2, #1043	; 0x413
 80083ce:	f04f 32ff 	mov.w	r2, #4294967295
 80083d2:	40e2      	lsrs	r2, r4
 80083d4:	4202      	tst	r2, r0
 80083d6:	d0f7      	beq.n	80083c8 <floor+0x90>
 80083d8:	ed9f 7b0f 	vldr	d7, [pc, #60]	; 8008418 <floor+0xe0>
 80083dc:	ee30 0b07 	vadd.f64	d0, d0, d7
 80083e0:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 80083e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80083e8:	ddc8      	ble.n	800837c <floor+0x44>
 80083ea:	2900      	cmp	r1, #0
 80083ec:	da02      	bge.n	80083f4 <floor+0xbc>
 80083ee:	2b14      	cmp	r3, #20
 80083f0:	d103      	bne.n	80083fa <floor+0xc2>
 80083f2:	3101      	adds	r1, #1
 80083f4:	ea20 0002 	bic.w	r0, r0, r2
 80083f8:	e7c0      	b.n	800837c <floor+0x44>
 80083fa:	2401      	movs	r4, #1
 80083fc:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8008400:	fa04 f303 	lsl.w	r3, r4, r3
 8008404:	4418      	add	r0, r3
 8008406:	42a8      	cmp	r0, r5
 8008408:	bf38      	it	cc
 800840a:	1909      	addcc	r1, r1, r4
 800840c:	e7f2      	b.n	80083f4 <floor+0xbc>
 800840e:	2000      	movs	r0, #0
 8008410:	4601      	mov	r1, r0
 8008412:	e7b3      	b.n	800837c <floor+0x44>
 8008414:	f3af 8000 	nop.w
 8008418:	8800759c 	.word	0x8800759c
 800841c:	7e37e43c 	.word	0x7e37e43c
 8008420:	bff00000 	.word	0xbff00000
 8008424:	000fffff 	.word	0x000fffff

08008428 <matherr>:
 8008428:	2000      	movs	r0, #0
 800842a:	4770      	bx	lr
 800842c:	0000      	movs	r0, r0
	...

08008430 <nan>:
 8008430:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8008438 <nan+0x8>
 8008434:	4770      	bx	lr
 8008436:	bf00      	nop
 8008438:	00000000 	.word	0x00000000
 800843c:	7ff80000 	.word	0x7ff80000

08008440 <rint>:
 8008440:	b530      	push	{r4, r5, lr}
 8008442:	b085      	sub	sp, #20
 8008444:	ed8d 0b00 	vstr	d0, [sp]
 8008448:	e9dd 2300 	ldrd	r2, r3, [sp]
 800844c:	f3c3 510a 	ubfx	r1, r3, #20, #11
 8008450:	f2a1 30ff 	subw	r0, r1, #1023	; 0x3ff
 8008454:	2813      	cmp	r0, #19
 8008456:	ea4f 74d3 	mov.w	r4, r3, lsr #31
 800845a:	dc5a      	bgt.n	8008512 <rint+0xd2>
 800845c:	2800      	cmp	r0, #0
 800845e:	da2f      	bge.n	80084c0 <rint+0x80>
 8008460:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8008464:	4311      	orrs	r1, r2
 8008466:	d027      	beq.n	80084b8 <rint+0x78>
 8008468:	f3c3 0513 	ubfx	r5, r3, #0, #20
 800846c:	4315      	orrs	r5, r2
 800846e:	426a      	negs	r2, r5
 8008470:	432a      	orrs	r2, r5
 8008472:	0b12      	lsrs	r2, r2, #12
 8008474:	0c5b      	lsrs	r3, r3, #17
 8008476:	045b      	lsls	r3, r3, #17
 8008478:	f402 2200 	and.w	r2, r2, #524288	; 0x80000
 800847c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008480:	ea42 0103 	orr.w	r1, r2, r3
 8008484:	4b31      	ldr	r3, [pc, #196]	; (800854c <rint+0x10c>)
 8008486:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800848a:	ed93 6b00 	vldr	d6, [r3]
 800848e:	ec41 0b17 	vmov	d7, r0, r1
 8008492:	ee36 7b07 	vadd.f64	d7, d6, d7
 8008496:	ed8d 7b02 	vstr	d7, [sp, #8]
 800849a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800849e:	ee37 7b46 	vsub.f64	d7, d7, d6
 80084a2:	ed8d 7b00 	vstr	d7, [sp]
 80084a6:	9b01      	ldr	r3, [sp, #4]
 80084a8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80084ac:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80084b0:	ea43 71c4 	orr.w	r1, r3, r4, lsl #31
 80084b4:	e9cd 0100 	strd	r0, r1, [sp]
 80084b8:	ed9d 0b00 	vldr	d0, [sp]
 80084bc:	b005      	add	sp, #20
 80084be:	bd30      	pop	{r4, r5, pc}
 80084c0:	4923      	ldr	r1, [pc, #140]	; (8008550 <rint+0x110>)
 80084c2:	4101      	asrs	r1, r0
 80084c4:	ea03 0501 	and.w	r5, r3, r1
 80084c8:	4315      	orrs	r5, r2
 80084ca:	d0f5      	beq.n	80084b8 <rint+0x78>
 80084cc:	0849      	lsrs	r1, r1, #1
 80084ce:	ea03 0501 	and.w	r5, r3, r1
 80084d2:	432a      	orrs	r2, r5
 80084d4:	d00b      	beq.n	80084ee <rint+0xae>
 80084d6:	ea23 0101 	bic.w	r1, r3, r1
 80084da:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80084de:	2813      	cmp	r0, #19
 80084e0:	fa43 f300 	asr.w	r3, r3, r0
 80084e4:	bf0c      	ite	eq
 80084e6:	f04f 4200 	moveq.w	r2, #2147483648	; 0x80000000
 80084ea:	2200      	movne	r2, #0
 80084ec:	430b      	orrs	r3, r1
 80084ee:	4619      	mov	r1, r3
 80084f0:	4b16      	ldr	r3, [pc, #88]	; (800854c <rint+0x10c>)
 80084f2:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 80084f6:	ed94 6b00 	vldr	d6, [r4]
 80084fa:	4610      	mov	r0, r2
 80084fc:	ec41 0b17 	vmov	d7, r0, r1
 8008500:	ee36 7b07 	vadd.f64	d7, d6, d7
 8008504:	ed8d 7b02 	vstr	d7, [sp, #8]
 8008508:	ed9d 7b02 	vldr	d7, [sp, #8]
 800850c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8008510:	e008      	b.n	8008524 <rint+0xe4>
 8008512:	2833      	cmp	r0, #51	; 0x33
 8008514:	dd09      	ble.n	800852a <rint+0xea>
 8008516:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 800851a:	d1cd      	bne.n	80084b8 <rint+0x78>
 800851c:	ed9d 7b00 	vldr	d7, [sp]
 8008520:	ee37 7b07 	vadd.f64	d7, d7, d7
 8008524:	ed8d 7b00 	vstr	d7, [sp]
 8008528:	e7c6      	b.n	80084b8 <rint+0x78>
 800852a:	f2a1 4013 	subw	r0, r1, #1043	; 0x413
 800852e:	f04f 31ff 	mov.w	r1, #4294967295
 8008532:	40c1      	lsrs	r1, r0
 8008534:	420a      	tst	r2, r1
 8008536:	d0bf      	beq.n	80084b8 <rint+0x78>
 8008538:	0849      	lsrs	r1, r1, #1
 800853a:	420a      	tst	r2, r1
 800853c:	bf1f      	itttt	ne
 800853e:	ea22 0101 	bicne.w	r1, r2, r1
 8008542:	f04f 4280 	movne.w	r2, #1073741824	; 0x40000000
 8008546:	4102      	asrne	r2, r0
 8008548:	430a      	orrne	r2, r1
 800854a:	e7d0      	b.n	80084ee <rint+0xae>
 800854c:	080088f8 	.word	0x080088f8
 8008550:	000fffff 	.word	0x000fffff
 8008554:	00000000 	.word	0x00000000

08008558 <scalbn>:
 8008558:	b500      	push	{lr}
 800855a:	ed2d 8b02 	vpush	{d8}
 800855e:	b083      	sub	sp, #12
 8008560:	ed8d 0b00 	vstr	d0, [sp]
 8008564:	9b01      	ldr	r3, [sp, #4]
 8008566:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800856a:	b9a2      	cbnz	r2, 8008596 <scalbn+0x3e>
 800856c:	9a00      	ldr	r2, [sp, #0]
 800856e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008572:	4313      	orrs	r3, r2
 8008574:	d03a      	beq.n	80085ec <scalbn+0x94>
 8008576:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 8008630 <scalbn+0xd8>
 800857a:	4b35      	ldr	r3, [pc, #212]	; (8008650 <scalbn+0xf8>)
 800857c:	ee20 7b07 	vmul.f64	d7, d0, d7
 8008580:	4298      	cmp	r0, r3
 8008582:	ed8d 7b00 	vstr	d7, [sp]
 8008586:	da11      	bge.n	80085ac <scalbn+0x54>
 8008588:	ed9f 7b2b 	vldr	d7, [pc, #172]	; 8008638 <scalbn+0xe0>
 800858c:	ed9d 6b00 	vldr	d6, [sp]
 8008590:	ee27 7b06 	vmul.f64	d7, d7, d6
 8008594:	e007      	b.n	80085a6 <scalbn+0x4e>
 8008596:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800859a:	428a      	cmp	r2, r1
 800859c:	d10a      	bne.n	80085b4 <scalbn+0x5c>
 800859e:	ed9d 7b00 	vldr	d7, [sp]
 80085a2:	ee37 7b07 	vadd.f64	d7, d7, d7
 80085a6:	ed8d 7b00 	vstr	d7, [sp]
 80085aa:	e01f      	b.n	80085ec <scalbn+0x94>
 80085ac:	9b01      	ldr	r3, [sp, #4]
 80085ae:	f3c3 520a 	ubfx	r2, r3, #20, #11
 80085b2:	3a36      	subs	r2, #54	; 0x36
 80085b4:	4402      	add	r2, r0
 80085b6:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80085ba:	428a      	cmp	r2, r1
 80085bc:	dd0a      	ble.n	80085d4 <scalbn+0x7c>
 80085be:	ed9f 8b20 	vldr	d8, [pc, #128]	; 8008640 <scalbn+0xe8>
 80085c2:	eeb0 0b48 	vmov.f64	d0, d8
 80085c6:	ed9d 1b00 	vldr	d1, [sp]
 80085ca:	f000 f843 	bl	8008654 <copysign>
 80085ce:	ee20 7b08 	vmul.f64	d7, d0, d8
 80085d2:	e7e8      	b.n	80085a6 <scalbn+0x4e>
 80085d4:	2a00      	cmp	r2, #0
 80085d6:	dd10      	ble.n	80085fa <scalbn+0xa2>
 80085d8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80085dc:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80085e0:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80085e4:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 80085e8:	e9cd 0100 	strd	r0, r1, [sp]
 80085ec:	ed9d 0b00 	vldr	d0, [sp]
 80085f0:	b003      	add	sp, #12
 80085f2:	ecbd 8b02 	vpop	{d8}
 80085f6:	f85d fb04 	ldr.w	pc, [sp], #4
 80085fa:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80085fe:	da06      	bge.n	800860e <scalbn+0xb6>
 8008600:	f24c 3350 	movw	r3, #50000	; 0xc350
 8008604:	4298      	cmp	r0, r3
 8008606:	dcda      	bgt.n	80085be <scalbn+0x66>
 8008608:	ed9f 8b0b 	vldr	d8, [pc, #44]	; 8008638 <scalbn+0xe0>
 800860c:	e7d9      	b.n	80085c2 <scalbn+0x6a>
 800860e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008612:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8008616:	3236      	adds	r2, #54	; 0x36
 8008618:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800861c:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8008620:	ec41 0b17 	vmov	d7, r0, r1
 8008624:	ed9f 6b08 	vldr	d6, [pc, #32]	; 8008648 <scalbn+0xf0>
 8008628:	e7b2      	b.n	8008590 <scalbn+0x38>
 800862a:	bf00      	nop
 800862c:	f3af 8000 	nop.w
 8008630:	00000000 	.word	0x00000000
 8008634:	43500000 	.word	0x43500000
 8008638:	c2f8f359 	.word	0xc2f8f359
 800863c:	01a56e1f 	.word	0x01a56e1f
 8008640:	8800759c 	.word	0x8800759c
 8008644:	7e37e43c 	.word	0x7e37e43c
 8008648:	00000000 	.word	0x00000000
 800864c:	3c900000 	.word	0x3c900000
 8008650:	ffff3cb0 	.word	0xffff3cb0

08008654 <copysign>:
 8008654:	ec51 0b10 	vmov	r0, r1, d0
 8008658:	ee11 0a90 	vmov	r0, s3
 800865c:	ee10 2a10 	vmov	r2, s0
 8008660:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8008664:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8008668:	ea41 0300 	orr.w	r3, r1, r0
 800866c:	ec43 2b10 	vmov	d0, r2, r3
 8008670:	4770      	bx	lr
	...

08008674 <_init>:
 8008674:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008676:	bf00      	nop
 8008678:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800867a:	bc08      	pop	{r3}
 800867c:	469e      	mov	lr, r3
 800867e:	4770      	bx	lr

08008680 <_fini>:
 8008680:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008682:	bf00      	nop
 8008684:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008686:	bc08      	pop	{r3}
 8008688:	469e      	mov	lr, r3
 800868a:	4770      	bx	lr
