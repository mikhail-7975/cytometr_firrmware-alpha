
alpha_firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000831c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  08008428  08008428  00018428  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080084b0  080084b0  00020180  2**0
                  CONTENTS
  4 .ARM          00000000  080084b0  080084b0  00020180  2**0
                  CONTENTS
  5 .preinit_array 00000000  080084b0  080084b0  00020180  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080084b0  080084b0  000184b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080084b4  080084b4  000184b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000180  20000000  080084b8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000019d4  20000180  08008638  00020180  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001b54  08008638  00021b54  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020180  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014d1d  00000000  00000000  000201a9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000325d  00000000  00000000  00034ec6  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000e98  00000000  00000000  00038128  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000d10  00000000  00000000  00038fc0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001a7b3  00000000  00000000  00039cd0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000f764  00000000  00000000  00054483  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008b9d8  00000000  00000000  00063be7  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000ef5bf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003a18  00000000  00000000  000ef63c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000180 	.word	0x20000180
 8000128:	00000000 	.word	0x00000000
 800012c:	08008410 	.word	0x08008410

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000184 	.word	0x20000184
 8000148:	08008410 	.word	0x08008410

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000152:	f000 fc7d 	bl	8000a50 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000156:	f000 f871 	bl	800023c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800015a:	f000 f95f 	bl	800041c <MX_GPIO_Init>
  MX_DMA_Init();
 800015e:	f000 f93f 	bl	80003e0 <MX_DMA_Init>
  MX_ADC1_Init();
 8000162:	f000 f8c9 	bl	80002f8 <MX_ADC1_Init>
  MX_SPI1_Init();
 8000166:	f000 f905 	bl	8000374 <MX_SPI1_Init>
  MX_USB_DEVICE_Init();
 800016a:	f007 fc71 	bl	8007a50 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */


  HAL_ADCEx_Calibration_Start(&hadc1);
 800016e:	482a      	ldr	r0, [pc, #168]	; (8000218 <main+0xcc>)
 8000170:	f001 f97e 	bl	8001470 <HAL_ADCEx_Calibration_Start>
  HAL_ADC_Start(&hadc1);
 8000174:	4828      	ldr	r0, [pc, #160]	; (8000218 <main+0xcc>)
 8000176:	f000 fda5 	bl	8000cc4 <HAL_ADC_Start>
  {
	  if (settings_changed) {

	  }
	  //release
	  while (status == status_reading_trigger) {
 800017a:	e00f      	b.n	800019c <main+0x50>
			  if((adc_value = HAL_ADC_GetValue(&hadc1)) > trigger_level) {
 800017c:	4826      	ldr	r0, [pc, #152]	; (8000218 <main+0xcc>)
 800017e:	f000 ff78 	bl	8001072 <HAL_ADC_GetValue>
 8000182:	4603      	mov	r3, r0
 8000184:	b29a      	uxth	r2, r3
 8000186:	4b25      	ldr	r3, [pc, #148]	; (800021c <main+0xd0>)
 8000188:	801a      	strh	r2, [r3, #0]
 800018a:	4b24      	ldr	r3, [pc, #144]	; (800021c <main+0xd0>)
 800018c:	881a      	ldrh	r2, [r3, #0]
 800018e:	4b24      	ldr	r3, [pc, #144]	; (8000220 <main+0xd4>)
 8000190:	881b      	ldrh	r3, [r3, #0]
 8000192:	429a      	cmp	r2, r3
 8000194:	d902      	bls.n	800019c <main+0x50>
				  is_triggered = 1;
 8000196:	4b23      	ldr	r3, [pc, #140]	; (8000224 <main+0xd8>)
 8000198:	2201      	movs	r2, #1
 800019a:	701a      	strb	r2, [r3, #0]
	  while (status == status_reading_trigger) {
 800019c:	4b22      	ldr	r3, [pc, #136]	; (8000228 <main+0xdc>)
 800019e:	781b      	ldrb	r3, [r3, #0]
 80001a0:	2b0a      	cmp	r3, #10
 80001a2:	d0eb      	beq.n	800017c <main+0x30>
			  }
			  //is_triggered = 1;
	  }
	  if (status == status_SENDING_Data) {
 80001a4:	4b20      	ldr	r3, [pc, #128]	; (8000228 <main+0xdc>)
 80001a6:	781b      	ldrb	r3, [r3, #0]
 80001a8:	2b0b      	cmp	r3, #11
 80001aa:	d1e6      	bne.n	800017a <main+0x2e>
		  while(CDC_Transmit_FS((uint8_t*)&Data_buffer, Data_buf_lenth * sizeof(uint16_t)) == USBD_BUSY);
 80001ac:	bf00      	nop
 80001ae:	f44f 617a 	mov.w	r1, #4000	; 0xfa0
 80001b2:	481e      	ldr	r0, [pc, #120]	; (800022c <main+0xe0>)
 80001b4:	f007 fd0e 	bl	8007bd4 <CDC_Transmit_FS>
 80001b8:	4603      	mov	r3, r0
 80001ba:	2b01      	cmp	r3, #1
 80001bc:	d0f7      	beq.n	80001ae <main+0x62>
		  while(ack != True);
 80001be:	bf00      	nop
 80001c0:	4b1b      	ldr	r3, [pc, #108]	; (8000230 <main+0xe4>)
 80001c2:	781b      	ldrb	r3, [r3, #0]
 80001c4:	2b01      	cmp	r3, #1
 80001c6:	d1fb      	bne.n	80001c0 <main+0x74>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_RESET);
 80001c8:	2200      	movs	r2, #0
 80001ca:	2104      	movs	r1, #4
 80001cc:	4819      	ldr	r0, [pc, #100]	; (8000234 <main+0xe8>)
 80001ce:	f001 fe7b 	bl	8001ec8 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
 80001d2:	2200      	movs	r2, #0
 80001d4:	2108      	movs	r1, #8
 80001d6:	4817      	ldr	r0, [pc, #92]	; (8000234 <main+0xe8>)
 80001d8:	f001 fe76 	bl	8001ec8 <HAL_GPIO_WritePin>
		  //HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);

		  for(int i = 0; i < Data_buf_lenth; i++)
 80001dc:	2300      	movs	r3, #0
 80001de:	607b      	str	r3, [r7, #4]
 80001e0:	e008      	b.n	80001f4 <main+0xa8>
		  			Data_buffer[i] = 2000;
 80001e2:	4a12      	ldr	r2, [pc, #72]	; (800022c <main+0xe0>)
 80001e4:	687b      	ldr	r3, [r7, #4]
 80001e6:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 80001ea:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		  for(int i = 0; i < Data_buf_lenth; i++)
 80001ee:	687b      	ldr	r3, [r7, #4]
 80001f0:	3301      	adds	r3, #1
 80001f2:	607b      	str	r3, [r7, #4]
 80001f4:	687b      	ldr	r3, [r7, #4]
 80001f6:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80001fa:	dbf2      	blt.n	80001e2 <main+0x96>
		  ack = False;
 80001fc:	4b0c      	ldr	r3, [pc, #48]	; (8000230 <main+0xe4>)
 80001fe:	2200      	movs	r2, #0
 8000200:	701a      	strb	r2, [r3, #0]
		  status = status_doNothing;
 8000202:	4b09      	ldr	r3, [pc, #36]	; (8000228 <main+0xdc>)
 8000204:	220d      	movs	r2, #13
 8000206:	701a      	strb	r2, [r3, #0]
		  is_triggered = 0;
 8000208:	4b06      	ldr	r3, [pc, #24]	; (8000224 <main+0xd8>)
 800020a:	2200      	movs	r2, #0
 800020c:	701a      	strb	r2, [r3, #0]
		  data_part_idx = 0;
 800020e:	4b0a      	ldr	r3, [pc, #40]	; (8000238 <main+0xec>)
 8000210:	2200      	movs	r2, #0
 8000212:	801a      	strh	r2, [r3, #0]
	  if (settings_changed) {
 8000214:	e7b1      	b.n	800017a <main+0x2e>
 8000216:	bf00      	nop
 8000218:	20000414 	.word	0x20000414
 800021c:	200001a0 	.word	0x200001a0
 8000220:	20000002 	.word	0x20000002
 8000224:	2000019c 	.word	0x2000019c
 8000228:	20000001 	.word	0x20000001
 800022c:	200004e0 	.word	0x200004e0
 8000230:	2000019d 	.word	0x2000019d
 8000234:	40010800 	.word	0x40010800
 8000238:	2000019e 	.word	0x2000019e

0800023c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800023c:	b580      	push	{r7, lr}
 800023e:	b094      	sub	sp, #80	; 0x50
 8000240:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000242:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000246:	2228      	movs	r2, #40	; 0x28
 8000248:	2100      	movs	r1, #0
 800024a:	4618      	mov	r0, r3
 800024c:	f008 f8d7 	bl	80083fe <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000250:	f107 0314 	add.w	r3, r7, #20
 8000254:	2200      	movs	r2, #0
 8000256:	601a      	str	r2, [r3, #0]
 8000258:	605a      	str	r2, [r3, #4]
 800025a:	609a      	str	r2, [r3, #8]
 800025c:	60da      	str	r2, [r3, #12]
 800025e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000260:	1d3b      	adds	r3, r7, #4
 8000262:	2200      	movs	r2, #0
 8000264:	601a      	str	r2, [r3, #0]
 8000266:	605a      	str	r2, [r3, #4]
 8000268:	609a      	str	r2, [r3, #8]
 800026a:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800026c:	2301      	movs	r3, #1
 800026e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000270:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000274:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000276:	2300      	movs	r3, #0
 8000278:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800027a:	2301      	movs	r3, #1
 800027c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800027e:	2302      	movs	r3, #2
 8000280:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000282:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000286:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000288:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800028c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800028e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000292:	4618      	mov	r0, r3
 8000294:	f003 f9cc 	bl	8003630 <HAL_RCC_OscConfig>
 8000298:	4603      	mov	r3, r0
 800029a:	2b00      	cmp	r3, #0
 800029c:	d001      	beq.n	80002a2 <SystemClock_Config+0x66>
  {
    Error_Handler();
 800029e:	f000 fa5f 	bl	8000760 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002a2:	230f      	movs	r3, #15
 80002a4:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002a6:	2302      	movs	r3, #2
 80002a8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002aa:	2300      	movs	r3, #0
 80002ac:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80002ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80002b2:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002b4:	2300      	movs	r3, #0
 80002b6:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80002b8:	f107 0314 	add.w	r3, r7, #20
 80002bc:	2102      	movs	r1, #2
 80002be:	4618      	mov	r0, r3
 80002c0:	f003 fc36 	bl	8003b30 <HAL_RCC_ClockConfig>
 80002c4:	4603      	mov	r3, r0
 80002c6:	2b00      	cmp	r3, #0
 80002c8:	d001      	beq.n	80002ce <SystemClock_Config+0x92>
  {
    Error_Handler();
 80002ca:	f000 fa49 	bl	8000760 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_USB;
 80002ce:	2312      	movs	r3, #18
 80002d0:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80002d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80002d6:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 80002d8:	2300      	movs	r3, #0
 80002da:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80002dc:	1d3b      	adds	r3, r7, #4
 80002de:	4618      	mov	r0, r3
 80002e0:	f003 fdae 	bl	8003e40 <HAL_RCCEx_PeriphCLKConfig>
 80002e4:	4603      	mov	r3, r0
 80002e6:	2b00      	cmp	r3, #0
 80002e8:	d001      	beq.n	80002ee <SystemClock_Config+0xb2>
  {
    Error_Handler();
 80002ea:	f000 fa39 	bl	8000760 <Error_Handler>
  }
}
 80002ee:	bf00      	nop
 80002f0:	3750      	adds	r7, #80	; 0x50
 80002f2:	46bd      	mov	sp, r7
 80002f4:	bd80      	pop	{r7, pc}
	...

080002f8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80002f8:	b580      	push	{r7, lr}
 80002fa:	b084      	sub	sp, #16
 80002fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80002fe:	1d3b      	adds	r3, r7, #4
 8000300:	2200      	movs	r2, #0
 8000302:	601a      	str	r2, [r3, #0]
 8000304:	605a      	str	r2, [r3, #4]
 8000306:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000308:	4b18      	ldr	r3, [pc, #96]	; (800036c <MX_ADC1_Init+0x74>)
 800030a:	4a19      	ldr	r2, [pc, #100]	; (8000370 <MX_ADC1_Init+0x78>)
 800030c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800030e:	4b17      	ldr	r3, [pc, #92]	; (800036c <MX_ADC1_Init+0x74>)
 8000310:	2200      	movs	r2, #0
 8000312:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000314:	4b15      	ldr	r3, [pc, #84]	; (800036c <MX_ADC1_Init+0x74>)
 8000316:	2201      	movs	r2, #1
 8000318:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800031a:	4b14      	ldr	r3, [pc, #80]	; (800036c <MX_ADC1_Init+0x74>)
 800031c:	2200      	movs	r2, #0
 800031e:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000320:	4b12      	ldr	r3, [pc, #72]	; (800036c <MX_ADC1_Init+0x74>)
 8000322:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000326:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000328:	4b10      	ldr	r3, [pc, #64]	; (800036c <MX_ADC1_Init+0x74>)
 800032a:	2200      	movs	r2, #0
 800032c:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 800032e:	4b0f      	ldr	r3, [pc, #60]	; (800036c <MX_ADC1_Init+0x74>)
 8000330:	2201      	movs	r2, #1
 8000332:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000334:	480d      	ldr	r0, [pc, #52]	; (800036c <MX_ADC1_Init+0x74>)
 8000336:	f000 fbed 	bl	8000b14 <HAL_ADC_Init>
 800033a:	4603      	mov	r3, r0
 800033c:	2b00      	cmp	r3, #0
 800033e:	d001      	beq.n	8000344 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000340:	f000 fa0e 	bl	8000760 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000344:	2300      	movs	r3, #0
 8000346:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000348:	2301      	movs	r3, #1
 800034a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800034c:	2300      	movs	r3, #0
 800034e:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000350:	1d3b      	adds	r3, r7, #4
 8000352:	4619      	mov	r1, r3
 8000354:	4805      	ldr	r0, [pc, #20]	; (800036c <MX_ADC1_Init+0x74>)
 8000356:	f000 fea1 	bl	800109c <HAL_ADC_ConfigChannel>
 800035a:	4603      	mov	r3, r0
 800035c:	2b00      	cmp	r3, #0
 800035e:	d001      	beq.n	8000364 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000360:	f000 f9fe 	bl	8000760 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000364:	bf00      	nop
 8000366:	3710      	adds	r7, #16
 8000368:	46bd      	mov	sp, r7
 800036a:	bd80      	pop	{r7, pc}
 800036c:	20000414 	.word	0x20000414
 8000370:	40012400 	.word	0x40012400

08000374 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000374:	b580      	push	{r7, lr}
 8000376:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000378:	4b17      	ldr	r3, [pc, #92]	; (80003d8 <MX_SPI1_Init+0x64>)
 800037a:	4a18      	ldr	r2, [pc, #96]	; (80003dc <MX_SPI1_Init+0x68>)
 800037c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800037e:	4b16      	ldr	r3, [pc, #88]	; (80003d8 <MX_SPI1_Init+0x64>)
 8000380:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000384:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000386:	4b14      	ldr	r3, [pc, #80]	; (80003d8 <MX_SPI1_Init+0x64>)
 8000388:	2200      	movs	r2, #0
 800038a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800038c:	4b12      	ldr	r3, [pc, #72]	; (80003d8 <MX_SPI1_Init+0x64>)
 800038e:	2200      	movs	r2, #0
 8000390:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000392:	4b11      	ldr	r3, [pc, #68]	; (80003d8 <MX_SPI1_Init+0x64>)
 8000394:	2200      	movs	r2, #0
 8000396:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000398:	4b0f      	ldr	r3, [pc, #60]	; (80003d8 <MX_SPI1_Init+0x64>)
 800039a:	2200      	movs	r2, #0
 800039c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800039e:	4b0e      	ldr	r3, [pc, #56]	; (80003d8 <MX_SPI1_Init+0x64>)
 80003a0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80003a4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80003a6:	4b0c      	ldr	r3, [pc, #48]	; (80003d8 <MX_SPI1_Init+0x64>)
 80003a8:	2208      	movs	r2, #8
 80003aa:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80003ac:	4b0a      	ldr	r3, [pc, #40]	; (80003d8 <MX_SPI1_Init+0x64>)
 80003ae:	2200      	movs	r2, #0
 80003b0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80003b2:	4b09      	ldr	r3, [pc, #36]	; (80003d8 <MX_SPI1_Init+0x64>)
 80003b4:	2200      	movs	r2, #0
 80003b6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80003b8:	4b07      	ldr	r3, [pc, #28]	; (80003d8 <MX_SPI1_Init+0x64>)
 80003ba:	2200      	movs	r2, #0
 80003bc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80003be:	4b06      	ldr	r3, [pc, #24]	; (80003d8 <MX_SPI1_Init+0x64>)
 80003c0:	220a      	movs	r2, #10
 80003c2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80003c4:	4804      	ldr	r0, [pc, #16]	; (80003d8 <MX_SPI1_Init+0x64>)
 80003c6:	f003 fead 	bl	8004124 <HAL_SPI_Init>
 80003ca:	4603      	mov	r3, r0
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	d001      	beq.n	80003d4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80003d0:	f000 f9c6 	bl	8000760 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80003d4:	bf00      	nop
 80003d6:	bd80      	pop	{r7, pc}
 80003d8:	20000488 	.word	0x20000488
 80003dc:	40013000 	.word	0x40013000

080003e0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80003e0:	b580      	push	{r7, lr}
 80003e2:	b082      	sub	sp, #8
 80003e4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80003e6:	4b0c      	ldr	r3, [pc, #48]	; (8000418 <MX_DMA_Init+0x38>)
 80003e8:	695b      	ldr	r3, [r3, #20]
 80003ea:	4a0b      	ldr	r2, [pc, #44]	; (8000418 <MX_DMA_Init+0x38>)
 80003ec:	f043 0301 	orr.w	r3, r3, #1
 80003f0:	6153      	str	r3, [r2, #20]
 80003f2:	4b09      	ldr	r3, [pc, #36]	; (8000418 <MX_DMA_Init+0x38>)
 80003f4:	695b      	ldr	r3, [r3, #20]
 80003f6:	f003 0301 	and.w	r3, r3, #1
 80003fa:	607b      	str	r3, [r7, #4]
 80003fc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80003fe:	2200      	movs	r2, #0
 8000400:	2100      	movs	r1, #0
 8000402:	200b      	movs	r0, #11
 8000404:	f001 f9a7 	bl	8001756 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000408:	200b      	movs	r0, #11
 800040a:	f001 f9c0 	bl	800178e <HAL_NVIC_EnableIRQ>

}
 800040e:	bf00      	nop
 8000410:	3708      	adds	r7, #8
 8000412:	46bd      	mov	sp, r7
 8000414:	bd80      	pop	{r7, pc}
 8000416:	bf00      	nop
 8000418:	40021000 	.word	0x40021000

0800041c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800041c:	b580      	push	{r7, lr}
 800041e:	b088      	sub	sp, #32
 8000420:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000422:	f107 0310 	add.w	r3, r7, #16
 8000426:	2200      	movs	r2, #0
 8000428:	601a      	str	r2, [r3, #0]
 800042a:	605a      	str	r2, [r3, #4]
 800042c:	609a      	str	r2, [r3, #8]
 800042e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000430:	4b36      	ldr	r3, [pc, #216]	; (800050c <MX_GPIO_Init+0xf0>)
 8000432:	699b      	ldr	r3, [r3, #24]
 8000434:	4a35      	ldr	r2, [pc, #212]	; (800050c <MX_GPIO_Init+0xf0>)
 8000436:	f043 0310 	orr.w	r3, r3, #16
 800043a:	6193      	str	r3, [r2, #24]
 800043c:	4b33      	ldr	r3, [pc, #204]	; (800050c <MX_GPIO_Init+0xf0>)
 800043e:	699b      	ldr	r3, [r3, #24]
 8000440:	f003 0310 	and.w	r3, r3, #16
 8000444:	60fb      	str	r3, [r7, #12]
 8000446:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000448:	4b30      	ldr	r3, [pc, #192]	; (800050c <MX_GPIO_Init+0xf0>)
 800044a:	699b      	ldr	r3, [r3, #24]
 800044c:	4a2f      	ldr	r2, [pc, #188]	; (800050c <MX_GPIO_Init+0xf0>)
 800044e:	f043 0320 	orr.w	r3, r3, #32
 8000452:	6193      	str	r3, [r2, #24]
 8000454:	4b2d      	ldr	r3, [pc, #180]	; (800050c <MX_GPIO_Init+0xf0>)
 8000456:	699b      	ldr	r3, [r3, #24]
 8000458:	f003 0320 	and.w	r3, r3, #32
 800045c:	60bb      	str	r3, [r7, #8]
 800045e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000460:	4b2a      	ldr	r3, [pc, #168]	; (800050c <MX_GPIO_Init+0xf0>)
 8000462:	699b      	ldr	r3, [r3, #24]
 8000464:	4a29      	ldr	r2, [pc, #164]	; (800050c <MX_GPIO_Init+0xf0>)
 8000466:	f043 0304 	orr.w	r3, r3, #4
 800046a:	6193      	str	r3, [r2, #24]
 800046c:	4b27      	ldr	r3, [pc, #156]	; (800050c <MX_GPIO_Init+0xf0>)
 800046e:	699b      	ldr	r3, [r3, #24]
 8000470:	f003 0304 	and.w	r3, r3, #4
 8000474:	607b      	str	r3, [r7, #4]
 8000476:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000478:	4b24      	ldr	r3, [pc, #144]	; (800050c <MX_GPIO_Init+0xf0>)
 800047a:	699b      	ldr	r3, [r3, #24]
 800047c:	4a23      	ldr	r2, [pc, #140]	; (800050c <MX_GPIO_Init+0xf0>)
 800047e:	f043 0308 	orr.w	r3, r3, #8
 8000482:	6193      	str	r3, [r2, #24]
 8000484:	4b21      	ldr	r3, [pc, #132]	; (800050c <MX_GPIO_Init+0xf0>)
 8000486:	699b      	ldr	r3, [r3, #24]
 8000488:	f003 0308 	and.w	r3, r3, #8
 800048c:	603b      	str	r3, [r7, #0]
 800048e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4, GPIO_PIN_RESET);
 8000490:	2200      	movs	r2, #0
 8000492:	211c      	movs	r1, #28
 8000494:	481e      	ldr	r0, [pc, #120]	; (8000510 <MX_GPIO_Init+0xf4>)
 8000496:	f001 fd17 	bl	8001ec8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 800049a:	2200      	movs	r2, #0
 800049c:	21c0      	movs	r1, #192	; 0xc0
 800049e:	481d      	ldr	r0, [pc, #116]	; (8000514 <MX_GPIO_Init+0xf8>)
 80004a0:	f001 fd12 	bl	8001ec8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80004a4:	2302      	movs	r3, #2
 80004a6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80004a8:	4b1b      	ldr	r3, [pc, #108]	; (8000518 <MX_GPIO_Init+0xfc>)
 80004aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004ac:	2300      	movs	r3, #0
 80004ae:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004b0:	f107 0310 	add.w	r3, r7, #16
 80004b4:	4619      	mov	r1, r3
 80004b6:	4816      	ldr	r0, [pc, #88]	; (8000510 <MX_GPIO_Init+0xf4>)
 80004b8:	f001 fbac 	bl	8001c14 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2 PA3 PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4;
 80004bc:	231c      	movs	r3, #28
 80004be:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004c0:	2301      	movs	r3, #1
 80004c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004c4:	2300      	movs	r3, #0
 80004c6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004c8:	2302      	movs	r3, #2
 80004ca:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004cc:	f107 0310 	add.w	r3, r7, #16
 80004d0:	4619      	mov	r1, r3
 80004d2:	480f      	ldr	r0, [pc, #60]	; (8000510 <MX_GPIO_Init+0xf4>)
 80004d4:	f001 fb9e 	bl	8001c14 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80004d8:	23c0      	movs	r3, #192	; 0xc0
 80004da:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004dc:	2301      	movs	r3, #1
 80004de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004e0:	2300      	movs	r3, #0
 80004e2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004e4:	2302      	movs	r3, #2
 80004e6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004e8:	f107 0310 	add.w	r3, r7, #16
 80004ec:	4619      	mov	r1, r3
 80004ee:	4809      	ldr	r0, [pc, #36]	; (8000514 <MX_GPIO_Init+0xf8>)
 80004f0:	f001 fb90 	bl	8001c14 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 80004f4:	2200      	movs	r2, #0
 80004f6:	2100      	movs	r1, #0
 80004f8:	2007      	movs	r0, #7
 80004fa:	f001 f92c 	bl	8001756 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80004fe:	2007      	movs	r0, #7
 8000500:	f001 f945 	bl	800178e <HAL_NVIC_EnableIRQ>

}
 8000504:	bf00      	nop
 8000506:	3720      	adds	r7, #32
 8000508:	46bd      	mov	sp, r7
 800050a:	bd80      	pop	{r7, pc}
 800050c:	40021000 	.word	0x40021000
 8000510:	40010800 	.word	0x40010800
 8000514:	40010c00 	.word	0x40010c00
 8000518:	10110000 	.word	0x10110000

0800051c <CDC_ReciveCallBack>:

/* USER CODE BEGIN 4 */
void CDC_ReciveCallBack(uint8_t *Buf, uint32_t *Len) {
 800051c:	b580      	push	{r7, lr}
 800051e:	b082      	sub	sp, #8
 8000520:	af00      	add	r7, sp, #0
 8000522:	6078      	str	r0, [r7, #4]
 8000524:	6039      	str	r1, [r7, #0]
	switch(Buf[0]) {
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	781b      	ldrb	r3, [r3, #0]
 800052a:	3b61      	subs	r3, #97	; 0x61
 800052c:	2b12      	cmp	r3, #18
 800052e:	d85f      	bhi.n	80005f0 <CDC_ReciveCallBack+0xd4>
 8000530:	a201      	add	r2, pc, #4	; (adr r2, 8000538 <CDC_ReciveCallBack+0x1c>)
 8000532:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000536:	bf00      	nop
 8000538:	08000585 	.word	0x08000585
 800053c:	080005a1 	.word	0x080005a1
 8000540:	080005f1 	.word	0x080005f1
 8000544:	080005f1 	.word	0x080005f1
 8000548:	080005e1 	.word	0x080005e1
 800054c:	080005f1 	.word	0x080005f1
 8000550:	080005f1 	.word	0x080005f1
 8000554:	080005f1 	.word	0x080005f1
 8000558:	080005f1 	.word	0x080005f1
 800055c:	080005f1 	.word	0x080005f1
 8000560:	080005f1 	.word	0x080005f1
 8000564:	080005f1 	.word	0x080005f1
 8000568:	080005f1 	.word	0x080005f1
 800056c:	080005f1 	.word	0x080005f1
 8000570:	080005f1 	.word	0x080005f1
 8000574:	080005f1 	.word	0x080005f1
 8000578:	080005f1 	.word	0x080005f1
 800057c:	080005f1 	.word	0x080005f1
 8000580:	080005ef 	.word	0x080005ef
		case 'a': {//ack
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_SET);
 8000584:	2201      	movs	r2, #1
 8000586:	2108      	movs	r1, #8
 8000588:	481b      	ldr	r0, [pc, #108]	; (80005f8 <CDC_ReciveCallBack+0xdc>)
 800058a:	f001 fc9d 	bl	8001ec8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
 800058e:	2200      	movs	r2, #0
 8000590:	2108      	movs	r1, #8
 8000592:	4819      	ldr	r0, [pc, #100]	; (80005f8 <CDC_ReciveCallBack+0xdc>)
 8000594:	f001 fc98 	bl	8001ec8 <HAL_GPIO_WritePin>
			ack = True;
 8000598:	4b18      	ldr	r3, [pc, #96]	; (80005fc <CDC_ReciveCallBack+0xe0>)
 800059a:	2201      	movs	r2, #1
 800059c:	701a      	strb	r2, [r3, #0]
				break;
 800059e:	e027      	b.n	80005f0 <CDC_ReciveCallBack+0xd4>
			}
		case 'b': {//begin
			if (status == status_doNothing) {
 80005a0:	4b17      	ldr	r3, [pc, #92]	; (8000600 <CDC_ReciveCallBack+0xe4>)
 80005a2:	781b      	ldrb	r3, [r3, #0]
 80005a4:	2b0d      	cmp	r3, #13
 80005a6:	d11b      	bne.n	80005e0 <CDC_ReciveCallBack+0xc4>
				if(Buf[1] == 't') {
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	3301      	adds	r3, #1
 80005ac:	781b      	ldrb	r3, [r3, #0]
 80005ae:	2b74      	cmp	r3, #116	; 0x74
 80005b0:	d10d      	bne.n	80005ce <CDC_ReciveCallBack+0xb2>
					status = status_reading_trigger;
 80005b2:	4b13      	ldr	r3, [pc, #76]	; (8000600 <CDC_ReciveCallBack+0xe4>)
 80005b4:	220a      	movs	r2, #10
 80005b6:	701a      	strb	r2, [r3, #0]
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_SET);
 80005b8:	2201      	movs	r2, #1
 80005ba:	2108      	movs	r1, #8
 80005bc:	480e      	ldr	r0, [pc, #56]	; (80005f8 <CDC_ReciveCallBack+0xdc>)
 80005be:	f001 fc83 	bl	8001ec8 <HAL_GPIO_WritePin>
					HAL_ADC_Start_DMA(&hadc1, (uint32_t*)&DMA_buffer, DMA_buf_size);
 80005c2:	2228      	movs	r2, #40	; 0x28
 80005c4:	490f      	ldr	r1, [pc, #60]	; (8000604 <CDC_ReciveCallBack+0xe8>)
 80005c6:	4810      	ldr	r0, [pc, #64]	; (8000608 <CDC_ReciveCallBack+0xec>)
 80005c8:	f000 fc2a 	bl	8000e20 <HAL_ADC_Start_DMA>
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_SET);
				}

				//HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_3);
				//HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_3);
				break;
 80005cc:	e010      	b.n	80005f0 <CDC_ReciveCallBack+0xd4>
					status = status_beReady_tracer;
 80005ce:	4b0c      	ldr	r3, [pc, #48]	; (8000600 <CDC_ReciveCallBack+0xe4>)
 80005d0:	220e      	movs	r2, #14
 80005d2:	701a      	strb	r2, [r3, #0]
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_SET);
 80005d4:	2201      	movs	r2, #1
 80005d6:	2108      	movs	r1, #8
 80005d8:	4807      	ldr	r0, [pc, #28]	; (80005f8 <CDC_ReciveCallBack+0xdc>)
 80005da:	f001 fc75 	bl	8001ec8 <HAL_GPIO_WritePin>
				break;
 80005de:	e007      	b.n	80005f0 <CDC_ReciveCallBack+0xd4>
			}
		}
		case 'e': {//end
			status = status_doNothing;
 80005e0:	4b07      	ldr	r3, [pc, #28]	; (8000600 <CDC_ReciveCallBack+0xe4>)
 80005e2:	220d      	movs	r2, #13
 80005e4:	701a      	strb	r2, [r3, #0]
			is_triggered = 0;
 80005e6:	4b09      	ldr	r3, [pc, #36]	; (800060c <CDC_ReciveCallBack+0xf0>)
 80005e8:	2200      	movs	r2, #0
 80005ea:	701a      	strb	r2, [r3, #0]
			//data_part_idx = 0;
			break;
 80005ec:	e000      	b.n	80005f0 <CDC_ReciveCallBack+0xd4>
		}
		case 's': {//settings

//			settings_changed = True;
			break;
 80005ee:	bf00      	nop
		}
	}
}
 80005f0:	bf00      	nop
 80005f2:	3708      	adds	r7, #8
 80005f4:	46bd      	mov	sp, r7
 80005f6:	bd80      	pop	{r7, pc}
 80005f8:	40010800 	.word	0x40010800
 80005fc:	2000019d 	.word	0x2000019d
 8000600:	20000001 	.word	0x20000001
 8000604:	200003c4 	.word	0x200003c4
 8000608:	20000414 	.word	0x20000414
 800060c:	2000019c 	.word	0x2000019c

08000610 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8000610:	b580      	push	{r7, lr}
 8000612:	b082      	sub	sp, #8
 8000614:	af00      	add	r7, sp, #0
 8000616:	4603      	mov	r3, r0
 8000618:	80fb      	strh	r3, [r7, #6]
	if((GPIO_Pin == GPIO_PIN_1)&&(status == status_beReady_tracer)) //3.3 on PA1
 800061a:	88fb      	ldrh	r3, [r7, #6]
 800061c:	2b02      	cmp	r3, #2
 800061e:	d10f      	bne.n	8000640 <HAL_GPIO_EXTI_Callback+0x30>
 8000620:	4b0a      	ldr	r3, [pc, #40]	; (800064c <HAL_GPIO_EXTI_Callback+0x3c>)
 8000622:	781b      	ldrb	r3, [r3, #0]
 8000624:	2b0e      	cmp	r3, #14
 8000626:	d10b      	bne.n	8000640 <HAL_GPIO_EXTI_Callback+0x30>
		{
			status = status_reading_tracer;
 8000628:	4b08      	ldr	r3, [pc, #32]	; (800064c <HAL_GPIO_EXTI_Callback+0x3c>)
 800062a:	2209      	movs	r2, #9
 800062c:	701a      	strb	r2, [r3, #0]
			is_triggered = 1;
 800062e:	4b08      	ldr	r3, [pc, #32]	; (8000650 <HAL_GPIO_EXTI_Callback+0x40>)
 8000630:	2201      	movs	r2, #1
 8000632:	701a      	strb	r2, [r3, #0]
			HAL_ADC_Start_DMA(&hadc1, (uint32_t*)&DMA_buffer, DMA_buf_size);
 8000634:	2228      	movs	r2, #40	; 0x28
 8000636:	4907      	ldr	r1, [pc, #28]	; (8000654 <HAL_GPIO_EXTI_Callback+0x44>)
 8000638:	4807      	ldr	r0, [pc, #28]	; (8000658 <HAL_GPIO_EXTI_Callback+0x48>)
 800063a:	f000 fbf1 	bl	8000e20 <HAL_ADC_Start_DMA>
 800063e:	e000      	b.n	8000642 <HAL_GPIO_EXTI_Callback+0x32>
			//HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3 | GPIO_PIN_4, GPIO_PIN_RESET); //set 0 v on PA3
		}
		else
		{
			__NOP();
 8000640:	bf00      	nop
		}
}
 8000642:	bf00      	nop
 8000644:	3708      	adds	r7, #8
 8000646:	46bd      	mov	sp, r7
 8000648:	bd80      	pop	{r7, pc}
 800064a:	bf00      	nop
 800064c:	20000001 	.word	0x20000001
 8000650:	2000019c 	.word	0x2000019c
 8000654:	200003c4 	.word	0x200003c4
 8000658:	20000414 	.word	0x20000414

0800065c <HAL_ADC_ConvCpltCallback>:


 void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 800065c:	b580      	push	{r7, lr}
 800065e:	b082      	sub	sp, #8
 8000660:	af00      	add	r7, sp, #0
 8000662:	6078      	str	r0, [r7, #4]
	data_part_idx += is_triggered;
 8000664:	4b17      	ldr	r3, [pc, #92]	; (80006c4 <HAL_ADC_ConvCpltCallback+0x68>)
 8000666:	781b      	ldrb	r3, [r3, #0]
 8000668:	b29a      	uxth	r2, r3
 800066a:	4b17      	ldr	r3, [pc, #92]	; (80006c8 <HAL_ADC_ConvCpltCallback+0x6c>)
 800066c:	881b      	ldrh	r3, [r3, #0]
 800066e:	4413      	add	r3, r2
 8000670:	b29a      	uxth	r2, r3
 8000672:	4b15      	ldr	r3, [pc, #84]	; (80006c8 <HAL_ADC_ConvCpltCallback+0x6c>)
 8000674:	801a      	strh	r2, [r3, #0]
	memcpy(&Data_buffer[data_part_idx * DMA_half_buf_size], &DMA_buffer[DMA_midIdx], DMA_half_buf_size * sizeof(uint16_t));
 8000676:	4b14      	ldr	r3, [pc, #80]	; (80006c8 <HAL_ADC_ConvCpltCallback+0x6c>)
 8000678:	881b      	ldrh	r3, [r3, #0]
 800067a:	461a      	mov	r2, r3
 800067c:	4613      	mov	r3, r2
 800067e:	009b      	lsls	r3, r3, #2
 8000680:	4413      	add	r3, r2
 8000682:	009b      	lsls	r3, r3, #2
 8000684:	005b      	lsls	r3, r3, #1
 8000686:	4a11      	ldr	r2, [pc, #68]	; (80006cc <HAL_ADC_ConvCpltCallback+0x70>)
 8000688:	1898      	adds	r0, r3, r2
 800068a:	4b11      	ldr	r3, [pc, #68]	; (80006d0 <HAL_ADC_ConvCpltCallback+0x74>)
 800068c:	781b      	ldrb	r3, [r3, #0]
 800068e:	005b      	lsls	r3, r3, #1
 8000690:	4a10      	ldr	r2, [pc, #64]	; (80006d4 <HAL_ADC_ConvCpltCallback+0x78>)
 8000692:	4413      	add	r3, r2
 8000694:	2228      	movs	r2, #40	; 0x28
 8000696:	4619      	mov	r1, r3
 8000698:	f007 fea6 	bl	80083e8 <memcpy>
	if(data_part_idx >= number_half_bufSize) {//количество полоивин дма буффера в большом буффере
 800069c:	4b0a      	ldr	r3, [pc, #40]	; (80006c8 <HAL_ADC_ConvCpltCallback+0x6c>)
 800069e:	881b      	ldrh	r3, [r3, #0]
 80006a0:	2b63      	cmp	r3, #99	; 0x63
 80006a2:	d90a      	bls.n	80006ba <HAL_ADC_ConvCpltCallback+0x5e>
		HAL_ADC_Stop_DMA(&hadc1);
 80006a4:	480c      	ldr	r0, [pc, #48]	; (80006d8 <HAL_ADC_ConvCpltCallback+0x7c>)
 80006a6:	f000 fc99 	bl	8000fdc <HAL_ADC_Stop_DMA>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_SET);
 80006aa:	2201      	movs	r2, #1
 80006ac:	2104      	movs	r1, #4
 80006ae:	480b      	ldr	r0, [pc, #44]	; (80006dc <HAL_ADC_ConvCpltCallback+0x80>)
 80006b0:	f001 fc0a 	bl	8001ec8 <HAL_GPIO_WritePin>
		status = status_SENDING_Data;
 80006b4:	4b0a      	ldr	r3, [pc, #40]	; (80006e0 <HAL_ADC_ConvCpltCallback+0x84>)
 80006b6:	220b      	movs	r2, #11
 80006b8:	701a      	strb	r2, [r3, #0]
	}
}
 80006ba:	bf00      	nop
 80006bc:	3708      	adds	r7, #8
 80006be:	46bd      	mov	sp, r7
 80006c0:	bd80      	pop	{r7, pc}
 80006c2:	bf00      	nop
 80006c4:	2000019c 	.word	0x2000019c
 80006c8:	2000019e 	.word	0x2000019e
 80006cc:	200004e0 	.word	0x200004e0
 80006d0:	20000000 	.word	0x20000000
 80006d4:	200003c4 	.word	0x200003c4
 80006d8:	20000414 	.word	0x20000414
 80006dc:	40010800 	.word	0x40010800
 80006e0:	20000001 	.word	0x20000001

080006e4 <HAL_ADC_ConvHalfCpltCallback>:

void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc) {
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b082      	sub	sp, #8
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	6078      	str	r0, [r7, #4]
	data_part_idx += is_triggered;
 80006ec:	4b15      	ldr	r3, [pc, #84]	; (8000744 <HAL_ADC_ConvHalfCpltCallback+0x60>)
 80006ee:	781b      	ldrb	r3, [r3, #0]
 80006f0:	b29a      	uxth	r2, r3
 80006f2:	4b15      	ldr	r3, [pc, #84]	; (8000748 <HAL_ADC_ConvHalfCpltCallback+0x64>)
 80006f4:	881b      	ldrh	r3, [r3, #0]
 80006f6:	4413      	add	r3, r2
 80006f8:	b29a      	uxth	r2, r3
 80006fa:	4b13      	ldr	r3, [pc, #76]	; (8000748 <HAL_ADC_ConvHalfCpltCallback+0x64>)
 80006fc:	801a      	strh	r2, [r3, #0]
	memcpy(&Data_buffer[data_part_idx * DMA_half_buf_size], &DMA_buffer, DMA_half_buf_size * sizeof(uint16_t));
 80006fe:	4b12      	ldr	r3, [pc, #72]	; (8000748 <HAL_ADC_ConvHalfCpltCallback+0x64>)
 8000700:	881b      	ldrh	r3, [r3, #0]
 8000702:	461a      	mov	r2, r3
 8000704:	4613      	mov	r3, r2
 8000706:	009b      	lsls	r3, r3, #2
 8000708:	4413      	add	r3, r2
 800070a:	009b      	lsls	r3, r3, #2
 800070c:	005b      	lsls	r3, r3, #1
 800070e:	4a0f      	ldr	r2, [pc, #60]	; (800074c <HAL_ADC_ConvHalfCpltCallback+0x68>)
 8000710:	4413      	add	r3, r2
 8000712:	2228      	movs	r2, #40	; 0x28
 8000714:	490e      	ldr	r1, [pc, #56]	; (8000750 <HAL_ADC_ConvHalfCpltCallback+0x6c>)
 8000716:	4618      	mov	r0, r3
 8000718:	f007 fe66 	bl	80083e8 <memcpy>
	if(data_part_idx >= number_half_bufSize) {
 800071c:	4b0a      	ldr	r3, [pc, #40]	; (8000748 <HAL_ADC_ConvHalfCpltCallback+0x64>)
 800071e:	881b      	ldrh	r3, [r3, #0]
 8000720:	2b63      	cmp	r3, #99	; 0x63
 8000722:	d90a      	bls.n	800073a <HAL_ADC_ConvHalfCpltCallback+0x56>
		HAL_ADC_Stop_DMA(&hadc1);
 8000724:	480b      	ldr	r0, [pc, #44]	; (8000754 <HAL_ADC_ConvHalfCpltCallback+0x70>)
 8000726:	f000 fc59 	bl	8000fdc <HAL_ADC_Stop_DMA>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_SET);
 800072a:	2201      	movs	r2, #1
 800072c:	2104      	movs	r1, #4
 800072e:	480a      	ldr	r0, [pc, #40]	; (8000758 <HAL_ADC_ConvHalfCpltCallback+0x74>)
 8000730:	f001 fbca 	bl	8001ec8 <HAL_GPIO_WritePin>
		status = status_SENDING_Data;
 8000734:	4b09      	ldr	r3, [pc, #36]	; (800075c <HAL_ADC_ConvHalfCpltCallback+0x78>)
 8000736:	220b      	movs	r2, #11
 8000738:	701a      	strb	r2, [r3, #0]
	}
}
 800073a:	bf00      	nop
 800073c:	3708      	adds	r7, #8
 800073e:	46bd      	mov	sp, r7
 8000740:	bd80      	pop	{r7, pc}
 8000742:	bf00      	nop
 8000744:	2000019c 	.word	0x2000019c
 8000748:	2000019e 	.word	0x2000019e
 800074c:	200004e0 	.word	0x200004e0
 8000750:	200003c4 	.word	0x200003c4
 8000754:	20000414 	.word	0x20000414
 8000758:	40010800 	.word	0x40010800
 800075c:	20000001 	.word	0x20000001

08000760 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000760:	b480      	push	{r7}
 8000762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000764:	bf00      	nop
 8000766:	46bd      	mov	sp, r7
 8000768:	bc80      	pop	{r7}
 800076a:	4770      	bx	lr

0800076c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800076c:	b480      	push	{r7}
 800076e:	b085      	sub	sp, #20
 8000770:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000772:	4b15      	ldr	r3, [pc, #84]	; (80007c8 <HAL_MspInit+0x5c>)
 8000774:	699b      	ldr	r3, [r3, #24]
 8000776:	4a14      	ldr	r2, [pc, #80]	; (80007c8 <HAL_MspInit+0x5c>)
 8000778:	f043 0301 	orr.w	r3, r3, #1
 800077c:	6193      	str	r3, [r2, #24]
 800077e:	4b12      	ldr	r3, [pc, #72]	; (80007c8 <HAL_MspInit+0x5c>)
 8000780:	699b      	ldr	r3, [r3, #24]
 8000782:	f003 0301 	and.w	r3, r3, #1
 8000786:	60bb      	str	r3, [r7, #8]
 8000788:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800078a:	4b0f      	ldr	r3, [pc, #60]	; (80007c8 <HAL_MspInit+0x5c>)
 800078c:	69db      	ldr	r3, [r3, #28]
 800078e:	4a0e      	ldr	r2, [pc, #56]	; (80007c8 <HAL_MspInit+0x5c>)
 8000790:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000794:	61d3      	str	r3, [r2, #28]
 8000796:	4b0c      	ldr	r3, [pc, #48]	; (80007c8 <HAL_MspInit+0x5c>)
 8000798:	69db      	ldr	r3, [r3, #28]
 800079a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800079e:	607b      	str	r3, [r7, #4]
 80007a0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80007a2:	4b0a      	ldr	r3, [pc, #40]	; (80007cc <HAL_MspInit+0x60>)
 80007a4:	685b      	ldr	r3, [r3, #4]
 80007a6:	60fb      	str	r3, [r7, #12]
 80007a8:	68fb      	ldr	r3, [r7, #12]
 80007aa:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80007ae:	60fb      	str	r3, [r7, #12]
 80007b0:	68fb      	ldr	r3, [r7, #12]
 80007b2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80007b6:	60fb      	str	r3, [r7, #12]
 80007b8:	4a04      	ldr	r2, [pc, #16]	; (80007cc <HAL_MspInit+0x60>)
 80007ba:	68fb      	ldr	r3, [r7, #12]
 80007bc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007be:	bf00      	nop
 80007c0:	3714      	adds	r7, #20
 80007c2:	46bd      	mov	sp, r7
 80007c4:	bc80      	pop	{r7}
 80007c6:	4770      	bx	lr
 80007c8:	40021000 	.word	0x40021000
 80007cc:	40010000 	.word	0x40010000

080007d0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b088      	sub	sp, #32
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007d8:	f107 0310 	add.w	r3, r7, #16
 80007dc:	2200      	movs	r2, #0
 80007de:	601a      	str	r2, [r3, #0]
 80007e0:	605a      	str	r2, [r3, #4]
 80007e2:	609a      	str	r2, [r3, #8]
 80007e4:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	4a29      	ldr	r2, [pc, #164]	; (8000890 <HAL_ADC_MspInit+0xc0>)
 80007ec:	4293      	cmp	r3, r2
 80007ee:	d14a      	bne.n	8000886 <HAL_ADC_MspInit+0xb6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80007f0:	4b28      	ldr	r3, [pc, #160]	; (8000894 <HAL_ADC_MspInit+0xc4>)
 80007f2:	699b      	ldr	r3, [r3, #24]
 80007f4:	4a27      	ldr	r2, [pc, #156]	; (8000894 <HAL_ADC_MspInit+0xc4>)
 80007f6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80007fa:	6193      	str	r3, [r2, #24]
 80007fc:	4b25      	ldr	r3, [pc, #148]	; (8000894 <HAL_ADC_MspInit+0xc4>)
 80007fe:	699b      	ldr	r3, [r3, #24]
 8000800:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000804:	60fb      	str	r3, [r7, #12]
 8000806:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000808:	4b22      	ldr	r3, [pc, #136]	; (8000894 <HAL_ADC_MspInit+0xc4>)
 800080a:	699b      	ldr	r3, [r3, #24]
 800080c:	4a21      	ldr	r2, [pc, #132]	; (8000894 <HAL_ADC_MspInit+0xc4>)
 800080e:	f043 0304 	orr.w	r3, r3, #4
 8000812:	6193      	str	r3, [r2, #24]
 8000814:	4b1f      	ldr	r3, [pc, #124]	; (8000894 <HAL_ADC_MspInit+0xc4>)
 8000816:	699b      	ldr	r3, [r3, #24]
 8000818:	f003 0304 	and.w	r3, r3, #4
 800081c:	60bb      	str	r3, [r7, #8]
 800081e:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000820:	2301      	movs	r3, #1
 8000822:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000824:	2303      	movs	r3, #3
 8000826:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000828:	f107 0310 	add.w	r3, r7, #16
 800082c:	4619      	mov	r1, r3
 800082e:	481a      	ldr	r0, [pc, #104]	; (8000898 <HAL_ADC_MspInit+0xc8>)
 8000830:	f001 f9f0 	bl	8001c14 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000834:	4b19      	ldr	r3, [pc, #100]	; (800089c <HAL_ADC_MspInit+0xcc>)
 8000836:	4a1a      	ldr	r2, [pc, #104]	; (80008a0 <HAL_ADC_MspInit+0xd0>)
 8000838:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800083a:	4b18      	ldr	r3, [pc, #96]	; (800089c <HAL_ADC_MspInit+0xcc>)
 800083c:	2200      	movs	r2, #0
 800083e:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000840:	4b16      	ldr	r3, [pc, #88]	; (800089c <HAL_ADC_MspInit+0xcc>)
 8000842:	2200      	movs	r2, #0
 8000844:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000846:	4b15      	ldr	r3, [pc, #84]	; (800089c <HAL_ADC_MspInit+0xcc>)
 8000848:	2280      	movs	r2, #128	; 0x80
 800084a:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800084c:	4b13      	ldr	r3, [pc, #76]	; (800089c <HAL_ADC_MspInit+0xcc>)
 800084e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000852:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000854:	4b11      	ldr	r3, [pc, #68]	; (800089c <HAL_ADC_MspInit+0xcc>)
 8000856:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800085a:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800085c:	4b0f      	ldr	r3, [pc, #60]	; (800089c <HAL_ADC_MspInit+0xcc>)
 800085e:	2220      	movs	r2, #32
 8000860:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8000862:	4b0e      	ldr	r3, [pc, #56]	; (800089c <HAL_ADC_MspInit+0xcc>)
 8000864:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8000868:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800086a:	480c      	ldr	r0, [pc, #48]	; (800089c <HAL_ADC_MspInit+0xcc>)
 800086c:	f000 ffaa 	bl	80017c4 <HAL_DMA_Init>
 8000870:	4603      	mov	r3, r0
 8000872:	2b00      	cmp	r3, #0
 8000874:	d001      	beq.n	800087a <HAL_ADC_MspInit+0xaa>
    {
      Error_Handler();
 8000876:	f7ff ff73 	bl	8000760 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	4a07      	ldr	r2, [pc, #28]	; (800089c <HAL_ADC_MspInit+0xcc>)
 800087e:	621a      	str	r2, [r3, #32]
 8000880:	4a06      	ldr	r2, [pc, #24]	; (800089c <HAL_ADC_MspInit+0xcc>)
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000886:	bf00      	nop
 8000888:	3720      	adds	r7, #32
 800088a:	46bd      	mov	sp, r7
 800088c:	bd80      	pop	{r7, pc}
 800088e:	bf00      	nop
 8000890:	40012400 	.word	0x40012400
 8000894:	40021000 	.word	0x40021000
 8000898:	40010800 	.word	0x40010800
 800089c:	20000444 	.word	0x20000444
 80008a0:	40020008 	.word	0x40020008

080008a4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b08a      	sub	sp, #40	; 0x28
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008ac:	f107 0314 	add.w	r3, r7, #20
 80008b0:	2200      	movs	r2, #0
 80008b2:	601a      	str	r2, [r3, #0]
 80008b4:	605a      	str	r2, [r3, #4]
 80008b6:	609a      	str	r2, [r3, #8]
 80008b8:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	681b      	ldr	r3, [r3, #0]
 80008be:	4a22      	ldr	r2, [pc, #136]	; (8000948 <HAL_SPI_MspInit+0xa4>)
 80008c0:	4293      	cmp	r3, r2
 80008c2:	d13d      	bne.n	8000940 <HAL_SPI_MspInit+0x9c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80008c4:	4b21      	ldr	r3, [pc, #132]	; (800094c <HAL_SPI_MspInit+0xa8>)
 80008c6:	699b      	ldr	r3, [r3, #24]
 80008c8:	4a20      	ldr	r2, [pc, #128]	; (800094c <HAL_SPI_MspInit+0xa8>)
 80008ca:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80008ce:	6193      	str	r3, [r2, #24]
 80008d0:	4b1e      	ldr	r3, [pc, #120]	; (800094c <HAL_SPI_MspInit+0xa8>)
 80008d2:	699b      	ldr	r3, [r3, #24]
 80008d4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80008d8:	613b      	str	r3, [r7, #16]
 80008da:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80008dc:	4b1b      	ldr	r3, [pc, #108]	; (800094c <HAL_SPI_MspInit+0xa8>)
 80008de:	699b      	ldr	r3, [r3, #24]
 80008e0:	4a1a      	ldr	r2, [pc, #104]	; (800094c <HAL_SPI_MspInit+0xa8>)
 80008e2:	f043 0308 	orr.w	r3, r3, #8
 80008e6:	6193      	str	r3, [r2, #24]
 80008e8:	4b18      	ldr	r3, [pc, #96]	; (800094c <HAL_SPI_MspInit+0xa8>)
 80008ea:	699b      	ldr	r3, [r3, #24]
 80008ec:	f003 0308 	and.w	r3, r3, #8
 80008f0:	60fb      	str	r3, [r7, #12]
 80008f2:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 80008f4:	2328      	movs	r3, #40	; 0x28
 80008f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008f8:	2302      	movs	r3, #2
 80008fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80008fc:	2303      	movs	r3, #3
 80008fe:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000900:	f107 0314 	add.w	r3, r7, #20
 8000904:	4619      	mov	r1, r3
 8000906:	4812      	ldr	r0, [pc, #72]	; (8000950 <HAL_SPI_MspInit+0xac>)
 8000908:	f001 f984 	bl	8001c14 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800090c:	2310      	movs	r3, #16
 800090e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000910:	2300      	movs	r3, #0
 8000912:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000914:	2300      	movs	r3, #0
 8000916:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000918:	f107 0314 	add.w	r3, r7, #20
 800091c:	4619      	mov	r1, r3
 800091e:	480c      	ldr	r0, [pc, #48]	; (8000950 <HAL_SPI_MspInit+0xac>)
 8000920:	f001 f978 	bl	8001c14 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_SPI1_ENABLE();
 8000924:	4b0b      	ldr	r3, [pc, #44]	; (8000954 <HAL_SPI_MspInit+0xb0>)
 8000926:	685b      	ldr	r3, [r3, #4]
 8000928:	627b      	str	r3, [r7, #36]	; 0x24
 800092a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800092c:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8000930:	627b      	str	r3, [r7, #36]	; 0x24
 8000932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000934:	f043 0301 	orr.w	r3, r3, #1
 8000938:	627b      	str	r3, [r7, #36]	; 0x24
 800093a:	4a06      	ldr	r2, [pc, #24]	; (8000954 <HAL_SPI_MspInit+0xb0>)
 800093c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800093e:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000940:	bf00      	nop
 8000942:	3728      	adds	r7, #40	; 0x28
 8000944:	46bd      	mov	sp, r7
 8000946:	bd80      	pop	{r7, pc}
 8000948:	40013000 	.word	0x40013000
 800094c:	40021000 	.word	0x40021000
 8000950:	40010c00 	.word	0x40010c00
 8000954:	40010000 	.word	0x40010000

08000958 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000958:	b480      	push	{r7}
 800095a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800095c:	bf00      	nop
 800095e:	46bd      	mov	sp, r7
 8000960:	bc80      	pop	{r7}
 8000962:	4770      	bx	lr

08000964 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000964:	b480      	push	{r7}
 8000966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000968:	e7fe      	b.n	8000968 <HardFault_Handler+0x4>

0800096a <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800096a:	b480      	push	{r7}
 800096c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800096e:	e7fe      	b.n	800096e <MemManage_Handler+0x4>

08000970 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000970:	b480      	push	{r7}
 8000972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000974:	e7fe      	b.n	8000974 <BusFault_Handler+0x4>

08000976 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000976:	b480      	push	{r7}
 8000978:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800097a:	e7fe      	b.n	800097a <UsageFault_Handler+0x4>

0800097c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800097c:	b480      	push	{r7}
 800097e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000980:	bf00      	nop
 8000982:	46bd      	mov	sp, r7
 8000984:	bc80      	pop	{r7}
 8000986:	4770      	bx	lr

08000988 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000988:	b480      	push	{r7}
 800098a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800098c:	bf00      	nop
 800098e:	46bd      	mov	sp, r7
 8000990:	bc80      	pop	{r7}
 8000992:	4770      	bx	lr

08000994 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000994:	b480      	push	{r7}
 8000996:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000998:	bf00      	nop
 800099a:	46bd      	mov	sp, r7
 800099c:	bc80      	pop	{r7}
 800099e:	4770      	bx	lr

080009a0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009a4:	f000 f89a 	bl	8000adc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009a8:	bf00      	nop
 80009aa:	bd80      	pop	{r7, pc}

080009ac <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 80009b0:	2002      	movs	r0, #2
 80009b2:	f001 faa1 	bl	8001ef8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80009b6:	bf00      	nop
 80009b8:	bd80      	pop	{r7, pc}
	...

080009bc <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80009c0:	4802      	ldr	r0, [pc, #8]	; (80009cc <DMA1_Channel1_IRQHandler+0x10>)
 80009c2:	f000 fff3 	bl	80019ac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80009c6:	bf00      	nop
 80009c8:	bd80      	pop	{r7, pc}
 80009ca:	bf00      	nop
 80009cc:	20000444 	.word	0x20000444

080009d0 <USB_HP_CAN1_TX_IRQHandler>:

/**
  * @brief This function handles USB high priority or CAN TX interrupts.
  */
void USB_HP_CAN1_TX_IRQHandler(void)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 0 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80009d4:	4802      	ldr	r0, [pc, #8]	; (80009e0 <USB_HP_CAN1_TX_IRQHandler+0x10>)
 80009d6:	f001 fbd8 	bl	800218a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 1 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 1 */
}
 80009da:	bf00      	nop
 80009dc:	bd80      	pop	{r7, pc}
 80009de:	bf00      	nop
 80009e0:	20001868 	.word	0x20001868

080009e4 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80009e8:	4802      	ldr	r0, [pc, #8]	; (80009f4 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 80009ea:	f001 fbce 	bl	800218a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 80009ee:	bf00      	nop
 80009f0:	bd80      	pop	{r7, pc}
 80009f2:	bf00      	nop
 80009f4:	20001868 	.word	0x20001868

080009f8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80009f8:	b480      	push	{r7}
 80009fa:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009fc:	bf00      	nop
 80009fe:	46bd      	mov	sp, r7
 8000a00:	bc80      	pop	{r7}
 8000a02:	4770      	bx	lr

08000a04 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000a04:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000a06:	e003      	b.n	8000a10 <LoopCopyDataInit>

08000a08 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000a08:	4b0b      	ldr	r3, [pc, #44]	; (8000a38 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000a0a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000a0c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000a0e:	3104      	adds	r1, #4

08000a10 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000a10:	480a      	ldr	r0, [pc, #40]	; (8000a3c <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000a12:	4b0b      	ldr	r3, [pc, #44]	; (8000a40 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000a14:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000a16:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000a18:	d3f6      	bcc.n	8000a08 <CopyDataInit>
  ldr r2, =_sbss
 8000a1a:	4a0a      	ldr	r2, [pc, #40]	; (8000a44 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000a1c:	e002      	b.n	8000a24 <LoopFillZerobss>

08000a1e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000a1e:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000a20:	f842 3b04 	str.w	r3, [r2], #4

08000a24 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000a24:	4b08      	ldr	r3, [pc, #32]	; (8000a48 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000a26:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000a28:	d3f9      	bcc.n	8000a1e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000a2a:	f7ff ffe5 	bl	80009f8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a2e:	f007 fcb7 	bl	80083a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000a32:	f7ff fb8b 	bl	800014c <main>
  bx lr
 8000a36:	4770      	bx	lr
  ldr r3, =_sidata
 8000a38:	080084b8 	.word	0x080084b8
  ldr r0, =_sdata
 8000a3c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000a40:	20000180 	.word	0x20000180
  ldr r2, =_sbss
 8000a44:	20000180 	.word	0x20000180
  ldr r3, = _ebss
 8000a48:	20001b54 	.word	0x20001b54

08000a4c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a4c:	e7fe      	b.n	8000a4c <ADC1_2_IRQHandler>
	...

08000a50 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a54:	4b08      	ldr	r3, [pc, #32]	; (8000a78 <HAL_Init+0x28>)
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	4a07      	ldr	r2, [pc, #28]	; (8000a78 <HAL_Init+0x28>)
 8000a5a:	f043 0310 	orr.w	r3, r3, #16
 8000a5e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a60:	2003      	movs	r0, #3
 8000a62:	f000 fe6d 	bl	8001740 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a66:	2000      	movs	r0, #0
 8000a68:	f000 f808 	bl	8000a7c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a6c:	f7ff fe7e 	bl	800076c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a70:	2300      	movs	r3, #0
}
 8000a72:	4618      	mov	r0, r3
 8000a74:	bd80      	pop	{r7, pc}
 8000a76:	bf00      	nop
 8000a78:	40022000 	.word	0x40022000

08000a7c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b082      	sub	sp, #8
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a84:	4b12      	ldr	r3, [pc, #72]	; (8000ad0 <HAL_InitTick+0x54>)
 8000a86:	681a      	ldr	r2, [r3, #0]
 8000a88:	4b12      	ldr	r3, [pc, #72]	; (8000ad4 <HAL_InitTick+0x58>)
 8000a8a:	781b      	ldrb	r3, [r3, #0]
 8000a8c:	4619      	mov	r1, r3
 8000a8e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a92:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a96:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	f000 fe85 	bl	80017aa <HAL_SYSTICK_Config>
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d001      	beq.n	8000aaa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000aa6:	2301      	movs	r3, #1
 8000aa8:	e00e      	b.n	8000ac8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	2b0f      	cmp	r3, #15
 8000aae:	d80a      	bhi.n	8000ac6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	6879      	ldr	r1, [r7, #4]
 8000ab4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ab8:	f000 fe4d 	bl	8001756 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000abc:	4a06      	ldr	r2, [pc, #24]	; (8000ad8 <HAL_InitTick+0x5c>)
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	e000      	b.n	8000ac8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ac6:	2301      	movs	r3, #1
}
 8000ac8:	4618      	mov	r0, r3
 8000aca:	3708      	adds	r7, #8
 8000acc:	46bd      	mov	sp, r7
 8000ace:	bd80      	pop	{r7, pc}
 8000ad0:	20000004 	.word	0x20000004
 8000ad4:	2000000c 	.word	0x2000000c
 8000ad8:	20000008 	.word	0x20000008

08000adc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000adc:	b480      	push	{r7}
 8000ade:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ae0:	4b05      	ldr	r3, [pc, #20]	; (8000af8 <HAL_IncTick+0x1c>)
 8000ae2:	781b      	ldrb	r3, [r3, #0]
 8000ae4:	461a      	mov	r2, r3
 8000ae6:	4b05      	ldr	r3, [pc, #20]	; (8000afc <HAL_IncTick+0x20>)
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	4413      	add	r3, r2
 8000aec:	4a03      	ldr	r2, [pc, #12]	; (8000afc <HAL_IncTick+0x20>)
 8000aee:	6013      	str	r3, [r2, #0]
}
 8000af0:	bf00      	nop
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bc80      	pop	{r7}
 8000af6:	4770      	bx	lr
 8000af8:	2000000c 	.word	0x2000000c
 8000afc:	20001480 	.word	0x20001480

08000b00 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b00:	b480      	push	{r7}
 8000b02:	af00      	add	r7, sp, #0
  return uwTick;
 8000b04:	4b02      	ldr	r3, [pc, #8]	; (8000b10 <HAL_GetTick+0x10>)
 8000b06:	681b      	ldr	r3, [r3, #0]
}
 8000b08:	4618      	mov	r0, r3
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bc80      	pop	{r7}
 8000b0e:	4770      	bx	lr
 8000b10:	20001480 	.word	0x20001480

08000b14 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b086      	sub	sp, #24
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000b20:	2300      	movs	r3, #0
 8000b22:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000b24:	2300      	movs	r3, #0
 8000b26:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d101      	bne.n	8000b36 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000b32:	2301      	movs	r3, #1
 8000b34:	e0be      	b.n	8000cb4 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	689b      	ldr	r3, [r3, #8]
 8000b3a:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d109      	bne.n	8000b58 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	2200      	movs	r2, #0
 8000b48:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000b52:	6878      	ldr	r0, [r7, #4]
 8000b54:	f7ff fe3c 	bl	80007d0 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000b58:	6878      	ldr	r0, [r7, #4]
 8000b5a:	f000 fbe9 	bl	8001330 <ADC_ConversionStop_Disable>
 8000b5e:	4603      	mov	r3, r0
 8000b60:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b66:	f003 0310 	and.w	r3, r3, #16
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	f040 8099 	bne.w	8000ca2 <HAL_ADC_Init+0x18e>
 8000b70:	7dfb      	ldrb	r3, [r7, #23]
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	f040 8095 	bne.w	8000ca2 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b7c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000b80:	f023 0302 	bic.w	r3, r3, #2
 8000b84:	f043 0202 	orr.w	r2, r3, #2
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000b94:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	7b1b      	ldrb	r3, [r3, #12]
 8000b9a:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000b9c:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000b9e:	68ba      	ldr	r2, [r7, #8]
 8000ba0:	4313      	orrs	r3, r2
 8000ba2:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	689b      	ldr	r3, [r3, #8]
 8000ba8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000bac:	d003      	beq.n	8000bb6 <HAL_ADC_Init+0xa2>
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	689b      	ldr	r3, [r3, #8]
 8000bb2:	2b01      	cmp	r3, #1
 8000bb4:	d102      	bne.n	8000bbc <HAL_ADC_Init+0xa8>
 8000bb6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000bba:	e000      	b.n	8000bbe <HAL_ADC_Init+0xaa>
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	693a      	ldr	r2, [r7, #16]
 8000bc0:	4313      	orrs	r3, r2
 8000bc2:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	7d1b      	ldrb	r3, [r3, #20]
 8000bc8:	2b01      	cmp	r3, #1
 8000bca:	d119      	bne.n	8000c00 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	7b1b      	ldrb	r3, [r3, #12]
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d109      	bne.n	8000be8 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	699b      	ldr	r3, [r3, #24]
 8000bd8:	3b01      	subs	r3, #1
 8000bda:	035a      	lsls	r2, r3, #13
 8000bdc:	693b      	ldr	r3, [r7, #16]
 8000bde:	4313      	orrs	r3, r2
 8000be0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000be4:	613b      	str	r3, [r7, #16]
 8000be6:	e00b      	b.n	8000c00 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000bec:	f043 0220 	orr.w	r2, r3, #32
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000bf8:	f043 0201 	orr.w	r2, r3, #1
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	685b      	ldr	r3, [r3, #4]
 8000c06:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	693a      	ldr	r2, [r7, #16]
 8000c10:	430a      	orrs	r2, r1
 8000c12:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	689a      	ldr	r2, [r3, #8]
 8000c1a:	4b28      	ldr	r3, [pc, #160]	; (8000cbc <HAL_ADC_Init+0x1a8>)
 8000c1c:	4013      	ands	r3, r2
 8000c1e:	687a      	ldr	r2, [r7, #4]
 8000c20:	6812      	ldr	r2, [r2, #0]
 8000c22:	68b9      	ldr	r1, [r7, #8]
 8000c24:	430b      	orrs	r3, r1
 8000c26:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	689b      	ldr	r3, [r3, #8]
 8000c2c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000c30:	d003      	beq.n	8000c3a <HAL_ADC_Init+0x126>
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	689b      	ldr	r3, [r3, #8]
 8000c36:	2b01      	cmp	r3, #1
 8000c38:	d104      	bne.n	8000c44 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	691b      	ldr	r3, [r3, #16]
 8000c3e:	3b01      	subs	r3, #1
 8000c40:	051b      	lsls	r3, r3, #20
 8000c42:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c4a:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	68fa      	ldr	r2, [r7, #12]
 8000c54:	430a      	orrs	r2, r1
 8000c56:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	689a      	ldr	r2, [r3, #8]
 8000c5e:	4b18      	ldr	r3, [pc, #96]	; (8000cc0 <HAL_ADC_Init+0x1ac>)
 8000c60:	4013      	ands	r3, r2
 8000c62:	68ba      	ldr	r2, [r7, #8]
 8000c64:	429a      	cmp	r2, r3
 8000c66:	d10b      	bne.n	8000c80 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c72:	f023 0303 	bic.w	r3, r3, #3
 8000c76:	f043 0201 	orr.w	r2, r3, #1
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000c7e:	e018      	b.n	8000cb2 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c84:	f023 0312 	bic.w	r3, r3, #18
 8000c88:	f043 0210 	orr.w	r2, r3, #16
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c94:	f043 0201 	orr.w	r2, r3, #1
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000c9c:	2301      	movs	r3, #1
 8000c9e:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000ca0:	e007      	b.n	8000cb2 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ca6:	f043 0210 	orr.w	r2, r3, #16
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8000cae:	2301      	movs	r3, #1
 8000cb0:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000cb2:	7dfb      	ldrb	r3, [r7, #23]
}
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	3718      	adds	r7, #24
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	bd80      	pop	{r7, pc}
 8000cbc:	ffe1f7fd 	.word	0xffe1f7fd
 8000cc0:	ff1f0efe 	.word	0xff1f0efe

08000cc4 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b084      	sub	sp, #16
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000cd6:	2b01      	cmp	r3, #1
 8000cd8:	d101      	bne.n	8000cde <HAL_ADC_Start+0x1a>
 8000cda:	2302      	movs	r3, #2
 8000cdc:	e098      	b.n	8000e10 <HAL_ADC_Start+0x14c>
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	2201      	movs	r2, #1
 8000ce2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8000ce6:	6878      	ldr	r0, [r7, #4]
 8000ce8:	f000 fad0 	bl	800128c <ADC_Enable>
 8000cec:	4603      	mov	r3, r0
 8000cee:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8000cf0:	7bfb      	ldrb	r3, [r7, #15]
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	f040 8087 	bne.w	8000e06 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000cfc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000d00:	f023 0301 	bic.w	r3, r3, #1
 8000d04:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	4a41      	ldr	r2, [pc, #260]	; (8000e18 <HAL_ADC_Start+0x154>)
 8000d12:	4293      	cmp	r3, r2
 8000d14:	d105      	bne.n	8000d22 <HAL_ADC_Start+0x5e>
 8000d16:	4b41      	ldr	r3, [pc, #260]	; (8000e1c <HAL_ADC_Start+0x158>)
 8000d18:	685b      	ldr	r3, [r3, #4]
 8000d1a:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d115      	bne.n	8000d4e <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d26:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	685b      	ldr	r3, [r3, #4]
 8000d34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d026      	beq.n	8000d8a <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d40:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000d44:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000d4c:	e01d      	b.n	8000d8a <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d52:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	4a2f      	ldr	r2, [pc, #188]	; (8000e1c <HAL_ADC_Start+0x158>)
 8000d60:	4293      	cmp	r3, r2
 8000d62:	d004      	beq.n	8000d6e <HAL_ADC_Start+0xaa>
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	4a2b      	ldr	r2, [pc, #172]	; (8000e18 <HAL_ADC_Start+0x154>)
 8000d6a:	4293      	cmp	r3, r2
 8000d6c:	d10d      	bne.n	8000d8a <HAL_ADC_Start+0xc6>
 8000d6e:	4b2b      	ldr	r3, [pc, #172]	; (8000e1c <HAL_ADC_Start+0x158>)
 8000d70:	685b      	ldr	r3, [r3, #4]
 8000d72:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d007      	beq.n	8000d8a <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d7e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000d82:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d8e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d006      	beq.n	8000da4 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d9a:	f023 0206 	bic.w	r2, r3, #6
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	62da      	str	r2, [r3, #44]	; 0x2c
 8000da2:	e002      	b.n	8000daa <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	2200      	movs	r2, #0
 8000da8:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	2200      	movs	r2, #0
 8000dae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	f06f 0202 	mvn.w	r2, #2
 8000dba:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	689b      	ldr	r3, [r3, #8]
 8000dc2:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8000dc6:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000dca:	d113      	bne.n	8000df4 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000dd0:	4a11      	ldr	r2, [pc, #68]	; (8000e18 <HAL_ADC_Start+0x154>)
 8000dd2:	4293      	cmp	r3, r2
 8000dd4:	d105      	bne.n	8000de2 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8000dd6:	4b11      	ldr	r3, [pc, #68]	; (8000e1c <HAL_ADC_Start+0x158>)
 8000dd8:	685b      	ldr	r3, [r3, #4]
 8000dda:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d108      	bne.n	8000df4 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	689a      	ldr	r2, [r3, #8]
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8000df0:	609a      	str	r2, [r3, #8]
 8000df2:	e00c      	b.n	8000e0e <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	689a      	ldr	r2, [r3, #8]
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8000e02:	609a      	str	r2, [r3, #8]
 8000e04:	e003      	b.n	8000e0e <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	2200      	movs	r2, #0
 8000e0a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8000e0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e10:	4618      	mov	r0, r3
 8000e12:	3710      	adds	r7, #16
 8000e14:	46bd      	mov	sp, r7
 8000e16:	bd80      	pop	{r7, pc}
 8000e18:	40012800 	.word	0x40012800
 8000e1c:	40012400 	.word	0x40012400

08000e20 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b086      	sub	sp, #24
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	60f8      	str	r0, [r7, #12]
 8000e28:	60b9      	str	r1, [r7, #8]
 8000e2a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8000e30:	68fb      	ldr	r3, [r7, #12]
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	4a64      	ldr	r2, [pc, #400]	; (8000fc8 <HAL_ADC_Start_DMA+0x1a8>)
 8000e36:	4293      	cmp	r3, r2
 8000e38:	d004      	beq.n	8000e44 <HAL_ADC_Start_DMA+0x24>
 8000e3a:	68fb      	ldr	r3, [r7, #12]
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	4a63      	ldr	r2, [pc, #396]	; (8000fcc <HAL_ADC_Start_DMA+0x1ac>)
 8000e40:	4293      	cmp	r3, r2
 8000e42:	d106      	bne.n	8000e52 <HAL_ADC_Start_DMA+0x32>
 8000e44:	4b60      	ldr	r3, [pc, #384]	; (8000fc8 <HAL_ADC_Start_DMA+0x1a8>)
 8000e46:	685b      	ldr	r3, [r3, #4]
 8000e48:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	f040 80b3 	bne.w	8000fb8 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8000e52:	68fb      	ldr	r3, [r7, #12]
 8000e54:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000e58:	2b01      	cmp	r3, #1
 8000e5a:	d101      	bne.n	8000e60 <HAL_ADC_Start_DMA+0x40>
 8000e5c:	2302      	movs	r3, #2
 8000e5e:	e0ae      	b.n	8000fbe <HAL_ADC_Start_DMA+0x19e>
 8000e60:	68fb      	ldr	r3, [r7, #12]
 8000e62:	2201      	movs	r2, #1
 8000e64:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8000e68:	68f8      	ldr	r0, [r7, #12]
 8000e6a:	f000 fa0f 	bl	800128c <ADC_Enable>
 8000e6e:	4603      	mov	r3, r0
 8000e70:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8000e72:	7dfb      	ldrb	r3, [r7, #23]
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	f040 809a 	bne.w	8000fae <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8000e7a:	68fb      	ldr	r3, [r7, #12]
 8000e7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e7e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8000e82:	f023 0301 	bic.w	r3, r3, #1
 8000e86:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000e8a:	68fb      	ldr	r3, [r7, #12]
 8000e8c:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000e8e:	68fb      	ldr	r3, [r7, #12]
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	4a4e      	ldr	r2, [pc, #312]	; (8000fcc <HAL_ADC_Start_DMA+0x1ac>)
 8000e94:	4293      	cmp	r3, r2
 8000e96:	d105      	bne.n	8000ea4 <HAL_ADC_Start_DMA+0x84>
 8000e98:	4b4b      	ldr	r3, [pc, #300]	; (8000fc8 <HAL_ADC_Start_DMA+0x1a8>)
 8000e9a:	685b      	ldr	r3, [r3, #4]
 8000e9c:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d115      	bne.n	8000ed0 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000ea4:	68fb      	ldr	r3, [r7, #12]
 8000ea6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ea8:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8000eac:	68fb      	ldr	r3, [r7, #12]
 8000eae:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000eb0:	68fb      	ldr	r3, [r7, #12]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	685b      	ldr	r3, [r3, #4]
 8000eb6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d026      	beq.n	8000f0c <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000ebe:	68fb      	ldr	r3, [r7, #12]
 8000ec0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ec2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000ec6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000eca:	68fb      	ldr	r3, [r7, #12]
 8000ecc:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000ece:	e01d      	b.n	8000f0c <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000ed0:	68fb      	ldr	r3, [r7, #12]
 8000ed2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ed4:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8000ed8:	68fb      	ldr	r3, [r7, #12]
 8000eda:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8000edc:	68fb      	ldr	r3, [r7, #12]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	4a39      	ldr	r2, [pc, #228]	; (8000fc8 <HAL_ADC_Start_DMA+0x1a8>)
 8000ee2:	4293      	cmp	r3, r2
 8000ee4:	d004      	beq.n	8000ef0 <HAL_ADC_Start_DMA+0xd0>
 8000ee6:	68fb      	ldr	r3, [r7, #12]
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	4a38      	ldr	r2, [pc, #224]	; (8000fcc <HAL_ADC_Start_DMA+0x1ac>)
 8000eec:	4293      	cmp	r3, r2
 8000eee:	d10d      	bne.n	8000f0c <HAL_ADC_Start_DMA+0xec>
 8000ef0:	4b35      	ldr	r3, [pc, #212]	; (8000fc8 <HAL_ADC_Start_DMA+0x1a8>)
 8000ef2:	685b      	ldr	r3, [r3, #4]
 8000ef4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d007      	beq.n	8000f0c <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f00:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000f04:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000f08:	68fb      	ldr	r3, [r7, #12]
 8000f0a:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f10:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d006      	beq.n	8000f26 <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000f18:	68fb      	ldr	r3, [r7, #12]
 8000f1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f1c:	f023 0206 	bic.w	r2, r3, #6
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	62da      	str	r2, [r3, #44]	; 0x2c
 8000f24:	e002      	b.n	8000f2c <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8000f26:	68fb      	ldr	r3, [r7, #12]
 8000f28:	2200      	movs	r2, #0
 8000f2a:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8000f2c:	68fb      	ldr	r3, [r7, #12]
 8000f2e:	2200      	movs	r2, #0
 8000f30:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8000f34:	68fb      	ldr	r3, [r7, #12]
 8000f36:	6a1b      	ldr	r3, [r3, #32]
 8000f38:	4a25      	ldr	r2, [pc, #148]	; (8000fd0 <HAL_ADC_Start_DMA+0x1b0>)
 8000f3a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8000f3c:	68fb      	ldr	r3, [r7, #12]
 8000f3e:	6a1b      	ldr	r3, [r3, #32]
 8000f40:	4a24      	ldr	r2, [pc, #144]	; (8000fd4 <HAL_ADC_Start_DMA+0x1b4>)
 8000f42:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8000f44:	68fb      	ldr	r3, [r7, #12]
 8000f46:	6a1b      	ldr	r3, [r3, #32]
 8000f48:	4a23      	ldr	r2, [pc, #140]	; (8000fd8 <HAL_ADC_Start_DMA+0x1b8>)
 8000f4a:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8000f4c:	68fb      	ldr	r3, [r7, #12]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	f06f 0202 	mvn.w	r2, #2
 8000f54:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8000f56:	68fb      	ldr	r3, [r7, #12]
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	689a      	ldr	r2, [r3, #8]
 8000f5c:	68fb      	ldr	r3, [r7, #12]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000f64:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8000f66:	68fb      	ldr	r3, [r7, #12]
 8000f68:	6a18      	ldr	r0, [r3, #32]
 8000f6a:	68fb      	ldr	r3, [r7, #12]
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	334c      	adds	r3, #76	; 0x4c
 8000f70:	4619      	mov	r1, r3
 8000f72:	68ba      	ldr	r2, [r7, #8]
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	f000 fc7f 	bl	8001878 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8000f7a:	68fb      	ldr	r3, [r7, #12]
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	689b      	ldr	r3, [r3, #8]
 8000f80:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8000f84:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000f88:	d108      	bne.n	8000f9c <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8000f8a:	68fb      	ldr	r3, [r7, #12]
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	689a      	ldr	r2, [r3, #8]
 8000f90:	68fb      	ldr	r3, [r7, #12]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8000f98:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8000f9a:	e00f      	b.n	8000fbc <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8000f9c:	68fb      	ldr	r3, [r7, #12]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	689a      	ldr	r2, [r3, #8]
 8000fa2:	68fb      	ldr	r3, [r7, #12]
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8000faa:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8000fac:	e006      	b.n	8000fbc <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8000fae:	68fb      	ldr	r3, [r7, #12]
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 8000fb6:	e001      	b.n	8000fbc <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000fb8:	2301      	movs	r3, #1
 8000fba:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000fbc:	7dfb      	ldrb	r3, [r7, #23]
}
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	3718      	adds	r7, #24
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}
 8000fc6:	bf00      	nop
 8000fc8:	40012400 	.word	0x40012400
 8000fcc:	40012800 	.word	0x40012800
 8000fd0:	080013a5 	.word	0x080013a5
 8000fd4:	08001421 	.word	0x08001421
 8000fd8:	0800143d 	.word	0x0800143d

08000fdc <HAL_ADC_Stop_DMA>:
  *         on devices) have DMA capability.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b084      	sub	sp, #16
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000fee:	2b01      	cmp	r3, #1
 8000ff0:	d101      	bne.n	8000ff6 <HAL_ADC_Stop_DMA+0x1a>
 8000ff2:	2302      	movs	r3, #2
 8000ff4:	e039      	b.n	800106a <HAL_ADC_Stop_DMA+0x8e>
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	2201      	movs	r2, #1
 8000ffa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000ffe:	6878      	ldr	r0, [r7, #4]
 8001000:	f000 f996 	bl	8001330 <ADC_ConversionStop_Disable>
 8001004:	4603      	mov	r3, r0
 8001006:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8001008:	7bfb      	ldrb	r3, [r7, #15]
 800100a:	2b00      	cmp	r3, #0
 800100c:	d128      	bne.n	8001060 <HAL_ADC_Stop_DMA+0x84>
  {
    /* Disable ADC DMA mode */
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	689a      	ldr	r2, [r3, #8]
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800101c:	609a      	str	r2, [r3, #8]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	6a1b      	ldr	r3, [r3, #32]
 8001022:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001026:	2b02      	cmp	r3, #2
 8001028:	d11a      	bne.n	8001060 <HAL_ADC_Stop_DMA+0x84>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	6a1b      	ldr	r3, [r3, #32]
 800102e:	4618      	mov	r0, r3
 8001030:	f000 fc81 	bl	8001936 <HAL_DMA_Abort>
 8001034:	4603      	mov	r3, r0
 8001036:	73fb      	strb	r3, [r7, #15]
      
      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status == HAL_OK)
 8001038:	7bfb      	ldrb	r3, [r7, #15]
 800103a:	2b00      	cmp	r3, #0
 800103c:	d10a      	bne.n	8001054 <HAL_ADC_Stop_DMA+0x78>
      {
        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001042:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001046:	f023 0301 	bic.w	r3, r3, #1
 800104a:	f043 0201 	orr.w	r2, r3, #1
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	629a      	str	r2, [r3, #40]	; 0x28
 8001052:	e005      	b.n	8001060 <HAL_ADC_Stop_DMA+0x84>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001058:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	2200      	movs	r2, #0
 8001064:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
  /* Return function status */
  return tmp_hal_status;
 8001068:	7bfb      	ldrb	r3, [r7, #15]
}
 800106a:	4618      	mov	r0, r3
 800106c:	3710      	adds	r7, #16
 800106e:	46bd      	mov	sp, r7
 8001070:	bd80      	pop	{r7, pc}

08001072 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001072:	b480      	push	{r7}
 8001074:	b083      	sub	sp, #12
 8001076:	af00      	add	r7, sp, #0
 8001078:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001080:	4618      	mov	r0, r3
 8001082:	370c      	adds	r7, #12
 8001084:	46bd      	mov	sp, r7
 8001086:	bc80      	pop	{r7}
 8001088:	4770      	bx	lr

0800108a <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800108a:	b480      	push	{r7}
 800108c:	b083      	sub	sp, #12
 800108e:	af00      	add	r7, sp, #0
 8001090:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001092:	bf00      	nop
 8001094:	370c      	adds	r7, #12
 8001096:	46bd      	mov	sp, r7
 8001098:	bc80      	pop	{r7}
 800109a:	4770      	bx	lr

0800109c <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 800109c:	b480      	push	{r7}
 800109e:	b085      	sub	sp, #20
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
 80010a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80010a6:	2300      	movs	r3, #0
 80010a8:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80010aa:	2300      	movs	r3, #0
 80010ac:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80010b4:	2b01      	cmp	r3, #1
 80010b6:	d101      	bne.n	80010bc <HAL_ADC_ConfigChannel+0x20>
 80010b8:	2302      	movs	r3, #2
 80010ba:	e0dc      	b.n	8001276 <HAL_ADC_ConfigChannel+0x1da>
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	2201      	movs	r2, #1
 80010c0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80010c4:	683b      	ldr	r3, [r7, #0]
 80010c6:	685b      	ldr	r3, [r3, #4]
 80010c8:	2b06      	cmp	r3, #6
 80010ca:	d81c      	bhi.n	8001106 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80010d2:	683b      	ldr	r3, [r7, #0]
 80010d4:	685a      	ldr	r2, [r3, #4]
 80010d6:	4613      	mov	r3, r2
 80010d8:	009b      	lsls	r3, r3, #2
 80010da:	4413      	add	r3, r2
 80010dc:	3b05      	subs	r3, #5
 80010de:	221f      	movs	r2, #31
 80010e0:	fa02 f303 	lsl.w	r3, r2, r3
 80010e4:	43db      	mvns	r3, r3
 80010e6:	4019      	ands	r1, r3
 80010e8:	683b      	ldr	r3, [r7, #0]
 80010ea:	6818      	ldr	r0, [r3, #0]
 80010ec:	683b      	ldr	r3, [r7, #0]
 80010ee:	685a      	ldr	r2, [r3, #4]
 80010f0:	4613      	mov	r3, r2
 80010f2:	009b      	lsls	r3, r3, #2
 80010f4:	4413      	add	r3, r2
 80010f6:	3b05      	subs	r3, #5
 80010f8:	fa00 f203 	lsl.w	r2, r0, r3
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	430a      	orrs	r2, r1
 8001102:	635a      	str	r2, [r3, #52]	; 0x34
 8001104:	e03c      	b.n	8001180 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001106:	683b      	ldr	r3, [r7, #0]
 8001108:	685b      	ldr	r3, [r3, #4]
 800110a:	2b0c      	cmp	r3, #12
 800110c:	d81c      	bhi.n	8001148 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001114:	683b      	ldr	r3, [r7, #0]
 8001116:	685a      	ldr	r2, [r3, #4]
 8001118:	4613      	mov	r3, r2
 800111a:	009b      	lsls	r3, r3, #2
 800111c:	4413      	add	r3, r2
 800111e:	3b23      	subs	r3, #35	; 0x23
 8001120:	221f      	movs	r2, #31
 8001122:	fa02 f303 	lsl.w	r3, r2, r3
 8001126:	43db      	mvns	r3, r3
 8001128:	4019      	ands	r1, r3
 800112a:	683b      	ldr	r3, [r7, #0]
 800112c:	6818      	ldr	r0, [r3, #0]
 800112e:	683b      	ldr	r3, [r7, #0]
 8001130:	685a      	ldr	r2, [r3, #4]
 8001132:	4613      	mov	r3, r2
 8001134:	009b      	lsls	r3, r3, #2
 8001136:	4413      	add	r3, r2
 8001138:	3b23      	subs	r3, #35	; 0x23
 800113a:	fa00 f203 	lsl.w	r2, r0, r3
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	430a      	orrs	r2, r1
 8001144:	631a      	str	r2, [r3, #48]	; 0x30
 8001146:	e01b      	b.n	8001180 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800114e:	683b      	ldr	r3, [r7, #0]
 8001150:	685a      	ldr	r2, [r3, #4]
 8001152:	4613      	mov	r3, r2
 8001154:	009b      	lsls	r3, r3, #2
 8001156:	4413      	add	r3, r2
 8001158:	3b41      	subs	r3, #65	; 0x41
 800115a:	221f      	movs	r2, #31
 800115c:	fa02 f303 	lsl.w	r3, r2, r3
 8001160:	43db      	mvns	r3, r3
 8001162:	4019      	ands	r1, r3
 8001164:	683b      	ldr	r3, [r7, #0]
 8001166:	6818      	ldr	r0, [r3, #0]
 8001168:	683b      	ldr	r3, [r7, #0]
 800116a:	685a      	ldr	r2, [r3, #4]
 800116c:	4613      	mov	r3, r2
 800116e:	009b      	lsls	r3, r3, #2
 8001170:	4413      	add	r3, r2
 8001172:	3b41      	subs	r3, #65	; 0x41
 8001174:	fa00 f203 	lsl.w	r2, r0, r3
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	430a      	orrs	r2, r1
 800117e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001180:	683b      	ldr	r3, [r7, #0]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	2b09      	cmp	r3, #9
 8001186:	d91c      	bls.n	80011c2 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	68d9      	ldr	r1, [r3, #12]
 800118e:	683b      	ldr	r3, [r7, #0]
 8001190:	681a      	ldr	r2, [r3, #0]
 8001192:	4613      	mov	r3, r2
 8001194:	005b      	lsls	r3, r3, #1
 8001196:	4413      	add	r3, r2
 8001198:	3b1e      	subs	r3, #30
 800119a:	2207      	movs	r2, #7
 800119c:	fa02 f303 	lsl.w	r3, r2, r3
 80011a0:	43db      	mvns	r3, r3
 80011a2:	4019      	ands	r1, r3
 80011a4:	683b      	ldr	r3, [r7, #0]
 80011a6:	6898      	ldr	r0, [r3, #8]
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	681a      	ldr	r2, [r3, #0]
 80011ac:	4613      	mov	r3, r2
 80011ae:	005b      	lsls	r3, r3, #1
 80011b0:	4413      	add	r3, r2
 80011b2:	3b1e      	subs	r3, #30
 80011b4:	fa00 f203 	lsl.w	r2, r0, r3
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	430a      	orrs	r2, r1
 80011be:	60da      	str	r2, [r3, #12]
 80011c0:	e019      	b.n	80011f6 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	6919      	ldr	r1, [r3, #16]
 80011c8:	683b      	ldr	r3, [r7, #0]
 80011ca:	681a      	ldr	r2, [r3, #0]
 80011cc:	4613      	mov	r3, r2
 80011ce:	005b      	lsls	r3, r3, #1
 80011d0:	4413      	add	r3, r2
 80011d2:	2207      	movs	r2, #7
 80011d4:	fa02 f303 	lsl.w	r3, r2, r3
 80011d8:	43db      	mvns	r3, r3
 80011da:	4019      	ands	r1, r3
 80011dc:	683b      	ldr	r3, [r7, #0]
 80011de:	6898      	ldr	r0, [r3, #8]
 80011e0:	683b      	ldr	r3, [r7, #0]
 80011e2:	681a      	ldr	r2, [r3, #0]
 80011e4:	4613      	mov	r3, r2
 80011e6:	005b      	lsls	r3, r3, #1
 80011e8:	4413      	add	r3, r2
 80011ea:	fa00 f203 	lsl.w	r2, r0, r3
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	430a      	orrs	r2, r1
 80011f4:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80011f6:	683b      	ldr	r3, [r7, #0]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	2b10      	cmp	r3, #16
 80011fc:	d003      	beq.n	8001206 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80011fe:	683b      	ldr	r3, [r7, #0]
 8001200:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001202:	2b11      	cmp	r3, #17
 8001204:	d132      	bne.n	800126c <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	4a1d      	ldr	r2, [pc, #116]	; (8001280 <HAL_ADC_ConfigChannel+0x1e4>)
 800120c:	4293      	cmp	r3, r2
 800120e:	d125      	bne.n	800125c <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	689b      	ldr	r3, [r3, #8]
 8001216:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800121a:	2b00      	cmp	r3, #0
 800121c:	d126      	bne.n	800126c <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	689a      	ldr	r2, [r3, #8]
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800122c:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800122e:	683b      	ldr	r3, [r7, #0]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	2b10      	cmp	r3, #16
 8001234:	d11a      	bne.n	800126c <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001236:	4b13      	ldr	r3, [pc, #76]	; (8001284 <HAL_ADC_ConfigChannel+0x1e8>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	4a13      	ldr	r2, [pc, #76]	; (8001288 <HAL_ADC_ConfigChannel+0x1ec>)
 800123c:	fba2 2303 	umull	r2, r3, r2, r3
 8001240:	0c9a      	lsrs	r2, r3, #18
 8001242:	4613      	mov	r3, r2
 8001244:	009b      	lsls	r3, r3, #2
 8001246:	4413      	add	r3, r2
 8001248:	005b      	lsls	r3, r3, #1
 800124a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800124c:	e002      	b.n	8001254 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800124e:	68bb      	ldr	r3, [r7, #8]
 8001250:	3b01      	subs	r3, #1
 8001252:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001254:	68bb      	ldr	r3, [r7, #8]
 8001256:	2b00      	cmp	r3, #0
 8001258:	d1f9      	bne.n	800124e <HAL_ADC_ConfigChannel+0x1b2>
 800125a:	e007      	b.n	800126c <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001260:	f043 0220 	orr.w	r2, r3, #32
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001268:	2301      	movs	r3, #1
 800126a:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	2200      	movs	r2, #0
 8001270:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001274:	7bfb      	ldrb	r3, [r7, #15]
}
 8001276:	4618      	mov	r0, r3
 8001278:	3714      	adds	r7, #20
 800127a:	46bd      	mov	sp, r7
 800127c:	bc80      	pop	{r7}
 800127e:	4770      	bx	lr
 8001280:	40012400 	.word	0x40012400
 8001284:	20000004 	.word	0x20000004
 8001288:	431bde83 	.word	0x431bde83

0800128c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b084      	sub	sp, #16
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001294:	2300      	movs	r3, #0
 8001296:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001298:	2300      	movs	r3, #0
 800129a:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	689b      	ldr	r3, [r3, #8]
 80012a2:	f003 0301 	and.w	r3, r3, #1
 80012a6:	2b01      	cmp	r3, #1
 80012a8:	d039      	beq.n	800131e <ADC_Enable+0x92>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	689a      	ldr	r2, [r3, #8]
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	f042 0201 	orr.w	r2, r2, #1
 80012b8:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80012ba:	4b1b      	ldr	r3, [pc, #108]	; (8001328 <ADC_Enable+0x9c>)
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	4a1b      	ldr	r2, [pc, #108]	; (800132c <ADC_Enable+0xa0>)
 80012c0:	fba2 2303 	umull	r2, r3, r2, r3
 80012c4:	0c9b      	lsrs	r3, r3, #18
 80012c6:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80012c8:	e002      	b.n	80012d0 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80012ca:	68bb      	ldr	r3, [r7, #8]
 80012cc:	3b01      	subs	r3, #1
 80012ce:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80012d0:	68bb      	ldr	r3, [r7, #8]
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d1f9      	bne.n	80012ca <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80012d6:	f7ff fc13 	bl	8000b00 <HAL_GetTick>
 80012da:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80012dc:	e018      	b.n	8001310 <ADC_Enable+0x84>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80012de:	f7ff fc0f 	bl	8000b00 <HAL_GetTick>
 80012e2:	4602      	mov	r2, r0
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	1ad3      	subs	r3, r2, r3
 80012e8:	2b02      	cmp	r3, #2
 80012ea:	d911      	bls.n	8001310 <ADC_Enable+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012f0:	f043 0210 	orr.w	r2, r3, #16
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	629a      	str	r2, [r3, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012fc:	f043 0201 	orr.w	r2, r3, #1
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	2200      	movs	r2, #0
 8001308:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
        return HAL_ERROR;
 800130c:	2301      	movs	r3, #1
 800130e:	e007      	b.n	8001320 <ADC_Enable+0x94>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	689b      	ldr	r3, [r3, #8]
 8001316:	f003 0301 	and.w	r3, r3, #1
 800131a:	2b01      	cmp	r3, #1
 800131c:	d1df      	bne.n	80012de <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 800131e:	2300      	movs	r3, #0
}
 8001320:	4618      	mov	r0, r3
 8001322:	3710      	adds	r7, #16
 8001324:	46bd      	mov	sp, r7
 8001326:	bd80      	pop	{r7, pc}
 8001328:	20000004 	.word	0x20000004
 800132c:	431bde83 	.word	0x431bde83

08001330 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b084      	sub	sp, #16
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001338:	2300      	movs	r3, #0
 800133a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	689b      	ldr	r3, [r3, #8]
 8001342:	f003 0301 	and.w	r3, r3, #1
 8001346:	2b01      	cmp	r3, #1
 8001348:	d127      	bne.n	800139a <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	689a      	ldr	r2, [r3, #8]
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	f022 0201 	bic.w	r2, r2, #1
 8001358:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800135a:	f7ff fbd1 	bl	8000b00 <HAL_GetTick>
 800135e:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001360:	e014      	b.n	800138c <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001362:	f7ff fbcd 	bl	8000b00 <HAL_GetTick>
 8001366:	4602      	mov	r2, r0
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	1ad3      	subs	r3, r2, r3
 800136c:	2b02      	cmp	r3, #2
 800136e:	d90d      	bls.n	800138c <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001374:	f043 0210 	orr.w	r2, r3, #16
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001380:	f043 0201 	orr.w	r2, r3, #1
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 8001388:	2301      	movs	r3, #1
 800138a:	e007      	b.n	800139c <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	689b      	ldr	r3, [r3, #8]
 8001392:	f003 0301 	and.w	r3, r3, #1
 8001396:	2b01      	cmp	r3, #1
 8001398:	d0e3      	beq.n	8001362 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800139a:	2300      	movs	r3, #0
}
 800139c:	4618      	mov	r0, r3
 800139e:	3710      	adds	r7, #16
 80013a0:	46bd      	mov	sp, r7
 80013a2:	bd80      	pop	{r7, pc}

080013a4 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b084      	sub	sp, #16
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013b0:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013b6:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d127      	bne.n	800140e <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013c2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	689b      	ldr	r3, [r3, #8]
 80013d0:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80013d4:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80013d8:	d115      	bne.n	8001406 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d111      	bne.n	8001406 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013e6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013f2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d105      	bne.n	8001406 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013fe:	f043 0201 	orr.w	r2, r3, #1
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001406:	68f8      	ldr	r0, [r7, #12]
 8001408:	f7ff f928 	bl	800065c <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 800140c:	e004      	b.n	8001418 <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	6a1b      	ldr	r3, [r3, #32]
 8001412:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001414:	6878      	ldr	r0, [r7, #4]
 8001416:	4798      	blx	r3
}
 8001418:	bf00      	nop
 800141a:	3710      	adds	r7, #16
 800141c:	46bd      	mov	sp, r7
 800141e:	bd80      	pop	{r7, pc}

08001420 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b084      	sub	sp, #16
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800142c:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800142e:	68f8      	ldr	r0, [r7, #12]
 8001430:	f7ff f958 	bl	80006e4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001434:	bf00      	nop
 8001436:	3710      	adds	r7, #16
 8001438:	46bd      	mov	sp, r7
 800143a:	bd80      	pop	{r7, pc}

0800143c <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b084      	sub	sp, #16
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001448:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800144e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800145a:	f043 0204 	orr.w	r2, r3, #4
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001462:	68f8      	ldr	r0, [r7, #12]
 8001464:	f7ff fe11 	bl	800108a <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001468:	bf00      	nop
 800146a:	3710      	adds	r7, #16
 800146c:	46bd      	mov	sp, r7
 800146e:	bd80      	pop	{r7, pc}

08001470 <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8001470:	b590      	push	{r4, r7, lr}
 8001472:	b087      	sub	sp, #28
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001478:	2300      	movs	r3, #0
 800147a:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 800147c:	2300      	movs	r3, #0
 800147e:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001486:	2b01      	cmp	r3, #1
 8001488:	d101      	bne.n	800148e <HAL_ADCEx_Calibration_Start+0x1e>
 800148a:	2302      	movs	r3, #2
 800148c:	e086      	b.n	800159c <HAL_ADCEx_Calibration_Start+0x12c>
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	2201      	movs	r2, #1
 8001492:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  /* 1. Calibration prerequisite:                                             */
  /*    - ADC must be disabled for at least two ADC clock cycles in disable   */
  /*      mode before ADC enable                                              */
  /* Stop potential conversion on going, on regular and injected groups       */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001496:	6878      	ldr	r0, [r7, #4]
 8001498:	f7ff ff4a 	bl	8001330 <ADC_ConversionStop_Disable>
 800149c:	4603      	mov	r3, r0
 800149e:	75fb      	strb	r3, [r7, #23]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80014a0:	7dfb      	ldrb	r3, [r7, #23]
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d175      	bne.n	8001592 <HAL_ADCEx_Calibration_Start+0x122>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014aa:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80014ae:	f023 0302 	bic.w	r3, r3, #2
 80014b2:	f043 0202 	orr.w	r2, r3, #2
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 80014ba:	4b3a      	ldr	r3, [pc, #232]	; (80015a4 <HAL_ADCEx_Calibration_Start+0x134>)
 80014bc:	681c      	ldr	r4, [r3, #0]
 80014be:	2002      	movs	r0, #2
 80014c0:	f002 fd74 	bl	8003fac <HAL_RCCEx_GetPeriphCLKFreq>
 80014c4:	4603      	mov	r3, r0
 80014c6:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 80014ca:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 80014cc:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 80014ce:	e002      	b.n	80014d6 <HAL_ADCEx_Calibration_Start+0x66>
    {
      wait_loop_index--;
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	3b01      	subs	r3, #1
 80014d4:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d1f9      	bne.n	80014d0 <HAL_ADCEx_Calibration_Start+0x60>
    }
    
    /* 2. Enable the ADC peripheral */
    ADC_Enable(hadc);
 80014dc:	6878      	ldr	r0, [r7, #4]
 80014de:	f7ff fed5 	bl	800128c <ADC_Enable>
    
    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	689a      	ldr	r2, [r3, #8]
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	f042 0208 	orr.w	r2, r2, #8
 80014f0:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 80014f2:	f7ff fb05 	bl	8000b00 <HAL_GetTick>
 80014f6:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 80014f8:	e014      	b.n	8001524 <HAL_ADCEx_Calibration_Start+0xb4>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 80014fa:	f7ff fb01 	bl	8000b00 <HAL_GetTick>
 80014fe:	4602      	mov	r2, r0
 8001500:	693b      	ldr	r3, [r7, #16]
 8001502:	1ad3      	subs	r3, r2, r3
 8001504:	2b0a      	cmp	r3, #10
 8001506:	d90d      	bls.n	8001524 <HAL_ADCEx_Calibration_Start+0xb4>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800150c:	f023 0312 	bic.w	r3, r3, #18
 8001510:	f043 0210 	orr.w	r2, r3, #16
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	629a      	str	r2, [r3, #40]	; 0x28
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	2200      	movs	r2, #0
 800151c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        
        return HAL_ERROR;
 8001520:	2301      	movs	r3, #1
 8001522:	e03b      	b.n	800159c <HAL_ADCEx_Calibration_Start+0x12c>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	689b      	ldr	r3, [r3, #8]
 800152a:	f003 0308 	and.w	r3, r3, #8
 800152e:	2b00      	cmp	r3, #0
 8001530:	d1e3      	bne.n	80014fa <HAL_ADCEx_Calibration_Start+0x8a>
      }
    }
    
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	689a      	ldr	r2, [r3, #8]
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	f042 0204 	orr.w	r2, r2, #4
 8001540:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8001542:	f7ff fadd 	bl	8000b00 <HAL_GetTick>
 8001546:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8001548:	e014      	b.n	8001574 <HAL_ADCEx_Calibration_Start+0x104>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 800154a:	f7ff fad9 	bl	8000b00 <HAL_GetTick>
 800154e:	4602      	mov	r2, r0
 8001550:	693b      	ldr	r3, [r7, #16]
 8001552:	1ad3      	subs	r3, r2, r3
 8001554:	2b0a      	cmp	r3, #10
 8001556:	d90d      	bls.n	8001574 <HAL_ADCEx_Calibration_Start+0x104>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800155c:	f023 0312 	bic.w	r3, r3, #18
 8001560:	f043 0210 	orr.w	r2, r3, #16
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	629a      	str	r2, [r3, #40]	; 0x28
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	2200      	movs	r2, #0
 800156c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        
        return HAL_ERROR;
 8001570:	2301      	movs	r3, #1
 8001572:	e013      	b.n	800159c <HAL_ADCEx_Calibration_Start+0x12c>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	689b      	ldr	r3, [r3, #8]
 800157a:	f003 0304 	and.w	r3, r3, #4
 800157e:	2b00      	cmp	r3, #0
 8001580:	d1e3      	bne.n	800154a <HAL_ADCEx_Calibration_Start+0xda>
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001586:	f023 0303 	bic.w	r3, r3, #3
 800158a:	f043 0201 	orr.w	r2, r3, #1
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	2200      	movs	r2, #0
 8001596:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800159a:	7dfb      	ldrb	r3, [r7, #23]
}
 800159c:	4618      	mov	r0, r3
 800159e:	371c      	adds	r7, #28
 80015a0:	46bd      	mov	sp, r7
 80015a2:	bd90      	pop	{r4, r7, pc}
 80015a4:	20000004 	.word	0x20000004

080015a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015a8:	b480      	push	{r7}
 80015aa:	b085      	sub	sp, #20
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	f003 0307 	and.w	r3, r3, #7
 80015b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015b8:	4b0c      	ldr	r3, [pc, #48]	; (80015ec <__NVIC_SetPriorityGrouping+0x44>)
 80015ba:	68db      	ldr	r3, [r3, #12]
 80015bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015be:	68ba      	ldr	r2, [r7, #8]
 80015c0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80015c4:	4013      	ands	r3, r2
 80015c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015cc:	68bb      	ldr	r3, [r7, #8]
 80015ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80015d0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80015d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015da:	4a04      	ldr	r2, [pc, #16]	; (80015ec <__NVIC_SetPriorityGrouping+0x44>)
 80015dc:	68bb      	ldr	r3, [r7, #8]
 80015de:	60d3      	str	r3, [r2, #12]
}
 80015e0:	bf00      	nop
 80015e2:	3714      	adds	r7, #20
 80015e4:	46bd      	mov	sp, r7
 80015e6:	bc80      	pop	{r7}
 80015e8:	4770      	bx	lr
 80015ea:	bf00      	nop
 80015ec:	e000ed00 	.word	0xe000ed00

080015f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80015f0:	b480      	push	{r7}
 80015f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015f4:	4b04      	ldr	r3, [pc, #16]	; (8001608 <__NVIC_GetPriorityGrouping+0x18>)
 80015f6:	68db      	ldr	r3, [r3, #12]
 80015f8:	0a1b      	lsrs	r3, r3, #8
 80015fa:	f003 0307 	and.w	r3, r3, #7
}
 80015fe:	4618      	mov	r0, r3
 8001600:	46bd      	mov	sp, r7
 8001602:	bc80      	pop	{r7}
 8001604:	4770      	bx	lr
 8001606:	bf00      	nop
 8001608:	e000ed00 	.word	0xe000ed00

0800160c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800160c:	b480      	push	{r7}
 800160e:	b083      	sub	sp, #12
 8001610:	af00      	add	r7, sp, #0
 8001612:	4603      	mov	r3, r0
 8001614:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001616:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800161a:	2b00      	cmp	r3, #0
 800161c:	db0b      	blt.n	8001636 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800161e:	79fb      	ldrb	r3, [r7, #7]
 8001620:	f003 021f 	and.w	r2, r3, #31
 8001624:	4906      	ldr	r1, [pc, #24]	; (8001640 <__NVIC_EnableIRQ+0x34>)
 8001626:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800162a:	095b      	lsrs	r3, r3, #5
 800162c:	2001      	movs	r0, #1
 800162e:	fa00 f202 	lsl.w	r2, r0, r2
 8001632:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001636:	bf00      	nop
 8001638:	370c      	adds	r7, #12
 800163a:	46bd      	mov	sp, r7
 800163c:	bc80      	pop	{r7}
 800163e:	4770      	bx	lr
 8001640:	e000e100 	.word	0xe000e100

08001644 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001644:	b480      	push	{r7}
 8001646:	b083      	sub	sp, #12
 8001648:	af00      	add	r7, sp, #0
 800164a:	4603      	mov	r3, r0
 800164c:	6039      	str	r1, [r7, #0]
 800164e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001650:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001654:	2b00      	cmp	r3, #0
 8001656:	db0a      	blt.n	800166e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001658:	683b      	ldr	r3, [r7, #0]
 800165a:	b2da      	uxtb	r2, r3
 800165c:	490c      	ldr	r1, [pc, #48]	; (8001690 <__NVIC_SetPriority+0x4c>)
 800165e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001662:	0112      	lsls	r2, r2, #4
 8001664:	b2d2      	uxtb	r2, r2
 8001666:	440b      	add	r3, r1
 8001668:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800166c:	e00a      	b.n	8001684 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800166e:	683b      	ldr	r3, [r7, #0]
 8001670:	b2da      	uxtb	r2, r3
 8001672:	4908      	ldr	r1, [pc, #32]	; (8001694 <__NVIC_SetPriority+0x50>)
 8001674:	79fb      	ldrb	r3, [r7, #7]
 8001676:	f003 030f 	and.w	r3, r3, #15
 800167a:	3b04      	subs	r3, #4
 800167c:	0112      	lsls	r2, r2, #4
 800167e:	b2d2      	uxtb	r2, r2
 8001680:	440b      	add	r3, r1
 8001682:	761a      	strb	r2, [r3, #24]
}
 8001684:	bf00      	nop
 8001686:	370c      	adds	r7, #12
 8001688:	46bd      	mov	sp, r7
 800168a:	bc80      	pop	{r7}
 800168c:	4770      	bx	lr
 800168e:	bf00      	nop
 8001690:	e000e100 	.word	0xe000e100
 8001694:	e000ed00 	.word	0xe000ed00

08001698 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001698:	b480      	push	{r7}
 800169a:	b089      	sub	sp, #36	; 0x24
 800169c:	af00      	add	r7, sp, #0
 800169e:	60f8      	str	r0, [r7, #12]
 80016a0:	60b9      	str	r1, [r7, #8]
 80016a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	f003 0307 	and.w	r3, r3, #7
 80016aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016ac:	69fb      	ldr	r3, [r7, #28]
 80016ae:	f1c3 0307 	rsb	r3, r3, #7
 80016b2:	2b04      	cmp	r3, #4
 80016b4:	bf28      	it	cs
 80016b6:	2304      	movcs	r3, #4
 80016b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016ba:	69fb      	ldr	r3, [r7, #28]
 80016bc:	3304      	adds	r3, #4
 80016be:	2b06      	cmp	r3, #6
 80016c0:	d902      	bls.n	80016c8 <NVIC_EncodePriority+0x30>
 80016c2:	69fb      	ldr	r3, [r7, #28]
 80016c4:	3b03      	subs	r3, #3
 80016c6:	e000      	b.n	80016ca <NVIC_EncodePriority+0x32>
 80016c8:	2300      	movs	r3, #0
 80016ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016cc:	f04f 32ff 	mov.w	r2, #4294967295
 80016d0:	69bb      	ldr	r3, [r7, #24]
 80016d2:	fa02 f303 	lsl.w	r3, r2, r3
 80016d6:	43da      	mvns	r2, r3
 80016d8:	68bb      	ldr	r3, [r7, #8]
 80016da:	401a      	ands	r2, r3
 80016dc:	697b      	ldr	r3, [r7, #20]
 80016de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016e0:	f04f 31ff 	mov.w	r1, #4294967295
 80016e4:	697b      	ldr	r3, [r7, #20]
 80016e6:	fa01 f303 	lsl.w	r3, r1, r3
 80016ea:	43d9      	mvns	r1, r3
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016f0:	4313      	orrs	r3, r2
         );
}
 80016f2:	4618      	mov	r0, r3
 80016f4:	3724      	adds	r7, #36	; 0x24
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bc80      	pop	{r7}
 80016fa:	4770      	bx	lr

080016fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b082      	sub	sp, #8
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	3b01      	subs	r3, #1
 8001708:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800170c:	d301      	bcc.n	8001712 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800170e:	2301      	movs	r3, #1
 8001710:	e00f      	b.n	8001732 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001712:	4a0a      	ldr	r2, [pc, #40]	; (800173c <SysTick_Config+0x40>)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	3b01      	subs	r3, #1
 8001718:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800171a:	210f      	movs	r1, #15
 800171c:	f04f 30ff 	mov.w	r0, #4294967295
 8001720:	f7ff ff90 	bl	8001644 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001724:	4b05      	ldr	r3, [pc, #20]	; (800173c <SysTick_Config+0x40>)
 8001726:	2200      	movs	r2, #0
 8001728:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800172a:	4b04      	ldr	r3, [pc, #16]	; (800173c <SysTick_Config+0x40>)
 800172c:	2207      	movs	r2, #7
 800172e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001730:	2300      	movs	r3, #0
}
 8001732:	4618      	mov	r0, r3
 8001734:	3708      	adds	r7, #8
 8001736:	46bd      	mov	sp, r7
 8001738:	bd80      	pop	{r7, pc}
 800173a:	bf00      	nop
 800173c:	e000e010 	.word	0xe000e010

08001740 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b082      	sub	sp, #8
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001748:	6878      	ldr	r0, [r7, #4]
 800174a:	f7ff ff2d 	bl	80015a8 <__NVIC_SetPriorityGrouping>
}
 800174e:	bf00      	nop
 8001750:	3708      	adds	r7, #8
 8001752:	46bd      	mov	sp, r7
 8001754:	bd80      	pop	{r7, pc}

08001756 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001756:	b580      	push	{r7, lr}
 8001758:	b086      	sub	sp, #24
 800175a:	af00      	add	r7, sp, #0
 800175c:	4603      	mov	r3, r0
 800175e:	60b9      	str	r1, [r7, #8]
 8001760:	607a      	str	r2, [r7, #4]
 8001762:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001764:	2300      	movs	r3, #0
 8001766:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001768:	f7ff ff42 	bl	80015f0 <__NVIC_GetPriorityGrouping>
 800176c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800176e:	687a      	ldr	r2, [r7, #4]
 8001770:	68b9      	ldr	r1, [r7, #8]
 8001772:	6978      	ldr	r0, [r7, #20]
 8001774:	f7ff ff90 	bl	8001698 <NVIC_EncodePriority>
 8001778:	4602      	mov	r2, r0
 800177a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800177e:	4611      	mov	r1, r2
 8001780:	4618      	mov	r0, r3
 8001782:	f7ff ff5f 	bl	8001644 <__NVIC_SetPriority>
}
 8001786:	bf00      	nop
 8001788:	3718      	adds	r7, #24
 800178a:	46bd      	mov	sp, r7
 800178c:	bd80      	pop	{r7, pc}

0800178e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800178e:	b580      	push	{r7, lr}
 8001790:	b082      	sub	sp, #8
 8001792:	af00      	add	r7, sp, #0
 8001794:	4603      	mov	r3, r0
 8001796:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001798:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800179c:	4618      	mov	r0, r3
 800179e:	f7ff ff35 	bl	800160c <__NVIC_EnableIRQ>
}
 80017a2:	bf00      	nop
 80017a4:	3708      	adds	r7, #8
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bd80      	pop	{r7, pc}

080017aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80017aa:	b580      	push	{r7, lr}
 80017ac:	b082      	sub	sp, #8
 80017ae:	af00      	add	r7, sp, #0
 80017b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80017b2:	6878      	ldr	r0, [r7, #4]
 80017b4:	f7ff ffa2 	bl	80016fc <SysTick_Config>
 80017b8:	4603      	mov	r3, r0
}
 80017ba:	4618      	mov	r0, r3
 80017bc:	3708      	adds	r7, #8
 80017be:	46bd      	mov	sp, r7
 80017c0:	bd80      	pop	{r7, pc}
	...

080017c4 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80017c4:	b480      	push	{r7}
 80017c6:	b085      	sub	sp, #20
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80017cc:	2300      	movs	r3, #0
 80017ce:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d101      	bne.n	80017da <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80017d6:	2301      	movs	r3, #1
 80017d8:	e043      	b.n	8001862 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	461a      	mov	r2, r3
 80017e0:	4b22      	ldr	r3, [pc, #136]	; (800186c <HAL_DMA_Init+0xa8>)
 80017e2:	4413      	add	r3, r2
 80017e4:	4a22      	ldr	r2, [pc, #136]	; (8001870 <HAL_DMA_Init+0xac>)
 80017e6:	fba2 2303 	umull	r2, r3, r2, r3
 80017ea:	091b      	lsrs	r3, r3, #4
 80017ec:	009a      	lsls	r2, r3, #2
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	4a1f      	ldr	r2, [pc, #124]	; (8001874 <HAL_DMA_Init+0xb0>)
 80017f6:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	2202      	movs	r2, #2
 80017fc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800180e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001812:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 800181c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	68db      	ldr	r3, [r3, #12]
 8001822:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001828:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	695b      	ldr	r3, [r3, #20]
 800182e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001834:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	69db      	ldr	r3, [r3, #28]
 800183a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800183c:	68fa      	ldr	r2, [r7, #12]
 800183e:	4313      	orrs	r3, r2
 8001840:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	68fa      	ldr	r2, [r7, #12]
 8001848:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	2200      	movs	r2, #0
 800184e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	2201      	movs	r2, #1
 8001854:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	2200      	movs	r2, #0
 800185c:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001860:	2300      	movs	r3, #0
}
 8001862:	4618      	mov	r0, r3
 8001864:	3714      	adds	r7, #20
 8001866:	46bd      	mov	sp, r7
 8001868:	bc80      	pop	{r7}
 800186a:	4770      	bx	lr
 800186c:	bffdfff8 	.word	0xbffdfff8
 8001870:	cccccccd 	.word	0xcccccccd
 8001874:	40020000 	.word	0x40020000

08001878 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b086      	sub	sp, #24
 800187c:	af00      	add	r7, sp, #0
 800187e:	60f8      	str	r0, [r7, #12]
 8001880:	60b9      	str	r1, [r7, #8]
 8001882:	607a      	str	r2, [r7, #4]
 8001884:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001886:	2300      	movs	r3, #0
 8001888:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001890:	2b01      	cmp	r3, #1
 8001892:	d101      	bne.n	8001898 <HAL_DMA_Start_IT+0x20>
 8001894:	2302      	movs	r3, #2
 8001896:	e04a      	b.n	800192e <HAL_DMA_Start_IT+0xb6>
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	2201      	movs	r2, #1
 800189c:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80018a6:	2b01      	cmp	r3, #1
 80018a8:	d13a      	bne.n	8001920 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	2202      	movs	r2, #2
 80018ae:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	2200      	movs	r2, #0
 80018b6:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	681a      	ldr	r2, [r3, #0]
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f022 0201 	bic.w	r2, r2, #1
 80018c6:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	687a      	ldr	r2, [r7, #4]
 80018cc:	68b9      	ldr	r1, [r7, #8]
 80018ce:	68f8      	ldr	r0, [r7, #12]
 80018d0:	f000 f972 	bl	8001bb8 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d008      	beq.n	80018ee <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	681a      	ldr	r2, [r3, #0]
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f042 020e 	orr.w	r2, r2, #14
 80018ea:	601a      	str	r2, [r3, #0]
 80018ec:	e00f      	b.n	800190e <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	681a      	ldr	r2, [r3, #0]
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	f022 0204 	bic.w	r2, r2, #4
 80018fc:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	681a      	ldr	r2, [r3, #0]
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	f042 020a 	orr.w	r2, r2, #10
 800190c:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	681a      	ldr	r2, [r3, #0]
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	f042 0201 	orr.w	r2, r2, #1
 800191c:	601a      	str	r2, [r3, #0]
 800191e:	e005      	b.n	800192c <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	2200      	movs	r2, #0
 8001924:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001928:	2302      	movs	r3, #2
 800192a:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 800192c:	7dfb      	ldrb	r3, [r7, #23]
}
 800192e:	4618      	mov	r0, r3
 8001930:	3718      	adds	r7, #24
 8001932:	46bd      	mov	sp, r7
 8001934:	bd80      	pop	{r7, pc}

08001936 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001936:	b480      	push	{r7}
 8001938:	b085      	sub	sp, #20
 800193a:	af00      	add	r7, sp, #0
 800193c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800193e:	2300      	movs	r3, #0
 8001940:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001948:	2b02      	cmp	r3, #2
 800194a:	d008      	beq.n	800195e <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	2204      	movs	r2, #4
 8001950:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	2200      	movs	r2, #0
 8001956:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800195a:	2301      	movs	r3, #1
 800195c:	e020      	b.n	80019a0 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	681a      	ldr	r2, [r3, #0]
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f022 020e 	bic.w	r2, r2, #14
 800196c:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	681a      	ldr	r2, [r3, #0]
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f022 0201 	bic.w	r2, r2, #1
 800197c:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001986:	2101      	movs	r1, #1
 8001988:	fa01 f202 	lsl.w	r2, r1, r2
 800198c:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	2201      	movs	r2, #1
 8001992:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	2200      	movs	r2, #0
 800199a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 800199e:	7bfb      	ldrb	r3, [r7, #15]
}
 80019a0:	4618      	mov	r0, r3
 80019a2:	3714      	adds	r7, #20
 80019a4:	46bd      	mov	sp, r7
 80019a6:	bc80      	pop	{r7}
 80019a8:	4770      	bx	lr
	...

080019ac <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b084      	sub	sp, #16
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019c8:	2204      	movs	r2, #4
 80019ca:	409a      	lsls	r2, r3
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	4013      	ands	r3, r2
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d04f      	beq.n	8001a74 <HAL_DMA_IRQHandler+0xc8>
 80019d4:	68bb      	ldr	r3, [r7, #8]
 80019d6:	f003 0304 	and.w	r3, r3, #4
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d04a      	beq.n	8001a74 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	f003 0320 	and.w	r3, r3, #32
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d107      	bne.n	80019fc <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	681a      	ldr	r2, [r3, #0]
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f022 0204 	bic.w	r2, r2, #4
 80019fa:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	4a66      	ldr	r2, [pc, #408]	; (8001b9c <HAL_DMA_IRQHandler+0x1f0>)
 8001a02:	4293      	cmp	r3, r2
 8001a04:	d029      	beq.n	8001a5a <HAL_DMA_IRQHandler+0xae>
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	4a65      	ldr	r2, [pc, #404]	; (8001ba0 <HAL_DMA_IRQHandler+0x1f4>)
 8001a0c:	4293      	cmp	r3, r2
 8001a0e:	d022      	beq.n	8001a56 <HAL_DMA_IRQHandler+0xaa>
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	4a63      	ldr	r2, [pc, #396]	; (8001ba4 <HAL_DMA_IRQHandler+0x1f8>)
 8001a16:	4293      	cmp	r3, r2
 8001a18:	d01a      	beq.n	8001a50 <HAL_DMA_IRQHandler+0xa4>
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	4a62      	ldr	r2, [pc, #392]	; (8001ba8 <HAL_DMA_IRQHandler+0x1fc>)
 8001a20:	4293      	cmp	r3, r2
 8001a22:	d012      	beq.n	8001a4a <HAL_DMA_IRQHandler+0x9e>
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	4a60      	ldr	r2, [pc, #384]	; (8001bac <HAL_DMA_IRQHandler+0x200>)
 8001a2a:	4293      	cmp	r3, r2
 8001a2c:	d00a      	beq.n	8001a44 <HAL_DMA_IRQHandler+0x98>
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	4a5f      	ldr	r2, [pc, #380]	; (8001bb0 <HAL_DMA_IRQHandler+0x204>)
 8001a34:	4293      	cmp	r3, r2
 8001a36:	d102      	bne.n	8001a3e <HAL_DMA_IRQHandler+0x92>
 8001a38:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001a3c:	e00e      	b.n	8001a5c <HAL_DMA_IRQHandler+0xb0>
 8001a3e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001a42:	e00b      	b.n	8001a5c <HAL_DMA_IRQHandler+0xb0>
 8001a44:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001a48:	e008      	b.n	8001a5c <HAL_DMA_IRQHandler+0xb0>
 8001a4a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001a4e:	e005      	b.n	8001a5c <HAL_DMA_IRQHandler+0xb0>
 8001a50:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001a54:	e002      	b.n	8001a5c <HAL_DMA_IRQHandler+0xb0>
 8001a56:	2340      	movs	r3, #64	; 0x40
 8001a58:	e000      	b.n	8001a5c <HAL_DMA_IRQHandler+0xb0>
 8001a5a:	2304      	movs	r3, #4
 8001a5c:	4a55      	ldr	r2, [pc, #340]	; (8001bb4 <HAL_DMA_IRQHandler+0x208>)
 8001a5e:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	f000 8094 	beq.w	8001b92 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a6e:	6878      	ldr	r0, [r7, #4]
 8001a70:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8001a72:	e08e      	b.n	8001b92 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a78:	2202      	movs	r2, #2
 8001a7a:	409a      	lsls	r2, r3
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	4013      	ands	r3, r2
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d056      	beq.n	8001b32 <HAL_DMA_IRQHandler+0x186>
 8001a84:	68bb      	ldr	r3, [r7, #8]
 8001a86:	f003 0302 	and.w	r3, r3, #2
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d051      	beq.n	8001b32 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f003 0320 	and.w	r3, r3, #32
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d10b      	bne.n	8001ab4 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	681a      	ldr	r2, [r3, #0]
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f022 020a 	bic.w	r2, r2, #10
 8001aaa:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	2201      	movs	r2, #1
 8001ab0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	4a38      	ldr	r2, [pc, #224]	; (8001b9c <HAL_DMA_IRQHandler+0x1f0>)
 8001aba:	4293      	cmp	r3, r2
 8001abc:	d029      	beq.n	8001b12 <HAL_DMA_IRQHandler+0x166>
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	4a37      	ldr	r2, [pc, #220]	; (8001ba0 <HAL_DMA_IRQHandler+0x1f4>)
 8001ac4:	4293      	cmp	r3, r2
 8001ac6:	d022      	beq.n	8001b0e <HAL_DMA_IRQHandler+0x162>
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	4a35      	ldr	r2, [pc, #212]	; (8001ba4 <HAL_DMA_IRQHandler+0x1f8>)
 8001ace:	4293      	cmp	r3, r2
 8001ad0:	d01a      	beq.n	8001b08 <HAL_DMA_IRQHandler+0x15c>
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	4a34      	ldr	r2, [pc, #208]	; (8001ba8 <HAL_DMA_IRQHandler+0x1fc>)
 8001ad8:	4293      	cmp	r3, r2
 8001ada:	d012      	beq.n	8001b02 <HAL_DMA_IRQHandler+0x156>
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	4a32      	ldr	r2, [pc, #200]	; (8001bac <HAL_DMA_IRQHandler+0x200>)
 8001ae2:	4293      	cmp	r3, r2
 8001ae4:	d00a      	beq.n	8001afc <HAL_DMA_IRQHandler+0x150>
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	4a31      	ldr	r2, [pc, #196]	; (8001bb0 <HAL_DMA_IRQHandler+0x204>)
 8001aec:	4293      	cmp	r3, r2
 8001aee:	d102      	bne.n	8001af6 <HAL_DMA_IRQHandler+0x14a>
 8001af0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001af4:	e00e      	b.n	8001b14 <HAL_DMA_IRQHandler+0x168>
 8001af6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001afa:	e00b      	b.n	8001b14 <HAL_DMA_IRQHandler+0x168>
 8001afc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001b00:	e008      	b.n	8001b14 <HAL_DMA_IRQHandler+0x168>
 8001b02:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001b06:	e005      	b.n	8001b14 <HAL_DMA_IRQHandler+0x168>
 8001b08:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001b0c:	e002      	b.n	8001b14 <HAL_DMA_IRQHandler+0x168>
 8001b0e:	2320      	movs	r3, #32
 8001b10:	e000      	b.n	8001b14 <HAL_DMA_IRQHandler+0x168>
 8001b12:	2302      	movs	r3, #2
 8001b14:	4a27      	ldr	r2, [pc, #156]	; (8001bb4 <HAL_DMA_IRQHandler+0x208>)
 8001b16:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d034      	beq.n	8001b92 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b2c:	6878      	ldr	r0, [r7, #4]
 8001b2e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001b30:	e02f      	b.n	8001b92 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b36:	2208      	movs	r2, #8
 8001b38:	409a      	lsls	r2, r3
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	4013      	ands	r3, r2
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d028      	beq.n	8001b94 <HAL_DMA_IRQHandler+0x1e8>
 8001b42:	68bb      	ldr	r3, [r7, #8]
 8001b44:	f003 0308 	and.w	r3, r3, #8
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d023      	beq.n	8001b94 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	681a      	ldr	r2, [r3, #0]
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f022 020e 	bic.w	r2, r2, #14
 8001b5a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b64:	2101      	movs	r1, #1
 8001b66:	fa01 f202 	lsl.w	r2, r1, r2
 8001b6a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	2201      	movs	r2, #1
 8001b70:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	2201      	movs	r2, #1
 8001b76:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d004      	beq.n	8001b94 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b8e:	6878      	ldr	r0, [r7, #4]
 8001b90:	4798      	blx	r3
    }
  }
  return;
 8001b92:	bf00      	nop
 8001b94:	bf00      	nop
}
 8001b96:	3710      	adds	r7, #16
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	bd80      	pop	{r7, pc}
 8001b9c:	40020008 	.word	0x40020008
 8001ba0:	4002001c 	.word	0x4002001c
 8001ba4:	40020030 	.word	0x40020030
 8001ba8:	40020044 	.word	0x40020044
 8001bac:	40020058 	.word	0x40020058
 8001bb0:	4002006c 	.word	0x4002006c
 8001bb4:	40020000 	.word	0x40020000

08001bb8 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	b085      	sub	sp, #20
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	60f8      	str	r0, [r7, #12]
 8001bc0:	60b9      	str	r1, [r7, #8]
 8001bc2:	607a      	str	r2, [r7, #4]
 8001bc4:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001bce:	2101      	movs	r1, #1
 8001bd0:	fa01 f202 	lsl.w	r2, r1, r2
 8001bd4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	683a      	ldr	r2, [r7, #0]
 8001bdc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	685b      	ldr	r3, [r3, #4]
 8001be2:	2b10      	cmp	r3, #16
 8001be4:	d108      	bne.n	8001bf8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	687a      	ldr	r2, [r7, #4]
 8001bec:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	68ba      	ldr	r2, [r7, #8]
 8001bf4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001bf6:	e007      	b.n	8001c08 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	68ba      	ldr	r2, [r7, #8]
 8001bfe:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	687a      	ldr	r2, [r7, #4]
 8001c06:	60da      	str	r2, [r3, #12]
}
 8001c08:	bf00      	nop
 8001c0a:	3714      	adds	r7, #20
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	bc80      	pop	{r7}
 8001c10:	4770      	bx	lr
	...

08001c14 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c14:	b480      	push	{r7}
 8001c16:	b08b      	sub	sp, #44	; 0x2c
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
 8001c1c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001c22:	2300      	movs	r3, #0
 8001c24:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c26:	e127      	b.n	8001e78 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001c28:	2201      	movs	r2, #1
 8001c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c30:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c32:	683b      	ldr	r3, [r7, #0]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	69fa      	ldr	r2, [r7, #28]
 8001c38:	4013      	ands	r3, r2
 8001c3a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001c3c:	69ba      	ldr	r2, [r7, #24]
 8001c3e:	69fb      	ldr	r3, [r7, #28]
 8001c40:	429a      	cmp	r2, r3
 8001c42:	f040 8116 	bne.w	8001e72 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001c46:	683b      	ldr	r3, [r7, #0]
 8001c48:	685b      	ldr	r3, [r3, #4]
 8001c4a:	2b12      	cmp	r3, #18
 8001c4c:	d034      	beq.n	8001cb8 <HAL_GPIO_Init+0xa4>
 8001c4e:	2b12      	cmp	r3, #18
 8001c50:	d80d      	bhi.n	8001c6e <HAL_GPIO_Init+0x5a>
 8001c52:	2b02      	cmp	r3, #2
 8001c54:	d02b      	beq.n	8001cae <HAL_GPIO_Init+0x9a>
 8001c56:	2b02      	cmp	r3, #2
 8001c58:	d804      	bhi.n	8001c64 <HAL_GPIO_Init+0x50>
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d031      	beq.n	8001cc2 <HAL_GPIO_Init+0xae>
 8001c5e:	2b01      	cmp	r3, #1
 8001c60:	d01c      	beq.n	8001c9c <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001c62:	e048      	b.n	8001cf6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001c64:	2b03      	cmp	r3, #3
 8001c66:	d043      	beq.n	8001cf0 <HAL_GPIO_Init+0xdc>
 8001c68:	2b11      	cmp	r3, #17
 8001c6a:	d01b      	beq.n	8001ca4 <HAL_GPIO_Init+0x90>
          break;
 8001c6c:	e043      	b.n	8001cf6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001c6e:	4a89      	ldr	r2, [pc, #548]	; (8001e94 <HAL_GPIO_Init+0x280>)
 8001c70:	4293      	cmp	r3, r2
 8001c72:	d026      	beq.n	8001cc2 <HAL_GPIO_Init+0xae>
 8001c74:	4a87      	ldr	r2, [pc, #540]	; (8001e94 <HAL_GPIO_Init+0x280>)
 8001c76:	4293      	cmp	r3, r2
 8001c78:	d806      	bhi.n	8001c88 <HAL_GPIO_Init+0x74>
 8001c7a:	4a87      	ldr	r2, [pc, #540]	; (8001e98 <HAL_GPIO_Init+0x284>)
 8001c7c:	4293      	cmp	r3, r2
 8001c7e:	d020      	beq.n	8001cc2 <HAL_GPIO_Init+0xae>
 8001c80:	4a86      	ldr	r2, [pc, #536]	; (8001e9c <HAL_GPIO_Init+0x288>)
 8001c82:	4293      	cmp	r3, r2
 8001c84:	d01d      	beq.n	8001cc2 <HAL_GPIO_Init+0xae>
          break;
 8001c86:	e036      	b.n	8001cf6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001c88:	4a85      	ldr	r2, [pc, #532]	; (8001ea0 <HAL_GPIO_Init+0x28c>)
 8001c8a:	4293      	cmp	r3, r2
 8001c8c:	d019      	beq.n	8001cc2 <HAL_GPIO_Init+0xae>
 8001c8e:	4a85      	ldr	r2, [pc, #532]	; (8001ea4 <HAL_GPIO_Init+0x290>)
 8001c90:	4293      	cmp	r3, r2
 8001c92:	d016      	beq.n	8001cc2 <HAL_GPIO_Init+0xae>
 8001c94:	4a84      	ldr	r2, [pc, #528]	; (8001ea8 <HAL_GPIO_Init+0x294>)
 8001c96:	4293      	cmp	r3, r2
 8001c98:	d013      	beq.n	8001cc2 <HAL_GPIO_Init+0xae>
          break;
 8001c9a:	e02c      	b.n	8001cf6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	68db      	ldr	r3, [r3, #12]
 8001ca0:	623b      	str	r3, [r7, #32]
          break;
 8001ca2:	e028      	b.n	8001cf6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	68db      	ldr	r3, [r3, #12]
 8001ca8:	3304      	adds	r3, #4
 8001caa:	623b      	str	r3, [r7, #32]
          break;
 8001cac:	e023      	b.n	8001cf6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	68db      	ldr	r3, [r3, #12]
 8001cb2:	3308      	adds	r3, #8
 8001cb4:	623b      	str	r3, [r7, #32]
          break;
 8001cb6:	e01e      	b.n	8001cf6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	68db      	ldr	r3, [r3, #12]
 8001cbc:	330c      	adds	r3, #12
 8001cbe:	623b      	str	r3, [r7, #32]
          break;
 8001cc0:	e019      	b.n	8001cf6 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	689b      	ldr	r3, [r3, #8]
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d102      	bne.n	8001cd0 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001cca:	2304      	movs	r3, #4
 8001ccc:	623b      	str	r3, [r7, #32]
          break;
 8001cce:	e012      	b.n	8001cf6 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	689b      	ldr	r3, [r3, #8]
 8001cd4:	2b01      	cmp	r3, #1
 8001cd6:	d105      	bne.n	8001ce4 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001cd8:	2308      	movs	r3, #8
 8001cda:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	69fa      	ldr	r2, [r7, #28]
 8001ce0:	611a      	str	r2, [r3, #16]
          break;
 8001ce2:	e008      	b.n	8001cf6 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001ce4:	2308      	movs	r3, #8
 8001ce6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	69fa      	ldr	r2, [r7, #28]
 8001cec:	615a      	str	r2, [r3, #20]
          break;
 8001cee:	e002      	b.n	8001cf6 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	623b      	str	r3, [r7, #32]
          break;
 8001cf4:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001cf6:	69bb      	ldr	r3, [r7, #24]
 8001cf8:	2bff      	cmp	r3, #255	; 0xff
 8001cfa:	d801      	bhi.n	8001d00 <HAL_GPIO_Init+0xec>
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	e001      	b.n	8001d04 <HAL_GPIO_Init+0xf0>
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	3304      	adds	r3, #4
 8001d04:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001d06:	69bb      	ldr	r3, [r7, #24]
 8001d08:	2bff      	cmp	r3, #255	; 0xff
 8001d0a:	d802      	bhi.n	8001d12 <HAL_GPIO_Init+0xfe>
 8001d0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d0e:	009b      	lsls	r3, r3, #2
 8001d10:	e002      	b.n	8001d18 <HAL_GPIO_Init+0x104>
 8001d12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d14:	3b08      	subs	r3, #8
 8001d16:	009b      	lsls	r3, r3, #2
 8001d18:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001d1a:	697b      	ldr	r3, [r7, #20]
 8001d1c:	681a      	ldr	r2, [r3, #0]
 8001d1e:	210f      	movs	r1, #15
 8001d20:	693b      	ldr	r3, [r7, #16]
 8001d22:	fa01 f303 	lsl.w	r3, r1, r3
 8001d26:	43db      	mvns	r3, r3
 8001d28:	401a      	ands	r2, r3
 8001d2a:	6a39      	ldr	r1, [r7, #32]
 8001d2c:	693b      	ldr	r3, [r7, #16]
 8001d2e:	fa01 f303 	lsl.w	r3, r1, r3
 8001d32:	431a      	orrs	r2, r3
 8001d34:	697b      	ldr	r3, [r7, #20]
 8001d36:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001d38:	683b      	ldr	r3, [r7, #0]
 8001d3a:	685b      	ldr	r3, [r3, #4]
 8001d3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	f000 8096 	beq.w	8001e72 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001d46:	4b59      	ldr	r3, [pc, #356]	; (8001eac <HAL_GPIO_Init+0x298>)
 8001d48:	699b      	ldr	r3, [r3, #24]
 8001d4a:	4a58      	ldr	r2, [pc, #352]	; (8001eac <HAL_GPIO_Init+0x298>)
 8001d4c:	f043 0301 	orr.w	r3, r3, #1
 8001d50:	6193      	str	r3, [r2, #24]
 8001d52:	4b56      	ldr	r3, [pc, #344]	; (8001eac <HAL_GPIO_Init+0x298>)
 8001d54:	699b      	ldr	r3, [r3, #24]
 8001d56:	f003 0301 	and.w	r3, r3, #1
 8001d5a:	60bb      	str	r3, [r7, #8]
 8001d5c:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001d5e:	4a54      	ldr	r2, [pc, #336]	; (8001eb0 <HAL_GPIO_Init+0x29c>)
 8001d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d62:	089b      	lsrs	r3, r3, #2
 8001d64:	3302      	adds	r3, #2
 8001d66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d6a:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001d6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d6e:	f003 0303 	and.w	r3, r3, #3
 8001d72:	009b      	lsls	r3, r3, #2
 8001d74:	220f      	movs	r2, #15
 8001d76:	fa02 f303 	lsl.w	r3, r2, r3
 8001d7a:	43db      	mvns	r3, r3
 8001d7c:	68fa      	ldr	r2, [r7, #12]
 8001d7e:	4013      	ands	r3, r2
 8001d80:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	4a4b      	ldr	r2, [pc, #300]	; (8001eb4 <HAL_GPIO_Init+0x2a0>)
 8001d86:	4293      	cmp	r3, r2
 8001d88:	d013      	beq.n	8001db2 <HAL_GPIO_Init+0x19e>
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	4a4a      	ldr	r2, [pc, #296]	; (8001eb8 <HAL_GPIO_Init+0x2a4>)
 8001d8e:	4293      	cmp	r3, r2
 8001d90:	d00d      	beq.n	8001dae <HAL_GPIO_Init+0x19a>
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	4a49      	ldr	r2, [pc, #292]	; (8001ebc <HAL_GPIO_Init+0x2a8>)
 8001d96:	4293      	cmp	r3, r2
 8001d98:	d007      	beq.n	8001daa <HAL_GPIO_Init+0x196>
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	4a48      	ldr	r2, [pc, #288]	; (8001ec0 <HAL_GPIO_Init+0x2ac>)
 8001d9e:	4293      	cmp	r3, r2
 8001da0:	d101      	bne.n	8001da6 <HAL_GPIO_Init+0x192>
 8001da2:	2303      	movs	r3, #3
 8001da4:	e006      	b.n	8001db4 <HAL_GPIO_Init+0x1a0>
 8001da6:	2304      	movs	r3, #4
 8001da8:	e004      	b.n	8001db4 <HAL_GPIO_Init+0x1a0>
 8001daa:	2302      	movs	r3, #2
 8001dac:	e002      	b.n	8001db4 <HAL_GPIO_Init+0x1a0>
 8001dae:	2301      	movs	r3, #1
 8001db0:	e000      	b.n	8001db4 <HAL_GPIO_Init+0x1a0>
 8001db2:	2300      	movs	r3, #0
 8001db4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001db6:	f002 0203 	and.w	r2, r2, #3
 8001dba:	0092      	lsls	r2, r2, #2
 8001dbc:	4093      	lsls	r3, r2
 8001dbe:	68fa      	ldr	r2, [r7, #12]
 8001dc0:	4313      	orrs	r3, r2
 8001dc2:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001dc4:	493a      	ldr	r1, [pc, #232]	; (8001eb0 <HAL_GPIO_Init+0x29c>)
 8001dc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dc8:	089b      	lsrs	r3, r3, #2
 8001dca:	3302      	adds	r3, #2
 8001dcc:	68fa      	ldr	r2, [r7, #12]
 8001dce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001dd2:	683b      	ldr	r3, [r7, #0]
 8001dd4:	685b      	ldr	r3, [r3, #4]
 8001dd6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d006      	beq.n	8001dec <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001dde:	4b39      	ldr	r3, [pc, #228]	; (8001ec4 <HAL_GPIO_Init+0x2b0>)
 8001de0:	681a      	ldr	r2, [r3, #0]
 8001de2:	4938      	ldr	r1, [pc, #224]	; (8001ec4 <HAL_GPIO_Init+0x2b0>)
 8001de4:	69bb      	ldr	r3, [r7, #24]
 8001de6:	4313      	orrs	r3, r2
 8001de8:	600b      	str	r3, [r1, #0]
 8001dea:	e006      	b.n	8001dfa <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001dec:	4b35      	ldr	r3, [pc, #212]	; (8001ec4 <HAL_GPIO_Init+0x2b0>)
 8001dee:	681a      	ldr	r2, [r3, #0]
 8001df0:	69bb      	ldr	r3, [r7, #24]
 8001df2:	43db      	mvns	r3, r3
 8001df4:	4933      	ldr	r1, [pc, #204]	; (8001ec4 <HAL_GPIO_Init+0x2b0>)
 8001df6:	4013      	ands	r3, r2
 8001df8:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001dfa:	683b      	ldr	r3, [r7, #0]
 8001dfc:	685b      	ldr	r3, [r3, #4]
 8001dfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d006      	beq.n	8001e14 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001e06:	4b2f      	ldr	r3, [pc, #188]	; (8001ec4 <HAL_GPIO_Init+0x2b0>)
 8001e08:	685a      	ldr	r2, [r3, #4]
 8001e0a:	492e      	ldr	r1, [pc, #184]	; (8001ec4 <HAL_GPIO_Init+0x2b0>)
 8001e0c:	69bb      	ldr	r3, [r7, #24]
 8001e0e:	4313      	orrs	r3, r2
 8001e10:	604b      	str	r3, [r1, #4]
 8001e12:	e006      	b.n	8001e22 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001e14:	4b2b      	ldr	r3, [pc, #172]	; (8001ec4 <HAL_GPIO_Init+0x2b0>)
 8001e16:	685a      	ldr	r2, [r3, #4]
 8001e18:	69bb      	ldr	r3, [r7, #24]
 8001e1a:	43db      	mvns	r3, r3
 8001e1c:	4929      	ldr	r1, [pc, #164]	; (8001ec4 <HAL_GPIO_Init+0x2b0>)
 8001e1e:	4013      	ands	r3, r2
 8001e20:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001e22:	683b      	ldr	r3, [r7, #0]
 8001e24:	685b      	ldr	r3, [r3, #4]
 8001e26:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d006      	beq.n	8001e3c <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001e2e:	4b25      	ldr	r3, [pc, #148]	; (8001ec4 <HAL_GPIO_Init+0x2b0>)
 8001e30:	689a      	ldr	r2, [r3, #8]
 8001e32:	4924      	ldr	r1, [pc, #144]	; (8001ec4 <HAL_GPIO_Init+0x2b0>)
 8001e34:	69bb      	ldr	r3, [r7, #24]
 8001e36:	4313      	orrs	r3, r2
 8001e38:	608b      	str	r3, [r1, #8]
 8001e3a:	e006      	b.n	8001e4a <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001e3c:	4b21      	ldr	r3, [pc, #132]	; (8001ec4 <HAL_GPIO_Init+0x2b0>)
 8001e3e:	689a      	ldr	r2, [r3, #8]
 8001e40:	69bb      	ldr	r3, [r7, #24]
 8001e42:	43db      	mvns	r3, r3
 8001e44:	491f      	ldr	r1, [pc, #124]	; (8001ec4 <HAL_GPIO_Init+0x2b0>)
 8001e46:	4013      	ands	r3, r2
 8001e48:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001e4a:	683b      	ldr	r3, [r7, #0]
 8001e4c:	685b      	ldr	r3, [r3, #4]
 8001e4e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d006      	beq.n	8001e64 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001e56:	4b1b      	ldr	r3, [pc, #108]	; (8001ec4 <HAL_GPIO_Init+0x2b0>)
 8001e58:	68da      	ldr	r2, [r3, #12]
 8001e5a:	491a      	ldr	r1, [pc, #104]	; (8001ec4 <HAL_GPIO_Init+0x2b0>)
 8001e5c:	69bb      	ldr	r3, [r7, #24]
 8001e5e:	4313      	orrs	r3, r2
 8001e60:	60cb      	str	r3, [r1, #12]
 8001e62:	e006      	b.n	8001e72 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001e64:	4b17      	ldr	r3, [pc, #92]	; (8001ec4 <HAL_GPIO_Init+0x2b0>)
 8001e66:	68da      	ldr	r2, [r3, #12]
 8001e68:	69bb      	ldr	r3, [r7, #24]
 8001e6a:	43db      	mvns	r3, r3
 8001e6c:	4915      	ldr	r1, [pc, #84]	; (8001ec4 <HAL_GPIO_Init+0x2b0>)
 8001e6e:	4013      	ands	r3, r2
 8001e70:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001e72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e74:	3301      	adds	r3, #1
 8001e76:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	681a      	ldr	r2, [r3, #0]
 8001e7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e7e:	fa22 f303 	lsr.w	r3, r2, r3
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	f47f aed0 	bne.w	8001c28 <HAL_GPIO_Init+0x14>
  }
}
 8001e88:	bf00      	nop
 8001e8a:	372c      	adds	r7, #44	; 0x2c
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	bc80      	pop	{r7}
 8001e90:	4770      	bx	lr
 8001e92:	bf00      	nop
 8001e94:	10210000 	.word	0x10210000
 8001e98:	10110000 	.word	0x10110000
 8001e9c:	10120000 	.word	0x10120000
 8001ea0:	10310000 	.word	0x10310000
 8001ea4:	10320000 	.word	0x10320000
 8001ea8:	10220000 	.word	0x10220000
 8001eac:	40021000 	.word	0x40021000
 8001eb0:	40010000 	.word	0x40010000
 8001eb4:	40010800 	.word	0x40010800
 8001eb8:	40010c00 	.word	0x40010c00
 8001ebc:	40011000 	.word	0x40011000
 8001ec0:	40011400 	.word	0x40011400
 8001ec4:	40010400 	.word	0x40010400

08001ec8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	b083      	sub	sp, #12
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
 8001ed0:	460b      	mov	r3, r1
 8001ed2:	807b      	strh	r3, [r7, #2]
 8001ed4:	4613      	mov	r3, r2
 8001ed6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001ed8:	787b      	ldrb	r3, [r7, #1]
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d003      	beq.n	8001ee6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001ede:	887a      	ldrh	r2, [r7, #2]
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001ee4:	e003      	b.n	8001eee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001ee6:	887b      	ldrh	r3, [r7, #2]
 8001ee8:	041a      	lsls	r2, r3, #16
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	611a      	str	r2, [r3, #16]
}
 8001eee:	bf00      	nop
 8001ef0:	370c      	adds	r7, #12
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bc80      	pop	{r7}
 8001ef6:	4770      	bx	lr

08001ef8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b082      	sub	sp, #8
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	4603      	mov	r3, r0
 8001f00:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001f02:	4b08      	ldr	r3, [pc, #32]	; (8001f24 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001f04:	695a      	ldr	r2, [r3, #20]
 8001f06:	88fb      	ldrh	r3, [r7, #6]
 8001f08:	4013      	ands	r3, r2
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d006      	beq.n	8001f1c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001f0e:	4a05      	ldr	r2, [pc, #20]	; (8001f24 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001f10:	88fb      	ldrh	r3, [r7, #6]
 8001f12:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001f14:	88fb      	ldrh	r3, [r7, #6]
 8001f16:	4618      	mov	r0, r3
 8001f18:	f7fe fb7a 	bl	8000610 <HAL_GPIO_EXTI_Callback>
  }
}
 8001f1c:	bf00      	nop
 8001f1e:	3708      	adds	r7, #8
 8001f20:	46bd      	mov	sp, r7
 8001f22:	bd80      	pop	{r7, pc}
 8001f24:	40010400 	.word	0x40010400

08001f28 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001f28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f2a:	b08b      	sub	sp, #44	; 0x2c
 8001f2c:	af06      	add	r7, sp, #24
 8001f2e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d101      	bne.n	8001f3a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001f36:	2301      	movs	r3, #1
 8001f38:	e0fd      	b.n	8002136 <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8001f40:	b2db      	uxtb	r3, r3
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d106      	bne.n	8001f54 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	2200      	movs	r2, #0
 8001f4a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001f4e:	6878      	ldr	r0, [r7, #4]
 8001f50:	f005 ff74 	bl	8007e3c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	2203      	movs	r2, #3
 8001f58:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	4618      	mov	r0, r3
 8001f62:	f002 f989 	bl	8004278 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	603b      	str	r3, [r7, #0]
 8001f6c:	687e      	ldr	r6, [r7, #4]
 8001f6e:	466d      	mov	r5, sp
 8001f70:	f106 0410 	add.w	r4, r6, #16
 8001f74:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f76:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f78:	6823      	ldr	r3, [r4, #0]
 8001f7a:	602b      	str	r3, [r5, #0]
 8001f7c:	1d33      	adds	r3, r6, #4
 8001f7e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001f80:	6838      	ldr	r0, [r7, #0]
 8001f82:	f002 f953 	bl	800422c <USB_CoreInit>
 8001f86:	4603      	mov	r3, r0
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d005      	beq.n	8001f98 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	2202      	movs	r2, #2
 8001f90:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8001f94:	2301      	movs	r3, #1
 8001f96:	e0ce      	b.n	8002136 <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	2100      	movs	r1, #0
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	f002 f984 	bl	80042ac <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	73fb      	strb	r3, [r7, #15]
 8001fa8:	e04c      	b.n	8002044 <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001faa:	7bfb      	ldrb	r3, [r7, #15]
 8001fac:	6879      	ldr	r1, [r7, #4]
 8001fae:	1c5a      	adds	r2, r3, #1
 8001fb0:	4613      	mov	r3, r2
 8001fb2:	009b      	lsls	r3, r3, #2
 8001fb4:	4413      	add	r3, r2
 8001fb6:	00db      	lsls	r3, r3, #3
 8001fb8:	440b      	add	r3, r1
 8001fba:	3301      	adds	r3, #1
 8001fbc:	2201      	movs	r2, #1
 8001fbe:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001fc0:	7bfb      	ldrb	r3, [r7, #15]
 8001fc2:	6879      	ldr	r1, [r7, #4]
 8001fc4:	1c5a      	adds	r2, r3, #1
 8001fc6:	4613      	mov	r3, r2
 8001fc8:	009b      	lsls	r3, r3, #2
 8001fca:	4413      	add	r3, r2
 8001fcc:	00db      	lsls	r3, r3, #3
 8001fce:	440b      	add	r3, r1
 8001fd0:	7bfa      	ldrb	r2, [r7, #15]
 8001fd2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001fd4:	7bfa      	ldrb	r2, [r7, #15]
 8001fd6:	7bfb      	ldrb	r3, [r7, #15]
 8001fd8:	b298      	uxth	r0, r3
 8001fda:	6879      	ldr	r1, [r7, #4]
 8001fdc:	4613      	mov	r3, r2
 8001fde:	009b      	lsls	r3, r3, #2
 8001fe0:	4413      	add	r3, r2
 8001fe2:	00db      	lsls	r3, r3, #3
 8001fe4:	440b      	add	r3, r1
 8001fe6:	3336      	adds	r3, #54	; 0x36
 8001fe8:	4602      	mov	r2, r0
 8001fea:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001fec:	7bfb      	ldrb	r3, [r7, #15]
 8001fee:	6879      	ldr	r1, [r7, #4]
 8001ff0:	1c5a      	adds	r2, r3, #1
 8001ff2:	4613      	mov	r3, r2
 8001ff4:	009b      	lsls	r3, r3, #2
 8001ff6:	4413      	add	r3, r2
 8001ff8:	00db      	lsls	r3, r3, #3
 8001ffa:	440b      	add	r3, r1
 8001ffc:	3303      	adds	r3, #3
 8001ffe:	2200      	movs	r2, #0
 8002000:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002002:	7bfa      	ldrb	r2, [r7, #15]
 8002004:	6879      	ldr	r1, [r7, #4]
 8002006:	4613      	mov	r3, r2
 8002008:	009b      	lsls	r3, r3, #2
 800200a:	4413      	add	r3, r2
 800200c:	00db      	lsls	r3, r3, #3
 800200e:	440b      	add	r3, r1
 8002010:	3338      	adds	r3, #56	; 0x38
 8002012:	2200      	movs	r2, #0
 8002014:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002016:	7bfa      	ldrb	r2, [r7, #15]
 8002018:	6879      	ldr	r1, [r7, #4]
 800201a:	4613      	mov	r3, r2
 800201c:	009b      	lsls	r3, r3, #2
 800201e:	4413      	add	r3, r2
 8002020:	00db      	lsls	r3, r3, #3
 8002022:	440b      	add	r3, r1
 8002024:	333c      	adds	r3, #60	; 0x3c
 8002026:	2200      	movs	r2, #0
 8002028:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800202a:	7bfa      	ldrb	r2, [r7, #15]
 800202c:	6879      	ldr	r1, [r7, #4]
 800202e:	4613      	mov	r3, r2
 8002030:	009b      	lsls	r3, r3, #2
 8002032:	4413      	add	r3, r2
 8002034:	00db      	lsls	r3, r3, #3
 8002036:	440b      	add	r3, r1
 8002038:	3340      	adds	r3, #64	; 0x40
 800203a:	2200      	movs	r2, #0
 800203c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800203e:	7bfb      	ldrb	r3, [r7, #15]
 8002040:	3301      	adds	r3, #1
 8002042:	73fb      	strb	r3, [r7, #15]
 8002044:	7bfa      	ldrb	r2, [r7, #15]
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	685b      	ldr	r3, [r3, #4]
 800204a:	429a      	cmp	r2, r3
 800204c:	d3ad      	bcc.n	8001faa <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800204e:	2300      	movs	r3, #0
 8002050:	73fb      	strb	r3, [r7, #15]
 8002052:	e044      	b.n	80020de <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002054:	7bfa      	ldrb	r2, [r7, #15]
 8002056:	6879      	ldr	r1, [r7, #4]
 8002058:	4613      	mov	r3, r2
 800205a:	009b      	lsls	r3, r3, #2
 800205c:	4413      	add	r3, r2
 800205e:	00db      	lsls	r3, r3, #3
 8002060:	440b      	add	r3, r1
 8002062:	f203 1369 	addw	r3, r3, #361	; 0x169
 8002066:	2200      	movs	r2, #0
 8002068:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800206a:	7bfa      	ldrb	r2, [r7, #15]
 800206c:	6879      	ldr	r1, [r7, #4]
 800206e:	4613      	mov	r3, r2
 8002070:	009b      	lsls	r3, r3, #2
 8002072:	4413      	add	r3, r2
 8002074:	00db      	lsls	r3, r3, #3
 8002076:	440b      	add	r3, r1
 8002078:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800207c:	7bfa      	ldrb	r2, [r7, #15]
 800207e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002080:	7bfa      	ldrb	r2, [r7, #15]
 8002082:	6879      	ldr	r1, [r7, #4]
 8002084:	4613      	mov	r3, r2
 8002086:	009b      	lsls	r3, r3, #2
 8002088:	4413      	add	r3, r2
 800208a:	00db      	lsls	r3, r3, #3
 800208c:	440b      	add	r3, r1
 800208e:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8002092:	2200      	movs	r2, #0
 8002094:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002096:	7bfa      	ldrb	r2, [r7, #15]
 8002098:	6879      	ldr	r1, [r7, #4]
 800209a:	4613      	mov	r3, r2
 800209c:	009b      	lsls	r3, r3, #2
 800209e:	4413      	add	r3, r2
 80020a0:	00db      	lsls	r3, r3, #3
 80020a2:	440b      	add	r3, r1
 80020a4:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80020a8:	2200      	movs	r2, #0
 80020aa:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80020ac:	7bfa      	ldrb	r2, [r7, #15]
 80020ae:	6879      	ldr	r1, [r7, #4]
 80020b0:	4613      	mov	r3, r2
 80020b2:	009b      	lsls	r3, r3, #2
 80020b4:	4413      	add	r3, r2
 80020b6:	00db      	lsls	r3, r3, #3
 80020b8:	440b      	add	r3, r1
 80020ba:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80020be:	2200      	movs	r2, #0
 80020c0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80020c2:	7bfa      	ldrb	r2, [r7, #15]
 80020c4:	6879      	ldr	r1, [r7, #4]
 80020c6:	4613      	mov	r3, r2
 80020c8:	009b      	lsls	r3, r3, #2
 80020ca:	4413      	add	r3, r2
 80020cc:	00db      	lsls	r3, r3, #3
 80020ce:	440b      	add	r3, r1
 80020d0:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80020d4:	2200      	movs	r2, #0
 80020d6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80020d8:	7bfb      	ldrb	r3, [r7, #15]
 80020da:	3301      	adds	r3, #1
 80020dc:	73fb      	strb	r3, [r7, #15]
 80020de:	7bfa      	ldrb	r2, [r7, #15]
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	685b      	ldr	r3, [r3, #4]
 80020e4:	429a      	cmp	r2, r3
 80020e6:	d3b5      	bcc.n	8002054 <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	603b      	str	r3, [r7, #0]
 80020ee:	687e      	ldr	r6, [r7, #4]
 80020f0:	466d      	mov	r5, sp
 80020f2:	f106 0410 	add.w	r4, r6, #16
 80020f6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80020f8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80020fa:	6823      	ldr	r3, [r4, #0]
 80020fc:	602b      	str	r3, [r5, #0]
 80020fe:	1d33      	adds	r3, r6, #4
 8002100:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002102:	6838      	ldr	r0, [r7, #0]
 8002104:	f002 f8de 	bl	80042c4 <USB_DevInit>
 8002108:	4603      	mov	r3, r0
 800210a:	2b00      	cmp	r3, #0
 800210c:	d005      	beq.n	800211a <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	2202      	movs	r2, #2
 8002112:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8002116:	2301      	movs	r3, #1
 8002118:	e00d      	b.n	8002136 <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	2200      	movs	r2, #0
 800211e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	2201      	movs	r2, #1
 8002126:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	4618      	mov	r0, r3
 8002130:	f004 f878 	bl	8006224 <USB_DevDisconnect>

  return HAL_OK;
 8002134:	2300      	movs	r3, #0
}
 8002136:	4618      	mov	r0, r3
 8002138:	3714      	adds	r7, #20
 800213a:	46bd      	mov	sp, r7
 800213c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800213e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800213e:	b580      	push	{r7, lr}
 8002140:	b082      	sub	sp, #8
 8002142:	af00      	add	r7, sp, #0
 8002144:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800214c:	2b01      	cmp	r3, #1
 800214e:	d101      	bne.n	8002154 <HAL_PCD_Start+0x16>
 8002150:	2302      	movs	r3, #2
 8002152:	e016      	b.n	8002182 <HAL_PCD_Start+0x44>
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	2201      	movs	r2, #1
 8002158:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	4618      	mov	r0, r3
 8002162:	f002 f873 	bl	800424c <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8002166:	2101      	movs	r1, #1
 8002168:	6878      	ldr	r0, [r7, #4]
 800216a:	f006 f8e2 	bl	8008332 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	4618      	mov	r0, r3
 8002174:	f004 f84c 	bl	8006210 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	2200      	movs	r2, #0
 800217c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002180:	2300      	movs	r3, #0
}
 8002182:	4618      	mov	r0, r3
 8002184:	3708      	adds	r7, #8
 8002186:	46bd      	mov	sp, r7
 8002188:	bd80      	pop	{r7, pc}

0800218a <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800218a:	b580      	push	{r7, lr}
 800218c:	b088      	sub	sp, #32
 800218e:	af00      	add	r7, sp, #0
 8002190:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	4618      	mov	r0, r3
 8002198:	f004 f84e 	bl	8006238 <USB_ReadInterrupts>
 800219c:	4603      	mov	r3, r0
 800219e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80021a2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80021a6:	d102      	bne.n	80021ae <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80021a8:	6878      	ldr	r0, [r7, #4]
 80021aa:	f000 fb61 	bl	8002870 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	4618      	mov	r0, r3
 80021b4:	f004 f840 	bl	8006238 <USB_ReadInterrupts>
 80021b8:	4603      	mov	r3, r0
 80021ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80021c2:	d112      	bne.n	80021ea <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80021cc:	b29a      	uxth	r2, r3
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80021d6:	b292      	uxth	r2, r2
 80021d8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80021dc:	6878      	ldr	r0, [r7, #4]
 80021de:	f005 feb0 	bl	8007f42 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80021e2:	2100      	movs	r1, #0
 80021e4:	6878      	ldr	r0, [r7, #4]
 80021e6:	f000 f925 	bl	8002434 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	4618      	mov	r0, r3
 80021f0:	f004 f822 	bl	8006238 <USB_ReadInterrupts>
 80021f4:	4603      	mov	r3, r0
 80021f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021fa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80021fe:	d10b      	bne.n	8002218 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002208:	b29a      	uxth	r2, r3
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002212:	b292      	uxth	r2, r2
 8002214:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	4618      	mov	r0, r3
 800221e:	f004 f80b 	bl	8006238 <USB_ReadInterrupts>
 8002222:	4603      	mov	r3, r0
 8002224:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002228:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800222c:	d10b      	bne.n	8002246 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002236:	b29a      	uxth	r2, r3
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002240:	b292      	uxth	r2, r2
 8002242:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	4618      	mov	r0, r3
 800224c:	f003 fff4 	bl	8006238 <USB_ReadInterrupts>
 8002250:	4603      	mov	r3, r0
 8002252:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002256:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800225a:	d126      	bne.n	80022aa <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002264:	b29a      	uxth	r2, r3
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f022 0204 	bic.w	r2, r2, #4
 800226e:	b292      	uxth	r2, r2
 8002270:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800227c:	b29a      	uxth	r2, r3
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f022 0208 	bic.w	r2, r2, #8
 8002286:	b292      	uxth	r2, r2
 8002288:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 800228c:	6878      	ldr	r0, [r7, #4]
 800228e:	f005 fe91 	bl	8007fb4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800229a:	b29a      	uxth	r2, r3
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80022a4:	b292      	uxth	r2, r2
 80022a6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	4618      	mov	r0, r3
 80022b0:	f003 ffc2 	bl	8006238 <USB_ReadInterrupts>
 80022b4:	4603      	mov	r3, r0
 80022b6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80022ba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80022be:	f040 8084 	bne.w	80023ca <HAL_PCD_IRQHandler+0x240>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 80022c2:	2300      	movs	r3, #0
 80022c4:	77fb      	strb	r3, [r7, #31]
 80022c6:	e011      	b.n	80022ec <HAL_PCD_IRQHandler+0x162>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	461a      	mov	r2, r3
 80022ce:	7ffb      	ldrb	r3, [r7, #31]
 80022d0:	009b      	lsls	r3, r3, #2
 80022d2:	441a      	add	r2, r3
 80022d4:	7ffb      	ldrb	r3, [r7, #31]
 80022d6:	8812      	ldrh	r2, [r2, #0]
 80022d8:	b292      	uxth	r2, r2
 80022da:	005b      	lsls	r3, r3, #1
 80022dc:	f107 0120 	add.w	r1, r7, #32
 80022e0:	440b      	add	r3, r1
 80022e2:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 80022e6:	7ffb      	ldrb	r3, [r7, #31]
 80022e8:	3301      	adds	r3, #1
 80022ea:	77fb      	strb	r3, [r7, #31]
 80022ec:	7ffb      	ldrb	r3, [r7, #31]
 80022ee:	2b07      	cmp	r3, #7
 80022f0:	d9ea      	bls.n	80022c8 <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80022fa:	b29a      	uxth	r2, r3
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f042 0201 	orr.w	r2, r2, #1
 8002304:	b292      	uxth	r2, r2
 8002306:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002312:	b29a      	uxth	r2, r3
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f022 0201 	bic.w	r2, r2, #1
 800231c:	b292      	uxth	r2, r2
 800231e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8002322:	bf00      	nop
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800232c:	b29b      	uxth	r3, r3
 800232e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002332:	2b00      	cmp	r3, #0
 8002334:	d0f6      	beq.n	8002324 <HAL_PCD_IRQHandler+0x19a>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800233e:	b29a      	uxth	r2, r3
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002348:	b292      	uxth	r2, r2
 800234a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 800234e:	2300      	movs	r3, #0
 8002350:	77fb      	strb	r3, [r7, #31]
 8002352:	e010      	b.n	8002376 <HAL_PCD_IRQHandler+0x1ec>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8002354:	7ffb      	ldrb	r3, [r7, #31]
 8002356:	687a      	ldr	r2, [r7, #4]
 8002358:	6812      	ldr	r2, [r2, #0]
 800235a:	4611      	mov	r1, r2
 800235c:	7ffa      	ldrb	r2, [r7, #31]
 800235e:	0092      	lsls	r2, r2, #2
 8002360:	440a      	add	r2, r1
 8002362:	005b      	lsls	r3, r3, #1
 8002364:	f107 0120 	add.w	r1, r7, #32
 8002368:	440b      	add	r3, r1
 800236a:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 800236e:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8002370:	7ffb      	ldrb	r3, [r7, #31]
 8002372:	3301      	adds	r3, #1
 8002374:	77fb      	strb	r3, [r7, #31]
 8002376:	7ffb      	ldrb	r3, [r7, #31]
 8002378:	2b07      	cmp	r3, #7
 800237a:	d9eb      	bls.n	8002354 <HAL_PCD_IRQHandler+0x1ca>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002384:	b29a      	uxth	r2, r3
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f042 0208 	orr.w	r2, r2, #8
 800238e:	b292      	uxth	r2, r2
 8002390:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800239c:	b29a      	uxth	r2, r3
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80023a6:	b292      	uxth	r2, r2
 80023a8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80023b4:	b29a      	uxth	r2, r3
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f042 0204 	orr.w	r2, r2, #4
 80023be:	b292      	uxth	r2, r2
 80023c0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80023c4:	6878      	ldr	r0, [r7, #4]
 80023c6:	f005 fddb 	bl	8007f80 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	4618      	mov	r0, r3
 80023d0:	f003 ff32 	bl	8006238 <USB_ReadInterrupts>
 80023d4:	4603      	mov	r3, r0
 80023d6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80023da:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80023de:	d10e      	bne.n	80023fe <HAL_PCD_IRQHandler+0x274>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80023e8:	b29a      	uxth	r2, r3
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80023f2:	b292      	uxth	r2, r2
 80023f4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80023f8:	6878      	ldr	r0, [r7, #4]
 80023fa:	f005 fd94 	bl	8007f26 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	4618      	mov	r0, r3
 8002404:	f003 ff18 	bl	8006238 <USB_ReadInterrupts>
 8002408:	4603      	mov	r3, r0
 800240a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800240e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002412:	d10b      	bne.n	800242c <HAL_PCD_IRQHandler+0x2a2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800241c:	b29a      	uxth	r2, r3
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002426:	b292      	uxth	r2, r2
 8002428:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 800242c:	bf00      	nop
 800242e:	3720      	adds	r7, #32
 8002430:	46bd      	mov	sp, r7
 8002432:	bd80      	pop	{r7, pc}

08002434 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	b082      	sub	sp, #8
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
 800243c:	460b      	mov	r3, r1
 800243e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002446:	2b01      	cmp	r3, #1
 8002448:	d101      	bne.n	800244e <HAL_PCD_SetAddress+0x1a>
 800244a:	2302      	movs	r3, #2
 800244c:	e013      	b.n	8002476 <HAL_PCD_SetAddress+0x42>
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	2201      	movs	r2, #1
 8002452:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	78fa      	ldrb	r2, [r7, #3]
 800245a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	78fa      	ldrb	r2, [r7, #3]
 8002464:	4611      	mov	r1, r2
 8002466:	4618      	mov	r0, r3
 8002468:	f003 febf 	bl	80061ea <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	2200      	movs	r2, #0
 8002470:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002474:	2300      	movs	r3, #0
}
 8002476:	4618      	mov	r0, r3
 8002478:	3708      	adds	r7, #8
 800247a:	46bd      	mov	sp, r7
 800247c:	bd80      	pop	{r7, pc}

0800247e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800247e:	b580      	push	{r7, lr}
 8002480:	b084      	sub	sp, #16
 8002482:	af00      	add	r7, sp, #0
 8002484:	6078      	str	r0, [r7, #4]
 8002486:	4608      	mov	r0, r1
 8002488:	4611      	mov	r1, r2
 800248a:	461a      	mov	r2, r3
 800248c:	4603      	mov	r3, r0
 800248e:	70fb      	strb	r3, [r7, #3]
 8002490:	460b      	mov	r3, r1
 8002492:	803b      	strh	r3, [r7, #0]
 8002494:	4613      	mov	r3, r2
 8002496:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002498:	2300      	movs	r3, #0
 800249a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800249c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	da0e      	bge.n	80024c2 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80024a4:	78fb      	ldrb	r3, [r7, #3]
 80024a6:	f003 0307 	and.w	r3, r3, #7
 80024aa:	1c5a      	adds	r2, r3, #1
 80024ac:	4613      	mov	r3, r2
 80024ae:	009b      	lsls	r3, r3, #2
 80024b0:	4413      	add	r3, r2
 80024b2:	00db      	lsls	r3, r3, #3
 80024b4:	687a      	ldr	r2, [r7, #4]
 80024b6:	4413      	add	r3, r2
 80024b8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	2201      	movs	r2, #1
 80024be:	705a      	strb	r2, [r3, #1]
 80024c0:	e00e      	b.n	80024e0 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80024c2:	78fb      	ldrb	r3, [r7, #3]
 80024c4:	f003 0207 	and.w	r2, r3, #7
 80024c8:	4613      	mov	r3, r2
 80024ca:	009b      	lsls	r3, r3, #2
 80024cc:	4413      	add	r3, r2
 80024ce:	00db      	lsls	r3, r3, #3
 80024d0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80024d4:	687a      	ldr	r2, [r7, #4]
 80024d6:	4413      	add	r3, r2
 80024d8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	2200      	movs	r2, #0
 80024de:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80024e0:	78fb      	ldrb	r3, [r7, #3]
 80024e2:	f003 0307 	and.w	r3, r3, #7
 80024e6:	b2da      	uxtb	r2, r3
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80024ec:	883a      	ldrh	r2, [r7, #0]
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	78ba      	ldrb	r2, [r7, #2]
 80024f6:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	785b      	ldrb	r3, [r3, #1]
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d004      	beq.n	800250a <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	781b      	ldrb	r3, [r3, #0]
 8002504:	b29a      	uxth	r2, r3
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800250a:	78bb      	ldrb	r3, [r7, #2]
 800250c:	2b02      	cmp	r3, #2
 800250e:	d102      	bne.n	8002516 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	2200      	movs	r2, #0
 8002514:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800251c:	2b01      	cmp	r3, #1
 800251e:	d101      	bne.n	8002524 <HAL_PCD_EP_Open+0xa6>
 8002520:	2302      	movs	r3, #2
 8002522:	e00e      	b.n	8002542 <HAL_PCD_EP_Open+0xc4>
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	2201      	movs	r2, #1
 8002528:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	68f9      	ldr	r1, [r7, #12]
 8002532:	4618      	mov	r0, r3
 8002534:	f001 fee6 	bl	8004304 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	2200      	movs	r2, #0
 800253c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8002540:	7afb      	ldrb	r3, [r7, #11]
}
 8002542:	4618      	mov	r0, r3
 8002544:	3710      	adds	r7, #16
 8002546:	46bd      	mov	sp, r7
 8002548:	bd80      	pop	{r7, pc}

0800254a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800254a:	b580      	push	{r7, lr}
 800254c:	b084      	sub	sp, #16
 800254e:	af00      	add	r7, sp, #0
 8002550:	6078      	str	r0, [r7, #4]
 8002552:	460b      	mov	r3, r1
 8002554:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002556:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800255a:	2b00      	cmp	r3, #0
 800255c:	da0e      	bge.n	800257c <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800255e:	78fb      	ldrb	r3, [r7, #3]
 8002560:	f003 0307 	and.w	r3, r3, #7
 8002564:	1c5a      	adds	r2, r3, #1
 8002566:	4613      	mov	r3, r2
 8002568:	009b      	lsls	r3, r3, #2
 800256a:	4413      	add	r3, r2
 800256c:	00db      	lsls	r3, r3, #3
 800256e:	687a      	ldr	r2, [r7, #4]
 8002570:	4413      	add	r3, r2
 8002572:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	2201      	movs	r2, #1
 8002578:	705a      	strb	r2, [r3, #1]
 800257a:	e00e      	b.n	800259a <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800257c:	78fb      	ldrb	r3, [r7, #3]
 800257e:	f003 0207 	and.w	r2, r3, #7
 8002582:	4613      	mov	r3, r2
 8002584:	009b      	lsls	r3, r3, #2
 8002586:	4413      	add	r3, r2
 8002588:	00db      	lsls	r3, r3, #3
 800258a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800258e:	687a      	ldr	r2, [r7, #4]
 8002590:	4413      	add	r3, r2
 8002592:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	2200      	movs	r2, #0
 8002598:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800259a:	78fb      	ldrb	r3, [r7, #3]
 800259c:	f003 0307 	and.w	r3, r3, #7
 80025a0:	b2da      	uxtb	r2, r3
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80025ac:	2b01      	cmp	r3, #1
 80025ae:	d101      	bne.n	80025b4 <HAL_PCD_EP_Close+0x6a>
 80025b0:	2302      	movs	r3, #2
 80025b2:	e00e      	b.n	80025d2 <HAL_PCD_EP_Close+0x88>
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	2201      	movs	r2, #1
 80025b8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	68f9      	ldr	r1, [r7, #12]
 80025c2:	4618      	mov	r0, r3
 80025c4:	f002 fa08 	bl	80049d8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	2200      	movs	r2, #0
 80025cc:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 80025d0:	2300      	movs	r3, #0
}
 80025d2:	4618      	mov	r0, r3
 80025d4:	3710      	adds	r7, #16
 80025d6:	46bd      	mov	sp, r7
 80025d8:	bd80      	pop	{r7, pc}

080025da <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80025da:	b580      	push	{r7, lr}
 80025dc:	b086      	sub	sp, #24
 80025de:	af00      	add	r7, sp, #0
 80025e0:	60f8      	str	r0, [r7, #12]
 80025e2:	607a      	str	r2, [r7, #4]
 80025e4:	603b      	str	r3, [r7, #0]
 80025e6:	460b      	mov	r3, r1
 80025e8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80025ea:	7afb      	ldrb	r3, [r7, #11]
 80025ec:	f003 0207 	and.w	r2, r3, #7
 80025f0:	4613      	mov	r3, r2
 80025f2:	009b      	lsls	r3, r3, #2
 80025f4:	4413      	add	r3, r2
 80025f6:	00db      	lsls	r3, r3, #3
 80025f8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80025fc:	68fa      	ldr	r2, [r7, #12]
 80025fe:	4413      	add	r3, r2
 8002600:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002602:	697b      	ldr	r3, [r7, #20]
 8002604:	687a      	ldr	r2, [r7, #4]
 8002606:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002608:	697b      	ldr	r3, [r7, #20]
 800260a:	683a      	ldr	r2, [r7, #0]
 800260c:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800260e:	697b      	ldr	r3, [r7, #20]
 8002610:	2200      	movs	r2, #0
 8002612:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8002614:	697b      	ldr	r3, [r7, #20]
 8002616:	2200      	movs	r2, #0
 8002618:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800261a:	7afb      	ldrb	r3, [r7, #11]
 800261c:	f003 0307 	and.w	r3, r3, #7
 8002620:	b2da      	uxtb	r2, r3
 8002622:	697b      	ldr	r3, [r7, #20]
 8002624:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002626:	7afb      	ldrb	r3, [r7, #11]
 8002628:	f003 0307 	and.w	r3, r3, #7
 800262c:	2b00      	cmp	r3, #0
 800262e:	d106      	bne.n	800263e <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	6979      	ldr	r1, [r7, #20]
 8002636:	4618      	mov	r0, r3
 8002638:	f002 fbba 	bl	8004db0 <USB_EPStartXfer>
 800263c:	e005      	b.n	800264a <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	6979      	ldr	r1, [r7, #20]
 8002644:	4618      	mov	r0, r3
 8002646:	f002 fbb3 	bl	8004db0 <USB_EPStartXfer>
  }

  return HAL_OK;
 800264a:	2300      	movs	r3, #0
}
 800264c:	4618      	mov	r0, r3
 800264e:	3718      	adds	r7, #24
 8002650:	46bd      	mov	sp, r7
 8002652:	bd80      	pop	{r7, pc}

08002654 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002654:	b480      	push	{r7}
 8002656:	b083      	sub	sp, #12
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
 800265c:	460b      	mov	r3, r1
 800265e:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002660:	78fb      	ldrb	r3, [r7, #3]
 8002662:	f003 0207 	and.w	r2, r3, #7
 8002666:	6879      	ldr	r1, [r7, #4]
 8002668:	4613      	mov	r3, r2
 800266a:	009b      	lsls	r3, r3, #2
 800266c:	4413      	add	r3, r2
 800266e:	00db      	lsls	r3, r3, #3
 8002670:	440b      	add	r3, r1
 8002672:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8002676:	681b      	ldr	r3, [r3, #0]
}
 8002678:	4618      	mov	r0, r3
 800267a:	370c      	adds	r7, #12
 800267c:	46bd      	mov	sp, r7
 800267e:	bc80      	pop	{r7}
 8002680:	4770      	bx	lr

08002682 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002682:	b580      	push	{r7, lr}
 8002684:	b086      	sub	sp, #24
 8002686:	af00      	add	r7, sp, #0
 8002688:	60f8      	str	r0, [r7, #12]
 800268a:	607a      	str	r2, [r7, #4]
 800268c:	603b      	str	r3, [r7, #0]
 800268e:	460b      	mov	r3, r1
 8002690:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002692:	7afb      	ldrb	r3, [r7, #11]
 8002694:	f003 0307 	and.w	r3, r3, #7
 8002698:	1c5a      	adds	r2, r3, #1
 800269a:	4613      	mov	r3, r2
 800269c:	009b      	lsls	r3, r3, #2
 800269e:	4413      	add	r3, r2
 80026a0:	00db      	lsls	r3, r3, #3
 80026a2:	68fa      	ldr	r2, [r7, #12]
 80026a4:	4413      	add	r3, r2
 80026a6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80026a8:	697b      	ldr	r3, [r7, #20]
 80026aa:	687a      	ldr	r2, [r7, #4]
 80026ac:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80026ae:	697b      	ldr	r3, [r7, #20]
 80026b0:	683a      	ldr	r2, [r7, #0]
 80026b2:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 80026b4:	697b      	ldr	r3, [r7, #20]
 80026b6:	2201      	movs	r2, #1
 80026b8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 80026bc:	697b      	ldr	r3, [r7, #20]
 80026be:	683a      	ldr	r2, [r7, #0]
 80026c0:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 80026c2:	697b      	ldr	r3, [r7, #20]
 80026c4:	2200      	movs	r2, #0
 80026c6:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80026c8:	697b      	ldr	r3, [r7, #20]
 80026ca:	2201      	movs	r2, #1
 80026cc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80026ce:	7afb      	ldrb	r3, [r7, #11]
 80026d0:	f003 0307 	and.w	r3, r3, #7
 80026d4:	b2da      	uxtb	r2, r3
 80026d6:	697b      	ldr	r3, [r7, #20]
 80026d8:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80026da:	7afb      	ldrb	r3, [r7, #11]
 80026dc:	f003 0307 	and.w	r3, r3, #7
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d106      	bne.n	80026f2 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	6979      	ldr	r1, [r7, #20]
 80026ea:	4618      	mov	r0, r3
 80026ec:	f002 fb60 	bl	8004db0 <USB_EPStartXfer>
 80026f0:	e005      	b.n	80026fe <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	6979      	ldr	r1, [r7, #20]
 80026f8:	4618      	mov	r0, r3
 80026fa:	f002 fb59 	bl	8004db0 <USB_EPStartXfer>
  }

  return HAL_OK;
 80026fe:	2300      	movs	r3, #0
}
 8002700:	4618      	mov	r0, r3
 8002702:	3718      	adds	r7, #24
 8002704:	46bd      	mov	sp, r7
 8002706:	bd80      	pop	{r7, pc}

08002708 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	b084      	sub	sp, #16
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
 8002710:	460b      	mov	r3, r1
 8002712:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002714:	78fb      	ldrb	r3, [r7, #3]
 8002716:	f003 0207 	and.w	r2, r3, #7
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	685b      	ldr	r3, [r3, #4]
 800271e:	429a      	cmp	r2, r3
 8002720:	d901      	bls.n	8002726 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002722:	2301      	movs	r3, #1
 8002724:	e04c      	b.n	80027c0 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002726:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800272a:	2b00      	cmp	r3, #0
 800272c:	da0e      	bge.n	800274c <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800272e:	78fb      	ldrb	r3, [r7, #3]
 8002730:	f003 0307 	and.w	r3, r3, #7
 8002734:	1c5a      	adds	r2, r3, #1
 8002736:	4613      	mov	r3, r2
 8002738:	009b      	lsls	r3, r3, #2
 800273a:	4413      	add	r3, r2
 800273c:	00db      	lsls	r3, r3, #3
 800273e:	687a      	ldr	r2, [r7, #4]
 8002740:	4413      	add	r3, r2
 8002742:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	2201      	movs	r2, #1
 8002748:	705a      	strb	r2, [r3, #1]
 800274a:	e00c      	b.n	8002766 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800274c:	78fa      	ldrb	r2, [r7, #3]
 800274e:	4613      	mov	r3, r2
 8002750:	009b      	lsls	r3, r3, #2
 8002752:	4413      	add	r3, r2
 8002754:	00db      	lsls	r3, r3, #3
 8002756:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800275a:	687a      	ldr	r2, [r7, #4]
 800275c:	4413      	add	r3, r2
 800275e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	2200      	movs	r2, #0
 8002764:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	2201      	movs	r2, #1
 800276a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800276c:	78fb      	ldrb	r3, [r7, #3]
 800276e:	f003 0307 	and.w	r3, r3, #7
 8002772:	b2da      	uxtb	r2, r3
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800277e:	2b01      	cmp	r3, #1
 8002780:	d101      	bne.n	8002786 <HAL_PCD_EP_SetStall+0x7e>
 8002782:	2302      	movs	r3, #2
 8002784:	e01c      	b.n	80027c0 <HAL_PCD_EP_SetStall+0xb8>
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	2201      	movs	r2, #1
 800278a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	68f9      	ldr	r1, [r7, #12]
 8002794:	4618      	mov	r0, r3
 8002796:	f003 fc2b 	bl	8005ff0 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800279a:	78fb      	ldrb	r3, [r7, #3]
 800279c:	f003 0307 	and.w	r3, r3, #7
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d108      	bne.n	80027b6 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681a      	ldr	r2, [r3, #0]
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 80027ae:	4619      	mov	r1, r3
 80027b0:	4610      	mov	r0, r2
 80027b2:	f003 fd50 	bl	8006256 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	2200      	movs	r2, #0
 80027ba:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80027be:	2300      	movs	r3, #0
}
 80027c0:	4618      	mov	r0, r3
 80027c2:	3710      	adds	r7, #16
 80027c4:	46bd      	mov	sp, r7
 80027c6:	bd80      	pop	{r7, pc}

080027c8 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b084      	sub	sp, #16
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
 80027d0:	460b      	mov	r3, r1
 80027d2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80027d4:	78fb      	ldrb	r3, [r7, #3]
 80027d6:	f003 020f 	and.w	r2, r3, #15
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	685b      	ldr	r3, [r3, #4]
 80027de:	429a      	cmp	r2, r3
 80027e0:	d901      	bls.n	80027e6 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80027e2:	2301      	movs	r3, #1
 80027e4:	e040      	b.n	8002868 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80027e6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	da0e      	bge.n	800280c <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80027ee:	78fb      	ldrb	r3, [r7, #3]
 80027f0:	f003 0307 	and.w	r3, r3, #7
 80027f4:	1c5a      	adds	r2, r3, #1
 80027f6:	4613      	mov	r3, r2
 80027f8:	009b      	lsls	r3, r3, #2
 80027fa:	4413      	add	r3, r2
 80027fc:	00db      	lsls	r3, r3, #3
 80027fe:	687a      	ldr	r2, [r7, #4]
 8002800:	4413      	add	r3, r2
 8002802:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	2201      	movs	r2, #1
 8002808:	705a      	strb	r2, [r3, #1]
 800280a:	e00e      	b.n	800282a <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800280c:	78fb      	ldrb	r3, [r7, #3]
 800280e:	f003 0207 	and.w	r2, r3, #7
 8002812:	4613      	mov	r3, r2
 8002814:	009b      	lsls	r3, r3, #2
 8002816:	4413      	add	r3, r2
 8002818:	00db      	lsls	r3, r3, #3
 800281a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800281e:	687a      	ldr	r2, [r7, #4]
 8002820:	4413      	add	r3, r2
 8002822:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	2200      	movs	r2, #0
 8002828:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	2200      	movs	r2, #0
 800282e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002830:	78fb      	ldrb	r3, [r7, #3]
 8002832:	f003 0307 	and.w	r3, r3, #7
 8002836:	b2da      	uxtb	r2, r3
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002842:	2b01      	cmp	r3, #1
 8002844:	d101      	bne.n	800284a <HAL_PCD_EP_ClrStall+0x82>
 8002846:	2302      	movs	r3, #2
 8002848:	e00e      	b.n	8002868 <HAL_PCD_EP_ClrStall+0xa0>
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	2201      	movs	r2, #1
 800284e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	68f9      	ldr	r1, [r7, #12]
 8002858:	4618      	mov	r0, r3
 800285a:	f003 fc19 	bl	8006090 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	2200      	movs	r2, #0
 8002862:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002866:	2300      	movs	r3, #0
}
 8002868:	4618      	mov	r0, r3
 800286a:	3710      	adds	r7, #16
 800286c:	46bd      	mov	sp, r7
 800286e:	bd80      	pop	{r7, pc}

08002870 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	b08e      	sub	sp, #56	; 0x38
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002878:	e2df      	b.n	8002e3a <PCD_EP_ISR_Handler+0x5ca>
  {
    wIstr = hpcd->Instance->ISTR;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002882:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8002884:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002886:	b2db      	uxtb	r3, r3
 8002888:	f003 030f 	and.w	r3, r3, #15
 800288c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8002890:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002894:	2b00      	cmp	r3, #0
 8002896:	f040 8158 	bne.w	8002b4a <PCD_EP_ISR_Handler+0x2da>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800289a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800289c:	f003 0310 	and.w	r3, r3, #16
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d152      	bne.n	800294a <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	881b      	ldrh	r3, [r3, #0]
 80028aa:	b29b      	uxth	r3, r3
 80028ac:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80028b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028b4:	81fb      	strh	r3, [r7, #14]
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681a      	ldr	r2, [r3, #0]
 80028ba:	89fb      	ldrh	r3, [r7, #14]
 80028bc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80028c0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80028c4:	b29b      	uxth	r3, r3
 80028c6:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	3328      	adds	r3, #40	; 0x28
 80028cc:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80028d6:	b29b      	uxth	r3, r3
 80028d8:	461a      	mov	r2, r3
 80028da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028dc:	781b      	ldrb	r3, [r3, #0]
 80028de:	00db      	lsls	r3, r3, #3
 80028e0:	4413      	add	r3, r2
 80028e2:	3302      	adds	r3, #2
 80028e4:	005b      	lsls	r3, r3, #1
 80028e6:	687a      	ldr	r2, [r7, #4]
 80028e8:	6812      	ldr	r2, [r2, #0]
 80028ea:	4413      	add	r3, r2
 80028ec:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80028f0:	881b      	ldrh	r3, [r3, #0]
 80028f2:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80028f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028f8:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80028fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028fc:	695a      	ldr	r2, [r3, #20]
 80028fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002900:	69db      	ldr	r3, [r3, #28]
 8002902:	441a      	add	r2, r3
 8002904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002906:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8002908:	2100      	movs	r1, #0
 800290a:	6878      	ldr	r0, [r7, #4]
 800290c:	f005 faf1 	bl	8007ef2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002916:	b2db      	uxtb	r3, r3
 8002918:	2b00      	cmp	r3, #0
 800291a:	f000 828e 	beq.w	8002e3a <PCD_EP_ISR_Handler+0x5ca>
 800291e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002920:	699b      	ldr	r3, [r3, #24]
 8002922:	2b00      	cmp	r3, #0
 8002924:	f040 8289 	bne.w	8002e3a <PCD_EP_ISR_Handler+0x5ca>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800292e:	b2db      	uxtb	r3, r3
 8002930:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002934:	b2da      	uxtb	r2, r3
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	b292      	uxth	r2, r2
 800293c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2200      	movs	r2, #0
 8002944:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002948:	e277      	b.n	8002e3a <PCD_EP_ISR_Handler+0x5ca>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002950:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	881b      	ldrh	r3, [r3, #0]
 8002958:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800295a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800295c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002960:	2b00      	cmp	r3, #0
 8002962:	d034      	beq.n	80029ce <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800296c:	b29b      	uxth	r3, r3
 800296e:	461a      	mov	r2, r3
 8002970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002972:	781b      	ldrb	r3, [r3, #0]
 8002974:	00db      	lsls	r3, r3, #3
 8002976:	4413      	add	r3, r2
 8002978:	3306      	adds	r3, #6
 800297a:	005b      	lsls	r3, r3, #1
 800297c:	687a      	ldr	r2, [r7, #4]
 800297e:	6812      	ldr	r2, [r2, #0]
 8002980:	4413      	add	r3, r2
 8002982:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002986:	881b      	ldrh	r3, [r3, #0]
 8002988:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800298c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800298e:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	6818      	ldr	r0, [r3, #0]
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 800299a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800299c:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800299e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029a0:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80029a2:	b29b      	uxth	r3, r3
 80029a4:	f003 fca6 	bl	80062f4 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	881b      	ldrh	r3, [r3, #0]
 80029ae:	b29a      	uxth	r2, r3
 80029b0:	f640 738f 	movw	r3, #3983	; 0xf8f
 80029b4:	4013      	ands	r3, r2
 80029b6:	823b      	strh	r3, [r7, #16]
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	8a3a      	ldrh	r2, [r7, #16]
 80029be:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80029c2:	b292      	uxth	r2, r2
 80029c4:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80029c6:	6878      	ldr	r0, [r7, #4]
 80029c8:	f005 fa66 	bl	8007e98 <HAL_PCD_SetupStageCallback>
 80029cc:	e235      	b.n	8002e3a <PCD_EP_ISR_Handler+0x5ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80029ce:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	f280 8231 	bge.w	8002e3a <PCD_EP_ISR_Handler+0x5ca>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	881b      	ldrh	r3, [r3, #0]
 80029de:	b29a      	uxth	r2, r3
 80029e0:	f640 738f 	movw	r3, #3983	; 0xf8f
 80029e4:	4013      	ands	r3, r2
 80029e6:	83bb      	strh	r3, [r7, #28]
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	8bba      	ldrh	r2, [r7, #28]
 80029ee:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80029f2:	b292      	uxth	r2, r2
 80029f4:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80029fe:	b29b      	uxth	r3, r3
 8002a00:	461a      	mov	r2, r3
 8002a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a04:	781b      	ldrb	r3, [r3, #0]
 8002a06:	00db      	lsls	r3, r3, #3
 8002a08:	4413      	add	r3, r2
 8002a0a:	3306      	adds	r3, #6
 8002a0c:	005b      	lsls	r3, r3, #1
 8002a0e:	687a      	ldr	r2, [r7, #4]
 8002a10:	6812      	ldr	r2, [r2, #0]
 8002a12:	4413      	add	r3, r2
 8002a14:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002a18:	881b      	ldrh	r3, [r3, #0]
 8002a1a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002a1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a20:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8002a22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a24:	69db      	ldr	r3, [r3, #28]
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d019      	beq.n	8002a5e <PCD_EP_ISR_Handler+0x1ee>
 8002a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a2c:	695b      	ldr	r3, [r3, #20]
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d015      	beq.n	8002a5e <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	6818      	ldr	r0, [r3, #0]
 8002a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a38:	6959      	ldr	r1, [r3, #20]
 8002a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a3c:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8002a3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a40:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002a42:	b29b      	uxth	r3, r3
 8002a44:	f003 fc56 	bl	80062f4 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8002a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a4a:	695a      	ldr	r2, [r3, #20]
 8002a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a4e:	69db      	ldr	r3, [r3, #28]
 8002a50:	441a      	add	r2, r3
 8002a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a54:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8002a56:	2100      	movs	r1, #0
 8002a58:	6878      	ldr	r0, [r7, #4]
 8002a5a:	f005 fa2f 	bl	8007ebc <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	61bb      	str	r3, [r7, #24]
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002a6c:	b29b      	uxth	r3, r3
 8002a6e:	461a      	mov	r2, r3
 8002a70:	69bb      	ldr	r3, [r7, #24]
 8002a72:	4413      	add	r3, r2
 8002a74:	61bb      	str	r3, [r7, #24]
 8002a76:	69bb      	ldr	r3, [r7, #24]
 8002a78:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002a7c:	617b      	str	r3, [r7, #20]
 8002a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a80:	691b      	ldr	r3, [r3, #16]
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d112      	bne.n	8002aac <PCD_EP_ISR_Handler+0x23c>
 8002a86:	697b      	ldr	r3, [r7, #20]
 8002a88:	881b      	ldrh	r3, [r3, #0]
 8002a8a:	b29b      	uxth	r3, r3
 8002a8c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002a90:	b29a      	uxth	r2, r3
 8002a92:	697b      	ldr	r3, [r7, #20]
 8002a94:	801a      	strh	r2, [r3, #0]
 8002a96:	697b      	ldr	r3, [r7, #20]
 8002a98:	881b      	ldrh	r3, [r3, #0]
 8002a9a:	b29b      	uxth	r3, r3
 8002a9c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002aa0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002aa4:	b29a      	uxth	r2, r3
 8002aa6:	697b      	ldr	r3, [r7, #20]
 8002aa8:	801a      	strh	r2, [r3, #0]
 8002aaa:	e02f      	b.n	8002b0c <PCD_EP_ISR_Handler+0x29c>
 8002aac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aae:	691b      	ldr	r3, [r3, #16]
 8002ab0:	2b3e      	cmp	r3, #62	; 0x3e
 8002ab2:	d813      	bhi.n	8002adc <PCD_EP_ISR_Handler+0x26c>
 8002ab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ab6:	691b      	ldr	r3, [r3, #16]
 8002ab8:	085b      	lsrs	r3, r3, #1
 8002aba:	633b      	str	r3, [r7, #48]	; 0x30
 8002abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002abe:	691b      	ldr	r3, [r3, #16]
 8002ac0:	f003 0301 	and.w	r3, r3, #1
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d002      	beq.n	8002ace <PCD_EP_ISR_Handler+0x25e>
 8002ac8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002aca:	3301      	adds	r3, #1
 8002acc:	633b      	str	r3, [r7, #48]	; 0x30
 8002ace:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ad0:	b29b      	uxth	r3, r3
 8002ad2:	029b      	lsls	r3, r3, #10
 8002ad4:	b29a      	uxth	r2, r3
 8002ad6:	697b      	ldr	r3, [r7, #20]
 8002ad8:	801a      	strh	r2, [r3, #0]
 8002ada:	e017      	b.n	8002b0c <PCD_EP_ISR_Handler+0x29c>
 8002adc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ade:	691b      	ldr	r3, [r3, #16]
 8002ae0:	095b      	lsrs	r3, r3, #5
 8002ae2:	633b      	str	r3, [r7, #48]	; 0x30
 8002ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ae6:	691b      	ldr	r3, [r3, #16]
 8002ae8:	f003 031f 	and.w	r3, r3, #31
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d102      	bne.n	8002af6 <PCD_EP_ISR_Handler+0x286>
 8002af0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002af2:	3b01      	subs	r3, #1
 8002af4:	633b      	str	r3, [r7, #48]	; 0x30
 8002af6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002af8:	b29b      	uxth	r3, r3
 8002afa:	029b      	lsls	r3, r3, #10
 8002afc:	b29b      	uxth	r3, r3
 8002afe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002b02:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002b06:	b29a      	uxth	r2, r3
 8002b08:	697b      	ldr	r3, [r7, #20]
 8002b0a:	801a      	strh	r2, [r3, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	881b      	ldrh	r3, [r3, #0]
 8002b12:	b29b      	uxth	r3, r3
 8002b14:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002b18:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b1c:	827b      	strh	r3, [r7, #18]
 8002b1e:	8a7b      	ldrh	r3, [r7, #18]
 8002b20:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8002b24:	827b      	strh	r3, [r7, #18]
 8002b26:	8a7b      	ldrh	r3, [r7, #18]
 8002b28:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002b2c:	827b      	strh	r3, [r7, #18]
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681a      	ldr	r2, [r3, #0]
 8002b32:	8a7b      	ldrh	r3, [r7, #18]
 8002b34:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002b38:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002b3c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002b40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b44:	b29b      	uxth	r3, r3
 8002b46:	8013      	strh	r3, [r2, #0]
 8002b48:	e177      	b.n	8002e3a <PCD_EP_ISR_Handler+0x5ca>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	461a      	mov	r2, r3
 8002b50:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002b54:	009b      	lsls	r3, r3, #2
 8002b56:	4413      	add	r3, r2
 8002b58:	881b      	ldrh	r3, [r3, #0]
 8002b5a:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002b5c:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	f280 80ea 	bge.w	8002d3a <PCD_EP_ISR_Handler+0x4ca>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	461a      	mov	r2, r3
 8002b6c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002b70:	009b      	lsls	r3, r3, #2
 8002b72:	4413      	add	r3, r2
 8002b74:	881b      	ldrh	r3, [r3, #0]
 8002b76:	b29a      	uxth	r2, r3
 8002b78:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002b7c:	4013      	ands	r3, r2
 8002b7e:	853b      	strh	r3, [r7, #40]	; 0x28
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	461a      	mov	r2, r3
 8002b86:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002b8a:	009b      	lsls	r3, r3, #2
 8002b8c:	4413      	add	r3, r2
 8002b8e:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8002b90:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002b94:	b292      	uxth	r2, r2
 8002b96:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8002b98:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8002b9c:	4613      	mov	r3, r2
 8002b9e:	009b      	lsls	r3, r3, #2
 8002ba0:	4413      	add	r3, r2
 8002ba2:	00db      	lsls	r3, r3, #3
 8002ba4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002ba8:	687a      	ldr	r2, [r7, #4]
 8002baa:	4413      	add	r3, r2
 8002bac:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8002bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bb0:	7b1b      	ldrb	r3, [r3, #12]
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d122      	bne.n	8002bfc <PCD_EP_ISR_Handler+0x38c>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002bbe:	b29b      	uxth	r3, r3
 8002bc0:	461a      	mov	r2, r3
 8002bc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bc4:	781b      	ldrb	r3, [r3, #0]
 8002bc6:	00db      	lsls	r3, r3, #3
 8002bc8:	4413      	add	r3, r2
 8002bca:	3306      	adds	r3, #6
 8002bcc:	005b      	lsls	r3, r3, #1
 8002bce:	687a      	ldr	r2, [r7, #4]
 8002bd0:	6812      	ldr	r2, [r2, #0]
 8002bd2:	4413      	add	r3, r2
 8002bd4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002bd8:	881b      	ldrh	r3, [r3, #0]
 8002bda:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002bde:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 8002be0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	f000 8087 	beq.w	8002cf6 <PCD_EP_ISR_Handler+0x486>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	6818      	ldr	r0, [r3, #0]
 8002bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bee:	6959      	ldr	r1, [r3, #20]
 8002bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bf2:	88da      	ldrh	r2, [r3, #6]
 8002bf4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002bf6:	f003 fb7d 	bl	80062f4 <USB_ReadPMA>
 8002bfa:	e07c      	b.n	8002cf6 <PCD_EP_ISR_Handler+0x486>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8002bfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bfe:	78db      	ldrb	r3, [r3, #3]
 8002c00:	2b02      	cmp	r3, #2
 8002c02:	d108      	bne.n	8002c16 <PCD_EP_ISR_Handler+0x3a6>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8002c04:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002c06:	461a      	mov	r2, r3
 8002c08:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002c0a:	6878      	ldr	r0, [r7, #4]
 8002c0c:	f000 f923 	bl	8002e56 <HAL_PCD_EP_DB_Receive>
 8002c10:	4603      	mov	r3, r0
 8002c12:	86fb      	strh	r3, [r7, #54]	; 0x36
 8002c14:	e06f      	b.n	8002cf6 <PCD_EP_ISR_Handler+0x486>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	461a      	mov	r2, r3
 8002c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c1e:	781b      	ldrb	r3, [r3, #0]
 8002c20:	009b      	lsls	r3, r3, #2
 8002c22:	4413      	add	r3, r2
 8002c24:	881b      	ldrh	r3, [r3, #0]
 8002c26:	b29b      	uxth	r3, r3
 8002c28:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002c2c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c30:	847b      	strh	r3, [r7, #34]	; 0x22
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	461a      	mov	r2, r3
 8002c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c3a:	781b      	ldrb	r3, [r3, #0]
 8002c3c:	009b      	lsls	r3, r3, #2
 8002c3e:	441a      	add	r2, r3
 8002c40:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002c42:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002c46:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002c4a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002c4e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002c52:	b29b      	uxth	r3, r3
 8002c54:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	461a      	mov	r2, r3
 8002c5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c5e:	781b      	ldrb	r3, [r3, #0]
 8002c60:	009b      	lsls	r3, r3, #2
 8002c62:	4413      	add	r3, r2
 8002c64:	881b      	ldrh	r3, [r3, #0]
 8002c66:	b29b      	uxth	r3, r3
 8002c68:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d021      	beq.n	8002cb4 <PCD_EP_ISR_Handler+0x444>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002c78:	b29b      	uxth	r3, r3
 8002c7a:	461a      	mov	r2, r3
 8002c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c7e:	781b      	ldrb	r3, [r3, #0]
 8002c80:	00db      	lsls	r3, r3, #3
 8002c82:	4413      	add	r3, r2
 8002c84:	3302      	adds	r3, #2
 8002c86:	005b      	lsls	r3, r3, #1
 8002c88:	687a      	ldr	r2, [r7, #4]
 8002c8a:	6812      	ldr	r2, [r2, #0]
 8002c8c:	4413      	add	r3, r2
 8002c8e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002c92:	881b      	ldrh	r3, [r3, #0]
 8002c94:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002c98:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8002c9a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d02a      	beq.n	8002cf6 <PCD_EP_ISR_Handler+0x486>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	6818      	ldr	r0, [r3, #0]
 8002ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ca6:	6959      	ldr	r1, [r3, #20]
 8002ca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002caa:	891a      	ldrh	r2, [r3, #8]
 8002cac:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002cae:	f003 fb21 	bl	80062f4 <USB_ReadPMA>
 8002cb2:	e020      	b.n	8002cf6 <PCD_EP_ISR_Handler+0x486>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002cbc:	b29b      	uxth	r3, r3
 8002cbe:	461a      	mov	r2, r3
 8002cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cc2:	781b      	ldrb	r3, [r3, #0]
 8002cc4:	00db      	lsls	r3, r3, #3
 8002cc6:	4413      	add	r3, r2
 8002cc8:	3306      	adds	r3, #6
 8002cca:	005b      	lsls	r3, r3, #1
 8002ccc:	687a      	ldr	r2, [r7, #4]
 8002cce:	6812      	ldr	r2, [r2, #0]
 8002cd0:	4413      	add	r3, r2
 8002cd2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002cd6:	881b      	ldrh	r3, [r3, #0]
 8002cd8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002cdc:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8002cde:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d008      	beq.n	8002cf6 <PCD_EP_ISR_Handler+0x486>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6818      	ldr	r0, [r3, #0]
 8002ce8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cea:	6959      	ldr	r1, [r3, #20]
 8002cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cee:	895a      	ldrh	r2, [r3, #10]
 8002cf0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002cf2:	f003 faff 	bl	80062f4 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8002cf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cf8:	69da      	ldr	r2, [r3, #28]
 8002cfa:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002cfc:	441a      	add	r2, r3
 8002cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d00:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8002d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d04:	695a      	ldr	r2, [r3, #20]
 8002d06:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002d08:	441a      	add	r2, r3
 8002d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d0c:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8002d0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d10:	699b      	ldr	r3, [r3, #24]
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d004      	beq.n	8002d20 <PCD_EP_ISR_Handler+0x4b0>
 8002d16:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8002d18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d1a:	691b      	ldr	r3, [r3, #16]
 8002d1c:	429a      	cmp	r2, r3
 8002d1e:	d206      	bcs.n	8002d2e <PCD_EP_ISR_Handler+0x4be>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8002d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d22:	781b      	ldrb	r3, [r3, #0]
 8002d24:	4619      	mov	r1, r3
 8002d26:	6878      	ldr	r0, [r7, #4]
 8002d28:	f005 f8c8 	bl	8007ebc <HAL_PCD_DataOutStageCallback>
 8002d2c:	e005      	b.n	8002d3a <PCD_EP_ISR_Handler+0x4ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002d34:	4618      	mov	r0, r3
 8002d36:	f002 f83b 	bl	8004db0 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8002d3a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002d3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d07a      	beq.n	8002e3a <PCD_EP_ISR_Handler+0x5ca>
      {
        ep = &hpcd->IN_ep[epindex];
 8002d44:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002d48:	1c5a      	adds	r2, r3, #1
 8002d4a:	4613      	mov	r3, r2
 8002d4c:	009b      	lsls	r3, r3, #2
 8002d4e:	4413      	add	r3, r2
 8002d50:	00db      	lsls	r3, r3, #3
 8002d52:	687a      	ldr	r2, [r7, #4]
 8002d54:	4413      	add	r3, r2
 8002d56:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	461a      	mov	r2, r3
 8002d5e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002d62:	009b      	lsls	r3, r3, #2
 8002d64:	4413      	add	r3, r2
 8002d66:	881b      	ldrh	r3, [r3, #0]
 8002d68:	b29b      	uxth	r3, r3
 8002d6a:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002d6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d72:	843b      	strh	r3, [r7, #32]
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	461a      	mov	r2, r3
 8002d7a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002d7e:	009b      	lsls	r3, r3, #2
 8002d80:	441a      	add	r2, r3
 8002d82:	8c3b      	ldrh	r3, [r7, #32]
 8002d84:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002d88:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002d8c:	b29b      	uxth	r3, r3
 8002d8e:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk transaction or Bulk Single Buffer Transaction */
        if ((ep->type != EP_TYPE_BULK) ||
 8002d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d92:	78db      	ldrb	r3, [r3, #3]
 8002d94:	2b02      	cmp	r3, #2
 8002d96:	d108      	bne.n	8002daa <PCD_EP_ISR_Handler+0x53a>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8002d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d9a:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type != EP_TYPE_BULK) ||
 8002d9c:	2b02      	cmp	r3, #2
 8002d9e:	d146      	bne.n	8002e2e <PCD_EP_ISR_Handler+0x5be>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8002da0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002da2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d141      	bne.n	8002e2e <PCD_EP_ISR_Handler+0x5be>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002db2:	b29b      	uxth	r3, r3
 8002db4:	461a      	mov	r2, r3
 8002db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002db8:	781b      	ldrb	r3, [r3, #0]
 8002dba:	00db      	lsls	r3, r3, #3
 8002dbc:	4413      	add	r3, r2
 8002dbe:	3302      	adds	r3, #2
 8002dc0:	005b      	lsls	r3, r3, #1
 8002dc2:	687a      	ldr	r2, [r7, #4]
 8002dc4:	6812      	ldr	r2, [r2, #0]
 8002dc6:	4413      	add	r3, r2
 8002dc8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002dcc:	881b      	ldrh	r3, [r3, #0]
 8002dce:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002dd2:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 8002dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dd6:	699a      	ldr	r2, [r3, #24]
 8002dd8:	8bfb      	ldrh	r3, [r7, #30]
 8002dda:	429a      	cmp	r2, r3
 8002ddc:	d906      	bls.n	8002dec <PCD_EP_ISR_Handler+0x57c>
          {
            ep->xfer_len -= TxByteNbre;
 8002dde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002de0:	699a      	ldr	r2, [r3, #24]
 8002de2:	8bfb      	ldrh	r3, [r7, #30]
 8002de4:	1ad2      	subs	r2, r2, r3
 8002de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002de8:	619a      	str	r2, [r3, #24]
 8002dea:	e002      	b.n	8002df2 <PCD_EP_ISR_Handler+0x582>
          }
          else
          {
            ep->xfer_len = 0U;
 8002dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dee:	2200      	movs	r2, #0
 8002df0:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8002df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002df4:	699b      	ldr	r3, [r3, #24]
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d106      	bne.n	8002e08 <PCD_EP_ISR_Handler+0x598>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dfc:	781b      	ldrb	r3, [r3, #0]
 8002dfe:	4619      	mov	r1, r3
 8002e00:	6878      	ldr	r0, [r7, #4]
 8002e02:	f005 f876 	bl	8007ef2 <HAL_PCD_DataInStageCallback>
 8002e06:	e018      	b.n	8002e3a <PCD_EP_ISR_Handler+0x5ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 8002e08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e0a:	695a      	ldr	r2, [r3, #20]
 8002e0c:	8bfb      	ldrh	r3, [r7, #30]
 8002e0e:	441a      	add	r2, r3
 8002e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e12:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 8002e14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e16:	69da      	ldr	r2, [r3, #28]
 8002e18:	8bfb      	ldrh	r3, [r7, #30]
 8002e1a:	441a      	add	r2, r3
 8002e1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e1e:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002e26:	4618      	mov	r0, r3
 8002e28:	f001 ffc2 	bl	8004db0 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8002e2c:	e005      	b.n	8002e3a <PCD_EP_ISR_Handler+0x5ca>
          }
        }
        /* bulk in double buffer enable in case of transferLen> Ep_Mps */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8002e2e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002e30:	461a      	mov	r2, r3
 8002e32:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002e34:	6878      	ldr	r0, [r7, #4]
 8002e36:	f000 f91b 	bl	8003070 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002e42:	b29b      	uxth	r3, r3
 8002e44:	b21b      	sxth	r3, r3
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	f6ff ad17 	blt.w	800287a <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8002e4c:	2300      	movs	r3, #0
}
 8002e4e:	4618      	mov	r0, r3
 8002e50:	3738      	adds	r7, #56	; 0x38
 8002e52:	46bd      	mov	sp, r7
 8002e54:	bd80      	pop	{r7, pc}

08002e56 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002e56:	b580      	push	{r7, lr}
 8002e58:	b088      	sub	sp, #32
 8002e5a:	af00      	add	r7, sp, #0
 8002e5c:	60f8      	str	r0, [r7, #12]
 8002e5e:	60b9      	str	r1, [r7, #8]
 8002e60:	4613      	mov	r3, r2
 8002e62:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002e64:	88fb      	ldrh	r3, [r7, #6]
 8002e66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d07e      	beq.n	8002f6c <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002e76:	b29b      	uxth	r3, r3
 8002e78:	461a      	mov	r2, r3
 8002e7a:	68bb      	ldr	r3, [r7, #8]
 8002e7c:	781b      	ldrb	r3, [r3, #0]
 8002e7e:	00db      	lsls	r3, r3, #3
 8002e80:	4413      	add	r3, r2
 8002e82:	3302      	adds	r3, #2
 8002e84:	005b      	lsls	r3, r3, #1
 8002e86:	68fa      	ldr	r2, [r7, #12]
 8002e88:	6812      	ldr	r2, [r2, #0]
 8002e8a:	4413      	add	r3, r2
 8002e8c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002e90:	881b      	ldrh	r3, [r3, #0]
 8002e92:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002e96:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002e98:	68bb      	ldr	r3, [r7, #8]
 8002e9a:	699a      	ldr	r2, [r3, #24]
 8002e9c:	8b7b      	ldrh	r3, [r7, #26]
 8002e9e:	429a      	cmp	r2, r3
 8002ea0:	d306      	bcc.n	8002eb0 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8002ea2:	68bb      	ldr	r3, [r7, #8]
 8002ea4:	699a      	ldr	r2, [r3, #24]
 8002ea6:	8b7b      	ldrh	r3, [r7, #26]
 8002ea8:	1ad2      	subs	r2, r2, r3
 8002eaa:	68bb      	ldr	r3, [r7, #8]
 8002eac:	619a      	str	r2, [r3, #24]
 8002eae:	e002      	b.n	8002eb6 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8002eb0:	68bb      	ldr	r3, [r7, #8]
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002eb6:	68bb      	ldr	r3, [r7, #8]
 8002eb8:	699b      	ldr	r3, [r3, #24]
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d123      	bne.n	8002f06 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	461a      	mov	r2, r3
 8002ec4:	68bb      	ldr	r3, [r7, #8]
 8002ec6:	781b      	ldrb	r3, [r3, #0]
 8002ec8:	009b      	lsls	r3, r3, #2
 8002eca:	4413      	add	r3, r2
 8002ecc:	881b      	ldrh	r3, [r3, #0]
 8002ece:	b29b      	uxth	r3, r3
 8002ed0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002ed4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ed8:	833b      	strh	r3, [r7, #24]
 8002eda:	8b3b      	ldrh	r3, [r7, #24]
 8002edc:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002ee0:	833b      	strh	r3, [r7, #24]
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	461a      	mov	r2, r3
 8002ee8:	68bb      	ldr	r3, [r7, #8]
 8002eea:	781b      	ldrb	r3, [r3, #0]
 8002eec:	009b      	lsls	r3, r3, #2
 8002eee:	441a      	add	r2, r3
 8002ef0:	8b3b      	ldrh	r3, [r7, #24]
 8002ef2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002ef6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002efa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002efe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f02:	b29b      	uxth	r3, r3
 8002f04:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002f06:	88fb      	ldrh	r3, [r7, #6]
 8002f08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d01f      	beq.n	8002f50 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	461a      	mov	r2, r3
 8002f16:	68bb      	ldr	r3, [r7, #8]
 8002f18:	781b      	ldrb	r3, [r3, #0]
 8002f1a:	009b      	lsls	r3, r3, #2
 8002f1c:	4413      	add	r3, r2
 8002f1e:	881b      	ldrh	r3, [r3, #0]
 8002f20:	b29b      	uxth	r3, r3
 8002f22:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002f26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f2a:	82fb      	strh	r3, [r7, #22]
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	461a      	mov	r2, r3
 8002f32:	68bb      	ldr	r3, [r7, #8]
 8002f34:	781b      	ldrb	r3, [r3, #0]
 8002f36:	009b      	lsls	r3, r3, #2
 8002f38:	441a      	add	r2, r3
 8002f3a:	8afb      	ldrh	r3, [r7, #22]
 8002f3c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002f40:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002f44:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002f48:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002f4c:	b29b      	uxth	r3, r3
 8002f4e:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002f50:	8b7b      	ldrh	r3, [r7, #26]
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	f000 8087 	beq.w	8003066 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	6818      	ldr	r0, [r3, #0]
 8002f5c:	68bb      	ldr	r3, [r7, #8]
 8002f5e:	6959      	ldr	r1, [r3, #20]
 8002f60:	68bb      	ldr	r3, [r7, #8]
 8002f62:	891a      	ldrh	r2, [r3, #8]
 8002f64:	8b7b      	ldrh	r3, [r7, #26]
 8002f66:	f003 f9c5 	bl	80062f4 <USB_ReadPMA>
 8002f6a:	e07c      	b.n	8003066 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002f74:	b29b      	uxth	r3, r3
 8002f76:	461a      	mov	r2, r3
 8002f78:	68bb      	ldr	r3, [r7, #8]
 8002f7a:	781b      	ldrb	r3, [r3, #0]
 8002f7c:	00db      	lsls	r3, r3, #3
 8002f7e:	4413      	add	r3, r2
 8002f80:	3306      	adds	r3, #6
 8002f82:	005b      	lsls	r3, r3, #1
 8002f84:	68fa      	ldr	r2, [r7, #12]
 8002f86:	6812      	ldr	r2, [r2, #0]
 8002f88:	4413      	add	r3, r2
 8002f8a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002f8e:	881b      	ldrh	r3, [r3, #0]
 8002f90:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002f94:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002f96:	68bb      	ldr	r3, [r7, #8]
 8002f98:	699a      	ldr	r2, [r3, #24]
 8002f9a:	8b7b      	ldrh	r3, [r7, #26]
 8002f9c:	429a      	cmp	r2, r3
 8002f9e:	d306      	bcc.n	8002fae <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8002fa0:	68bb      	ldr	r3, [r7, #8]
 8002fa2:	699a      	ldr	r2, [r3, #24]
 8002fa4:	8b7b      	ldrh	r3, [r7, #26]
 8002fa6:	1ad2      	subs	r2, r2, r3
 8002fa8:	68bb      	ldr	r3, [r7, #8]
 8002faa:	619a      	str	r2, [r3, #24]
 8002fac:	e002      	b.n	8002fb4 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8002fae:	68bb      	ldr	r3, [r7, #8]
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002fb4:	68bb      	ldr	r3, [r7, #8]
 8002fb6:	699b      	ldr	r3, [r3, #24]
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d123      	bne.n	8003004 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	461a      	mov	r2, r3
 8002fc2:	68bb      	ldr	r3, [r7, #8]
 8002fc4:	781b      	ldrb	r3, [r3, #0]
 8002fc6:	009b      	lsls	r3, r3, #2
 8002fc8:	4413      	add	r3, r2
 8002fca:	881b      	ldrh	r3, [r3, #0]
 8002fcc:	b29b      	uxth	r3, r3
 8002fce:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002fd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002fd6:	83fb      	strh	r3, [r7, #30]
 8002fd8:	8bfb      	ldrh	r3, [r7, #30]
 8002fda:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002fde:	83fb      	strh	r3, [r7, #30]
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	461a      	mov	r2, r3
 8002fe6:	68bb      	ldr	r3, [r7, #8]
 8002fe8:	781b      	ldrb	r3, [r3, #0]
 8002fea:	009b      	lsls	r3, r3, #2
 8002fec:	441a      	add	r2, r3
 8002fee:	8bfb      	ldrh	r3, [r7, #30]
 8002ff0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002ff4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002ff8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002ffc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003000:	b29b      	uxth	r3, r3
 8003002:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8003004:	88fb      	ldrh	r3, [r7, #6]
 8003006:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800300a:	2b00      	cmp	r3, #0
 800300c:	d11f      	bne.n	800304e <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	461a      	mov	r2, r3
 8003014:	68bb      	ldr	r3, [r7, #8]
 8003016:	781b      	ldrb	r3, [r3, #0]
 8003018:	009b      	lsls	r3, r3, #2
 800301a:	4413      	add	r3, r2
 800301c:	881b      	ldrh	r3, [r3, #0]
 800301e:	b29b      	uxth	r3, r3
 8003020:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003024:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003028:	83bb      	strh	r3, [r7, #28]
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	461a      	mov	r2, r3
 8003030:	68bb      	ldr	r3, [r7, #8]
 8003032:	781b      	ldrb	r3, [r3, #0]
 8003034:	009b      	lsls	r3, r3, #2
 8003036:	441a      	add	r2, r3
 8003038:	8bbb      	ldrh	r3, [r7, #28]
 800303a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800303e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003042:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003046:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800304a:	b29b      	uxth	r3, r3
 800304c:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800304e:	8b7b      	ldrh	r3, [r7, #26]
 8003050:	2b00      	cmp	r3, #0
 8003052:	d008      	beq.n	8003066 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	6818      	ldr	r0, [r3, #0]
 8003058:	68bb      	ldr	r3, [r7, #8]
 800305a:	6959      	ldr	r1, [r3, #20]
 800305c:	68bb      	ldr	r3, [r7, #8]
 800305e:	895a      	ldrh	r2, [r3, #10]
 8003060:	8b7b      	ldrh	r3, [r7, #26]
 8003062:	f003 f947 	bl	80062f4 <USB_ReadPMA>
    }
  }

  return count;
 8003066:	8b7b      	ldrh	r3, [r7, #26]
}
 8003068:	4618      	mov	r0, r3
 800306a:	3720      	adds	r7, #32
 800306c:	46bd      	mov	sp, r7
 800306e:	bd80      	pop	{r7, pc}

08003070 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003070:	b580      	push	{r7, lr}
 8003072:	b092      	sub	sp, #72	; 0x48
 8003074:	af00      	add	r7, sp, #0
 8003076:	60f8      	str	r0, [r7, #12]
 8003078:	60b9      	str	r1, [r7, #8]
 800307a:	4613      	mov	r3, r2
 800307c:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800307e:	88fb      	ldrh	r3, [r7, #6]
 8003080:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003084:	2b00      	cmp	r3, #0
 8003086:	f000 8132 	beq.w	80032ee <HAL_PCD_EP_DB_Transmit+0x27e>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003092:	b29b      	uxth	r3, r3
 8003094:	461a      	mov	r2, r3
 8003096:	68bb      	ldr	r3, [r7, #8]
 8003098:	781b      	ldrb	r3, [r3, #0]
 800309a:	00db      	lsls	r3, r3, #3
 800309c:	4413      	add	r3, r2
 800309e:	3302      	adds	r3, #2
 80030a0:	005b      	lsls	r3, r3, #1
 80030a2:	68fa      	ldr	r2, [r7, #12]
 80030a4:	6812      	ldr	r2, [r2, #0]
 80030a6:	4413      	add	r3, r2
 80030a8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80030ac:	881b      	ldrh	r3, [r3, #0]
 80030ae:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80030b2:	85fb      	strh	r3, [r7, #46]	; 0x2e

    if (ep->xfer_len > TxByteNbre)
 80030b4:	68bb      	ldr	r3, [r7, #8]
 80030b6:	699a      	ldr	r2, [r3, #24]
 80030b8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80030ba:	429a      	cmp	r2, r3
 80030bc:	d906      	bls.n	80030cc <HAL_PCD_EP_DB_Transmit+0x5c>
    {
      ep->xfer_len -= TxByteNbre;
 80030be:	68bb      	ldr	r3, [r7, #8]
 80030c0:	699a      	ldr	r2, [r3, #24]
 80030c2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80030c4:	1ad2      	subs	r2, r2, r3
 80030c6:	68bb      	ldr	r3, [r7, #8]
 80030c8:	619a      	str	r2, [r3, #24]
 80030ca:	e002      	b.n	80030d2 <HAL_PCD_EP_DB_Transmit+0x62>
    }
    else
    {
      ep->xfer_len = 0U;
 80030cc:	68bb      	ldr	r3, [r7, #8]
 80030ce:	2200      	movs	r2, #0
 80030d0:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80030d2:	68bb      	ldr	r3, [r7, #8]
 80030d4:	699b      	ldr	r3, [r3, #24]
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d12c      	bne.n	8003134 <HAL_PCD_EP_DB_Transmit+0xc4>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80030da:	68bb      	ldr	r3, [r7, #8]
 80030dc:	781b      	ldrb	r3, [r3, #0]
 80030de:	4619      	mov	r1, r3
 80030e0:	68f8      	ldr	r0, [r7, #12]
 80030e2:	f004 ff06 	bl	8007ef2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80030e6:	88fb      	ldrh	r3, [r7, #6]
 80030e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	f000 822f 	beq.w	8003550 <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	461a      	mov	r2, r3
 80030f8:	68bb      	ldr	r3, [r7, #8]
 80030fa:	781b      	ldrb	r3, [r3, #0]
 80030fc:	009b      	lsls	r3, r3, #2
 80030fe:	4413      	add	r3, r2
 8003100:	881b      	ldrh	r3, [r3, #0]
 8003102:	b29b      	uxth	r3, r3
 8003104:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003108:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800310c:	827b      	strh	r3, [r7, #18]
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	461a      	mov	r2, r3
 8003114:	68bb      	ldr	r3, [r7, #8]
 8003116:	781b      	ldrb	r3, [r3, #0]
 8003118:	009b      	lsls	r3, r3, #2
 800311a:	441a      	add	r2, r3
 800311c:	8a7b      	ldrh	r3, [r7, #18]
 800311e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003122:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003126:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800312a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800312e:	b29b      	uxth	r3, r3
 8003130:	8013      	strh	r3, [r2, #0]
 8003132:	e20d      	b.n	8003550 <HAL_PCD_EP_DB_Transmit+0x4e0>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003134:	88fb      	ldrh	r3, [r7, #6]
 8003136:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800313a:	2b00      	cmp	r3, #0
 800313c:	d01f      	beq.n	800317e <HAL_PCD_EP_DB_Transmit+0x10e>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	461a      	mov	r2, r3
 8003144:	68bb      	ldr	r3, [r7, #8]
 8003146:	781b      	ldrb	r3, [r3, #0]
 8003148:	009b      	lsls	r3, r3, #2
 800314a:	4413      	add	r3, r2
 800314c:	881b      	ldrh	r3, [r3, #0]
 800314e:	b29b      	uxth	r3, r3
 8003150:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003154:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003158:	84bb      	strh	r3, [r7, #36]	; 0x24
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	461a      	mov	r2, r3
 8003160:	68bb      	ldr	r3, [r7, #8]
 8003162:	781b      	ldrb	r3, [r3, #0]
 8003164:	009b      	lsls	r3, r3, #2
 8003166:	441a      	add	r2, r3
 8003168:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800316a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800316e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003172:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003176:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800317a:	b29b      	uxth	r3, r3
 800317c:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800317e:	68bb      	ldr	r3, [r7, #8]
 8003180:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003184:	2b01      	cmp	r3, #1
 8003186:	f040 81e3 	bne.w	8003550 <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        ep->xfer_buff += TxByteNbre;
 800318a:	68bb      	ldr	r3, [r7, #8]
 800318c:	695a      	ldr	r2, [r3, #20]
 800318e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003190:	441a      	add	r2, r3
 8003192:	68bb      	ldr	r3, [r7, #8]
 8003194:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8003196:	68bb      	ldr	r3, [r7, #8]
 8003198:	69da      	ldr	r2, [r3, #28]
 800319a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800319c:	441a      	add	r2, r3
 800319e:	68bb      	ldr	r3, [r7, #8]
 80031a0:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80031a2:	68bb      	ldr	r3, [r7, #8]
 80031a4:	6a1a      	ldr	r2, [r3, #32]
 80031a6:	68bb      	ldr	r3, [r7, #8]
 80031a8:	691b      	ldr	r3, [r3, #16]
 80031aa:	429a      	cmp	r2, r3
 80031ac:	d309      	bcc.n	80031c2 <HAL_PCD_EP_DB_Transmit+0x152>
        {
          len = ep->maxpacket;
 80031ae:	68bb      	ldr	r3, [r7, #8]
 80031b0:	691b      	ldr	r3, [r3, #16]
 80031b2:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db -= len;
 80031b4:	68bb      	ldr	r3, [r7, #8]
 80031b6:	6a1a      	ldr	r2, [r3, #32]
 80031b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031ba:	1ad2      	subs	r2, r2, r3
 80031bc:	68bb      	ldr	r3, [r7, #8]
 80031be:	621a      	str	r2, [r3, #32]
 80031c0:	e014      	b.n	80031ec <HAL_PCD_EP_DB_Transmit+0x17c>
        }
        else if (ep->xfer_len_db == 0U)
 80031c2:	68bb      	ldr	r3, [r7, #8]
 80031c4:	6a1b      	ldr	r3, [r3, #32]
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d106      	bne.n	80031d8 <HAL_PCD_EP_DB_Transmit+0x168>
        {
          len = TxByteNbre;
 80031ca:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80031cc:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_fill_db = 0U;
 80031ce:	68bb      	ldr	r3, [r7, #8]
 80031d0:	2200      	movs	r2, #0
 80031d2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80031d6:	e009      	b.n	80031ec <HAL_PCD_EP_DB_Transmit+0x17c>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80031d8:	68bb      	ldr	r3, [r7, #8]
 80031da:	2200      	movs	r2, #0
 80031dc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 80031e0:	68bb      	ldr	r3, [r7, #8]
 80031e2:	6a1b      	ldr	r3, [r3, #32]
 80031e4:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db = 0U;
 80031e6:	68bb      	ldr	r3, [r7, #8]
 80031e8:	2200      	movs	r2, #0
 80031ea:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80031ec:	68bb      	ldr	r3, [r7, #8]
 80031ee:	785b      	ldrb	r3, [r3, #1]
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d155      	bne.n	80032a0 <HAL_PCD_EP_DB_Transmit+0x230>
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	61bb      	str	r3, [r7, #24]
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003202:	b29b      	uxth	r3, r3
 8003204:	461a      	mov	r2, r3
 8003206:	69bb      	ldr	r3, [r7, #24]
 8003208:	4413      	add	r3, r2
 800320a:	61bb      	str	r3, [r7, #24]
 800320c:	68bb      	ldr	r3, [r7, #8]
 800320e:	781b      	ldrb	r3, [r3, #0]
 8003210:	011a      	lsls	r2, r3, #4
 8003212:	69bb      	ldr	r3, [r7, #24]
 8003214:	4413      	add	r3, r2
 8003216:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800321a:	617b      	str	r3, [r7, #20]
 800321c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800321e:	2b00      	cmp	r3, #0
 8003220:	d112      	bne.n	8003248 <HAL_PCD_EP_DB_Transmit+0x1d8>
 8003222:	697b      	ldr	r3, [r7, #20]
 8003224:	881b      	ldrh	r3, [r3, #0]
 8003226:	b29b      	uxth	r3, r3
 8003228:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800322c:	b29a      	uxth	r2, r3
 800322e:	697b      	ldr	r3, [r7, #20]
 8003230:	801a      	strh	r2, [r3, #0]
 8003232:	697b      	ldr	r3, [r7, #20]
 8003234:	881b      	ldrh	r3, [r3, #0]
 8003236:	b29b      	uxth	r3, r3
 8003238:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800323c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003240:	b29a      	uxth	r2, r3
 8003242:	697b      	ldr	r3, [r7, #20]
 8003244:	801a      	strh	r2, [r3, #0]
 8003246:	e047      	b.n	80032d8 <HAL_PCD_EP_DB_Transmit+0x268>
 8003248:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800324a:	2b3e      	cmp	r3, #62	; 0x3e
 800324c:	d811      	bhi.n	8003272 <HAL_PCD_EP_DB_Transmit+0x202>
 800324e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003250:	085b      	lsrs	r3, r3, #1
 8003252:	62bb      	str	r3, [r7, #40]	; 0x28
 8003254:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003256:	f003 0301 	and.w	r3, r3, #1
 800325a:	2b00      	cmp	r3, #0
 800325c:	d002      	beq.n	8003264 <HAL_PCD_EP_DB_Transmit+0x1f4>
 800325e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003260:	3301      	adds	r3, #1
 8003262:	62bb      	str	r3, [r7, #40]	; 0x28
 8003264:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003266:	b29b      	uxth	r3, r3
 8003268:	029b      	lsls	r3, r3, #10
 800326a:	b29a      	uxth	r2, r3
 800326c:	697b      	ldr	r3, [r7, #20]
 800326e:	801a      	strh	r2, [r3, #0]
 8003270:	e032      	b.n	80032d8 <HAL_PCD_EP_DB_Transmit+0x268>
 8003272:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003274:	095b      	lsrs	r3, r3, #5
 8003276:	62bb      	str	r3, [r7, #40]	; 0x28
 8003278:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800327a:	f003 031f 	and.w	r3, r3, #31
 800327e:	2b00      	cmp	r3, #0
 8003280:	d102      	bne.n	8003288 <HAL_PCD_EP_DB_Transmit+0x218>
 8003282:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003284:	3b01      	subs	r3, #1
 8003286:	62bb      	str	r3, [r7, #40]	; 0x28
 8003288:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800328a:	b29b      	uxth	r3, r3
 800328c:	029b      	lsls	r3, r3, #10
 800328e:	b29b      	uxth	r3, r3
 8003290:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003294:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003298:	b29a      	uxth	r2, r3
 800329a:	697b      	ldr	r3, [r7, #20]
 800329c:	801a      	strh	r2, [r3, #0]
 800329e:	e01b      	b.n	80032d8 <HAL_PCD_EP_DB_Transmit+0x268>
 80032a0:	68bb      	ldr	r3, [r7, #8]
 80032a2:	785b      	ldrb	r3, [r3, #1]
 80032a4:	2b01      	cmp	r3, #1
 80032a6:	d117      	bne.n	80032d8 <HAL_PCD_EP_DB_Transmit+0x268>
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	623b      	str	r3, [r7, #32]
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80032b6:	b29b      	uxth	r3, r3
 80032b8:	461a      	mov	r2, r3
 80032ba:	6a3b      	ldr	r3, [r7, #32]
 80032bc:	4413      	add	r3, r2
 80032be:	623b      	str	r3, [r7, #32]
 80032c0:	68bb      	ldr	r3, [r7, #8]
 80032c2:	781b      	ldrb	r3, [r3, #0]
 80032c4:	011a      	lsls	r2, r3, #4
 80032c6:	6a3b      	ldr	r3, [r7, #32]
 80032c8:	4413      	add	r3, r2
 80032ca:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80032ce:	61fb      	str	r3, [r7, #28]
 80032d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032d2:	b29a      	uxth	r2, r3
 80032d4:	69fb      	ldr	r3, [r7, #28]
 80032d6:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	6818      	ldr	r0, [r3, #0]
 80032dc:	68bb      	ldr	r3, [r7, #8]
 80032de:	6959      	ldr	r1, [r3, #20]
 80032e0:	68bb      	ldr	r3, [r7, #8]
 80032e2:	891a      	ldrh	r2, [r3, #8]
 80032e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032e6:	b29b      	uxth	r3, r3
 80032e8:	f002 ffc0 	bl	800626c <USB_WritePMA>
 80032ec:	e130      	b.n	8003550 <HAL_PCD_EP_DB_Transmit+0x4e0>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80032f6:	b29b      	uxth	r3, r3
 80032f8:	461a      	mov	r2, r3
 80032fa:	68bb      	ldr	r3, [r7, #8]
 80032fc:	781b      	ldrb	r3, [r3, #0]
 80032fe:	00db      	lsls	r3, r3, #3
 8003300:	4413      	add	r3, r2
 8003302:	3306      	adds	r3, #6
 8003304:	005b      	lsls	r3, r3, #1
 8003306:	68fa      	ldr	r2, [r7, #12]
 8003308:	6812      	ldr	r2, [r2, #0]
 800330a:	4413      	add	r3, r2
 800330c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003310:	881b      	ldrh	r3, [r3, #0]
 8003312:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003316:	85fb      	strh	r3, [r7, #46]	; 0x2e

    if (ep->xfer_len >= TxByteNbre)
 8003318:	68bb      	ldr	r3, [r7, #8]
 800331a:	699a      	ldr	r2, [r3, #24]
 800331c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800331e:	429a      	cmp	r2, r3
 8003320:	d306      	bcc.n	8003330 <HAL_PCD_EP_DB_Transmit+0x2c0>
    {
      ep->xfer_len -= TxByteNbre;
 8003322:	68bb      	ldr	r3, [r7, #8]
 8003324:	699a      	ldr	r2, [r3, #24]
 8003326:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003328:	1ad2      	subs	r2, r2, r3
 800332a:	68bb      	ldr	r3, [r7, #8]
 800332c:	619a      	str	r2, [r3, #24]
 800332e:	e002      	b.n	8003336 <HAL_PCD_EP_DB_Transmit+0x2c6>
    }
    else
    {
      ep->xfer_len = 0U;
 8003330:	68bb      	ldr	r3, [r7, #8]
 8003332:	2200      	movs	r2, #0
 8003334:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003336:	68bb      	ldr	r3, [r7, #8]
 8003338:	699b      	ldr	r3, [r3, #24]
 800333a:	2b00      	cmp	r3, #0
 800333c:	d12c      	bne.n	8003398 <HAL_PCD_EP_DB_Transmit+0x328>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800333e:	68bb      	ldr	r3, [r7, #8]
 8003340:	781b      	ldrb	r3, [r3, #0]
 8003342:	4619      	mov	r1, r3
 8003344:	68f8      	ldr	r0, [r7, #12]
 8003346:	f004 fdd4 	bl	8007ef2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /*need to Free USB Buff*/
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800334a:	88fb      	ldrh	r3, [r7, #6]
 800334c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003350:	2b00      	cmp	r3, #0
 8003352:	f040 80fd 	bne.w	8003550 <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	461a      	mov	r2, r3
 800335c:	68bb      	ldr	r3, [r7, #8]
 800335e:	781b      	ldrb	r3, [r3, #0]
 8003360:	009b      	lsls	r3, r3, #2
 8003362:	4413      	add	r3, r2
 8003364:	881b      	ldrh	r3, [r3, #0]
 8003366:	b29b      	uxth	r3, r3
 8003368:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800336c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003370:	84fb      	strh	r3, [r7, #38]	; 0x26
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	461a      	mov	r2, r3
 8003378:	68bb      	ldr	r3, [r7, #8]
 800337a:	781b      	ldrb	r3, [r3, #0]
 800337c:	009b      	lsls	r3, r3, #2
 800337e:	441a      	add	r2, r3
 8003380:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003382:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003386:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800338a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800338e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003392:	b29b      	uxth	r3, r3
 8003394:	8013      	strh	r3, [r2, #0]
 8003396:	e0db      	b.n	8003550 <HAL_PCD_EP_DB_Transmit+0x4e0>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003398:	88fb      	ldrh	r3, [r7, #6]
 800339a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d11f      	bne.n	80033e2 <HAL_PCD_EP_DB_Transmit+0x372>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	461a      	mov	r2, r3
 80033a8:	68bb      	ldr	r3, [r7, #8]
 80033aa:	781b      	ldrb	r3, [r3, #0]
 80033ac:	009b      	lsls	r3, r3, #2
 80033ae:	4413      	add	r3, r2
 80033b0:	881b      	ldrh	r3, [r3, #0]
 80033b2:	b29b      	uxth	r3, r3
 80033b4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80033b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033bc:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	461a      	mov	r2, r3
 80033c4:	68bb      	ldr	r3, [r7, #8]
 80033c6:	781b      	ldrb	r3, [r3, #0]
 80033c8:	009b      	lsls	r3, r3, #2
 80033ca:	441a      	add	r2, r3
 80033cc:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80033ce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80033d2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80033d6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80033da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80033de:	b29b      	uxth	r3, r3
 80033e0:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80033e2:	68bb      	ldr	r3, [r7, #8]
 80033e4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80033e8:	2b01      	cmp	r3, #1
 80033ea:	f040 80b1 	bne.w	8003550 <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        ep->xfer_buff += TxByteNbre;
 80033ee:	68bb      	ldr	r3, [r7, #8]
 80033f0:	695a      	ldr	r2, [r3, #20]
 80033f2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80033f4:	441a      	add	r2, r3
 80033f6:	68bb      	ldr	r3, [r7, #8]
 80033f8:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 80033fa:	68bb      	ldr	r3, [r7, #8]
 80033fc:	69da      	ldr	r2, [r3, #28]
 80033fe:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003400:	441a      	add	r2, r3
 8003402:	68bb      	ldr	r3, [r7, #8]
 8003404:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003406:	68bb      	ldr	r3, [r7, #8]
 8003408:	6a1a      	ldr	r2, [r3, #32]
 800340a:	68bb      	ldr	r3, [r7, #8]
 800340c:	691b      	ldr	r3, [r3, #16]
 800340e:	429a      	cmp	r2, r3
 8003410:	d309      	bcc.n	8003426 <HAL_PCD_EP_DB_Transmit+0x3b6>
        {
          len = ep->maxpacket;
 8003412:	68bb      	ldr	r3, [r7, #8]
 8003414:	691b      	ldr	r3, [r3, #16]
 8003416:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db -= len;
 8003418:	68bb      	ldr	r3, [r7, #8]
 800341a:	6a1a      	ldr	r2, [r3, #32]
 800341c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800341e:	1ad2      	subs	r2, r2, r3
 8003420:	68bb      	ldr	r3, [r7, #8]
 8003422:	621a      	str	r2, [r3, #32]
 8003424:	e014      	b.n	8003450 <HAL_PCD_EP_DB_Transmit+0x3e0>
        }
        else if (ep->xfer_len_db == 0U)
 8003426:	68bb      	ldr	r3, [r7, #8]
 8003428:	6a1b      	ldr	r3, [r3, #32]
 800342a:	2b00      	cmp	r3, #0
 800342c:	d106      	bne.n	800343c <HAL_PCD_EP_DB_Transmit+0x3cc>
        {
          len = TxByteNbre;
 800342e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003430:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_fill_db = 0U;
 8003432:	68bb      	ldr	r3, [r7, #8]
 8003434:	2200      	movs	r2, #0
 8003436:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800343a:	e009      	b.n	8003450 <HAL_PCD_EP_DB_Transmit+0x3e0>
        }
        else
        {
          len = ep->xfer_len_db;
 800343c:	68bb      	ldr	r3, [r7, #8]
 800343e:	6a1b      	ldr	r3, [r3, #32]
 8003440:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db = 0U;
 8003442:	68bb      	ldr	r3, [r7, #8]
 8003444:	2200      	movs	r2, #0
 8003446:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8003448:	68bb      	ldr	r3, [r7, #8]
 800344a:	2200      	movs	r2, #0
 800344c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	637b      	str	r3, [r7, #52]	; 0x34
 8003456:	68bb      	ldr	r3, [r7, #8]
 8003458:	785b      	ldrb	r3, [r3, #1]
 800345a:	2b00      	cmp	r3, #0
 800345c:	d155      	bne.n	800350a <HAL_PCD_EP_DB_Transmit+0x49a>
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	647b      	str	r3, [r7, #68]	; 0x44
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800346c:	b29b      	uxth	r3, r3
 800346e:	461a      	mov	r2, r3
 8003470:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003472:	4413      	add	r3, r2
 8003474:	647b      	str	r3, [r7, #68]	; 0x44
 8003476:	68bb      	ldr	r3, [r7, #8]
 8003478:	781b      	ldrb	r3, [r3, #0]
 800347a:	011a      	lsls	r2, r3, #4
 800347c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800347e:	4413      	add	r3, r2
 8003480:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003484:	643b      	str	r3, [r7, #64]	; 0x40
 8003486:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003488:	2b00      	cmp	r3, #0
 800348a:	d112      	bne.n	80034b2 <HAL_PCD_EP_DB_Transmit+0x442>
 800348c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800348e:	881b      	ldrh	r3, [r3, #0]
 8003490:	b29b      	uxth	r3, r3
 8003492:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003496:	b29a      	uxth	r2, r3
 8003498:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800349a:	801a      	strh	r2, [r3, #0]
 800349c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800349e:	881b      	ldrh	r3, [r3, #0]
 80034a0:	b29b      	uxth	r3, r3
 80034a2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80034a6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80034aa:	b29a      	uxth	r2, r3
 80034ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80034ae:	801a      	strh	r2, [r3, #0]
 80034b0:	e044      	b.n	800353c <HAL_PCD_EP_DB_Transmit+0x4cc>
 80034b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034b4:	2b3e      	cmp	r3, #62	; 0x3e
 80034b6:	d811      	bhi.n	80034dc <HAL_PCD_EP_DB_Transmit+0x46c>
 80034b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034ba:	085b      	lsrs	r3, r3, #1
 80034bc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80034be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034c0:	f003 0301 	and.w	r3, r3, #1
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d002      	beq.n	80034ce <HAL_PCD_EP_DB_Transmit+0x45e>
 80034c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80034ca:	3301      	adds	r3, #1
 80034cc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80034ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80034d0:	b29b      	uxth	r3, r3
 80034d2:	029b      	lsls	r3, r3, #10
 80034d4:	b29a      	uxth	r2, r3
 80034d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80034d8:	801a      	strh	r2, [r3, #0]
 80034da:	e02f      	b.n	800353c <HAL_PCD_EP_DB_Transmit+0x4cc>
 80034dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034de:	095b      	lsrs	r3, r3, #5
 80034e0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80034e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034e4:	f003 031f 	and.w	r3, r3, #31
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d102      	bne.n	80034f2 <HAL_PCD_EP_DB_Transmit+0x482>
 80034ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80034ee:	3b01      	subs	r3, #1
 80034f0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80034f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80034f4:	b29b      	uxth	r3, r3
 80034f6:	029b      	lsls	r3, r3, #10
 80034f8:	b29b      	uxth	r3, r3
 80034fa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80034fe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003502:	b29a      	uxth	r2, r3
 8003504:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003506:	801a      	strh	r2, [r3, #0]
 8003508:	e018      	b.n	800353c <HAL_PCD_EP_DB_Transmit+0x4cc>
 800350a:	68bb      	ldr	r3, [r7, #8]
 800350c:	785b      	ldrb	r3, [r3, #1]
 800350e:	2b01      	cmp	r3, #1
 8003510:	d114      	bne.n	800353c <HAL_PCD_EP_DB_Transmit+0x4cc>
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800351a:	b29b      	uxth	r3, r3
 800351c:	461a      	mov	r2, r3
 800351e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003520:	4413      	add	r3, r2
 8003522:	637b      	str	r3, [r7, #52]	; 0x34
 8003524:	68bb      	ldr	r3, [r7, #8]
 8003526:	781b      	ldrb	r3, [r3, #0]
 8003528:	011a      	lsls	r2, r3, #4
 800352a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800352c:	4413      	add	r3, r2
 800352e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003532:	633b      	str	r3, [r7, #48]	; 0x30
 8003534:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003536:	b29a      	uxth	r2, r3
 8003538:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800353a:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	6818      	ldr	r0, [r3, #0]
 8003540:	68bb      	ldr	r3, [r7, #8]
 8003542:	6959      	ldr	r1, [r3, #20]
 8003544:	68bb      	ldr	r3, [r7, #8]
 8003546:	895a      	ldrh	r2, [r3, #10]
 8003548:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800354a:	b29b      	uxth	r3, r3
 800354c:	f002 fe8e 	bl	800626c <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	461a      	mov	r2, r3
 8003556:	68bb      	ldr	r3, [r7, #8]
 8003558:	781b      	ldrb	r3, [r3, #0]
 800355a:	009b      	lsls	r3, r3, #2
 800355c:	4413      	add	r3, r2
 800355e:	881b      	ldrh	r3, [r3, #0]
 8003560:	b29b      	uxth	r3, r3
 8003562:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003566:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800356a:	823b      	strh	r3, [r7, #16]
 800356c:	8a3b      	ldrh	r3, [r7, #16]
 800356e:	f083 0310 	eor.w	r3, r3, #16
 8003572:	823b      	strh	r3, [r7, #16]
 8003574:	8a3b      	ldrh	r3, [r7, #16]
 8003576:	f083 0320 	eor.w	r3, r3, #32
 800357a:	823b      	strh	r3, [r7, #16]
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	461a      	mov	r2, r3
 8003582:	68bb      	ldr	r3, [r7, #8]
 8003584:	781b      	ldrb	r3, [r3, #0]
 8003586:	009b      	lsls	r3, r3, #2
 8003588:	441a      	add	r2, r3
 800358a:	8a3b      	ldrh	r3, [r7, #16]
 800358c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003590:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003594:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003598:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800359c:	b29b      	uxth	r3, r3
 800359e:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 80035a0:	2300      	movs	r3, #0
}
 80035a2:	4618      	mov	r0, r3
 80035a4:	3748      	adds	r7, #72	; 0x48
 80035a6:	46bd      	mov	sp, r7
 80035a8:	bd80      	pop	{r7, pc}

080035aa <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 80035aa:	b480      	push	{r7}
 80035ac:	b087      	sub	sp, #28
 80035ae:	af00      	add	r7, sp, #0
 80035b0:	60f8      	str	r0, [r7, #12]
 80035b2:	607b      	str	r3, [r7, #4]
 80035b4:	460b      	mov	r3, r1
 80035b6:	817b      	strh	r3, [r7, #10]
 80035b8:	4613      	mov	r3, r2
 80035ba:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80035bc:	897b      	ldrh	r3, [r7, #10]
 80035be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035c2:	b29b      	uxth	r3, r3
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d00b      	beq.n	80035e0 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80035c8:	897b      	ldrh	r3, [r7, #10]
 80035ca:	f003 0307 	and.w	r3, r3, #7
 80035ce:	1c5a      	adds	r2, r3, #1
 80035d0:	4613      	mov	r3, r2
 80035d2:	009b      	lsls	r3, r3, #2
 80035d4:	4413      	add	r3, r2
 80035d6:	00db      	lsls	r3, r3, #3
 80035d8:	68fa      	ldr	r2, [r7, #12]
 80035da:	4413      	add	r3, r2
 80035dc:	617b      	str	r3, [r7, #20]
 80035de:	e009      	b.n	80035f4 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80035e0:	897a      	ldrh	r2, [r7, #10]
 80035e2:	4613      	mov	r3, r2
 80035e4:	009b      	lsls	r3, r3, #2
 80035e6:	4413      	add	r3, r2
 80035e8:	00db      	lsls	r3, r3, #3
 80035ea:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80035ee:	68fa      	ldr	r2, [r7, #12]
 80035f0:	4413      	add	r3, r2
 80035f2:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80035f4:	893b      	ldrh	r3, [r7, #8]
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d107      	bne.n	800360a <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80035fa:	697b      	ldr	r3, [r7, #20]
 80035fc:	2200      	movs	r2, #0
 80035fe:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	b29a      	uxth	r2, r3
 8003604:	697b      	ldr	r3, [r7, #20]
 8003606:	80da      	strh	r2, [r3, #6]
 8003608:	e00b      	b.n	8003622 <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800360a:	697b      	ldr	r3, [r7, #20]
 800360c:	2201      	movs	r2, #1
 800360e:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	b29a      	uxth	r2, r3
 8003614:	697b      	ldr	r3, [r7, #20]
 8003616:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	0c1b      	lsrs	r3, r3, #16
 800361c:	b29a      	uxth	r2, r3
 800361e:	697b      	ldr	r3, [r7, #20]
 8003620:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8003622:	2300      	movs	r3, #0
}
 8003624:	4618      	mov	r0, r3
 8003626:	371c      	adds	r7, #28
 8003628:	46bd      	mov	sp, r7
 800362a:	bc80      	pop	{r7}
 800362c:	4770      	bx	lr
	...

08003630 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003630:	b580      	push	{r7, lr}
 8003632:	b086      	sub	sp, #24
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2b00      	cmp	r3, #0
 800363c:	d101      	bne.n	8003642 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800363e:	2301      	movs	r3, #1
 8003640:	e26c      	b.n	8003b1c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f003 0301 	and.w	r3, r3, #1
 800364a:	2b00      	cmp	r3, #0
 800364c:	f000 8087 	beq.w	800375e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003650:	4b92      	ldr	r3, [pc, #584]	; (800389c <HAL_RCC_OscConfig+0x26c>)
 8003652:	685b      	ldr	r3, [r3, #4]
 8003654:	f003 030c 	and.w	r3, r3, #12
 8003658:	2b04      	cmp	r3, #4
 800365a:	d00c      	beq.n	8003676 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800365c:	4b8f      	ldr	r3, [pc, #572]	; (800389c <HAL_RCC_OscConfig+0x26c>)
 800365e:	685b      	ldr	r3, [r3, #4]
 8003660:	f003 030c 	and.w	r3, r3, #12
 8003664:	2b08      	cmp	r3, #8
 8003666:	d112      	bne.n	800368e <HAL_RCC_OscConfig+0x5e>
 8003668:	4b8c      	ldr	r3, [pc, #560]	; (800389c <HAL_RCC_OscConfig+0x26c>)
 800366a:	685b      	ldr	r3, [r3, #4]
 800366c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003670:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003674:	d10b      	bne.n	800368e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003676:	4b89      	ldr	r3, [pc, #548]	; (800389c <HAL_RCC_OscConfig+0x26c>)
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800367e:	2b00      	cmp	r3, #0
 8003680:	d06c      	beq.n	800375c <HAL_RCC_OscConfig+0x12c>
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	685b      	ldr	r3, [r3, #4]
 8003686:	2b00      	cmp	r3, #0
 8003688:	d168      	bne.n	800375c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800368a:	2301      	movs	r3, #1
 800368c:	e246      	b.n	8003b1c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	685b      	ldr	r3, [r3, #4]
 8003692:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003696:	d106      	bne.n	80036a6 <HAL_RCC_OscConfig+0x76>
 8003698:	4b80      	ldr	r3, [pc, #512]	; (800389c <HAL_RCC_OscConfig+0x26c>)
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	4a7f      	ldr	r2, [pc, #508]	; (800389c <HAL_RCC_OscConfig+0x26c>)
 800369e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036a2:	6013      	str	r3, [r2, #0]
 80036a4:	e02e      	b.n	8003704 <HAL_RCC_OscConfig+0xd4>
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	685b      	ldr	r3, [r3, #4]
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d10c      	bne.n	80036c8 <HAL_RCC_OscConfig+0x98>
 80036ae:	4b7b      	ldr	r3, [pc, #492]	; (800389c <HAL_RCC_OscConfig+0x26c>)
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	4a7a      	ldr	r2, [pc, #488]	; (800389c <HAL_RCC_OscConfig+0x26c>)
 80036b4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80036b8:	6013      	str	r3, [r2, #0]
 80036ba:	4b78      	ldr	r3, [pc, #480]	; (800389c <HAL_RCC_OscConfig+0x26c>)
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	4a77      	ldr	r2, [pc, #476]	; (800389c <HAL_RCC_OscConfig+0x26c>)
 80036c0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80036c4:	6013      	str	r3, [r2, #0]
 80036c6:	e01d      	b.n	8003704 <HAL_RCC_OscConfig+0xd4>
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	685b      	ldr	r3, [r3, #4]
 80036cc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80036d0:	d10c      	bne.n	80036ec <HAL_RCC_OscConfig+0xbc>
 80036d2:	4b72      	ldr	r3, [pc, #456]	; (800389c <HAL_RCC_OscConfig+0x26c>)
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	4a71      	ldr	r2, [pc, #452]	; (800389c <HAL_RCC_OscConfig+0x26c>)
 80036d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80036dc:	6013      	str	r3, [r2, #0]
 80036de:	4b6f      	ldr	r3, [pc, #444]	; (800389c <HAL_RCC_OscConfig+0x26c>)
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	4a6e      	ldr	r2, [pc, #440]	; (800389c <HAL_RCC_OscConfig+0x26c>)
 80036e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036e8:	6013      	str	r3, [r2, #0]
 80036ea:	e00b      	b.n	8003704 <HAL_RCC_OscConfig+0xd4>
 80036ec:	4b6b      	ldr	r3, [pc, #428]	; (800389c <HAL_RCC_OscConfig+0x26c>)
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	4a6a      	ldr	r2, [pc, #424]	; (800389c <HAL_RCC_OscConfig+0x26c>)
 80036f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80036f6:	6013      	str	r3, [r2, #0]
 80036f8:	4b68      	ldr	r3, [pc, #416]	; (800389c <HAL_RCC_OscConfig+0x26c>)
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	4a67      	ldr	r2, [pc, #412]	; (800389c <HAL_RCC_OscConfig+0x26c>)
 80036fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003702:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	685b      	ldr	r3, [r3, #4]
 8003708:	2b00      	cmp	r3, #0
 800370a:	d013      	beq.n	8003734 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800370c:	f7fd f9f8 	bl	8000b00 <HAL_GetTick>
 8003710:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003712:	e008      	b.n	8003726 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003714:	f7fd f9f4 	bl	8000b00 <HAL_GetTick>
 8003718:	4602      	mov	r2, r0
 800371a:	693b      	ldr	r3, [r7, #16]
 800371c:	1ad3      	subs	r3, r2, r3
 800371e:	2b64      	cmp	r3, #100	; 0x64
 8003720:	d901      	bls.n	8003726 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003722:	2303      	movs	r3, #3
 8003724:	e1fa      	b.n	8003b1c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003726:	4b5d      	ldr	r3, [pc, #372]	; (800389c <HAL_RCC_OscConfig+0x26c>)
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800372e:	2b00      	cmp	r3, #0
 8003730:	d0f0      	beq.n	8003714 <HAL_RCC_OscConfig+0xe4>
 8003732:	e014      	b.n	800375e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003734:	f7fd f9e4 	bl	8000b00 <HAL_GetTick>
 8003738:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800373a:	e008      	b.n	800374e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800373c:	f7fd f9e0 	bl	8000b00 <HAL_GetTick>
 8003740:	4602      	mov	r2, r0
 8003742:	693b      	ldr	r3, [r7, #16]
 8003744:	1ad3      	subs	r3, r2, r3
 8003746:	2b64      	cmp	r3, #100	; 0x64
 8003748:	d901      	bls.n	800374e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800374a:	2303      	movs	r3, #3
 800374c:	e1e6      	b.n	8003b1c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800374e:	4b53      	ldr	r3, [pc, #332]	; (800389c <HAL_RCC_OscConfig+0x26c>)
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003756:	2b00      	cmp	r3, #0
 8003758:	d1f0      	bne.n	800373c <HAL_RCC_OscConfig+0x10c>
 800375a:	e000      	b.n	800375e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800375c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f003 0302 	and.w	r3, r3, #2
 8003766:	2b00      	cmp	r3, #0
 8003768:	d063      	beq.n	8003832 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800376a:	4b4c      	ldr	r3, [pc, #304]	; (800389c <HAL_RCC_OscConfig+0x26c>)
 800376c:	685b      	ldr	r3, [r3, #4]
 800376e:	f003 030c 	and.w	r3, r3, #12
 8003772:	2b00      	cmp	r3, #0
 8003774:	d00b      	beq.n	800378e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003776:	4b49      	ldr	r3, [pc, #292]	; (800389c <HAL_RCC_OscConfig+0x26c>)
 8003778:	685b      	ldr	r3, [r3, #4]
 800377a:	f003 030c 	and.w	r3, r3, #12
 800377e:	2b08      	cmp	r3, #8
 8003780:	d11c      	bne.n	80037bc <HAL_RCC_OscConfig+0x18c>
 8003782:	4b46      	ldr	r3, [pc, #280]	; (800389c <HAL_RCC_OscConfig+0x26c>)
 8003784:	685b      	ldr	r3, [r3, #4]
 8003786:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800378a:	2b00      	cmp	r3, #0
 800378c:	d116      	bne.n	80037bc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800378e:	4b43      	ldr	r3, [pc, #268]	; (800389c <HAL_RCC_OscConfig+0x26c>)
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f003 0302 	and.w	r3, r3, #2
 8003796:	2b00      	cmp	r3, #0
 8003798:	d005      	beq.n	80037a6 <HAL_RCC_OscConfig+0x176>
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	691b      	ldr	r3, [r3, #16]
 800379e:	2b01      	cmp	r3, #1
 80037a0:	d001      	beq.n	80037a6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80037a2:	2301      	movs	r3, #1
 80037a4:	e1ba      	b.n	8003b1c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037a6:	4b3d      	ldr	r3, [pc, #244]	; (800389c <HAL_RCC_OscConfig+0x26c>)
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	695b      	ldr	r3, [r3, #20]
 80037b2:	00db      	lsls	r3, r3, #3
 80037b4:	4939      	ldr	r1, [pc, #228]	; (800389c <HAL_RCC_OscConfig+0x26c>)
 80037b6:	4313      	orrs	r3, r2
 80037b8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80037ba:	e03a      	b.n	8003832 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	691b      	ldr	r3, [r3, #16]
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d020      	beq.n	8003806 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80037c4:	4b36      	ldr	r3, [pc, #216]	; (80038a0 <HAL_RCC_OscConfig+0x270>)
 80037c6:	2201      	movs	r2, #1
 80037c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037ca:	f7fd f999 	bl	8000b00 <HAL_GetTick>
 80037ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037d0:	e008      	b.n	80037e4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80037d2:	f7fd f995 	bl	8000b00 <HAL_GetTick>
 80037d6:	4602      	mov	r2, r0
 80037d8:	693b      	ldr	r3, [r7, #16]
 80037da:	1ad3      	subs	r3, r2, r3
 80037dc:	2b02      	cmp	r3, #2
 80037de:	d901      	bls.n	80037e4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80037e0:	2303      	movs	r3, #3
 80037e2:	e19b      	b.n	8003b1c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037e4:	4b2d      	ldr	r3, [pc, #180]	; (800389c <HAL_RCC_OscConfig+0x26c>)
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f003 0302 	and.w	r3, r3, #2
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d0f0      	beq.n	80037d2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037f0:	4b2a      	ldr	r3, [pc, #168]	; (800389c <HAL_RCC_OscConfig+0x26c>)
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	695b      	ldr	r3, [r3, #20]
 80037fc:	00db      	lsls	r3, r3, #3
 80037fe:	4927      	ldr	r1, [pc, #156]	; (800389c <HAL_RCC_OscConfig+0x26c>)
 8003800:	4313      	orrs	r3, r2
 8003802:	600b      	str	r3, [r1, #0]
 8003804:	e015      	b.n	8003832 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003806:	4b26      	ldr	r3, [pc, #152]	; (80038a0 <HAL_RCC_OscConfig+0x270>)
 8003808:	2200      	movs	r2, #0
 800380a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800380c:	f7fd f978 	bl	8000b00 <HAL_GetTick>
 8003810:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003812:	e008      	b.n	8003826 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003814:	f7fd f974 	bl	8000b00 <HAL_GetTick>
 8003818:	4602      	mov	r2, r0
 800381a:	693b      	ldr	r3, [r7, #16]
 800381c:	1ad3      	subs	r3, r2, r3
 800381e:	2b02      	cmp	r3, #2
 8003820:	d901      	bls.n	8003826 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003822:	2303      	movs	r3, #3
 8003824:	e17a      	b.n	8003b1c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003826:	4b1d      	ldr	r3, [pc, #116]	; (800389c <HAL_RCC_OscConfig+0x26c>)
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f003 0302 	and.w	r3, r3, #2
 800382e:	2b00      	cmp	r3, #0
 8003830:	d1f0      	bne.n	8003814 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f003 0308 	and.w	r3, r3, #8
 800383a:	2b00      	cmp	r3, #0
 800383c:	d03a      	beq.n	80038b4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	699b      	ldr	r3, [r3, #24]
 8003842:	2b00      	cmp	r3, #0
 8003844:	d019      	beq.n	800387a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003846:	4b17      	ldr	r3, [pc, #92]	; (80038a4 <HAL_RCC_OscConfig+0x274>)
 8003848:	2201      	movs	r2, #1
 800384a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800384c:	f7fd f958 	bl	8000b00 <HAL_GetTick>
 8003850:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003852:	e008      	b.n	8003866 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003854:	f7fd f954 	bl	8000b00 <HAL_GetTick>
 8003858:	4602      	mov	r2, r0
 800385a:	693b      	ldr	r3, [r7, #16]
 800385c:	1ad3      	subs	r3, r2, r3
 800385e:	2b02      	cmp	r3, #2
 8003860:	d901      	bls.n	8003866 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003862:	2303      	movs	r3, #3
 8003864:	e15a      	b.n	8003b1c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003866:	4b0d      	ldr	r3, [pc, #52]	; (800389c <HAL_RCC_OscConfig+0x26c>)
 8003868:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800386a:	f003 0302 	and.w	r3, r3, #2
 800386e:	2b00      	cmp	r3, #0
 8003870:	d0f0      	beq.n	8003854 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003872:	2001      	movs	r0, #1
 8003874:	f000 fac6 	bl	8003e04 <RCC_Delay>
 8003878:	e01c      	b.n	80038b4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800387a:	4b0a      	ldr	r3, [pc, #40]	; (80038a4 <HAL_RCC_OscConfig+0x274>)
 800387c:	2200      	movs	r2, #0
 800387e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003880:	f7fd f93e 	bl	8000b00 <HAL_GetTick>
 8003884:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003886:	e00f      	b.n	80038a8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003888:	f7fd f93a 	bl	8000b00 <HAL_GetTick>
 800388c:	4602      	mov	r2, r0
 800388e:	693b      	ldr	r3, [r7, #16]
 8003890:	1ad3      	subs	r3, r2, r3
 8003892:	2b02      	cmp	r3, #2
 8003894:	d908      	bls.n	80038a8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003896:	2303      	movs	r3, #3
 8003898:	e140      	b.n	8003b1c <HAL_RCC_OscConfig+0x4ec>
 800389a:	bf00      	nop
 800389c:	40021000 	.word	0x40021000
 80038a0:	42420000 	.word	0x42420000
 80038a4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80038a8:	4b9e      	ldr	r3, [pc, #632]	; (8003b24 <HAL_RCC_OscConfig+0x4f4>)
 80038aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ac:	f003 0302 	and.w	r3, r3, #2
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d1e9      	bne.n	8003888 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f003 0304 	and.w	r3, r3, #4
 80038bc:	2b00      	cmp	r3, #0
 80038be:	f000 80a6 	beq.w	8003a0e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80038c2:	2300      	movs	r3, #0
 80038c4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80038c6:	4b97      	ldr	r3, [pc, #604]	; (8003b24 <HAL_RCC_OscConfig+0x4f4>)
 80038c8:	69db      	ldr	r3, [r3, #28]
 80038ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d10d      	bne.n	80038ee <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80038d2:	4b94      	ldr	r3, [pc, #592]	; (8003b24 <HAL_RCC_OscConfig+0x4f4>)
 80038d4:	69db      	ldr	r3, [r3, #28]
 80038d6:	4a93      	ldr	r2, [pc, #588]	; (8003b24 <HAL_RCC_OscConfig+0x4f4>)
 80038d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038dc:	61d3      	str	r3, [r2, #28]
 80038de:	4b91      	ldr	r3, [pc, #580]	; (8003b24 <HAL_RCC_OscConfig+0x4f4>)
 80038e0:	69db      	ldr	r3, [r3, #28]
 80038e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038e6:	60bb      	str	r3, [r7, #8]
 80038e8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80038ea:	2301      	movs	r3, #1
 80038ec:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038ee:	4b8e      	ldr	r3, [pc, #568]	; (8003b28 <HAL_RCC_OscConfig+0x4f8>)
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d118      	bne.n	800392c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80038fa:	4b8b      	ldr	r3, [pc, #556]	; (8003b28 <HAL_RCC_OscConfig+0x4f8>)
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	4a8a      	ldr	r2, [pc, #552]	; (8003b28 <HAL_RCC_OscConfig+0x4f8>)
 8003900:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003904:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003906:	f7fd f8fb 	bl	8000b00 <HAL_GetTick>
 800390a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800390c:	e008      	b.n	8003920 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800390e:	f7fd f8f7 	bl	8000b00 <HAL_GetTick>
 8003912:	4602      	mov	r2, r0
 8003914:	693b      	ldr	r3, [r7, #16]
 8003916:	1ad3      	subs	r3, r2, r3
 8003918:	2b64      	cmp	r3, #100	; 0x64
 800391a:	d901      	bls.n	8003920 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800391c:	2303      	movs	r3, #3
 800391e:	e0fd      	b.n	8003b1c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003920:	4b81      	ldr	r3, [pc, #516]	; (8003b28 <HAL_RCC_OscConfig+0x4f8>)
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003928:	2b00      	cmp	r3, #0
 800392a:	d0f0      	beq.n	800390e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	68db      	ldr	r3, [r3, #12]
 8003930:	2b01      	cmp	r3, #1
 8003932:	d106      	bne.n	8003942 <HAL_RCC_OscConfig+0x312>
 8003934:	4b7b      	ldr	r3, [pc, #492]	; (8003b24 <HAL_RCC_OscConfig+0x4f4>)
 8003936:	6a1b      	ldr	r3, [r3, #32]
 8003938:	4a7a      	ldr	r2, [pc, #488]	; (8003b24 <HAL_RCC_OscConfig+0x4f4>)
 800393a:	f043 0301 	orr.w	r3, r3, #1
 800393e:	6213      	str	r3, [r2, #32]
 8003940:	e02d      	b.n	800399e <HAL_RCC_OscConfig+0x36e>
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	68db      	ldr	r3, [r3, #12]
 8003946:	2b00      	cmp	r3, #0
 8003948:	d10c      	bne.n	8003964 <HAL_RCC_OscConfig+0x334>
 800394a:	4b76      	ldr	r3, [pc, #472]	; (8003b24 <HAL_RCC_OscConfig+0x4f4>)
 800394c:	6a1b      	ldr	r3, [r3, #32]
 800394e:	4a75      	ldr	r2, [pc, #468]	; (8003b24 <HAL_RCC_OscConfig+0x4f4>)
 8003950:	f023 0301 	bic.w	r3, r3, #1
 8003954:	6213      	str	r3, [r2, #32]
 8003956:	4b73      	ldr	r3, [pc, #460]	; (8003b24 <HAL_RCC_OscConfig+0x4f4>)
 8003958:	6a1b      	ldr	r3, [r3, #32]
 800395a:	4a72      	ldr	r2, [pc, #456]	; (8003b24 <HAL_RCC_OscConfig+0x4f4>)
 800395c:	f023 0304 	bic.w	r3, r3, #4
 8003960:	6213      	str	r3, [r2, #32]
 8003962:	e01c      	b.n	800399e <HAL_RCC_OscConfig+0x36e>
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	68db      	ldr	r3, [r3, #12]
 8003968:	2b05      	cmp	r3, #5
 800396a:	d10c      	bne.n	8003986 <HAL_RCC_OscConfig+0x356>
 800396c:	4b6d      	ldr	r3, [pc, #436]	; (8003b24 <HAL_RCC_OscConfig+0x4f4>)
 800396e:	6a1b      	ldr	r3, [r3, #32]
 8003970:	4a6c      	ldr	r2, [pc, #432]	; (8003b24 <HAL_RCC_OscConfig+0x4f4>)
 8003972:	f043 0304 	orr.w	r3, r3, #4
 8003976:	6213      	str	r3, [r2, #32]
 8003978:	4b6a      	ldr	r3, [pc, #424]	; (8003b24 <HAL_RCC_OscConfig+0x4f4>)
 800397a:	6a1b      	ldr	r3, [r3, #32]
 800397c:	4a69      	ldr	r2, [pc, #420]	; (8003b24 <HAL_RCC_OscConfig+0x4f4>)
 800397e:	f043 0301 	orr.w	r3, r3, #1
 8003982:	6213      	str	r3, [r2, #32]
 8003984:	e00b      	b.n	800399e <HAL_RCC_OscConfig+0x36e>
 8003986:	4b67      	ldr	r3, [pc, #412]	; (8003b24 <HAL_RCC_OscConfig+0x4f4>)
 8003988:	6a1b      	ldr	r3, [r3, #32]
 800398a:	4a66      	ldr	r2, [pc, #408]	; (8003b24 <HAL_RCC_OscConfig+0x4f4>)
 800398c:	f023 0301 	bic.w	r3, r3, #1
 8003990:	6213      	str	r3, [r2, #32]
 8003992:	4b64      	ldr	r3, [pc, #400]	; (8003b24 <HAL_RCC_OscConfig+0x4f4>)
 8003994:	6a1b      	ldr	r3, [r3, #32]
 8003996:	4a63      	ldr	r2, [pc, #396]	; (8003b24 <HAL_RCC_OscConfig+0x4f4>)
 8003998:	f023 0304 	bic.w	r3, r3, #4
 800399c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	68db      	ldr	r3, [r3, #12]
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d015      	beq.n	80039d2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80039a6:	f7fd f8ab 	bl	8000b00 <HAL_GetTick>
 80039aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039ac:	e00a      	b.n	80039c4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80039ae:	f7fd f8a7 	bl	8000b00 <HAL_GetTick>
 80039b2:	4602      	mov	r2, r0
 80039b4:	693b      	ldr	r3, [r7, #16]
 80039b6:	1ad3      	subs	r3, r2, r3
 80039b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80039bc:	4293      	cmp	r3, r2
 80039be:	d901      	bls.n	80039c4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80039c0:	2303      	movs	r3, #3
 80039c2:	e0ab      	b.n	8003b1c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039c4:	4b57      	ldr	r3, [pc, #348]	; (8003b24 <HAL_RCC_OscConfig+0x4f4>)
 80039c6:	6a1b      	ldr	r3, [r3, #32]
 80039c8:	f003 0302 	and.w	r3, r3, #2
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d0ee      	beq.n	80039ae <HAL_RCC_OscConfig+0x37e>
 80039d0:	e014      	b.n	80039fc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80039d2:	f7fd f895 	bl	8000b00 <HAL_GetTick>
 80039d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80039d8:	e00a      	b.n	80039f0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80039da:	f7fd f891 	bl	8000b00 <HAL_GetTick>
 80039de:	4602      	mov	r2, r0
 80039e0:	693b      	ldr	r3, [r7, #16]
 80039e2:	1ad3      	subs	r3, r2, r3
 80039e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80039e8:	4293      	cmp	r3, r2
 80039ea:	d901      	bls.n	80039f0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80039ec:	2303      	movs	r3, #3
 80039ee:	e095      	b.n	8003b1c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80039f0:	4b4c      	ldr	r3, [pc, #304]	; (8003b24 <HAL_RCC_OscConfig+0x4f4>)
 80039f2:	6a1b      	ldr	r3, [r3, #32]
 80039f4:	f003 0302 	and.w	r3, r3, #2
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d1ee      	bne.n	80039da <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80039fc:	7dfb      	ldrb	r3, [r7, #23]
 80039fe:	2b01      	cmp	r3, #1
 8003a00:	d105      	bne.n	8003a0e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a02:	4b48      	ldr	r3, [pc, #288]	; (8003b24 <HAL_RCC_OscConfig+0x4f4>)
 8003a04:	69db      	ldr	r3, [r3, #28]
 8003a06:	4a47      	ldr	r2, [pc, #284]	; (8003b24 <HAL_RCC_OscConfig+0x4f4>)
 8003a08:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a0c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	69db      	ldr	r3, [r3, #28]
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	f000 8081 	beq.w	8003b1a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003a18:	4b42      	ldr	r3, [pc, #264]	; (8003b24 <HAL_RCC_OscConfig+0x4f4>)
 8003a1a:	685b      	ldr	r3, [r3, #4]
 8003a1c:	f003 030c 	and.w	r3, r3, #12
 8003a20:	2b08      	cmp	r3, #8
 8003a22:	d061      	beq.n	8003ae8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	69db      	ldr	r3, [r3, #28]
 8003a28:	2b02      	cmp	r3, #2
 8003a2a:	d146      	bne.n	8003aba <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a2c:	4b3f      	ldr	r3, [pc, #252]	; (8003b2c <HAL_RCC_OscConfig+0x4fc>)
 8003a2e:	2200      	movs	r2, #0
 8003a30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a32:	f7fd f865 	bl	8000b00 <HAL_GetTick>
 8003a36:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003a38:	e008      	b.n	8003a4c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a3a:	f7fd f861 	bl	8000b00 <HAL_GetTick>
 8003a3e:	4602      	mov	r2, r0
 8003a40:	693b      	ldr	r3, [r7, #16]
 8003a42:	1ad3      	subs	r3, r2, r3
 8003a44:	2b02      	cmp	r3, #2
 8003a46:	d901      	bls.n	8003a4c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003a48:	2303      	movs	r3, #3
 8003a4a:	e067      	b.n	8003b1c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003a4c:	4b35      	ldr	r3, [pc, #212]	; (8003b24 <HAL_RCC_OscConfig+0x4f4>)
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d1f0      	bne.n	8003a3a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	6a1b      	ldr	r3, [r3, #32]
 8003a5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a60:	d108      	bne.n	8003a74 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003a62:	4b30      	ldr	r3, [pc, #192]	; (8003b24 <HAL_RCC_OscConfig+0x4f4>)
 8003a64:	685b      	ldr	r3, [r3, #4]
 8003a66:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	689b      	ldr	r3, [r3, #8]
 8003a6e:	492d      	ldr	r1, [pc, #180]	; (8003b24 <HAL_RCC_OscConfig+0x4f4>)
 8003a70:	4313      	orrs	r3, r2
 8003a72:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003a74:	4b2b      	ldr	r3, [pc, #172]	; (8003b24 <HAL_RCC_OscConfig+0x4f4>)
 8003a76:	685b      	ldr	r3, [r3, #4]
 8003a78:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	6a19      	ldr	r1, [r3, #32]
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a84:	430b      	orrs	r3, r1
 8003a86:	4927      	ldr	r1, [pc, #156]	; (8003b24 <HAL_RCC_OscConfig+0x4f4>)
 8003a88:	4313      	orrs	r3, r2
 8003a8a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003a8c:	4b27      	ldr	r3, [pc, #156]	; (8003b2c <HAL_RCC_OscConfig+0x4fc>)
 8003a8e:	2201      	movs	r2, #1
 8003a90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a92:	f7fd f835 	bl	8000b00 <HAL_GetTick>
 8003a96:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003a98:	e008      	b.n	8003aac <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a9a:	f7fd f831 	bl	8000b00 <HAL_GetTick>
 8003a9e:	4602      	mov	r2, r0
 8003aa0:	693b      	ldr	r3, [r7, #16]
 8003aa2:	1ad3      	subs	r3, r2, r3
 8003aa4:	2b02      	cmp	r3, #2
 8003aa6:	d901      	bls.n	8003aac <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003aa8:	2303      	movs	r3, #3
 8003aaa:	e037      	b.n	8003b1c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003aac:	4b1d      	ldr	r3, [pc, #116]	; (8003b24 <HAL_RCC_OscConfig+0x4f4>)
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d0f0      	beq.n	8003a9a <HAL_RCC_OscConfig+0x46a>
 8003ab8:	e02f      	b.n	8003b1a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003aba:	4b1c      	ldr	r3, [pc, #112]	; (8003b2c <HAL_RCC_OscConfig+0x4fc>)
 8003abc:	2200      	movs	r2, #0
 8003abe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ac0:	f7fd f81e 	bl	8000b00 <HAL_GetTick>
 8003ac4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003ac6:	e008      	b.n	8003ada <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ac8:	f7fd f81a 	bl	8000b00 <HAL_GetTick>
 8003acc:	4602      	mov	r2, r0
 8003ace:	693b      	ldr	r3, [r7, #16]
 8003ad0:	1ad3      	subs	r3, r2, r3
 8003ad2:	2b02      	cmp	r3, #2
 8003ad4:	d901      	bls.n	8003ada <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003ad6:	2303      	movs	r3, #3
 8003ad8:	e020      	b.n	8003b1c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003ada:	4b12      	ldr	r3, [pc, #72]	; (8003b24 <HAL_RCC_OscConfig+0x4f4>)
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d1f0      	bne.n	8003ac8 <HAL_RCC_OscConfig+0x498>
 8003ae6:	e018      	b.n	8003b1a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	69db      	ldr	r3, [r3, #28]
 8003aec:	2b01      	cmp	r3, #1
 8003aee:	d101      	bne.n	8003af4 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8003af0:	2301      	movs	r3, #1
 8003af2:	e013      	b.n	8003b1c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003af4:	4b0b      	ldr	r3, [pc, #44]	; (8003b24 <HAL_RCC_OscConfig+0x4f4>)
 8003af6:	685b      	ldr	r3, [r3, #4]
 8003af8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	6a1b      	ldr	r3, [r3, #32]
 8003b04:	429a      	cmp	r2, r3
 8003b06:	d106      	bne.n	8003b16 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b12:	429a      	cmp	r2, r3
 8003b14:	d001      	beq.n	8003b1a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8003b16:	2301      	movs	r3, #1
 8003b18:	e000      	b.n	8003b1c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8003b1a:	2300      	movs	r3, #0
}
 8003b1c:	4618      	mov	r0, r3
 8003b1e:	3718      	adds	r7, #24
 8003b20:	46bd      	mov	sp, r7
 8003b22:	bd80      	pop	{r7, pc}
 8003b24:	40021000 	.word	0x40021000
 8003b28:	40007000 	.word	0x40007000
 8003b2c:	42420060 	.word	0x42420060

08003b30 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003b30:	b580      	push	{r7, lr}
 8003b32:	b084      	sub	sp, #16
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	6078      	str	r0, [r7, #4]
 8003b38:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d101      	bne.n	8003b44 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003b40:	2301      	movs	r3, #1
 8003b42:	e0d0      	b.n	8003ce6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003b44:	4b6a      	ldr	r3, [pc, #424]	; (8003cf0 <HAL_RCC_ClockConfig+0x1c0>)
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f003 0307 	and.w	r3, r3, #7
 8003b4c:	683a      	ldr	r2, [r7, #0]
 8003b4e:	429a      	cmp	r2, r3
 8003b50:	d910      	bls.n	8003b74 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b52:	4b67      	ldr	r3, [pc, #412]	; (8003cf0 <HAL_RCC_ClockConfig+0x1c0>)
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f023 0207 	bic.w	r2, r3, #7
 8003b5a:	4965      	ldr	r1, [pc, #404]	; (8003cf0 <HAL_RCC_ClockConfig+0x1c0>)
 8003b5c:	683b      	ldr	r3, [r7, #0]
 8003b5e:	4313      	orrs	r3, r2
 8003b60:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b62:	4b63      	ldr	r3, [pc, #396]	; (8003cf0 <HAL_RCC_ClockConfig+0x1c0>)
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f003 0307 	and.w	r3, r3, #7
 8003b6a:	683a      	ldr	r2, [r7, #0]
 8003b6c:	429a      	cmp	r2, r3
 8003b6e:	d001      	beq.n	8003b74 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003b70:	2301      	movs	r3, #1
 8003b72:	e0b8      	b.n	8003ce6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f003 0302 	and.w	r3, r3, #2
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d020      	beq.n	8003bc2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f003 0304 	and.w	r3, r3, #4
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d005      	beq.n	8003b98 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003b8c:	4b59      	ldr	r3, [pc, #356]	; (8003cf4 <HAL_RCC_ClockConfig+0x1c4>)
 8003b8e:	685b      	ldr	r3, [r3, #4]
 8003b90:	4a58      	ldr	r2, [pc, #352]	; (8003cf4 <HAL_RCC_ClockConfig+0x1c4>)
 8003b92:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003b96:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f003 0308 	and.w	r3, r3, #8
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d005      	beq.n	8003bb0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003ba4:	4b53      	ldr	r3, [pc, #332]	; (8003cf4 <HAL_RCC_ClockConfig+0x1c4>)
 8003ba6:	685b      	ldr	r3, [r3, #4]
 8003ba8:	4a52      	ldr	r2, [pc, #328]	; (8003cf4 <HAL_RCC_ClockConfig+0x1c4>)
 8003baa:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003bae:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003bb0:	4b50      	ldr	r3, [pc, #320]	; (8003cf4 <HAL_RCC_ClockConfig+0x1c4>)
 8003bb2:	685b      	ldr	r3, [r3, #4]
 8003bb4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	689b      	ldr	r3, [r3, #8]
 8003bbc:	494d      	ldr	r1, [pc, #308]	; (8003cf4 <HAL_RCC_ClockConfig+0x1c4>)
 8003bbe:	4313      	orrs	r3, r2
 8003bc0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f003 0301 	and.w	r3, r3, #1
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d040      	beq.n	8003c50 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	685b      	ldr	r3, [r3, #4]
 8003bd2:	2b01      	cmp	r3, #1
 8003bd4:	d107      	bne.n	8003be6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003bd6:	4b47      	ldr	r3, [pc, #284]	; (8003cf4 <HAL_RCC_ClockConfig+0x1c4>)
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d115      	bne.n	8003c0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003be2:	2301      	movs	r3, #1
 8003be4:	e07f      	b.n	8003ce6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	685b      	ldr	r3, [r3, #4]
 8003bea:	2b02      	cmp	r3, #2
 8003bec:	d107      	bne.n	8003bfe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003bee:	4b41      	ldr	r3, [pc, #260]	; (8003cf4 <HAL_RCC_ClockConfig+0x1c4>)
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d109      	bne.n	8003c0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003bfa:	2301      	movs	r3, #1
 8003bfc:	e073      	b.n	8003ce6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003bfe:	4b3d      	ldr	r3, [pc, #244]	; (8003cf4 <HAL_RCC_ClockConfig+0x1c4>)
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f003 0302 	and.w	r3, r3, #2
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d101      	bne.n	8003c0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c0a:	2301      	movs	r3, #1
 8003c0c:	e06b      	b.n	8003ce6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003c0e:	4b39      	ldr	r3, [pc, #228]	; (8003cf4 <HAL_RCC_ClockConfig+0x1c4>)
 8003c10:	685b      	ldr	r3, [r3, #4]
 8003c12:	f023 0203 	bic.w	r2, r3, #3
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	685b      	ldr	r3, [r3, #4]
 8003c1a:	4936      	ldr	r1, [pc, #216]	; (8003cf4 <HAL_RCC_ClockConfig+0x1c4>)
 8003c1c:	4313      	orrs	r3, r2
 8003c1e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003c20:	f7fc ff6e 	bl	8000b00 <HAL_GetTick>
 8003c24:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c26:	e00a      	b.n	8003c3e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c28:	f7fc ff6a 	bl	8000b00 <HAL_GetTick>
 8003c2c:	4602      	mov	r2, r0
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	1ad3      	subs	r3, r2, r3
 8003c32:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c36:	4293      	cmp	r3, r2
 8003c38:	d901      	bls.n	8003c3e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003c3a:	2303      	movs	r3, #3
 8003c3c:	e053      	b.n	8003ce6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c3e:	4b2d      	ldr	r3, [pc, #180]	; (8003cf4 <HAL_RCC_ClockConfig+0x1c4>)
 8003c40:	685b      	ldr	r3, [r3, #4]
 8003c42:	f003 020c 	and.w	r2, r3, #12
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	685b      	ldr	r3, [r3, #4]
 8003c4a:	009b      	lsls	r3, r3, #2
 8003c4c:	429a      	cmp	r2, r3
 8003c4e:	d1eb      	bne.n	8003c28 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003c50:	4b27      	ldr	r3, [pc, #156]	; (8003cf0 <HAL_RCC_ClockConfig+0x1c0>)
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f003 0307 	and.w	r3, r3, #7
 8003c58:	683a      	ldr	r2, [r7, #0]
 8003c5a:	429a      	cmp	r2, r3
 8003c5c:	d210      	bcs.n	8003c80 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c5e:	4b24      	ldr	r3, [pc, #144]	; (8003cf0 <HAL_RCC_ClockConfig+0x1c0>)
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f023 0207 	bic.w	r2, r3, #7
 8003c66:	4922      	ldr	r1, [pc, #136]	; (8003cf0 <HAL_RCC_ClockConfig+0x1c0>)
 8003c68:	683b      	ldr	r3, [r7, #0]
 8003c6a:	4313      	orrs	r3, r2
 8003c6c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c6e:	4b20      	ldr	r3, [pc, #128]	; (8003cf0 <HAL_RCC_ClockConfig+0x1c0>)
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f003 0307 	and.w	r3, r3, #7
 8003c76:	683a      	ldr	r2, [r7, #0]
 8003c78:	429a      	cmp	r2, r3
 8003c7a:	d001      	beq.n	8003c80 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003c7c:	2301      	movs	r3, #1
 8003c7e:	e032      	b.n	8003ce6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f003 0304 	and.w	r3, r3, #4
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d008      	beq.n	8003c9e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003c8c:	4b19      	ldr	r3, [pc, #100]	; (8003cf4 <HAL_RCC_ClockConfig+0x1c4>)
 8003c8e:	685b      	ldr	r3, [r3, #4]
 8003c90:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	68db      	ldr	r3, [r3, #12]
 8003c98:	4916      	ldr	r1, [pc, #88]	; (8003cf4 <HAL_RCC_ClockConfig+0x1c4>)
 8003c9a:	4313      	orrs	r3, r2
 8003c9c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f003 0308 	and.w	r3, r3, #8
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d009      	beq.n	8003cbe <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003caa:	4b12      	ldr	r3, [pc, #72]	; (8003cf4 <HAL_RCC_ClockConfig+0x1c4>)
 8003cac:	685b      	ldr	r3, [r3, #4]
 8003cae:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	691b      	ldr	r3, [r3, #16]
 8003cb6:	00db      	lsls	r3, r3, #3
 8003cb8:	490e      	ldr	r1, [pc, #56]	; (8003cf4 <HAL_RCC_ClockConfig+0x1c4>)
 8003cba:	4313      	orrs	r3, r2
 8003cbc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003cbe:	f000 f821 	bl	8003d04 <HAL_RCC_GetSysClockFreq>
 8003cc2:	4601      	mov	r1, r0
 8003cc4:	4b0b      	ldr	r3, [pc, #44]	; (8003cf4 <HAL_RCC_ClockConfig+0x1c4>)
 8003cc6:	685b      	ldr	r3, [r3, #4]
 8003cc8:	091b      	lsrs	r3, r3, #4
 8003cca:	f003 030f 	and.w	r3, r3, #15
 8003cce:	4a0a      	ldr	r2, [pc, #40]	; (8003cf8 <HAL_RCC_ClockConfig+0x1c8>)
 8003cd0:	5cd3      	ldrb	r3, [r2, r3]
 8003cd2:	fa21 f303 	lsr.w	r3, r1, r3
 8003cd6:	4a09      	ldr	r2, [pc, #36]	; (8003cfc <HAL_RCC_ClockConfig+0x1cc>)
 8003cd8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003cda:	4b09      	ldr	r3, [pc, #36]	; (8003d00 <HAL_RCC_ClockConfig+0x1d0>)
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	4618      	mov	r0, r3
 8003ce0:	f7fc fecc 	bl	8000a7c <HAL_InitTick>

  return HAL_OK;
 8003ce4:	2300      	movs	r3, #0
}
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	3710      	adds	r7, #16
 8003cea:	46bd      	mov	sp, r7
 8003cec:	bd80      	pop	{r7, pc}
 8003cee:	bf00      	nop
 8003cf0:	40022000 	.word	0x40022000
 8003cf4:	40021000 	.word	0x40021000
 8003cf8:	08008498 	.word	0x08008498
 8003cfc:	20000004 	.word	0x20000004
 8003d00:	20000008 	.word	0x20000008

08003d04 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003d04:	b490      	push	{r4, r7}
 8003d06:	b08a      	sub	sp, #40	; 0x28
 8003d08:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003d0a:	4b2a      	ldr	r3, [pc, #168]	; (8003db4 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003d0c:	1d3c      	adds	r4, r7, #4
 8003d0e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003d10:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003d14:	4b28      	ldr	r3, [pc, #160]	; (8003db8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003d16:	881b      	ldrh	r3, [r3, #0]
 8003d18:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003d1a:	2300      	movs	r3, #0
 8003d1c:	61fb      	str	r3, [r7, #28]
 8003d1e:	2300      	movs	r3, #0
 8003d20:	61bb      	str	r3, [r7, #24]
 8003d22:	2300      	movs	r3, #0
 8003d24:	627b      	str	r3, [r7, #36]	; 0x24
 8003d26:	2300      	movs	r3, #0
 8003d28:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003d2a:	2300      	movs	r3, #0
 8003d2c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003d2e:	4b23      	ldr	r3, [pc, #140]	; (8003dbc <HAL_RCC_GetSysClockFreq+0xb8>)
 8003d30:	685b      	ldr	r3, [r3, #4]
 8003d32:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003d34:	69fb      	ldr	r3, [r7, #28]
 8003d36:	f003 030c 	and.w	r3, r3, #12
 8003d3a:	2b04      	cmp	r3, #4
 8003d3c:	d002      	beq.n	8003d44 <HAL_RCC_GetSysClockFreq+0x40>
 8003d3e:	2b08      	cmp	r3, #8
 8003d40:	d003      	beq.n	8003d4a <HAL_RCC_GetSysClockFreq+0x46>
 8003d42:	e02d      	b.n	8003da0 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003d44:	4b1e      	ldr	r3, [pc, #120]	; (8003dc0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003d46:	623b      	str	r3, [r7, #32]
      break;
 8003d48:	e02d      	b.n	8003da6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003d4a:	69fb      	ldr	r3, [r7, #28]
 8003d4c:	0c9b      	lsrs	r3, r3, #18
 8003d4e:	f003 030f 	and.w	r3, r3, #15
 8003d52:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003d56:	4413      	add	r3, r2
 8003d58:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003d5c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003d5e:	69fb      	ldr	r3, [r7, #28]
 8003d60:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d013      	beq.n	8003d90 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003d68:	4b14      	ldr	r3, [pc, #80]	; (8003dbc <HAL_RCC_GetSysClockFreq+0xb8>)
 8003d6a:	685b      	ldr	r3, [r3, #4]
 8003d6c:	0c5b      	lsrs	r3, r3, #17
 8003d6e:	f003 0301 	and.w	r3, r3, #1
 8003d72:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003d76:	4413      	add	r3, r2
 8003d78:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003d7c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003d7e:	697b      	ldr	r3, [r7, #20]
 8003d80:	4a0f      	ldr	r2, [pc, #60]	; (8003dc0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003d82:	fb02 f203 	mul.w	r2, r2, r3
 8003d86:	69bb      	ldr	r3, [r7, #24]
 8003d88:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d8c:	627b      	str	r3, [r7, #36]	; 0x24
 8003d8e:	e004      	b.n	8003d9a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003d90:	697b      	ldr	r3, [r7, #20]
 8003d92:	4a0c      	ldr	r2, [pc, #48]	; (8003dc4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003d94:	fb02 f303 	mul.w	r3, r2, r3
 8003d98:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d9c:	623b      	str	r3, [r7, #32]
      break;
 8003d9e:	e002      	b.n	8003da6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003da0:	4b07      	ldr	r3, [pc, #28]	; (8003dc0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003da2:	623b      	str	r3, [r7, #32]
      break;
 8003da4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003da6:	6a3b      	ldr	r3, [r7, #32]
}
 8003da8:	4618      	mov	r0, r3
 8003daa:	3728      	adds	r7, #40	; 0x28
 8003dac:	46bd      	mov	sp, r7
 8003dae:	bc90      	pop	{r4, r7}
 8003db0:	4770      	bx	lr
 8003db2:	bf00      	nop
 8003db4:	08008428 	.word	0x08008428
 8003db8:	08008438 	.word	0x08008438
 8003dbc:	40021000 	.word	0x40021000
 8003dc0:	007a1200 	.word	0x007a1200
 8003dc4:	003d0900 	.word	0x003d0900

08003dc8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003dc8:	b480      	push	{r7}
 8003dca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003dcc:	4b02      	ldr	r3, [pc, #8]	; (8003dd8 <HAL_RCC_GetHCLKFreq+0x10>)
 8003dce:	681b      	ldr	r3, [r3, #0]
}
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	bc80      	pop	{r7}
 8003dd6:	4770      	bx	lr
 8003dd8:	20000004 	.word	0x20000004

08003ddc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003de0:	f7ff fff2 	bl	8003dc8 <HAL_RCC_GetHCLKFreq>
 8003de4:	4601      	mov	r1, r0
 8003de6:	4b05      	ldr	r3, [pc, #20]	; (8003dfc <HAL_RCC_GetPCLK2Freq+0x20>)
 8003de8:	685b      	ldr	r3, [r3, #4]
 8003dea:	0adb      	lsrs	r3, r3, #11
 8003dec:	f003 0307 	and.w	r3, r3, #7
 8003df0:	4a03      	ldr	r2, [pc, #12]	; (8003e00 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003df2:	5cd3      	ldrb	r3, [r2, r3]
 8003df4:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003df8:	4618      	mov	r0, r3
 8003dfa:	bd80      	pop	{r7, pc}
 8003dfc:	40021000 	.word	0x40021000
 8003e00:	080084a8 	.word	0x080084a8

08003e04 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003e04:	b480      	push	{r7}
 8003e06:	b085      	sub	sp, #20
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003e0c:	4b0a      	ldr	r3, [pc, #40]	; (8003e38 <RCC_Delay+0x34>)
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	4a0a      	ldr	r2, [pc, #40]	; (8003e3c <RCC_Delay+0x38>)
 8003e12:	fba2 2303 	umull	r2, r3, r2, r3
 8003e16:	0a5b      	lsrs	r3, r3, #9
 8003e18:	687a      	ldr	r2, [r7, #4]
 8003e1a:	fb02 f303 	mul.w	r3, r2, r3
 8003e1e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003e20:	bf00      	nop
  }
  while (Delay --);
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	1e5a      	subs	r2, r3, #1
 8003e26:	60fa      	str	r2, [r7, #12]
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d1f9      	bne.n	8003e20 <RCC_Delay+0x1c>
}
 8003e2c:	bf00      	nop
 8003e2e:	3714      	adds	r7, #20
 8003e30:	46bd      	mov	sp, r7
 8003e32:	bc80      	pop	{r7}
 8003e34:	4770      	bx	lr
 8003e36:	bf00      	nop
 8003e38:	20000004 	.word	0x20000004
 8003e3c:	10624dd3 	.word	0x10624dd3

08003e40 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003e40:	b580      	push	{r7, lr}
 8003e42:	b086      	sub	sp, #24
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003e48:	2300      	movs	r3, #0
 8003e4a:	613b      	str	r3, [r7, #16]
 8003e4c:	2300      	movs	r3, #0
 8003e4e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f003 0301 	and.w	r3, r3, #1
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d07d      	beq.n	8003f58 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8003e5c:	2300      	movs	r3, #0
 8003e5e:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003e60:	4b4f      	ldr	r3, [pc, #316]	; (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e62:	69db      	ldr	r3, [r3, #28]
 8003e64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d10d      	bne.n	8003e88 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e6c:	4b4c      	ldr	r3, [pc, #304]	; (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e6e:	69db      	ldr	r3, [r3, #28]
 8003e70:	4a4b      	ldr	r2, [pc, #300]	; (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e72:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e76:	61d3      	str	r3, [r2, #28]
 8003e78:	4b49      	ldr	r3, [pc, #292]	; (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e7a:	69db      	ldr	r3, [r3, #28]
 8003e7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e80:	60bb      	str	r3, [r7, #8]
 8003e82:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e84:	2301      	movs	r3, #1
 8003e86:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e88:	4b46      	ldr	r3, [pc, #280]	; (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d118      	bne.n	8003ec6 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003e94:	4b43      	ldr	r3, [pc, #268]	; (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	4a42      	ldr	r2, [pc, #264]	; (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003e9a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e9e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003ea0:	f7fc fe2e 	bl	8000b00 <HAL_GetTick>
 8003ea4:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ea6:	e008      	b.n	8003eba <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ea8:	f7fc fe2a 	bl	8000b00 <HAL_GetTick>
 8003eac:	4602      	mov	r2, r0
 8003eae:	693b      	ldr	r3, [r7, #16]
 8003eb0:	1ad3      	subs	r3, r2, r3
 8003eb2:	2b64      	cmp	r3, #100	; 0x64
 8003eb4:	d901      	bls.n	8003eba <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003eb6:	2303      	movs	r3, #3
 8003eb8:	e06d      	b.n	8003f96 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003eba:	4b3a      	ldr	r3, [pc, #232]	; (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d0f0      	beq.n	8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003ec6:	4b36      	ldr	r3, [pc, #216]	; (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ec8:	6a1b      	ldr	r3, [r3, #32]
 8003eca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ece:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d02e      	beq.n	8003f34 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	685b      	ldr	r3, [r3, #4]
 8003eda:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ede:	68fa      	ldr	r2, [r7, #12]
 8003ee0:	429a      	cmp	r2, r3
 8003ee2:	d027      	beq.n	8003f34 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003ee4:	4b2e      	ldr	r3, [pc, #184]	; (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ee6:	6a1b      	ldr	r3, [r3, #32]
 8003ee8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003eec:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003eee:	4b2e      	ldr	r3, [pc, #184]	; (8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003ef0:	2201      	movs	r2, #1
 8003ef2:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003ef4:	4b2c      	ldr	r3, [pc, #176]	; (8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003efa:	4a29      	ldr	r2, [pc, #164]	; (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	f003 0301 	and.w	r3, r3, #1
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d014      	beq.n	8003f34 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f0a:	f7fc fdf9 	bl	8000b00 <HAL_GetTick>
 8003f0e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f10:	e00a      	b.n	8003f28 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f12:	f7fc fdf5 	bl	8000b00 <HAL_GetTick>
 8003f16:	4602      	mov	r2, r0
 8003f18:	693b      	ldr	r3, [r7, #16]
 8003f1a:	1ad3      	subs	r3, r2, r3
 8003f1c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f20:	4293      	cmp	r3, r2
 8003f22:	d901      	bls.n	8003f28 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003f24:	2303      	movs	r3, #3
 8003f26:	e036      	b.n	8003f96 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f28:	4b1d      	ldr	r3, [pc, #116]	; (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f2a:	6a1b      	ldr	r3, [r3, #32]
 8003f2c:	f003 0302 	and.w	r3, r3, #2
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d0ee      	beq.n	8003f12 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003f34:	4b1a      	ldr	r3, [pc, #104]	; (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f36:	6a1b      	ldr	r3, [r3, #32]
 8003f38:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	685b      	ldr	r3, [r3, #4]
 8003f40:	4917      	ldr	r1, [pc, #92]	; (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f42:	4313      	orrs	r3, r2
 8003f44:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003f46:	7dfb      	ldrb	r3, [r7, #23]
 8003f48:	2b01      	cmp	r3, #1
 8003f4a:	d105      	bne.n	8003f58 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f4c:	4b14      	ldr	r3, [pc, #80]	; (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f4e:	69db      	ldr	r3, [r3, #28]
 8003f50:	4a13      	ldr	r2, [pc, #76]	; (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f52:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f56:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f003 0302 	and.w	r3, r3, #2
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d008      	beq.n	8003f76 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003f64:	4b0e      	ldr	r3, [pc, #56]	; (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f66:	685b      	ldr	r3, [r3, #4]
 8003f68:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	689b      	ldr	r3, [r3, #8]
 8003f70:	490b      	ldr	r1, [pc, #44]	; (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f72:	4313      	orrs	r3, r2
 8003f74:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f003 0310 	and.w	r3, r3, #16
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d008      	beq.n	8003f94 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003f82:	4b07      	ldr	r3, [pc, #28]	; (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f84:	685b      	ldr	r3, [r3, #4]
 8003f86:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	68db      	ldr	r3, [r3, #12]
 8003f8e:	4904      	ldr	r1, [pc, #16]	; (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f90:	4313      	orrs	r3, r2
 8003f92:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003f94:	2300      	movs	r3, #0
}
 8003f96:	4618      	mov	r0, r3
 8003f98:	3718      	adds	r7, #24
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	bd80      	pop	{r7, pc}
 8003f9e:	bf00      	nop
 8003fa0:	40021000 	.word	0x40021000
 8003fa4:	40007000 	.word	0x40007000
 8003fa8:	42420440 	.word	0x42420440

08003fac <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003fac:	b590      	push	{r4, r7, lr}
 8003fae:	b08d      	sub	sp, #52	; 0x34
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003fb4:	4b55      	ldr	r3, [pc, #340]	; (800410c <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8003fb6:	f107 040c 	add.w	r4, r7, #12
 8003fba:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003fbc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003fc0:	4b53      	ldr	r3, [pc, #332]	; (8004110 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8003fc2:	881b      	ldrh	r3, [r3, #0]
 8003fc4:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8003fc6:	2300      	movs	r3, #0
 8003fc8:	627b      	str	r3, [r7, #36]	; 0x24
 8003fca:	2300      	movs	r3, #0
 8003fcc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003fce:	2300      	movs	r3, #0
 8003fd0:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8003fd2:	2300      	movs	r3, #0
 8003fd4:	61fb      	str	r3, [r7, #28]
 8003fd6:	2300      	movs	r3, #0
 8003fd8:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	2b02      	cmp	r3, #2
 8003fde:	d07f      	beq.n	80040e0 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 8003fe0:	2b10      	cmp	r3, #16
 8003fe2:	d002      	beq.n	8003fea <HAL_RCCEx_GetPeriphCLKFreq+0x3e>
 8003fe4:	2b01      	cmp	r3, #1
 8003fe6:	d048      	beq.n	800407a <HAL_RCCEx_GetPeriphCLKFreq+0xce>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8003fe8:	e08b      	b.n	8004102 <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      temp_reg = RCC->CFGR;
 8003fea:	4b4a      	ldr	r3, [pc, #296]	; (8004114 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8003fec:	685b      	ldr	r3, [r3, #4]
 8003fee:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8003ff0:	4b48      	ldr	r3, [pc, #288]	; (8004114 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d07f      	beq.n	80040fc <HAL_RCCEx_GetPeriphCLKFreq+0x150>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003ffc:	69fb      	ldr	r3, [r7, #28]
 8003ffe:	0c9b      	lsrs	r3, r3, #18
 8004000:	f003 030f 	and.w	r3, r3, #15
 8004004:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8004008:	4413      	add	r3, r2
 800400a:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800400e:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004010:	69fb      	ldr	r3, [r7, #28]
 8004012:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004016:	2b00      	cmp	r3, #0
 8004018:	d018      	beq.n	800404c <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800401a:	4b3e      	ldr	r3, [pc, #248]	; (8004114 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 800401c:	685b      	ldr	r3, [r3, #4]
 800401e:	0c5b      	lsrs	r3, r3, #17
 8004020:	f003 0301 	and.w	r3, r3, #1
 8004024:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8004028:	4413      	add	r3, r2
 800402a:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800402e:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004030:	69fb      	ldr	r3, [r7, #28]
 8004032:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004036:	2b00      	cmp	r3, #0
 8004038:	d00d      	beq.n	8004056 <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 800403a:	4a37      	ldr	r2, [pc, #220]	; (8004118 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>)
 800403c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800403e:	fbb2 f2f3 	udiv	r2, r2, r3
 8004042:	6a3b      	ldr	r3, [r7, #32]
 8004044:	fb02 f303 	mul.w	r3, r2, r3
 8004048:	62fb      	str	r3, [r7, #44]	; 0x2c
 800404a:	e004      	b.n	8004056 <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800404c:	6a3b      	ldr	r3, [r7, #32]
 800404e:	4a33      	ldr	r2, [pc, #204]	; (800411c <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8004050:	fb02 f303 	mul.w	r3, r2, r3
 8004054:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8004056:	4b2f      	ldr	r3, [pc, #188]	; (8004114 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8004058:	685b      	ldr	r3, [r3, #4]
 800405a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800405e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004062:	d102      	bne.n	800406a <HAL_RCCEx_GetPeriphCLKFreq+0xbe>
          frequency = pllclk;
 8004064:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004066:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8004068:	e048      	b.n	80040fc <HAL_RCCEx_GetPeriphCLKFreq+0x150>
          frequency = (pllclk * 2) / 3;
 800406a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800406c:	005b      	lsls	r3, r3, #1
 800406e:	4a2c      	ldr	r2, [pc, #176]	; (8004120 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 8004070:	fba2 2303 	umull	r2, r3, r2, r3
 8004074:	085b      	lsrs	r3, r3, #1
 8004076:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8004078:	e040      	b.n	80040fc <HAL_RCCEx_GetPeriphCLKFreq+0x150>
      temp_reg = RCC->BDCR;
 800407a:	4b26      	ldr	r3, [pc, #152]	; (8004114 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 800407c:	6a1b      	ldr	r3, [r3, #32]
 800407e:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8004080:	69fb      	ldr	r3, [r7, #28]
 8004082:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004086:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800408a:	d108      	bne.n	800409e <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
 800408c:	69fb      	ldr	r3, [r7, #28]
 800408e:	f003 0302 	and.w	r3, r3, #2
 8004092:	2b00      	cmp	r3, #0
 8004094:	d003      	beq.n	800409e <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
        frequency = LSE_VALUE;
 8004096:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800409a:	62bb      	str	r3, [r7, #40]	; 0x28
 800409c:	e01f      	b.n	80040de <HAL_RCCEx_GetPeriphCLKFreq+0x132>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 800409e:	69fb      	ldr	r3, [r7, #28]
 80040a0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80040a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80040a8:	d109      	bne.n	80040be <HAL_RCCEx_GetPeriphCLKFreq+0x112>
 80040aa:	4b1a      	ldr	r3, [pc, #104]	; (8004114 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80040ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040ae:	f003 0302 	and.w	r3, r3, #2
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d003      	beq.n	80040be <HAL_RCCEx_GetPeriphCLKFreq+0x112>
        frequency = LSI_VALUE;
 80040b6:	f649 4340 	movw	r3, #40000	; 0x9c40
 80040ba:	62bb      	str	r3, [r7, #40]	; 0x28
 80040bc:	e00f      	b.n	80040de <HAL_RCCEx_GetPeriphCLKFreq+0x132>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80040be:	69fb      	ldr	r3, [r7, #28]
 80040c0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80040c4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80040c8:	d11a      	bne.n	8004100 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 80040ca:	4b12      	ldr	r3, [pc, #72]	; (8004114 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d014      	beq.n	8004100 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
        frequency = HSE_VALUE / 128U;
 80040d6:	f24f 4324 	movw	r3, #62500	; 0xf424
 80040da:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80040dc:	e010      	b.n	8004100 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 80040de:	e00f      	b.n	8004100 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 80040e0:	f7ff fe7c 	bl	8003ddc <HAL_RCC_GetPCLK2Freq>
 80040e4:	4602      	mov	r2, r0
 80040e6:	4b0b      	ldr	r3, [pc, #44]	; (8004114 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80040e8:	685b      	ldr	r3, [r3, #4]
 80040ea:	0b9b      	lsrs	r3, r3, #14
 80040ec:	f003 0303 	and.w	r3, r3, #3
 80040f0:	3301      	adds	r3, #1
 80040f2:	005b      	lsls	r3, r3, #1
 80040f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80040f8:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80040fa:	e002      	b.n	8004102 <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      break;
 80040fc:	bf00      	nop
 80040fe:	e000      	b.n	8004102 <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      break;
 8004100:	bf00      	nop
    }
  }
  return (frequency);
 8004102:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8004104:	4618      	mov	r0, r3
 8004106:	3734      	adds	r7, #52	; 0x34
 8004108:	46bd      	mov	sp, r7
 800410a:	bd90      	pop	{r4, r7, pc}
 800410c:	0800843c 	.word	0x0800843c
 8004110:	0800844c 	.word	0x0800844c
 8004114:	40021000 	.word	0x40021000
 8004118:	007a1200 	.word	0x007a1200
 800411c:	003d0900 	.word	0x003d0900
 8004120:	aaaaaaab 	.word	0xaaaaaaab

08004124 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004124:	b580      	push	{r7, lr}
 8004126:	b082      	sub	sp, #8
 8004128:	af00      	add	r7, sp, #0
 800412a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	2b00      	cmp	r3, #0
 8004130:	d101      	bne.n	8004136 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004132:	2301      	movs	r3, #1
 8004134:	e076      	b.n	8004224 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800413a:	2b00      	cmp	r3, #0
 800413c:	d108      	bne.n	8004150 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	685b      	ldr	r3, [r3, #4]
 8004142:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004146:	d009      	beq.n	800415c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2200      	movs	r2, #0
 800414c:	61da      	str	r2, [r3, #28]
 800414e:	e005      	b.n	800415c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2200      	movs	r2, #0
 8004154:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	2200      	movs	r2, #0
 800415a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	2200      	movs	r2, #0
 8004160:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004168:	b2db      	uxtb	r3, r3
 800416a:	2b00      	cmp	r3, #0
 800416c:	d106      	bne.n	800417c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	2200      	movs	r2, #0
 8004172:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004176:	6878      	ldr	r0, [r7, #4]
 8004178:	f7fc fb94 	bl	80008a4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	2202      	movs	r2, #2
 8004180:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	681a      	ldr	r2, [r3, #0]
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004192:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	685b      	ldr	r3, [r3, #4]
 8004198:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	689b      	ldr	r3, [r3, #8]
 80041a0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80041a4:	431a      	orrs	r2, r3
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	68db      	ldr	r3, [r3, #12]
 80041aa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80041ae:	431a      	orrs	r2, r3
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	691b      	ldr	r3, [r3, #16]
 80041b4:	f003 0302 	and.w	r3, r3, #2
 80041b8:	431a      	orrs	r2, r3
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	695b      	ldr	r3, [r3, #20]
 80041be:	f003 0301 	and.w	r3, r3, #1
 80041c2:	431a      	orrs	r2, r3
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	699b      	ldr	r3, [r3, #24]
 80041c8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80041cc:	431a      	orrs	r2, r3
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	69db      	ldr	r3, [r3, #28]
 80041d2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80041d6:	431a      	orrs	r2, r3
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	6a1b      	ldr	r3, [r3, #32]
 80041dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041e0:	ea42 0103 	orr.w	r1, r2, r3
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041e8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	430a      	orrs	r2, r1
 80041f2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	699b      	ldr	r3, [r3, #24]
 80041f8:	0c1a      	lsrs	r2, r3, #16
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f002 0204 	and.w	r2, r2, #4
 8004202:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	69da      	ldr	r2, [r3, #28]
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004212:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2200      	movs	r2, #0
 8004218:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	2201      	movs	r2, #1
 800421e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004222:	2300      	movs	r3, #0
}
 8004224:	4618      	mov	r0, r3
 8004226:	3708      	adds	r7, #8
 8004228:	46bd      	mov	sp, r7
 800422a:	bd80      	pop	{r7, pc}

0800422c <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800422c:	b084      	sub	sp, #16
 800422e:	b480      	push	{r7}
 8004230:	b083      	sub	sp, #12
 8004232:	af00      	add	r7, sp, #0
 8004234:	6078      	str	r0, [r7, #4]
 8004236:	f107 0014 	add.w	r0, r7, #20
 800423a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800423e:	2300      	movs	r3, #0
}
 8004240:	4618      	mov	r0, r3
 8004242:	370c      	adds	r7, #12
 8004244:	46bd      	mov	sp, r7
 8004246:	bc80      	pop	{r7}
 8004248:	b004      	add	sp, #16
 800424a:	4770      	bx	lr

0800424c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800424c:	b480      	push	{r7}
 800424e:	b085      	sub	sp, #20
 8004250:	af00      	add	r7, sp, #0
 8004252:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2200      	movs	r2, #0
 8004258:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800425c:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8004260:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	b29a      	uxth	r2, r3
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800426c:	2300      	movs	r3, #0
}
 800426e:	4618      	mov	r0, r3
 8004270:	3714      	adds	r7, #20
 8004272:	46bd      	mov	sp, r7
 8004274:	bc80      	pop	{r7}
 8004276:	4770      	bx	lr

08004278 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8004278:	b480      	push	{r7}
 800427a:	b085      	sub	sp, #20
 800427c:	af00      	add	r7, sp, #0
 800427e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004280:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8004284:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800428c:	b29a      	uxth	r2, r3
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	b29b      	uxth	r3, r3
 8004292:	43db      	mvns	r3, r3
 8004294:	b29b      	uxth	r3, r3
 8004296:	4013      	ands	r3, r2
 8004298:	b29a      	uxth	r2, r3
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80042a0:	2300      	movs	r3, #0
}
 80042a2:	4618      	mov	r0, r3
 80042a4:	3714      	adds	r7, #20
 80042a6:	46bd      	mov	sp, r7
 80042a8:	bc80      	pop	{r7}
 80042aa:	4770      	bx	lr

080042ac <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 80042ac:	b480      	push	{r7}
 80042ae:	b083      	sub	sp, #12
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	6078      	str	r0, [r7, #4]
 80042b4:	460b      	mov	r3, r1
 80042b6:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80042b8:	2300      	movs	r3, #0
}
 80042ba:	4618      	mov	r0, r3
 80042bc:	370c      	adds	r7, #12
 80042be:	46bd      	mov	sp, r7
 80042c0:	bc80      	pop	{r7}
 80042c2:	4770      	bx	lr

080042c4 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80042c4:	b084      	sub	sp, #16
 80042c6:	b480      	push	{r7}
 80042c8:	b083      	sub	sp, #12
 80042ca:	af00      	add	r7, sp, #0
 80042cc:	6078      	str	r0, [r7, #4]
 80042ce:	f107 0014 	add.w	r0, r7, #20
 80042d2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	2201      	movs	r2, #1
 80042da:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	2200      	movs	r2, #0
 80042e2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	2200      	movs	r2, #0
 80042ea:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	2200      	movs	r2, #0
 80042f2:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80042f6:	2300      	movs	r3, #0
}
 80042f8:	4618      	mov	r0, r3
 80042fa:	370c      	adds	r7, #12
 80042fc:	46bd      	mov	sp, r7
 80042fe:	bc80      	pop	{r7}
 8004300:	b004      	add	sp, #16
 8004302:	4770      	bx	lr

08004304 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004304:	b480      	push	{r7}
 8004306:	b09b      	sub	sp, #108	; 0x6c
 8004308:	af00      	add	r7, sp, #0
 800430a:	6078      	str	r0, [r7, #4]
 800430c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800430e:	2300      	movs	r3, #0
 8004310:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8004314:	687a      	ldr	r2, [r7, #4]
 8004316:	683b      	ldr	r3, [r7, #0]
 8004318:	781b      	ldrb	r3, [r3, #0]
 800431a:	009b      	lsls	r3, r3, #2
 800431c:	4413      	add	r3, r2
 800431e:	881b      	ldrh	r3, [r3, #0]
 8004320:	b29b      	uxth	r3, r3
 8004322:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8004326:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800432a:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 800432e:	683b      	ldr	r3, [r7, #0]
 8004330:	78db      	ldrb	r3, [r3, #3]
 8004332:	2b03      	cmp	r3, #3
 8004334:	d81f      	bhi.n	8004376 <USB_ActivateEndpoint+0x72>
 8004336:	a201      	add	r2, pc, #4	; (adr r2, 800433c <USB_ActivateEndpoint+0x38>)
 8004338:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800433c:	0800434d 	.word	0x0800434d
 8004340:	08004369 	.word	0x08004369
 8004344:	0800437f 	.word	0x0800437f
 8004348:	0800435b 	.word	0x0800435b
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800434c:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004350:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004354:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8004358:	e012      	b.n	8004380 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800435a:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800435e:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8004362:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8004366:	e00b      	b.n	8004380 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8004368:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800436c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004370:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8004374:	e004      	b.n	8004380 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8004376:	2301      	movs	r3, #1
 8004378:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 800437c:	e000      	b.n	8004380 <USB_ActivateEndpoint+0x7c>
      break;
 800437e:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8004380:	687a      	ldr	r2, [r7, #4]
 8004382:	683b      	ldr	r3, [r7, #0]
 8004384:	781b      	ldrb	r3, [r3, #0]
 8004386:	009b      	lsls	r3, r3, #2
 8004388:	441a      	add	r2, r3
 800438a:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800438e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004392:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004396:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800439a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800439e:	b29b      	uxth	r3, r3
 80043a0:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80043a2:	687a      	ldr	r2, [r7, #4]
 80043a4:	683b      	ldr	r3, [r7, #0]
 80043a6:	781b      	ldrb	r3, [r3, #0]
 80043a8:	009b      	lsls	r3, r3, #2
 80043aa:	4413      	add	r3, r2
 80043ac:	881b      	ldrh	r3, [r3, #0]
 80043ae:	b29b      	uxth	r3, r3
 80043b0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80043b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043b8:	b29a      	uxth	r2, r3
 80043ba:	683b      	ldr	r3, [r7, #0]
 80043bc:	781b      	ldrb	r3, [r3, #0]
 80043be:	b29b      	uxth	r3, r3
 80043c0:	4313      	orrs	r3, r2
 80043c2:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 80043c6:	687a      	ldr	r2, [r7, #4]
 80043c8:	683b      	ldr	r3, [r7, #0]
 80043ca:	781b      	ldrb	r3, [r3, #0]
 80043cc:	009b      	lsls	r3, r3, #2
 80043ce:	441a      	add	r2, r3
 80043d0:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80043d4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80043d8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80043dc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80043e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80043e4:	b29b      	uxth	r3, r3
 80043e6:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 80043e8:	683b      	ldr	r3, [r7, #0]
 80043ea:	7b1b      	ldrb	r3, [r3, #12]
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	f040 8149 	bne.w	8004684 <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 80043f2:	683b      	ldr	r3, [r7, #0]
 80043f4:	785b      	ldrb	r3, [r3, #1]
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	f000 8084 	beq.w	8004504 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	617b      	str	r3, [r7, #20]
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004406:	b29b      	uxth	r3, r3
 8004408:	461a      	mov	r2, r3
 800440a:	697b      	ldr	r3, [r7, #20]
 800440c:	4413      	add	r3, r2
 800440e:	617b      	str	r3, [r7, #20]
 8004410:	683b      	ldr	r3, [r7, #0]
 8004412:	781b      	ldrb	r3, [r3, #0]
 8004414:	011a      	lsls	r2, r3, #4
 8004416:	697b      	ldr	r3, [r7, #20]
 8004418:	4413      	add	r3, r2
 800441a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800441e:	613b      	str	r3, [r7, #16]
 8004420:	683b      	ldr	r3, [r7, #0]
 8004422:	88db      	ldrh	r3, [r3, #6]
 8004424:	085b      	lsrs	r3, r3, #1
 8004426:	b29b      	uxth	r3, r3
 8004428:	005b      	lsls	r3, r3, #1
 800442a:	b29a      	uxth	r2, r3
 800442c:	693b      	ldr	r3, [r7, #16]
 800442e:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004430:	687a      	ldr	r2, [r7, #4]
 8004432:	683b      	ldr	r3, [r7, #0]
 8004434:	781b      	ldrb	r3, [r3, #0]
 8004436:	009b      	lsls	r3, r3, #2
 8004438:	4413      	add	r3, r2
 800443a:	881b      	ldrh	r3, [r3, #0]
 800443c:	81fb      	strh	r3, [r7, #14]
 800443e:	89fb      	ldrh	r3, [r7, #14]
 8004440:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004444:	2b00      	cmp	r3, #0
 8004446:	d01b      	beq.n	8004480 <USB_ActivateEndpoint+0x17c>
 8004448:	687a      	ldr	r2, [r7, #4]
 800444a:	683b      	ldr	r3, [r7, #0]
 800444c:	781b      	ldrb	r3, [r3, #0]
 800444e:	009b      	lsls	r3, r3, #2
 8004450:	4413      	add	r3, r2
 8004452:	881b      	ldrh	r3, [r3, #0]
 8004454:	b29b      	uxth	r3, r3
 8004456:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800445a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800445e:	81bb      	strh	r3, [r7, #12]
 8004460:	687a      	ldr	r2, [r7, #4]
 8004462:	683b      	ldr	r3, [r7, #0]
 8004464:	781b      	ldrb	r3, [r3, #0]
 8004466:	009b      	lsls	r3, r3, #2
 8004468:	441a      	add	r2, r3
 800446a:	89bb      	ldrh	r3, [r7, #12]
 800446c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004470:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004474:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004478:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800447c:	b29b      	uxth	r3, r3
 800447e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004480:	683b      	ldr	r3, [r7, #0]
 8004482:	78db      	ldrb	r3, [r3, #3]
 8004484:	2b01      	cmp	r3, #1
 8004486:	d020      	beq.n	80044ca <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004488:	687a      	ldr	r2, [r7, #4]
 800448a:	683b      	ldr	r3, [r7, #0]
 800448c:	781b      	ldrb	r3, [r3, #0]
 800448e:	009b      	lsls	r3, r3, #2
 8004490:	4413      	add	r3, r2
 8004492:	881b      	ldrh	r3, [r3, #0]
 8004494:	b29b      	uxth	r3, r3
 8004496:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800449a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800449e:	813b      	strh	r3, [r7, #8]
 80044a0:	893b      	ldrh	r3, [r7, #8]
 80044a2:	f083 0320 	eor.w	r3, r3, #32
 80044a6:	813b      	strh	r3, [r7, #8]
 80044a8:	687a      	ldr	r2, [r7, #4]
 80044aa:	683b      	ldr	r3, [r7, #0]
 80044ac:	781b      	ldrb	r3, [r3, #0]
 80044ae:	009b      	lsls	r3, r3, #2
 80044b0:	441a      	add	r2, r3
 80044b2:	893b      	ldrh	r3, [r7, #8]
 80044b4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80044b8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80044bc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80044c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80044c4:	b29b      	uxth	r3, r3
 80044c6:	8013      	strh	r3, [r2, #0]
 80044c8:	e27f      	b.n	80049ca <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80044ca:	687a      	ldr	r2, [r7, #4]
 80044cc:	683b      	ldr	r3, [r7, #0]
 80044ce:	781b      	ldrb	r3, [r3, #0]
 80044d0:	009b      	lsls	r3, r3, #2
 80044d2:	4413      	add	r3, r2
 80044d4:	881b      	ldrh	r3, [r3, #0]
 80044d6:	b29b      	uxth	r3, r3
 80044d8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80044dc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80044e0:	817b      	strh	r3, [r7, #10]
 80044e2:	687a      	ldr	r2, [r7, #4]
 80044e4:	683b      	ldr	r3, [r7, #0]
 80044e6:	781b      	ldrb	r3, [r3, #0]
 80044e8:	009b      	lsls	r3, r3, #2
 80044ea:	441a      	add	r2, r3
 80044ec:	897b      	ldrh	r3, [r7, #10]
 80044ee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80044f2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80044f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80044fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80044fe:	b29b      	uxth	r3, r3
 8004500:	8013      	strh	r3, [r2, #0]
 8004502:	e262      	b.n	80049ca <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800450e:	b29b      	uxth	r3, r3
 8004510:	461a      	mov	r2, r3
 8004512:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004514:	4413      	add	r3, r2
 8004516:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004518:	683b      	ldr	r3, [r7, #0]
 800451a:	781b      	ldrb	r3, [r3, #0]
 800451c:	011a      	lsls	r2, r3, #4
 800451e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004520:	4413      	add	r3, r2
 8004522:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8004526:	62bb      	str	r3, [r7, #40]	; 0x28
 8004528:	683b      	ldr	r3, [r7, #0]
 800452a:	88db      	ldrh	r3, [r3, #6]
 800452c:	085b      	lsrs	r3, r3, #1
 800452e:	b29b      	uxth	r3, r3
 8004530:	005b      	lsls	r3, r3, #1
 8004532:	b29a      	uxth	r2, r3
 8004534:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004536:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	627b      	str	r3, [r7, #36]	; 0x24
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004542:	b29b      	uxth	r3, r3
 8004544:	461a      	mov	r2, r3
 8004546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004548:	4413      	add	r3, r2
 800454a:	627b      	str	r3, [r7, #36]	; 0x24
 800454c:	683b      	ldr	r3, [r7, #0]
 800454e:	781b      	ldrb	r3, [r3, #0]
 8004550:	011a      	lsls	r2, r3, #4
 8004552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004554:	4413      	add	r3, r2
 8004556:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800455a:	623b      	str	r3, [r7, #32]
 800455c:	683b      	ldr	r3, [r7, #0]
 800455e:	691b      	ldr	r3, [r3, #16]
 8004560:	2b00      	cmp	r3, #0
 8004562:	d112      	bne.n	800458a <USB_ActivateEndpoint+0x286>
 8004564:	6a3b      	ldr	r3, [r7, #32]
 8004566:	881b      	ldrh	r3, [r3, #0]
 8004568:	b29b      	uxth	r3, r3
 800456a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800456e:	b29a      	uxth	r2, r3
 8004570:	6a3b      	ldr	r3, [r7, #32]
 8004572:	801a      	strh	r2, [r3, #0]
 8004574:	6a3b      	ldr	r3, [r7, #32]
 8004576:	881b      	ldrh	r3, [r3, #0]
 8004578:	b29b      	uxth	r3, r3
 800457a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800457e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004582:	b29a      	uxth	r2, r3
 8004584:	6a3b      	ldr	r3, [r7, #32]
 8004586:	801a      	strh	r2, [r3, #0]
 8004588:	e02f      	b.n	80045ea <USB_ActivateEndpoint+0x2e6>
 800458a:	683b      	ldr	r3, [r7, #0]
 800458c:	691b      	ldr	r3, [r3, #16]
 800458e:	2b3e      	cmp	r3, #62	; 0x3e
 8004590:	d813      	bhi.n	80045ba <USB_ActivateEndpoint+0x2b6>
 8004592:	683b      	ldr	r3, [r7, #0]
 8004594:	691b      	ldr	r3, [r3, #16]
 8004596:	085b      	lsrs	r3, r3, #1
 8004598:	663b      	str	r3, [r7, #96]	; 0x60
 800459a:	683b      	ldr	r3, [r7, #0]
 800459c:	691b      	ldr	r3, [r3, #16]
 800459e:	f003 0301 	and.w	r3, r3, #1
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d002      	beq.n	80045ac <USB_ActivateEndpoint+0x2a8>
 80045a6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80045a8:	3301      	adds	r3, #1
 80045aa:	663b      	str	r3, [r7, #96]	; 0x60
 80045ac:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80045ae:	b29b      	uxth	r3, r3
 80045b0:	029b      	lsls	r3, r3, #10
 80045b2:	b29a      	uxth	r2, r3
 80045b4:	6a3b      	ldr	r3, [r7, #32]
 80045b6:	801a      	strh	r2, [r3, #0]
 80045b8:	e017      	b.n	80045ea <USB_ActivateEndpoint+0x2e6>
 80045ba:	683b      	ldr	r3, [r7, #0]
 80045bc:	691b      	ldr	r3, [r3, #16]
 80045be:	095b      	lsrs	r3, r3, #5
 80045c0:	663b      	str	r3, [r7, #96]	; 0x60
 80045c2:	683b      	ldr	r3, [r7, #0]
 80045c4:	691b      	ldr	r3, [r3, #16]
 80045c6:	f003 031f 	and.w	r3, r3, #31
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d102      	bne.n	80045d4 <USB_ActivateEndpoint+0x2d0>
 80045ce:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80045d0:	3b01      	subs	r3, #1
 80045d2:	663b      	str	r3, [r7, #96]	; 0x60
 80045d4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80045d6:	b29b      	uxth	r3, r3
 80045d8:	029b      	lsls	r3, r3, #10
 80045da:	b29b      	uxth	r3, r3
 80045dc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80045e0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80045e4:	b29a      	uxth	r2, r3
 80045e6:	6a3b      	ldr	r3, [r7, #32]
 80045e8:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80045ea:	687a      	ldr	r2, [r7, #4]
 80045ec:	683b      	ldr	r3, [r7, #0]
 80045ee:	781b      	ldrb	r3, [r3, #0]
 80045f0:	009b      	lsls	r3, r3, #2
 80045f2:	4413      	add	r3, r2
 80045f4:	881b      	ldrh	r3, [r3, #0]
 80045f6:	83fb      	strh	r3, [r7, #30]
 80045f8:	8bfb      	ldrh	r3, [r7, #30]
 80045fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d01b      	beq.n	800463a <USB_ActivateEndpoint+0x336>
 8004602:	687a      	ldr	r2, [r7, #4]
 8004604:	683b      	ldr	r3, [r7, #0]
 8004606:	781b      	ldrb	r3, [r3, #0]
 8004608:	009b      	lsls	r3, r3, #2
 800460a:	4413      	add	r3, r2
 800460c:	881b      	ldrh	r3, [r3, #0]
 800460e:	b29b      	uxth	r3, r3
 8004610:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004614:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004618:	83bb      	strh	r3, [r7, #28]
 800461a:	687a      	ldr	r2, [r7, #4]
 800461c:	683b      	ldr	r3, [r7, #0]
 800461e:	781b      	ldrb	r3, [r3, #0]
 8004620:	009b      	lsls	r3, r3, #2
 8004622:	441a      	add	r2, r3
 8004624:	8bbb      	ldrh	r3, [r7, #28]
 8004626:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800462a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800462e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004632:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004636:	b29b      	uxth	r3, r3
 8004638:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800463a:	687a      	ldr	r2, [r7, #4]
 800463c:	683b      	ldr	r3, [r7, #0]
 800463e:	781b      	ldrb	r3, [r3, #0]
 8004640:	009b      	lsls	r3, r3, #2
 8004642:	4413      	add	r3, r2
 8004644:	881b      	ldrh	r3, [r3, #0]
 8004646:	b29b      	uxth	r3, r3
 8004648:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800464c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004650:	837b      	strh	r3, [r7, #26]
 8004652:	8b7b      	ldrh	r3, [r7, #26]
 8004654:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004658:	837b      	strh	r3, [r7, #26]
 800465a:	8b7b      	ldrh	r3, [r7, #26]
 800465c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004660:	837b      	strh	r3, [r7, #26]
 8004662:	687a      	ldr	r2, [r7, #4]
 8004664:	683b      	ldr	r3, [r7, #0]
 8004666:	781b      	ldrb	r3, [r3, #0]
 8004668:	009b      	lsls	r3, r3, #2
 800466a:	441a      	add	r2, r3
 800466c:	8b7b      	ldrh	r3, [r7, #26]
 800466e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004672:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004676:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800467a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800467e:	b29b      	uxth	r3, r3
 8004680:	8013      	strh	r3, [r2, #0]
 8004682:	e1a2      	b.n	80049ca <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8004684:	687a      	ldr	r2, [r7, #4]
 8004686:	683b      	ldr	r3, [r7, #0]
 8004688:	781b      	ldrb	r3, [r3, #0]
 800468a:	009b      	lsls	r3, r3, #2
 800468c:	4413      	add	r3, r2
 800468e:	881b      	ldrh	r3, [r3, #0]
 8004690:	b29b      	uxth	r3, r3
 8004692:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004696:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800469a:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 800469e:	687a      	ldr	r2, [r7, #4]
 80046a0:	683b      	ldr	r3, [r7, #0]
 80046a2:	781b      	ldrb	r3, [r3, #0]
 80046a4:	009b      	lsls	r3, r3, #2
 80046a6:	441a      	add	r2, r3
 80046a8:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 80046ac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80046b0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80046b4:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80046b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80046bc:	b29b      	uxth	r3, r3
 80046be:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	65bb      	str	r3, [r7, #88]	; 0x58
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80046ca:	b29b      	uxth	r3, r3
 80046cc:	461a      	mov	r2, r3
 80046ce:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80046d0:	4413      	add	r3, r2
 80046d2:	65bb      	str	r3, [r7, #88]	; 0x58
 80046d4:	683b      	ldr	r3, [r7, #0]
 80046d6:	781b      	ldrb	r3, [r3, #0]
 80046d8:	011a      	lsls	r2, r3, #4
 80046da:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80046dc:	4413      	add	r3, r2
 80046de:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80046e2:	657b      	str	r3, [r7, #84]	; 0x54
 80046e4:	683b      	ldr	r3, [r7, #0]
 80046e6:	891b      	ldrh	r3, [r3, #8]
 80046e8:	085b      	lsrs	r3, r3, #1
 80046ea:	b29b      	uxth	r3, r3
 80046ec:	005b      	lsls	r3, r3, #1
 80046ee:	b29a      	uxth	r2, r3
 80046f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80046f2:	801a      	strh	r2, [r3, #0]
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	653b      	str	r3, [r7, #80]	; 0x50
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80046fe:	b29b      	uxth	r3, r3
 8004700:	461a      	mov	r2, r3
 8004702:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004704:	4413      	add	r3, r2
 8004706:	653b      	str	r3, [r7, #80]	; 0x50
 8004708:	683b      	ldr	r3, [r7, #0]
 800470a:	781b      	ldrb	r3, [r3, #0]
 800470c:	011a      	lsls	r2, r3, #4
 800470e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004710:	4413      	add	r3, r2
 8004712:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8004716:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004718:	683b      	ldr	r3, [r7, #0]
 800471a:	895b      	ldrh	r3, [r3, #10]
 800471c:	085b      	lsrs	r3, r3, #1
 800471e:	b29b      	uxth	r3, r3
 8004720:	005b      	lsls	r3, r3, #1
 8004722:	b29a      	uxth	r2, r3
 8004724:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004726:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8004728:	683b      	ldr	r3, [r7, #0]
 800472a:	785b      	ldrb	r3, [r3, #1]
 800472c:	2b00      	cmp	r3, #0
 800472e:	f040 8091 	bne.w	8004854 <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004732:	687a      	ldr	r2, [r7, #4]
 8004734:	683b      	ldr	r3, [r7, #0]
 8004736:	781b      	ldrb	r3, [r3, #0]
 8004738:	009b      	lsls	r3, r3, #2
 800473a:	4413      	add	r3, r2
 800473c:	881b      	ldrh	r3, [r3, #0]
 800473e:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8004740:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8004742:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004746:	2b00      	cmp	r3, #0
 8004748:	d01b      	beq.n	8004782 <USB_ActivateEndpoint+0x47e>
 800474a:	687a      	ldr	r2, [r7, #4]
 800474c:	683b      	ldr	r3, [r7, #0]
 800474e:	781b      	ldrb	r3, [r3, #0]
 8004750:	009b      	lsls	r3, r3, #2
 8004752:	4413      	add	r3, r2
 8004754:	881b      	ldrh	r3, [r3, #0]
 8004756:	b29b      	uxth	r3, r3
 8004758:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800475c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004760:	877b      	strh	r3, [r7, #58]	; 0x3a
 8004762:	687a      	ldr	r2, [r7, #4]
 8004764:	683b      	ldr	r3, [r7, #0]
 8004766:	781b      	ldrb	r3, [r3, #0]
 8004768:	009b      	lsls	r3, r3, #2
 800476a:	441a      	add	r2, r3
 800476c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800476e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004772:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004776:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800477a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800477e:	b29b      	uxth	r3, r3
 8004780:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004782:	687a      	ldr	r2, [r7, #4]
 8004784:	683b      	ldr	r3, [r7, #0]
 8004786:	781b      	ldrb	r3, [r3, #0]
 8004788:	009b      	lsls	r3, r3, #2
 800478a:	4413      	add	r3, r2
 800478c:	881b      	ldrh	r3, [r3, #0]
 800478e:	873b      	strh	r3, [r7, #56]	; 0x38
 8004790:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8004792:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004796:	2b00      	cmp	r3, #0
 8004798:	d01b      	beq.n	80047d2 <USB_ActivateEndpoint+0x4ce>
 800479a:	687a      	ldr	r2, [r7, #4]
 800479c:	683b      	ldr	r3, [r7, #0]
 800479e:	781b      	ldrb	r3, [r3, #0]
 80047a0:	009b      	lsls	r3, r3, #2
 80047a2:	4413      	add	r3, r2
 80047a4:	881b      	ldrh	r3, [r3, #0]
 80047a6:	b29b      	uxth	r3, r3
 80047a8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80047ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047b0:	86fb      	strh	r3, [r7, #54]	; 0x36
 80047b2:	687a      	ldr	r2, [r7, #4]
 80047b4:	683b      	ldr	r3, [r7, #0]
 80047b6:	781b      	ldrb	r3, [r3, #0]
 80047b8:	009b      	lsls	r3, r3, #2
 80047ba:	441a      	add	r2, r3
 80047bc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80047be:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80047c2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80047c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80047ca:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80047ce:	b29b      	uxth	r3, r3
 80047d0:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80047d2:	687a      	ldr	r2, [r7, #4]
 80047d4:	683b      	ldr	r3, [r7, #0]
 80047d6:	781b      	ldrb	r3, [r3, #0]
 80047d8:	009b      	lsls	r3, r3, #2
 80047da:	4413      	add	r3, r2
 80047dc:	881b      	ldrh	r3, [r3, #0]
 80047de:	b29b      	uxth	r3, r3
 80047e0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80047e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047e8:	86bb      	strh	r3, [r7, #52]	; 0x34
 80047ea:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80047ec:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80047f0:	86bb      	strh	r3, [r7, #52]	; 0x34
 80047f2:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80047f4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80047f8:	86bb      	strh	r3, [r7, #52]	; 0x34
 80047fa:	687a      	ldr	r2, [r7, #4]
 80047fc:	683b      	ldr	r3, [r7, #0]
 80047fe:	781b      	ldrb	r3, [r3, #0]
 8004800:	009b      	lsls	r3, r3, #2
 8004802:	441a      	add	r2, r3
 8004804:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004806:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800480a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800480e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004812:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004816:	b29b      	uxth	r3, r3
 8004818:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800481a:	687a      	ldr	r2, [r7, #4]
 800481c:	683b      	ldr	r3, [r7, #0]
 800481e:	781b      	ldrb	r3, [r3, #0]
 8004820:	009b      	lsls	r3, r3, #2
 8004822:	4413      	add	r3, r2
 8004824:	881b      	ldrh	r3, [r3, #0]
 8004826:	b29b      	uxth	r3, r3
 8004828:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800482c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004830:	867b      	strh	r3, [r7, #50]	; 0x32
 8004832:	687a      	ldr	r2, [r7, #4]
 8004834:	683b      	ldr	r3, [r7, #0]
 8004836:	781b      	ldrb	r3, [r3, #0]
 8004838:	009b      	lsls	r3, r3, #2
 800483a:	441a      	add	r2, r3
 800483c:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800483e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004842:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004846:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800484a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800484e:	b29b      	uxth	r3, r3
 8004850:	8013      	strh	r3, [r2, #0]
 8004852:	e0ba      	b.n	80049ca <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004854:	687a      	ldr	r2, [r7, #4]
 8004856:	683b      	ldr	r3, [r7, #0]
 8004858:	781b      	ldrb	r3, [r3, #0]
 800485a:	009b      	lsls	r3, r3, #2
 800485c:	4413      	add	r3, r2
 800485e:	881b      	ldrh	r3, [r3, #0]
 8004860:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8004864:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004868:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800486c:	2b00      	cmp	r3, #0
 800486e:	d01d      	beq.n	80048ac <USB_ActivateEndpoint+0x5a8>
 8004870:	687a      	ldr	r2, [r7, #4]
 8004872:	683b      	ldr	r3, [r7, #0]
 8004874:	781b      	ldrb	r3, [r3, #0]
 8004876:	009b      	lsls	r3, r3, #2
 8004878:	4413      	add	r3, r2
 800487a:	881b      	ldrh	r3, [r3, #0]
 800487c:	b29b      	uxth	r3, r3
 800487e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004882:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004886:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800488a:	687a      	ldr	r2, [r7, #4]
 800488c:	683b      	ldr	r3, [r7, #0]
 800488e:	781b      	ldrb	r3, [r3, #0]
 8004890:	009b      	lsls	r3, r3, #2
 8004892:	441a      	add	r2, r3
 8004894:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8004898:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800489c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80048a0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80048a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80048a8:	b29b      	uxth	r3, r3
 80048aa:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80048ac:	687a      	ldr	r2, [r7, #4]
 80048ae:	683b      	ldr	r3, [r7, #0]
 80048b0:	781b      	ldrb	r3, [r3, #0]
 80048b2:	009b      	lsls	r3, r3, #2
 80048b4:	4413      	add	r3, r2
 80048b6:	881b      	ldrh	r3, [r3, #0]
 80048b8:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80048bc:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80048c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d01d      	beq.n	8004904 <USB_ActivateEndpoint+0x600>
 80048c8:	687a      	ldr	r2, [r7, #4]
 80048ca:	683b      	ldr	r3, [r7, #0]
 80048cc:	781b      	ldrb	r3, [r3, #0]
 80048ce:	009b      	lsls	r3, r3, #2
 80048d0:	4413      	add	r3, r2
 80048d2:	881b      	ldrh	r3, [r3, #0]
 80048d4:	b29b      	uxth	r3, r3
 80048d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80048da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048de:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80048e2:	687a      	ldr	r2, [r7, #4]
 80048e4:	683b      	ldr	r3, [r7, #0]
 80048e6:	781b      	ldrb	r3, [r3, #0]
 80048e8:	009b      	lsls	r3, r3, #2
 80048ea:	441a      	add	r2, r3
 80048ec:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80048f0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80048f4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80048f8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80048fc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004900:	b29b      	uxth	r3, r3
 8004902:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004904:	683b      	ldr	r3, [r7, #0]
 8004906:	78db      	ldrb	r3, [r3, #3]
 8004908:	2b01      	cmp	r3, #1
 800490a:	d024      	beq.n	8004956 <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800490c:	687a      	ldr	r2, [r7, #4]
 800490e:	683b      	ldr	r3, [r7, #0]
 8004910:	781b      	ldrb	r3, [r3, #0]
 8004912:	009b      	lsls	r3, r3, #2
 8004914:	4413      	add	r3, r2
 8004916:	881b      	ldrh	r3, [r3, #0]
 8004918:	b29b      	uxth	r3, r3
 800491a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800491e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004922:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8004926:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800492a:	f083 0320 	eor.w	r3, r3, #32
 800492e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8004932:	687a      	ldr	r2, [r7, #4]
 8004934:	683b      	ldr	r3, [r7, #0]
 8004936:	781b      	ldrb	r3, [r3, #0]
 8004938:	009b      	lsls	r3, r3, #2
 800493a:	441a      	add	r2, r3
 800493c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004940:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004944:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004948:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800494c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004950:	b29b      	uxth	r3, r3
 8004952:	8013      	strh	r3, [r2, #0]
 8004954:	e01d      	b.n	8004992 <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004956:	687a      	ldr	r2, [r7, #4]
 8004958:	683b      	ldr	r3, [r7, #0]
 800495a:	781b      	ldrb	r3, [r3, #0]
 800495c:	009b      	lsls	r3, r3, #2
 800495e:	4413      	add	r3, r2
 8004960:	881b      	ldrh	r3, [r3, #0]
 8004962:	b29b      	uxth	r3, r3
 8004964:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004968:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800496c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8004970:	687a      	ldr	r2, [r7, #4]
 8004972:	683b      	ldr	r3, [r7, #0]
 8004974:	781b      	ldrb	r3, [r3, #0]
 8004976:	009b      	lsls	r3, r3, #2
 8004978:	441a      	add	r2, r3
 800497a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800497e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004982:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004986:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800498a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800498e:	b29b      	uxth	r3, r3
 8004990:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004992:	687a      	ldr	r2, [r7, #4]
 8004994:	683b      	ldr	r3, [r7, #0]
 8004996:	781b      	ldrb	r3, [r3, #0]
 8004998:	009b      	lsls	r3, r3, #2
 800499a:	4413      	add	r3, r2
 800499c:	881b      	ldrh	r3, [r3, #0]
 800499e:	b29b      	uxth	r3, r3
 80049a0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80049a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049a8:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80049aa:	687a      	ldr	r2, [r7, #4]
 80049ac:	683b      	ldr	r3, [r7, #0]
 80049ae:	781b      	ldrb	r3, [r3, #0]
 80049b0:	009b      	lsls	r3, r3, #2
 80049b2:	441a      	add	r2, r3
 80049b4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80049b6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80049ba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80049be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80049c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80049c6:	b29b      	uxth	r3, r3
 80049c8:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 80049ca:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80049ce:	4618      	mov	r0, r3
 80049d0:	376c      	adds	r7, #108	; 0x6c
 80049d2:	46bd      	mov	sp, r7
 80049d4:	bc80      	pop	{r7}
 80049d6:	4770      	bx	lr

080049d8 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80049d8:	b480      	push	{r7}
 80049da:	b08d      	sub	sp, #52	; 0x34
 80049dc:	af00      	add	r7, sp, #0
 80049de:	6078      	str	r0, [r7, #4]
 80049e0:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80049e2:	683b      	ldr	r3, [r7, #0]
 80049e4:	7b1b      	ldrb	r3, [r3, #12]
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	f040 808e 	bne.w	8004b08 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 80049ec:	683b      	ldr	r3, [r7, #0]
 80049ee:	785b      	ldrb	r3, [r3, #1]
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d044      	beq.n	8004a7e <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80049f4:	687a      	ldr	r2, [r7, #4]
 80049f6:	683b      	ldr	r3, [r7, #0]
 80049f8:	781b      	ldrb	r3, [r3, #0]
 80049fa:	009b      	lsls	r3, r3, #2
 80049fc:	4413      	add	r3, r2
 80049fe:	881b      	ldrh	r3, [r3, #0]
 8004a00:	81bb      	strh	r3, [r7, #12]
 8004a02:	89bb      	ldrh	r3, [r7, #12]
 8004a04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d01b      	beq.n	8004a44 <USB_DeactivateEndpoint+0x6c>
 8004a0c:	687a      	ldr	r2, [r7, #4]
 8004a0e:	683b      	ldr	r3, [r7, #0]
 8004a10:	781b      	ldrb	r3, [r3, #0]
 8004a12:	009b      	lsls	r3, r3, #2
 8004a14:	4413      	add	r3, r2
 8004a16:	881b      	ldrh	r3, [r3, #0]
 8004a18:	b29b      	uxth	r3, r3
 8004a1a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a22:	817b      	strh	r3, [r7, #10]
 8004a24:	687a      	ldr	r2, [r7, #4]
 8004a26:	683b      	ldr	r3, [r7, #0]
 8004a28:	781b      	ldrb	r3, [r3, #0]
 8004a2a:	009b      	lsls	r3, r3, #2
 8004a2c:	441a      	add	r2, r3
 8004a2e:	897b      	ldrh	r3, [r7, #10]
 8004a30:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a34:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a38:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a3c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004a40:	b29b      	uxth	r3, r3
 8004a42:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004a44:	687a      	ldr	r2, [r7, #4]
 8004a46:	683b      	ldr	r3, [r7, #0]
 8004a48:	781b      	ldrb	r3, [r3, #0]
 8004a4a:	009b      	lsls	r3, r3, #2
 8004a4c:	4413      	add	r3, r2
 8004a4e:	881b      	ldrh	r3, [r3, #0]
 8004a50:	b29b      	uxth	r3, r3
 8004a52:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a56:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004a5a:	813b      	strh	r3, [r7, #8]
 8004a5c:	687a      	ldr	r2, [r7, #4]
 8004a5e:	683b      	ldr	r3, [r7, #0]
 8004a60:	781b      	ldrb	r3, [r3, #0]
 8004a62:	009b      	lsls	r3, r3, #2
 8004a64:	441a      	add	r2, r3
 8004a66:	893b      	ldrh	r3, [r7, #8]
 8004a68:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a6c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a70:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a78:	b29b      	uxth	r3, r3
 8004a7a:	8013      	strh	r3, [r2, #0]
 8004a7c:	e192      	b.n	8004da4 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004a7e:	687a      	ldr	r2, [r7, #4]
 8004a80:	683b      	ldr	r3, [r7, #0]
 8004a82:	781b      	ldrb	r3, [r3, #0]
 8004a84:	009b      	lsls	r3, r3, #2
 8004a86:	4413      	add	r3, r2
 8004a88:	881b      	ldrh	r3, [r3, #0]
 8004a8a:	827b      	strh	r3, [r7, #18]
 8004a8c:	8a7b      	ldrh	r3, [r7, #18]
 8004a8e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d01b      	beq.n	8004ace <USB_DeactivateEndpoint+0xf6>
 8004a96:	687a      	ldr	r2, [r7, #4]
 8004a98:	683b      	ldr	r3, [r7, #0]
 8004a9a:	781b      	ldrb	r3, [r3, #0]
 8004a9c:	009b      	lsls	r3, r3, #2
 8004a9e:	4413      	add	r3, r2
 8004aa0:	881b      	ldrh	r3, [r3, #0]
 8004aa2:	b29b      	uxth	r3, r3
 8004aa4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004aa8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004aac:	823b      	strh	r3, [r7, #16]
 8004aae:	687a      	ldr	r2, [r7, #4]
 8004ab0:	683b      	ldr	r3, [r7, #0]
 8004ab2:	781b      	ldrb	r3, [r3, #0]
 8004ab4:	009b      	lsls	r3, r3, #2
 8004ab6:	441a      	add	r2, r3
 8004ab8:	8a3b      	ldrh	r3, [r7, #16]
 8004aba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004abe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ac2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004ac6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004aca:	b29b      	uxth	r3, r3
 8004acc:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004ace:	687a      	ldr	r2, [r7, #4]
 8004ad0:	683b      	ldr	r3, [r7, #0]
 8004ad2:	781b      	ldrb	r3, [r3, #0]
 8004ad4:	009b      	lsls	r3, r3, #2
 8004ad6:	4413      	add	r3, r2
 8004ad8:	881b      	ldrh	r3, [r3, #0]
 8004ada:	b29b      	uxth	r3, r3
 8004adc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004ae0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ae4:	81fb      	strh	r3, [r7, #14]
 8004ae6:	687a      	ldr	r2, [r7, #4]
 8004ae8:	683b      	ldr	r3, [r7, #0]
 8004aea:	781b      	ldrb	r3, [r3, #0]
 8004aec:	009b      	lsls	r3, r3, #2
 8004aee:	441a      	add	r2, r3
 8004af0:	89fb      	ldrh	r3, [r7, #14]
 8004af2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004af6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004afa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004afe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b02:	b29b      	uxth	r3, r3
 8004b04:	8013      	strh	r3, [r2, #0]
 8004b06:	e14d      	b.n	8004da4 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8004b08:	683b      	ldr	r3, [r7, #0]
 8004b0a:	785b      	ldrb	r3, [r3, #1]
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	f040 80a5 	bne.w	8004c5c <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004b12:	687a      	ldr	r2, [r7, #4]
 8004b14:	683b      	ldr	r3, [r7, #0]
 8004b16:	781b      	ldrb	r3, [r3, #0]
 8004b18:	009b      	lsls	r3, r3, #2
 8004b1a:	4413      	add	r3, r2
 8004b1c:	881b      	ldrh	r3, [r3, #0]
 8004b1e:	843b      	strh	r3, [r7, #32]
 8004b20:	8c3b      	ldrh	r3, [r7, #32]
 8004b22:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d01b      	beq.n	8004b62 <USB_DeactivateEndpoint+0x18a>
 8004b2a:	687a      	ldr	r2, [r7, #4]
 8004b2c:	683b      	ldr	r3, [r7, #0]
 8004b2e:	781b      	ldrb	r3, [r3, #0]
 8004b30:	009b      	lsls	r3, r3, #2
 8004b32:	4413      	add	r3, r2
 8004b34:	881b      	ldrh	r3, [r3, #0]
 8004b36:	b29b      	uxth	r3, r3
 8004b38:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b3c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b40:	83fb      	strh	r3, [r7, #30]
 8004b42:	687a      	ldr	r2, [r7, #4]
 8004b44:	683b      	ldr	r3, [r7, #0]
 8004b46:	781b      	ldrb	r3, [r3, #0]
 8004b48:	009b      	lsls	r3, r3, #2
 8004b4a:	441a      	add	r2, r3
 8004b4c:	8bfb      	ldrh	r3, [r7, #30]
 8004b4e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b52:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b56:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004b5a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b5e:	b29b      	uxth	r3, r3
 8004b60:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004b62:	687a      	ldr	r2, [r7, #4]
 8004b64:	683b      	ldr	r3, [r7, #0]
 8004b66:	781b      	ldrb	r3, [r3, #0]
 8004b68:	009b      	lsls	r3, r3, #2
 8004b6a:	4413      	add	r3, r2
 8004b6c:	881b      	ldrh	r3, [r3, #0]
 8004b6e:	83bb      	strh	r3, [r7, #28]
 8004b70:	8bbb      	ldrh	r3, [r7, #28]
 8004b72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d01b      	beq.n	8004bb2 <USB_DeactivateEndpoint+0x1da>
 8004b7a:	687a      	ldr	r2, [r7, #4]
 8004b7c:	683b      	ldr	r3, [r7, #0]
 8004b7e:	781b      	ldrb	r3, [r3, #0]
 8004b80:	009b      	lsls	r3, r3, #2
 8004b82:	4413      	add	r3, r2
 8004b84:	881b      	ldrh	r3, [r3, #0]
 8004b86:	b29b      	uxth	r3, r3
 8004b88:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b8c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b90:	837b      	strh	r3, [r7, #26]
 8004b92:	687a      	ldr	r2, [r7, #4]
 8004b94:	683b      	ldr	r3, [r7, #0]
 8004b96:	781b      	ldrb	r3, [r3, #0]
 8004b98:	009b      	lsls	r3, r3, #2
 8004b9a:	441a      	add	r2, r3
 8004b9c:	8b7b      	ldrh	r3, [r7, #26]
 8004b9e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ba2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ba6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004baa:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004bae:	b29b      	uxth	r3, r3
 8004bb0:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8004bb2:	687a      	ldr	r2, [r7, #4]
 8004bb4:	683b      	ldr	r3, [r7, #0]
 8004bb6:	781b      	ldrb	r3, [r3, #0]
 8004bb8:	009b      	lsls	r3, r3, #2
 8004bba:	4413      	add	r3, r2
 8004bbc:	881b      	ldrh	r3, [r3, #0]
 8004bbe:	b29b      	uxth	r3, r3
 8004bc0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004bc4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bc8:	833b      	strh	r3, [r7, #24]
 8004bca:	687a      	ldr	r2, [r7, #4]
 8004bcc:	683b      	ldr	r3, [r7, #0]
 8004bce:	781b      	ldrb	r3, [r3, #0]
 8004bd0:	009b      	lsls	r3, r3, #2
 8004bd2:	441a      	add	r2, r3
 8004bd4:	8b3b      	ldrh	r3, [r7, #24]
 8004bd6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004bda:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004bde:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004be2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004be6:	b29b      	uxth	r3, r3
 8004be8:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004bea:	687a      	ldr	r2, [r7, #4]
 8004bec:	683b      	ldr	r3, [r7, #0]
 8004bee:	781b      	ldrb	r3, [r3, #0]
 8004bf0:	009b      	lsls	r3, r3, #2
 8004bf2:	4413      	add	r3, r2
 8004bf4:	881b      	ldrh	r3, [r3, #0]
 8004bf6:	b29b      	uxth	r3, r3
 8004bf8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004bfc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c00:	82fb      	strh	r3, [r7, #22]
 8004c02:	687a      	ldr	r2, [r7, #4]
 8004c04:	683b      	ldr	r3, [r7, #0]
 8004c06:	781b      	ldrb	r3, [r3, #0]
 8004c08:	009b      	lsls	r3, r3, #2
 8004c0a:	441a      	add	r2, r3
 8004c0c:	8afb      	ldrh	r3, [r7, #22]
 8004c0e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c12:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c16:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c1a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c1e:	b29b      	uxth	r3, r3
 8004c20:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004c22:	687a      	ldr	r2, [r7, #4]
 8004c24:	683b      	ldr	r3, [r7, #0]
 8004c26:	781b      	ldrb	r3, [r3, #0]
 8004c28:	009b      	lsls	r3, r3, #2
 8004c2a:	4413      	add	r3, r2
 8004c2c:	881b      	ldrh	r3, [r3, #0]
 8004c2e:	b29b      	uxth	r3, r3
 8004c30:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c34:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004c38:	82bb      	strh	r3, [r7, #20]
 8004c3a:	687a      	ldr	r2, [r7, #4]
 8004c3c:	683b      	ldr	r3, [r7, #0]
 8004c3e:	781b      	ldrb	r3, [r3, #0]
 8004c40:	009b      	lsls	r3, r3, #2
 8004c42:	441a      	add	r2, r3
 8004c44:	8abb      	ldrh	r3, [r7, #20]
 8004c46:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c4a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c4e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c52:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c56:	b29b      	uxth	r3, r3
 8004c58:	8013      	strh	r3, [r2, #0]
 8004c5a:	e0a3      	b.n	8004da4 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004c5c:	687a      	ldr	r2, [r7, #4]
 8004c5e:	683b      	ldr	r3, [r7, #0]
 8004c60:	781b      	ldrb	r3, [r3, #0]
 8004c62:	009b      	lsls	r3, r3, #2
 8004c64:	4413      	add	r3, r2
 8004c66:	881b      	ldrh	r3, [r3, #0]
 8004c68:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004c6a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004c6c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d01b      	beq.n	8004cac <USB_DeactivateEndpoint+0x2d4>
 8004c74:	687a      	ldr	r2, [r7, #4]
 8004c76:	683b      	ldr	r3, [r7, #0]
 8004c78:	781b      	ldrb	r3, [r3, #0]
 8004c7a:	009b      	lsls	r3, r3, #2
 8004c7c:	4413      	add	r3, r2
 8004c7e:	881b      	ldrh	r3, [r3, #0]
 8004c80:	b29b      	uxth	r3, r3
 8004c82:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c8a:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8004c8c:	687a      	ldr	r2, [r7, #4]
 8004c8e:	683b      	ldr	r3, [r7, #0]
 8004c90:	781b      	ldrb	r3, [r3, #0]
 8004c92:	009b      	lsls	r3, r3, #2
 8004c94:	441a      	add	r2, r3
 8004c96:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8004c98:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c9c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ca0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004ca4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ca8:	b29b      	uxth	r3, r3
 8004caa:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004cac:	687a      	ldr	r2, [r7, #4]
 8004cae:	683b      	ldr	r3, [r7, #0]
 8004cb0:	781b      	ldrb	r3, [r3, #0]
 8004cb2:	009b      	lsls	r3, r3, #2
 8004cb4:	4413      	add	r3, r2
 8004cb6:	881b      	ldrh	r3, [r3, #0]
 8004cb8:	857b      	strh	r3, [r7, #42]	; 0x2a
 8004cba:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004cbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d01b      	beq.n	8004cfc <USB_DeactivateEndpoint+0x324>
 8004cc4:	687a      	ldr	r2, [r7, #4]
 8004cc6:	683b      	ldr	r3, [r7, #0]
 8004cc8:	781b      	ldrb	r3, [r3, #0]
 8004cca:	009b      	lsls	r3, r3, #2
 8004ccc:	4413      	add	r3, r2
 8004cce:	881b      	ldrh	r3, [r3, #0]
 8004cd0:	b29b      	uxth	r3, r3
 8004cd2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004cd6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004cda:	853b      	strh	r3, [r7, #40]	; 0x28
 8004cdc:	687a      	ldr	r2, [r7, #4]
 8004cde:	683b      	ldr	r3, [r7, #0]
 8004ce0:	781b      	ldrb	r3, [r3, #0]
 8004ce2:	009b      	lsls	r3, r3, #2
 8004ce4:	441a      	add	r2, r3
 8004ce6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004ce8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004cec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004cf0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004cf4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004cf8:	b29b      	uxth	r3, r3
 8004cfa:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8004cfc:	687a      	ldr	r2, [r7, #4]
 8004cfe:	683b      	ldr	r3, [r7, #0]
 8004d00:	781b      	ldrb	r3, [r3, #0]
 8004d02:	009b      	lsls	r3, r3, #2
 8004d04:	4413      	add	r3, r2
 8004d06:	881b      	ldrh	r3, [r3, #0]
 8004d08:	b29b      	uxth	r3, r3
 8004d0a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d12:	84fb      	strh	r3, [r7, #38]	; 0x26
 8004d14:	687a      	ldr	r2, [r7, #4]
 8004d16:	683b      	ldr	r3, [r7, #0]
 8004d18:	781b      	ldrb	r3, [r3, #0]
 8004d1a:	009b      	lsls	r3, r3, #2
 8004d1c:	441a      	add	r2, r3
 8004d1e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004d20:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d24:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d28:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004d2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d30:	b29b      	uxth	r3, r3
 8004d32:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004d34:	687a      	ldr	r2, [r7, #4]
 8004d36:	683b      	ldr	r3, [r7, #0]
 8004d38:	781b      	ldrb	r3, [r3, #0]
 8004d3a:	009b      	lsls	r3, r3, #2
 8004d3c:	4413      	add	r3, r2
 8004d3e:	881b      	ldrh	r3, [r3, #0]
 8004d40:	b29b      	uxth	r3, r3
 8004d42:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d46:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004d4a:	84bb      	strh	r3, [r7, #36]	; 0x24
 8004d4c:	687a      	ldr	r2, [r7, #4]
 8004d4e:	683b      	ldr	r3, [r7, #0]
 8004d50:	781b      	ldrb	r3, [r3, #0]
 8004d52:	009b      	lsls	r3, r3, #2
 8004d54:	441a      	add	r2, r3
 8004d56:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004d58:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d5c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d60:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d68:	b29b      	uxth	r3, r3
 8004d6a:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004d6c:	687a      	ldr	r2, [r7, #4]
 8004d6e:	683b      	ldr	r3, [r7, #0]
 8004d70:	781b      	ldrb	r3, [r3, #0]
 8004d72:	009b      	lsls	r3, r3, #2
 8004d74:	4413      	add	r3, r2
 8004d76:	881b      	ldrh	r3, [r3, #0]
 8004d78:	b29b      	uxth	r3, r3
 8004d7a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004d7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d82:	847b      	strh	r3, [r7, #34]	; 0x22
 8004d84:	687a      	ldr	r2, [r7, #4]
 8004d86:	683b      	ldr	r3, [r7, #0]
 8004d88:	781b      	ldrb	r3, [r3, #0]
 8004d8a:	009b      	lsls	r3, r3, #2
 8004d8c:	441a      	add	r2, r3
 8004d8e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004d90:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d94:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d98:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004da0:	b29b      	uxth	r3, r3
 8004da2:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8004da4:	2300      	movs	r3, #0
}
 8004da6:	4618      	mov	r0, r3
 8004da8:	3734      	adds	r7, #52	; 0x34
 8004daa:	46bd      	mov	sp, r7
 8004dac:	bc80      	pop	{r7}
 8004dae:	4770      	bx	lr

08004db0 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004db0:	b580      	push	{r7, lr}
 8004db2:	b0c4      	sub	sp, #272	; 0x110
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	1d3b      	adds	r3, r7, #4
 8004db8:	6018      	str	r0, [r3, #0]
 8004dba:	463b      	mov	r3, r7
 8004dbc:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004dbe:	463b      	mov	r3, r7
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	785b      	ldrb	r3, [r3, #1]
 8004dc4:	2b01      	cmp	r3, #1
 8004dc6:	f040 8557 	bne.w	8005878 <USB_EPStartXfer+0xac8>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8004dca:	463b      	mov	r3, r7
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	699a      	ldr	r2, [r3, #24]
 8004dd0:	463b      	mov	r3, r7
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	691b      	ldr	r3, [r3, #16]
 8004dd6:	429a      	cmp	r2, r3
 8004dd8:	d905      	bls.n	8004de6 <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 8004dda:	463b      	mov	r3, r7
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	691b      	ldr	r3, [r3, #16]
 8004de0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8004de4:	e004      	b.n	8004df0 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 8004de6:	463b      	mov	r3, r7
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	699b      	ldr	r3, [r3, #24]
 8004dec:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8004df0:	463b      	mov	r3, r7
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	7b1b      	ldrb	r3, [r3, #12]
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d12c      	bne.n	8004e54 <USB_EPStartXfer+0xa4>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8004dfa:	463b      	mov	r3, r7
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	6959      	ldr	r1, [r3, #20]
 8004e00:	463b      	mov	r3, r7
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	88da      	ldrh	r2, [r3, #6]
 8004e06:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004e0a:	b29b      	uxth	r3, r3
 8004e0c:	1d38      	adds	r0, r7, #4
 8004e0e:	6800      	ldr	r0, [r0, #0]
 8004e10:	f001 fa2c 	bl	800626c <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8004e14:	1d3b      	adds	r3, r7, #4
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	617b      	str	r3, [r7, #20]
 8004e1a:	1d3b      	adds	r3, r7, #4
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004e22:	b29b      	uxth	r3, r3
 8004e24:	461a      	mov	r2, r3
 8004e26:	697b      	ldr	r3, [r7, #20]
 8004e28:	4413      	add	r3, r2
 8004e2a:	617b      	str	r3, [r7, #20]
 8004e2c:	463b      	mov	r3, r7
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	781b      	ldrb	r3, [r3, #0]
 8004e32:	011a      	lsls	r2, r3, #4
 8004e34:	697b      	ldr	r3, [r7, #20]
 8004e36:	4413      	add	r3, r2
 8004e38:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8004e3c:	f107 0310 	add.w	r3, r7, #16
 8004e40:	601a      	str	r2, [r3, #0]
 8004e42:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004e46:	b29a      	uxth	r2, r3
 8004e48:	f107 0310 	add.w	r3, r7, #16
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	801a      	strh	r2, [r3, #0]
 8004e50:	f000 bcdd 	b.w	800580e <USB_EPStartXfer+0xa5e>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8004e54:	463b      	mov	r3, r7
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	78db      	ldrb	r3, [r3, #3]
 8004e5a:	2b02      	cmp	r3, #2
 8004e5c:	f040 8347 	bne.w	80054ee <USB_EPStartXfer+0x73e>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8004e60:	463b      	mov	r3, r7
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	6a1a      	ldr	r2, [r3, #32]
 8004e66:	463b      	mov	r3, r7
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	691b      	ldr	r3, [r3, #16]
 8004e6c:	429a      	cmp	r2, r3
 8004e6e:	f240 82eb 	bls.w	8005448 <USB_EPStartXfer+0x698>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 8004e72:	1d3b      	adds	r3, r7, #4
 8004e74:	681a      	ldr	r2, [r3, #0]
 8004e76:	463b      	mov	r3, r7
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	781b      	ldrb	r3, [r3, #0]
 8004e7c:	009b      	lsls	r3, r3, #2
 8004e7e:	4413      	add	r3, r2
 8004e80:	881b      	ldrh	r3, [r3, #0]
 8004e82:	b29b      	uxth	r3, r3
 8004e84:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e88:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e8c:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
 8004e90:	1d3b      	adds	r3, r7, #4
 8004e92:	681a      	ldr	r2, [r3, #0]
 8004e94:	463b      	mov	r3, r7
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	781b      	ldrb	r3, [r3, #0]
 8004e9a:	009b      	lsls	r3, r3, #2
 8004e9c:	441a      	add	r2, r3
 8004e9e:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8004ea2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ea6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004eaa:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8004eae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004eb2:	b29b      	uxth	r3, r3
 8004eb4:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8004eb6:	463b      	mov	r3, r7
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	6a1a      	ldr	r2, [r3, #32]
 8004ebc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004ec0:	1ad2      	subs	r2, r2, r3
 8004ec2:	463b      	mov	r3, r7
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8004ec8:	1d3b      	adds	r3, r7, #4
 8004eca:	681a      	ldr	r2, [r3, #0]
 8004ecc:	463b      	mov	r3, r7
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	781b      	ldrb	r3, [r3, #0]
 8004ed2:	009b      	lsls	r3, r3, #2
 8004ed4:	4413      	add	r3, r2
 8004ed6:	881b      	ldrh	r3, [r3, #0]
 8004ed8:	b29b      	uxth	r3, r3
 8004eda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	f000 8159 	beq.w	8005196 <USB_EPStartXfer+0x3e6>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004ee4:	1d3b      	adds	r3, r7, #4
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	637b      	str	r3, [r7, #52]	; 0x34
 8004eea:	463b      	mov	r3, r7
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	785b      	ldrb	r3, [r3, #1]
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d164      	bne.n	8004fbe <USB_EPStartXfer+0x20e>
 8004ef4:	1d3b      	adds	r3, r7, #4
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004efa:	1d3b      	adds	r3, r7, #4
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004f02:	b29b      	uxth	r3, r3
 8004f04:	461a      	mov	r2, r3
 8004f06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f08:	4413      	add	r3, r2
 8004f0a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004f0c:	463b      	mov	r3, r7
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	781b      	ldrb	r3, [r3, #0]
 8004f12:	011a      	lsls	r2, r3, #4
 8004f14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f16:	4413      	add	r3, r2
 8004f18:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004f1c:	62bb      	str	r3, [r7, #40]	; 0x28
 8004f1e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d112      	bne.n	8004f4c <USB_EPStartXfer+0x19c>
 8004f26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f28:	881b      	ldrh	r3, [r3, #0]
 8004f2a:	b29b      	uxth	r3, r3
 8004f2c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004f30:	b29a      	uxth	r2, r3
 8004f32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f34:	801a      	strh	r2, [r3, #0]
 8004f36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f38:	881b      	ldrh	r3, [r3, #0]
 8004f3a:	b29b      	uxth	r3, r3
 8004f3c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004f40:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004f44:	b29a      	uxth	r2, r3
 8004f46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f48:	801a      	strh	r2, [r3, #0]
 8004f4a:	e054      	b.n	8004ff6 <USB_EPStartXfer+0x246>
 8004f4c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004f50:	2b3e      	cmp	r3, #62	; 0x3e
 8004f52:	d817      	bhi.n	8004f84 <USB_EPStartXfer+0x1d4>
 8004f54:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004f58:	085b      	lsrs	r3, r3, #1
 8004f5a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004f5e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004f62:	f003 0301 	and.w	r3, r3, #1
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d004      	beq.n	8004f74 <USB_EPStartXfer+0x1c4>
 8004f6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004f6e:	3301      	adds	r3, #1
 8004f70:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004f74:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004f78:	b29b      	uxth	r3, r3
 8004f7a:	029b      	lsls	r3, r3, #10
 8004f7c:	b29a      	uxth	r2, r3
 8004f7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f80:	801a      	strh	r2, [r3, #0]
 8004f82:	e038      	b.n	8004ff6 <USB_EPStartXfer+0x246>
 8004f84:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004f88:	095b      	lsrs	r3, r3, #5
 8004f8a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004f8e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004f92:	f003 031f 	and.w	r3, r3, #31
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d104      	bne.n	8004fa4 <USB_EPStartXfer+0x1f4>
 8004f9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004f9e:	3b01      	subs	r3, #1
 8004fa0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004fa4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004fa8:	b29b      	uxth	r3, r3
 8004faa:	029b      	lsls	r3, r3, #10
 8004fac:	b29b      	uxth	r3, r3
 8004fae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004fb2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004fb6:	b29a      	uxth	r2, r3
 8004fb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fba:	801a      	strh	r2, [r3, #0]
 8004fbc:	e01b      	b.n	8004ff6 <USB_EPStartXfer+0x246>
 8004fbe:	463b      	mov	r3, r7
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	785b      	ldrb	r3, [r3, #1]
 8004fc4:	2b01      	cmp	r3, #1
 8004fc6:	d116      	bne.n	8004ff6 <USB_EPStartXfer+0x246>
 8004fc8:	1d3b      	adds	r3, r7, #4
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004fd0:	b29b      	uxth	r3, r3
 8004fd2:	461a      	mov	r2, r3
 8004fd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004fd6:	4413      	add	r3, r2
 8004fd8:	637b      	str	r3, [r7, #52]	; 0x34
 8004fda:	463b      	mov	r3, r7
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	781b      	ldrb	r3, [r3, #0]
 8004fe0:	011a      	lsls	r2, r3, #4
 8004fe2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004fe4:	4413      	add	r3, r2
 8004fe6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004fea:	633b      	str	r3, [r7, #48]	; 0x30
 8004fec:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004ff0:	b29a      	uxth	r2, r3
 8004ff2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ff4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8004ff6:	463b      	mov	r3, r7
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	895b      	ldrh	r3, [r3, #10]
 8004ffc:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005000:	463b      	mov	r3, r7
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	6959      	ldr	r1, [r3, #20]
 8005006:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800500a:	b29b      	uxth	r3, r3
 800500c:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8005010:	1d38      	adds	r0, r7, #4
 8005012:	6800      	ldr	r0, [r0, #0]
 8005014:	f001 f92a 	bl	800626c <USB_WritePMA>
            ep->xfer_buff += len;
 8005018:	463b      	mov	r3, r7
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	695a      	ldr	r2, [r3, #20]
 800501e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005022:	441a      	add	r2, r3
 8005024:	463b      	mov	r3, r7
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800502a:	463b      	mov	r3, r7
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	6a1a      	ldr	r2, [r3, #32]
 8005030:	463b      	mov	r3, r7
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	691b      	ldr	r3, [r3, #16]
 8005036:	429a      	cmp	r2, r3
 8005038:	d909      	bls.n	800504e <USB_EPStartXfer+0x29e>
            {
              ep->xfer_len_db -= len;
 800503a:	463b      	mov	r3, r7
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	6a1a      	ldr	r2, [r3, #32]
 8005040:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005044:	1ad2      	subs	r2, r2, r3
 8005046:	463b      	mov	r3, r7
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	621a      	str	r2, [r3, #32]
 800504c:	e008      	b.n	8005060 <USB_EPStartXfer+0x2b0>
            }
            else
            {
              len = ep->xfer_len_db;
 800504e:	463b      	mov	r3, r7
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	6a1b      	ldr	r3, [r3, #32]
 8005054:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
              ep->xfer_len_db = 0U;
 8005058:	463b      	mov	r3, r7
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	2200      	movs	r2, #0
 800505e:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005060:	463b      	mov	r3, r7
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	785b      	ldrb	r3, [r3, #1]
 8005066:	2b00      	cmp	r3, #0
 8005068:	d164      	bne.n	8005134 <USB_EPStartXfer+0x384>
 800506a:	1d3b      	adds	r3, r7, #4
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	61fb      	str	r3, [r7, #28]
 8005070:	1d3b      	adds	r3, r7, #4
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005078:	b29b      	uxth	r3, r3
 800507a:	461a      	mov	r2, r3
 800507c:	69fb      	ldr	r3, [r7, #28]
 800507e:	4413      	add	r3, r2
 8005080:	61fb      	str	r3, [r7, #28]
 8005082:	463b      	mov	r3, r7
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	781b      	ldrb	r3, [r3, #0]
 8005088:	011a      	lsls	r2, r3, #4
 800508a:	69fb      	ldr	r3, [r7, #28]
 800508c:	4413      	add	r3, r2
 800508e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005092:	61bb      	str	r3, [r7, #24]
 8005094:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005098:	2b00      	cmp	r3, #0
 800509a:	d112      	bne.n	80050c2 <USB_EPStartXfer+0x312>
 800509c:	69bb      	ldr	r3, [r7, #24]
 800509e:	881b      	ldrh	r3, [r3, #0]
 80050a0:	b29b      	uxth	r3, r3
 80050a2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80050a6:	b29a      	uxth	r2, r3
 80050a8:	69bb      	ldr	r3, [r7, #24]
 80050aa:	801a      	strh	r2, [r3, #0]
 80050ac:	69bb      	ldr	r3, [r7, #24]
 80050ae:	881b      	ldrh	r3, [r3, #0]
 80050b0:	b29b      	uxth	r3, r3
 80050b2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80050b6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80050ba:	b29a      	uxth	r2, r3
 80050bc:	69bb      	ldr	r3, [r7, #24]
 80050be:	801a      	strh	r2, [r3, #0]
 80050c0:	e057      	b.n	8005172 <USB_EPStartXfer+0x3c2>
 80050c2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80050c6:	2b3e      	cmp	r3, #62	; 0x3e
 80050c8:	d817      	bhi.n	80050fa <USB_EPStartXfer+0x34a>
 80050ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80050ce:	085b      	lsrs	r3, r3, #1
 80050d0:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80050d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80050d8:	f003 0301 	and.w	r3, r3, #1
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d004      	beq.n	80050ea <USB_EPStartXfer+0x33a>
 80050e0:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80050e4:	3301      	adds	r3, #1
 80050e6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80050ea:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80050ee:	b29b      	uxth	r3, r3
 80050f0:	029b      	lsls	r3, r3, #10
 80050f2:	b29a      	uxth	r2, r3
 80050f4:	69bb      	ldr	r3, [r7, #24]
 80050f6:	801a      	strh	r2, [r3, #0]
 80050f8:	e03b      	b.n	8005172 <USB_EPStartXfer+0x3c2>
 80050fa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80050fe:	095b      	lsrs	r3, r3, #5
 8005100:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005104:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005108:	f003 031f 	and.w	r3, r3, #31
 800510c:	2b00      	cmp	r3, #0
 800510e:	d104      	bne.n	800511a <USB_EPStartXfer+0x36a>
 8005110:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005114:	3b01      	subs	r3, #1
 8005116:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800511a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800511e:	b29b      	uxth	r3, r3
 8005120:	029b      	lsls	r3, r3, #10
 8005122:	b29b      	uxth	r3, r3
 8005124:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005128:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800512c:	b29a      	uxth	r2, r3
 800512e:	69bb      	ldr	r3, [r7, #24]
 8005130:	801a      	strh	r2, [r3, #0]
 8005132:	e01e      	b.n	8005172 <USB_EPStartXfer+0x3c2>
 8005134:	463b      	mov	r3, r7
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	785b      	ldrb	r3, [r3, #1]
 800513a:	2b01      	cmp	r3, #1
 800513c:	d119      	bne.n	8005172 <USB_EPStartXfer+0x3c2>
 800513e:	1d3b      	adds	r3, r7, #4
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	627b      	str	r3, [r7, #36]	; 0x24
 8005144:	1d3b      	adds	r3, r7, #4
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800514c:	b29b      	uxth	r3, r3
 800514e:	461a      	mov	r2, r3
 8005150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005152:	4413      	add	r3, r2
 8005154:	627b      	str	r3, [r7, #36]	; 0x24
 8005156:	463b      	mov	r3, r7
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	781b      	ldrb	r3, [r3, #0]
 800515c:	011a      	lsls	r2, r3, #4
 800515e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005160:	4413      	add	r3, r2
 8005162:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005166:	623b      	str	r3, [r7, #32]
 8005168:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800516c:	b29a      	uxth	r2, r3
 800516e:	6a3b      	ldr	r3, [r7, #32]
 8005170:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005172:	463b      	mov	r3, r7
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	891b      	ldrh	r3, [r3, #8]
 8005178:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800517c:	463b      	mov	r3, r7
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	6959      	ldr	r1, [r3, #20]
 8005182:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005186:	b29b      	uxth	r3, r3
 8005188:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 800518c:	1d38      	adds	r0, r7, #4
 800518e:	6800      	ldr	r0, [r0, #0]
 8005190:	f001 f86c 	bl	800626c <USB_WritePMA>
 8005194:	e33b      	b.n	800580e <USB_EPStartXfer+0xa5e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005196:	463b      	mov	r3, r7
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	785b      	ldrb	r3, [r3, #1]
 800519c:	2b00      	cmp	r3, #0
 800519e:	d164      	bne.n	800526a <USB_EPStartXfer+0x4ba>
 80051a0:	1d3b      	adds	r3, r7, #4
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80051a6:	1d3b      	adds	r3, r7, #4
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80051ae:	b29b      	uxth	r3, r3
 80051b0:	461a      	mov	r2, r3
 80051b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80051b4:	4413      	add	r3, r2
 80051b6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80051b8:	463b      	mov	r3, r7
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	781b      	ldrb	r3, [r3, #0]
 80051be:	011a      	lsls	r2, r3, #4
 80051c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80051c2:	4413      	add	r3, r2
 80051c4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80051c8:	64bb      	str	r3, [r7, #72]	; 0x48
 80051ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d112      	bne.n	80051f8 <USB_EPStartXfer+0x448>
 80051d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80051d4:	881b      	ldrh	r3, [r3, #0]
 80051d6:	b29b      	uxth	r3, r3
 80051d8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80051dc:	b29a      	uxth	r2, r3
 80051de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80051e0:	801a      	strh	r2, [r3, #0]
 80051e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80051e4:	881b      	ldrh	r3, [r3, #0]
 80051e6:	b29b      	uxth	r3, r3
 80051e8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80051ec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80051f0:	b29a      	uxth	r2, r3
 80051f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80051f4:	801a      	strh	r2, [r3, #0]
 80051f6:	e057      	b.n	80052a8 <USB_EPStartXfer+0x4f8>
 80051f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80051fc:	2b3e      	cmp	r3, #62	; 0x3e
 80051fe:	d817      	bhi.n	8005230 <USB_EPStartXfer+0x480>
 8005200:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005204:	085b      	lsrs	r3, r3, #1
 8005206:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800520a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800520e:	f003 0301 	and.w	r3, r3, #1
 8005212:	2b00      	cmp	r3, #0
 8005214:	d004      	beq.n	8005220 <USB_EPStartXfer+0x470>
 8005216:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800521a:	3301      	adds	r3, #1
 800521c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005220:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005224:	b29b      	uxth	r3, r3
 8005226:	029b      	lsls	r3, r3, #10
 8005228:	b29a      	uxth	r2, r3
 800522a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800522c:	801a      	strh	r2, [r3, #0]
 800522e:	e03b      	b.n	80052a8 <USB_EPStartXfer+0x4f8>
 8005230:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005234:	095b      	lsrs	r3, r3, #5
 8005236:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800523a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800523e:	f003 031f 	and.w	r3, r3, #31
 8005242:	2b00      	cmp	r3, #0
 8005244:	d104      	bne.n	8005250 <USB_EPStartXfer+0x4a0>
 8005246:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800524a:	3b01      	subs	r3, #1
 800524c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005250:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005254:	b29b      	uxth	r3, r3
 8005256:	029b      	lsls	r3, r3, #10
 8005258:	b29b      	uxth	r3, r3
 800525a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800525e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005262:	b29a      	uxth	r2, r3
 8005264:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005266:	801a      	strh	r2, [r3, #0]
 8005268:	e01e      	b.n	80052a8 <USB_EPStartXfer+0x4f8>
 800526a:	463b      	mov	r3, r7
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	785b      	ldrb	r3, [r3, #1]
 8005270:	2b01      	cmp	r3, #1
 8005272:	d119      	bne.n	80052a8 <USB_EPStartXfer+0x4f8>
 8005274:	1d3b      	adds	r3, r7, #4
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	657b      	str	r3, [r7, #84]	; 0x54
 800527a:	1d3b      	adds	r3, r7, #4
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005282:	b29b      	uxth	r3, r3
 8005284:	461a      	mov	r2, r3
 8005286:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005288:	4413      	add	r3, r2
 800528a:	657b      	str	r3, [r7, #84]	; 0x54
 800528c:	463b      	mov	r3, r7
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	781b      	ldrb	r3, [r3, #0]
 8005292:	011a      	lsls	r2, r3, #4
 8005294:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005296:	4413      	add	r3, r2
 8005298:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800529c:	653b      	str	r3, [r7, #80]	; 0x50
 800529e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80052a2:	b29a      	uxth	r2, r3
 80052a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80052a6:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80052a8:	463b      	mov	r3, r7
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	891b      	ldrh	r3, [r3, #8]
 80052ae:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80052b2:	463b      	mov	r3, r7
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	6959      	ldr	r1, [r3, #20]
 80052b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80052bc:	b29b      	uxth	r3, r3
 80052be:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 80052c2:	1d38      	adds	r0, r7, #4
 80052c4:	6800      	ldr	r0, [r0, #0]
 80052c6:	f000 ffd1 	bl	800626c <USB_WritePMA>
            ep->xfer_buff += len;
 80052ca:	463b      	mov	r3, r7
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	695a      	ldr	r2, [r3, #20]
 80052d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80052d4:	441a      	add	r2, r3
 80052d6:	463b      	mov	r3, r7
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80052dc:	463b      	mov	r3, r7
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	6a1a      	ldr	r2, [r3, #32]
 80052e2:	463b      	mov	r3, r7
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	691b      	ldr	r3, [r3, #16]
 80052e8:	429a      	cmp	r2, r3
 80052ea:	d909      	bls.n	8005300 <USB_EPStartXfer+0x550>
            {
              ep->xfer_len_db -= len;
 80052ec:	463b      	mov	r3, r7
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	6a1a      	ldr	r2, [r3, #32]
 80052f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80052f6:	1ad2      	subs	r2, r2, r3
 80052f8:	463b      	mov	r3, r7
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	621a      	str	r2, [r3, #32]
 80052fe:	e008      	b.n	8005312 <USB_EPStartXfer+0x562>
            }
            else
            {
              len = ep->xfer_len_db;
 8005300:	463b      	mov	r3, r7
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	6a1b      	ldr	r3, [r3, #32]
 8005306:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
              ep->xfer_len_db = 0U;
 800530a:	463b      	mov	r3, r7
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	2200      	movs	r2, #0
 8005310:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005312:	1d3b      	adds	r3, r7, #4
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	647b      	str	r3, [r7, #68]	; 0x44
 8005318:	463b      	mov	r3, r7
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	785b      	ldrb	r3, [r3, #1]
 800531e:	2b00      	cmp	r3, #0
 8005320:	d164      	bne.n	80053ec <USB_EPStartXfer+0x63c>
 8005322:	1d3b      	adds	r3, r7, #4
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005328:	1d3b      	adds	r3, r7, #4
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005330:	b29b      	uxth	r3, r3
 8005332:	461a      	mov	r2, r3
 8005334:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005336:	4413      	add	r3, r2
 8005338:	63fb      	str	r3, [r7, #60]	; 0x3c
 800533a:	463b      	mov	r3, r7
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	781b      	ldrb	r3, [r3, #0]
 8005340:	011a      	lsls	r2, r3, #4
 8005342:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005344:	4413      	add	r3, r2
 8005346:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800534a:	63bb      	str	r3, [r7, #56]	; 0x38
 800534c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005350:	2b00      	cmp	r3, #0
 8005352:	d112      	bne.n	800537a <USB_EPStartXfer+0x5ca>
 8005354:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005356:	881b      	ldrh	r3, [r3, #0]
 8005358:	b29b      	uxth	r3, r3
 800535a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800535e:	b29a      	uxth	r2, r3
 8005360:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005362:	801a      	strh	r2, [r3, #0]
 8005364:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005366:	881b      	ldrh	r3, [r3, #0]
 8005368:	b29b      	uxth	r3, r3
 800536a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800536e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005372:	b29a      	uxth	r2, r3
 8005374:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005376:	801a      	strh	r2, [r3, #0]
 8005378:	e054      	b.n	8005424 <USB_EPStartXfer+0x674>
 800537a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800537e:	2b3e      	cmp	r3, #62	; 0x3e
 8005380:	d817      	bhi.n	80053b2 <USB_EPStartXfer+0x602>
 8005382:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005386:	085b      	lsrs	r3, r3, #1
 8005388:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800538c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005390:	f003 0301 	and.w	r3, r3, #1
 8005394:	2b00      	cmp	r3, #0
 8005396:	d004      	beq.n	80053a2 <USB_EPStartXfer+0x5f2>
 8005398:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800539c:	3301      	adds	r3, #1
 800539e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80053a2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80053a6:	b29b      	uxth	r3, r3
 80053a8:	029b      	lsls	r3, r3, #10
 80053aa:	b29a      	uxth	r2, r3
 80053ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053ae:	801a      	strh	r2, [r3, #0]
 80053b0:	e038      	b.n	8005424 <USB_EPStartXfer+0x674>
 80053b2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80053b6:	095b      	lsrs	r3, r3, #5
 80053b8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80053bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80053c0:	f003 031f 	and.w	r3, r3, #31
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d104      	bne.n	80053d2 <USB_EPStartXfer+0x622>
 80053c8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80053cc:	3b01      	subs	r3, #1
 80053ce:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80053d2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80053d6:	b29b      	uxth	r3, r3
 80053d8:	029b      	lsls	r3, r3, #10
 80053da:	b29b      	uxth	r3, r3
 80053dc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80053e0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80053e4:	b29a      	uxth	r2, r3
 80053e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053e8:	801a      	strh	r2, [r3, #0]
 80053ea:	e01b      	b.n	8005424 <USB_EPStartXfer+0x674>
 80053ec:	463b      	mov	r3, r7
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	785b      	ldrb	r3, [r3, #1]
 80053f2:	2b01      	cmp	r3, #1
 80053f4:	d116      	bne.n	8005424 <USB_EPStartXfer+0x674>
 80053f6:	1d3b      	adds	r3, r7, #4
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80053fe:	b29b      	uxth	r3, r3
 8005400:	461a      	mov	r2, r3
 8005402:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005404:	4413      	add	r3, r2
 8005406:	647b      	str	r3, [r7, #68]	; 0x44
 8005408:	463b      	mov	r3, r7
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	781b      	ldrb	r3, [r3, #0]
 800540e:	011a      	lsls	r2, r3, #4
 8005410:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005412:	4413      	add	r3, r2
 8005414:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005418:	643b      	str	r3, [r7, #64]	; 0x40
 800541a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800541e:	b29a      	uxth	r2, r3
 8005420:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005422:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005424:	463b      	mov	r3, r7
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	895b      	ldrh	r3, [r3, #10]
 800542a:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800542e:	463b      	mov	r3, r7
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	6959      	ldr	r1, [r3, #20]
 8005434:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005438:	b29b      	uxth	r3, r3
 800543a:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 800543e:	1d38      	adds	r0, r7, #4
 8005440:	6800      	ldr	r0, [r0, #0]
 8005442:	f000 ff13 	bl	800626c <USB_WritePMA>
 8005446:	e1e2      	b.n	800580e <USB_EPStartXfer+0xa5e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8005448:	463b      	mov	r3, r7
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	6a1b      	ldr	r3, [r3, #32]
 800544e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8005452:	1d3b      	adds	r3, r7, #4
 8005454:	681a      	ldr	r2, [r3, #0]
 8005456:	463b      	mov	r3, r7
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	781b      	ldrb	r3, [r3, #0]
 800545c:	009b      	lsls	r3, r3, #2
 800545e:	4413      	add	r3, r2
 8005460:	881b      	ldrh	r3, [r3, #0]
 8005462:	b29b      	uxth	r3, r3
 8005464:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8005468:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800546c:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8005470:	1d3b      	adds	r3, r7, #4
 8005472:	681a      	ldr	r2, [r3, #0]
 8005474:	463b      	mov	r3, r7
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	781b      	ldrb	r3, [r3, #0]
 800547a:	009b      	lsls	r3, r3, #2
 800547c:	441a      	add	r2, r3
 800547e:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8005482:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005486:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800548a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800548e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005492:	b29b      	uxth	r3, r3
 8005494:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005496:	1d3b      	adds	r3, r7, #4
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	663b      	str	r3, [r7, #96]	; 0x60
 800549c:	1d3b      	adds	r3, r7, #4
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80054a4:	b29b      	uxth	r3, r3
 80054a6:	461a      	mov	r2, r3
 80054a8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80054aa:	4413      	add	r3, r2
 80054ac:	663b      	str	r3, [r7, #96]	; 0x60
 80054ae:	463b      	mov	r3, r7
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	781b      	ldrb	r3, [r3, #0]
 80054b4:	011a      	lsls	r2, r3, #4
 80054b6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80054b8:	4413      	add	r3, r2
 80054ba:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80054be:	65fb      	str	r3, [r7, #92]	; 0x5c
 80054c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80054c4:	b29a      	uxth	r2, r3
 80054c6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80054c8:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80054ca:	463b      	mov	r3, r7
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	891b      	ldrh	r3, [r3, #8]
 80054d0:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80054d4:	463b      	mov	r3, r7
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	6959      	ldr	r1, [r3, #20]
 80054da:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80054de:	b29b      	uxth	r3, r3
 80054e0:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 80054e4:	1d38      	adds	r0, r7, #4
 80054e6:	6800      	ldr	r0, [r0, #0]
 80054e8:	f000 fec0 	bl	800626c <USB_WritePMA>
 80054ec:	e18f      	b.n	800580e <USB_EPStartXfer+0xa5e>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* Write the data to the USB endpoint */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80054ee:	1d3b      	adds	r3, r7, #4
 80054f0:	681a      	ldr	r2, [r3, #0]
 80054f2:	463b      	mov	r3, r7
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	781b      	ldrb	r3, [r3, #0]
 80054f8:	009b      	lsls	r3, r3, #2
 80054fa:	4413      	add	r3, r2
 80054fc:	881b      	ldrh	r3, [r3, #0]
 80054fe:	b29b      	uxth	r3, r3
 8005500:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005504:	2b00      	cmp	r3, #0
 8005506:	f000 808f 	beq.w	8005628 <USB_EPStartXfer+0x878>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800550a:	1d3b      	adds	r3, r7, #4
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	67bb      	str	r3, [r7, #120]	; 0x78
 8005510:	463b      	mov	r3, r7
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	785b      	ldrb	r3, [r3, #1]
 8005516:	2b00      	cmp	r3, #0
 8005518:	d164      	bne.n	80055e4 <USB_EPStartXfer+0x834>
 800551a:	1d3b      	adds	r3, r7, #4
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	673b      	str	r3, [r7, #112]	; 0x70
 8005520:	1d3b      	adds	r3, r7, #4
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005528:	b29b      	uxth	r3, r3
 800552a:	461a      	mov	r2, r3
 800552c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800552e:	4413      	add	r3, r2
 8005530:	673b      	str	r3, [r7, #112]	; 0x70
 8005532:	463b      	mov	r3, r7
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	781b      	ldrb	r3, [r3, #0]
 8005538:	011a      	lsls	r2, r3, #4
 800553a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800553c:	4413      	add	r3, r2
 800553e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005542:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005544:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005548:	2b00      	cmp	r3, #0
 800554a:	d112      	bne.n	8005572 <USB_EPStartXfer+0x7c2>
 800554c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800554e:	881b      	ldrh	r3, [r3, #0]
 8005550:	b29b      	uxth	r3, r3
 8005552:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005556:	b29a      	uxth	r2, r3
 8005558:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800555a:	801a      	strh	r2, [r3, #0]
 800555c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800555e:	881b      	ldrh	r3, [r3, #0]
 8005560:	b29b      	uxth	r3, r3
 8005562:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005566:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800556a:	b29a      	uxth	r2, r3
 800556c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800556e:	801a      	strh	r2, [r3, #0]
 8005570:	e054      	b.n	800561c <USB_EPStartXfer+0x86c>
 8005572:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005576:	2b3e      	cmp	r3, #62	; 0x3e
 8005578:	d817      	bhi.n	80055aa <USB_EPStartXfer+0x7fa>
 800557a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800557e:	085b      	lsrs	r3, r3, #1
 8005580:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005584:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005588:	f003 0301 	and.w	r3, r3, #1
 800558c:	2b00      	cmp	r3, #0
 800558e:	d004      	beq.n	800559a <USB_EPStartXfer+0x7ea>
 8005590:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005594:	3301      	adds	r3, #1
 8005596:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800559a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800559e:	b29b      	uxth	r3, r3
 80055a0:	029b      	lsls	r3, r3, #10
 80055a2:	b29a      	uxth	r2, r3
 80055a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80055a6:	801a      	strh	r2, [r3, #0]
 80055a8:	e038      	b.n	800561c <USB_EPStartXfer+0x86c>
 80055aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80055ae:	095b      	lsrs	r3, r3, #5
 80055b0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80055b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80055b8:	f003 031f 	and.w	r3, r3, #31
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d104      	bne.n	80055ca <USB_EPStartXfer+0x81a>
 80055c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055c4:	3b01      	subs	r3, #1
 80055c6:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80055ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055ce:	b29b      	uxth	r3, r3
 80055d0:	029b      	lsls	r3, r3, #10
 80055d2:	b29b      	uxth	r3, r3
 80055d4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80055d8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80055dc:	b29a      	uxth	r2, r3
 80055de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80055e0:	801a      	strh	r2, [r3, #0]
 80055e2:	e01b      	b.n	800561c <USB_EPStartXfer+0x86c>
 80055e4:	463b      	mov	r3, r7
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	785b      	ldrb	r3, [r3, #1]
 80055ea:	2b01      	cmp	r3, #1
 80055ec:	d116      	bne.n	800561c <USB_EPStartXfer+0x86c>
 80055ee:	1d3b      	adds	r3, r7, #4
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80055f6:	b29b      	uxth	r3, r3
 80055f8:	461a      	mov	r2, r3
 80055fa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80055fc:	4413      	add	r3, r2
 80055fe:	67bb      	str	r3, [r7, #120]	; 0x78
 8005600:	463b      	mov	r3, r7
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	781b      	ldrb	r3, [r3, #0]
 8005606:	011a      	lsls	r2, r3, #4
 8005608:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800560a:	4413      	add	r3, r2
 800560c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005610:	677b      	str	r3, [r7, #116]	; 0x74
 8005612:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005616:	b29a      	uxth	r2, r3
 8005618:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800561a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800561c:	463b      	mov	r3, r7
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	895b      	ldrh	r3, [r3, #10]
 8005622:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
 8005626:	e097      	b.n	8005758 <USB_EPStartXfer+0x9a8>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005628:	463b      	mov	r3, r7
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	785b      	ldrb	r3, [r3, #1]
 800562e:	2b00      	cmp	r3, #0
 8005630:	d168      	bne.n	8005704 <USB_EPStartXfer+0x954>
 8005632:	1d3b      	adds	r3, r7, #4
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800563a:	1d3b      	adds	r3, r7, #4
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005642:	b29b      	uxth	r3, r3
 8005644:	461a      	mov	r2, r3
 8005646:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800564a:	4413      	add	r3, r2
 800564c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005650:	463b      	mov	r3, r7
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	781b      	ldrb	r3, [r3, #0]
 8005656:	011a      	lsls	r2, r3, #4
 8005658:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800565c:	4413      	add	r3, r2
 800565e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005662:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005664:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005668:	2b00      	cmp	r3, #0
 800566a:	d112      	bne.n	8005692 <USB_EPStartXfer+0x8e2>
 800566c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800566e:	881b      	ldrh	r3, [r3, #0]
 8005670:	b29b      	uxth	r3, r3
 8005672:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005676:	b29a      	uxth	r2, r3
 8005678:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800567a:	801a      	strh	r2, [r3, #0]
 800567c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800567e:	881b      	ldrh	r3, [r3, #0]
 8005680:	b29b      	uxth	r3, r3
 8005682:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005686:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800568a:	b29a      	uxth	r2, r3
 800568c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800568e:	801a      	strh	r2, [r3, #0]
 8005690:	e05d      	b.n	800574e <USB_EPStartXfer+0x99e>
 8005692:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005696:	2b3e      	cmp	r3, #62	; 0x3e
 8005698:	d817      	bhi.n	80056ca <USB_EPStartXfer+0x91a>
 800569a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800569e:	085b      	lsrs	r3, r3, #1
 80056a0:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80056a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80056a8:	f003 0301 	and.w	r3, r3, #1
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d004      	beq.n	80056ba <USB_EPStartXfer+0x90a>
 80056b0:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80056b4:	3301      	adds	r3, #1
 80056b6:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80056ba:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80056be:	b29b      	uxth	r3, r3
 80056c0:	029b      	lsls	r3, r3, #10
 80056c2:	b29a      	uxth	r2, r3
 80056c4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80056c6:	801a      	strh	r2, [r3, #0]
 80056c8:	e041      	b.n	800574e <USB_EPStartXfer+0x99e>
 80056ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80056ce:	095b      	lsrs	r3, r3, #5
 80056d0:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80056d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80056d8:	f003 031f 	and.w	r3, r3, #31
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d104      	bne.n	80056ea <USB_EPStartXfer+0x93a>
 80056e0:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80056e4:	3b01      	subs	r3, #1
 80056e6:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80056ea:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80056ee:	b29b      	uxth	r3, r3
 80056f0:	029b      	lsls	r3, r3, #10
 80056f2:	b29b      	uxth	r3, r3
 80056f4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80056f8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80056fc:	b29a      	uxth	r2, r3
 80056fe:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005700:	801a      	strh	r2, [r3, #0]
 8005702:	e024      	b.n	800574e <USB_EPStartXfer+0x99e>
 8005704:	463b      	mov	r3, r7
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	785b      	ldrb	r3, [r3, #1]
 800570a:	2b01      	cmp	r3, #1
 800570c:	d11f      	bne.n	800574e <USB_EPStartXfer+0x99e>
 800570e:	1d3b      	adds	r3, r7, #4
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005716:	1d3b      	adds	r3, r7, #4
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800571e:	b29b      	uxth	r3, r3
 8005720:	461a      	mov	r2, r3
 8005722:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005726:	4413      	add	r3, r2
 8005728:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800572c:	463b      	mov	r3, r7
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	781b      	ldrb	r3, [r3, #0]
 8005732:	011a      	lsls	r2, r3, #4
 8005734:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005738:	4413      	add	r3, r2
 800573a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800573e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005742:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005746:	b29a      	uxth	r2, r3
 8005748:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800574c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800574e:	463b      	mov	r3, r7
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	891b      	ldrh	r3, [r3, #8]
 8005754:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
        }

        USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005758:	463b      	mov	r3, r7
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	6959      	ldr	r1, [r3, #20]
 800575e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005762:	b29b      	uxth	r3, r3
 8005764:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8005768:	1d38      	adds	r0, r7, #4
 800576a:	6800      	ldr	r0, [r0, #0]
 800576c:	f000 fd7e 	bl	800626c <USB_WritePMA>
        PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8005770:	463b      	mov	r3, r7
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	785b      	ldrb	r3, [r3, #1]
 8005776:	2b00      	cmp	r3, #0
 8005778:	d122      	bne.n	80057c0 <USB_EPStartXfer+0xa10>
 800577a:	1d3b      	adds	r3, r7, #4
 800577c:	681a      	ldr	r2, [r3, #0]
 800577e:	463b      	mov	r3, r7
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	781b      	ldrb	r3, [r3, #0]
 8005784:	009b      	lsls	r3, r3, #2
 8005786:	4413      	add	r3, r2
 8005788:	881b      	ldrh	r3, [r3, #0]
 800578a:	b29b      	uxth	r3, r3
 800578c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005790:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005794:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 8005798:	1d3b      	adds	r3, r7, #4
 800579a:	681a      	ldr	r2, [r3, #0]
 800579c:	463b      	mov	r3, r7
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	781b      	ldrb	r3, [r3, #0]
 80057a2:	009b      	lsls	r3, r3, #2
 80057a4:	441a      	add	r2, r3
 80057a6:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 80057aa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80057ae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80057b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80057b6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80057ba:	b29b      	uxth	r3, r3
 80057bc:	8013      	strh	r3, [r2, #0]
 80057be:	e026      	b.n	800580e <USB_EPStartXfer+0xa5e>
 80057c0:	463b      	mov	r3, r7
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	785b      	ldrb	r3, [r3, #1]
 80057c6:	2b01      	cmp	r3, #1
 80057c8:	d121      	bne.n	800580e <USB_EPStartXfer+0xa5e>
 80057ca:	1d3b      	adds	r3, r7, #4
 80057cc:	681a      	ldr	r2, [r3, #0]
 80057ce:	463b      	mov	r3, r7
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	781b      	ldrb	r3, [r3, #0]
 80057d4:	009b      	lsls	r3, r3, #2
 80057d6:	4413      	add	r3, r2
 80057d8:	881b      	ldrh	r3, [r3, #0]
 80057da:	b29b      	uxth	r3, r3
 80057dc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80057e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057e4:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
 80057e8:	1d3b      	adds	r3, r7, #4
 80057ea:	681a      	ldr	r2, [r3, #0]
 80057ec:	463b      	mov	r3, r7
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	781b      	ldrb	r3, [r3, #0]
 80057f2:	009b      	lsls	r3, r3, #2
 80057f4:	441a      	add	r2, r3
 80057f6:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 80057fa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80057fe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005802:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005806:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800580a:	b29b      	uxth	r3, r3
 800580c:	8013      	strh	r3, [r2, #0]
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800580e:	1d3b      	adds	r3, r7, #4
 8005810:	681a      	ldr	r2, [r3, #0]
 8005812:	463b      	mov	r3, r7
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	781b      	ldrb	r3, [r3, #0]
 8005818:	009b      	lsls	r3, r3, #2
 800581a:	4413      	add	r3, r2
 800581c:	881b      	ldrh	r3, [r3, #0]
 800581e:	b29b      	uxth	r3, r3
 8005820:	f107 020e 	add.w	r2, r7, #14
 8005824:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005828:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800582c:	8013      	strh	r3, [r2, #0]
 800582e:	f107 030e 	add.w	r3, r7, #14
 8005832:	f107 020e 	add.w	r2, r7, #14
 8005836:	8812      	ldrh	r2, [r2, #0]
 8005838:	f082 0210 	eor.w	r2, r2, #16
 800583c:	801a      	strh	r2, [r3, #0]
 800583e:	f107 030e 	add.w	r3, r7, #14
 8005842:	f107 020e 	add.w	r2, r7, #14
 8005846:	8812      	ldrh	r2, [r2, #0]
 8005848:	f082 0220 	eor.w	r2, r2, #32
 800584c:	801a      	strh	r2, [r3, #0]
 800584e:	1d3b      	adds	r3, r7, #4
 8005850:	681a      	ldr	r2, [r3, #0]
 8005852:	463b      	mov	r3, r7
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	781b      	ldrb	r3, [r3, #0]
 8005858:	009b      	lsls	r3, r3, #2
 800585a:	441a      	add	r2, r3
 800585c:	f107 030e 	add.w	r3, r7, #14
 8005860:	881b      	ldrh	r3, [r3, #0]
 8005862:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005866:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800586a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800586e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005872:	b29b      	uxth	r3, r3
 8005874:	8013      	strh	r3, [r2, #0]
 8005876:	e3b5      	b.n	8005fe4 <USB_EPStartXfer+0x1234>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8005878:	463b      	mov	r3, r7
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	7b1b      	ldrb	r3, [r3, #12]
 800587e:	2b00      	cmp	r3, #0
 8005880:	f040 8090 	bne.w	80059a4 <USB_EPStartXfer+0xbf4>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8005884:	463b      	mov	r3, r7
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	699a      	ldr	r2, [r3, #24]
 800588a:	463b      	mov	r3, r7
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	691b      	ldr	r3, [r3, #16]
 8005890:	429a      	cmp	r2, r3
 8005892:	d90e      	bls.n	80058b2 <USB_EPStartXfer+0xb02>
      {
        len = ep->maxpacket;
 8005894:	463b      	mov	r3, r7
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	691b      	ldr	r3, [r3, #16]
 800589a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        ep->xfer_len -= len;
 800589e:	463b      	mov	r3, r7
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	699a      	ldr	r2, [r3, #24]
 80058a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80058a8:	1ad2      	subs	r2, r2, r3
 80058aa:	463b      	mov	r3, r7
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	619a      	str	r2, [r3, #24]
 80058b0:	e008      	b.n	80058c4 <USB_EPStartXfer+0xb14>
      }
      else
      {
        len = ep->xfer_len;
 80058b2:	463b      	mov	r3, r7
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	699b      	ldr	r3, [r3, #24]
 80058b8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        ep->xfer_len = 0U;
 80058bc:	463b      	mov	r3, r7
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	2200      	movs	r2, #0
 80058c2:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80058c4:	1d3b      	adds	r3, r7, #4
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80058cc:	1d3b      	adds	r3, r7, #4
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80058d4:	b29b      	uxth	r3, r3
 80058d6:	461a      	mov	r2, r3
 80058d8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80058dc:	4413      	add	r3, r2
 80058de:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80058e2:	463b      	mov	r3, r7
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	781b      	ldrb	r3, [r3, #0]
 80058e8:	011a      	lsls	r2, r3, #4
 80058ea:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80058ee:	4413      	add	r3, r2
 80058f0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80058f4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80058f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d116      	bne.n	800592e <USB_EPStartXfer+0xb7e>
 8005900:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005904:	881b      	ldrh	r3, [r3, #0]
 8005906:	b29b      	uxth	r3, r3
 8005908:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800590c:	b29a      	uxth	r2, r3
 800590e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005912:	801a      	strh	r2, [r3, #0]
 8005914:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005918:	881b      	ldrh	r3, [r3, #0]
 800591a:	b29b      	uxth	r3, r3
 800591c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005920:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005924:	b29a      	uxth	r2, r3
 8005926:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800592a:	801a      	strh	r2, [r3, #0]
 800592c:	e32c      	b.n	8005f88 <USB_EPStartXfer+0x11d8>
 800592e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005932:	2b3e      	cmp	r3, #62	; 0x3e
 8005934:	d818      	bhi.n	8005968 <USB_EPStartXfer+0xbb8>
 8005936:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800593a:	085b      	lsrs	r3, r3, #1
 800593c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005940:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005944:	f003 0301 	and.w	r3, r3, #1
 8005948:	2b00      	cmp	r3, #0
 800594a:	d004      	beq.n	8005956 <USB_EPStartXfer+0xba6>
 800594c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005950:	3301      	adds	r3, #1
 8005952:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005956:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800595a:	b29b      	uxth	r3, r3
 800595c:	029b      	lsls	r3, r3, #10
 800595e:	b29a      	uxth	r2, r3
 8005960:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005964:	801a      	strh	r2, [r3, #0]
 8005966:	e30f      	b.n	8005f88 <USB_EPStartXfer+0x11d8>
 8005968:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800596c:	095b      	lsrs	r3, r3, #5
 800596e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005972:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005976:	f003 031f 	and.w	r3, r3, #31
 800597a:	2b00      	cmp	r3, #0
 800597c:	d104      	bne.n	8005988 <USB_EPStartXfer+0xbd8>
 800597e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005982:	3b01      	subs	r3, #1
 8005984:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005988:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800598c:	b29b      	uxth	r3, r3
 800598e:	029b      	lsls	r3, r3, #10
 8005990:	b29b      	uxth	r3, r3
 8005992:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005996:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800599a:	b29a      	uxth	r2, r3
 800599c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80059a0:	801a      	strh	r2, [r3, #0]
 80059a2:	e2f1      	b.n	8005f88 <USB_EPStartXfer+0x11d8>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 80059a4:	463b      	mov	r3, r7
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	78db      	ldrb	r3, [r3, #3]
 80059aa:	2b02      	cmp	r3, #2
 80059ac:	f040 818f 	bne.w	8005cce <USB_EPStartXfer+0xf1e>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80059b0:	463b      	mov	r3, r7
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	785b      	ldrb	r3, [r3, #1]
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d175      	bne.n	8005aa6 <USB_EPStartXfer+0xcf6>
 80059ba:	1d3b      	adds	r3, r7, #4
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80059c2:	1d3b      	adds	r3, r7, #4
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80059ca:	b29b      	uxth	r3, r3
 80059cc:	461a      	mov	r2, r3
 80059ce:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80059d2:	4413      	add	r3, r2
 80059d4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80059d8:	463b      	mov	r3, r7
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	781b      	ldrb	r3, [r3, #0]
 80059de:	011a      	lsls	r2, r3, #4
 80059e0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80059e4:	4413      	add	r3, r2
 80059e6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80059ea:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80059ee:	463b      	mov	r3, r7
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	691b      	ldr	r3, [r3, #16]
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d116      	bne.n	8005a26 <USB_EPStartXfer+0xc76>
 80059f8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80059fc:	881b      	ldrh	r3, [r3, #0]
 80059fe:	b29b      	uxth	r3, r3
 8005a00:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005a04:	b29a      	uxth	r2, r3
 8005a06:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005a0a:	801a      	strh	r2, [r3, #0]
 8005a0c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005a10:	881b      	ldrh	r3, [r3, #0]
 8005a12:	b29b      	uxth	r3, r3
 8005a14:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a18:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a1c:	b29a      	uxth	r2, r3
 8005a1e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005a22:	801a      	strh	r2, [r3, #0]
 8005a24:	e065      	b.n	8005af2 <USB_EPStartXfer+0xd42>
 8005a26:	463b      	mov	r3, r7
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	691b      	ldr	r3, [r3, #16]
 8005a2c:	2b3e      	cmp	r3, #62	; 0x3e
 8005a2e:	d81a      	bhi.n	8005a66 <USB_EPStartXfer+0xcb6>
 8005a30:	463b      	mov	r3, r7
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	691b      	ldr	r3, [r3, #16]
 8005a36:	085b      	lsrs	r3, r3, #1
 8005a38:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005a3c:	463b      	mov	r3, r7
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	691b      	ldr	r3, [r3, #16]
 8005a42:	f003 0301 	and.w	r3, r3, #1
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d004      	beq.n	8005a54 <USB_EPStartXfer+0xca4>
 8005a4a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005a4e:	3301      	adds	r3, #1
 8005a50:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005a54:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005a58:	b29b      	uxth	r3, r3
 8005a5a:	029b      	lsls	r3, r3, #10
 8005a5c:	b29a      	uxth	r2, r3
 8005a5e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005a62:	801a      	strh	r2, [r3, #0]
 8005a64:	e045      	b.n	8005af2 <USB_EPStartXfer+0xd42>
 8005a66:	463b      	mov	r3, r7
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	691b      	ldr	r3, [r3, #16]
 8005a6c:	095b      	lsrs	r3, r3, #5
 8005a6e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005a72:	463b      	mov	r3, r7
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	691b      	ldr	r3, [r3, #16]
 8005a78:	f003 031f 	and.w	r3, r3, #31
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d104      	bne.n	8005a8a <USB_EPStartXfer+0xcda>
 8005a80:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005a84:	3b01      	subs	r3, #1
 8005a86:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005a8a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005a8e:	b29b      	uxth	r3, r3
 8005a90:	029b      	lsls	r3, r3, #10
 8005a92:	b29b      	uxth	r3, r3
 8005a94:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a98:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a9c:	b29a      	uxth	r2, r3
 8005a9e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005aa2:	801a      	strh	r2, [r3, #0]
 8005aa4:	e025      	b.n	8005af2 <USB_EPStartXfer+0xd42>
 8005aa6:	463b      	mov	r3, r7
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	785b      	ldrb	r3, [r3, #1]
 8005aac:	2b01      	cmp	r3, #1
 8005aae:	d120      	bne.n	8005af2 <USB_EPStartXfer+0xd42>
 8005ab0:	1d3b      	adds	r3, r7, #4
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005ab8:	1d3b      	adds	r3, r7, #4
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005ac0:	b29b      	uxth	r3, r3
 8005ac2:	461a      	mov	r2, r3
 8005ac4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005ac8:	4413      	add	r3, r2
 8005aca:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005ace:	463b      	mov	r3, r7
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	781b      	ldrb	r3, [r3, #0]
 8005ad4:	011a      	lsls	r2, r3, #4
 8005ad6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005ada:	4413      	add	r3, r2
 8005adc:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005ae0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005ae4:	463b      	mov	r3, r7
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	691b      	ldr	r3, [r3, #16]
 8005aea:	b29a      	uxth	r2, r3
 8005aec:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005af0:	801a      	strh	r2, [r3, #0]
 8005af2:	1d3b      	adds	r3, r7, #4
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005afa:	463b      	mov	r3, r7
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	785b      	ldrb	r3, [r3, #1]
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d175      	bne.n	8005bf0 <USB_EPStartXfer+0xe40>
 8005b04:	1d3b      	adds	r3, r7, #4
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005b0c:	1d3b      	adds	r3, r7, #4
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b14:	b29b      	uxth	r3, r3
 8005b16:	461a      	mov	r2, r3
 8005b18:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005b1c:	4413      	add	r3, r2
 8005b1e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005b22:	463b      	mov	r3, r7
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	781b      	ldrb	r3, [r3, #0]
 8005b28:	011a      	lsls	r2, r3, #4
 8005b2a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005b2e:	4413      	add	r3, r2
 8005b30:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005b34:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005b38:	463b      	mov	r3, r7
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	691b      	ldr	r3, [r3, #16]
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d116      	bne.n	8005b70 <USB_EPStartXfer+0xdc0>
 8005b42:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005b46:	881b      	ldrh	r3, [r3, #0]
 8005b48:	b29b      	uxth	r3, r3
 8005b4a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005b4e:	b29a      	uxth	r2, r3
 8005b50:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005b54:	801a      	strh	r2, [r3, #0]
 8005b56:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005b5a:	881b      	ldrh	r3, [r3, #0]
 8005b5c:	b29b      	uxth	r3, r3
 8005b5e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b62:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b66:	b29a      	uxth	r2, r3
 8005b68:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005b6c:	801a      	strh	r2, [r3, #0]
 8005b6e:	e061      	b.n	8005c34 <USB_EPStartXfer+0xe84>
 8005b70:	463b      	mov	r3, r7
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	691b      	ldr	r3, [r3, #16]
 8005b76:	2b3e      	cmp	r3, #62	; 0x3e
 8005b78:	d81a      	bhi.n	8005bb0 <USB_EPStartXfer+0xe00>
 8005b7a:	463b      	mov	r3, r7
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	691b      	ldr	r3, [r3, #16]
 8005b80:	085b      	lsrs	r3, r3, #1
 8005b82:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005b86:	463b      	mov	r3, r7
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	691b      	ldr	r3, [r3, #16]
 8005b8c:	f003 0301 	and.w	r3, r3, #1
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d004      	beq.n	8005b9e <USB_EPStartXfer+0xdee>
 8005b94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b98:	3301      	adds	r3, #1
 8005b9a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005b9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ba2:	b29b      	uxth	r3, r3
 8005ba4:	029b      	lsls	r3, r3, #10
 8005ba6:	b29a      	uxth	r2, r3
 8005ba8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005bac:	801a      	strh	r2, [r3, #0]
 8005bae:	e041      	b.n	8005c34 <USB_EPStartXfer+0xe84>
 8005bb0:	463b      	mov	r3, r7
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	691b      	ldr	r3, [r3, #16]
 8005bb6:	095b      	lsrs	r3, r3, #5
 8005bb8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005bbc:	463b      	mov	r3, r7
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	691b      	ldr	r3, [r3, #16]
 8005bc2:	f003 031f 	and.w	r3, r3, #31
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d104      	bne.n	8005bd4 <USB_EPStartXfer+0xe24>
 8005bca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005bce:	3b01      	subs	r3, #1
 8005bd0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005bd4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005bd8:	b29b      	uxth	r3, r3
 8005bda:	029b      	lsls	r3, r3, #10
 8005bdc:	b29b      	uxth	r3, r3
 8005bde:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005be2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005be6:	b29a      	uxth	r2, r3
 8005be8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005bec:	801a      	strh	r2, [r3, #0]
 8005bee:	e021      	b.n	8005c34 <USB_EPStartXfer+0xe84>
 8005bf0:	463b      	mov	r3, r7
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	785b      	ldrb	r3, [r3, #1]
 8005bf6:	2b01      	cmp	r3, #1
 8005bf8:	d11c      	bne.n	8005c34 <USB_EPStartXfer+0xe84>
 8005bfa:	1d3b      	adds	r3, r7, #4
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c02:	b29b      	uxth	r3, r3
 8005c04:	461a      	mov	r2, r3
 8005c06:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005c0a:	4413      	add	r3, r2
 8005c0c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005c10:	463b      	mov	r3, r7
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	781b      	ldrb	r3, [r3, #0]
 8005c16:	011a      	lsls	r2, r3, #4
 8005c18:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005c1c:	4413      	add	r3, r2
 8005c1e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005c22:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8005c26:	463b      	mov	r3, r7
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	691b      	ldr	r3, [r3, #16]
 8005c2c:	b29a      	uxth	r2, r3
 8005c2e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005c32:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8005c34:	463b      	mov	r3, r7
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	69db      	ldr	r3, [r3, #28]
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	f000 81a4 	beq.w	8005f88 <USB_EPStartXfer+0x11d8>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8005c40:	1d3b      	adds	r3, r7, #4
 8005c42:	681a      	ldr	r2, [r3, #0]
 8005c44:	463b      	mov	r3, r7
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	781b      	ldrb	r3, [r3, #0]
 8005c4a:	009b      	lsls	r3, r3, #2
 8005c4c:	4413      	add	r3, r2
 8005c4e:	881b      	ldrh	r3, [r3, #0]
 8005c50:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8005c54:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8005c58:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d005      	beq.n	8005c6c <USB_EPStartXfer+0xebc>
 8005c60:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8005c64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d10d      	bne.n	8005c88 <USB_EPStartXfer+0xed8>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8005c6c:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8005c70:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	f040 8187 	bne.w	8005f88 <USB_EPStartXfer+0x11d8>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8005c7a:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8005c7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	f040 8180 	bne.w	8005f88 <USB_EPStartXfer+0x11d8>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8005c88:	1d3b      	adds	r3, r7, #4
 8005c8a:	681a      	ldr	r2, [r3, #0]
 8005c8c:	463b      	mov	r3, r7
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	781b      	ldrb	r3, [r3, #0]
 8005c92:	009b      	lsls	r3, r3, #2
 8005c94:	4413      	add	r3, r2
 8005c96:	881b      	ldrh	r3, [r3, #0]
 8005c98:	b29b      	uxth	r3, r3
 8005c9a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ca2:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
 8005ca6:	1d3b      	adds	r3, r7, #4
 8005ca8:	681a      	ldr	r2, [r3, #0]
 8005caa:	463b      	mov	r3, r7
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	781b      	ldrb	r3, [r3, #0]
 8005cb0:	009b      	lsls	r3, r3, #2
 8005cb2:	441a      	add	r2, r3
 8005cb4:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 8005cb8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005cbc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005cc0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005cc4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005cc8:	b29b      	uxth	r3, r3
 8005cca:	8013      	strh	r3, [r2, #0]
 8005ccc:	e15c      	b.n	8005f88 <USB_EPStartXfer+0x11d8>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8005cce:	463b      	mov	r3, r7
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	78db      	ldrb	r3, [r3, #3]
 8005cd4:	2b01      	cmp	r3, #1
 8005cd6:	f040 8155 	bne.w	8005f84 <USB_EPStartXfer+0x11d4>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8005cda:	463b      	mov	r3, r7
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	699a      	ldr	r2, [r3, #24]
 8005ce0:	463b      	mov	r3, r7
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	691b      	ldr	r3, [r3, #16]
 8005ce6:	429a      	cmp	r2, r3
 8005ce8:	d90e      	bls.n	8005d08 <USB_EPStartXfer+0xf58>
        {
          len = ep->maxpacket;
 8005cea:	463b      	mov	r3, r7
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	691b      	ldr	r3, [r3, #16]
 8005cf0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
          ep->xfer_len -= len;
 8005cf4:	463b      	mov	r3, r7
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	699a      	ldr	r2, [r3, #24]
 8005cfa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005cfe:	1ad2      	subs	r2, r2, r3
 8005d00:	463b      	mov	r3, r7
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	619a      	str	r2, [r3, #24]
 8005d06:	e008      	b.n	8005d1a <USB_EPStartXfer+0xf6a>
        }
        else
        {
          len = ep->xfer_len;
 8005d08:	463b      	mov	r3, r7
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	699b      	ldr	r3, [r3, #24]
 8005d0e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
          ep->xfer_len = 0U;
 8005d12:	463b      	mov	r3, r7
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	2200      	movs	r2, #0
 8005d18:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8005d1a:	463b      	mov	r3, r7
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	785b      	ldrb	r3, [r3, #1]
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d16f      	bne.n	8005e04 <USB_EPStartXfer+0x1054>
 8005d24:	1d3b      	adds	r3, r7, #4
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005d2c:	1d3b      	adds	r3, r7, #4
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005d34:	b29b      	uxth	r3, r3
 8005d36:	461a      	mov	r2, r3
 8005d38:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8005d3c:	4413      	add	r3, r2
 8005d3e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005d42:	463b      	mov	r3, r7
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	781b      	ldrb	r3, [r3, #0]
 8005d48:	011a      	lsls	r2, r3, #4
 8005d4a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8005d4e:	4413      	add	r3, r2
 8005d50:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005d54:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005d58:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d116      	bne.n	8005d8e <USB_EPStartXfer+0xfde>
 8005d60:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005d64:	881b      	ldrh	r3, [r3, #0]
 8005d66:	b29b      	uxth	r3, r3
 8005d68:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005d6c:	b29a      	uxth	r2, r3
 8005d6e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005d72:	801a      	strh	r2, [r3, #0]
 8005d74:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005d78:	881b      	ldrh	r3, [r3, #0]
 8005d7a:	b29b      	uxth	r3, r3
 8005d7c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d80:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d84:	b29a      	uxth	r2, r3
 8005d86:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005d8a:	801a      	strh	r2, [r3, #0]
 8005d8c:	e05f      	b.n	8005e4e <USB_EPStartXfer+0x109e>
 8005d8e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005d92:	2b3e      	cmp	r3, #62	; 0x3e
 8005d94:	d818      	bhi.n	8005dc8 <USB_EPStartXfer+0x1018>
 8005d96:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005d9a:	085b      	lsrs	r3, r3, #1
 8005d9c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005da0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005da4:	f003 0301 	and.w	r3, r3, #1
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d004      	beq.n	8005db6 <USB_EPStartXfer+0x1006>
 8005dac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005db0:	3301      	adds	r3, #1
 8005db2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005db6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005dba:	b29b      	uxth	r3, r3
 8005dbc:	029b      	lsls	r3, r3, #10
 8005dbe:	b29a      	uxth	r2, r3
 8005dc0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005dc4:	801a      	strh	r2, [r3, #0]
 8005dc6:	e042      	b.n	8005e4e <USB_EPStartXfer+0x109e>
 8005dc8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005dcc:	095b      	lsrs	r3, r3, #5
 8005dce:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005dd2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005dd6:	f003 031f 	and.w	r3, r3, #31
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d104      	bne.n	8005de8 <USB_EPStartXfer+0x1038>
 8005dde:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005de2:	3b01      	subs	r3, #1
 8005de4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005de8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005dec:	b29b      	uxth	r3, r3
 8005dee:	029b      	lsls	r3, r3, #10
 8005df0:	b29b      	uxth	r3, r3
 8005df2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005df6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005dfa:	b29a      	uxth	r2, r3
 8005dfc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005e00:	801a      	strh	r2, [r3, #0]
 8005e02:	e024      	b.n	8005e4e <USB_EPStartXfer+0x109e>
 8005e04:	463b      	mov	r3, r7
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	785b      	ldrb	r3, [r3, #1]
 8005e0a:	2b01      	cmp	r3, #1
 8005e0c:	d11f      	bne.n	8005e4e <USB_EPStartXfer+0x109e>
 8005e0e:	1d3b      	adds	r3, r7, #4
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005e16:	1d3b      	adds	r3, r7, #4
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005e1e:	b29b      	uxth	r3, r3
 8005e20:	461a      	mov	r2, r3
 8005e22:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005e26:	4413      	add	r3, r2
 8005e28:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005e2c:	463b      	mov	r3, r7
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	781b      	ldrb	r3, [r3, #0]
 8005e32:	011a      	lsls	r2, r3, #4
 8005e34:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005e38:	4413      	add	r3, r2
 8005e3a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005e3e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8005e42:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005e46:	b29a      	uxth	r2, r3
 8005e48:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005e4c:	801a      	strh	r2, [r3, #0]
 8005e4e:	1d3b      	adds	r3, r7, #4
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005e56:	463b      	mov	r3, r7
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	785b      	ldrb	r3, [r3, #1]
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d16f      	bne.n	8005f40 <USB_EPStartXfer+0x1190>
 8005e60:	1d3b      	adds	r3, r7, #4
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005e68:	1d3b      	adds	r3, r7, #4
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005e70:	b29b      	uxth	r3, r3
 8005e72:	461a      	mov	r2, r3
 8005e74:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005e78:	4413      	add	r3, r2
 8005e7a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005e7e:	463b      	mov	r3, r7
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	781b      	ldrb	r3, [r3, #0]
 8005e84:	011a      	lsls	r2, r3, #4
 8005e86:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005e8a:	4413      	add	r3, r2
 8005e8c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005e90:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8005e94:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d116      	bne.n	8005eca <USB_EPStartXfer+0x111a>
 8005e9c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005ea0:	881b      	ldrh	r3, [r3, #0]
 8005ea2:	b29b      	uxth	r3, r3
 8005ea4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005ea8:	b29a      	uxth	r2, r3
 8005eaa:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005eae:	801a      	strh	r2, [r3, #0]
 8005eb0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005eb4:	881b      	ldrh	r3, [r3, #0]
 8005eb6:	b29b      	uxth	r3, r3
 8005eb8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ebc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005ec0:	b29a      	uxth	r2, r3
 8005ec2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005ec6:	801a      	strh	r2, [r3, #0]
 8005ec8:	e05e      	b.n	8005f88 <USB_EPStartXfer+0x11d8>
 8005eca:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005ece:	2b3e      	cmp	r3, #62	; 0x3e
 8005ed0:	d818      	bhi.n	8005f04 <USB_EPStartXfer+0x1154>
 8005ed2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005ed6:	085b      	lsrs	r3, r3, #1
 8005ed8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005edc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005ee0:	f003 0301 	and.w	r3, r3, #1
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d004      	beq.n	8005ef2 <USB_EPStartXfer+0x1142>
 8005ee8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005eec:	3301      	adds	r3, #1
 8005eee:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005ef2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005ef6:	b29b      	uxth	r3, r3
 8005ef8:	029b      	lsls	r3, r3, #10
 8005efa:	b29a      	uxth	r2, r3
 8005efc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005f00:	801a      	strh	r2, [r3, #0]
 8005f02:	e041      	b.n	8005f88 <USB_EPStartXfer+0x11d8>
 8005f04:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005f08:	095b      	lsrs	r3, r3, #5
 8005f0a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005f0e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005f12:	f003 031f 	and.w	r3, r3, #31
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d104      	bne.n	8005f24 <USB_EPStartXfer+0x1174>
 8005f1a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005f1e:	3b01      	subs	r3, #1
 8005f20:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005f24:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005f28:	b29b      	uxth	r3, r3
 8005f2a:	029b      	lsls	r3, r3, #10
 8005f2c:	b29b      	uxth	r3, r3
 8005f2e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005f32:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005f36:	b29a      	uxth	r2, r3
 8005f38:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005f3c:	801a      	strh	r2, [r3, #0]
 8005f3e:	e023      	b.n	8005f88 <USB_EPStartXfer+0x11d8>
 8005f40:	463b      	mov	r3, r7
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	785b      	ldrb	r3, [r3, #1]
 8005f46:	2b01      	cmp	r3, #1
 8005f48:	d11e      	bne.n	8005f88 <USB_EPStartXfer+0x11d8>
 8005f4a:	1d3b      	adds	r3, r7, #4
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005f52:	b29b      	uxth	r3, r3
 8005f54:	461a      	mov	r2, r3
 8005f56:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005f5a:	4413      	add	r3, r2
 8005f5c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005f60:	463b      	mov	r3, r7
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	781b      	ldrb	r3, [r3, #0]
 8005f66:	011a      	lsls	r2, r3, #4
 8005f68:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005f6c:	4413      	add	r3, r2
 8005f6e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005f72:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005f76:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005f7a:	b29a      	uxth	r2, r3
 8005f7c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005f80:	801a      	strh	r2, [r3, #0]
 8005f82:	e001      	b.n	8005f88 <USB_EPStartXfer+0x11d8>
      }
      else
      {
        return HAL_ERROR;
 8005f84:	2301      	movs	r3, #1
 8005f86:	e02e      	b.n	8005fe6 <USB_EPStartXfer+0x1236>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005f88:	1d3b      	adds	r3, r7, #4
 8005f8a:	681a      	ldr	r2, [r3, #0]
 8005f8c:	463b      	mov	r3, r7
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	781b      	ldrb	r3, [r3, #0]
 8005f92:	009b      	lsls	r3, r3, #2
 8005f94:	4413      	add	r3, r2
 8005f96:	881b      	ldrh	r3, [r3, #0]
 8005f98:	b29b      	uxth	r3, r3
 8005f9a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005f9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005fa2:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8005fa6:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8005faa:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005fae:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8005fb2:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8005fb6:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005fba:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8005fbe:	1d3b      	adds	r3, r7, #4
 8005fc0:	681a      	ldr	r2, [r3, #0]
 8005fc2:	463b      	mov	r3, r7
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	781b      	ldrb	r3, [r3, #0]
 8005fc8:	009b      	lsls	r3, r3, #2
 8005fca:	441a      	add	r2, r3
 8005fcc:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8005fd0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005fd4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005fd8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005fdc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005fe0:	b29b      	uxth	r3, r3
 8005fe2:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8005fe4:	2300      	movs	r3, #0
}
 8005fe6:	4618      	mov	r0, r3
 8005fe8:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8005fec:	46bd      	mov	sp, r7
 8005fee:	bd80      	pop	{r7, pc}

08005ff0 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005ff0:	b480      	push	{r7}
 8005ff2:	b085      	sub	sp, #20
 8005ff4:	af00      	add	r7, sp, #0
 8005ff6:	6078      	str	r0, [r7, #4]
 8005ff8:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8005ffa:	683b      	ldr	r3, [r7, #0]
 8005ffc:	785b      	ldrb	r3, [r3, #1]
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d020      	beq.n	8006044 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8006002:	687a      	ldr	r2, [r7, #4]
 8006004:	683b      	ldr	r3, [r7, #0]
 8006006:	781b      	ldrb	r3, [r3, #0]
 8006008:	009b      	lsls	r3, r3, #2
 800600a:	4413      	add	r3, r2
 800600c:	881b      	ldrh	r3, [r3, #0]
 800600e:	b29b      	uxth	r3, r3
 8006010:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006014:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006018:	81bb      	strh	r3, [r7, #12]
 800601a:	89bb      	ldrh	r3, [r7, #12]
 800601c:	f083 0310 	eor.w	r3, r3, #16
 8006020:	81bb      	strh	r3, [r7, #12]
 8006022:	687a      	ldr	r2, [r7, #4]
 8006024:	683b      	ldr	r3, [r7, #0]
 8006026:	781b      	ldrb	r3, [r3, #0]
 8006028:	009b      	lsls	r3, r3, #2
 800602a:	441a      	add	r2, r3
 800602c:	89bb      	ldrh	r3, [r7, #12]
 800602e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006032:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006036:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800603a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800603e:	b29b      	uxth	r3, r3
 8006040:	8013      	strh	r3, [r2, #0]
 8006042:	e01f      	b.n	8006084 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8006044:	687a      	ldr	r2, [r7, #4]
 8006046:	683b      	ldr	r3, [r7, #0]
 8006048:	781b      	ldrb	r3, [r3, #0]
 800604a:	009b      	lsls	r3, r3, #2
 800604c:	4413      	add	r3, r2
 800604e:	881b      	ldrh	r3, [r3, #0]
 8006050:	b29b      	uxth	r3, r3
 8006052:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006056:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800605a:	81fb      	strh	r3, [r7, #14]
 800605c:	89fb      	ldrh	r3, [r7, #14]
 800605e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006062:	81fb      	strh	r3, [r7, #14]
 8006064:	687a      	ldr	r2, [r7, #4]
 8006066:	683b      	ldr	r3, [r7, #0]
 8006068:	781b      	ldrb	r3, [r3, #0]
 800606a:	009b      	lsls	r3, r3, #2
 800606c:	441a      	add	r2, r3
 800606e:	89fb      	ldrh	r3, [r7, #14]
 8006070:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006074:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006078:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800607c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006080:	b29b      	uxth	r3, r3
 8006082:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006084:	2300      	movs	r3, #0
}
 8006086:	4618      	mov	r0, r3
 8006088:	3714      	adds	r7, #20
 800608a:	46bd      	mov	sp, r7
 800608c:	bc80      	pop	{r7}
 800608e:	4770      	bx	lr

08006090 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006090:	b480      	push	{r7}
 8006092:	b087      	sub	sp, #28
 8006094:	af00      	add	r7, sp, #0
 8006096:	6078      	str	r0, [r7, #4]
 8006098:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800609a:	683b      	ldr	r3, [r7, #0]
 800609c:	7b1b      	ldrb	r3, [r3, #12]
 800609e:	2b00      	cmp	r3, #0
 80060a0:	f040 809d 	bne.w	80061de <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 80060a4:	683b      	ldr	r3, [r7, #0]
 80060a6:	785b      	ldrb	r3, [r3, #1]
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d04c      	beq.n	8006146 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80060ac:	687a      	ldr	r2, [r7, #4]
 80060ae:	683b      	ldr	r3, [r7, #0]
 80060b0:	781b      	ldrb	r3, [r3, #0]
 80060b2:	009b      	lsls	r3, r3, #2
 80060b4:	4413      	add	r3, r2
 80060b6:	881b      	ldrh	r3, [r3, #0]
 80060b8:	823b      	strh	r3, [r7, #16]
 80060ba:	8a3b      	ldrh	r3, [r7, #16]
 80060bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d01b      	beq.n	80060fc <USB_EPClearStall+0x6c>
 80060c4:	687a      	ldr	r2, [r7, #4]
 80060c6:	683b      	ldr	r3, [r7, #0]
 80060c8:	781b      	ldrb	r3, [r3, #0]
 80060ca:	009b      	lsls	r3, r3, #2
 80060cc:	4413      	add	r3, r2
 80060ce:	881b      	ldrh	r3, [r3, #0]
 80060d0:	b29b      	uxth	r3, r3
 80060d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80060d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060da:	81fb      	strh	r3, [r7, #14]
 80060dc:	687a      	ldr	r2, [r7, #4]
 80060de:	683b      	ldr	r3, [r7, #0]
 80060e0:	781b      	ldrb	r3, [r3, #0]
 80060e2:	009b      	lsls	r3, r3, #2
 80060e4:	441a      	add	r2, r3
 80060e6:	89fb      	ldrh	r3, [r7, #14]
 80060e8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80060ec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80060f0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80060f4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80060f8:	b29b      	uxth	r3, r3
 80060fa:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80060fc:	683b      	ldr	r3, [r7, #0]
 80060fe:	78db      	ldrb	r3, [r3, #3]
 8006100:	2b01      	cmp	r3, #1
 8006102:	d06c      	beq.n	80061de <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006104:	687a      	ldr	r2, [r7, #4]
 8006106:	683b      	ldr	r3, [r7, #0]
 8006108:	781b      	ldrb	r3, [r3, #0]
 800610a:	009b      	lsls	r3, r3, #2
 800610c:	4413      	add	r3, r2
 800610e:	881b      	ldrh	r3, [r3, #0]
 8006110:	b29b      	uxth	r3, r3
 8006112:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006116:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800611a:	81bb      	strh	r3, [r7, #12]
 800611c:	89bb      	ldrh	r3, [r7, #12]
 800611e:	f083 0320 	eor.w	r3, r3, #32
 8006122:	81bb      	strh	r3, [r7, #12]
 8006124:	687a      	ldr	r2, [r7, #4]
 8006126:	683b      	ldr	r3, [r7, #0]
 8006128:	781b      	ldrb	r3, [r3, #0]
 800612a:	009b      	lsls	r3, r3, #2
 800612c:	441a      	add	r2, r3
 800612e:	89bb      	ldrh	r3, [r7, #12]
 8006130:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006134:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006138:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800613c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006140:	b29b      	uxth	r3, r3
 8006142:	8013      	strh	r3, [r2, #0]
 8006144:	e04b      	b.n	80061de <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006146:	687a      	ldr	r2, [r7, #4]
 8006148:	683b      	ldr	r3, [r7, #0]
 800614a:	781b      	ldrb	r3, [r3, #0]
 800614c:	009b      	lsls	r3, r3, #2
 800614e:	4413      	add	r3, r2
 8006150:	881b      	ldrh	r3, [r3, #0]
 8006152:	82fb      	strh	r3, [r7, #22]
 8006154:	8afb      	ldrh	r3, [r7, #22]
 8006156:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800615a:	2b00      	cmp	r3, #0
 800615c:	d01b      	beq.n	8006196 <USB_EPClearStall+0x106>
 800615e:	687a      	ldr	r2, [r7, #4]
 8006160:	683b      	ldr	r3, [r7, #0]
 8006162:	781b      	ldrb	r3, [r3, #0]
 8006164:	009b      	lsls	r3, r3, #2
 8006166:	4413      	add	r3, r2
 8006168:	881b      	ldrh	r3, [r3, #0]
 800616a:	b29b      	uxth	r3, r3
 800616c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006170:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006174:	82bb      	strh	r3, [r7, #20]
 8006176:	687a      	ldr	r2, [r7, #4]
 8006178:	683b      	ldr	r3, [r7, #0]
 800617a:	781b      	ldrb	r3, [r3, #0]
 800617c:	009b      	lsls	r3, r3, #2
 800617e:	441a      	add	r2, r3
 8006180:	8abb      	ldrh	r3, [r7, #20]
 8006182:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006186:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800618a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800618e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006192:	b29b      	uxth	r3, r3
 8006194:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006196:	687a      	ldr	r2, [r7, #4]
 8006198:	683b      	ldr	r3, [r7, #0]
 800619a:	781b      	ldrb	r3, [r3, #0]
 800619c:	009b      	lsls	r3, r3, #2
 800619e:	4413      	add	r3, r2
 80061a0:	881b      	ldrh	r3, [r3, #0]
 80061a2:	b29b      	uxth	r3, r3
 80061a4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80061a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061ac:	827b      	strh	r3, [r7, #18]
 80061ae:	8a7b      	ldrh	r3, [r7, #18]
 80061b0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80061b4:	827b      	strh	r3, [r7, #18]
 80061b6:	8a7b      	ldrh	r3, [r7, #18]
 80061b8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80061bc:	827b      	strh	r3, [r7, #18]
 80061be:	687a      	ldr	r2, [r7, #4]
 80061c0:	683b      	ldr	r3, [r7, #0]
 80061c2:	781b      	ldrb	r3, [r3, #0]
 80061c4:	009b      	lsls	r3, r3, #2
 80061c6:	441a      	add	r2, r3
 80061c8:	8a7b      	ldrh	r3, [r7, #18]
 80061ca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80061ce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80061d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80061d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80061da:	b29b      	uxth	r3, r3
 80061dc:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80061de:	2300      	movs	r3, #0
}
 80061e0:	4618      	mov	r0, r3
 80061e2:	371c      	adds	r7, #28
 80061e4:	46bd      	mov	sp, r7
 80061e6:	bc80      	pop	{r7}
 80061e8:	4770      	bx	lr

080061ea <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 80061ea:	b480      	push	{r7}
 80061ec:	b083      	sub	sp, #12
 80061ee:	af00      	add	r7, sp, #0
 80061f0:	6078      	str	r0, [r7, #4]
 80061f2:	460b      	mov	r3, r1
 80061f4:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 80061f6:	78fb      	ldrb	r3, [r7, #3]
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d103      	bne.n	8006204 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	2280      	movs	r2, #128	; 0x80
 8006200:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8006204:	2300      	movs	r3, #0
}
 8006206:	4618      	mov	r0, r3
 8006208:	370c      	adds	r7, #12
 800620a:	46bd      	mov	sp, r7
 800620c:	bc80      	pop	{r7}
 800620e:	4770      	bx	lr

08006210 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8006210:	b480      	push	{r7}
 8006212:	b083      	sub	sp, #12
 8006214:	af00      	add	r7, sp, #0
 8006216:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006218:	2300      	movs	r3, #0
}
 800621a:	4618      	mov	r0, r3
 800621c:	370c      	adds	r7, #12
 800621e:	46bd      	mov	sp, r7
 8006220:	bc80      	pop	{r7}
 8006222:	4770      	bx	lr

08006224 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8006224:	b480      	push	{r7}
 8006226:	b083      	sub	sp, #12
 8006228:	af00      	add	r7, sp, #0
 800622a:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800622c:	2300      	movs	r3, #0
}
 800622e:	4618      	mov	r0, r3
 8006230:	370c      	adds	r7, #12
 8006232:	46bd      	mov	sp, r7
 8006234:	bc80      	pop	{r7}
 8006236:	4770      	bx	lr

08006238 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8006238:	b480      	push	{r7}
 800623a:	b085      	sub	sp, #20
 800623c:	af00      	add	r7, sp, #0
 800623e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006246:	b29b      	uxth	r3, r3
 8006248:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800624a:	68fb      	ldr	r3, [r7, #12]
}
 800624c:	4618      	mov	r0, r3
 800624e:	3714      	adds	r7, #20
 8006250:	46bd      	mov	sp, r7
 8006252:	bc80      	pop	{r7}
 8006254:	4770      	bx	lr

08006256 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8006256:	b480      	push	{r7}
 8006258:	b083      	sub	sp, #12
 800625a:	af00      	add	r7, sp, #0
 800625c:	6078      	str	r0, [r7, #4]
 800625e:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8006260:	2300      	movs	r3, #0
}
 8006262:	4618      	mov	r0, r3
 8006264:	370c      	adds	r7, #12
 8006266:	46bd      	mov	sp, r7
 8006268:	bc80      	pop	{r7}
 800626a:	4770      	bx	lr

0800626c <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800626c:	b480      	push	{r7}
 800626e:	b08d      	sub	sp, #52	; 0x34
 8006270:	af00      	add	r7, sp, #0
 8006272:	60f8      	str	r0, [r7, #12]
 8006274:	60b9      	str	r1, [r7, #8]
 8006276:	4611      	mov	r1, r2
 8006278:	461a      	mov	r2, r3
 800627a:	460b      	mov	r3, r1
 800627c:	80fb      	strh	r3, [r7, #6]
 800627e:	4613      	mov	r3, r2
 8006280:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8006282:	88bb      	ldrh	r3, [r7, #4]
 8006284:	3301      	adds	r3, #1
 8006286:	085b      	lsrs	r3, r3, #1
 8006288:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800628e:	68bb      	ldr	r3, [r7, #8]
 8006290:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006292:	88fb      	ldrh	r3, [r7, #6]
 8006294:	005a      	lsls	r2, r3, #1
 8006296:	69fb      	ldr	r3, [r7, #28]
 8006298:	4413      	add	r3, r2
 800629a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800629e:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 80062a0:	6a3b      	ldr	r3, [r7, #32]
 80062a2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80062a4:	e01e      	b.n	80062e4 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 80062a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062a8:	781b      	ldrb	r3, [r3, #0]
 80062aa:	61bb      	str	r3, [r7, #24]
    pBuf++;
 80062ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062ae:	3301      	adds	r3, #1
 80062b0:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 80062b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062b4:	781b      	ldrb	r3, [r3, #0]
 80062b6:	b29b      	uxth	r3, r3
 80062b8:	021b      	lsls	r3, r3, #8
 80062ba:	b29b      	uxth	r3, r3
 80062bc:	461a      	mov	r2, r3
 80062be:	69bb      	ldr	r3, [r7, #24]
 80062c0:	4313      	orrs	r3, r2
 80062c2:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 80062c4:	697b      	ldr	r3, [r7, #20]
 80062c6:	b29a      	uxth	r2, r3
 80062c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062ca:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 80062cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062ce:	3302      	adds	r3, #2
 80062d0:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 80062d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062d4:	3302      	adds	r3, #2
 80062d6:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 80062d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062da:	3301      	adds	r3, #1
 80062dc:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 80062de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062e0:	3b01      	subs	r3, #1
 80062e2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80062e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d1dd      	bne.n	80062a6 <USB_WritePMA+0x3a>
  }
}
 80062ea:	bf00      	nop
 80062ec:	3734      	adds	r7, #52	; 0x34
 80062ee:	46bd      	mov	sp, r7
 80062f0:	bc80      	pop	{r7}
 80062f2:	4770      	bx	lr

080062f4 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80062f4:	b480      	push	{r7}
 80062f6:	b08b      	sub	sp, #44	; 0x2c
 80062f8:	af00      	add	r7, sp, #0
 80062fa:	60f8      	str	r0, [r7, #12]
 80062fc:	60b9      	str	r1, [r7, #8]
 80062fe:	4611      	mov	r1, r2
 8006300:	461a      	mov	r2, r3
 8006302:	460b      	mov	r3, r1
 8006304:	80fb      	strh	r3, [r7, #6]
 8006306:	4613      	mov	r3, r2
 8006308:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800630a:	88bb      	ldrh	r3, [r7, #4]
 800630c:	085b      	lsrs	r3, r3, #1
 800630e:	b29b      	uxth	r3, r3
 8006310:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006316:	68bb      	ldr	r3, [r7, #8]
 8006318:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800631a:	88fb      	ldrh	r3, [r7, #6]
 800631c:	005a      	lsls	r2, r3, #1
 800631e:	697b      	ldr	r3, [r7, #20]
 8006320:	4413      	add	r3, r2
 8006322:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006326:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8006328:	69bb      	ldr	r3, [r7, #24]
 800632a:	627b      	str	r3, [r7, #36]	; 0x24
 800632c:	e01b      	b.n	8006366 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 800632e:	6a3b      	ldr	r3, [r7, #32]
 8006330:	881b      	ldrh	r3, [r3, #0]
 8006332:	b29b      	uxth	r3, r3
 8006334:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8006336:	6a3b      	ldr	r3, [r7, #32]
 8006338:	3302      	adds	r3, #2
 800633a:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800633c:	693b      	ldr	r3, [r7, #16]
 800633e:	b2da      	uxtb	r2, r3
 8006340:	69fb      	ldr	r3, [r7, #28]
 8006342:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006344:	69fb      	ldr	r3, [r7, #28]
 8006346:	3301      	adds	r3, #1
 8006348:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 800634a:	693b      	ldr	r3, [r7, #16]
 800634c:	0a1b      	lsrs	r3, r3, #8
 800634e:	b2da      	uxtb	r2, r3
 8006350:	69fb      	ldr	r3, [r7, #28]
 8006352:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006354:	69fb      	ldr	r3, [r7, #28]
 8006356:	3301      	adds	r3, #1
 8006358:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 800635a:	6a3b      	ldr	r3, [r7, #32]
 800635c:	3302      	adds	r3, #2
 800635e:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 8006360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006362:	3b01      	subs	r3, #1
 8006364:	627b      	str	r3, [r7, #36]	; 0x24
 8006366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006368:	2b00      	cmp	r3, #0
 800636a:	d1e0      	bne.n	800632e <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 800636c:	88bb      	ldrh	r3, [r7, #4]
 800636e:	f003 0301 	and.w	r3, r3, #1
 8006372:	b29b      	uxth	r3, r3
 8006374:	2b00      	cmp	r3, #0
 8006376:	d007      	beq.n	8006388 <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 8006378:	6a3b      	ldr	r3, [r7, #32]
 800637a:	881b      	ldrh	r3, [r3, #0]
 800637c:	b29b      	uxth	r3, r3
 800637e:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8006380:	693b      	ldr	r3, [r7, #16]
 8006382:	b2da      	uxtb	r2, r3
 8006384:	69fb      	ldr	r3, [r7, #28]
 8006386:	701a      	strb	r2, [r3, #0]
  }
}
 8006388:	bf00      	nop
 800638a:	372c      	adds	r7, #44	; 0x2c
 800638c:	46bd      	mov	sp, r7
 800638e:	bc80      	pop	{r7}
 8006390:	4770      	bx	lr

08006392 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006392:	b580      	push	{r7, lr}
 8006394:	b084      	sub	sp, #16
 8006396:	af00      	add	r7, sp, #0
 8006398:	6078      	str	r0, [r7, #4]
 800639a:	460b      	mov	r3, r1
 800639c:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800639e:	2300      	movs	r3, #0
 80063a0:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	7c1b      	ldrb	r3, [r3, #16]
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d115      	bne.n	80063d6 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80063aa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80063ae:	2202      	movs	r2, #2
 80063b0:	2181      	movs	r1, #129	; 0x81
 80063b2:	6878      	ldr	r0, [r7, #4]
 80063b4:	f001 fe81 	bl	80080ba <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	2201      	movs	r2, #1
 80063bc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80063be:	f44f 7300 	mov.w	r3, #512	; 0x200
 80063c2:	2202      	movs	r2, #2
 80063c4:	2101      	movs	r1, #1
 80063c6:	6878      	ldr	r0, [r7, #4]
 80063c8:	f001 fe77 	bl	80080ba <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	2201      	movs	r2, #1
 80063d0:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 80063d4:	e012      	b.n	80063fc <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80063d6:	2340      	movs	r3, #64	; 0x40
 80063d8:	2202      	movs	r2, #2
 80063da:	2181      	movs	r1, #129	; 0x81
 80063dc:	6878      	ldr	r0, [r7, #4]
 80063de:	f001 fe6c 	bl	80080ba <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	2201      	movs	r2, #1
 80063e6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80063e8:	2340      	movs	r3, #64	; 0x40
 80063ea:	2202      	movs	r2, #2
 80063ec:	2101      	movs	r1, #1
 80063ee:	6878      	ldr	r0, [r7, #4]
 80063f0:	f001 fe63 	bl	80080ba <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	2201      	movs	r2, #1
 80063f8:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80063fc:	2308      	movs	r3, #8
 80063fe:	2203      	movs	r2, #3
 8006400:	2182      	movs	r1, #130	; 0x82
 8006402:	6878      	ldr	r0, [r7, #4]
 8006404:	f001 fe59 	bl	80080ba <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	2201      	movs	r2, #1
 800640c:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800640e:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8006412:	f001 ff79 	bl	8008308 <USBD_static_malloc>
 8006416:	4602      	mov	r2, r0
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006424:	2b00      	cmp	r3, #0
 8006426:	d102      	bne.n	800642e <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8006428:	2301      	movs	r3, #1
 800642a:	73fb      	strb	r3, [r7, #15]
 800642c:	e026      	b.n	800647c <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006434:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8006440:	68bb      	ldr	r3, [r7, #8]
 8006442:	2200      	movs	r2, #0
 8006444:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8006448:	68bb      	ldr	r3, [r7, #8]
 800644a:	2200      	movs	r2, #0
 800644c:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	7c1b      	ldrb	r3, [r3, #16]
 8006454:	2b00      	cmp	r3, #0
 8006456:	d109      	bne.n	800646c <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006458:	68bb      	ldr	r3, [r7, #8]
 800645a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800645e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006462:	2101      	movs	r1, #1
 8006464:	6878      	ldr	r0, [r7, #4]
 8006466:	f001 ff19 	bl	800829c <USBD_LL_PrepareReceive>
 800646a:	e007      	b.n	800647c <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800646c:	68bb      	ldr	r3, [r7, #8]
 800646e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006472:	2340      	movs	r3, #64	; 0x40
 8006474:	2101      	movs	r1, #1
 8006476:	6878      	ldr	r0, [r7, #4]
 8006478:	f001 ff10 	bl	800829c <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 800647c:	7bfb      	ldrb	r3, [r7, #15]
}
 800647e:	4618      	mov	r0, r3
 8006480:	3710      	adds	r7, #16
 8006482:	46bd      	mov	sp, r7
 8006484:	bd80      	pop	{r7, pc}

08006486 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006486:	b580      	push	{r7, lr}
 8006488:	b084      	sub	sp, #16
 800648a:	af00      	add	r7, sp, #0
 800648c:	6078      	str	r0, [r7, #4]
 800648e:	460b      	mov	r3, r1
 8006490:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8006492:	2300      	movs	r3, #0
 8006494:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8006496:	2181      	movs	r1, #129	; 0x81
 8006498:	6878      	ldr	r0, [r7, #4]
 800649a:	f001 fe34 	bl	8008106 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	2200      	movs	r2, #0
 80064a2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80064a4:	2101      	movs	r1, #1
 80064a6:	6878      	ldr	r0, [r7, #4]
 80064a8:	f001 fe2d 	bl	8008106 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	2200      	movs	r2, #0
 80064b0:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80064b4:	2182      	movs	r1, #130	; 0x82
 80064b6:	6878      	ldr	r0, [r7, #4]
 80064b8:	f001 fe25 	bl	8008106 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	2200      	movs	r2, #0
 80064c0:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d00e      	beq.n	80064ea <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80064d2:	685b      	ldr	r3, [r3, #4]
 80064d4:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80064dc:	4618      	mov	r0, r3
 80064de:	f001 ff1f 	bl	8008320 <USBD_static_free>
    pdev->pClassData = NULL;
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	2200      	movs	r2, #0
 80064e6:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 80064ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80064ec:	4618      	mov	r0, r3
 80064ee:	3710      	adds	r7, #16
 80064f0:	46bd      	mov	sp, r7
 80064f2:	bd80      	pop	{r7, pc}

080064f4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80064f4:	b580      	push	{r7, lr}
 80064f6:	b086      	sub	sp, #24
 80064f8:	af00      	add	r7, sp, #0
 80064fa:	6078      	str	r0, [r7, #4]
 80064fc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006504:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8006506:	2300      	movs	r3, #0
 8006508:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800650a:	2300      	movs	r3, #0
 800650c:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 800650e:	2300      	movs	r3, #0
 8006510:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006512:	683b      	ldr	r3, [r7, #0]
 8006514:	781b      	ldrb	r3, [r3, #0]
 8006516:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800651a:	2b00      	cmp	r3, #0
 800651c:	d039      	beq.n	8006592 <USBD_CDC_Setup+0x9e>
 800651e:	2b20      	cmp	r3, #32
 8006520:	d17c      	bne.n	800661c <USBD_CDC_Setup+0x128>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8006522:	683b      	ldr	r3, [r7, #0]
 8006524:	88db      	ldrh	r3, [r3, #6]
 8006526:	2b00      	cmp	r3, #0
 8006528:	d029      	beq.n	800657e <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 800652a:	683b      	ldr	r3, [r7, #0]
 800652c:	781b      	ldrb	r3, [r3, #0]
 800652e:	b25b      	sxtb	r3, r3
 8006530:	2b00      	cmp	r3, #0
 8006532:	da11      	bge.n	8006558 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800653a:	689b      	ldr	r3, [r3, #8]
 800653c:	683a      	ldr	r2, [r7, #0]
 800653e:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8006540:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006542:	683a      	ldr	r2, [r7, #0]
 8006544:	88d2      	ldrh	r2, [r2, #6]
 8006546:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8006548:	6939      	ldr	r1, [r7, #16]
 800654a:	683b      	ldr	r3, [r7, #0]
 800654c:	88db      	ldrh	r3, [r3, #6]
 800654e:	461a      	mov	r2, r3
 8006550:	6878      	ldr	r0, [r7, #4]
 8006552:	f001 f9f9 	bl	8007948 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8006556:	e068      	b.n	800662a <USBD_CDC_Setup+0x136>
          hcdc->CmdOpCode = req->bRequest;
 8006558:	683b      	ldr	r3, [r7, #0]
 800655a:	785a      	ldrb	r2, [r3, #1]
 800655c:	693b      	ldr	r3, [r7, #16]
 800655e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8006562:	683b      	ldr	r3, [r7, #0]
 8006564:	88db      	ldrh	r3, [r3, #6]
 8006566:	b2da      	uxtb	r2, r3
 8006568:	693b      	ldr	r3, [r7, #16]
 800656a:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800656e:	6939      	ldr	r1, [r7, #16]
 8006570:	683b      	ldr	r3, [r7, #0]
 8006572:	88db      	ldrh	r3, [r3, #6]
 8006574:	461a      	mov	r2, r3
 8006576:	6878      	ldr	r0, [r7, #4]
 8006578:	f001 fa14 	bl	80079a4 <USBD_CtlPrepareRx>
      break;
 800657c:	e055      	b.n	800662a <USBD_CDC_Setup+0x136>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006584:	689b      	ldr	r3, [r3, #8]
 8006586:	683a      	ldr	r2, [r7, #0]
 8006588:	7850      	ldrb	r0, [r2, #1]
 800658a:	2200      	movs	r2, #0
 800658c:	6839      	ldr	r1, [r7, #0]
 800658e:	4798      	blx	r3
      break;
 8006590:	e04b      	b.n	800662a <USBD_CDC_Setup+0x136>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006592:	683b      	ldr	r3, [r7, #0]
 8006594:	785b      	ldrb	r3, [r3, #1]
 8006596:	2b0a      	cmp	r3, #10
 8006598:	d017      	beq.n	80065ca <USBD_CDC_Setup+0xd6>
 800659a:	2b0b      	cmp	r3, #11
 800659c:	d029      	beq.n	80065f2 <USBD_CDC_Setup+0xfe>
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d133      	bne.n	800660a <USBD_CDC_Setup+0x116>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80065a8:	2b03      	cmp	r3, #3
 80065aa:	d107      	bne.n	80065bc <USBD_CDC_Setup+0xc8>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 80065ac:	f107 030c 	add.w	r3, r7, #12
 80065b0:	2202      	movs	r2, #2
 80065b2:	4619      	mov	r1, r3
 80065b4:	6878      	ldr	r0, [r7, #4]
 80065b6:	f001 f9c7 	bl	8007948 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80065ba:	e02e      	b.n	800661a <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 80065bc:	6839      	ldr	r1, [r7, #0]
 80065be:	6878      	ldr	r0, [r7, #4]
 80065c0:	f001 f958 	bl	8007874 <USBD_CtlError>
            ret = USBD_FAIL;
 80065c4:	2302      	movs	r3, #2
 80065c6:	75fb      	strb	r3, [r7, #23]
          break;
 80065c8:	e027      	b.n	800661a <USBD_CDC_Setup+0x126>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80065d0:	2b03      	cmp	r3, #3
 80065d2:	d107      	bne.n	80065e4 <USBD_CDC_Setup+0xf0>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 80065d4:	f107 030f 	add.w	r3, r7, #15
 80065d8:	2201      	movs	r2, #1
 80065da:	4619      	mov	r1, r3
 80065dc:	6878      	ldr	r0, [r7, #4]
 80065de:	f001 f9b3 	bl	8007948 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80065e2:	e01a      	b.n	800661a <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 80065e4:	6839      	ldr	r1, [r7, #0]
 80065e6:	6878      	ldr	r0, [r7, #4]
 80065e8:	f001 f944 	bl	8007874 <USBD_CtlError>
            ret = USBD_FAIL;
 80065ec:	2302      	movs	r3, #2
 80065ee:	75fb      	strb	r3, [r7, #23]
          break;
 80065f0:	e013      	b.n	800661a <USBD_CDC_Setup+0x126>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80065f8:	2b03      	cmp	r3, #3
 80065fa:	d00d      	beq.n	8006618 <USBD_CDC_Setup+0x124>
          {
            USBD_CtlError(pdev, req);
 80065fc:	6839      	ldr	r1, [r7, #0]
 80065fe:	6878      	ldr	r0, [r7, #4]
 8006600:	f001 f938 	bl	8007874 <USBD_CtlError>
            ret = USBD_FAIL;
 8006604:	2302      	movs	r3, #2
 8006606:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8006608:	e006      	b.n	8006618 <USBD_CDC_Setup+0x124>

        default:
          USBD_CtlError(pdev, req);
 800660a:	6839      	ldr	r1, [r7, #0]
 800660c:	6878      	ldr	r0, [r7, #4]
 800660e:	f001 f931 	bl	8007874 <USBD_CtlError>
          ret = USBD_FAIL;
 8006612:	2302      	movs	r3, #2
 8006614:	75fb      	strb	r3, [r7, #23]
          break;
 8006616:	e000      	b.n	800661a <USBD_CDC_Setup+0x126>
          break;
 8006618:	bf00      	nop
      }
      break;
 800661a:	e006      	b.n	800662a <USBD_CDC_Setup+0x136>

    default:
      USBD_CtlError(pdev, req);
 800661c:	6839      	ldr	r1, [r7, #0]
 800661e:	6878      	ldr	r0, [r7, #4]
 8006620:	f001 f928 	bl	8007874 <USBD_CtlError>
      ret = USBD_FAIL;
 8006624:	2302      	movs	r3, #2
 8006626:	75fb      	strb	r3, [r7, #23]
      break;
 8006628:	bf00      	nop
  }

  return ret;
 800662a:	7dfb      	ldrb	r3, [r7, #23]
}
 800662c:	4618      	mov	r0, r3
 800662e:	3718      	adds	r7, #24
 8006630:	46bd      	mov	sp, r7
 8006632:	bd80      	pop	{r7, pc}

08006634 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006634:	b580      	push	{r7, lr}
 8006636:	b084      	sub	sp, #16
 8006638:	af00      	add	r7, sp, #0
 800663a:	6078      	str	r0, [r7, #4]
 800663c:	460b      	mov	r3, r1
 800663e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006646:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800664e:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006656:	2b00      	cmp	r3, #0
 8006658:	d03a      	beq.n	80066d0 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800665a:	78fa      	ldrb	r2, [r7, #3]
 800665c:	6879      	ldr	r1, [r7, #4]
 800665e:	4613      	mov	r3, r2
 8006660:	009b      	lsls	r3, r3, #2
 8006662:	4413      	add	r3, r2
 8006664:	009b      	lsls	r3, r3, #2
 8006666:	440b      	add	r3, r1
 8006668:	331c      	adds	r3, #28
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	2b00      	cmp	r3, #0
 800666e:	d029      	beq.n	80066c4 <USBD_CDC_DataIn+0x90>
 8006670:	78fa      	ldrb	r2, [r7, #3]
 8006672:	6879      	ldr	r1, [r7, #4]
 8006674:	4613      	mov	r3, r2
 8006676:	009b      	lsls	r3, r3, #2
 8006678:	4413      	add	r3, r2
 800667a:	009b      	lsls	r3, r3, #2
 800667c:	440b      	add	r3, r1
 800667e:	331c      	adds	r3, #28
 8006680:	681a      	ldr	r2, [r3, #0]
 8006682:	78f9      	ldrb	r1, [r7, #3]
 8006684:	68b8      	ldr	r0, [r7, #8]
 8006686:	460b      	mov	r3, r1
 8006688:	009b      	lsls	r3, r3, #2
 800668a:	440b      	add	r3, r1
 800668c:	00db      	lsls	r3, r3, #3
 800668e:	4403      	add	r3, r0
 8006690:	3338      	adds	r3, #56	; 0x38
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	fbb2 f1f3 	udiv	r1, r2, r3
 8006698:	fb03 f301 	mul.w	r3, r3, r1
 800669c:	1ad3      	subs	r3, r2, r3
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d110      	bne.n	80066c4 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 80066a2:	78fa      	ldrb	r2, [r7, #3]
 80066a4:	6879      	ldr	r1, [r7, #4]
 80066a6:	4613      	mov	r3, r2
 80066a8:	009b      	lsls	r3, r3, #2
 80066aa:	4413      	add	r3, r2
 80066ac:	009b      	lsls	r3, r3, #2
 80066ae:	440b      	add	r3, r1
 80066b0:	331c      	adds	r3, #28
 80066b2:	2200      	movs	r2, #0
 80066b4:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80066b6:	78f9      	ldrb	r1, [r7, #3]
 80066b8:	2300      	movs	r3, #0
 80066ba:	2200      	movs	r2, #0
 80066bc:	6878      	ldr	r0, [r7, #4]
 80066be:	f001 fdca 	bl	8008256 <USBD_LL_Transmit>
 80066c2:	e003      	b.n	80066cc <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	2200      	movs	r2, #0
 80066c8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 80066cc:	2300      	movs	r3, #0
 80066ce:	e000      	b.n	80066d2 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 80066d0:	2302      	movs	r3, #2
  }
}
 80066d2:	4618      	mov	r0, r3
 80066d4:	3710      	adds	r7, #16
 80066d6:	46bd      	mov	sp, r7
 80066d8:	bd80      	pop	{r7, pc}

080066da <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80066da:	b580      	push	{r7, lr}
 80066dc:	b084      	sub	sp, #16
 80066de:	af00      	add	r7, sp, #0
 80066e0:	6078      	str	r0, [r7, #4]
 80066e2:	460b      	mov	r3, r1
 80066e4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80066ec:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80066ee:	78fb      	ldrb	r3, [r7, #3]
 80066f0:	4619      	mov	r1, r3
 80066f2:	6878      	ldr	r0, [r7, #4]
 80066f4:	f001 fdf5 	bl	80082e2 <USBD_LL_GetRxDataSize>
 80066f8:	4602      	mov	r2, r0
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006706:	2b00      	cmp	r3, #0
 8006708:	d00d      	beq.n	8006726 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006710:	68db      	ldr	r3, [r3, #12]
 8006712:	68fa      	ldr	r2, [r7, #12]
 8006714:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8006718:	68fa      	ldr	r2, [r7, #12]
 800671a:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800671e:	4611      	mov	r1, r2
 8006720:	4798      	blx	r3

    return USBD_OK;
 8006722:	2300      	movs	r3, #0
 8006724:	e000      	b.n	8006728 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8006726:	2302      	movs	r3, #2
  }
}
 8006728:	4618      	mov	r0, r3
 800672a:	3710      	adds	r7, #16
 800672c:	46bd      	mov	sp, r7
 800672e:	bd80      	pop	{r7, pc}

08006730 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006730:	b580      	push	{r7, lr}
 8006732:	b084      	sub	sp, #16
 8006734:	af00      	add	r7, sp, #0
 8006736:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800673e:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006746:	2b00      	cmp	r3, #0
 8006748:	d015      	beq.n	8006776 <USBD_CDC_EP0_RxReady+0x46>
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8006750:	2bff      	cmp	r3, #255	; 0xff
 8006752:	d010      	beq.n	8006776 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800675a:	689b      	ldr	r3, [r3, #8]
 800675c:	68fa      	ldr	r2, [r7, #12]
 800675e:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8006762:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8006764:	68fa      	ldr	r2, [r7, #12]
 8006766:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800676a:	b292      	uxth	r2, r2
 800676c:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	22ff      	movs	r2, #255	; 0xff
 8006772:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8006776:	2300      	movs	r3, #0
}
 8006778:	4618      	mov	r0, r3
 800677a:	3710      	adds	r7, #16
 800677c:	46bd      	mov	sp, r7
 800677e:	bd80      	pop	{r7, pc}

08006780 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006780:	b480      	push	{r7}
 8006782:	b083      	sub	sp, #12
 8006784:	af00      	add	r7, sp, #0
 8006786:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	2243      	movs	r2, #67	; 0x43
 800678c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800678e:	4b03      	ldr	r3, [pc, #12]	; (800679c <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8006790:	4618      	mov	r0, r3
 8006792:	370c      	adds	r7, #12
 8006794:	46bd      	mov	sp, r7
 8006796:	bc80      	pop	{r7}
 8006798:	4770      	bx	lr
 800679a:	bf00      	nop
 800679c:	20000098 	.word	0x20000098

080067a0 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80067a0:	b480      	push	{r7}
 80067a2:	b083      	sub	sp, #12
 80067a4:	af00      	add	r7, sp, #0
 80067a6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	2243      	movs	r2, #67	; 0x43
 80067ac:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 80067ae:	4b03      	ldr	r3, [pc, #12]	; (80067bc <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 80067b0:	4618      	mov	r0, r3
 80067b2:	370c      	adds	r7, #12
 80067b4:	46bd      	mov	sp, r7
 80067b6:	bc80      	pop	{r7}
 80067b8:	4770      	bx	lr
 80067ba:	bf00      	nop
 80067bc:	20000054 	.word	0x20000054

080067c0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80067c0:	b480      	push	{r7}
 80067c2:	b083      	sub	sp, #12
 80067c4:	af00      	add	r7, sp, #0
 80067c6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	2243      	movs	r2, #67	; 0x43
 80067cc:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 80067ce:	4b03      	ldr	r3, [pc, #12]	; (80067dc <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80067d0:	4618      	mov	r0, r3
 80067d2:	370c      	adds	r7, #12
 80067d4:	46bd      	mov	sp, r7
 80067d6:	bc80      	pop	{r7}
 80067d8:	4770      	bx	lr
 80067da:	bf00      	nop
 80067dc:	200000dc 	.word	0x200000dc

080067e0 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80067e0:	b480      	push	{r7}
 80067e2:	b083      	sub	sp, #12
 80067e4:	af00      	add	r7, sp, #0
 80067e6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	220a      	movs	r2, #10
 80067ec:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 80067ee:	4b03      	ldr	r3, [pc, #12]	; (80067fc <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80067f0:	4618      	mov	r0, r3
 80067f2:	370c      	adds	r7, #12
 80067f4:	46bd      	mov	sp, r7
 80067f6:	bc80      	pop	{r7}
 80067f8:	4770      	bx	lr
 80067fa:	bf00      	nop
 80067fc:	20000010 	.word	0x20000010

08006800 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8006800:	b480      	push	{r7}
 8006802:	b085      	sub	sp, #20
 8006804:	af00      	add	r7, sp, #0
 8006806:	6078      	str	r0, [r7, #4]
 8006808:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800680a:	2302      	movs	r3, #2
 800680c:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 800680e:	683b      	ldr	r3, [r7, #0]
 8006810:	2b00      	cmp	r3, #0
 8006812:	d005      	beq.n	8006820 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	683a      	ldr	r2, [r7, #0]
 8006818:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 800681c:	2300      	movs	r3, #0
 800681e:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8006820:	7bfb      	ldrb	r3, [r7, #15]
}
 8006822:	4618      	mov	r0, r3
 8006824:	3714      	adds	r7, #20
 8006826:	46bd      	mov	sp, r7
 8006828:	bc80      	pop	{r7}
 800682a:	4770      	bx	lr

0800682c <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 800682c:	b480      	push	{r7}
 800682e:	b087      	sub	sp, #28
 8006830:	af00      	add	r7, sp, #0
 8006832:	60f8      	str	r0, [r7, #12]
 8006834:	60b9      	str	r1, [r7, #8]
 8006836:	4613      	mov	r3, r2
 8006838:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006840:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8006842:	697b      	ldr	r3, [r7, #20]
 8006844:	68ba      	ldr	r2, [r7, #8]
 8006846:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800684a:	88fa      	ldrh	r2, [r7, #6]
 800684c:	697b      	ldr	r3, [r7, #20]
 800684e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8006852:	2300      	movs	r3, #0
}
 8006854:	4618      	mov	r0, r3
 8006856:	371c      	adds	r7, #28
 8006858:	46bd      	mov	sp, r7
 800685a:	bc80      	pop	{r7}
 800685c:	4770      	bx	lr

0800685e <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 800685e:	b480      	push	{r7}
 8006860:	b085      	sub	sp, #20
 8006862:	af00      	add	r7, sp, #0
 8006864:	6078      	str	r0, [r7, #4]
 8006866:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800686e:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	683a      	ldr	r2, [r7, #0]
 8006874:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8006878:	2300      	movs	r3, #0
}
 800687a:	4618      	mov	r0, r3
 800687c:	3714      	adds	r7, #20
 800687e:	46bd      	mov	sp, r7
 8006880:	bc80      	pop	{r7}
 8006882:	4770      	bx	lr

08006884 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8006884:	b580      	push	{r7, lr}
 8006886:	b084      	sub	sp, #16
 8006888:	af00      	add	r7, sp, #0
 800688a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006892:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800689a:	2b00      	cmp	r3, #0
 800689c:	d01c      	beq.n	80068d8 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d115      	bne.n	80068d4 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	2201      	movs	r2, #1
 80068ac:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80068c6:	b29b      	uxth	r3, r3
 80068c8:	2181      	movs	r1, #129	; 0x81
 80068ca:	6878      	ldr	r0, [r7, #4]
 80068cc:	f001 fcc3 	bl	8008256 <USBD_LL_Transmit>

      return USBD_OK;
 80068d0:	2300      	movs	r3, #0
 80068d2:	e002      	b.n	80068da <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 80068d4:	2301      	movs	r3, #1
 80068d6:	e000      	b.n	80068da <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 80068d8:	2302      	movs	r3, #2
  }
}
 80068da:	4618      	mov	r0, r3
 80068dc:	3710      	adds	r7, #16
 80068de:	46bd      	mov	sp, r7
 80068e0:	bd80      	pop	{r7, pc}

080068e2 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80068e2:	b580      	push	{r7, lr}
 80068e4:	b084      	sub	sp, #16
 80068e6:	af00      	add	r7, sp, #0
 80068e8:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80068f0:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d017      	beq.n	800692c <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	7c1b      	ldrb	r3, [r3, #16]
 8006900:	2b00      	cmp	r3, #0
 8006902:	d109      	bne.n	8006918 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800690a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800690e:	2101      	movs	r1, #1
 8006910:	6878      	ldr	r0, [r7, #4]
 8006912:	f001 fcc3 	bl	800829c <USBD_LL_PrepareReceive>
 8006916:	e007      	b.n	8006928 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800691e:	2340      	movs	r3, #64	; 0x40
 8006920:	2101      	movs	r1, #1
 8006922:	6878      	ldr	r0, [r7, #4]
 8006924:	f001 fcba 	bl	800829c <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8006928:	2300      	movs	r3, #0
 800692a:	e000      	b.n	800692e <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 800692c:	2302      	movs	r3, #2
  }
}
 800692e:	4618      	mov	r0, r3
 8006930:	3710      	adds	r7, #16
 8006932:	46bd      	mov	sp, r7
 8006934:	bd80      	pop	{r7, pc}

08006936 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006936:	b580      	push	{r7, lr}
 8006938:	b084      	sub	sp, #16
 800693a:	af00      	add	r7, sp, #0
 800693c:	60f8      	str	r0, [r7, #12]
 800693e:	60b9      	str	r1, [r7, #8]
 8006940:	4613      	mov	r3, r2
 8006942:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	2b00      	cmp	r3, #0
 8006948:	d101      	bne.n	800694e <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800694a:	2302      	movs	r3, #2
 800694c:	e01a      	b.n	8006984 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006954:	2b00      	cmp	r3, #0
 8006956:	d003      	beq.n	8006960 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	2200      	movs	r2, #0
 800695c:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006960:	68bb      	ldr	r3, [r7, #8]
 8006962:	2b00      	cmp	r3, #0
 8006964:	d003      	beq.n	800696e <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	68ba      	ldr	r2, [r7, #8]
 800696a:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	2201      	movs	r2, #1
 8006972:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	79fa      	ldrb	r2, [r7, #7]
 800697a:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800697c:	68f8      	ldr	r0, [r7, #12]
 800697e:	f001 fb27 	bl	8007fd0 <USBD_LL_Init>

  return USBD_OK;
 8006982:	2300      	movs	r3, #0
}
 8006984:	4618      	mov	r0, r3
 8006986:	3710      	adds	r7, #16
 8006988:	46bd      	mov	sp, r7
 800698a:	bd80      	pop	{r7, pc}

0800698c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800698c:	b480      	push	{r7}
 800698e:	b085      	sub	sp, #20
 8006990:	af00      	add	r7, sp, #0
 8006992:	6078      	str	r0, [r7, #4]
 8006994:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8006996:	2300      	movs	r3, #0
 8006998:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 800699a:	683b      	ldr	r3, [r7, #0]
 800699c:	2b00      	cmp	r3, #0
 800699e:	d006      	beq.n	80069ae <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	683a      	ldr	r2, [r7, #0]
 80069a4:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 80069a8:	2300      	movs	r3, #0
 80069aa:	73fb      	strb	r3, [r7, #15]
 80069ac:	e001      	b.n	80069b2 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 80069ae:	2302      	movs	r3, #2
 80069b0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80069b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80069b4:	4618      	mov	r0, r3
 80069b6:	3714      	adds	r7, #20
 80069b8:	46bd      	mov	sp, r7
 80069ba:	bc80      	pop	{r7}
 80069bc:	4770      	bx	lr

080069be <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 80069be:	b580      	push	{r7, lr}
 80069c0:	b082      	sub	sp, #8
 80069c2:	af00      	add	r7, sp, #0
 80069c4:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 80069c6:	6878      	ldr	r0, [r7, #4]
 80069c8:	f001 fb5c 	bl	8008084 <USBD_LL_Start>

  return USBD_OK;
 80069cc:	2300      	movs	r3, #0
}
 80069ce:	4618      	mov	r0, r3
 80069d0:	3708      	adds	r7, #8
 80069d2:	46bd      	mov	sp, r7
 80069d4:	bd80      	pop	{r7, pc}

080069d6 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80069d6:	b480      	push	{r7}
 80069d8:	b083      	sub	sp, #12
 80069da:	af00      	add	r7, sp, #0
 80069dc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80069de:	2300      	movs	r3, #0
}
 80069e0:	4618      	mov	r0, r3
 80069e2:	370c      	adds	r7, #12
 80069e4:	46bd      	mov	sp, r7
 80069e6:	bc80      	pop	{r7}
 80069e8:	4770      	bx	lr

080069ea <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80069ea:	b580      	push	{r7, lr}
 80069ec:	b084      	sub	sp, #16
 80069ee:	af00      	add	r7, sp, #0
 80069f0:	6078      	str	r0, [r7, #4]
 80069f2:	460b      	mov	r3, r1
 80069f4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80069f6:	2302      	movs	r3, #2
 80069f8:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d00c      	beq.n	8006a1e <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	78fa      	ldrb	r2, [r7, #3]
 8006a0e:	4611      	mov	r1, r2
 8006a10:	6878      	ldr	r0, [r7, #4]
 8006a12:	4798      	blx	r3
 8006a14:	4603      	mov	r3, r0
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d101      	bne.n	8006a1e <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8006a1a:	2300      	movs	r3, #0
 8006a1c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8006a1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a20:	4618      	mov	r0, r3
 8006a22:	3710      	adds	r7, #16
 8006a24:	46bd      	mov	sp, r7
 8006a26:	bd80      	pop	{r7, pc}

08006a28 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8006a28:	b580      	push	{r7, lr}
 8006a2a:	b082      	sub	sp, #8
 8006a2c:	af00      	add	r7, sp, #0
 8006a2e:	6078      	str	r0, [r7, #4]
 8006a30:	460b      	mov	r3, r1
 8006a32:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006a3a:	685b      	ldr	r3, [r3, #4]
 8006a3c:	78fa      	ldrb	r2, [r7, #3]
 8006a3e:	4611      	mov	r1, r2
 8006a40:	6878      	ldr	r0, [r7, #4]
 8006a42:	4798      	blx	r3

  return USBD_OK;
 8006a44:	2300      	movs	r3, #0
}
 8006a46:	4618      	mov	r0, r3
 8006a48:	3708      	adds	r7, #8
 8006a4a:	46bd      	mov	sp, r7
 8006a4c:	bd80      	pop	{r7, pc}

08006a4e <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006a4e:	b580      	push	{r7, lr}
 8006a50:	b082      	sub	sp, #8
 8006a52:	af00      	add	r7, sp, #0
 8006a54:	6078      	str	r0, [r7, #4]
 8006a56:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006a5e:	6839      	ldr	r1, [r7, #0]
 8006a60:	4618      	mov	r0, r3
 8006a62:	f000 fecb 	bl	80077fc <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	2201      	movs	r2, #1
 8006a6a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8006a74:	461a      	mov	r2, r3
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8006a82:	f003 031f 	and.w	r3, r3, #31
 8006a86:	2b01      	cmp	r3, #1
 8006a88:	d00c      	beq.n	8006aa4 <USBD_LL_SetupStage+0x56>
 8006a8a:	2b01      	cmp	r3, #1
 8006a8c:	d302      	bcc.n	8006a94 <USBD_LL_SetupStage+0x46>
 8006a8e:	2b02      	cmp	r3, #2
 8006a90:	d010      	beq.n	8006ab4 <USBD_LL_SetupStage+0x66>
 8006a92:	e017      	b.n	8006ac4 <USBD_LL_SetupStage+0x76>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006a9a:	4619      	mov	r1, r3
 8006a9c:	6878      	ldr	r0, [r7, #4]
 8006a9e:	f000 f9cb 	bl	8006e38 <USBD_StdDevReq>
      break;
 8006aa2:	e01a      	b.n	8006ada <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006aaa:	4619      	mov	r1, r3
 8006aac:	6878      	ldr	r0, [r7, #4]
 8006aae:	f000 fa2d 	bl	8006f0c <USBD_StdItfReq>
      break;
 8006ab2:	e012      	b.n	8006ada <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006aba:	4619      	mov	r1, r3
 8006abc:	6878      	ldr	r0, [r7, #4]
 8006abe:	f000 fa6b 	bl	8006f98 <USBD_StdEPReq>
      break;
 8006ac2:	e00a      	b.n	8006ada <USBD_LL_SetupStage+0x8c>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8006aca:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006ace:	b2db      	uxtb	r3, r3
 8006ad0:	4619      	mov	r1, r3
 8006ad2:	6878      	ldr	r0, [r7, #4]
 8006ad4:	f001 fb36 	bl	8008144 <USBD_LL_StallEP>
      break;
 8006ad8:	bf00      	nop
  }

  return USBD_OK;
 8006ada:	2300      	movs	r3, #0
}
 8006adc:	4618      	mov	r0, r3
 8006ade:	3708      	adds	r7, #8
 8006ae0:	46bd      	mov	sp, r7
 8006ae2:	bd80      	pop	{r7, pc}

08006ae4 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006ae4:	b580      	push	{r7, lr}
 8006ae6:	b086      	sub	sp, #24
 8006ae8:	af00      	add	r7, sp, #0
 8006aea:	60f8      	str	r0, [r7, #12]
 8006aec:	460b      	mov	r3, r1
 8006aee:	607a      	str	r2, [r7, #4]
 8006af0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8006af2:	7afb      	ldrb	r3, [r7, #11]
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d14b      	bne.n	8006b90 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8006afe:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006b06:	2b03      	cmp	r3, #3
 8006b08:	d134      	bne.n	8006b74 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8006b0a:	697b      	ldr	r3, [r7, #20]
 8006b0c:	68da      	ldr	r2, [r3, #12]
 8006b0e:	697b      	ldr	r3, [r7, #20]
 8006b10:	691b      	ldr	r3, [r3, #16]
 8006b12:	429a      	cmp	r2, r3
 8006b14:	d919      	bls.n	8006b4a <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8006b16:	697b      	ldr	r3, [r7, #20]
 8006b18:	68da      	ldr	r2, [r3, #12]
 8006b1a:	697b      	ldr	r3, [r7, #20]
 8006b1c:	691b      	ldr	r3, [r3, #16]
 8006b1e:	1ad2      	subs	r2, r2, r3
 8006b20:	697b      	ldr	r3, [r7, #20]
 8006b22:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006b24:	697b      	ldr	r3, [r7, #20]
 8006b26:	68da      	ldr	r2, [r3, #12]
 8006b28:	697b      	ldr	r3, [r7, #20]
 8006b2a:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8006b2c:	429a      	cmp	r2, r3
 8006b2e:	d203      	bcs.n	8006b38 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006b30:	697b      	ldr	r3, [r7, #20]
 8006b32:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8006b34:	b29b      	uxth	r3, r3
 8006b36:	e002      	b.n	8006b3e <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006b38:	697b      	ldr	r3, [r7, #20]
 8006b3a:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8006b3c:	b29b      	uxth	r3, r3
 8006b3e:	461a      	mov	r2, r3
 8006b40:	6879      	ldr	r1, [r7, #4]
 8006b42:	68f8      	ldr	r0, [r7, #12]
 8006b44:	f000 ff4c 	bl	80079e0 <USBD_CtlContinueRx>
 8006b48:	e038      	b.n	8006bbc <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006b50:	691b      	ldr	r3, [r3, #16]
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d00a      	beq.n	8006b6c <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8006b5c:	2b03      	cmp	r3, #3
 8006b5e:	d105      	bne.n	8006b6c <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006b66:	691b      	ldr	r3, [r3, #16]
 8006b68:	68f8      	ldr	r0, [r7, #12]
 8006b6a:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8006b6c:	68f8      	ldr	r0, [r7, #12]
 8006b6e:	f000 ff49 	bl	8007a04 <USBD_CtlSendStatus>
 8006b72:	e023      	b.n	8006bbc <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006b7a:	2b05      	cmp	r3, #5
 8006b7c:	d11e      	bne.n	8006bbc <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	2200      	movs	r2, #0
 8006b82:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8006b86:	2100      	movs	r1, #0
 8006b88:	68f8      	ldr	r0, [r7, #12]
 8006b8a:	f001 fadb 	bl	8008144 <USBD_LL_StallEP>
 8006b8e:	e015      	b.n	8006bbc <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006b96:	699b      	ldr	r3, [r3, #24]
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d00d      	beq.n	8006bb8 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8006ba2:	2b03      	cmp	r3, #3
 8006ba4:	d108      	bne.n	8006bb8 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006bac:	699b      	ldr	r3, [r3, #24]
 8006bae:	7afa      	ldrb	r2, [r7, #11]
 8006bb0:	4611      	mov	r1, r2
 8006bb2:	68f8      	ldr	r0, [r7, #12]
 8006bb4:	4798      	blx	r3
 8006bb6:	e001      	b.n	8006bbc <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006bb8:	2302      	movs	r3, #2
 8006bba:	e000      	b.n	8006bbe <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8006bbc:	2300      	movs	r3, #0
}
 8006bbe:	4618      	mov	r0, r3
 8006bc0:	3718      	adds	r7, #24
 8006bc2:	46bd      	mov	sp, r7
 8006bc4:	bd80      	pop	{r7, pc}

08006bc6 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006bc6:	b580      	push	{r7, lr}
 8006bc8:	b086      	sub	sp, #24
 8006bca:	af00      	add	r7, sp, #0
 8006bcc:	60f8      	str	r0, [r7, #12]
 8006bce:	460b      	mov	r3, r1
 8006bd0:	607a      	str	r2, [r7, #4]
 8006bd2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8006bd4:	7afb      	ldrb	r3, [r7, #11]
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d17f      	bne.n	8006cda <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	3314      	adds	r3, #20
 8006bde:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006be6:	2b02      	cmp	r3, #2
 8006be8:	d15c      	bne.n	8006ca4 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8006bea:	697b      	ldr	r3, [r7, #20]
 8006bec:	68da      	ldr	r2, [r3, #12]
 8006bee:	697b      	ldr	r3, [r7, #20]
 8006bf0:	691b      	ldr	r3, [r3, #16]
 8006bf2:	429a      	cmp	r2, r3
 8006bf4:	d915      	bls.n	8006c22 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8006bf6:	697b      	ldr	r3, [r7, #20]
 8006bf8:	68da      	ldr	r2, [r3, #12]
 8006bfa:	697b      	ldr	r3, [r7, #20]
 8006bfc:	691b      	ldr	r3, [r3, #16]
 8006bfe:	1ad2      	subs	r2, r2, r3
 8006c00:	697b      	ldr	r3, [r7, #20]
 8006c02:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8006c04:	697b      	ldr	r3, [r7, #20]
 8006c06:	68db      	ldr	r3, [r3, #12]
 8006c08:	b29b      	uxth	r3, r3
 8006c0a:	461a      	mov	r2, r3
 8006c0c:	6879      	ldr	r1, [r7, #4]
 8006c0e:	68f8      	ldr	r0, [r7, #12]
 8006c10:	f000 feb6 	bl	8007980 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006c14:	2300      	movs	r3, #0
 8006c16:	2200      	movs	r2, #0
 8006c18:	2100      	movs	r1, #0
 8006c1a:	68f8      	ldr	r0, [r7, #12]
 8006c1c:	f001 fb3e 	bl	800829c <USBD_LL_PrepareReceive>
 8006c20:	e04e      	b.n	8006cc0 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8006c22:	697b      	ldr	r3, [r7, #20]
 8006c24:	689b      	ldr	r3, [r3, #8]
 8006c26:	697a      	ldr	r2, [r7, #20]
 8006c28:	6912      	ldr	r2, [r2, #16]
 8006c2a:	fbb3 f1f2 	udiv	r1, r3, r2
 8006c2e:	fb02 f201 	mul.w	r2, r2, r1
 8006c32:	1a9b      	subs	r3, r3, r2
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d11c      	bne.n	8006c72 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8006c38:	697b      	ldr	r3, [r7, #20]
 8006c3a:	689a      	ldr	r2, [r3, #8]
 8006c3c:	697b      	ldr	r3, [r7, #20]
 8006c3e:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8006c40:	429a      	cmp	r2, r3
 8006c42:	d316      	bcc.n	8006c72 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8006c44:	697b      	ldr	r3, [r7, #20]
 8006c46:	689a      	ldr	r2, [r3, #8]
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006c4e:	429a      	cmp	r2, r3
 8006c50:	d20f      	bcs.n	8006c72 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006c52:	2200      	movs	r2, #0
 8006c54:	2100      	movs	r1, #0
 8006c56:	68f8      	ldr	r0, [r7, #12]
 8006c58:	f000 fe92 	bl	8007980 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	2200      	movs	r2, #0
 8006c60:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006c64:	2300      	movs	r3, #0
 8006c66:	2200      	movs	r2, #0
 8006c68:	2100      	movs	r1, #0
 8006c6a:	68f8      	ldr	r0, [r7, #12]
 8006c6c:	f001 fb16 	bl	800829c <USBD_LL_PrepareReceive>
 8006c70:	e026      	b.n	8006cc0 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006c78:	68db      	ldr	r3, [r3, #12]
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d00a      	beq.n	8006c94 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8006c84:	2b03      	cmp	r3, #3
 8006c86:	d105      	bne.n	8006c94 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006c8e:	68db      	ldr	r3, [r3, #12]
 8006c90:	68f8      	ldr	r0, [r7, #12]
 8006c92:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8006c94:	2180      	movs	r1, #128	; 0x80
 8006c96:	68f8      	ldr	r0, [r7, #12]
 8006c98:	f001 fa54 	bl	8008144 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8006c9c:	68f8      	ldr	r0, [r7, #12]
 8006c9e:	f000 fec4 	bl	8007a2a <USBD_CtlReceiveStatus>
 8006ca2:	e00d      	b.n	8006cc0 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006caa:	2b04      	cmp	r3, #4
 8006cac:	d004      	beq.n	8006cb8 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d103      	bne.n	8006cc0 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8006cb8:	2180      	movs	r1, #128	; 0x80
 8006cba:	68f8      	ldr	r0, [r7, #12]
 8006cbc:	f001 fa42 	bl	8008144 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8006cc6:	2b01      	cmp	r3, #1
 8006cc8:	d11d      	bne.n	8006d06 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8006cca:	68f8      	ldr	r0, [r7, #12]
 8006ccc:	f7ff fe83 	bl	80069d6 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	2200      	movs	r2, #0
 8006cd4:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8006cd8:	e015      	b.n	8006d06 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006ce0:	695b      	ldr	r3, [r3, #20]
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d00d      	beq.n	8006d02 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8006cec:	2b03      	cmp	r3, #3
 8006cee:	d108      	bne.n	8006d02 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006cf6:	695b      	ldr	r3, [r3, #20]
 8006cf8:	7afa      	ldrb	r2, [r7, #11]
 8006cfa:	4611      	mov	r1, r2
 8006cfc:	68f8      	ldr	r0, [r7, #12]
 8006cfe:	4798      	blx	r3
 8006d00:	e001      	b.n	8006d06 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006d02:	2302      	movs	r3, #2
 8006d04:	e000      	b.n	8006d08 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8006d06:	2300      	movs	r3, #0
}
 8006d08:	4618      	mov	r0, r3
 8006d0a:	3718      	adds	r7, #24
 8006d0c:	46bd      	mov	sp, r7
 8006d0e:	bd80      	pop	{r7, pc}

08006d10 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006d10:	b580      	push	{r7, lr}
 8006d12:	b082      	sub	sp, #8
 8006d14:	af00      	add	r7, sp, #0
 8006d16:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006d18:	2340      	movs	r3, #64	; 0x40
 8006d1a:	2200      	movs	r2, #0
 8006d1c:	2100      	movs	r1, #0
 8006d1e:	6878      	ldr	r0, [r7, #4]
 8006d20:	f001 f9cb 	bl	80080ba <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	2201      	movs	r2, #1
 8006d28:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	2240      	movs	r2, #64	; 0x40
 8006d30:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006d34:	2340      	movs	r3, #64	; 0x40
 8006d36:	2200      	movs	r2, #0
 8006d38:	2180      	movs	r1, #128	; 0x80
 8006d3a:	6878      	ldr	r0, [r7, #4]
 8006d3c:	f001 f9bd 	bl	80080ba <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	2201      	movs	r2, #1
 8006d44:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	2240      	movs	r2, #64	; 0x40
 8006d4a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	2201      	movs	r2, #1
 8006d50:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	2200      	movs	r2, #0
 8006d58:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	2200      	movs	r2, #0
 8006d60:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	2200      	movs	r2, #0
 8006d66:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d009      	beq.n	8006d88 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006d7a:	685b      	ldr	r3, [r3, #4]
 8006d7c:	687a      	ldr	r2, [r7, #4]
 8006d7e:	6852      	ldr	r2, [r2, #4]
 8006d80:	b2d2      	uxtb	r2, r2
 8006d82:	4611      	mov	r1, r2
 8006d84:	6878      	ldr	r0, [r7, #4]
 8006d86:	4798      	blx	r3
  }

  return USBD_OK;
 8006d88:	2300      	movs	r3, #0
}
 8006d8a:	4618      	mov	r0, r3
 8006d8c:	3708      	adds	r7, #8
 8006d8e:	46bd      	mov	sp, r7
 8006d90:	bd80      	pop	{r7, pc}

08006d92 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006d92:	b480      	push	{r7}
 8006d94:	b083      	sub	sp, #12
 8006d96:	af00      	add	r7, sp, #0
 8006d98:	6078      	str	r0, [r7, #4]
 8006d9a:	460b      	mov	r3, r1
 8006d9c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	78fa      	ldrb	r2, [r7, #3]
 8006da2:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006da4:	2300      	movs	r3, #0
}
 8006da6:	4618      	mov	r0, r3
 8006da8:	370c      	adds	r7, #12
 8006daa:	46bd      	mov	sp, r7
 8006dac:	bc80      	pop	{r7}
 8006dae:	4770      	bx	lr

08006db0 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006db0:	b480      	push	{r7}
 8006db2:	b083      	sub	sp, #12
 8006db4:	af00      	add	r7, sp, #0
 8006db6:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	2204      	movs	r2, #4
 8006dc8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8006dcc:	2300      	movs	r3, #0
}
 8006dce:	4618      	mov	r0, r3
 8006dd0:	370c      	adds	r7, #12
 8006dd2:	46bd      	mov	sp, r7
 8006dd4:	bc80      	pop	{r7}
 8006dd6:	4770      	bx	lr

08006dd8 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006dd8:	b480      	push	{r7}
 8006dda:	b083      	sub	sp, #12
 8006ddc:	af00      	add	r7, sp, #0
 8006dde:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006de6:	2b04      	cmp	r3, #4
 8006de8:	d105      	bne.n	8006df6 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8006df6:	2300      	movs	r3, #0
}
 8006df8:	4618      	mov	r0, r3
 8006dfa:	370c      	adds	r7, #12
 8006dfc:	46bd      	mov	sp, r7
 8006dfe:	bc80      	pop	{r7}
 8006e00:	4770      	bx	lr

08006e02 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006e02:	b580      	push	{r7, lr}
 8006e04:	b082      	sub	sp, #8
 8006e06:	af00      	add	r7, sp, #0
 8006e08:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e10:	2b03      	cmp	r3, #3
 8006e12:	d10b      	bne.n	8006e2c <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e1a:	69db      	ldr	r3, [r3, #28]
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d005      	beq.n	8006e2c <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e26:	69db      	ldr	r3, [r3, #28]
 8006e28:	6878      	ldr	r0, [r7, #4]
 8006e2a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006e2c:	2300      	movs	r3, #0
}
 8006e2e:	4618      	mov	r0, r3
 8006e30:	3708      	adds	r7, #8
 8006e32:	46bd      	mov	sp, r7
 8006e34:	bd80      	pop	{r7, pc}
	...

08006e38 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8006e38:	b580      	push	{r7, lr}
 8006e3a:	b084      	sub	sp, #16
 8006e3c:	af00      	add	r7, sp, #0
 8006e3e:	6078      	str	r0, [r7, #4]
 8006e40:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006e42:	2300      	movs	r3, #0
 8006e44:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006e46:	683b      	ldr	r3, [r7, #0]
 8006e48:	781b      	ldrb	r3, [r3, #0]
 8006e4a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006e4e:	2b20      	cmp	r3, #32
 8006e50:	d004      	beq.n	8006e5c <USBD_StdDevReq+0x24>
 8006e52:	2b40      	cmp	r3, #64	; 0x40
 8006e54:	d002      	beq.n	8006e5c <USBD_StdDevReq+0x24>
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d008      	beq.n	8006e6c <USBD_StdDevReq+0x34>
 8006e5a:	e04c      	b.n	8006ef6 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e62:	689b      	ldr	r3, [r3, #8]
 8006e64:	6839      	ldr	r1, [r7, #0]
 8006e66:	6878      	ldr	r0, [r7, #4]
 8006e68:	4798      	blx	r3
      break;
 8006e6a:	e049      	b.n	8006f00 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006e6c:	683b      	ldr	r3, [r7, #0]
 8006e6e:	785b      	ldrb	r3, [r3, #1]
 8006e70:	2b09      	cmp	r3, #9
 8006e72:	d83a      	bhi.n	8006eea <USBD_StdDevReq+0xb2>
 8006e74:	a201      	add	r2, pc, #4	; (adr r2, 8006e7c <USBD_StdDevReq+0x44>)
 8006e76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e7a:	bf00      	nop
 8006e7c:	08006ecd 	.word	0x08006ecd
 8006e80:	08006ee1 	.word	0x08006ee1
 8006e84:	08006eeb 	.word	0x08006eeb
 8006e88:	08006ed7 	.word	0x08006ed7
 8006e8c:	08006eeb 	.word	0x08006eeb
 8006e90:	08006eaf 	.word	0x08006eaf
 8006e94:	08006ea5 	.word	0x08006ea5
 8006e98:	08006eeb 	.word	0x08006eeb
 8006e9c:	08006ec3 	.word	0x08006ec3
 8006ea0:	08006eb9 	.word	0x08006eb9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006ea4:	6839      	ldr	r1, [r7, #0]
 8006ea6:	6878      	ldr	r0, [r7, #4]
 8006ea8:	f000 f9d4 	bl	8007254 <USBD_GetDescriptor>
          break;
 8006eac:	e022      	b.n	8006ef4 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8006eae:	6839      	ldr	r1, [r7, #0]
 8006eb0:	6878      	ldr	r0, [r7, #4]
 8006eb2:	f000 fb37 	bl	8007524 <USBD_SetAddress>
          break;
 8006eb6:	e01d      	b.n	8006ef4 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8006eb8:	6839      	ldr	r1, [r7, #0]
 8006eba:	6878      	ldr	r0, [r7, #4]
 8006ebc:	f000 fb74 	bl	80075a8 <USBD_SetConfig>
          break;
 8006ec0:	e018      	b.n	8006ef4 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8006ec2:	6839      	ldr	r1, [r7, #0]
 8006ec4:	6878      	ldr	r0, [r7, #4]
 8006ec6:	f000 fbfd 	bl	80076c4 <USBD_GetConfig>
          break;
 8006eca:	e013      	b.n	8006ef4 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006ecc:	6839      	ldr	r1, [r7, #0]
 8006ece:	6878      	ldr	r0, [r7, #4]
 8006ed0:	f000 fc2c 	bl	800772c <USBD_GetStatus>
          break;
 8006ed4:	e00e      	b.n	8006ef4 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8006ed6:	6839      	ldr	r1, [r7, #0]
 8006ed8:	6878      	ldr	r0, [r7, #4]
 8006eda:	f000 fc5a 	bl	8007792 <USBD_SetFeature>
          break;
 8006ede:	e009      	b.n	8006ef4 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006ee0:	6839      	ldr	r1, [r7, #0]
 8006ee2:	6878      	ldr	r0, [r7, #4]
 8006ee4:	f000 fc69 	bl	80077ba <USBD_ClrFeature>
          break;
 8006ee8:	e004      	b.n	8006ef4 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8006eea:	6839      	ldr	r1, [r7, #0]
 8006eec:	6878      	ldr	r0, [r7, #4]
 8006eee:	f000 fcc1 	bl	8007874 <USBD_CtlError>
          break;
 8006ef2:	bf00      	nop
      }
      break;
 8006ef4:	e004      	b.n	8006f00 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8006ef6:	6839      	ldr	r1, [r7, #0]
 8006ef8:	6878      	ldr	r0, [r7, #4]
 8006efa:	f000 fcbb 	bl	8007874 <USBD_CtlError>
      break;
 8006efe:	bf00      	nop
  }

  return ret;
 8006f00:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f02:	4618      	mov	r0, r3
 8006f04:	3710      	adds	r7, #16
 8006f06:	46bd      	mov	sp, r7
 8006f08:	bd80      	pop	{r7, pc}
 8006f0a:	bf00      	nop

08006f0c <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8006f0c:	b580      	push	{r7, lr}
 8006f0e:	b084      	sub	sp, #16
 8006f10:	af00      	add	r7, sp, #0
 8006f12:	6078      	str	r0, [r7, #4]
 8006f14:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006f16:	2300      	movs	r3, #0
 8006f18:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006f1a:	683b      	ldr	r3, [r7, #0]
 8006f1c:	781b      	ldrb	r3, [r3, #0]
 8006f1e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006f22:	2b20      	cmp	r3, #32
 8006f24:	d003      	beq.n	8006f2e <USBD_StdItfReq+0x22>
 8006f26:	2b40      	cmp	r3, #64	; 0x40
 8006f28:	d001      	beq.n	8006f2e <USBD_StdItfReq+0x22>
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d12a      	bne.n	8006f84 <USBD_StdItfReq+0x78>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f34:	3b01      	subs	r3, #1
 8006f36:	2b02      	cmp	r3, #2
 8006f38:	d81d      	bhi.n	8006f76 <USBD_StdItfReq+0x6a>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006f3a:	683b      	ldr	r3, [r7, #0]
 8006f3c:	889b      	ldrh	r3, [r3, #4]
 8006f3e:	b2db      	uxtb	r3, r3
 8006f40:	2b01      	cmp	r3, #1
 8006f42:	d813      	bhi.n	8006f6c <USBD_StdItfReq+0x60>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006f4a:	689b      	ldr	r3, [r3, #8]
 8006f4c:	6839      	ldr	r1, [r7, #0]
 8006f4e:	6878      	ldr	r0, [r7, #4]
 8006f50:	4798      	blx	r3
 8006f52:	4603      	mov	r3, r0
 8006f54:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006f56:	683b      	ldr	r3, [r7, #0]
 8006f58:	88db      	ldrh	r3, [r3, #6]
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d110      	bne.n	8006f80 <USBD_StdItfReq+0x74>
 8006f5e:	7bfb      	ldrb	r3, [r7, #15]
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d10d      	bne.n	8006f80 <USBD_StdItfReq+0x74>
            {
              USBD_CtlSendStatus(pdev);
 8006f64:	6878      	ldr	r0, [r7, #4]
 8006f66:	f000 fd4d 	bl	8007a04 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8006f6a:	e009      	b.n	8006f80 <USBD_StdItfReq+0x74>
            USBD_CtlError(pdev, req);
 8006f6c:	6839      	ldr	r1, [r7, #0]
 8006f6e:	6878      	ldr	r0, [r7, #4]
 8006f70:	f000 fc80 	bl	8007874 <USBD_CtlError>
          break;
 8006f74:	e004      	b.n	8006f80 <USBD_StdItfReq+0x74>

        default:
          USBD_CtlError(pdev, req);
 8006f76:	6839      	ldr	r1, [r7, #0]
 8006f78:	6878      	ldr	r0, [r7, #4]
 8006f7a:	f000 fc7b 	bl	8007874 <USBD_CtlError>
          break;
 8006f7e:	e000      	b.n	8006f82 <USBD_StdItfReq+0x76>
          break;
 8006f80:	bf00      	nop
      }
      break;
 8006f82:	e004      	b.n	8006f8e <USBD_StdItfReq+0x82>

    default:
      USBD_CtlError(pdev, req);
 8006f84:	6839      	ldr	r1, [r7, #0]
 8006f86:	6878      	ldr	r0, [r7, #4]
 8006f88:	f000 fc74 	bl	8007874 <USBD_CtlError>
      break;
 8006f8c:	bf00      	nop
  }

  return USBD_OK;
 8006f8e:	2300      	movs	r3, #0
}
 8006f90:	4618      	mov	r0, r3
 8006f92:	3710      	adds	r7, #16
 8006f94:	46bd      	mov	sp, r7
 8006f96:	bd80      	pop	{r7, pc}

08006f98 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8006f98:	b580      	push	{r7, lr}
 8006f9a:	b084      	sub	sp, #16
 8006f9c:	af00      	add	r7, sp, #0
 8006f9e:	6078      	str	r0, [r7, #4]
 8006fa0:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8006fa2:	2300      	movs	r3, #0
 8006fa4:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8006fa6:	683b      	ldr	r3, [r7, #0]
 8006fa8:	889b      	ldrh	r3, [r3, #4]
 8006faa:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006fac:	683b      	ldr	r3, [r7, #0]
 8006fae:	781b      	ldrb	r3, [r3, #0]
 8006fb0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006fb4:	2b20      	cmp	r3, #32
 8006fb6:	d004      	beq.n	8006fc2 <USBD_StdEPReq+0x2a>
 8006fb8:	2b40      	cmp	r3, #64	; 0x40
 8006fba:	d002      	beq.n	8006fc2 <USBD_StdEPReq+0x2a>
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d008      	beq.n	8006fd2 <USBD_StdEPReq+0x3a>
 8006fc0:	e13d      	b.n	800723e <USBD_StdEPReq+0x2a6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006fc8:	689b      	ldr	r3, [r3, #8]
 8006fca:	6839      	ldr	r1, [r7, #0]
 8006fcc:	6878      	ldr	r0, [r7, #4]
 8006fce:	4798      	blx	r3
      break;
 8006fd0:	e13a      	b.n	8007248 <USBD_StdEPReq+0x2b0>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8006fd2:	683b      	ldr	r3, [r7, #0]
 8006fd4:	781b      	ldrb	r3, [r3, #0]
 8006fd6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006fda:	2b20      	cmp	r3, #32
 8006fdc:	d10a      	bne.n	8006ff4 <USBD_StdEPReq+0x5c>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006fe4:	689b      	ldr	r3, [r3, #8]
 8006fe6:	6839      	ldr	r1, [r7, #0]
 8006fe8:	6878      	ldr	r0, [r7, #4]
 8006fea:	4798      	blx	r3
 8006fec:	4603      	mov	r3, r0
 8006fee:	73fb      	strb	r3, [r7, #15]

        return ret;
 8006ff0:	7bfb      	ldrb	r3, [r7, #15]
 8006ff2:	e12a      	b.n	800724a <USBD_StdEPReq+0x2b2>
      }

      switch (req->bRequest)
 8006ff4:	683b      	ldr	r3, [r7, #0]
 8006ff6:	785b      	ldrb	r3, [r3, #1]
 8006ff8:	2b01      	cmp	r3, #1
 8006ffa:	d03e      	beq.n	800707a <USBD_StdEPReq+0xe2>
 8006ffc:	2b03      	cmp	r3, #3
 8006ffe:	d002      	beq.n	8007006 <USBD_StdEPReq+0x6e>
 8007000:	2b00      	cmp	r3, #0
 8007002:	d070      	beq.n	80070e6 <USBD_StdEPReq+0x14e>
 8007004:	e115      	b.n	8007232 <USBD_StdEPReq+0x29a>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800700c:	2b02      	cmp	r3, #2
 800700e:	d002      	beq.n	8007016 <USBD_StdEPReq+0x7e>
 8007010:	2b03      	cmp	r3, #3
 8007012:	d015      	beq.n	8007040 <USBD_StdEPReq+0xa8>
 8007014:	e02b      	b.n	800706e <USBD_StdEPReq+0xd6>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007016:	7bbb      	ldrb	r3, [r7, #14]
 8007018:	2b00      	cmp	r3, #0
 800701a:	d00c      	beq.n	8007036 <USBD_StdEPReq+0x9e>
 800701c:	7bbb      	ldrb	r3, [r7, #14]
 800701e:	2b80      	cmp	r3, #128	; 0x80
 8007020:	d009      	beq.n	8007036 <USBD_StdEPReq+0x9e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8007022:	7bbb      	ldrb	r3, [r7, #14]
 8007024:	4619      	mov	r1, r3
 8007026:	6878      	ldr	r0, [r7, #4]
 8007028:	f001 f88c 	bl	8008144 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800702c:	2180      	movs	r1, #128	; 0x80
 800702e:	6878      	ldr	r0, [r7, #4]
 8007030:	f001 f888 	bl	8008144 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007034:	e020      	b.n	8007078 <USBD_StdEPReq+0xe0>
                USBD_CtlError(pdev, req);
 8007036:	6839      	ldr	r1, [r7, #0]
 8007038:	6878      	ldr	r0, [r7, #4]
 800703a:	f000 fc1b 	bl	8007874 <USBD_CtlError>
              break;
 800703e:	e01b      	b.n	8007078 <USBD_StdEPReq+0xe0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007040:	683b      	ldr	r3, [r7, #0]
 8007042:	885b      	ldrh	r3, [r3, #2]
 8007044:	2b00      	cmp	r3, #0
 8007046:	d10e      	bne.n	8007066 <USBD_StdEPReq+0xce>
              {
                if ((ep_addr != 0x00U) &&
 8007048:	7bbb      	ldrb	r3, [r7, #14]
 800704a:	2b00      	cmp	r3, #0
 800704c:	d00b      	beq.n	8007066 <USBD_StdEPReq+0xce>
 800704e:	7bbb      	ldrb	r3, [r7, #14]
 8007050:	2b80      	cmp	r3, #128	; 0x80
 8007052:	d008      	beq.n	8007066 <USBD_StdEPReq+0xce>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007054:	683b      	ldr	r3, [r7, #0]
 8007056:	88db      	ldrh	r3, [r3, #6]
 8007058:	2b00      	cmp	r3, #0
 800705a:	d104      	bne.n	8007066 <USBD_StdEPReq+0xce>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 800705c:	7bbb      	ldrb	r3, [r7, #14]
 800705e:	4619      	mov	r1, r3
 8007060:	6878      	ldr	r0, [r7, #4]
 8007062:	f001 f86f 	bl	8008144 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8007066:	6878      	ldr	r0, [r7, #4]
 8007068:	f000 fccc 	bl	8007a04 <USBD_CtlSendStatus>

              break;
 800706c:	e004      	b.n	8007078 <USBD_StdEPReq+0xe0>

            default:
              USBD_CtlError(pdev, req);
 800706e:	6839      	ldr	r1, [r7, #0]
 8007070:	6878      	ldr	r0, [r7, #4]
 8007072:	f000 fbff 	bl	8007874 <USBD_CtlError>
              break;
 8007076:	bf00      	nop
          }
          break;
 8007078:	e0e0      	b.n	800723c <USBD_StdEPReq+0x2a4>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007080:	2b02      	cmp	r3, #2
 8007082:	d002      	beq.n	800708a <USBD_StdEPReq+0xf2>
 8007084:	2b03      	cmp	r3, #3
 8007086:	d015      	beq.n	80070b4 <USBD_StdEPReq+0x11c>
 8007088:	e026      	b.n	80070d8 <USBD_StdEPReq+0x140>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800708a:	7bbb      	ldrb	r3, [r7, #14]
 800708c:	2b00      	cmp	r3, #0
 800708e:	d00c      	beq.n	80070aa <USBD_StdEPReq+0x112>
 8007090:	7bbb      	ldrb	r3, [r7, #14]
 8007092:	2b80      	cmp	r3, #128	; 0x80
 8007094:	d009      	beq.n	80070aa <USBD_StdEPReq+0x112>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8007096:	7bbb      	ldrb	r3, [r7, #14]
 8007098:	4619      	mov	r1, r3
 800709a:	6878      	ldr	r0, [r7, #4]
 800709c:	f001 f852 	bl	8008144 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80070a0:	2180      	movs	r1, #128	; 0x80
 80070a2:	6878      	ldr	r0, [r7, #4]
 80070a4:	f001 f84e 	bl	8008144 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80070a8:	e01c      	b.n	80070e4 <USBD_StdEPReq+0x14c>
                USBD_CtlError(pdev, req);
 80070aa:	6839      	ldr	r1, [r7, #0]
 80070ac:	6878      	ldr	r0, [r7, #4]
 80070ae:	f000 fbe1 	bl	8007874 <USBD_CtlError>
              break;
 80070b2:	e017      	b.n	80070e4 <USBD_StdEPReq+0x14c>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80070b4:	683b      	ldr	r3, [r7, #0]
 80070b6:	885b      	ldrh	r3, [r3, #2]
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d112      	bne.n	80070e2 <USBD_StdEPReq+0x14a>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80070bc:	7bbb      	ldrb	r3, [r7, #14]
 80070be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d004      	beq.n	80070d0 <USBD_StdEPReq+0x138>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 80070c6:	7bbb      	ldrb	r3, [r7, #14]
 80070c8:	4619      	mov	r1, r3
 80070ca:	6878      	ldr	r0, [r7, #4]
 80070cc:	f001 f859 	bl	8008182 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 80070d0:	6878      	ldr	r0, [r7, #4]
 80070d2:	f000 fc97 	bl	8007a04 <USBD_CtlSendStatus>
              }
              break;
 80070d6:	e004      	b.n	80070e2 <USBD_StdEPReq+0x14a>

            default:
              USBD_CtlError(pdev, req);
 80070d8:	6839      	ldr	r1, [r7, #0]
 80070da:	6878      	ldr	r0, [r7, #4]
 80070dc:	f000 fbca 	bl	8007874 <USBD_CtlError>
              break;
 80070e0:	e000      	b.n	80070e4 <USBD_StdEPReq+0x14c>
              break;
 80070e2:	bf00      	nop
          }
          break;
 80070e4:	e0aa      	b.n	800723c <USBD_StdEPReq+0x2a4>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80070ec:	2b02      	cmp	r3, #2
 80070ee:	d002      	beq.n	80070f6 <USBD_StdEPReq+0x15e>
 80070f0:	2b03      	cmp	r3, #3
 80070f2:	d032      	beq.n	800715a <USBD_StdEPReq+0x1c2>
 80070f4:	e097      	b.n	8007226 <USBD_StdEPReq+0x28e>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80070f6:	7bbb      	ldrb	r3, [r7, #14]
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d007      	beq.n	800710c <USBD_StdEPReq+0x174>
 80070fc:	7bbb      	ldrb	r3, [r7, #14]
 80070fe:	2b80      	cmp	r3, #128	; 0x80
 8007100:	d004      	beq.n	800710c <USBD_StdEPReq+0x174>
              {
                USBD_CtlError(pdev, req);
 8007102:	6839      	ldr	r1, [r7, #0]
 8007104:	6878      	ldr	r0, [r7, #4]
 8007106:	f000 fbb5 	bl	8007874 <USBD_CtlError>
                break;
 800710a:	e091      	b.n	8007230 <USBD_StdEPReq+0x298>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800710c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007110:	2b00      	cmp	r3, #0
 8007112:	da0b      	bge.n	800712c <USBD_StdEPReq+0x194>
 8007114:	7bbb      	ldrb	r3, [r7, #14]
 8007116:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800711a:	4613      	mov	r3, r2
 800711c:	009b      	lsls	r3, r3, #2
 800711e:	4413      	add	r3, r2
 8007120:	009b      	lsls	r3, r3, #2
 8007122:	3310      	adds	r3, #16
 8007124:	687a      	ldr	r2, [r7, #4]
 8007126:	4413      	add	r3, r2
 8007128:	3304      	adds	r3, #4
 800712a:	e00b      	b.n	8007144 <USBD_StdEPReq+0x1ac>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800712c:	7bbb      	ldrb	r3, [r7, #14]
 800712e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007132:	4613      	mov	r3, r2
 8007134:	009b      	lsls	r3, r3, #2
 8007136:	4413      	add	r3, r2
 8007138:	009b      	lsls	r3, r3, #2
 800713a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800713e:	687a      	ldr	r2, [r7, #4]
 8007140:	4413      	add	r3, r2
 8007142:	3304      	adds	r3, #4
 8007144:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007146:	68bb      	ldr	r3, [r7, #8]
 8007148:	2200      	movs	r2, #0
 800714a:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800714c:	68bb      	ldr	r3, [r7, #8]
 800714e:	2202      	movs	r2, #2
 8007150:	4619      	mov	r1, r3
 8007152:	6878      	ldr	r0, [r7, #4]
 8007154:	f000 fbf8 	bl	8007948 <USBD_CtlSendData>
              break;
 8007158:	e06a      	b.n	8007230 <USBD_StdEPReq+0x298>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800715a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800715e:	2b00      	cmp	r3, #0
 8007160:	da11      	bge.n	8007186 <USBD_StdEPReq+0x1ee>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007162:	7bbb      	ldrb	r3, [r7, #14]
 8007164:	f003 020f 	and.w	r2, r3, #15
 8007168:	6879      	ldr	r1, [r7, #4]
 800716a:	4613      	mov	r3, r2
 800716c:	009b      	lsls	r3, r3, #2
 800716e:	4413      	add	r3, r2
 8007170:	009b      	lsls	r3, r3, #2
 8007172:	440b      	add	r3, r1
 8007174:	3318      	adds	r3, #24
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	2b00      	cmp	r3, #0
 800717a:	d117      	bne.n	80071ac <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 800717c:	6839      	ldr	r1, [r7, #0]
 800717e:	6878      	ldr	r0, [r7, #4]
 8007180:	f000 fb78 	bl	8007874 <USBD_CtlError>
                  break;
 8007184:	e054      	b.n	8007230 <USBD_StdEPReq+0x298>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007186:	7bbb      	ldrb	r3, [r7, #14]
 8007188:	f003 020f 	and.w	r2, r3, #15
 800718c:	6879      	ldr	r1, [r7, #4]
 800718e:	4613      	mov	r3, r2
 8007190:	009b      	lsls	r3, r3, #2
 8007192:	4413      	add	r3, r2
 8007194:	009b      	lsls	r3, r3, #2
 8007196:	440b      	add	r3, r1
 8007198:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d104      	bne.n	80071ac <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 80071a2:	6839      	ldr	r1, [r7, #0]
 80071a4:	6878      	ldr	r0, [r7, #4]
 80071a6:	f000 fb65 	bl	8007874 <USBD_CtlError>
                  break;
 80071aa:	e041      	b.n	8007230 <USBD_StdEPReq+0x298>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80071ac:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	da0b      	bge.n	80071cc <USBD_StdEPReq+0x234>
 80071b4:	7bbb      	ldrb	r3, [r7, #14]
 80071b6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80071ba:	4613      	mov	r3, r2
 80071bc:	009b      	lsls	r3, r3, #2
 80071be:	4413      	add	r3, r2
 80071c0:	009b      	lsls	r3, r3, #2
 80071c2:	3310      	adds	r3, #16
 80071c4:	687a      	ldr	r2, [r7, #4]
 80071c6:	4413      	add	r3, r2
 80071c8:	3304      	adds	r3, #4
 80071ca:	e00b      	b.n	80071e4 <USBD_StdEPReq+0x24c>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80071cc:	7bbb      	ldrb	r3, [r7, #14]
 80071ce:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80071d2:	4613      	mov	r3, r2
 80071d4:	009b      	lsls	r3, r3, #2
 80071d6:	4413      	add	r3, r2
 80071d8:	009b      	lsls	r3, r3, #2
 80071da:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80071de:	687a      	ldr	r2, [r7, #4]
 80071e0:	4413      	add	r3, r2
 80071e2:	3304      	adds	r3, #4
 80071e4:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80071e6:	7bbb      	ldrb	r3, [r7, #14]
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d002      	beq.n	80071f2 <USBD_StdEPReq+0x25a>
 80071ec:	7bbb      	ldrb	r3, [r7, #14]
 80071ee:	2b80      	cmp	r3, #128	; 0x80
 80071f0:	d103      	bne.n	80071fa <USBD_StdEPReq+0x262>
              {
                pep->status = 0x0000U;
 80071f2:	68bb      	ldr	r3, [r7, #8]
 80071f4:	2200      	movs	r2, #0
 80071f6:	601a      	str	r2, [r3, #0]
 80071f8:	e00e      	b.n	8007218 <USBD_StdEPReq+0x280>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 80071fa:	7bbb      	ldrb	r3, [r7, #14]
 80071fc:	4619      	mov	r1, r3
 80071fe:	6878      	ldr	r0, [r7, #4]
 8007200:	f000 ffde 	bl	80081c0 <USBD_LL_IsStallEP>
 8007204:	4603      	mov	r3, r0
 8007206:	2b00      	cmp	r3, #0
 8007208:	d003      	beq.n	8007212 <USBD_StdEPReq+0x27a>
              {
                pep->status = 0x0001U;
 800720a:	68bb      	ldr	r3, [r7, #8]
 800720c:	2201      	movs	r2, #1
 800720e:	601a      	str	r2, [r3, #0]
 8007210:	e002      	b.n	8007218 <USBD_StdEPReq+0x280>
              }
              else
              {
                pep->status = 0x0000U;
 8007212:	68bb      	ldr	r3, [r7, #8]
 8007214:	2200      	movs	r2, #0
 8007216:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007218:	68bb      	ldr	r3, [r7, #8]
 800721a:	2202      	movs	r2, #2
 800721c:	4619      	mov	r1, r3
 800721e:	6878      	ldr	r0, [r7, #4]
 8007220:	f000 fb92 	bl	8007948 <USBD_CtlSendData>
              break;
 8007224:	e004      	b.n	8007230 <USBD_StdEPReq+0x298>

            default:
              USBD_CtlError(pdev, req);
 8007226:	6839      	ldr	r1, [r7, #0]
 8007228:	6878      	ldr	r0, [r7, #4]
 800722a:	f000 fb23 	bl	8007874 <USBD_CtlError>
              break;
 800722e:	bf00      	nop
          }
          break;
 8007230:	e004      	b.n	800723c <USBD_StdEPReq+0x2a4>

        default:
          USBD_CtlError(pdev, req);
 8007232:	6839      	ldr	r1, [r7, #0]
 8007234:	6878      	ldr	r0, [r7, #4]
 8007236:	f000 fb1d 	bl	8007874 <USBD_CtlError>
          break;
 800723a:	bf00      	nop
      }
      break;
 800723c:	e004      	b.n	8007248 <USBD_StdEPReq+0x2b0>

    default:
      USBD_CtlError(pdev, req);
 800723e:	6839      	ldr	r1, [r7, #0]
 8007240:	6878      	ldr	r0, [r7, #4]
 8007242:	f000 fb17 	bl	8007874 <USBD_CtlError>
      break;
 8007246:	bf00      	nop
  }

  return ret;
 8007248:	7bfb      	ldrb	r3, [r7, #15]
}
 800724a:	4618      	mov	r0, r3
 800724c:	3710      	adds	r7, #16
 800724e:	46bd      	mov	sp, r7
 8007250:	bd80      	pop	{r7, pc}
	...

08007254 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8007254:	b580      	push	{r7, lr}
 8007256:	b084      	sub	sp, #16
 8007258:	af00      	add	r7, sp, #0
 800725a:	6078      	str	r0, [r7, #4]
 800725c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800725e:	2300      	movs	r3, #0
 8007260:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007262:	2300      	movs	r3, #0
 8007264:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007266:	2300      	movs	r3, #0
 8007268:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800726a:	683b      	ldr	r3, [r7, #0]
 800726c:	885b      	ldrh	r3, [r3, #2]
 800726e:	0a1b      	lsrs	r3, r3, #8
 8007270:	b29b      	uxth	r3, r3
 8007272:	3b01      	subs	r3, #1
 8007274:	2b06      	cmp	r3, #6
 8007276:	f200 8128 	bhi.w	80074ca <USBD_GetDescriptor+0x276>
 800727a:	a201      	add	r2, pc, #4	; (adr r2, 8007280 <USBD_GetDescriptor+0x2c>)
 800727c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007280:	0800729d 	.word	0x0800729d
 8007284:	080072b5 	.word	0x080072b5
 8007288:	080072f5 	.word	0x080072f5
 800728c:	080074cb 	.word	0x080074cb
 8007290:	080074cb 	.word	0x080074cb
 8007294:	0800746b 	.word	0x0800746b
 8007298:	08007497 	.word	0x08007497
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	687a      	ldr	r2, [r7, #4]
 80072a6:	7c12      	ldrb	r2, [r2, #16]
 80072a8:	f107 0108 	add.w	r1, r7, #8
 80072ac:	4610      	mov	r0, r2
 80072ae:	4798      	blx	r3
 80072b0:	60f8      	str	r0, [r7, #12]
      break;
 80072b2:	e112      	b.n	80074da <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	7c1b      	ldrb	r3, [r3, #16]
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d10d      	bne.n	80072d8 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80072c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072c4:	f107 0208 	add.w	r2, r7, #8
 80072c8:	4610      	mov	r0, r2
 80072ca:	4798      	blx	r3
 80072cc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	3301      	adds	r3, #1
 80072d2:	2202      	movs	r2, #2
 80072d4:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80072d6:	e100      	b.n	80074da <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80072de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072e0:	f107 0208 	add.w	r2, r7, #8
 80072e4:	4610      	mov	r0, r2
 80072e6:	4798      	blx	r3
 80072e8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	3301      	adds	r3, #1
 80072ee:	2202      	movs	r2, #2
 80072f0:	701a      	strb	r2, [r3, #0]
      break;
 80072f2:	e0f2      	b.n	80074da <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80072f4:	683b      	ldr	r3, [r7, #0]
 80072f6:	885b      	ldrh	r3, [r3, #2]
 80072f8:	b2db      	uxtb	r3, r3
 80072fa:	2b05      	cmp	r3, #5
 80072fc:	f200 80ac 	bhi.w	8007458 <USBD_GetDescriptor+0x204>
 8007300:	a201      	add	r2, pc, #4	; (adr r2, 8007308 <USBD_GetDescriptor+0xb4>)
 8007302:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007306:	bf00      	nop
 8007308:	08007321 	.word	0x08007321
 800730c:	08007355 	.word	0x08007355
 8007310:	08007389 	.word	0x08007389
 8007314:	080073bd 	.word	0x080073bd
 8007318:	080073f1 	.word	0x080073f1
 800731c:	08007425 	.word	0x08007425
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007326:	685b      	ldr	r3, [r3, #4]
 8007328:	2b00      	cmp	r3, #0
 800732a:	d00b      	beq.n	8007344 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007332:	685b      	ldr	r3, [r3, #4]
 8007334:	687a      	ldr	r2, [r7, #4]
 8007336:	7c12      	ldrb	r2, [r2, #16]
 8007338:	f107 0108 	add.w	r1, r7, #8
 800733c:	4610      	mov	r0, r2
 800733e:	4798      	blx	r3
 8007340:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007342:	e091      	b.n	8007468 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007344:	6839      	ldr	r1, [r7, #0]
 8007346:	6878      	ldr	r0, [r7, #4]
 8007348:	f000 fa94 	bl	8007874 <USBD_CtlError>
            err++;
 800734c:	7afb      	ldrb	r3, [r7, #11]
 800734e:	3301      	adds	r3, #1
 8007350:	72fb      	strb	r3, [r7, #11]
          break;
 8007352:	e089      	b.n	8007468 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800735a:	689b      	ldr	r3, [r3, #8]
 800735c:	2b00      	cmp	r3, #0
 800735e:	d00b      	beq.n	8007378 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007366:	689b      	ldr	r3, [r3, #8]
 8007368:	687a      	ldr	r2, [r7, #4]
 800736a:	7c12      	ldrb	r2, [r2, #16]
 800736c:	f107 0108 	add.w	r1, r7, #8
 8007370:	4610      	mov	r0, r2
 8007372:	4798      	blx	r3
 8007374:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007376:	e077      	b.n	8007468 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007378:	6839      	ldr	r1, [r7, #0]
 800737a:	6878      	ldr	r0, [r7, #4]
 800737c:	f000 fa7a 	bl	8007874 <USBD_CtlError>
            err++;
 8007380:	7afb      	ldrb	r3, [r7, #11]
 8007382:	3301      	adds	r3, #1
 8007384:	72fb      	strb	r3, [r7, #11]
          break;
 8007386:	e06f      	b.n	8007468 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800738e:	68db      	ldr	r3, [r3, #12]
 8007390:	2b00      	cmp	r3, #0
 8007392:	d00b      	beq.n	80073ac <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800739a:	68db      	ldr	r3, [r3, #12]
 800739c:	687a      	ldr	r2, [r7, #4]
 800739e:	7c12      	ldrb	r2, [r2, #16]
 80073a0:	f107 0108 	add.w	r1, r7, #8
 80073a4:	4610      	mov	r0, r2
 80073a6:	4798      	blx	r3
 80073a8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80073aa:	e05d      	b.n	8007468 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80073ac:	6839      	ldr	r1, [r7, #0]
 80073ae:	6878      	ldr	r0, [r7, #4]
 80073b0:	f000 fa60 	bl	8007874 <USBD_CtlError>
            err++;
 80073b4:	7afb      	ldrb	r3, [r7, #11]
 80073b6:	3301      	adds	r3, #1
 80073b8:	72fb      	strb	r3, [r7, #11]
          break;
 80073ba:	e055      	b.n	8007468 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80073c2:	691b      	ldr	r3, [r3, #16]
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d00b      	beq.n	80073e0 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80073ce:	691b      	ldr	r3, [r3, #16]
 80073d0:	687a      	ldr	r2, [r7, #4]
 80073d2:	7c12      	ldrb	r2, [r2, #16]
 80073d4:	f107 0108 	add.w	r1, r7, #8
 80073d8:	4610      	mov	r0, r2
 80073da:	4798      	blx	r3
 80073dc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80073de:	e043      	b.n	8007468 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80073e0:	6839      	ldr	r1, [r7, #0]
 80073e2:	6878      	ldr	r0, [r7, #4]
 80073e4:	f000 fa46 	bl	8007874 <USBD_CtlError>
            err++;
 80073e8:	7afb      	ldrb	r3, [r7, #11]
 80073ea:	3301      	adds	r3, #1
 80073ec:	72fb      	strb	r3, [r7, #11]
          break;
 80073ee:	e03b      	b.n	8007468 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80073f6:	695b      	ldr	r3, [r3, #20]
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d00b      	beq.n	8007414 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007402:	695b      	ldr	r3, [r3, #20]
 8007404:	687a      	ldr	r2, [r7, #4]
 8007406:	7c12      	ldrb	r2, [r2, #16]
 8007408:	f107 0108 	add.w	r1, r7, #8
 800740c:	4610      	mov	r0, r2
 800740e:	4798      	blx	r3
 8007410:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007412:	e029      	b.n	8007468 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007414:	6839      	ldr	r1, [r7, #0]
 8007416:	6878      	ldr	r0, [r7, #4]
 8007418:	f000 fa2c 	bl	8007874 <USBD_CtlError>
            err++;
 800741c:	7afb      	ldrb	r3, [r7, #11]
 800741e:	3301      	adds	r3, #1
 8007420:	72fb      	strb	r3, [r7, #11]
          break;
 8007422:	e021      	b.n	8007468 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800742a:	699b      	ldr	r3, [r3, #24]
 800742c:	2b00      	cmp	r3, #0
 800742e:	d00b      	beq.n	8007448 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007436:	699b      	ldr	r3, [r3, #24]
 8007438:	687a      	ldr	r2, [r7, #4]
 800743a:	7c12      	ldrb	r2, [r2, #16]
 800743c:	f107 0108 	add.w	r1, r7, #8
 8007440:	4610      	mov	r0, r2
 8007442:	4798      	blx	r3
 8007444:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007446:	e00f      	b.n	8007468 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007448:	6839      	ldr	r1, [r7, #0]
 800744a:	6878      	ldr	r0, [r7, #4]
 800744c:	f000 fa12 	bl	8007874 <USBD_CtlError>
            err++;
 8007450:	7afb      	ldrb	r3, [r7, #11]
 8007452:	3301      	adds	r3, #1
 8007454:	72fb      	strb	r3, [r7, #11]
          break;
 8007456:	e007      	b.n	8007468 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8007458:	6839      	ldr	r1, [r7, #0]
 800745a:	6878      	ldr	r0, [r7, #4]
 800745c:	f000 fa0a 	bl	8007874 <USBD_CtlError>
          err++;
 8007460:	7afb      	ldrb	r3, [r7, #11]
 8007462:	3301      	adds	r3, #1
 8007464:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8007466:	e038      	b.n	80074da <USBD_GetDescriptor+0x286>
 8007468:	e037      	b.n	80074da <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	7c1b      	ldrb	r3, [r3, #16]
 800746e:	2b00      	cmp	r3, #0
 8007470:	d109      	bne.n	8007486 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007478:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800747a:	f107 0208 	add.w	r2, r7, #8
 800747e:	4610      	mov	r0, r2
 8007480:	4798      	blx	r3
 8007482:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007484:	e029      	b.n	80074da <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007486:	6839      	ldr	r1, [r7, #0]
 8007488:	6878      	ldr	r0, [r7, #4]
 800748a:	f000 f9f3 	bl	8007874 <USBD_CtlError>
        err++;
 800748e:	7afb      	ldrb	r3, [r7, #11]
 8007490:	3301      	adds	r3, #1
 8007492:	72fb      	strb	r3, [r7, #11]
      break;
 8007494:	e021      	b.n	80074da <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	7c1b      	ldrb	r3, [r3, #16]
 800749a:	2b00      	cmp	r3, #0
 800749c:	d10d      	bne.n	80074ba <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80074a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074a6:	f107 0208 	add.w	r2, r7, #8
 80074aa:	4610      	mov	r0, r2
 80074ac:	4798      	blx	r3
 80074ae:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	3301      	adds	r3, #1
 80074b4:	2207      	movs	r2, #7
 80074b6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80074b8:	e00f      	b.n	80074da <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80074ba:	6839      	ldr	r1, [r7, #0]
 80074bc:	6878      	ldr	r0, [r7, #4]
 80074be:	f000 f9d9 	bl	8007874 <USBD_CtlError>
        err++;
 80074c2:	7afb      	ldrb	r3, [r7, #11]
 80074c4:	3301      	adds	r3, #1
 80074c6:	72fb      	strb	r3, [r7, #11]
      break;
 80074c8:	e007      	b.n	80074da <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80074ca:	6839      	ldr	r1, [r7, #0]
 80074cc:	6878      	ldr	r0, [r7, #4]
 80074ce:	f000 f9d1 	bl	8007874 <USBD_CtlError>
      err++;
 80074d2:	7afb      	ldrb	r3, [r7, #11]
 80074d4:	3301      	adds	r3, #1
 80074d6:	72fb      	strb	r3, [r7, #11]
      break;
 80074d8:	bf00      	nop
  }

  if (err != 0U)
 80074da:	7afb      	ldrb	r3, [r7, #11]
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d11c      	bne.n	800751a <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 80074e0:	893b      	ldrh	r3, [r7, #8]
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d011      	beq.n	800750a <USBD_GetDescriptor+0x2b6>
 80074e6:	683b      	ldr	r3, [r7, #0]
 80074e8:	88db      	ldrh	r3, [r3, #6]
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d00d      	beq.n	800750a <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 80074ee:	683b      	ldr	r3, [r7, #0]
 80074f0:	88da      	ldrh	r2, [r3, #6]
 80074f2:	893b      	ldrh	r3, [r7, #8]
 80074f4:	4293      	cmp	r3, r2
 80074f6:	bf28      	it	cs
 80074f8:	4613      	movcs	r3, r2
 80074fa:	b29b      	uxth	r3, r3
 80074fc:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80074fe:	893b      	ldrh	r3, [r7, #8]
 8007500:	461a      	mov	r2, r3
 8007502:	68f9      	ldr	r1, [r7, #12]
 8007504:	6878      	ldr	r0, [r7, #4]
 8007506:	f000 fa1f 	bl	8007948 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800750a:	683b      	ldr	r3, [r7, #0]
 800750c:	88db      	ldrh	r3, [r3, #6]
 800750e:	2b00      	cmp	r3, #0
 8007510:	d104      	bne.n	800751c <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8007512:	6878      	ldr	r0, [r7, #4]
 8007514:	f000 fa76 	bl	8007a04 <USBD_CtlSendStatus>
 8007518:	e000      	b.n	800751c <USBD_GetDescriptor+0x2c8>
    return;
 800751a:	bf00      	nop
    }
  }
}
 800751c:	3710      	adds	r7, #16
 800751e:	46bd      	mov	sp, r7
 8007520:	bd80      	pop	{r7, pc}
 8007522:	bf00      	nop

08007524 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007524:	b580      	push	{r7, lr}
 8007526:	b084      	sub	sp, #16
 8007528:	af00      	add	r7, sp, #0
 800752a:	6078      	str	r0, [r7, #4]
 800752c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800752e:	683b      	ldr	r3, [r7, #0]
 8007530:	889b      	ldrh	r3, [r3, #4]
 8007532:	2b00      	cmp	r3, #0
 8007534:	d130      	bne.n	8007598 <USBD_SetAddress+0x74>
 8007536:	683b      	ldr	r3, [r7, #0]
 8007538:	88db      	ldrh	r3, [r3, #6]
 800753a:	2b00      	cmp	r3, #0
 800753c:	d12c      	bne.n	8007598 <USBD_SetAddress+0x74>
 800753e:	683b      	ldr	r3, [r7, #0]
 8007540:	885b      	ldrh	r3, [r3, #2]
 8007542:	2b7f      	cmp	r3, #127	; 0x7f
 8007544:	d828      	bhi.n	8007598 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007546:	683b      	ldr	r3, [r7, #0]
 8007548:	885b      	ldrh	r3, [r3, #2]
 800754a:	b2db      	uxtb	r3, r3
 800754c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007550:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007558:	2b03      	cmp	r3, #3
 800755a:	d104      	bne.n	8007566 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800755c:	6839      	ldr	r1, [r7, #0]
 800755e:	6878      	ldr	r0, [r7, #4]
 8007560:	f000 f988 	bl	8007874 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007564:	e01c      	b.n	80075a0 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	7bfa      	ldrb	r2, [r7, #15]
 800756a:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800756e:	7bfb      	ldrb	r3, [r7, #15]
 8007570:	4619      	mov	r1, r3
 8007572:	6878      	ldr	r0, [r7, #4]
 8007574:	f000 fe50 	bl	8008218 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8007578:	6878      	ldr	r0, [r7, #4]
 800757a:	f000 fa43 	bl	8007a04 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800757e:	7bfb      	ldrb	r3, [r7, #15]
 8007580:	2b00      	cmp	r3, #0
 8007582:	d004      	beq.n	800758e <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	2202      	movs	r2, #2
 8007588:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800758c:	e008      	b.n	80075a0 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	2201      	movs	r2, #1
 8007592:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007596:	e003      	b.n	80075a0 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007598:	6839      	ldr	r1, [r7, #0]
 800759a:	6878      	ldr	r0, [r7, #4]
 800759c:	f000 f96a 	bl	8007874 <USBD_CtlError>
  }
}
 80075a0:	bf00      	nop
 80075a2:	3710      	adds	r7, #16
 80075a4:	46bd      	mov	sp, r7
 80075a6:	bd80      	pop	{r7, pc}

080075a8 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80075a8:	b580      	push	{r7, lr}
 80075aa:	b082      	sub	sp, #8
 80075ac:	af00      	add	r7, sp, #0
 80075ae:	6078      	str	r0, [r7, #4]
 80075b0:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80075b2:	683b      	ldr	r3, [r7, #0]
 80075b4:	885b      	ldrh	r3, [r3, #2]
 80075b6:	b2da      	uxtb	r2, r3
 80075b8:	4b41      	ldr	r3, [pc, #260]	; (80076c0 <USBD_SetConfig+0x118>)
 80075ba:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80075bc:	4b40      	ldr	r3, [pc, #256]	; (80076c0 <USBD_SetConfig+0x118>)
 80075be:	781b      	ldrb	r3, [r3, #0]
 80075c0:	2b01      	cmp	r3, #1
 80075c2:	d904      	bls.n	80075ce <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 80075c4:	6839      	ldr	r1, [r7, #0]
 80075c6:	6878      	ldr	r0, [r7, #4]
 80075c8:	f000 f954 	bl	8007874 <USBD_CtlError>
 80075cc:	e075      	b.n	80076ba <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80075d4:	2b02      	cmp	r3, #2
 80075d6:	d002      	beq.n	80075de <USBD_SetConfig+0x36>
 80075d8:	2b03      	cmp	r3, #3
 80075da:	d023      	beq.n	8007624 <USBD_SetConfig+0x7c>
 80075dc:	e062      	b.n	80076a4 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 80075de:	4b38      	ldr	r3, [pc, #224]	; (80076c0 <USBD_SetConfig+0x118>)
 80075e0:	781b      	ldrb	r3, [r3, #0]
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d01a      	beq.n	800761c <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 80075e6:	4b36      	ldr	r3, [pc, #216]	; (80076c0 <USBD_SetConfig+0x118>)
 80075e8:	781b      	ldrb	r3, [r3, #0]
 80075ea:	461a      	mov	r2, r3
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	2203      	movs	r2, #3
 80075f4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80075f8:	4b31      	ldr	r3, [pc, #196]	; (80076c0 <USBD_SetConfig+0x118>)
 80075fa:	781b      	ldrb	r3, [r3, #0]
 80075fc:	4619      	mov	r1, r3
 80075fe:	6878      	ldr	r0, [r7, #4]
 8007600:	f7ff f9f3 	bl	80069ea <USBD_SetClassConfig>
 8007604:	4603      	mov	r3, r0
 8007606:	2b02      	cmp	r3, #2
 8007608:	d104      	bne.n	8007614 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800760a:	6839      	ldr	r1, [r7, #0]
 800760c:	6878      	ldr	r0, [r7, #4]
 800760e:	f000 f931 	bl	8007874 <USBD_CtlError>
            return;
 8007612:	e052      	b.n	80076ba <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8007614:	6878      	ldr	r0, [r7, #4]
 8007616:	f000 f9f5 	bl	8007a04 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800761a:	e04e      	b.n	80076ba <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800761c:	6878      	ldr	r0, [r7, #4]
 800761e:	f000 f9f1 	bl	8007a04 <USBD_CtlSendStatus>
        break;
 8007622:	e04a      	b.n	80076ba <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8007624:	4b26      	ldr	r3, [pc, #152]	; (80076c0 <USBD_SetConfig+0x118>)
 8007626:	781b      	ldrb	r3, [r3, #0]
 8007628:	2b00      	cmp	r3, #0
 800762a:	d112      	bne.n	8007652 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	2202      	movs	r2, #2
 8007630:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8007634:	4b22      	ldr	r3, [pc, #136]	; (80076c0 <USBD_SetConfig+0x118>)
 8007636:	781b      	ldrb	r3, [r3, #0]
 8007638:	461a      	mov	r2, r3
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800763e:	4b20      	ldr	r3, [pc, #128]	; (80076c0 <USBD_SetConfig+0x118>)
 8007640:	781b      	ldrb	r3, [r3, #0]
 8007642:	4619      	mov	r1, r3
 8007644:	6878      	ldr	r0, [r7, #4]
 8007646:	f7ff f9ef 	bl	8006a28 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800764a:	6878      	ldr	r0, [r7, #4]
 800764c:	f000 f9da 	bl	8007a04 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8007650:	e033      	b.n	80076ba <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8007652:	4b1b      	ldr	r3, [pc, #108]	; (80076c0 <USBD_SetConfig+0x118>)
 8007654:	781b      	ldrb	r3, [r3, #0]
 8007656:	461a      	mov	r2, r3
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	685b      	ldr	r3, [r3, #4]
 800765c:	429a      	cmp	r2, r3
 800765e:	d01d      	beq.n	800769c <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	685b      	ldr	r3, [r3, #4]
 8007664:	b2db      	uxtb	r3, r3
 8007666:	4619      	mov	r1, r3
 8007668:	6878      	ldr	r0, [r7, #4]
 800766a:	f7ff f9dd 	bl	8006a28 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800766e:	4b14      	ldr	r3, [pc, #80]	; (80076c0 <USBD_SetConfig+0x118>)
 8007670:	781b      	ldrb	r3, [r3, #0]
 8007672:	461a      	mov	r2, r3
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007678:	4b11      	ldr	r3, [pc, #68]	; (80076c0 <USBD_SetConfig+0x118>)
 800767a:	781b      	ldrb	r3, [r3, #0]
 800767c:	4619      	mov	r1, r3
 800767e:	6878      	ldr	r0, [r7, #4]
 8007680:	f7ff f9b3 	bl	80069ea <USBD_SetClassConfig>
 8007684:	4603      	mov	r3, r0
 8007686:	2b02      	cmp	r3, #2
 8007688:	d104      	bne.n	8007694 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800768a:	6839      	ldr	r1, [r7, #0]
 800768c:	6878      	ldr	r0, [r7, #4]
 800768e:	f000 f8f1 	bl	8007874 <USBD_CtlError>
            return;
 8007692:	e012      	b.n	80076ba <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007694:	6878      	ldr	r0, [r7, #4]
 8007696:	f000 f9b5 	bl	8007a04 <USBD_CtlSendStatus>
        break;
 800769a:	e00e      	b.n	80076ba <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800769c:	6878      	ldr	r0, [r7, #4]
 800769e:	f000 f9b1 	bl	8007a04 <USBD_CtlSendStatus>
        break;
 80076a2:	e00a      	b.n	80076ba <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 80076a4:	6839      	ldr	r1, [r7, #0]
 80076a6:	6878      	ldr	r0, [r7, #4]
 80076a8:	f000 f8e4 	bl	8007874 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 80076ac:	4b04      	ldr	r3, [pc, #16]	; (80076c0 <USBD_SetConfig+0x118>)
 80076ae:	781b      	ldrb	r3, [r3, #0]
 80076b0:	4619      	mov	r1, r3
 80076b2:	6878      	ldr	r0, [r7, #4]
 80076b4:	f7ff f9b8 	bl	8006a28 <USBD_ClrClassConfig>
        break;
 80076b8:	bf00      	nop
    }
  }
}
 80076ba:	3708      	adds	r7, #8
 80076bc:	46bd      	mov	sp, r7
 80076be:	bd80      	pop	{r7, pc}
 80076c0:	200001a2 	.word	0x200001a2

080076c4 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80076c4:	b580      	push	{r7, lr}
 80076c6:	b082      	sub	sp, #8
 80076c8:	af00      	add	r7, sp, #0
 80076ca:	6078      	str	r0, [r7, #4]
 80076cc:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80076ce:	683b      	ldr	r3, [r7, #0]
 80076d0:	88db      	ldrh	r3, [r3, #6]
 80076d2:	2b01      	cmp	r3, #1
 80076d4:	d004      	beq.n	80076e0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80076d6:	6839      	ldr	r1, [r7, #0]
 80076d8:	6878      	ldr	r0, [r7, #4]
 80076da:	f000 f8cb 	bl	8007874 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80076de:	e021      	b.n	8007724 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80076e6:	2b01      	cmp	r3, #1
 80076e8:	db17      	blt.n	800771a <USBD_GetConfig+0x56>
 80076ea:	2b02      	cmp	r3, #2
 80076ec:	dd02      	ble.n	80076f4 <USBD_GetConfig+0x30>
 80076ee:	2b03      	cmp	r3, #3
 80076f0:	d00b      	beq.n	800770a <USBD_GetConfig+0x46>
 80076f2:	e012      	b.n	800771a <USBD_GetConfig+0x56>
        pdev->dev_default_config = 0U;
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	2200      	movs	r2, #0
 80076f8:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	3308      	adds	r3, #8
 80076fe:	2201      	movs	r2, #1
 8007700:	4619      	mov	r1, r3
 8007702:	6878      	ldr	r0, [r7, #4]
 8007704:	f000 f920 	bl	8007948 <USBD_CtlSendData>
        break;
 8007708:	e00c      	b.n	8007724 <USBD_GetConfig+0x60>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	3304      	adds	r3, #4
 800770e:	2201      	movs	r2, #1
 8007710:	4619      	mov	r1, r3
 8007712:	6878      	ldr	r0, [r7, #4]
 8007714:	f000 f918 	bl	8007948 <USBD_CtlSendData>
        break;
 8007718:	e004      	b.n	8007724 <USBD_GetConfig+0x60>
        USBD_CtlError(pdev, req);
 800771a:	6839      	ldr	r1, [r7, #0]
 800771c:	6878      	ldr	r0, [r7, #4]
 800771e:	f000 f8a9 	bl	8007874 <USBD_CtlError>
        break;
 8007722:	bf00      	nop
}
 8007724:	bf00      	nop
 8007726:	3708      	adds	r7, #8
 8007728:	46bd      	mov	sp, r7
 800772a:	bd80      	pop	{r7, pc}

0800772c <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800772c:	b580      	push	{r7, lr}
 800772e:	b082      	sub	sp, #8
 8007730:	af00      	add	r7, sp, #0
 8007732:	6078      	str	r0, [r7, #4]
 8007734:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800773c:	3b01      	subs	r3, #1
 800773e:	2b02      	cmp	r3, #2
 8007740:	d81e      	bhi.n	8007780 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007742:	683b      	ldr	r3, [r7, #0]
 8007744:	88db      	ldrh	r3, [r3, #6]
 8007746:	2b02      	cmp	r3, #2
 8007748:	d004      	beq.n	8007754 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800774a:	6839      	ldr	r1, [r7, #0]
 800774c:	6878      	ldr	r0, [r7, #4]
 800774e:	f000 f891 	bl	8007874 <USBD_CtlError>
        break;
 8007752:	e01a      	b.n	800778a <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	2201      	movs	r2, #1
 8007758:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8007760:	2b00      	cmp	r3, #0
 8007762:	d005      	beq.n	8007770 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	68db      	ldr	r3, [r3, #12]
 8007768:	f043 0202 	orr.w	r2, r3, #2
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	330c      	adds	r3, #12
 8007774:	2202      	movs	r2, #2
 8007776:	4619      	mov	r1, r3
 8007778:	6878      	ldr	r0, [r7, #4]
 800777a:	f000 f8e5 	bl	8007948 <USBD_CtlSendData>
      break;
 800777e:	e004      	b.n	800778a <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8007780:	6839      	ldr	r1, [r7, #0]
 8007782:	6878      	ldr	r0, [r7, #4]
 8007784:	f000 f876 	bl	8007874 <USBD_CtlError>
      break;
 8007788:	bf00      	nop
  }
}
 800778a:	bf00      	nop
 800778c:	3708      	adds	r7, #8
 800778e:	46bd      	mov	sp, r7
 8007790:	bd80      	pop	{r7, pc}

08007792 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007792:	b580      	push	{r7, lr}
 8007794:	b082      	sub	sp, #8
 8007796:	af00      	add	r7, sp, #0
 8007798:	6078      	str	r0, [r7, #4]
 800779a:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800779c:	683b      	ldr	r3, [r7, #0]
 800779e:	885b      	ldrh	r3, [r3, #2]
 80077a0:	2b01      	cmp	r3, #1
 80077a2:	d106      	bne.n	80077b2 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	2201      	movs	r2, #1
 80077a8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 80077ac:	6878      	ldr	r0, [r7, #4]
 80077ae:	f000 f929 	bl	8007a04 <USBD_CtlSendStatus>
  }
}
 80077b2:	bf00      	nop
 80077b4:	3708      	adds	r7, #8
 80077b6:	46bd      	mov	sp, r7
 80077b8:	bd80      	pop	{r7, pc}

080077ba <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80077ba:	b580      	push	{r7, lr}
 80077bc:	b082      	sub	sp, #8
 80077be:	af00      	add	r7, sp, #0
 80077c0:	6078      	str	r0, [r7, #4]
 80077c2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80077ca:	3b01      	subs	r3, #1
 80077cc:	2b02      	cmp	r3, #2
 80077ce:	d80b      	bhi.n	80077e8 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80077d0:	683b      	ldr	r3, [r7, #0]
 80077d2:	885b      	ldrh	r3, [r3, #2]
 80077d4:	2b01      	cmp	r3, #1
 80077d6:	d10c      	bne.n	80077f2 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	2200      	movs	r2, #0
 80077dc:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 80077e0:	6878      	ldr	r0, [r7, #4]
 80077e2:	f000 f90f 	bl	8007a04 <USBD_CtlSendStatus>
      }
      break;
 80077e6:	e004      	b.n	80077f2 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 80077e8:	6839      	ldr	r1, [r7, #0]
 80077ea:	6878      	ldr	r0, [r7, #4]
 80077ec:	f000 f842 	bl	8007874 <USBD_CtlError>
      break;
 80077f0:	e000      	b.n	80077f4 <USBD_ClrFeature+0x3a>
      break;
 80077f2:	bf00      	nop
  }
}
 80077f4:	bf00      	nop
 80077f6:	3708      	adds	r7, #8
 80077f8:	46bd      	mov	sp, r7
 80077fa:	bd80      	pop	{r7, pc}

080077fc <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80077fc:	b480      	push	{r7}
 80077fe:	b083      	sub	sp, #12
 8007800:	af00      	add	r7, sp, #0
 8007802:	6078      	str	r0, [r7, #4]
 8007804:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8007806:	683b      	ldr	r3, [r7, #0]
 8007808:	781a      	ldrb	r2, [r3, #0]
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800780e:	683b      	ldr	r3, [r7, #0]
 8007810:	785a      	ldrb	r2, [r3, #1]
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8007816:	683b      	ldr	r3, [r7, #0]
 8007818:	3302      	adds	r3, #2
 800781a:	781b      	ldrb	r3, [r3, #0]
 800781c:	b29a      	uxth	r2, r3
 800781e:	683b      	ldr	r3, [r7, #0]
 8007820:	3303      	adds	r3, #3
 8007822:	781b      	ldrb	r3, [r3, #0]
 8007824:	b29b      	uxth	r3, r3
 8007826:	021b      	lsls	r3, r3, #8
 8007828:	b29b      	uxth	r3, r3
 800782a:	4413      	add	r3, r2
 800782c:	b29a      	uxth	r2, r3
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8007832:	683b      	ldr	r3, [r7, #0]
 8007834:	3304      	adds	r3, #4
 8007836:	781b      	ldrb	r3, [r3, #0]
 8007838:	b29a      	uxth	r2, r3
 800783a:	683b      	ldr	r3, [r7, #0]
 800783c:	3305      	adds	r3, #5
 800783e:	781b      	ldrb	r3, [r3, #0]
 8007840:	b29b      	uxth	r3, r3
 8007842:	021b      	lsls	r3, r3, #8
 8007844:	b29b      	uxth	r3, r3
 8007846:	4413      	add	r3, r2
 8007848:	b29a      	uxth	r2, r3
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800784e:	683b      	ldr	r3, [r7, #0]
 8007850:	3306      	adds	r3, #6
 8007852:	781b      	ldrb	r3, [r3, #0]
 8007854:	b29a      	uxth	r2, r3
 8007856:	683b      	ldr	r3, [r7, #0]
 8007858:	3307      	adds	r3, #7
 800785a:	781b      	ldrb	r3, [r3, #0]
 800785c:	b29b      	uxth	r3, r3
 800785e:	021b      	lsls	r3, r3, #8
 8007860:	b29b      	uxth	r3, r3
 8007862:	4413      	add	r3, r2
 8007864:	b29a      	uxth	r2, r3
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	80da      	strh	r2, [r3, #6]

}
 800786a:	bf00      	nop
 800786c:	370c      	adds	r7, #12
 800786e:	46bd      	mov	sp, r7
 8007870:	bc80      	pop	{r7}
 8007872:	4770      	bx	lr

08007874 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8007874:	b580      	push	{r7, lr}
 8007876:	b082      	sub	sp, #8
 8007878:	af00      	add	r7, sp, #0
 800787a:	6078      	str	r0, [r7, #4]
 800787c:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800787e:	2180      	movs	r1, #128	; 0x80
 8007880:	6878      	ldr	r0, [r7, #4]
 8007882:	f000 fc5f 	bl	8008144 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8007886:	2100      	movs	r1, #0
 8007888:	6878      	ldr	r0, [r7, #4]
 800788a:	f000 fc5b 	bl	8008144 <USBD_LL_StallEP>
}
 800788e:	bf00      	nop
 8007890:	3708      	adds	r7, #8
 8007892:	46bd      	mov	sp, r7
 8007894:	bd80      	pop	{r7, pc}

08007896 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007896:	b580      	push	{r7, lr}
 8007898:	b086      	sub	sp, #24
 800789a:	af00      	add	r7, sp, #0
 800789c:	60f8      	str	r0, [r7, #12]
 800789e:	60b9      	str	r1, [r7, #8]
 80078a0:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80078a2:	2300      	movs	r3, #0
 80078a4:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d032      	beq.n	8007912 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 80078ac:	68f8      	ldr	r0, [r7, #12]
 80078ae:	f000 f834 	bl	800791a <USBD_GetLen>
 80078b2:	4603      	mov	r3, r0
 80078b4:	3301      	adds	r3, #1
 80078b6:	b29b      	uxth	r3, r3
 80078b8:	005b      	lsls	r3, r3, #1
 80078ba:	b29a      	uxth	r2, r3
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 80078c0:	7dfb      	ldrb	r3, [r7, #23]
 80078c2:	1c5a      	adds	r2, r3, #1
 80078c4:	75fa      	strb	r2, [r7, #23]
 80078c6:	461a      	mov	r2, r3
 80078c8:	68bb      	ldr	r3, [r7, #8]
 80078ca:	4413      	add	r3, r2
 80078cc:	687a      	ldr	r2, [r7, #4]
 80078ce:	7812      	ldrb	r2, [r2, #0]
 80078d0:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 80078d2:	7dfb      	ldrb	r3, [r7, #23]
 80078d4:	1c5a      	adds	r2, r3, #1
 80078d6:	75fa      	strb	r2, [r7, #23]
 80078d8:	461a      	mov	r2, r3
 80078da:	68bb      	ldr	r3, [r7, #8]
 80078dc:	4413      	add	r3, r2
 80078de:	2203      	movs	r2, #3
 80078e0:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 80078e2:	e012      	b.n	800790a <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	1c5a      	adds	r2, r3, #1
 80078e8:	60fa      	str	r2, [r7, #12]
 80078ea:	7dfa      	ldrb	r2, [r7, #23]
 80078ec:	1c51      	adds	r1, r2, #1
 80078ee:	75f9      	strb	r1, [r7, #23]
 80078f0:	4611      	mov	r1, r2
 80078f2:	68ba      	ldr	r2, [r7, #8]
 80078f4:	440a      	add	r2, r1
 80078f6:	781b      	ldrb	r3, [r3, #0]
 80078f8:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 80078fa:	7dfb      	ldrb	r3, [r7, #23]
 80078fc:	1c5a      	adds	r2, r3, #1
 80078fe:	75fa      	strb	r2, [r7, #23]
 8007900:	461a      	mov	r2, r3
 8007902:	68bb      	ldr	r3, [r7, #8]
 8007904:	4413      	add	r3, r2
 8007906:	2200      	movs	r2, #0
 8007908:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	781b      	ldrb	r3, [r3, #0]
 800790e:	2b00      	cmp	r3, #0
 8007910:	d1e8      	bne.n	80078e4 <USBD_GetString+0x4e>
    }
  }
}
 8007912:	bf00      	nop
 8007914:	3718      	adds	r7, #24
 8007916:	46bd      	mov	sp, r7
 8007918:	bd80      	pop	{r7, pc}

0800791a <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800791a:	b480      	push	{r7}
 800791c:	b085      	sub	sp, #20
 800791e:	af00      	add	r7, sp, #0
 8007920:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007922:	2300      	movs	r3, #0
 8007924:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8007926:	e005      	b.n	8007934 <USBD_GetLen+0x1a>
  {
    len++;
 8007928:	7bfb      	ldrb	r3, [r7, #15]
 800792a:	3301      	adds	r3, #1
 800792c:	73fb      	strb	r3, [r7, #15]
    buf++;
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	3301      	adds	r3, #1
 8007932:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	781b      	ldrb	r3, [r3, #0]
 8007938:	2b00      	cmp	r3, #0
 800793a:	d1f5      	bne.n	8007928 <USBD_GetLen+0xe>
  }

  return len;
 800793c:	7bfb      	ldrb	r3, [r7, #15]
}
 800793e:	4618      	mov	r0, r3
 8007940:	3714      	adds	r7, #20
 8007942:	46bd      	mov	sp, r7
 8007944:	bc80      	pop	{r7}
 8007946:	4770      	bx	lr

08007948 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8007948:	b580      	push	{r7, lr}
 800794a:	b084      	sub	sp, #16
 800794c:	af00      	add	r7, sp, #0
 800794e:	60f8      	str	r0, [r7, #12]
 8007950:	60b9      	str	r1, [r7, #8]
 8007952:	4613      	mov	r3, r2
 8007954:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	2202      	movs	r2, #2
 800795a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800795e:	88fa      	ldrh	r2, [r7, #6]
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8007964:	88fa      	ldrh	r2, [r7, #6]
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800796a:	88fb      	ldrh	r3, [r7, #6]
 800796c:	68ba      	ldr	r2, [r7, #8]
 800796e:	2100      	movs	r1, #0
 8007970:	68f8      	ldr	r0, [r7, #12]
 8007972:	f000 fc70 	bl	8008256 <USBD_LL_Transmit>

  return USBD_OK;
 8007976:	2300      	movs	r3, #0
}
 8007978:	4618      	mov	r0, r3
 800797a:	3710      	adds	r7, #16
 800797c:	46bd      	mov	sp, r7
 800797e:	bd80      	pop	{r7, pc}

08007980 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8007980:	b580      	push	{r7, lr}
 8007982:	b084      	sub	sp, #16
 8007984:	af00      	add	r7, sp, #0
 8007986:	60f8      	str	r0, [r7, #12]
 8007988:	60b9      	str	r1, [r7, #8]
 800798a:	4613      	mov	r3, r2
 800798c:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800798e:	88fb      	ldrh	r3, [r7, #6]
 8007990:	68ba      	ldr	r2, [r7, #8]
 8007992:	2100      	movs	r1, #0
 8007994:	68f8      	ldr	r0, [r7, #12]
 8007996:	f000 fc5e 	bl	8008256 <USBD_LL_Transmit>

  return USBD_OK;
 800799a:	2300      	movs	r3, #0
}
 800799c:	4618      	mov	r0, r3
 800799e:	3710      	adds	r7, #16
 80079a0:	46bd      	mov	sp, r7
 80079a2:	bd80      	pop	{r7, pc}

080079a4 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 80079a4:	b580      	push	{r7, lr}
 80079a6:	b084      	sub	sp, #16
 80079a8:	af00      	add	r7, sp, #0
 80079aa:	60f8      	str	r0, [r7, #12]
 80079ac:	60b9      	str	r1, [r7, #8]
 80079ae:	4613      	mov	r3, r2
 80079b0:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	2203      	movs	r2, #3
 80079b6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80079ba:	88fa      	ldrh	r2, [r7, #6]
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 80079c2:	88fa      	ldrh	r2, [r7, #6]
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80079ca:	88fb      	ldrh	r3, [r7, #6]
 80079cc:	68ba      	ldr	r2, [r7, #8]
 80079ce:	2100      	movs	r1, #0
 80079d0:	68f8      	ldr	r0, [r7, #12]
 80079d2:	f000 fc63 	bl	800829c <USBD_LL_PrepareReceive>

  return USBD_OK;
 80079d6:	2300      	movs	r3, #0
}
 80079d8:	4618      	mov	r0, r3
 80079da:	3710      	adds	r7, #16
 80079dc:	46bd      	mov	sp, r7
 80079de:	bd80      	pop	{r7, pc}

080079e0 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 80079e0:	b580      	push	{r7, lr}
 80079e2:	b084      	sub	sp, #16
 80079e4:	af00      	add	r7, sp, #0
 80079e6:	60f8      	str	r0, [r7, #12]
 80079e8:	60b9      	str	r1, [r7, #8]
 80079ea:	4613      	mov	r3, r2
 80079ec:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80079ee:	88fb      	ldrh	r3, [r7, #6]
 80079f0:	68ba      	ldr	r2, [r7, #8]
 80079f2:	2100      	movs	r1, #0
 80079f4:	68f8      	ldr	r0, [r7, #12]
 80079f6:	f000 fc51 	bl	800829c <USBD_LL_PrepareReceive>

  return USBD_OK;
 80079fa:	2300      	movs	r3, #0
}
 80079fc:	4618      	mov	r0, r3
 80079fe:	3710      	adds	r7, #16
 8007a00:	46bd      	mov	sp, r7
 8007a02:	bd80      	pop	{r7, pc}

08007a04 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007a04:	b580      	push	{r7, lr}
 8007a06:	b082      	sub	sp, #8
 8007a08:	af00      	add	r7, sp, #0
 8007a0a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	2204      	movs	r2, #4
 8007a10:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007a14:	2300      	movs	r3, #0
 8007a16:	2200      	movs	r2, #0
 8007a18:	2100      	movs	r1, #0
 8007a1a:	6878      	ldr	r0, [r7, #4]
 8007a1c:	f000 fc1b 	bl	8008256 <USBD_LL_Transmit>

  return USBD_OK;
 8007a20:	2300      	movs	r3, #0
}
 8007a22:	4618      	mov	r0, r3
 8007a24:	3708      	adds	r7, #8
 8007a26:	46bd      	mov	sp, r7
 8007a28:	bd80      	pop	{r7, pc}

08007a2a <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007a2a:	b580      	push	{r7, lr}
 8007a2c:	b082      	sub	sp, #8
 8007a2e:	af00      	add	r7, sp, #0
 8007a30:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	2205      	movs	r2, #5
 8007a36:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007a3a:	2300      	movs	r3, #0
 8007a3c:	2200      	movs	r2, #0
 8007a3e:	2100      	movs	r1, #0
 8007a40:	6878      	ldr	r0, [r7, #4]
 8007a42:	f000 fc2b 	bl	800829c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007a46:	2300      	movs	r3, #0
}
 8007a48:	4618      	mov	r0, r3
 8007a4a:	3708      	adds	r7, #8
 8007a4c:	46bd      	mov	sp, r7
 8007a4e:	bd80      	pop	{r7, pc}

08007a50 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007a50:	b580      	push	{r7, lr}
 8007a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007a54:	2200      	movs	r2, #0
 8007a56:	4912      	ldr	r1, [pc, #72]	; (8007aa0 <MX_USB_DEVICE_Init+0x50>)
 8007a58:	4812      	ldr	r0, [pc, #72]	; (8007aa4 <MX_USB_DEVICE_Init+0x54>)
 8007a5a:	f7fe ff6c 	bl	8006936 <USBD_Init>
 8007a5e:	4603      	mov	r3, r0
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d001      	beq.n	8007a68 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007a64:	f7f8 fe7c 	bl	8000760 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8007a68:	490f      	ldr	r1, [pc, #60]	; (8007aa8 <MX_USB_DEVICE_Init+0x58>)
 8007a6a:	480e      	ldr	r0, [pc, #56]	; (8007aa4 <MX_USB_DEVICE_Init+0x54>)
 8007a6c:	f7fe ff8e 	bl	800698c <USBD_RegisterClass>
 8007a70:	4603      	mov	r3, r0
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d001      	beq.n	8007a7a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8007a76:	f7f8 fe73 	bl	8000760 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8007a7a:	490c      	ldr	r1, [pc, #48]	; (8007aac <MX_USB_DEVICE_Init+0x5c>)
 8007a7c:	4809      	ldr	r0, [pc, #36]	; (8007aa4 <MX_USB_DEVICE_Init+0x54>)
 8007a7e:	f7fe febf 	bl	8006800 <USBD_CDC_RegisterInterface>
 8007a82:	4603      	mov	r3, r0
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d001      	beq.n	8007a8c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8007a88:	f7f8 fe6a 	bl	8000760 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007a8c:	4805      	ldr	r0, [pc, #20]	; (8007aa4 <MX_USB_DEVICE_Init+0x54>)
 8007a8e:	f7fe ff96 	bl	80069be <USBD_Start>
 8007a92:	4603      	mov	r3, r0
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d001      	beq.n	8007a9c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8007a98:	f7f8 fe62 	bl	8000760 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007a9c:	bf00      	nop
 8007a9e:	bd80      	pop	{r7, pc}
 8007aa0:	20000130 	.word	0x20000130
 8007aa4:	20001484 	.word	0x20001484
 8007aa8:	2000001c 	.word	0x2000001c
 8007aac:	20000120 	.word	0x20000120

08007ab0 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8007ab0:	b580      	push	{r7, lr}
 8007ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8007ab4:	2200      	movs	r2, #0
 8007ab6:	4905      	ldr	r1, [pc, #20]	; (8007acc <CDC_Init_FS+0x1c>)
 8007ab8:	4805      	ldr	r0, [pc, #20]	; (8007ad0 <CDC_Init_FS+0x20>)
 8007aba:	f7fe feb7 	bl	800682c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8007abe:	4905      	ldr	r1, [pc, #20]	; (8007ad4 <CDC_Init_FS+0x24>)
 8007ac0:	4803      	ldr	r0, [pc, #12]	; (8007ad0 <CDC_Init_FS+0x20>)
 8007ac2:	f7fe fecc 	bl	800685e <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8007ac6:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8007ac8:	4618      	mov	r0, r3
 8007aca:	bd80      	pop	{r7, pc}
 8007acc:	20001758 	.word	0x20001758
 8007ad0:	20001484 	.word	0x20001484
 8007ad4:	20001748 	.word	0x20001748

08007ad8 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8007ad8:	b480      	push	{r7}
 8007ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8007adc:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8007ade:	4618      	mov	r0, r3
 8007ae0:	46bd      	mov	sp, r7
 8007ae2:	bc80      	pop	{r7}
 8007ae4:	4770      	bx	lr
	...

08007ae8 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8007ae8:	b480      	push	{r7}
 8007aea:	b083      	sub	sp, #12
 8007aec:	af00      	add	r7, sp, #0
 8007aee:	4603      	mov	r3, r0
 8007af0:	6039      	str	r1, [r7, #0]
 8007af2:	71fb      	strb	r3, [r7, #7]
 8007af4:	4613      	mov	r3, r2
 8007af6:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8007af8:	79fb      	ldrb	r3, [r7, #7]
 8007afa:	2b23      	cmp	r3, #35	; 0x23
 8007afc:	d84a      	bhi.n	8007b94 <CDC_Control_FS+0xac>
 8007afe:	a201      	add	r2, pc, #4	; (adr r2, 8007b04 <CDC_Control_FS+0x1c>)
 8007b00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b04:	08007b95 	.word	0x08007b95
 8007b08:	08007b95 	.word	0x08007b95
 8007b0c:	08007b95 	.word	0x08007b95
 8007b10:	08007b95 	.word	0x08007b95
 8007b14:	08007b95 	.word	0x08007b95
 8007b18:	08007b95 	.word	0x08007b95
 8007b1c:	08007b95 	.word	0x08007b95
 8007b20:	08007b95 	.word	0x08007b95
 8007b24:	08007b95 	.word	0x08007b95
 8007b28:	08007b95 	.word	0x08007b95
 8007b2c:	08007b95 	.word	0x08007b95
 8007b30:	08007b95 	.word	0x08007b95
 8007b34:	08007b95 	.word	0x08007b95
 8007b38:	08007b95 	.word	0x08007b95
 8007b3c:	08007b95 	.word	0x08007b95
 8007b40:	08007b95 	.word	0x08007b95
 8007b44:	08007b95 	.word	0x08007b95
 8007b48:	08007b95 	.word	0x08007b95
 8007b4c:	08007b95 	.word	0x08007b95
 8007b50:	08007b95 	.word	0x08007b95
 8007b54:	08007b95 	.word	0x08007b95
 8007b58:	08007b95 	.word	0x08007b95
 8007b5c:	08007b95 	.word	0x08007b95
 8007b60:	08007b95 	.word	0x08007b95
 8007b64:	08007b95 	.word	0x08007b95
 8007b68:	08007b95 	.word	0x08007b95
 8007b6c:	08007b95 	.word	0x08007b95
 8007b70:	08007b95 	.word	0x08007b95
 8007b74:	08007b95 	.word	0x08007b95
 8007b78:	08007b95 	.word	0x08007b95
 8007b7c:	08007b95 	.word	0x08007b95
 8007b80:	08007b95 	.word	0x08007b95
 8007b84:	08007b95 	.word	0x08007b95
 8007b88:	08007b95 	.word	0x08007b95
 8007b8c:	08007b95 	.word	0x08007b95
 8007b90:	08007b95 	.word	0x08007b95
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8007b94:	bf00      	nop
  }

  return (USBD_OK);
 8007b96:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8007b98:	4618      	mov	r0, r3
 8007b9a:	370c      	adds	r7, #12
 8007b9c:	46bd      	mov	sp, r7
 8007b9e:	bc80      	pop	{r7}
 8007ba0:	4770      	bx	lr
 8007ba2:	bf00      	nop

08007ba4 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8007ba4:	b580      	push	{r7, lr}
 8007ba6:	b082      	sub	sp, #8
 8007ba8:	af00      	add	r7, sp, #0
 8007baa:	6078      	str	r0, [r7, #4]
 8007bac:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8007bae:	6879      	ldr	r1, [r7, #4]
 8007bb0:	4807      	ldr	r0, [pc, #28]	; (8007bd0 <CDC_Receive_FS+0x2c>)
 8007bb2:	f7fe fe54 	bl	800685e <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8007bb6:	4806      	ldr	r0, [pc, #24]	; (8007bd0 <CDC_Receive_FS+0x2c>)
 8007bb8:	f7fe fe93 	bl	80068e2 <USBD_CDC_ReceivePacket>
  CDC_ReciveCallBack(Buf, Len);
 8007bbc:	6839      	ldr	r1, [r7, #0]
 8007bbe:	6878      	ldr	r0, [r7, #4]
 8007bc0:	f7f8 fcac 	bl	800051c <CDC_ReciveCallBack>
  return (USBD_OK);
 8007bc4:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8007bc6:	4618      	mov	r0, r3
 8007bc8:	3708      	adds	r7, #8
 8007bca:	46bd      	mov	sp, r7
 8007bcc:	bd80      	pop	{r7, pc}
 8007bce:	bf00      	nop
 8007bd0:	20001484 	.word	0x20001484

08007bd4 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8007bd4:	b580      	push	{r7, lr}
 8007bd6:	b084      	sub	sp, #16
 8007bd8:	af00      	add	r7, sp, #0
 8007bda:	6078      	str	r0, [r7, #4]
 8007bdc:	460b      	mov	r3, r1
 8007bde:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8007be0:	2300      	movs	r3, #0
 8007be2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8007be4:	4b0d      	ldr	r3, [pc, #52]	; (8007c1c <CDC_Transmit_FS+0x48>)
 8007be6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007bea:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8007bec:	68bb      	ldr	r3, [r7, #8]
 8007bee:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d001      	beq.n	8007bfa <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8007bf6:	2301      	movs	r3, #1
 8007bf8:	e00b      	b.n	8007c12 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8007bfa:	887b      	ldrh	r3, [r7, #2]
 8007bfc:	461a      	mov	r2, r3
 8007bfe:	6879      	ldr	r1, [r7, #4]
 8007c00:	4806      	ldr	r0, [pc, #24]	; (8007c1c <CDC_Transmit_FS+0x48>)
 8007c02:	f7fe fe13 	bl	800682c <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8007c06:	4805      	ldr	r0, [pc, #20]	; (8007c1c <CDC_Transmit_FS+0x48>)
 8007c08:	f7fe fe3c 	bl	8006884 <USBD_CDC_TransmitPacket>
 8007c0c:	4603      	mov	r3, r0
 8007c0e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8007c10:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c12:	4618      	mov	r0, r3
 8007c14:	3710      	adds	r7, #16
 8007c16:	46bd      	mov	sp, r7
 8007c18:	bd80      	pop	{r7, pc}
 8007c1a:	bf00      	nop
 8007c1c:	20001484 	.word	0x20001484

08007c20 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007c20:	b480      	push	{r7}
 8007c22:	b083      	sub	sp, #12
 8007c24:	af00      	add	r7, sp, #0
 8007c26:	4603      	mov	r3, r0
 8007c28:	6039      	str	r1, [r7, #0]
 8007c2a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007c2c:	683b      	ldr	r3, [r7, #0]
 8007c2e:	2212      	movs	r2, #18
 8007c30:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8007c32:	4b03      	ldr	r3, [pc, #12]	; (8007c40 <USBD_FS_DeviceDescriptor+0x20>)
}
 8007c34:	4618      	mov	r0, r3
 8007c36:	370c      	adds	r7, #12
 8007c38:	46bd      	mov	sp, r7
 8007c3a:	bc80      	pop	{r7}
 8007c3c:	4770      	bx	lr
 8007c3e:	bf00      	nop
 8007c40:	2000014c 	.word	0x2000014c

08007c44 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007c44:	b480      	push	{r7}
 8007c46:	b083      	sub	sp, #12
 8007c48:	af00      	add	r7, sp, #0
 8007c4a:	4603      	mov	r3, r0
 8007c4c:	6039      	str	r1, [r7, #0]
 8007c4e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007c50:	683b      	ldr	r3, [r7, #0]
 8007c52:	2204      	movs	r2, #4
 8007c54:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8007c56:	4b03      	ldr	r3, [pc, #12]	; (8007c64 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007c58:	4618      	mov	r0, r3
 8007c5a:	370c      	adds	r7, #12
 8007c5c:	46bd      	mov	sp, r7
 8007c5e:	bc80      	pop	{r7}
 8007c60:	4770      	bx	lr
 8007c62:	bf00      	nop
 8007c64:	20000160 	.word	0x20000160

08007c68 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007c68:	b580      	push	{r7, lr}
 8007c6a:	b082      	sub	sp, #8
 8007c6c:	af00      	add	r7, sp, #0
 8007c6e:	4603      	mov	r3, r0
 8007c70:	6039      	str	r1, [r7, #0]
 8007c72:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007c74:	79fb      	ldrb	r3, [r7, #7]
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d105      	bne.n	8007c86 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007c7a:	683a      	ldr	r2, [r7, #0]
 8007c7c:	4907      	ldr	r1, [pc, #28]	; (8007c9c <USBD_FS_ProductStrDescriptor+0x34>)
 8007c7e:	4808      	ldr	r0, [pc, #32]	; (8007ca0 <USBD_FS_ProductStrDescriptor+0x38>)
 8007c80:	f7ff fe09 	bl	8007896 <USBD_GetString>
 8007c84:	e004      	b.n	8007c90 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007c86:	683a      	ldr	r2, [r7, #0]
 8007c88:	4904      	ldr	r1, [pc, #16]	; (8007c9c <USBD_FS_ProductStrDescriptor+0x34>)
 8007c8a:	4805      	ldr	r0, [pc, #20]	; (8007ca0 <USBD_FS_ProductStrDescriptor+0x38>)
 8007c8c:	f7ff fe03 	bl	8007896 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007c90:	4b02      	ldr	r3, [pc, #8]	; (8007c9c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8007c92:	4618      	mov	r0, r3
 8007c94:	3708      	adds	r7, #8
 8007c96:	46bd      	mov	sp, r7
 8007c98:	bd80      	pop	{r7, pc}
 8007c9a:	bf00      	nop
 8007c9c:	20001768 	.word	0x20001768
 8007ca0:	08008450 	.word	0x08008450

08007ca4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007ca4:	b580      	push	{r7, lr}
 8007ca6:	b082      	sub	sp, #8
 8007ca8:	af00      	add	r7, sp, #0
 8007caa:	4603      	mov	r3, r0
 8007cac:	6039      	str	r1, [r7, #0]
 8007cae:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007cb0:	683a      	ldr	r2, [r7, #0]
 8007cb2:	4904      	ldr	r1, [pc, #16]	; (8007cc4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007cb4:	4804      	ldr	r0, [pc, #16]	; (8007cc8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8007cb6:	f7ff fdee 	bl	8007896 <USBD_GetString>
  return USBD_StrDesc;
 8007cba:	4b02      	ldr	r3, [pc, #8]	; (8007cc4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007cbc:	4618      	mov	r0, r3
 8007cbe:	3708      	adds	r7, #8
 8007cc0:	46bd      	mov	sp, r7
 8007cc2:	bd80      	pop	{r7, pc}
 8007cc4:	20001768 	.word	0x20001768
 8007cc8:	08008468 	.word	0x08008468

08007ccc <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007ccc:	b580      	push	{r7, lr}
 8007cce:	b082      	sub	sp, #8
 8007cd0:	af00      	add	r7, sp, #0
 8007cd2:	4603      	mov	r3, r0
 8007cd4:	6039      	str	r1, [r7, #0]
 8007cd6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007cd8:	683b      	ldr	r3, [r7, #0]
 8007cda:	221a      	movs	r2, #26
 8007cdc:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007cde:	f000 f843 	bl	8007d68 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8007ce2:	4b02      	ldr	r3, [pc, #8]	; (8007cec <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007ce4:	4618      	mov	r0, r3
 8007ce6:	3708      	adds	r7, #8
 8007ce8:	46bd      	mov	sp, r7
 8007cea:	bd80      	pop	{r7, pc}
 8007cec:	20000164 	.word	0x20000164

08007cf0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007cf0:	b580      	push	{r7, lr}
 8007cf2:	b082      	sub	sp, #8
 8007cf4:	af00      	add	r7, sp, #0
 8007cf6:	4603      	mov	r3, r0
 8007cf8:	6039      	str	r1, [r7, #0]
 8007cfa:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007cfc:	79fb      	ldrb	r3, [r7, #7]
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d105      	bne.n	8007d0e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007d02:	683a      	ldr	r2, [r7, #0]
 8007d04:	4907      	ldr	r1, [pc, #28]	; (8007d24 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007d06:	4808      	ldr	r0, [pc, #32]	; (8007d28 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007d08:	f7ff fdc5 	bl	8007896 <USBD_GetString>
 8007d0c:	e004      	b.n	8007d18 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007d0e:	683a      	ldr	r2, [r7, #0]
 8007d10:	4904      	ldr	r1, [pc, #16]	; (8007d24 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007d12:	4805      	ldr	r0, [pc, #20]	; (8007d28 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007d14:	f7ff fdbf 	bl	8007896 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007d18:	4b02      	ldr	r3, [pc, #8]	; (8007d24 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8007d1a:	4618      	mov	r0, r3
 8007d1c:	3708      	adds	r7, #8
 8007d1e:	46bd      	mov	sp, r7
 8007d20:	bd80      	pop	{r7, pc}
 8007d22:	bf00      	nop
 8007d24:	20001768 	.word	0x20001768
 8007d28:	0800847c 	.word	0x0800847c

08007d2c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007d2c:	b580      	push	{r7, lr}
 8007d2e:	b082      	sub	sp, #8
 8007d30:	af00      	add	r7, sp, #0
 8007d32:	4603      	mov	r3, r0
 8007d34:	6039      	str	r1, [r7, #0]
 8007d36:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007d38:	79fb      	ldrb	r3, [r7, #7]
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d105      	bne.n	8007d4a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007d3e:	683a      	ldr	r2, [r7, #0]
 8007d40:	4907      	ldr	r1, [pc, #28]	; (8007d60 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007d42:	4808      	ldr	r0, [pc, #32]	; (8007d64 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007d44:	f7ff fda7 	bl	8007896 <USBD_GetString>
 8007d48:	e004      	b.n	8007d54 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007d4a:	683a      	ldr	r2, [r7, #0]
 8007d4c:	4904      	ldr	r1, [pc, #16]	; (8007d60 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007d4e:	4805      	ldr	r0, [pc, #20]	; (8007d64 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007d50:	f7ff fda1 	bl	8007896 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007d54:	4b02      	ldr	r3, [pc, #8]	; (8007d60 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8007d56:	4618      	mov	r0, r3
 8007d58:	3708      	adds	r7, #8
 8007d5a:	46bd      	mov	sp, r7
 8007d5c:	bd80      	pop	{r7, pc}
 8007d5e:	bf00      	nop
 8007d60:	20001768 	.word	0x20001768
 8007d64:	08008488 	.word	0x08008488

08007d68 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007d68:	b580      	push	{r7, lr}
 8007d6a:	b084      	sub	sp, #16
 8007d6c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007d6e:	4b0f      	ldr	r3, [pc, #60]	; (8007dac <Get_SerialNum+0x44>)
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007d74:	4b0e      	ldr	r3, [pc, #56]	; (8007db0 <Get_SerialNum+0x48>)
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8007d7a:	4b0e      	ldr	r3, [pc, #56]	; (8007db4 <Get_SerialNum+0x4c>)
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007d80:	68fa      	ldr	r2, [r7, #12]
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	4413      	add	r3, r2
 8007d86:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d009      	beq.n	8007da2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007d8e:	2208      	movs	r2, #8
 8007d90:	4909      	ldr	r1, [pc, #36]	; (8007db8 <Get_SerialNum+0x50>)
 8007d92:	68f8      	ldr	r0, [r7, #12]
 8007d94:	f000 f814 	bl	8007dc0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007d98:	2204      	movs	r2, #4
 8007d9a:	4908      	ldr	r1, [pc, #32]	; (8007dbc <Get_SerialNum+0x54>)
 8007d9c:	68b8      	ldr	r0, [r7, #8]
 8007d9e:	f000 f80f 	bl	8007dc0 <IntToUnicode>
  }
}
 8007da2:	bf00      	nop
 8007da4:	3710      	adds	r7, #16
 8007da6:	46bd      	mov	sp, r7
 8007da8:	bd80      	pop	{r7, pc}
 8007daa:	bf00      	nop
 8007dac:	1ffff7e8 	.word	0x1ffff7e8
 8007db0:	1ffff7ec 	.word	0x1ffff7ec
 8007db4:	1ffff7f0 	.word	0x1ffff7f0
 8007db8:	20000166 	.word	0x20000166
 8007dbc:	20000176 	.word	0x20000176

08007dc0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007dc0:	b480      	push	{r7}
 8007dc2:	b087      	sub	sp, #28
 8007dc4:	af00      	add	r7, sp, #0
 8007dc6:	60f8      	str	r0, [r7, #12]
 8007dc8:	60b9      	str	r1, [r7, #8]
 8007dca:	4613      	mov	r3, r2
 8007dcc:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8007dce:	2300      	movs	r3, #0
 8007dd0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8007dd2:	2300      	movs	r3, #0
 8007dd4:	75fb      	strb	r3, [r7, #23]
 8007dd6:	e027      	b.n	8007e28 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	0f1b      	lsrs	r3, r3, #28
 8007ddc:	2b09      	cmp	r3, #9
 8007dde:	d80b      	bhi.n	8007df8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	0f1b      	lsrs	r3, r3, #28
 8007de4:	b2da      	uxtb	r2, r3
 8007de6:	7dfb      	ldrb	r3, [r7, #23]
 8007de8:	005b      	lsls	r3, r3, #1
 8007dea:	4619      	mov	r1, r3
 8007dec:	68bb      	ldr	r3, [r7, #8]
 8007dee:	440b      	add	r3, r1
 8007df0:	3230      	adds	r2, #48	; 0x30
 8007df2:	b2d2      	uxtb	r2, r2
 8007df4:	701a      	strb	r2, [r3, #0]
 8007df6:	e00a      	b.n	8007e0e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	0f1b      	lsrs	r3, r3, #28
 8007dfc:	b2da      	uxtb	r2, r3
 8007dfe:	7dfb      	ldrb	r3, [r7, #23]
 8007e00:	005b      	lsls	r3, r3, #1
 8007e02:	4619      	mov	r1, r3
 8007e04:	68bb      	ldr	r3, [r7, #8]
 8007e06:	440b      	add	r3, r1
 8007e08:	3237      	adds	r2, #55	; 0x37
 8007e0a:	b2d2      	uxtb	r2, r2
 8007e0c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	011b      	lsls	r3, r3, #4
 8007e12:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007e14:	7dfb      	ldrb	r3, [r7, #23]
 8007e16:	005b      	lsls	r3, r3, #1
 8007e18:	3301      	adds	r3, #1
 8007e1a:	68ba      	ldr	r2, [r7, #8]
 8007e1c:	4413      	add	r3, r2
 8007e1e:	2200      	movs	r2, #0
 8007e20:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8007e22:	7dfb      	ldrb	r3, [r7, #23]
 8007e24:	3301      	adds	r3, #1
 8007e26:	75fb      	strb	r3, [r7, #23]
 8007e28:	7dfa      	ldrb	r2, [r7, #23]
 8007e2a:	79fb      	ldrb	r3, [r7, #7]
 8007e2c:	429a      	cmp	r2, r3
 8007e2e:	d3d3      	bcc.n	8007dd8 <IntToUnicode+0x18>
  }
}
 8007e30:	bf00      	nop
 8007e32:	371c      	adds	r7, #28
 8007e34:	46bd      	mov	sp, r7
 8007e36:	bc80      	pop	{r7}
 8007e38:	4770      	bx	lr
	...

08007e3c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007e3c:	b580      	push	{r7, lr}
 8007e3e:	b084      	sub	sp, #16
 8007e40:	af00      	add	r7, sp, #0
 8007e42:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	4a11      	ldr	r2, [pc, #68]	; (8007e90 <HAL_PCD_MspInit+0x54>)
 8007e4a:	4293      	cmp	r3, r2
 8007e4c:	d11b      	bne.n	8007e86 <HAL_PCD_MspInit+0x4a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8007e4e:	4b11      	ldr	r3, [pc, #68]	; (8007e94 <HAL_PCD_MspInit+0x58>)
 8007e50:	69db      	ldr	r3, [r3, #28]
 8007e52:	4a10      	ldr	r2, [pc, #64]	; (8007e94 <HAL_PCD_MspInit+0x58>)
 8007e54:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007e58:	61d3      	str	r3, [r2, #28]
 8007e5a:	4b0e      	ldr	r3, [pc, #56]	; (8007e94 <HAL_PCD_MspInit+0x58>)
 8007e5c:	69db      	ldr	r3, [r3, #28]
 8007e5e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007e62:	60fb      	str	r3, [r7, #12]
 8007e64:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_HP_CAN1_TX_IRQn, 0, 0);
 8007e66:	2200      	movs	r2, #0
 8007e68:	2100      	movs	r1, #0
 8007e6a:	2013      	movs	r0, #19
 8007e6c:	f7f9 fc73 	bl	8001756 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_HP_CAN1_TX_IRQn);
 8007e70:	2013      	movs	r0, #19
 8007e72:	f7f9 fc8c 	bl	800178e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8007e76:	2200      	movs	r2, #0
 8007e78:	2100      	movs	r1, #0
 8007e7a:	2014      	movs	r0, #20
 8007e7c:	f7f9 fc6b 	bl	8001756 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8007e80:	2014      	movs	r0, #20
 8007e82:	f7f9 fc84 	bl	800178e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8007e86:	bf00      	nop
 8007e88:	3710      	adds	r7, #16
 8007e8a:	46bd      	mov	sp, r7
 8007e8c:	bd80      	pop	{r7, pc}
 8007e8e:	bf00      	nop
 8007e90:	40005c00 	.word	0x40005c00
 8007e94:	40021000 	.word	0x40021000

08007e98 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007e98:	b580      	push	{r7, lr}
 8007e9a:	b082      	sub	sp, #8
 8007e9c:	af00      	add	r7, sp, #0
 8007e9e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8007eac:	4619      	mov	r1, r3
 8007eae:	4610      	mov	r0, r2
 8007eb0:	f7fe fdcd 	bl	8006a4e <USBD_LL_SetupStage>
}
 8007eb4:	bf00      	nop
 8007eb6:	3708      	adds	r7, #8
 8007eb8:	46bd      	mov	sp, r7
 8007eba:	bd80      	pop	{r7, pc}

08007ebc <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007ebc:	b580      	push	{r7, lr}
 8007ebe:	b082      	sub	sp, #8
 8007ec0:	af00      	add	r7, sp, #0
 8007ec2:	6078      	str	r0, [r7, #4]
 8007ec4:	460b      	mov	r3, r1
 8007ec6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8007ece:	78fa      	ldrb	r2, [r7, #3]
 8007ed0:	6879      	ldr	r1, [r7, #4]
 8007ed2:	4613      	mov	r3, r2
 8007ed4:	009b      	lsls	r3, r3, #2
 8007ed6:	4413      	add	r3, r2
 8007ed8:	00db      	lsls	r3, r3, #3
 8007eda:	440b      	add	r3, r1
 8007edc:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8007ee0:	681a      	ldr	r2, [r3, #0]
 8007ee2:	78fb      	ldrb	r3, [r7, #3]
 8007ee4:	4619      	mov	r1, r3
 8007ee6:	f7fe fdfd 	bl	8006ae4 <USBD_LL_DataOutStage>
}
 8007eea:	bf00      	nop
 8007eec:	3708      	adds	r7, #8
 8007eee:	46bd      	mov	sp, r7
 8007ef0:	bd80      	pop	{r7, pc}

08007ef2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007ef2:	b580      	push	{r7, lr}
 8007ef4:	b082      	sub	sp, #8
 8007ef6:	af00      	add	r7, sp, #0
 8007ef8:	6078      	str	r0, [r7, #4]
 8007efa:	460b      	mov	r3, r1
 8007efc:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8007f04:	78fa      	ldrb	r2, [r7, #3]
 8007f06:	6879      	ldr	r1, [r7, #4]
 8007f08:	4613      	mov	r3, r2
 8007f0a:	009b      	lsls	r3, r3, #2
 8007f0c:	4413      	add	r3, r2
 8007f0e:	00db      	lsls	r3, r3, #3
 8007f10:	440b      	add	r3, r1
 8007f12:	333c      	adds	r3, #60	; 0x3c
 8007f14:	681a      	ldr	r2, [r3, #0]
 8007f16:	78fb      	ldrb	r3, [r7, #3]
 8007f18:	4619      	mov	r1, r3
 8007f1a:	f7fe fe54 	bl	8006bc6 <USBD_LL_DataInStage>
}
 8007f1e:	bf00      	nop
 8007f20:	3708      	adds	r7, #8
 8007f22:	46bd      	mov	sp, r7
 8007f24:	bd80      	pop	{r7, pc}

08007f26 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007f26:	b580      	push	{r7, lr}
 8007f28:	b082      	sub	sp, #8
 8007f2a:	af00      	add	r7, sp, #0
 8007f2c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8007f34:	4618      	mov	r0, r3
 8007f36:	f7fe ff64 	bl	8006e02 <USBD_LL_SOF>
}
 8007f3a:	bf00      	nop
 8007f3c:	3708      	adds	r7, #8
 8007f3e:	46bd      	mov	sp, r7
 8007f40:	bd80      	pop	{r7, pc}

08007f42 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007f42:	b580      	push	{r7, lr}
 8007f44:	b084      	sub	sp, #16
 8007f46:	af00      	add	r7, sp, #0
 8007f48:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007f4a:	2301      	movs	r3, #1
 8007f4c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	689b      	ldr	r3, [r3, #8]
 8007f52:	2b02      	cmp	r3, #2
 8007f54:	d001      	beq.n	8007f5a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8007f56:	f7f8 fc03 	bl	8000760 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8007f60:	7bfa      	ldrb	r2, [r7, #15]
 8007f62:	4611      	mov	r1, r2
 8007f64:	4618      	mov	r0, r3
 8007f66:	f7fe ff14 	bl	8006d92 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8007f70:	4618      	mov	r0, r3
 8007f72:	f7fe fecd 	bl	8006d10 <USBD_LL_Reset>
}
 8007f76:	bf00      	nop
 8007f78:	3710      	adds	r7, #16
 8007f7a:	46bd      	mov	sp, r7
 8007f7c:	bd80      	pop	{r7, pc}
	...

08007f80 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007f80:	b580      	push	{r7, lr}
 8007f82:	b082      	sub	sp, #8
 8007f84:	af00      	add	r7, sp, #0
 8007f86:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8007f8e:	4618      	mov	r0, r3
 8007f90:	f7fe ff0e 	bl	8006db0 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	699b      	ldr	r3, [r3, #24]
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d005      	beq.n	8007fa8 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007f9c:	4b04      	ldr	r3, [pc, #16]	; (8007fb0 <HAL_PCD_SuspendCallback+0x30>)
 8007f9e:	691b      	ldr	r3, [r3, #16]
 8007fa0:	4a03      	ldr	r2, [pc, #12]	; (8007fb0 <HAL_PCD_SuspendCallback+0x30>)
 8007fa2:	f043 0306 	orr.w	r3, r3, #6
 8007fa6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007fa8:	bf00      	nop
 8007faa:	3708      	adds	r7, #8
 8007fac:	46bd      	mov	sp, r7
 8007fae:	bd80      	pop	{r7, pc}
 8007fb0:	e000ed00 	.word	0xe000ed00

08007fb4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007fb4:	b580      	push	{r7, lr}
 8007fb6:	b082      	sub	sp, #8
 8007fb8:	af00      	add	r7, sp, #0
 8007fba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8007fc2:	4618      	mov	r0, r3
 8007fc4:	f7fe ff08 	bl	8006dd8 <USBD_LL_Resume>
}
 8007fc8:	bf00      	nop
 8007fca:	3708      	adds	r7, #8
 8007fcc:	46bd      	mov	sp, r7
 8007fce:	bd80      	pop	{r7, pc}

08007fd0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007fd0:	b580      	push	{r7, lr}
 8007fd2:	b082      	sub	sp, #8
 8007fd4:	af00      	add	r7, sp, #0
 8007fd6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8007fd8:	4a28      	ldr	r2, [pc, #160]	; (800807c <USBD_LL_Init+0xac>)
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	4a26      	ldr	r2, [pc, #152]	; (800807c <USBD_LL_Init+0xac>)
 8007fe4:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 8007fe8:	4b24      	ldr	r3, [pc, #144]	; (800807c <USBD_LL_Init+0xac>)
 8007fea:	4a25      	ldr	r2, [pc, #148]	; (8008080 <USBD_LL_Init+0xb0>)
 8007fec:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8007fee:	4b23      	ldr	r3, [pc, #140]	; (800807c <USBD_LL_Init+0xac>)
 8007ff0:	2208      	movs	r2, #8
 8007ff2:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8007ff4:	4b21      	ldr	r3, [pc, #132]	; (800807c <USBD_LL_Init+0xac>)
 8007ff6:	2202      	movs	r2, #2
 8007ff8:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8007ffa:	4b20      	ldr	r3, [pc, #128]	; (800807c <USBD_LL_Init+0xac>)
 8007ffc:	2200      	movs	r2, #0
 8007ffe:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8008000:	4b1e      	ldr	r3, [pc, #120]	; (800807c <USBD_LL_Init+0xac>)
 8008002:	2200      	movs	r2, #0
 8008004:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8008006:	4b1d      	ldr	r3, [pc, #116]	; (800807c <USBD_LL_Init+0xac>)
 8008008:	2200      	movs	r2, #0
 800800a:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800800c:	481b      	ldr	r0, [pc, #108]	; (800807c <USBD_LL_Init+0xac>)
 800800e:	f7f9 ff8b 	bl	8001f28 <HAL_PCD_Init>
 8008012:	4603      	mov	r3, r0
 8008014:	2b00      	cmp	r3, #0
 8008016:	d001      	beq.n	800801c <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8008018:	f7f8 fba2 	bl	8000760 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008022:	2318      	movs	r3, #24
 8008024:	2200      	movs	r2, #0
 8008026:	2100      	movs	r1, #0
 8008028:	f7fb fabf 	bl	80035aa <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008032:	2358      	movs	r3, #88	; 0x58
 8008034:	2200      	movs	r2, #0
 8008036:	2180      	movs	r1, #128	; 0x80
 8008038:	f7fb fab7 	bl	80035aa <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008042:	23c0      	movs	r3, #192	; 0xc0
 8008044:	2200      	movs	r2, #0
 8008046:	2181      	movs	r1, #129	; 0x81
 8008048:	f7fb faaf 	bl	80035aa <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008052:	f44f 7388 	mov.w	r3, #272	; 0x110
 8008056:	2200      	movs	r2, #0
 8008058:	2101      	movs	r1, #1
 800805a:	f7fb faa6 	bl	80035aa <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008064:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008068:	2200      	movs	r2, #0
 800806a:	2182      	movs	r1, #130	; 0x82
 800806c:	f7fb fa9d 	bl	80035aa <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8008070:	2300      	movs	r3, #0
}
 8008072:	4618      	mov	r0, r3
 8008074:	3708      	adds	r7, #8
 8008076:	46bd      	mov	sp, r7
 8008078:	bd80      	pop	{r7, pc}
 800807a:	bf00      	nop
 800807c:	20001868 	.word	0x20001868
 8008080:	40005c00 	.word	0x40005c00

08008084 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008084:	b580      	push	{r7, lr}
 8008086:	b084      	sub	sp, #16
 8008088:	af00      	add	r7, sp, #0
 800808a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800808c:	2300      	movs	r3, #0
 800808e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008090:	2300      	movs	r3, #0
 8008092:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800809a:	4618      	mov	r0, r3
 800809c:	f7fa f84f 	bl	800213e <HAL_PCD_Start>
 80080a0:	4603      	mov	r3, r0
 80080a2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80080a4:	7bfb      	ldrb	r3, [r7, #15]
 80080a6:	4618      	mov	r0, r3
 80080a8:	f000 f94e 	bl	8008348 <USBD_Get_USB_Status>
 80080ac:	4603      	mov	r3, r0
 80080ae:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80080b0:	7bbb      	ldrb	r3, [r7, #14]
}
 80080b2:	4618      	mov	r0, r3
 80080b4:	3710      	adds	r7, #16
 80080b6:	46bd      	mov	sp, r7
 80080b8:	bd80      	pop	{r7, pc}

080080ba <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80080ba:	b580      	push	{r7, lr}
 80080bc:	b084      	sub	sp, #16
 80080be:	af00      	add	r7, sp, #0
 80080c0:	6078      	str	r0, [r7, #4]
 80080c2:	4608      	mov	r0, r1
 80080c4:	4611      	mov	r1, r2
 80080c6:	461a      	mov	r2, r3
 80080c8:	4603      	mov	r3, r0
 80080ca:	70fb      	strb	r3, [r7, #3]
 80080cc:	460b      	mov	r3, r1
 80080ce:	70bb      	strb	r3, [r7, #2]
 80080d0:	4613      	mov	r3, r2
 80080d2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80080d4:	2300      	movs	r3, #0
 80080d6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80080d8:	2300      	movs	r3, #0
 80080da:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80080e2:	78bb      	ldrb	r3, [r7, #2]
 80080e4:	883a      	ldrh	r2, [r7, #0]
 80080e6:	78f9      	ldrb	r1, [r7, #3]
 80080e8:	f7fa f9c9 	bl	800247e <HAL_PCD_EP_Open>
 80080ec:	4603      	mov	r3, r0
 80080ee:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80080f0:	7bfb      	ldrb	r3, [r7, #15]
 80080f2:	4618      	mov	r0, r3
 80080f4:	f000 f928 	bl	8008348 <USBD_Get_USB_Status>
 80080f8:	4603      	mov	r3, r0
 80080fa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80080fc:	7bbb      	ldrb	r3, [r7, #14]
}
 80080fe:	4618      	mov	r0, r3
 8008100:	3710      	adds	r7, #16
 8008102:	46bd      	mov	sp, r7
 8008104:	bd80      	pop	{r7, pc}

08008106 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008106:	b580      	push	{r7, lr}
 8008108:	b084      	sub	sp, #16
 800810a:	af00      	add	r7, sp, #0
 800810c:	6078      	str	r0, [r7, #4]
 800810e:	460b      	mov	r3, r1
 8008110:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008112:	2300      	movs	r3, #0
 8008114:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008116:	2300      	movs	r3, #0
 8008118:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008120:	78fa      	ldrb	r2, [r7, #3]
 8008122:	4611      	mov	r1, r2
 8008124:	4618      	mov	r0, r3
 8008126:	f7fa fa10 	bl	800254a <HAL_PCD_EP_Close>
 800812a:	4603      	mov	r3, r0
 800812c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800812e:	7bfb      	ldrb	r3, [r7, #15]
 8008130:	4618      	mov	r0, r3
 8008132:	f000 f909 	bl	8008348 <USBD_Get_USB_Status>
 8008136:	4603      	mov	r3, r0
 8008138:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800813a:	7bbb      	ldrb	r3, [r7, #14]
}
 800813c:	4618      	mov	r0, r3
 800813e:	3710      	adds	r7, #16
 8008140:	46bd      	mov	sp, r7
 8008142:	bd80      	pop	{r7, pc}

08008144 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008144:	b580      	push	{r7, lr}
 8008146:	b084      	sub	sp, #16
 8008148:	af00      	add	r7, sp, #0
 800814a:	6078      	str	r0, [r7, #4]
 800814c:	460b      	mov	r3, r1
 800814e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008150:	2300      	movs	r3, #0
 8008152:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008154:	2300      	movs	r3, #0
 8008156:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800815e:	78fa      	ldrb	r2, [r7, #3]
 8008160:	4611      	mov	r1, r2
 8008162:	4618      	mov	r0, r3
 8008164:	f7fa fad0 	bl	8002708 <HAL_PCD_EP_SetStall>
 8008168:	4603      	mov	r3, r0
 800816a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800816c:	7bfb      	ldrb	r3, [r7, #15]
 800816e:	4618      	mov	r0, r3
 8008170:	f000 f8ea 	bl	8008348 <USBD_Get_USB_Status>
 8008174:	4603      	mov	r3, r0
 8008176:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008178:	7bbb      	ldrb	r3, [r7, #14]
}
 800817a:	4618      	mov	r0, r3
 800817c:	3710      	adds	r7, #16
 800817e:	46bd      	mov	sp, r7
 8008180:	bd80      	pop	{r7, pc}

08008182 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008182:	b580      	push	{r7, lr}
 8008184:	b084      	sub	sp, #16
 8008186:	af00      	add	r7, sp, #0
 8008188:	6078      	str	r0, [r7, #4]
 800818a:	460b      	mov	r3, r1
 800818c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800818e:	2300      	movs	r3, #0
 8008190:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008192:	2300      	movs	r3, #0
 8008194:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800819c:	78fa      	ldrb	r2, [r7, #3]
 800819e:	4611      	mov	r1, r2
 80081a0:	4618      	mov	r0, r3
 80081a2:	f7fa fb11 	bl	80027c8 <HAL_PCD_EP_ClrStall>
 80081a6:	4603      	mov	r3, r0
 80081a8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80081aa:	7bfb      	ldrb	r3, [r7, #15]
 80081ac:	4618      	mov	r0, r3
 80081ae:	f000 f8cb 	bl	8008348 <USBD_Get_USB_Status>
 80081b2:	4603      	mov	r3, r0
 80081b4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80081b6:	7bbb      	ldrb	r3, [r7, #14]
}
 80081b8:	4618      	mov	r0, r3
 80081ba:	3710      	adds	r7, #16
 80081bc:	46bd      	mov	sp, r7
 80081be:	bd80      	pop	{r7, pc}

080081c0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80081c0:	b480      	push	{r7}
 80081c2:	b085      	sub	sp, #20
 80081c4:	af00      	add	r7, sp, #0
 80081c6:	6078      	str	r0, [r7, #4]
 80081c8:	460b      	mov	r3, r1
 80081ca:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80081d2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80081d4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80081d8:	2b00      	cmp	r3, #0
 80081da:	da0c      	bge.n	80081f6 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80081dc:	78fb      	ldrb	r3, [r7, #3]
 80081de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80081e2:	68f9      	ldr	r1, [r7, #12]
 80081e4:	1c5a      	adds	r2, r3, #1
 80081e6:	4613      	mov	r3, r2
 80081e8:	009b      	lsls	r3, r3, #2
 80081ea:	4413      	add	r3, r2
 80081ec:	00db      	lsls	r3, r3, #3
 80081ee:	440b      	add	r3, r1
 80081f0:	3302      	adds	r3, #2
 80081f2:	781b      	ldrb	r3, [r3, #0]
 80081f4:	e00b      	b.n	800820e <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80081f6:	78fb      	ldrb	r3, [r7, #3]
 80081f8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80081fc:	68f9      	ldr	r1, [r7, #12]
 80081fe:	4613      	mov	r3, r2
 8008200:	009b      	lsls	r3, r3, #2
 8008202:	4413      	add	r3, r2
 8008204:	00db      	lsls	r3, r3, #3
 8008206:	440b      	add	r3, r1
 8008208:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800820c:	781b      	ldrb	r3, [r3, #0]
  }
}
 800820e:	4618      	mov	r0, r3
 8008210:	3714      	adds	r7, #20
 8008212:	46bd      	mov	sp, r7
 8008214:	bc80      	pop	{r7}
 8008216:	4770      	bx	lr

08008218 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008218:	b580      	push	{r7, lr}
 800821a:	b084      	sub	sp, #16
 800821c:	af00      	add	r7, sp, #0
 800821e:	6078      	str	r0, [r7, #4]
 8008220:	460b      	mov	r3, r1
 8008222:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008224:	2300      	movs	r3, #0
 8008226:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008228:	2300      	movs	r3, #0
 800822a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008232:	78fa      	ldrb	r2, [r7, #3]
 8008234:	4611      	mov	r1, r2
 8008236:	4618      	mov	r0, r3
 8008238:	f7fa f8fc 	bl	8002434 <HAL_PCD_SetAddress>
 800823c:	4603      	mov	r3, r0
 800823e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008240:	7bfb      	ldrb	r3, [r7, #15]
 8008242:	4618      	mov	r0, r3
 8008244:	f000 f880 	bl	8008348 <USBD_Get_USB_Status>
 8008248:	4603      	mov	r3, r0
 800824a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800824c:	7bbb      	ldrb	r3, [r7, #14]
}
 800824e:	4618      	mov	r0, r3
 8008250:	3710      	adds	r7, #16
 8008252:	46bd      	mov	sp, r7
 8008254:	bd80      	pop	{r7, pc}

08008256 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8008256:	b580      	push	{r7, lr}
 8008258:	b086      	sub	sp, #24
 800825a:	af00      	add	r7, sp, #0
 800825c:	60f8      	str	r0, [r7, #12]
 800825e:	607a      	str	r2, [r7, #4]
 8008260:	461a      	mov	r2, r3
 8008262:	460b      	mov	r3, r1
 8008264:	72fb      	strb	r3, [r7, #11]
 8008266:	4613      	mov	r3, r2
 8008268:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800826a:	2300      	movs	r3, #0
 800826c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800826e:	2300      	movs	r3, #0
 8008270:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008278:	893b      	ldrh	r3, [r7, #8]
 800827a:	7af9      	ldrb	r1, [r7, #11]
 800827c:	687a      	ldr	r2, [r7, #4]
 800827e:	f7fa fa00 	bl	8002682 <HAL_PCD_EP_Transmit>
 8008282:	4603      	mov	r3, r0
 8008284:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008286:	7dfb      	ldrb	r3, [r7, #23]
 8008288:	4618      	mov	r0, r3
 800828a:	f000 f85d 	bl	8008348 <USBD_Get_USB_Status>
 800828e:	4603      	mov	r3, r0
 8008290:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008292:	7dbb      	ldrb	r3, [r7, #22]
}
 8008294:	4618      	mov	r0, r3
 8008296:	3718      	adds	r7, #24
 8008298:	46bd      	mov	sp, r7
 800829a:	bd80      	pop	{r7, pc}

0800829c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800829c:	b580      	push	{r7, lr}
 800829e:	b086      	sub	sp, #24
 80082a0:	af00      	add	r7, sp, #0
 80082a2:	60f8      	str	r0, [r7, #12]
 80082a4:	607a      	str	r2, [r7, #4]
 80082a6:	461a      	mov	r2, r3
 80082a8:	460b      	mov	r3, r1
 80082aa:	72fb      	strb	r3, [r7, #11]
 80082ac:	4613      	mov	r3, r2
 80082ae:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80082b0:	2300      	movs	r3, #0
 80082b2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80082b4:	2300      	movs	r3, #0
 80082b6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80082be:	893b      	ldrh	r3, [r7, #8]
 80082c0:	7af9      	ldrb	r1, [r7, #11]
 80082c2:	687a      	ldr	r2, [r7, #4]
 80082c4:	f7fa f989 	bl	80025da <HAL_PCD_EP_Receive>
 80082c8:	4603      	mov	r3, r0
 80082ca:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80082cc:	7dfb      	ldrb	r3, [r7, #23]
 80082ce:	4618      	mov	r0, r3
 80082d0:	f000 f83a 	bl	8008348 <USBD_Get_USB_Status>
 80082d4:	4603      	mov	r3, r0
 80082d6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80082d8:	7dbb      	ldrb	r3, [r7, #22]
}
 80082da:	4618      	mov	r0, r3
 80082dc:	3718      	adds	r7, #24
 80082de:	46bd      	mov	sp, r7
 80082e0:	bd80      	pop	{r7, pc}

080082e2 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80082e2:	b580      	push	{r7, lr}
 80082e4:	b082      	sub	sp, #8
 80082e6:	af00      	add	r7, sp, #0
 80082e8:	6078      	str	r0, [r7, #4]
 80082ea:	460b      	mov	r3, r1
 80082ec:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80082f4:	78fa      	ldrb	r2, [r7, #3]
 80082f6:	4611      	mov	r1, r2
 80082f8:	4618      	mov	r0, r3
 80082fa:	f7fa f9ab 	bl	8002654 <HAL_PCD_EP_GetRxCount>
 80082fe:	4603      	mov	r3, r0
}
 8008300:	4618      	mov	r0, r3
 8008302:	3708      	adds	r7, #8
 8008304:	46bd      	mov	sp, r7
 8008306:	bd80      	pop	{r7, pc}

08008308 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008308:	b480      	push	{r7}
 800830a:	b083      	sub	sp, #12
 800830c:	af00      	add	r7, sp, #0
 800830e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008310:	4b02      	ldr	r3, [pc, #8]	; (800831c <USBD_static_malloc+0x14>)
}
 8008312:	4618      	mov	r0, r3
 8008314:	370c      	adds	r7, #12
 8008316:	46bd      	mov	sp, r7
 8008318:	bc80      	pop	{r7}
 800831a:	4770      	bx	lr
 800831c:	200001a4 	.word	0x200001a4

08008320 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008320:	b480      	push	{r7}
 8008322:	b083      	sub	sp, #12
 8008324:	af00      	add	r7, sp, #0
 8008326:	6078      	str	r0, [r7, #4]

}
 8008328:	bf00      	nop
 800832a:	370c      	adds	r7, #12
 800832c:	46bd      	mov	sp, r7
 800832e:	bc80      	pop	{r7}
 8008330:	4770      	bx	lr

08008332 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008332:	b480      	push	{r7}
 8008334:	b083      	sub	sp, #12
 8008336:	af00      	add	r7, sp, #0
 8008338:	6078      	str	r0, [r7, #4]
 800833a:	460b      	mov	r3, r1
 800833c:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800833e:	bf00      	nop
 8008340:	370c      	adds	r7, #12
 8008342:	46bd      	mov	sp, r7
 8008344:	bc80      	pop	{r7}
 8008346:	4770      	bx	lr

08008348 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008348:	b480      	push	{r7}
 800834a:	b085      	sub	sp, #20
 800834c:	af00      	add	r7, sp, #0
 800834e:	4603      	mov	r3, r0
 8008350:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008352:	2300      	movs	r3, #0
 8008354:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008356:	79fb      	ldrb	r3, [r7, #7]
 8008358:	2b03      	cmp	r3, #3
 800835a:	d817      	bhi.n	800838c <USBD_Get_USB_Status+0x44>
 800835c:	a201      	add	r2, pc, #4	; (adr r2, 8008364 <USBD_Get_USB_Status+0x1c>)
 800835e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008362:	bf00      	nop
 8008364:	08008375 	.word	0x08008375
 8008368:	0800837b 	.word	0x0800837b
 800836c:	08008381 	.word	0x08008381
 8008370:	08008387 	.word	0x08008387
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008374:	2300      	movs	r3, #0
 8008376:	73fb      	strb	r3, [r7, #15]
    break;
 8008378:	e00b      	b.n	8008392 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800837a:	2302      	movs	r3, #2
 800837c:	73fb      	strb	r3, [r7, #15]
    break;
 800837e:	e008      	b.n	8008392 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008380:	2301      	movs	r3, #1
 8008382:	73fb      	strb	r3, [r7, #15]
    break;
 8008384:	e005      	b.n	8008392 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008386:	2302      	movs	r3, #2
 8008388:	73fb      	strb	r3, [r7, #15]
    break;
 800838a:	e002      	b.n	8008392 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800838c:	2302      	movs	r3, #2
 800838e:	73fb      	strb	r3, [r7, #15]
    break;
 8008390:	bf00      	nop
  }
  return usb_status;
 8008392:	7bfb      	ldrb	r3, [r7, #15]
}
 8008394:	4618      	mov	r0, r3
 8008396:	3714      	adds	r7, #20
 8008398:	46bd      	mov	sp, r7
 800839a:	bc80      	pop	{r7}
 800839c:	4770      	bx	lr
 800839e:	bf00      	nop

080083a0 <__libc_init_array>:
 80083a0:	b570      	push	{r4, r5, r6, lr}
 80083a2:	2500      	movs	r5, #0
 80083a4:	4e0c      	ldr	r6, [pc, #48]	; (80083d8 <__libc_init_array+0x38>)
 80083a6:	4c0d      	ldr	r4, [pc, #52]	; (80083dc <__libc_init_array+0x3c>)
 80083a8:	1ba4      	subs	r4, r4, r6
 80083aa:	10a4      	asrs	r4, r4, #2
 80083ac:	42a5      	cmp	r5, r4
 80083ae:	d109      	bne.n	80083c4 <__libc_init_array+0x24>
 80083b0:	f000 f82e 	bl	8008410 <_init>
 80083b4:	2500      	movs	r5, #0
 80083b6:	4e0a      	ldr	r6, [pc, #40]	; (80083e0 <__libc_init_array+0x40>)
 80083b8:	4c0a      	ldr	r4, [pc, #40]	; (80083e4 <__libc_init_array+0x44>)
 80083ba:	1ba4      	subs	r4, r4, r6
 80083bc:	10a4      	asrs	r4, r4, #2
 80083be:	42a5      	cmp	r5, r4
 80083c0:	d105      	bne.n	80083ce <__libc_init_array+0x2e>
 80083c2:	bd70      	pop	{r4, r5, r6, pc}
 80083c4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80083c8:	4798      	blx	r3
 80083ca:	3501      	adds	r5, #1
 80083cc:	e7ee      	b.n	80083ac <__libc_init_array+0xc>
 80083ce:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80083d2:	4798      	blx	r3
 80083d4:	3501      	adds	r5, #1
 80083d6:	e7f2      	b.n	80083be <__libc_init_array+0x1e>
 80083d8:	080084b0 	.word	0x080084b0
 80083dc:	080084b0 	.word	0x080084b0
 80083e0:	080084b0 	.word	0x080084b0
 80083e4:	080084b4 	.word	0x080084b4

080083e8 <memcpy>:
 80083e8:	b510      	push	{r4, lr}
 80083ea:	1e43      	subs	r3, r0, #1
 80083ec:	440a      	add	r2, r1
 80083ee:	4291      	cmp	r1, r2
 80083f0:	d100      	bne.n	80083f4 <memcpy+0xc>
 80083f2:	bd10      	pop	{r4, pc}
 80083f4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80083f8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80083fc:	e7f7      	b.n	80083ee <memcpy+0x6>

080083fe <memset>:
 80083fe:	4603      	mov	r3, r0
 8008400:	4402      	add	r2, r0
 8008402:	4293      	cmp	r3, r2
 8008404:	d100      	bne.n	8008408 <memset+0xa>
 8008406:	4770      	bx	lr
 8008408:	f803 1b01 	strb.w	r1, [r3], #1
 800840c:	e7f9      	b.n	8008402 <memset+0x4>
	...

08008410 <_init>:
 8008410:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008412:	bf00      	nop
 8008414:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008416:	bc08      	pop	{r3}
 8008418:	469e      	mov	lr, r3
 800841a:	4770      	bx	lr

0800841c <_fini>:
 800841c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800841e:	bf00      	nop
 8008420:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008422:	bc08      	pop	{r3}
 8008424:	469e      	mov	lr, r3
 8008426:	4770      	bx	lr
