
alpha_firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000081c8  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  080082d4  080082d4  000182d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800835c  0800835c  00020180  2**0
                  CONTENTS
  4 .ARM          00000000  0800835c  0800835c  00020180  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800835c  0800835c  00020180  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800835c  0800835c  0001835c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008360  08008360  00018360  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000180  20000000  08008364  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001204  20000180  080084e4  00020180  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001384  080084e4  00021384  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020180  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014cde  00000000  00000000  000201a9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000327e  00000000  00000000  00034e87  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000e98  00000000  00000000  00038108  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000d10  00000000  00000000  00038fa0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001a7a1  00000000  00000000  00039cb0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000f72c  00000000  00000000  00054451  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008b983  00000000  00000000  00063b7d  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000ef500  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003a1c  00000000  00000000  000ef57c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000180 	.word	0x20000180
 8000128:	00000000 	.word	0x00000000
 800012c:	080082bc 	.word	0x080082bc

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000184 	.word	0x20000184
 8000148:	080082bc 	.word	0x080082bc

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000152:	f000 fbd3 	bl	80008fc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000156:	f000 f841 	bl	80001dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800015a:	f000 f92f 	bl	80003bc <MX_GPIO_Init>
  MX_DMA_Init();
 800015e:	f000 f90f 	bl	8000380 <MX_DMA_Init>
  MX_ADC1_Init();
 8000162:	f000 f899 	bl	8000298 <MX_ADC1_Init>
  MX_SPI1_Init();
 8000166:	f000 f8d5 	bl	8000314 <MX_SPI1_Init>
  MX_USB_DEVICE_Init();
 800016a:	f007 fbc7 	bl	80078fc <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */


  HAL_ADCEx_Calibration_Start(&hadc1);
 800016e:	4815      	ldr	r0, [pc, #84]	; (80001c4 <main+0x78>)
 8000170:	f001 f8d4 	bl	800131c <HAL_ADCEx_Calibration_Start>
  HAL_ADC_Start(&hadc1);
 8000174:	4813      	ldr	r0, [pc, #76]	; (80001c4 <main+0x78>)
 8000176:	f000 fcfb 	bl	8000b70 <HAL_ADC_Start>
  while (1)
  {
	  if (settings_changed) {

	  }
	  while (status == status_reading/*mode == READING_TRIG_mode*/) {
 800017a:	e00f      	b.n	800019c <main+0x50>
		  //while(ready_to_send == False) {
			  if( (adc_value = HAL_ADC_GetValue(&hadc1)) > trigger_level) {
 800017c:	4811      	ldr	r0, [pc, #68]	; (80001c4 <main+0x78>)
 800017e:	f000 fece 	bl	8000f1e <HAL_ADC_GetValue>
 8000182:	4603      	mov	r3, r0
 8000184:	b29a      	uxth	r2, r3
 8000186:	4b10      	ldr	r3, [pc, #64]	; (80001c8 <main+0x7c>)
 8000188:	801a      	strh	r2, [r3, #0]
 800018a:	4b0f      	ldr	r3, [pc, #60]	; (80001c8 <main+0x7c>)
 800018c:	881a      	ldrh	r2, [r3, #0]
 800018e:	4b0f      	ldr	r3, [pc, #60]	; (80001cc <main+0x80>)
 8000190:	881b      	ldrh	r3, [r3, #0]
 8000192:	429a      	cmp	r2, r3
 8000194:	d902      	bls.n	800019c <main+0x50>
				  is_triggered = 1;
 8000196:	4b0e      	ldr	r3, [pc, #56]	; (80001d0 <main+0x84>)
 8000198:	2201      	movs	r2, #1
 800019a:	701a      	strb	r2, [r3, #0]
	  while (status == status_reading/*mode == READING_TRIG_mode*/) {
 800019c:	4b0d      	ldr	r3, [pc, #52]	; (80001d4 <main+0x88>)
 800019e:	781b      	ldrb	r3, [r3, #0]
 80001a0:	2b0a      	cmp	r3, #10
 80001a2:	d0eb      	beq.n	800017c <main+0x30>
			  }
		  //}
	  }
	  if (status == status_SENDING_Data/*mode == SENDING_Data*/) {
 80001a4:	4b0b      	ldr	r3, [pc, #44]	; (80001d4 <main+0x88>)
 80001a6:	781b      	ldrb	r3, [r3, #0]
 80001a8:	2b0b      	cmp	r3, #11
 80001aa:	d1e6      	bne.n	800017a <main+0x2e>
		  uint8_t res = CDC_Transmit_FS((uint8_t*)&Data_buffer, Data_buf_size);
 80001ac:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80001b0:	4809      	ldr	r0, [pc, #36]	; (80001d8 <main+0x8c>)
 80001b2:	f007 fc65 	bl	8007a80 <CDC_Transmit_FS>
 80001b6:	4603      	mov	r3, r0
 80001b8:	71fb      	strb	r3, [r7, #7]
		  status = status_doNothing;
 80001ba:	4b06      	ldr	r3, [pc, #24]	; (80001d4 <main+0x88>)
 80001bc:	220c      	movs	r2, #12
 80001be:	701a      	strb	r2, [r3, #0]
	  if (settings_changed) {
 80001c0:	e7db      	b.n	800017a <main+0x2e>
 80001c2:	bf00      	nop
 80001c4:	20000414 	.word	0x20000414
 80001c8:	2000019e 	.word	0x2000019e
 80001cc:	20000002 	.word	0x20000002
 80001d0:	2000019c 	.word	0x2000019c
 80001d4:	20000001 	.word	0x20000001
 80001d8:	200004e0 	.word	0x200004e0

080001dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001dc:	b580      	push	{r7, lr}
 80001de:	b094      	sub	sp, #80	; 0x50
 80001e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001e2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80001e6:	2228      	movs	r2, #40	; 0x28
 80001e8:	2100      	movs	r1, #0
 80001ea:	4618      	mov	r0, r3
 80001ec:	f008 f85d 	bl	80082aa <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001f0:	f107 0314 	add.w	r3, r7, #20
 80001f4:	2200      	movs	r2, #0
 80001f6:	601a      	str	r2, [r3, #0]
 80001f8:	605a      	str	r2, [r3, #4]
 80001fa:	609a      	str	r2, [r3, #8]
 80001fc:	60da      	str	r2, [r3, #12]
 80001fe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000200:	1d3b      	adds	r3, r7, #4
 8000202:	2200      	movs	r2, #0
 8000204:	601a      	str	r2, [r3, #0]
 8000206:	605a      	str	r2, [r3, #4]
 8000208:	609a      	str	r2, [r3, #8]
 800020a:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800020c:	2301      	movs	r3, #1
 800020e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000210:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000214:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000216:	2300      	movs	r3, #0
 8000218:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800021a:	2301      	movs	r3, #1
 800021c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800021e:	2302      	movs	r3, #2
 8000220:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000222:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000226:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000228:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800022c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800022e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000232:	4618      	mov	r0, r3
 8000234:	f003 f952 	bl	80034dc <HAL_RCC_OscConfig>
 8000238:	4603      	mov	r3, r0
 800023a:	2b00      	cmp	r3, #0
 800023c:	d001      	beq.n	8000242 <SystemClock_Config+0x66>
  {
    Error_Handler();
 800023e:	f000 f9e5 	bl	800060c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000242:	230f      	movs	r3, #15
 8000244:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000246:	2302      	movs	r3, #2
 8000248:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800024a:	2300      	movs	r3, #0
 800024c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800024e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000252:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000254:	2300      	movs	r3, #0
 8000256:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000258:	f107 0314 	add.w	r3, r7, #20
 800025c:	2102      	movs	r1, #2
 800025e:	4618      	mov	r0, r3
 8000260:	f003 fbbc 	bl	80039dc <HAL_RCC_ClockConfig>
 8000264:	4603      	mov	r3, r0
 8000266:	2b00      	cmp	r3, #0
 8000268:	d001      	beq.n	800026e <SystemClock_Config+0x92>
  {
    Error_Handler();
 800026a:	f000 f9cf 	bl	800060c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_USB;
 800026e:	2312      	movs	r3, #18
 8000270:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8000272:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000276:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8000278:	2300      	movs	r3, #0
 800027a:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800027c:	1d3b      	adds	r3, r7, #4
 800027e:	4618      	mov	r0, r3
 8000280:	f003 fd34 	bl	8003cec <HAL_RCCEx_PeriphCLKConfig>
 8000284:	4603      	mov	r3, r0
 8000286:	2b00      	cmp	r3, #0
 8000288:	d001      	beq.n	800028e <SystemClock_Config+0xb2>
  {
    Error_Handler();
 800028a:	f000 f9bf 	bl	800060c <Error_Handler>
  }
}
 800028e:	bf00      	nop
 8000290:	3750      	adds	r7, #80	; 0x50
 8000292:	46bd      	mov	sp, r7
 8000294:	bd80      	pop	{r7, pc}
	...

08000298 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000298:	b580      	push	{r7, lr}
 800029a:	b084      	sub	sp, #16
 800029c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800029e:	1d3b      	adds	r3, r7, #4
 80002a0:	2200      	movs	r2, #0
 80002a2:	601a      	str	r2, [r3, #0]
 80002a4:	605a      	str	r2, [r3, #4]
 80002a6:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 80002a8:	4b18      	ldr	r3, [pc, #96]	; (800030c <MX_ADC1_Init+0x74>)
 80002aa:	4a19      	ldr	r2, [pc, #100]	; (8000310 <MX_ADC1_Init+0x78>)
 80002ac:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80002ae:	4b17      	ldr	r3, [pc, #92]	; (800030c <MX_ADC1_Init+0x74>)
 80002b0:	2200      	movs	r2, #0
 80002b2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80002b4:	4b15      	ldr	r3, [pc, #84]	; (800030c <MX_ADC1_Init+0x74>)
 80002b6:	2201      	movs	r2, #1
 80002b8:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80002ba:	4b14      	ldr	r3, [pc, #80]	; (800030c <MX_ADC1_Init+0x74>)
 80002bc:	2200      	movs	r2, #0
 80002be:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80002c0:	4b12      	ldr	r3, [pc, #72]	; (800030c <MX_ADC1_Init+0x74>)
 80002c2:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80002c6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80002c8:	4b10      	ldr	r3, [pc, #64]	; (800030c <MX_ADC1_Init+0x74>)
 80002ca:	2200      	movs	r2, #0
 80002cc:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 80002ce:	4b0f      	ldr	r3, [pc, #60]	; (800030c <MX_ADC1_Init+0x74>)
 80002d0:	2201      	movs	r2, #1
 80002d2:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80002d4:	480d      	ldr	r0, [pc, #52]	; (800030c <MX_ADC1_Init+0x74>)
 80002d6:	f000 fb73 	bl	80009c0 <HAL_ADC_Init>
 80002da:	4603      	mov	r3, r0
 80002dc:	2b00      	cmp	r3, #0
 80002de:	d001      	beq.n	80002e4 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 80002e0:	f000 f994 	bl	800060c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80002e4:	2300      	movs	r3, #0
 80002e6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80002e8:	2301      	movs	r3, #1
 80002ea:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80002ec:	2300      	movs	r3, #0
 80002ee:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80002f0:	1d3b      	adds	r3, r7, #4
 80002f2:	4619      	mov	r1, r3
 80002f4:	4805      	ldr	r0, [pc, #20]	; (800030c <MX_ADC1_Init+0x74>)
 80002f6:	f000 fe27 	bl	8000f48 <HAL_ADC_ConfigChannel>
 80002fa:	4603      	mov	r3, r0
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d001      	beq.n	8000304 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000300:	f000 f984 	bl	800060c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000304:	bf00      	nop
 8000306:	3710      	adds	r7, #16
 8000308:	46bd      	mov	sp, r7
 800030a:	bd80      	pop	{r7, pc}
 800030c:	20000414 	.word	0x20000414
 8000310:	40012400 	.word	0x40012400

08000314 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000314:	b580      	push	{r7, lr}
 8000316:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000318:	4b17      	ldr	r3, [pc, #92]	; (8000378 <MX_SPI1_Init+0x64>)
 800031a:	4a18      	ldr	r2, [pc, #96]	; (800037c <MX_SPI1_Init+0x68>)
 800031c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800031e:	4b16      	ldr	r3, [pc, #88]	; (8000378 <MX_SPI1_Init+0x64>)
 8000320:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000324:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000326:	4b14      	ldr	r3, [pc, #80]	; (8000378 <MX_SPI1_Init+0x64>)
 8000328:	2200      	movs	r2, #0
 800032a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800032c:	4b12      	ldr	r3, [pc, #72]	; (8000378 <MX_SPI1_Init+0x64>)
 800032e:	2200      	movs	r2, #0
 8000330:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000332:	4b11      	ldr	r3, [pc, #68]	; (8000378 <MX_SPI1_Init+0x64>)
 8000334:	2200      	movs	r2, #0
 8000336:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000338:	4b0f      	ldr	r3, [pc, #60]	; (8000378 <MX_SPI1_Init+0x64>)
 800033a:	2200      	movs	r2, #0
 800033c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800033e:	4b0e      	ldr	r3, [pc, #56]	; (8000378 <MX_SPI1_Init+0x64>)
 8000340:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000344:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000346:	4b0c      	ldr	r3, [pc, #48]	; (8000378 <MX_SPI1_Init+0x64>)
 8000348:	2208      	movs	r2, #8
 800034a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800034c:	4b0a      	ldr	r3, [pc, #40]	; (8000378 <MX_SPI1_Init+0x64>)
 800034e:	2200      	movs	r2, #0
 8000350:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000352:	4b09      	ldr	r3, [pc, #36]	; (8000378 <MX_SPI1_Init+0x64>)
 8000354:	2200      	movs	r2, #0
 8000356:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000358:	4b07      	ldr	r3, [pc, #28]	; (8000378 <MX_SPI1_Init+0x64>)
 800035a:	2200      	movs	r2, #0
 800035c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800035e:	4b06      	ldr	r3, [pc, #24]	; (8000378 <MX_SPI1_Init+0x64>)
 8000360:	220a      	movs	r2, #10
 8000362:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000364:	4804      	ldr	r0, [pc, #16]	; (8000378 <MX_SPI1_Init+0x64>)
 8000366:	f003 fe33 	bl	8003fd0 <HAL_SPI_Init>
 800036a:	4603      	mov	r3, r0
 800036c:	2b00      	cmp	r3, #0
 800036e:	d001      	beq.n	8000374 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000370:	f000 f94c 	bl	800060c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000374:	bf00      	nop
 8000376:	bd80      	pop	{r7, pc}
 8000378:	20000488 	.word	0x20000488
 800037c:	40013000 	.word	0x40013000

08000380 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000380:	b580      	push	{r7, lr}
 8000382:	b082      	sub	sp, #8
 8000384:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000386:	4b0c      	ldr	r3, [pc, #48]	; (80003b8 <MX_DMA_Init+0x38>)
 8000388:	695b      	ldr	r3, [r3, #20]
 800038a:	4a0b      	ldr	r2, [pc, #44]	; (80003b8 <MX_DMA_Init+0x38>)
 800038c:	f043 0301 	orr.w	r3, r3, #1
 8000390:	6153      	str	r3, [r2, #20]
 8000392:	4b09      	ldr	r3, [pc, #36]	; (80003b8 <MX_DMA_Init+0x38>)
 8000394:	695b      	ldr	r3, [r3, #20]
 8000396:	f003 0301 	and.w	r3, r3, #1
 800039a:	607b      	str	r3, [r7, #4]
 800039c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800039e:	2200      	movs	r2, #0
 80003a0:	2100      	movs	r1, #0
 80003a2:	200b      	movs	r0, #11
 80003a4:	f001 f92d 	bl	8001602 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80003a8:	200b      	movs	r0, #11
 80003aa:	f001 f946 	bl	800163a <HAL_NVIC_EnableIRQ>

}
 80003ae:	bf00      	nop
 80003b0:	3708      	adds	r7, #8
 80003b2:	46bd      	mov	sp, r7
 80003b4:	bd80      	pop	{r7, pc}
 80003b6:	bf00      	nop
 80003b8:	40021000 	.word	0x40021000

080003bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003bc:	b580      	push	{r7, lr}
 80003be:	b088      	sub	sp, #32
 80003c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003c2:	f107 0310 	add.w	r3, r7, #16
 80003c6:	2200      	movs	r2, #0
 80003c8:	601a      	str	r2, [r3, #0]
 80003ca:	605a      	str	r2, [r3, #4]
 80003cc:	609a      	str	r2, [r3, #8]
 80003ce:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80003d0:	4b36      	ldr	r3, [pc, #216]	; (80004ac <MX_GPIO_Init+0xf0>)
 80003d2:	699b      	ldr	r3, [r3, #24]
 80003d4:	4a35      	ldr	r2, [pc, #212]	; (80004ac <MX_GPIO_Init+0xf0>)
 80003d6:	f043 0310 	orr.w	r3, r3, #16
 80003da:	6193      	str	r3, [r2, #24]
 80003dc:	4b33      	ldr	r3, [pc, #204]	; (80004ac <MX_GPIO_Init+0xf0>)
 80003de:	699b      	ldr	r3, [r3, #24]
 80003e0:	f003 0310 	and.w	r3, r3, #16
 80003e4:	60fb      	str	r3, [r7, #12]
 80003e6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80003e8:	4b30      	ldr	r3, [pc, #192]	; (80004ac <MX_GPIO_Init+0xf0>)
 80003ea:	699b      	ldr	r3, [r3, #24]
 80003ec:	4a2f      	ldr	r2, [pc, #188]	; (80004ac <MX_GPIO_Init+0xf0>)
 80003ee:	f043 0320 	orr.w	r3, r3, #32
 80003f2:	6193      	str	r3, [r2, #24]
 80003f4:	4b2d      	ldr	r3, [pc, #180]	; (80004ac <MX_GPIO_Init+0xf0>)
 80003f6:	699b      	ldr	r3, [r3, #24]
 80003f8:	f003 0320 	and.w	r3, r3, #32
 80003fc:	60bb      	str	r3, [r7, #8]
 80003fe:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000400:	4b2a      	ldr	r3, [pc, #168]	; (80004ac <MX_GPIO_Init+0xf0>)
 8000402:	699b      	ldr	r3, [r3, #24]
 8000404:	4a29      	ldr	r2, [pc, #164]	; (80004ac <MX_GPIO_Init+0xf0>)
 8000406:	f043 0304 	orr.w	r3, r3, #4
 800040a:	6193      	str	r3, [r2, #24]
 800040c:	4b27      	ldr	r3, [pc, #156]	; (80004ac <MX_GPIO_Init+0xf0>)
 800040e:	699b      	ldr	r3, [r3, #24]
 8000410:	f003 0304 	and.w	r3, r3, #4
 8000414:	607b      	str	r3, [r7, #4]
 8000416:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000418:	4b24      	ldr	r3, [pc, #144]	; (80004ac <MX_GPIO_Init+0xf0>)
 800041a:	699b      	ldr	r3, [r3, #24]
 800041c:	4a23      	ldr	r2, [pc, #140]	; (80004ac <MX_GPIO_Init+0xf0>)
 800041e:	f043 0308 	orr.w	r3, r3, #8
 8000422:	6193      	str	r3, [r2, #24]
 8000424:	4b21      	ldr	r3, [pc, #132]	; (80004ac <MX_GPIO_Init+0xf0>)
 8000426:	699b      	ldr	r3, [r3, #24]
 8000428:	f003 0308 	and.w	r3, r3, #8
 800042c:	603b      	str	r3, [r7, #0]
 800042e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_RESET);
 8000430:	2200      	movs	r2, #0
 8000432:	2104      	movs	r1, #4
 8000434:	481e      	ldr	r0, [pc, #120]	; (80004b0 <MX_GPIO_Init+0xf4>)
 8000436:	f001 fc9d 	bl	8001d74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 800043a:	2200      	movs	r2, #0
 800043c:	21c0      	movs	r1, #192	; 0xc0
 800043e:	481d      	ldr	r0, [pc, #116]	; (80004b4 <MX_GPIO_Init+0xf8>)
 8000440:	f001 fc98 	bl	8001d74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000444:	2302      	movs	r3, #2
 8000446:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000448:	4b1b      	ldr	r3, [pc, #108]	; (80004b8 <MX_GPIO_Init+0xfc>)
 800044a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800044c:	2300      	movs	r3, #0
 800044e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000450:	f107 0310 	add.w	r3, r7, #16
 8000454:	4619      	mov	r1, r3
 8000456:	4816      	ldr	r0, [pc, #88]	; (80004b0 <MX_GPIO_Init+0xf4>)
 8000458:	f001 fb32 	bl	8001ac0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800045c:	2304      	movs	r3, #4
 800045e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000460:	2301      	movs	r3, #1
 8000462:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000464:	2300      	movs	r3, #0
 8000466:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000468:	2302      	movs	r3, #2
 800046a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800046c:	f107 0310 	add.w	r3, r7, #16
 8000470:	4619      	mov	r1, r3
 8000472:	480f      	ldr	r0, [pc, #60]	; (80004b0 <MX_GPIO_Init+0xf4>)
 8000474:	f001 fb24 	bl	8001ac0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000478:	23c0      	movs	r3, #192	; 0xc0
 800047a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800047c:	2301      	movs	r3, #1
 800047e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000480:	2300      	movs	r3, #0
 8000482:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000484:	2302      	movs	r3, #2
 8000486:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000488:	f107 0310 	add.w	r3, r7, #16
 800048c:	4619      	mov	r1, r3
 800048e:	4809      	ldr	r0, [pc, #36]	; (80004b4 <MX_GPIO_Init+0xf8>)
 8000490:	f001 fb16 	bl	8001ac0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8000494:	2200      	movs	r2, #0
 8000496:	2100      	movs	r1, #0
 8000498:	2007      	movs	r0, #7
 800049a:	f001 f8b2 	bl	8001602 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 800049e:	2007      	movs	r0, #7
 80004a0:	f001 f8cb 	bl	800163a <HAL_NVIC_EnableIRQ>

}
 80004a4:	bf00      	nop
 80004a6:	3720      	adds	r7, #32
 80004a8:	46bd      	mov	sp, r7
 80004aa:	bd80      	pop	{r7, pc}
 80004ac:	40021000 	.word	0x40021000
 80004b0:	40010800 	.word	0x40010800
 80004b4:	40010c00 	.word	0x40010c00
 80004b8:	10110000 	.word	0x10110000

080004bc <CDC_ReciveCallBack>:

/* USER CODE BEGIN 4 */
void CDC_ReciveCallBack(uint8_t *Buf, uint32_t *Len) {
 80004bc:	b480      	push	{r7}
 80004be:	b083      	sub	sp, #12
 80004c0:	af00      	add	r7, sp, #0
 80004c2:	6078      	str	r0, [r7, #4]
 80004c4:	6039      	str	r1, [r7, #0]
	switch(Buf[0]) {
 80004c6:	687b      	ldr	r3, [r7, #4]
 80004c8:	781b      	ldrb	r3, [r3, #0]
 80004ca:	2b65      	cmp	r3, #101	; 0x65
 80004cc:	d003      	beq.n	80004d6 <CDC_ReciveCallBack+0x1a>
 80004ce:	2b73      	cmp	r3, #115	; 0x73
 80004d0:	d003      	beq.n	80004da <CDC_ReciveCallBack+0x1e>
 80004d2:	2b62      	cmp	r3, #98	; 0x62
		case 'b': {//begin

			break;
 80004d4:	e002      	b.n	80004dc <CDC_ReciveCallBack+0x20>
		}
		case 'e': {//end

			break;
 80004d6:	bf00      	nop
 80004d8:	e000      	b.n	80004dc <CDC_ReciveCallBack+0x20>
		}
		case 's': {//settings

//			settings_changed = True;
			break;
 80004da:	bf00      	nop
		}
	}
}
 80004dc:	bf00      	nop
 80004de:	370c      	adds	r7, #12
 80004e0:	46bd      	mov	sp, r7
 80004e2:	bc80      	pop	{r7}
 80004e4:	4770      	bx	lr
	...

080004e8 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80004e8:	b580      	push	{r7, lr}
 80004ea:	b082      	sub	sp, #8
 80004ec:	af00      	add	r7, sp, #0
 80004ee:	4603      	mov	r3, r0
 80004f0:	80fb      	strh	r3, [r7, #6]
	if((GPIO_Pin == GPIO_PIN_1)&&(status == status_doNothing))
 80004f2:	88fb      	ldrh	r3, [r7, #6]
 80004f4:	2b02      	cmp	r3, #2
 80004f6:	d10c      	bne.n	8000512 <HAL_GPIO_EXTI_Callback+0x2a>
 80004f8:	4b08      	ldr	r3, [pc, #32]	; (800051c <HAL_GPIO_EXTI_Callback+0x34>)
 80004fa:	781b      	ldrb	r3, [r3, #0]
 80004fc:	2b0c      	cmp	r3, #12
 80004fe:	d108      	bne.n	8000512 <HAL_GPIO_EXTI_Callback+0x2a>
		{
			status = status_reading;
 8000500:	4b06      	ldr	r3, [pc, #24]	; (800051c <HAL_GPIO_EXTI_Callback+0x34>)
 8000502:	220a      	movs	r2, #10
 8000504:	701a      	strb	r2, [r3, #0]
			HAL_ADC_Start_DMA(&hadc1, (uint32_t*)&DMA_buffer, DMA_buf_size);
 8000506:	2228      	movs	r2, #40	; 0x28
 8000508:	4905      	ldr	r1, [pc, #20]	; (8000520 <HAL_GPIO_EXTI_Callback+0x38>)
 800050a:	4806      	ldr	r0, [pc, #24]	; (8000524 <HAL_GPIO_EXTI_Callback+0x3c>)
 800050c:	f000 fbde 	bl	8000ccc <HAL_ADC_Start_DMA>
 8000510:	e000      	b.n	8000514 <HAL_GPIO_EXTI_Callback+0x2c>
		}
		else
		{
			__NOP();
 8000512:	bf00      	nop
		}
}
 8000514:	bf00      	nop
 8000516:	3708      	adds	r7, #8
 8000518:	46bd      	mov	sp, r7
 800051a:	bd80      	pop	{r7, pc}
 800051c:	20000001 	.word	0x20000001
 8000520:	200003c4 	.word	0x200003c4
 8000524:	20000414 	.word	0x20000414

08000528 <HAL_ADC_ConvCpltCallback>:


 void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 8000528:	b580      	push	{r7, lr}
 800052a:	b082      	sub	sp, #8
 800052c:	af00      	add	r7, sp, #0
 800052e:	6078      	str	r0, [r7, #4]
	 memcpy(&Data_buffer[data_part_idx * DMA_half_buf_size], &DMA_buffer[DMA_midIdx], DMA_half_buf_size * 2);
 8000530:	4b14      	ldr	r3, [pc, #80]	; (8000584 <HAL_ADC_ConvCpltCallback+0x5c>)
 8000532:	781b      	ldrb	r3, [r3, #0]
 8000534:	461a      	mov	r2, r3
 8000536:	4613      	mov	r3, r2
 8000538:	009b      	lsls	r3, r3, #2
 800053a:	4413      	add	r3, r2
 800053c:	009b      	lsls	r3, r3, #2
 800053e:	005b      	lsls	r3, r3, #1
 8000540:	4a11      	ldr	r2, [pc, #68]	; (8000588 <HAL_ADC_ConvCpltCallback+0x60>)
 8000542:	1898      	adds	r0, r3, r2
 8000544:	4b11      	ldr	r3, [pc, #68]	; (800058c <HAL_ADC_ConvCpltCallback+0x64>)
 8000546:	781b      	ldrb	r3, [r3, #0]
 8000548:	005b      	lsls	r3, r3, #1
 800054a:	4a11      	ldr	r2, [pc, #68]	; (8000590 <HAL_ADC_ConvCpltCallback+0x68>)
 800054c:	4413      	add	r3, r2
 800054e:	2228      	movs	r2, #40	; 0x28
 8000550:	4619      	mov	r1, r3
 8000552:	f007 fe9f 	bl	8008294 <memcpy>
	data_part_idx += is_triggered;
 8000556:	4b0b      	ldr	r3, [pc, #44]	; (8000584 <HAL_ADC_ConvCpltCallback+0x5c>)
 8000558:	781a      	ldrb	r2, [r3, #0]
 800055a:	4b0e      	ldr	r3, [pc, #56]	; (8000594 <HAL_ADC_ConvCpltCallback+0x6c>)
 800055c:	781b      	ldrb	r3, [r3, #0]
 800055e:	4413      	add	r3, r2
 8000560:	b2da      	uxtb	r2, r3
 8000562:	4b08      	ldr	r3, [pc, #32]	; (8000584 <HAL_ADC_ConvCpltCallback+0x5c>)
 8000564:	701a      	strb	r2, [r3, #0]
					trig_idx = i;
			}
		}*/


	if(data_part_idx >= number_half_bufSize) {
 8000566:	4b07      	ldr	r3, [pc, #28]	; (8000584 <HAL_ADC_ConvCpltCallback+0x5c>)
 8000568:	781b      	ldrb	r3, [r3, #0]
 800056a:	2b31      	cmp	r3, #49	; 0x31
 800056c:	d905      	bls.n	800057a <HAL_ADC_ConvCpltCallback+0x52>
		HAL_ADC_Stop_DMA(&hadc1);
 800056e:	480a      	ldr	r0, [pc, #40]	; (8000598 <HAL_ADC_ConvCpltCallback+0x70>)
 8000570:	f000 fc8a 	bl	8000e88 <HAL_ADC_Stop_DMA>
		status = status_SENDING_Data;
 8000574:	4b09      	ldr	r3, [pc, #36]	; (800059c <HAL_ADC_ConvCpltCallback+0x74>)
 8000576:	220b      	movs	r2, #11
 8000578:	701a      	strb	r2, [r3, #0]
	}
}
 800057a:	bf00      	nop
 800057c:	3708      	adds	r7, #8
 800057e:	46bd      	mov	sp, r7
 8000580:	bd80      	pop	{r7, pc}
 8000582:	bf00      	nop
 8000584:	2000019d 	.word	0x2000019d
 8000588:	200004e0 	.word	0x200004e0
 800058c:	20000000 	.word	0x20000000
 8000590:	200003c4 	.word	0x200003c4
 8000594:	2000019c 	.word	0x2000019c
 8000598:	20000414 	.word	0x20000414
 800059c:	20000001 	.word	0x20000001

080005a0 <HAL_ADC_ConvHalfCpltCallback>:

void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc) {
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b082      	sub	sp, #8
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	6078      	str	r0, [r7, #4]
	//memcpy(&DMA_buffer, &Data_buffer[data_part_idx * DMA_half_buf_size], DMA_half_buf_size * 2);
	memcpy(&Data_buffer[data_part_idx * DMA_half_buf_size], &DMA_buffer, DMA_half_buf_size * 2);
 80005a8:	4b12      	ldr	r3, [pc, #72]	; (80005f4 <HAL_ADC_ConvHalfCpltCallback+0x54>)
 80005aa:	781b      	ldrb	r3, [r3, #0]
 80005ac:	461a      	mov	r2, r3
 80005ae:	4613      	mov	r3, r2
 80005b0:	009b      	lsls	r3, r3, #2
 80005b2:	4413      	add	r3, r2
 80005b4:	009b      	lsls	r3, r3, #2
 80005b6:	005b      	lsls	r3, r3, #1
 80005b8:	4a0f      	ldr	r2, [pc, #60]	; (80005f8 <HAL_ADC_ConvHalfCpltCallback+0x58>)
 80005ba:	4413      	add	r3, r2
 80005bc:	2228      	movs	r2, #40	; 0x28
 80005be:	490f      	ldr	r1, [pc, #60]	; (80005fc <HAL_ADC_ConvHalfCpltCallback+0x5c>)
 80005c0:	4618      	mov	r0, r3
 80005c2:	f007 fe67 	bl	8008294 <memcpy>
	data_part_idx += is_triggered;
 80005c6:	4b0b      	ldr	r3, [pc, #44]	; (80005f4 <HAL_ADC_ConvHalfCpltCallback+0x54>)
 80005c8:	781a      	ldrb	r2, [r3, #0]
 80005ca:	4b0d      	ldr	r3, [pc, #52]	; (8000600 <HAL_ADC_ConvHalfCpltCallback+0x60>)
 80005cc:	781b      	ldrb	r3, [r3, #0]
 80005ce:	4413      	add	r3, r2
 80005d0:	b2da      	uxtb	r2, r3
 80005d2:	4b08      	ldr	r3, [pc, #32]	; (80005f4 <HAL_ADC_ConvHalfCpltCallback+0x54>)
 80005d4:	701a      	strb	r2, [r3, #0]
		}
	}*/



	if(data_part_idx >= number_half_bufSize) {
 80005d6:	4b07      	ldr	r3, [pc, #28]	; (80005f4 <HAL_ADC_ConvHalfCpltCallback+0x54>)
 80005d8:	781b      	ldrb	r3, [r3, #0]
 80005da:	2b31      	cmp	r3, #49	; 0x31
 80005dc:	d905      	bls.n	80005ea <HAL_ADC_ConvHalfCpltCallback+0x4a>
		HAL_ADC_Stop_DMA(&hadc1);
 80005de:	4809      	ldr	r0, [pc, #36]	; (8000604 <HAL_ADC_ConvHalfCpltCallback+0x64>)
 80005e0:	f000 fc52 	bl	8000e88 <HAL_ADC_Stop_DMA>
		status = status_SENDING_Data;
 80005e4:	4b08      	ldr	r3, [pc, #32]	; (8000608 <HAL_ADC_ConvHalfCpltCallback+0x68>)
 80005e6:	220b      	movs	r2, #11
 80005e8:	701a      	strb	r2, [r3, #0]
	}
}
 80005ea:	bf00      	nop
 80005ec:	3708      	adds	r7, #8
 80005ee:	46bd      	mov	sp, r7
 80005f0:	bd80      	pop	{r7, pc}
 80005f2:	bf00      	nop
 80005f4:	2000019d 	.word	0x2000019d
 80005f8:	200004e0 	.word	0x200004e0
 80005fc:	200003c4 	.word	0x200003c4
 8000600:	2000019c 	.word	0x2000019c
 8000604:	20000414 	.word	0x20000414
 8000608:	20000001 	.word	0x20000001

0800060c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800060c:	b480      	push	{r7}
 800060e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000610:	bf00      	nop
 8000612:	46bd      	mov	sp, r7
 8000614:	bc80      	pop	{r7}
 8000616:	4770      	bx	lr

08000618 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000618:	b480      	push	{r7}
 800061a:	b085      	sub	sp, #20
 800061c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800061e:	4b15      	ldr	r3, [pc, #84]	; (8000674 <HAL_MspInit+0x5c>)
 8000620:	699b      	ldr	r3, [r3, #24]
 8000622:	4a14      	ldr	r2, [pc, #80]	; (8000674 <HAL_MspInit+0x5c>)
 8000624:	f043 0301 	orr.w	r3, r3, #1
 8000628:	6193      	str	r3, [r2, #24]
 800062a:	4b12      	ldr	r3, [pc, #72]	; (8000674 <HAL_MspInit+0x5c>)
 800062c:	699b      	ldr	r3, [r3, #24]
 800062e:	f003 0301 	and.w	r3, r3, #1
 8000632:	60bb      	str	r3, [r7, #8]
 8000634:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000636:	4b0f      	ldr	r3, [pc, #60]	; (8000674 <HAL_MspInit+0x5c>)
 8000638:	69db      	ldr	r3, [r3, #28]
 800063a:	4a0e      	ldr	r2, [pc, #56]	; (8000674 <HAL_MspInit+0x5c>)
 800063c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000640:	61d3      	str	r3, [r2, #28]
 8000642:	4b0c      	ldr	r3, [pc, #48]	; (8000674 <HAL_MspInit+0x5c>)
 8000644:	69db      	ldr	r3, [r3, #28]
 8000646:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800064a:	607b      	str	r3, [r7, #4]
 800064c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800064e:	4b0a      	ldr	r3, [pc, #40]	; (8000678 <HAL_MspInit+0x60>)
 8000650:	685b      	ldr	r3, [r3, #4]
 8000652:	60fb      	str	r3, [r7, #12]
 8000654:	68fb      	ldr	r3, [r7, #12]
 8000656:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800065a:	60fb      	str	r3, [r7, #12]
 800065c:	68fb      	ldr	r3, [r7, #12]
 800065e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000662:	60fb      	str	r3, [r7, #12]
 8000664:	4a04      	ldr	r2, [pc, #16]	; (8000678 <HAL_MspInit+0x60>)
 8000666:	68fb      	ldr	r3, [r7, #12]
 8000668:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800066a:	bf00      	nop
 800066c:	3714      	adds	r7, #20
 800066e:	46bd      	mov	sp, r7
 8000670:	bc80      	pop	{r7}
 8000672:	4770      	bx	lr
 8000674:	40021000 	.word	0x40021000
 8000678:	40010000 	.word	0x40010000

0800067c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b088      	sub	sp, #32
 8000680:	af00      	add	r7, sp, #0
 8000682:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000684:	f107 0310 	add.w	r3, r7, #16
 8000688:	2200      	movs	r2, #0
 800068a:	601a      	str	r2, [r3, #0]
 800068c:	605a      	str	r2, [r3, #4]
 800068e:	609a      	str	r2, [r3, #8]
 8000690:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	681b      	ldr	r3, [r3, #0]
 8000696:	4a29      	ldr	r2, [pc, #164]	; (800073c <HAL_ADC_MspInit+0xc0>)
 8000698:	4293      	cmp	r3, r2
 800069a:	d14a      	bne.n	8000732 <HAL_ADC_MspInit+0xb6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800069c:	4b28      	ldr	r3, [pc, #160]	; (8000740 <HAL_ADC_MspInit+0xc4>)
 800069e:	699b      	ldr	r3, [r3, #24]
 80006a0:	4a27      	ldr	r2, [pc, #156]	; (8000740 <HAL_ADC_MspInit+0xc4>)
 80006a2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80006a6:	6193      	str	r3, [r2, #24]
 80006a8:	4b25      	ldr	r3, [pc, #148]	; (8000740 <HAL_ADC_MspInit+0xc4>)
 80006aa:	699b      	ldr	r3, [r3, #24]
 80006ac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80006b0:	60fb      	str	r3, [r7, #12]
 80006b2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006b4:	4b22      	ldr	r3, [pc, #136]	; (8000740 <HAL_ADC_MspInit+0xc4>)
 80006b6:	699b      	ldr	r3, [r3, #24]
 80006b8:	4a21      	ldr	r2, [pc, #132]	; (8000740 <HAL_ADC_MspInit+0xc4>)
 80006ba:	f043 0304 	orr.w	r3, r3, #4
 80006be:	6193      	str	r3, [r2, #24]
 80006c0:	4b1f      	ldr	r3, [pc, #124]	; (8000740 <HAL_ADC_MspInit+0xc4>)
 80006c2:	699b      	ldr	r3, [r3, #24]
 80006c4:	f003 0304 	and.w	r3, r3, #4
 80006c8:	60bb      	str	r3, [r7, #8]
 80006ca:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80006cc:	2301      	movs	r3, #1
 80006ce:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006d0:	2303      	movs	r3, #3
 80006d2:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006d4:	f107 0310 	add.w	r3, r7, #16
 80006d8:	4619      	mov	r1, r3
 80006da:	481a      	ldr	r0, [pc, #104]	; (8000744 <HAL_ADC_MspInit+0xc8>)
 80006dc:	f001 f9f0 	bl	8001ac0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80006e0:	4b19      	ldr	r3, [pc, #100]	; (8000748 <HAL_ADC_MspInit+0xcc>)
 80006e2:	4a1a      	ldr	r2, [pc, #104]	; (800074c <HAL_ADC_MspInit+0xd0>)
 80006e4:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80006e6:	4b18      	ldr	r3, [pc, #96]	; (8000748 <HAL_ADC_MspInit+0xcc>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80006ec:	4b16      	ldr	r3, [pc, #88]	; (8000748 <HAL_ADC_MspInit+0xcc>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80006f2:	4b15      	ldr	r3, [pc, #84]	; (8000748 <HAL_ADC_MspInit+0xcc>)
 80006f4:	2280      	movs	r2, #128	; 0x80
 80006f6:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80006f8:	4b13      	ldr	r3, [pc, #76]	; (8000748 <HAL_ADC_MspInit+0xcc>)
 80006fa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80006fe:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000700:	4b11      	ldr	r3, [pc, #68]	; (8000748 <HAL_ADC_MspInit+0xcc>)
 8000702:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000706:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000708:	4b0f      	ldr	r3, [pc, #60]	; (8000748 <HAL_ADC_MspInit+0xcc>)
 800070a:	2220      	movs	r2, #32
 800070c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800070e:	4b0e      	ldr	r3, [pc, #56]	; (8000748 <HAL_ADC_MspInit+0xcc>)
 8000710:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8000714:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000716:	480c      	ldr	r0, [pc, #48]	; (8000748 <HAL_ADC_MspInit+0xcc>)
 8000718:	f000 ffaa 	bl	8001670 <HAL_DMA_Init>
 800071c:	4603      	mov	r3, r0
 800071e:	2b00      	cmp	r3, #0
 8000720:	d001      	beq.n	8000726 <HAL_ADC_MspInit+0xaa>
    {
      Error_Handler();
 8000722:	f7ff ff73 	bl	800060c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	4a07      	ldr	r2, [pc, #28]	; (8000748 <HAL_ADC_MspInit+0xcc>)
 800072a:	621a      	str	r2, [r3, #32]
 800072c:	4a06      	ldr	r2, [pc, #24]	; (8000748 <HAL_ADC_MspInit+0xcc>)
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000732:	bf00      	nop
 8000734:	3720      	adds	r7, #32
 8000736:	46bd      	mov	sp, r7
 8000738:	bd80      	pop	{r7, pc}
 800073a:	bf00      	nop
 800073c:	40012400 	.word	0x40012400
 8000740:	40021000 	.word	0x40021000
 8000744:	40010800 	.word	0x40010800
 8000748:	20000444 	.word	0x20000444
 800074c:	40020008 	.word	0x40020008

08000750 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b08a      	sub	sp, #40	; 0x28
 8000754:	af00      	add	r7, sp, #0
 8000756:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000758:	f107 0314 	add.w	r3, r7, #20
 800075c:	2200      	movs	r2, #0
 800075e:	601a      	str	r2, [r3, #0]
 8000760:	605a      	str	r2, [r3, #4]
 8000762:	609a      	str	r2, [r3, #8]
 8000764:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	4a22      	ldr	r2, [pc, #136]	; (80007f4 <HAL_SPI_MspInit+0xa4>)
 800076c:	4293      	cmp	r3, r2
 800076e:	d13d      	bne.n	80007ec <HAL_SPI_MspInit+0x9c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000770:	4b21      	ldr	r3, [pc, #132]	; (80007f8 <HAL_SPI_MspInit+0xa8>)
 8000772:	699b      	ldr	r3, [r3, #24]
 8000774:	4a20      	ldr	r2, [pc, #128]	; (80007f8 <HAL_SPI_MspInit+0xa8>)
 8000776:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800077a:	6193      	str	r3, [r2, #24]
 800077c:	4b1e      	ldr	r3, [pc, #120]	; (80007f8 <HAL_SPI_MspInit+0xa8>)
 800077e:	699b      	ldr	r3, [r3, #24]
 8000780:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000784:	613b      	str	r3, [r7, #16]
 8000786:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000788:	4b1b      	ldr	r3, [pc, #108]	; (80007f8 <HAL_SPI_MspInit+0xa8>)
 800078a:	699b      	ldr	r3, [r3, #24]
 800078c:	4a1a      	ldr	r2, [pc, #104]	; (80007f8 <HAL_SPI_MspInit+0xa8>)
 800078e:	f043 0308 	orr.w	r3, r3, #8
 8000792:	6193      	str	r3, [r2, #24]
 8000794:	4b18      	ldr	r3, [pc, #96]	; (80007f8 <HAL_SPI_MspInit+0xa8>)
 8000796:	699b      	ldr	r3, [r3, #24]
 8000798:	f003 0308 	and.w	r3, r3, #8
 800079c:	60fb      	str	r3, [r7, #12]
 800079e:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 80007a0:	2328      	movs	r3, #40	; 0x28
 80007a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007a4:	2302      	movs	r3, #2
 80007a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80007a8:	2303      	movs	r3, #3
 80007aa:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007ac:	f107 0314 	add.w	r3, r7, #20
 80007b0:	4619      	mov	r1, r3
 80007b2:	4812      	ldr	r0, [pc, #72]	; (80007fc <HAL_SPI_MspInit+0xac>)
 80007b4:	f001 f984 	bl	8001ac0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80007b8:	2310      	movs	r3, #16
 80007ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007bc:	2300      	movs	r3, #0
 80007be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c0:	2300      	movs	r3, #0
 80007c2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007c4:	f107 0314 	add.w	r3, r7, #20
 80007c8:	4619      	mov	r1, r3
 80007ca:	480c      	ldr	r0, [pc, #48]	; (80007fc <HAL_SPI_MspInit+0xac>)
 80007cc:	f001 f978 	bl	8001ac0 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_SPI1_ENABLE();
 80007d0:	4b0b      	ldr	r3, [pc, #44]	; (8000800 <HAL_SPI_MspInit+0xb0>)
 80007d2:	685b      	ldr	r3, [r3, #4]
 80007d4:	627b      	str	r3, [r7, #36]	; 0x24
 80007d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007d8:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80007dc:	627b      	str	r3, [r7, #36]	; 0x24
 80007de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007e0:	f043 0301 	orr.w	r3, r3, #1
 80007e4:	627b      	str	r3, [r7, #36]	; 0x24
 80007e6:	4a06      	ldr	r2, [pc, #24]	; (8000800 <HAL_SPI_MspInit+0xb0>)
 80007e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007ea:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80007ec:	bf00      	nop
 80007ee:	3728      	adds	r7, #40	; 0x28
 80007f0:	46bd      	mov	sp, r7
 80007f2:	bd80      	pop	{r7, pc}
 80007f4:	40013000 	.word	0x40013000
 80007f8:	40021000 	.word	0x40021000
 80007fc:	40010c00 	.word	0x40010c00
 8000800:	40010000 	.word	0x40010000

08000804 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000804:	b480      	push	{r7}
 8000806:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000808:	bf00      	nop
 800080a:	46bd      	mov	sp, r7
 800080c:	bc80      	pop	{r7}
 800080e:	4770      	bx	lr

08000810 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000810:	b480      	push	{r7}
 8000812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000814:	e7fe      	b.n	8000814 <HardFault_Handler+0x4>

08000816 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000816:	b480      	push	{r7}
 8000818:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800081a:	e7fe      	b.n	800081a <MemManage_Handler+0x4>

0800081c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800081c:	b480      	push	{r7}
 800081e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000820:	e7fe      	b.n	8000820 <BusFault_Handler+0x4>

08000822 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000822:	b480      	push	{r7}
 8000824:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000826:	e7fe      	b.n	8000826 <UsageFault_Handler+0x4>

08000828 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000828:	b480      	push	{r7}
 800082a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800082c:	bf00      	nop
 800082e:	46bd      	mov	sp, r7
 8000830:	bc80      	pop	{r7}
 8000832:	4770      	bx	lr

08000834 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000834:	b480      	push	{r7}
 8000836:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000838:	bf00      	nop
 800083a:	46bd      	mov	sp, r7
 800083c:	bc80      	pop	{r7}
 800083e:	4770      	bx	lr

08000840 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000840:	b480      	push	{r7}
 8000842:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000844:	bf00      	nop
 8000846:	46bd      	mov	sp, r7
 8000848:	bc80      	pop	{r7}
 800084a:	4770      	bx	lr

0800084c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000850:	f000 f89a 	bl	8000988 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000854:	bf00      	nop
 8000856:	bd80      	pop	{r7, pc}

08000858 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 800085c:	2002      	movs	r0, #2
 800085e:	f001 faa1 	bl	8001da4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8000862:	bf00      	nop
 8000864:	bd80      	pop	{r7, pc}
	...

08000868 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800086c:	4802      	ldr	r0, [pc, #8]	; (8000878 <DMA1_Channel1_IRQHandler+0x10>)
 800086e:	f000 fff3 	bl	8001858 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000872:	bf00      	nop
 8000874:	bd80      	pop	{r7, pc}
 8000876:	bf00      	nop
 8000878:	20000444 	.word	0x20000444

0800087c <USB_HP_CAN1_TX_IRQHandler>:

/**
  * @brief This function handles USB high priority or CAN TX interrupts.
  */
void USB_HP_CAN1_TX_IRQHandler(void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 0 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000880:	4802      	ldr	r0, [pc, #8]	; (800088c <USB_HP_CAN1_TX_IRQHandler+0x10>)
 8000882:	f001 fbd8 	bl	8002036 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 1 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 1 */
}
 8000886:	bf00      	nop
 8000888:	bd80      	pop	{r7, pc}
 800088a:	bf00      	nop
 800088c:	20001098 	.word	0x20001098

08000890 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000894:	4802      	ldr	r0, [pc, #8]	; (80008a0 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8000896:	f001 fbce 	bl	8002036 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 800089a:	bf00      	nop
 800089c:	bd80      	pop	{r7, pc}
 800089e:	bf00      	nop
 80008a0:	20001098 	.word	0x20001098

080008a4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80008a4:	b480      	push	{r7}
 80008a6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80008a8:	bf00      	nop
 80008aa:	46bd      	mov	sp, r7
 80008ac:	bc80      	pop	{r7}
 80008ae:	4770      	bx	lr

080008b0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80008b0:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80008b2:	e003      	b.n	80008bc <LoopCopyDataInit>

080008b4 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80008b4:	4b0b      	ldr	r3, [pc, #44]	; (80008e4 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80008b6:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80008b8:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80008ba:	3104      	adds	r1, #4

080008bc <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80008bc:	480a      	ldr	r0, [pc, #40]	; (80008e8 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80008be:	4b0b      	ldr	r3, [pc, #44]	; (80008ec <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80008c0:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80008c2:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80008c4:	d3f6      	bcc.n	80008b4 <CopyDataInit>
  ldr r2, =_sbss
 80008c6:	4a0a      	ldr	r2, [pc, #40]	; (80008f0 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80008c8:	e002      	b.n	80008d0 <LoopFillZerobss>

080008ca <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80008ca:	2300      	movs	r3, #0
  str r3, [r2], #4
 80008cc:	f842 3b04 	str.w	r3, [r2], #4

080008d0 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80008d0:	4b08      	ldr	r3, [pc, #32]	; (80008f4 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80008d2:	429a      	cmp	r2, r3
  bcc FillZerobss
 80008d4:	d3f9      	bcc.n	80008ca <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80008d6:	f7ff ffe5 	bl	80008a4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80008da:	f007 fcb7 	bl	800824c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80008de:	f7ff fc35 	bl	800014c <main>
  bx lr
 80008e2:	4770      	bx	lr
  ldr r3, =_sidata
 80008e4:	08008364 	.word	0x08008364
  ldr r0, =_sdata
 80008e8:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80008ec:	20000180 	.word	0x20000180
  ldr r2, =_sbss
 80008f0:	20000180 	.word	0x20000180
  ldr r3, = _ebss
 80008f4:	20001384 	.word	0x20001384

080008f8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80008f8:	e7fe      	b.n	80008f8 <ADC1_2_IRQHandler>
	...

080008fc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000900:	4b08      	ldr	r3, [pc, #32]	; (8000924 <HAL_Init+0x28>)
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	4a07      	ldr	r2, [pc, #28]	; (8000924 <HAL_Init+0x28>)
 8000906:	f043 0310 	orr.w	r3, r3, #16
 800090a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800090c:	2003      	movs	r0, #3
 800090e:	f000 fe6d 	bl	80015ec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000912:	2000      	movs	r0, #0
 8000914:	f000 f808 	bl	8000928 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000918:	f7ff fe7e 	bl	8000618 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800091c:	2300      	movs	r3, #0
}
 800091e:	4618      	mov	r0, r3
 8000920:	bd80      	pop	{r7, pc}
 8000922:	bf00      	nop
 8000924:	40022000 	.word	0x40022000

08000928 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b082      	sub	sp, #8
 800092c:	af00      	add	r7, sp, #0
 800092e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000930:	4b12      	ldr	r3, [pc, #72]	; (800097c <HAL_InitTick+0x54>)
 8000932:	681a      	ldr	r2, [r3, #0]
 8000934:	4b12      	ldr	r3, [pc, #72]	; (8000980 <HAL_InitTick+0x58>)
 8000936:	781b      	ldrb	r3, [r3, #0]
 8000938:	4619      	mov	r1, r3
 800093a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800093e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000942:	fbb2 f3f3 	udiv	r3, r2, r3
 8000946:	4618      	mov	r0, r3
 8000948:	f000 fe85 	bl	8001656 <HAL_SYSTICK_Config>
 800094c:	4603      	mov	r3, r0
 800094e:	2b00      	cmp	r3, #0
 8000950:	d001      	beq.n	8000956 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000952:	2301      	movs	r3, #1
 8000954:	e00e      	b.n	8000974 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	2b0f      	cmp	r3, #15
 800095a:	d80a      	bhi.n	8000972 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800095c:	2200      	movs	r2, #0
 800095e:	6879      	ldr	r1, [r7, #4]
 8000960:	f04f 30ff 	mov.w	r0, #4294967295
 8000964:	f000 fe4d 	bl	8001602 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000968:	4a06      	ldr	r2, [pc, #24]	; (8000984 <HAL_InitTick+0x5c>)
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800096e:	2300      	movs	r3, #0
 8000970:	e000      	b.n	8000974 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000972:	2301      	movs	r3, #1
}
 8000974:	4618      	mov	r0, r3
 8000976:	3708      	adds	r7, #8
 8000978:	46bd      	mov	sp, r7
 800097a:	bd80      	pop	{r7, pc}
 800097c:	20000004 	.word	0x20000004
 8000980:	2000000c 	.word	0x2000000c
 8000984:	20000008 	.word	0x20000008

08000988 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000988:	b480      	push	{r7}
 800098a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800098c:	4b05      	ldr	r3, [pc, #20]	; (80009a4 <HAL_IncTick+0x1c>)
 800098e:	781b      	ldrb	r3, [r3, #0]
 8000990:	461a      	mov	r2, r3
 8000992:	4b05      	ldr	r3, [pc, #20]	; (80009a8 <HAL_IncTick+0x20>)
 8000994:	681b      	ldr	r3, [r3, #0]
 8000996:	4413      	add	r3, r2
 8000998:	4a03      	ldr	r2, [pc, #12]	; (80009a8 <HAL_IncTick+0x20>)
 800099a:	6013      	str	r3, [r2, #0]
}
 800099c:	bf00      	nop
 800099e:	46bd      	mov	sp, r7
 80009a0:	bc80      	pop	{r7}
 80009a2:	4770      	bx	lr
 80009a4:	2000000c 	.word	0x2000000c
 80009a8:	20000cb0 	.word	0x20000cb0

080009ac <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009ac:	b480      	push	{r7}
 80009ae:	af00      	add	r7, sp, #0
  return uwTick;
 80009b0:	4b02      	ldr	r3, [pc, #8]	; (80009bc <HAL_GetTick+0x10>)
 80009b2:	681b      	ldr	r3, [r3, #0]
}
 80009b4:	4618      	mov	r0, r3
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bc80      	pop	{r7}
 80009ba:	4770      	bx	lr
 80009bc:	20000cb0 	.word	0x20000cb0

080009c0 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b086      	sub	sp, #24
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80009c8:	2300      	movs	r3, #0
 80009ca:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80009cc:	2300      	movs	r3, #0
 80009ce:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80009d0:	2300      	movs	r3, #0
 80009d2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80009d4:	2300      	movs	r3, #0
 80009d6:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d101      	bne.n	80009e2 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80009de:	2301      	movs	r3, #1
 80009e0:	e0be      	b.n	8000b60 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	689b      	ldr	r3, [r3, #8]
 80009e6:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d109      	bne.n	8000a04 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	2200      	movs	r2, #0
 80009f4:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	2200      	movs	r2, #0
 80009fa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80009fe:	6878      	ldr	r0, [r7, #4]
 8000a00:	f7ff fe3c 	bl	800067c <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000a04:	6878      	ldr	r0, [r7, #4]
 8000a06:	f000 fbe9 	bl	80011dc <ADC_ConversionStop_Disable>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a12:	f003 0310 	and.w	r3, r3, #16
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	f040 8099 	bne.w	8000b4e <HAL_ADC_Init+0x18e>
 8000a1c:	7dfb      	ldrb	r3, [r7, #23]
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	f040 8095 	bne.w	8000b4e <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a28:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000a2c:	f023 0302 	bic.w	r3, r3, #2
 8000a30:	f043 0202 	orr.w	r2, r3, #2
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000a40:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	7b1b      	ldrb	r3, [r3, #12]
 8000a46:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000a48:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000a4a:	68ba      	ldr	r2, [r7, #8]
 8000a4c:	4313      	orrs	r3, r2
 8000a4e:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	689b      	ldr	r3, [r3, #8]
 8000a54:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000a58:	d003      	beq.n	8000a62 <HAL_ADC_Init+0xa2>
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	689b      	ldr	r3, [r3, #8]
 8000a5e:	2b01      	cmp	r3, #1
 8000a60:	d102      	bne.n	8000a68 <HAL_ADC_Init+0xa8>
 8000a62:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a66:	e000      	b.n	8000a6a <HAL_ADC_Init+0xaa>
 8000a68:	2300      	movs	r3, #0
 8000a6a:	693a      	ldr	r2, [r7, #16]
 8000a6c:	4313      	orrs	r3, r2
 8000a6e:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	7d1b      	ldrb	r3, [r3, #20]
 8000a74:	2b01      	cmp	r3, #1
 8000a76:	d119      	bne.n	8000aac <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	7b1b      	ldrb	r3, [r3, #12]
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d109      	bne.n	8000a94 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	699b      	ldr	r3, [r3, #24]
 8000a84:	3b01      	subs	r3, #1
 8000a86:	035a      	lsls	r2, r3, #13
 8000a88:	693b      	ldr	r3, [r7, #16]
 8000a8a:	4313      	orrs	r3, r2
 8000a8c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000a90:	613b      	str	r3, [r7, #16]
 8000a92:	e00b      	b.n	8000aac <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a98:	f043 0220 	orr.w	r2, r3, #32
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000aa4:	f043 0201 	orr.w	r2, r3, #1
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	685b      	ldr	r3, [r3, #4]
 8000ab2:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	693a      	ldr	r2, [r7, #16]
 8000abc:	430a      	orrs	r2, r1
 8000abe:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	689a      	ldr	r2, [r3, #8]
 8000ac6:	4b28      	ldr	r3, [pc, #160]	; (8000b68 <HAL_ADC_Init+0x1a8>)
 8000ac8:	4013      	ands	r3, r2
 8000aca:	687a      	ldr	r2, [r7, #4]
 8000acc:	6812      	ldr	r2, [r2, #0]
 8000ace:	68b9      	ldr	r1, [r7, #8]
 8000ad0:	430b      	orrs	r3, r1
 8000ad2:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	689b      	ldr	r3, [r3, #8]
 8000ad8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000adc:	d003      	beq.n	8000ae6 <HAL_ADC_Init+0x126>
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	689b      	ldr	r3, [r3, #8]
 8000ae2:	2b01      	cmp	r3, #1
 8000ae4:	d104      	bne.n	8000af0 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	691b      	ldr	r3, [r3, #16]
 8000aea:	3b01      	subs	r3, #1
 8000aec:	051b      	lsls	r3, r3, #20
 8000aee:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000af6:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	68fa      	ldr	r2, [r7, #12]
 8000b00:	430a      	orrs	r2, r1
 8000b02:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	689a      	ldr	r2, [r3, #8]
 8000b0a:	4b18      	ldr	r3, [pc, #96]	; (8000b6c <HAL_ADC_Init+0x1ac>)
 8000b0c:	4013      	ands	r3, r2
 8000b0e:	68ba      	ldr	r2, [r7, #8]
 8000b10:	429a      	cmp	r2, r3
 8000b12:	d10b      	bne.n	8000b2c <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	2200      	movs	r2, #0
 8000b18:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b1e:	f023 0303 	bic.w	r3, r3, #3
 8000b22:	f043 0201 	orr.w	r2, r3, #1
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000b2a:	e018      	b.n	8000b5e <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b30:	f023 0312 	bic.w	r3, r3, #18
 8000b34:	f043 0210 	orr.w	r2, r3, #16
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b40:	f043 0201 	orr.w	r2, r3, #1
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000b48:	2301      	movs	r3, #1
 8000b4a:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000b4c:	e007      	b.n	8000b5e <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b52:	f043 0210 	orr.w	r2, r3, #16
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8000b5a:	2301      	movs	r3, #1
 8000b5c:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000b5e:	7dfb      	ldrb	r3, [r7, #23]
}
 8000b60:	4618      	mov	r0, r3
 8000b62:	3718      	adds	r7, #24
 8000b64:	46bd      	mov	sp, r7
 8000b66:	bd80      	pop	{r7, pc}
 8000b68:	ffe1f7fd 	.word	0xffe1f7fd
 8000b6c:	ff1f0efe 	.word	0xff1f0efe

08000b70 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b084      	sub	sp, #16
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000b82:	2b01      	cmp	r3, #1
 8000b84:	d101      	bne.n	8000b8a <HAL_ADC_Start+0x1a>
 8000b86:	2302      	movs	r3, #2
 8000b88:	e098      	b.n	8000cbc <HAL_ADC_Start+0x14c>
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	2201      	movs	r2, #1
 8000b8e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8000b92:	6878      	ldr	r0, [r7, #4]
 8000b94:	f000 fad0 	bl	8001138 <ADC_Enable>
 8000b98:	4603      	mov	r3, r0
 8000b9a:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8000b9c:	7bfb      	ldrb	r3, [r7, #15]
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	f040 8087 	bne.w	8000cb2 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ba8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000bac:	f023 0301 	bic.w	r3, r3, #1
 8000bb0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	4a41      	ldr	r2, [pc, #260]	; (8000cc4 <HAL_ADC_Start+0x154>)
 8000bbe:	4293      	cmp	r3, r2
 8000bc0:	d105      	bne.n	8000bce <HAL_ADC_Start+0x5e>
 8000bc2:	4b41      	ldr	r3, [pc, #260]	; (8000cc8 <HAL_ADC_Start+0x158>)
 8000bc4:	685b      	ldr	r3, [r3, #4]
 8000bc6:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d115      	bne.n	8000bfa <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000bd2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	685b      	ldr	r3, [r3, #4]
 8000be0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d026      	beq.n	8000c36 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000bec:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000bf0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000bf8:	e01d      	b.n	8000c36 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000bfe:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	4a2f      	ldr	r2, [pc, #188]	; (8000cc8 <HAL_ADC_Start+0x158>)
 8000c0c:	4293      	cmp	r3, r2
 8000c0e:	d004      	beq.n	8000c1a <HAL_ADC_Start+0xaa>
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	4a2b      	ldr	r2, [pc, #172]	; (8000cc4 <HAL_ADC_Start+0x154>)
 8000c16:	4293      	cmp	r3, r2
 8000c18:	d10d      	bne.n	8000c36 <HAL_ADC_Start+0xc6>
 8000c1a:	4b2b      	ldr	r3, [pc, #172]	; (8000cc8 <HAL_ADC_Start+0x158>)
 8000c1c:	685b      	ldr	r3, [r3, #4]
 8000c1e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d007      	beq.n	8000c36 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c2a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000c2e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c3a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d006      	beq.n	8000c50 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c46:	f023 0206 	bic.w	r2, r3, #6
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	62da      	str	r2, [r3, #44]	; 0x2c
 8000c4e:	e002      	b.n	8000c56 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	2200      	movs	r2, #0
 8000c54:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	2200      	movs	r2, #0
 8000c5a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	f06f 0202 	mvn.w	r2, #2
 8000c66:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	689b      	ldr	r3, [r3, #8]
 8000c6e:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8000c72:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000c76:	d113      	bne.n	8000ca0 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000c7c:	4a11      	ldr	r2, [pc, #68]	; (8000cc4 <HAL_ADC_Start+0x154>)
 8000c7e:	4293      	cmp	r3, r2
 8000c80:	d105      	bne.n	8000c8e <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8000c82:	4b11      	ldr	r3, [pc, #68]	; (8000cc8 <HAL_ADC_Start+0x158>)
 8000c84:	685b      	ldr	r3, [r3, #4]
 8000c86:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d108      	bne.n	8000ca0 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	689a      	ldr	r2, [r3, #8]
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8000c9c:	609a      	str	r2, [r3, #8]
 8000c9e:	e00c      	b.n	8000cba <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	689a      	ldr	r2, [r3, #8]
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8000cae:	609a      	str	r2, [r3, #8]
 8000cb0:	e003      	b.n	8000cba <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8000cba:	7bfb      	ldrb	r3, [r7, #15]
}
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	3710      	adds	r7, #16
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	bd80      	pop	{r7, pc}
 8000cc4:	40012800 	.word	0x40012800
 8000cc8:	40012400 	.word	0x40012400

08000ccc <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b086      	sub	sp, #24
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	60f8      	str	r0, [r7, #12]
 8000cd4:	60b9      	str	r1, [r7, #8]
 8000cd6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8000cdc:	68fb      	ldr	r3, [r7, #12]
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	4a64      	ldr	r2, [pc, #400]	; (8000e74 <HAL_ADC_Start_DMA+0x1a8>)
 8000ce2:	4293      	cmp	r3, r2
 8000ce4:	d004      	beq.n	8000cf0 <HAL_ADC_Start_DMA+0x24>
 8000ce6:	68fb      	ldr	r3, [r7, #12]
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	4a63      	ldr	r2, [pc, #396]	; (8000e78 <HAL_ADC_Start_DMA+0x1ac>)
 8000cec:	4293      	cmp	r3, r2
 8000cee:	d106      	bne.n	8000cfe <HAL_ADC_Start_DMA+0x32>
 8000cf0:	4b60      	ldr	r3, [pc, #384]	; (8000e74 <HAL_ADC_Start_DMA+0x1a8>)
 8000cf2:	685b      	ldr	r3, [r3, #4]
 8000cf4:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	f040 80b3 	bne.w	8000e64 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8000cfe:	68fb      	ldr	r3, [r7, #12]
 8000d00:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000d04:	2b01      	cmp	r3, #1
 8000d06:	d101      	bne.n	8000d0c <HAL_ADC_Start_DMA+0x40>
 8000d08:	2302      	movs	r3, #2
 8000d0a:	e0ae      	b.n	8000e6a <HAL_ADC_Start_DMA+0x19e>
 8000d0c:	68fb      	ldr	r3, [r7, #12]
 8000d0e:	2201      	movs	r2, #1
 8000d10:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8000d14:	68f8      	ldr	r0, [r7, #12]
 8000d16:	f000 fa0f 	bl	8001138 <ADC_Enable>
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8000d1e:	7dfb      	ldrb	r3, [r7, #23]
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	f040 809a 	bne.w	8000e5a <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8000d26:	68fb      	ldr	r3, [r7, #12]
 8000d28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d2a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8000d2e:	f023 0301 	bic.w	r3, r3, #1
 8000d32:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000d36:	68fb      	ldr	r3, [r7, #12]
 8000d38:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000d3a:	68fb      	ldr	r3, [r7, #12]
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	4a4e      	ldr	r2, [pc, #312]	; (8000e78 <HAL_ADC_Start_DMA+0x1ac>)
 8000d40:	4293      	cmp	r3, r2
 8000d42:	d105      	bne.n	8000d50 <HAL_ADC_Start_DMA+0x84>
 8000d44:	4b4b      	ldr	r3, [pc, #300]	; (8000e74 <HAL_ADC_Start_DMA+0x1a8>)
 8000d46:	685b      	ldr	r3, [r3, #4]
 8000d48:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d115      	bne.n	8000d7c <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000d50:	68fb      	ldr	r3, [r7, #12]
 8000d52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d54:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8000d58:	68fb      	ldr	r3, [r7, #12]
 8000d5a:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000d5c:	68fb      	ldr	r3, [r7, #12]
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	685b      	ldr	r3, [r3, #4]
 8000d62:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d026      	beq.n	8000db8 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000d6a:	68fb      	ldr	r3, [r7, #12]
 8000d6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d6e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000d72:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000d76:	68fb      	ldr	r3, [r7, #12]
 8000d78:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000d7a:	e01d      	b.n	8000db8 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000d7c:	68fb      	ldr	r3, [r7, #12]
 8000d7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d80:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8000d84:	68fb      	ldr	r3, [r7, #12]
 8000d86:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8000d88:	68fb      	ldr	r3, [r7, #12]
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	4a39      	ldr	r2, [pc, #228]	; (8000e74 <HAL_ADC_Start_DMA+0x1a8>)
 8000d8e:	4293      	cmp	r3, r2
 8000d90:	d004      	beq.n	8000d9c <HAL_ADC_Start_DMA+0xd0>
 8000d92:	68fb      	ldr	r3, [r7, #12]
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	4a38      	ldr	r2, [pc, #224]	; (8000e78 <HAL_ADC_Start_DMA+0x1ac>)
 8000d98:	4293      	cmp	r3, r2
 8000d9a:	d10d      	bne.n	8000db8 <HAL_ADC_Start_DMA+0xec>
 8000d9c:	4b35      	ldr	r3, [pc, #212]	; (8000e74 <HAL_ADC_Start_DMA+0x1a8>)
 8000d9e:	685b      	ldr	r3, [r3, #4]
 8000da0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d007      	beq.n	8000db8 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000da8:	68fb      	ldr	r3, [r7, #12]
 8000daa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000dac:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000db0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000db4:	68fb      	ldr	r3, [r7, #12]
 8000db6:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000db8:	68fb      	ldr	r3, [r7, #12]
 8000dba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000dbc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d006      	beq.n	8000dd2 <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000dc4:	68fb      	ldr	r3, [r7, #12]
 8000dc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000dc8:	f023 0206 	bic.w	r2, r3, #6
 8000dcc:	68fb      	ldr	r3, [r7, #12]
 8000dce:	62da      	str	r2, [r3, #44]	; 0x2c
 8000dd0:	e002      	b.n	8000dd8 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8000dd2:	68fb      	ldr	r3, [r7, #12]
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8000dd8:	68fb      	ldr	r3, [r7, #12]
 8000dda:	2200      	movs	r2, #0
 8000ddc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8000de0:	68fb      	ldr	r3, [r7, #12]
 8000de2:	6a1b      	ldr	r3, [r3, #32]
 8000de4:	4a25      	ldr	r2, [pc, #148]	; (8000e7c <HAL_ADC_Start_DMA+0x1b0>)
 8000de6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8000de8:	68fb      	ldr	r3, [r7, #12]
 8000dea:	6a1b      	ldr	r3, [r3, #32]
 8000dec:	4a24      	ldr	r2, [pc, #144]	; (8000e80 <HAL_ADC_Start_DMA+0x1b4>)
 8000dee:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8000df0:	68fb      	ldr	r3, [r7, #12]
 8000df2:	6a1b      	ldr	r3, [r3, #32]
 8000df4:	4a23      	ldr	r2, [pc, #140]	; (8000e84 <HAL_ADC_Start_DMA+0x1b8>)
 8000df6:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8000df8:	68fb      	ldr	r3, [r7, #12]
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	f06f 0202 	mvn.w	r2, #2
 8000e00:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8000e02:	68fb      	ldr	r3, [r7, #12]
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	689a      	ldr	r2, [r3, #8]
 8000e08:	68fb      	ldr	r3, [r7, #12]
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000e10:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8000e12:	68fb      	ldr	r3, [r7, #12]
 8000e14:	6a18      	ldr	r0, [r3, #32]
 8000e16:	68fb      	ldr	r3, [r7, #12]
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	334c      	adds	r3, #76	; 0x4c
 8000e1c:	4619      	mov	r1, r3
 8000e1e:	68ba      	ldr	r2, [r7, #8]
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	f000 fc7f 	bl	8001724 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8000e26:	68fb      	ldr	r3, [r7, #12]
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	689b      	ldr	r3, [r3, #8]
 8000e2c:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8000e30:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000e34:	d108      	bne.n	8000e48 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8000e36:	68fb      	ldr	r3, [r7, #12]
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	689a      	ldr	r2, [r3, #8]
 8000e3c:	68fb      	ldr	r3, [r7, #12]
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8000e44:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8000e46:	e00f      	b.n	8000e68 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8000e48:	68fb      	ldr	r3, [r7, #12]
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	689a      	ldr	r2, [r3, #8]
 8000e4e:	68fb      	ldr	r3, [r7, #12]
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8000e56:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8000e58:	e006      	b.n	8000e68 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8000e5a:	68fb      	ldr	r3, [r7, #12]
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 8000e62:	e001      	b.n	8000e68 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000e64:	2301      	movs	r3, #1
 8000e66:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000e68:	7dfb      	ldrb	r3, [r7, #23]
}
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	3718      	adds	r7, #24
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bd80      	pop	{r7, pc}
 8000e72:	bf00      	nop
 8000e74:	40012400 	.word	0x40012400
 8000e78:	40012800 	.word	0x40012800
 8000e7c:	08001251 	.word	0x08001251
 8000e80:	080012cd 	.word	0x080012cd
 8000e84:	080012e9 	.word	0x080012e9

08000e88 <HAL_ADC_Stop_DMA>:
  *         on devices) have DMA capability.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b084      	sub	sp, #16
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000e90:	2300      	movs	r3, #0
 8000e92:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000e9a:	2b01      	cmp	r3, #1
 8000e9c:	d101      	bne.n	8000ea2 <HAL_ADC_Stop_DMA+0x1a>
 8000e9e:	2302      	movs	r3, #2
 8000ea0:	e039      	b.n	8000f16 <HAL_ADC_Stop_DMA+0x8e>
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	2201      	movs	r2, #1
 8000ea6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000eaa:	6878      	ldr	r0, [r7, #4]
 8000eac:	f000 f996 	bl	80011dc <ADC_ConversionStop_Disable>
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8000eb4:	7bfb      	ldrb	r3, [r7, #15]
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d128      	bne.n	8000f0c <HAL_ADC_Stop_DMA+0x84>
  {
    /* Disable ADC DMA mode */
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	689a      	ldr	r2, [r3, #8]
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000ec8:	609a      	str	r2, [r3, #8]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	6a1b      	ldr	r3, [r3, #32]
 8000ece:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000ed2:	2b02      	cmp	r3, #2
 8000ed4:	d11a      	bne.n	8000f0c <HAL_ADC_Stop_DMA+0x84>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	6a1b      	ldr	r3, [r3, #32]
 8000eda:	4618      	mov	r0, r3
 8000edc:	f000 fc81 	bl	80017e2 <HAL_DMA_Abort>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	73fb      	strb	r3, [r7, #15]
      
      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status == HAL_OK)
 8000ee4:	7bfb      	ldrb	r3, [r7, #15]
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d10a      	bne.n	8000f00 <HAL_ADC_Stop_DMA+0x78>
      {
        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000eee:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000ef2:	f023 0301 	bic.w	r3, r3, #1
 8000ef6:	f043 0201 	orr.w	r2, r3, #1
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	629a      	str	r2, [r3, #40]	; 0x28
 8000efe:	e005      	b.n	8000f0c <HAL_ADC_Stop_DMA+0x84>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f04:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	2200      	movs	r2, #0
 8000f10:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
  /* Return function status */
  return tmp_hal_status;
 8000f14:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f16:	4618      	mov	r0, r3
 8000f18:	3710      	adds	r7, #16
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bd80      	pop	{r7, pc}

08000f1e <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8000f1e:	b480      	push	{r7}
 8000f20:	b083      	sub	sp, #12
 8000f22:	af00      	add	r7, sp, #0
 8000f24:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	370c      	adds	r7, #12
 8000f30:	46bd      	mov	sp, r7
 8000f32:	bc80      	pop	{r7}
 8000f34:	4770      	bx	lr

08000f36 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8000f36:	b480      	push	{r7}
 8000f38:	b083      	sub	sp, #12
 8000f3a:	af00      	add	r7, sp, #0
 8000f3c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8000f3e:	bf00      	nop
 8000f40:	370c      	adds	r7, #12
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bc80      	pop	{r7}
 8000f46:	4770      	bx	lr

08000f48 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8000f48:	b480      	push	{r7}
 8000f4a:	b085      	sub	sp, #20
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
 8000f50:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000f52:	2300      	movs	r3, #0
 8000f54:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8000f56:	2300      	movs	r3, #0
 8000f58:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000f60:	2b01      	cmp	r3, #1
 8000f62:	d101      	bne.n	8000f68 <HAL_ADC_ConfigChannel+0x20>
 8000f64:	2302      	movs	r3, #2
 8000f66:	e0dc      	b.n	8001122 <HAL_ADC_ConfigChannel+0x1da>
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	2201      	movs	r2, #1
 8000f6c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000f70:	683b      	ldr	r3, [r7, #0]
 8000f72:	685b      	ldr	r3, [r3, #4]
 8000f74:	2b06      	cmp	r3, #6
 8000f76:	d81c      	bhi.n	8000fb2 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000f7e:	683b      	ldr	r3, [r7, #0]
 8000f80:	685a      	ldr	r2, [r3, #4]
 8000f82:	4613      	mov	r3, r2
 8000f84:	009b      	lsls	r3, r3, #2
 8000f86:	4413      	add	r3, r2
 8000f88:	3b05      	subs	r3, #5
 8000f8a:	221f      	movs	r2, #31
 8000f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f90:	43db      	mvns	r3, r3
 8000f92:	4019      	ands	r1, r3
 8000f94:	683b      	ldr	r3, [r7, #0]
 8000f96:	6818      	ldr	r0, [r3, #0]
 8000f98:	683b      	ldr	r3, [r7, #0]
 8000f9a:	685a      	ldr	r2, [r3, #4]
 8000f9c:	4613      	mov	r3, r2
 8000f9e:	009b      	lsls	r3, r3, #2
 8000fa0:	4413      	add	r3, r2
 8000fa2:	3b05      	subs	r3, #5
 8000fa4:	fa00 f203 	lsl.w	r2, r0, r3
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	430a      	orrs	r2, r1
 8000fae:	635a      	str	r2, [r3, #52]	; 0x34
 8000fb0:	e03c      	b.n	800102c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8000fb2:	683b      	ldr	r3, [r7, #0]
 8000fb4:	685b      	ldr	r3, [r3, #4]
 8000fb6:	2b0c      	cmp	r3, #12
 8000fb8:	d81c      	bhi.n	8000ff4 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000fc0:	683b      	ldr	r3, [r7, #0]
 8000fc2:	685a      	ldr	r2, [r3, #4]
 8000fc4:	4613      	mov	r3, r2
 8000fc6:	009b      	lsls	r3, r3, #2
 8000fc8:	4413      	add	r3, r2
 8000fca:	3b23      	subs	r3, #35	; 0x23
 8000fcc:	221f      	movs	r2, #31
 8000fce:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd2:	43db      	mvns	r3, r3
 8000fd4:	4019      	ands	r1, r3
 8000fd6:	683b      	ldr	r3, [r7, #0]
 8000fd8:	6818      	ldr	r0, [r3, #0]
 8000fda:	683b      	ldr	r3, [r7, #0]
 8000fdc:	685a      	ldr	r2, [r3, #4]
 8000fde:	4613      	mov	r3, r2
 8000fe0:	009b      	lsls	r3, r3, #2
 8000fe2:	4413      	add	r3, r2
 8000fe4:	3b23      	subs	r3, #35	; 0x23
 8000fe6:	fa00 f203 	lsl.w	r2, r0, r3
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	430a      	orrs	r2, r1
 8000ff0:	631a      	str	r2, [r3, #48]	; 0x30
 8000ff2:	e01b      	b.n	800102c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000ffa:	683b      	ldr	r3, [r7, #0]
 8000ffc:	685a      	ldr	r2, [r3, #4]
 8000ffe:	4613      	mov	r3, r2
 8001000:	009b      	lsls	r3, r3, #2
 8001002:	4413      	add	r3, r2
 8001004:	3b41      	subs	r3, #65	; 0x41
 8001006:	221f      	movs	r2, #31
 8001008:	fa02 f303 	lsl.w	r3, r2, r3
 800100c:	43db      	mvns	r3, r3
 800100e:	4019      	ands	r1, r3
 8001010:	683b      	ldr	r3, [r7, #0]
 8001012:	6818      	ldr	r0, [r3, #0]
 8001014:	683b      	ldr	r3, [r7, #0]
 8001016:	685a      	ldr	r2, [r3, #4]
 8001018:	4613      	mov	r3, r2
 800101a:	009b      	lsls	r3, r3, #2
 800101c:	4413      	add	r3, r2
 800101e:	3b41      	subs	r3, #65	; 0x41
 8001020:	fa00 f203 	lsl.w	r2, r0, r3
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	430a      	orrs	r2, r1
 800102a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 800102c:	683b      	ldr	r3, [r7, #0]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	2b09      	cmp	r3, #9
 8001032:	d91c      	bls.n	800106e <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	68d9      	ldr	r1, [r3, #12]
 800103a:	683b      	ldr	r3, [r7, #0]
 800103c:	681a      	ldr	r2, [r3, #0]
 800103e:	4613      	mov	r3, r2
 8001040:	005b      	lsls	r3, r3, #1
 8001042:	4413      	add	r3, r2
 8001044:	3b1e      	subs	r3, #30
 8001046:	2207      	movs	r2, #7
 8001048:	fa02 f303 	lsl.w	r3, r2, r3
 800104c:	43db      	mvns	r3, r3
 800104e:	4019      	ands	r1, r3
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	6898      	ldr	r0, [r3, #8]
 8001054:	683b      	ldr	r3, [r7, #0]
 8001056:	681a      	ldr	r2, [r3, #0]
 8001058:	4613      	mov	r3, r2
 800105a:	005b      	lsls	r3, r3, #1
 800105c:	4413      	add	r3, r2
 800105e:	3b1e      	subs	r3, #30
 8001060:	fa00 f203 	lsl.w	r2, r0, r3
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	430a      	orrs	r2, r1
 800106a:	60da      	str	r2, [r3, #12]
 800106c:	e019      	b.n	80010a2 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	6919      	ldr	r1, [r3, #16]
 8001074:	683b      	ldr	r3, [r7, #0]
 8001076:	681a      	ldr	r2, [r3, #0]
 8001078:	4613      	mov	r3, r2
 800107a:	005b      	lsls	r3, r3, #1
 800107c:	4413      	add	r3, r2
 800107e:	2207      	movs	r2, #7
 8001080:	fa02 f303 	lsl.w	r3, r2, r3
 8001084:	43db      	mvns	r3, r3
 8001086:	4019      	ands	r1, r3
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	6898      	ldr	r0, [r3, #8]
 800108c:	683b      	ldr	r3, [r7, #0]
 800108e:	681a      	ldr	r2, [r3, #0]
 8001090:	4613      	mov	r3, r2
 8001092:	005b      	lsls	r3, r3, #1
 8001094:	4413      	add	r3, r2
 8001096:	fa00 f203 	lsl.w	r2, r0, r3
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	430a      	orrs	r2, r1
 80010a0:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80010a2:	683b      	ldr	r3, [r7, #0]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	2b10      	cmp	r3, #16
 80010a8:	d003      	beq.n	80010b2 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80010aa:	683b      	ldr	r3, [r7, #0]
 80010ac:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80010ae:	2b11      	cmp	r3, #17
 80010b0:	d132      	bne.n	8001118 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	4a1d      	ldr	r2, [pc, #116]	; (800112c <HAL_ADC_ConfigChannel+0x1e4>)
 80010b8:	4293      	cmp	r3, r2
 80010ba:	d125      	bne.n	8001108 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	689b      	ldr	r3, [r3, #8]
 80010c2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d126      	bne.n	8001118 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	689a      	ldr	r2, [r3, #8]
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80010d8:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80010da:	683b      	ldr	r3, [r7, #0]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	2b10      	cmp	r3, #16
 80010e0:	d11a      	bne.n	8001118 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80010e2:	4b13      	ldr	r3, [pc, #76]	; (8001130 <HAL_ADC_ConfigChannel+0x1e8>)
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	4a13      	ldr	r2, [pc, #76]	; (8001134 <HAL_ADC_ConfigChannel+0x1ec>)
 80010e8:	fba2 2303 	umull	r2, r3, r2, r3
 80010ec:	0c9a      	lsrs	r2, r3, #18
 80010ee:	4613      	mov	r3, r2
 80010f0:	009b      	lsls	r3, r3, #2
 80010f2:	4413      	add	r3, r2
 80010f4:	005b      	lsls	r3, r3, #1
 80010f6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80010f8:	e002      	b.n	8001100 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80010fa:	68bb      	ldr	r3, [r7, #8]
 80010fc:	3b01      	subs	r3, #1
 80010fe:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001100:	68bb      	ldr	r3, [r7, #8]
 8001102:	2b00      	cmp	r3, #0
 8001104:	d1f9      	bne.n	80010fa <HAL_ADC_ConfigChannel+0x1b2>
 8001106:	e007      	b.n	8001118 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800110c:	f043 0220 	orr.w	r2, r3, #32
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001114:	2301      	movs	r3, #1
 8001116:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	2200      	movs	r2, #0
 800111c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001120:	7bfb      	ldrb	r3, [r7, #15]
}
 8001122:	4618      	mov	r0, r3
 8001124:	3714      	adds	r7, #20
 8001126:	46bd      	mov	sp, r7
 8001128:	bc80      	pop	{r7}
 800112a:	4770      	bx	lr
 800112c:	40012400 	.word	0x40012400
 8001130:	20000004 	.word	0x20000004
 8001134:	431bde83 	.word	0x431bde83

08001138 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b084      	sub	sp, #16
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001140:	2300      	movs	r3, #0
 8001142:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001144:	2300      	movs	r3, #0
 8001146:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	689b      	ldr	r3, [r3, #8]
 800114e:	f003 0301 	and.w	r3, r3, #1
 8001152:	2b01      	cmp	r3, #1
 8001154:	d039      	beq.n	80011ca <ADC_Enable+0x92>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	689a      	ldr	r2, [r3, #8]
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	f042 0201 	orr.w	r2, r2, #1
 8001164:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001166:	4b1b      	ldr	r3, [pc, #108]	; (80011d4 <ADC_Enable+0x9c>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	4a1b      	ldr	r2, [pc, #108]	; (80011d8 <ADC_Enable+0xa0>)
 800116c:	fba2 2303 	umull	r2, r3, r2, r3
 8001170:	0c9b      	lsrs	r3, r3, #18
 8001172:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001174:	e002      	b.n	800117c <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8001176:	68bb      	ldr	r3, [r7, #8]
 8001178:	3b01      	subs	r3, #1
 800117a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800117c:	68bb      	ldr	r3, [r7, #8]
 800117e:	2b00      	cmp	r3, #0
 8001180:	d1f9      	bne.n	8001176 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001182:	f7ff fc13 	bl	80009ac <HAL_GetTick>
 8001186:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001188:	e018      	b.n	80011bc <ADC_Enable+0x84>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800118a:	f7ff fc0f 	bl	80009ac <HAL_GetTick>
 800118e:	4602      	mov	r2, r0
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	1ad3      	subs	r3, r2, r3
 8001194:	2b02      	cmp	r3, #2
 8001196:	d911      	bls.n	80011bc <ADC_Enable+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800119c:	f043 0210 	orr.w	r2, r3, #16
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	629a      	str	r2, [r3, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011a8:	f043 0201 	orr.w	r2, r3, #1
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	2200      	movs	r2, #0
 80011b4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
        return HAL_ERROR;
 80011b8:	2301      	movs	r3, #1
 80011ba:	e007      	b.n	80011cc <ADC_Enable+0x94>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	689b      	ldr	r3, [r3, #8]
 80011c2:	f003 0301 	and.w	r3, r3, #1
 80011c6:	2b01      	cmp	r3, #1
 80011c8:	d1df      	bne.n	800118a <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80011ca:	2300      	movs	r3, #0
}
 80011cc:	4618      	mov	r0, r3
 80011ce:	3710      	adds	r7, #16
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bd80      	pop	{r7, pc}
 80011d4:	20000004 	.word	0x20000004
 80011d8:	431bde83 	.word	0x431bde83

080011dc <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b084      	sub	sp, #16
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80011e4:	2300      	movs	r3, #0
 80011e6:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	689b      	ldr	r3, [r3, #8]
 80011ee:	f003 0301 	and.w	r3, r3, #1
 80011f2:	2b01      	cmp	r3, #1
 80011f4:	d127      	bne.n	8001246 <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	689a      	ldr	r2, [r3, #8]
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	f022 0201 	bic.w	r2, r2, #1
 8001204:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001206:	f7ff fbd1 	bl	80009ac <HAL_GetTick>
 800120a:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 800120c:	e014      	b.n	8001238 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800120e:	f7ff fbcd 	bl	80009ac <HAL_GetTick>
 8001212:	4602      	mov	r2, r0
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	1ad3      	subs	r3, r2, r3
 8001218:	2b02      	cmp	r3, #2
 800121a:	d90d      	bls.n	8001238 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001220:	f043 0210 	orr.w	r2, r3, #16
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800122c:	f043 0201 	orr.w	r2, r3, #1
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 8001234:	2301      	movs	r3, #1
 8001236:	e007      	b.n	8001248 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	689b      	ldr	r3, [r3, #8]
 800123e:	f003 0301 	and.w	r3, r3, #1
 8001242:	2b01      	cmp	r3, #1
 8001244:	d0e3      	beq.n	800120e <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001246:	2300      	movs	r3, #0
}
 8001248:	4618      	mov	r0, r3
 800124a:	3710      	adds	r7, #16
 800124c:	46bd      	mov	sp, r7
 800124e:	bd80      	pop	{r7, pc}

08001250 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b084      	sub	sp, #16
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800125c:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001262:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001266:	2b00      	cmp	r3, #0
 8001268:	d127      	bne.n	80012ba <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800126e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001276:	68fb      	ldr	r3, [r7, #12]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	689b      	ldr	r3, [r3, #8]
 800127c:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001280:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001284:	d115      	bne.n	80012b2 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800128a:	2b00      	cmp	r3, #0
 800128c:	d111      	bne.n	80012b2 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001292:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800129e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d105      	bne.n	80012b2 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012aa:	f043 0201 	orr.w	r2, r3, #1
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80012b2:	68f8      	ldr	r0, [r7, #12]
 80012b4:	f7ff f938 	bl	8000528 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 80012b8:	e004      	b.n	80012c4 <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	6a1b      	ldr	r3, [r3, #32]
 80012be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012c0:	6878      	ldr	r0, [r7, #4]
 80012c2:	4798      	blx	r3
}
 80012c4:	bf00      	nop
 80012c6:	3710      	adds	r7, #16
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bd80      	pop	{r7, pc}

080012cc <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b084      	sub	sp, #16
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012d8:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80012da:	68f8      	ldr	r0, [r7, #12]
 80012dc:	f7ff f960 	bl	80005a0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80012e0:	bf00      	nop
 80012e2:	3710      	adds	r7, #16
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bd80      	pop	{r7, pc}

080012e8 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b084      	sub	sp, #16
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012f4:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012fa:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001306:	f043 0204 	orr.w	r2, r3, #4
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800130e:	68f8      	ldr	r0, [r7, #12]
 8001310:	f7ff fe11 	bl	8000f36 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001314:	bf00      	nop
 8001316:	3710      	adds	r7, #16
 8001318:	46bd      	mov	sp, r7
 800131a:	bd80      	pop	{r7, pc}

0800131c <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 800131c:	b590      	push	{r4, r7, lr}
 800131e:	b087      	sub	sp, #28
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001324:	2300      	movs	r3, #0
 8001326:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 8001328:	2300      	movs	r3, #0
 800132a:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001332:	2b01      	cmp	r3, #1
 8001334:	d101      	bne.n	800133a <HAL_ADCEx_Calibration_Start+0x1e>
 8001336:	2302      	movs	r3, #2
 8001338:	e086      	b.n	8001448 <HAL_ADCEx_Calibration_Start+0x12c>
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	2201      	movs	r2, #1
 800133e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  /* 1. Calibration prerequisite:                                             */
  /*    - ADC must be disabled for at least two ADC clock cycles in disable   */
  /*      mode before ADC enable                                              */
  /* Stop potential conversion on going, on regular and injected groups       */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001342:	6878      	ldr	r0, [r7, #4]
 8001344:	f7ff ff4a 	bl	80011dc <ADC_ConversionStop_Disable>
 8001348:	4603      	mov	r3, r0
 800134a:	75fb      	strb	r3, [r7, #23]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 800134c:	7dfb      	ldrb	r3, [r7, #23]
 800134e:	2b00      	cmp	r3, #0
 8001350:	d175      	bne.n	800143e <HAL_ADCEx_Calibration_Start+0x122>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001356:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800135a:	f023 0302 	bic.w	r3, r3, #2
 800135e:	f043 0202 	orr.w	r2, r3, #2
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8001366:	4b3a      	ldr	r3, [pc, #232]	; (8001450 <HAL_ADCEx_Calibration_Start+0x134>)
 8001368:	681c      	ldr	r4, [r3, #0]
 800136a:	2002      	movs	r0, #2
 800136c:	f002 fd74 	bl	8003e58 <HAL_RCCEx_GetPeriphCLKFreq>
 8001370:	4603      	mov	r3, r0
 8001372:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 8001376:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 8001378:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 800137a:	e002      	b.n	8001382 <HAL_ADCEx_Calibration_Start+0x66>
    {
      wait_loop_index--;
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	3b01      	subs	r3, #1
 8001380:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	2b00      	cmp	r3, #0
 8001386:	d1f9      	bne.n	800137c <HAL_ADCEx_Calibration_Start+0x60>
    }
    
    /* 2. Enable the ADC peripheral */
    ADC_Enable(hadc);
 8001388:	6878      	ldr	r0, [r7, #4]
 800138a:	f7ff fed5 	bl	8001138 <ADC_Enable>
    
    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	689a      	ldr	r2, [r3, #8]
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	f042 0208 	orr.w	r2, r2, #8
 800139c:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 800139e:	f7ff fb05 	bl	80009ac <HAL_GetTick>
 80013a2:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 80013a4:	e014      	b.n	80013d0 <HAL_ADCEx_Calibration_Start+0xb4>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 80013a6:	f7ff fb01 	bl	80009ac <HAL_GetTick>
 80013aa:	4602      	mov	r2, r0
 80013ac:	693b      	ldr	r3, [r7, #16]
 80013ae:	1ad3      	subs	r3, r2, r3
 80013b0:	2b0a      	cmp	r3, #10
 80013b2:	d90d      	bls.n	80013d0 <HAL_ADCEx_Calibration_Start+0xb4>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013b8:	f023 0312 	bic.w	r3, r3, #18
 80013bc:	f043 0210 	orr.w	r2, r3, #16
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	629a      	str	r2, [r3, #40]	; 0x28
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	2200      	movs	r2, #0
 80013c8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        
        return HAL_ERROR;
 80013cc:	2301      	movs	r3, #1
 80013ce:	e03b      	b.n	8001448 <HAL_ADCEx_Calibration_Start+0x12c>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	689b      	ldr	r3, [r3, #8]
 80013d6:	f003 0308 	and.w	r3, r3, #8
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d1e3      	bne.n	80013a6 <HAL_ADCEx_Calibration_Start+0x8a>
      }
    }
    
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	689a      	ldr	r2, [r3, #8]
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	f042 0204 	orr.w	r2, r2, #4
 80013ec:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 80013ee:	f7ff fadd 	bl	80009ac <HAL_GetTick>
 80013f2:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 80013f4:	e014      	b.n	8001420 <HAL_ADCEx_Calibration_Start+0x104>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 80013f6:	f7ff fad9 	bl	80009ac <HAL_GetTick>
 80013fa:	4602      	mov	r2, r0
 80013fc:	693b      	ldr	r3, [r7, #16]
 80013fe:	1ad3      	subs	r3, r2, r3
 8001400:	2b0a      	cmp	r3, #10
 8001402:	d90d      	bls.n	8001420 <HAL_ADCEx_Calibration_Start+0x104>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001408:	f023 0312 	bic.w	r3, r3, #18
 800140c:	f043 0210 	orr.w	r2, r3, #16
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	629a      	str	r2, [r3, #40]	; 0x28
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	2200      	movs	r2, #0
 8001418:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        
        return HAL_ERROR;
 800141c:	2301      	movs	r3, #1
 800141e:	e013      	b.n	8001448 <HAL_ADCEx_Calibration_Start+0x12c>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	689b      	ldr	r3, [r3, #8]
 8001426:	f003 0304 	and.w	r3, r3, #4
 800142a:	2b00      	cmp	r3, #0
 800142c:	d1e3      	bne.n	80013f6 <HAL_ADCEx_Calibration_Start+0xda>
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001432:	f023 0303 	bic.w	r3, r3, #3
 8001436:	f043 0201 	orr.w	r2, r3, #1
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	2200      	movs	r2, #0
 8001442:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001446:	7dfb      	ldrb	r3, [r7, #23]
}
 8001448:	4618      	mov	r0, r3
 800144a:	371c      	adds	r7, #28
 800144c:	46bd      	mov	sp, r7
 800144e:	bd90      	pop	{r4, r7, pc}
 8001450:	20000004 	.word	0x20000004

08001454 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001454:	b480      	push	{r7}
 8001456:	b085      	sub	sp, #20
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	f003 0307 	and.w	r3, r3, #7
 8001462:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001464:	4b0c      	ldr	r3, [pc, #48]	; (8001498 <__NVIC_SetPriorityGrouping+0x44>)
 8001466:	68db      	ldr	r3, [r3, #12]
 8001468:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800146a:	68ba      	ldr	r2, [r7, #8]
 800146c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001470:	4013      	ands	r3, r2
 8001472:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001478:	68bb      	ldr	r3, [r7, #8]
 800147a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800147c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001480:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001484:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001486:	4a04      	ldr	r2, [pc, #16]	; (8001498 <__NVIC_SetPriorityGrouping+0x44>)
 8001488:	68bb      	ldr	r3, [r7, #8]
 800148a:	60d3      	str	r3, [r2, #12]
}
 800148c:	bf00      	nop
 800148e:	3714      	adds	r7, #20
 8001490:	46bd      	mov	sp, r7
 8001492:	bc80      	pop	{r7}
 8001494:	4770      	bx	lr
 8001496:	bf00      	nop
 8001498:	e000ed00 	.word	0xe000ed00

0800149c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800149c:	b480      	push	{r7}
 800149e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014a0:	4b04      	ldr	r3, [pc, #16]	; (80014b4 <__NVIC_GetPriorityGrouping+0x18>)
 80014a2:	68db      	ldr	r3, [r3, #12]
 80014a4:	0a1b      	lsrs	r3, r3, #8
 80014a6:	f003 0307 	and.w	r3, r3, #7
}
 80014aa:	4618      	mov	r0, r3
 80014ac:	46bd      	mov	sp, r7
 80014ae:	bc80      	pop	{r7}
 80014b0:	4770      	bx	lr
 80014b2:	bf00      	nop
 80014b4:	e000ed00 	.word	0xe000ed00

080014b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014b8:	b480      	push	{r7}
 80014ba:	b083      	sub	sp, #12
 80014bc:	af00      	add	r7, sp, #0
 80014be:	4603      	mov	r3, r0
 80014c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	db0b      	blt.n	80014e2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80014ca:	79fb      	ldrb	r3, [r7, #7]
 80014cc:	f003 021f 	and.w	r2, r3, #31
 80014d0:	4906      	ldr	r1, [pc, #24]	; (80014ec <__NVIC_EnableIRQ+0x34>)
 80014d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014d6:	095b      	lsrs	r3, r3, #5
 80014d8:	2001      	movs	r0, #1
 80014da:	fa00 f202 	lsl.w	r2, r0, r2
 80014de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80014e2:	bf00      	nop
 80014e4:	370c      	adds	r7, #12
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bc80      	pop	{r7}
 80014ea:	4770      	bx	lr
 80014ec:	e000e100 	.word	0xe000e100

080014f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014f0:	b480      	push	{r7}
 80014f2:	b083      	sub	sp, #12
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	4603      	mov	r3, r0
 80014f8:	6039      	str	r1, [r7, #0]
 80014fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001500:	2b00      	cmp	r3, #0
 8001502:	db0a      	blt.n	800151a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001504:	683b      	ldr	r3, [r7, #0]
 8001506:	b2da      	uxtb	r2, r3
 8001508:	490c      	ldr	r1, [pc, #48]	; (800153c <__NVIC_SetPriority+0x4c>)
 800150a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800150e:	0112      	lsls	r2, r2, #4
 8001510:	b2d2      	uxtb	r2, r2
 8001512:	440b      	add	r3, r1
 8001514:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001518:	e00a      	b.n	8001530 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800151a:	683b      	ldr	r3, [r7, #0]
 800151c:	b2da      	uxtb	r2, r3
 800151e:	4908      	ldr	r1, [pc, #32]	; (8001540 <__NVIC_SetPriority+0x50>)
 8001520:	79fb      	ldrb	r3, [r7, #7]
 8001522:	f003 030f 	and.w	r3, r3, #15
 8001526:	3b04      	subs	r3, #4
 8001528:	0112      	lsls	r2, r2, #4
 800152a:	b2d2      	uxtb	r2, r2
 800152c:	440b      	add	r3, r1
 800152e:	761a      	strb	r2, [r3, #24]
}
 8001530:	bf00      	nop
 8001532:	370c      	adds	r7, #12
 8001534:	46bd      	mov	sp, r7
 8001536:	bc80      	pop	{r7}
 8001538:	4770      	bx	lr
 800153a:	bf00      	nop
 800153c:	e000e100 	.word	0xe000e100
 8001540:	e000ed00 	.word	0xe000ed00

08001544 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001544:	b480      	push	{r7}
 8001546:	b089      	sub	sp, #36	; 0x24
 8001548:	af00      	add	r7, sp, #0
 800154a:	60f8      	str	r0, [r7, #12]
 800154c:	60b9      	str	r1, [r7, #8]
 800154e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	f003 0307 	and.w	r3, r3, #7
 8001556:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001558:	69fb      	ldr	r3, [r7, #28]
 800155a:	f1c3 0307 	rsb	r3, r3, #7
 800155e:	2b04      	cmp	r3, #4
 8001560:	bf28      	it	cs
 8001562:	2304      	movcs	r3, #4
 8001564:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001566:	69fb      	ldr	r3, [r7, #28]
 8001568:	3304      	adds	r3, #4
 800156a:	2b06      	cmp	r3, #6
 800156c:	d902      	bls.n	8001574 <NVIC_EncodePriority+0x30>
 800156e:	69fb      	ldr	r3, [r7, #28]
 8001570:	3b03      	subs	r3, #3
 8001572:	e000      	b.n	8001576 <NVIC_EncodePriority+0x32>
 8001574:	2300      	movs	r3, #0
 8001576:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001578:	f04f 32ff 	mov.w	r2, #4294967295
 800157c:	69bb      	ldr	r3, [r7, #24]
 800157e:	fa02 f303 	lsl.w	r3, r2, r3
 8001582:	43da      	mvns	r2, r3
 8001584:	68bb      	ldr	r3, [r7, #8]
 8001586:	401a      	ands	r2, r3
 8001588:	697b      	ldr	r3, [r7, #20]
 800158a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800158c:	f04f 31ff 	mov.w	r1, #4294967295
 8001590:	697b      	ldr	r3, [r7, #20]
 8001592:	fa01 f303 	lsl.w	r3, r1, r3
 8001596:	43d9      	mvns	r1, r3
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800159c:	4313      	orrs	r3, r2
         );
}
 800159e:	4618      	mov	r0, r3
 80015a0:	3724      	adds	r7, #36	; 0x24
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bc80      	pop	{r7}
 80015a6:	4770      	bx	lr

080015a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b082      	sub	sp, #8
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	3b01      	subs	r3, #1
 80015b4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80015b8:	d301      	bcc.n	80015be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80015ba:	2301      	movs	r3, #1
 80015bc:	e00f      	b.n	80015de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015be:	4a0a      	ldr	r2, [pc, #40]	; (80015e8 <SysTick_Config+0x40>)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	3b01      	subs	r3, #1
 80015c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80015c6:	210f      	movs	r1, #15
 80015c8:	f04f 30ff 	mov.w	r0, #4294967295
 80015cc:	f7ff ff90 	bl	80014f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015d0:	4b05      	ldr	r3, [pc, #20]	; (80015e8 <SysTick_Config+0x40>)
 80015d2:	2200      	movs	r2, #0
 80015d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015d6:	4b04      	ldr	r3, [pc, #16]	; (80015e8 <SysTick_Config+0x40>)
 80015d8:	2207      	movs	r2, #7
 80015da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80015dc:	2300      	movs	r3, #0
}
 80015de:	4618      	mov	r0, r3
 80015e0:	3708      	adds	r7, #8
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bd80      	pop	{r7, pc}
 80015e6:	bf00      	nop
 80015e8:	e000e010 	.word	0xe000e010

080015ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b082      	sub	sp, #8
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015f4:	6878      	ldr	r0, [r7, #4]
 80015f6:	f7ff ff2d 	bl	8001454 <__NVIC_SetPriorityGrouping>
}
 80015fa:	bf00      	nop
 80015fc:	3708      	adds	r7, #8
 80015fe:	46bd      	mov	sp, r7
 8001600:	bd80      	pop	{r7, pc}

08001602 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001602:	b580      	push	{r7, lr}
 8001604:	b086      	sub	sp, #24
 8001606:	af00      	add	r7, sp, #0
 8001608:	4603      	mov	r3, r0
 800160a:	60b9      	str	r1, [r7, #8]
 800160c:	607a      	str	r2, [r7, #4]
 800160e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001610:	2300      	movs	r3, #0
 8001612:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001614:	f7ff ff42 	bl	800149c <__NVIC_GetPriorityGrouping>
 8001618:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800161a:	687a      	ldr	r2, [r7, #4]
 800161c:	68b9      	ldr	r1, [r7, #8]
 800161e:	6978      	ldr	r0, [r7, #20]
 8001620:	f7ff ff90 	bl	8001544 <NVIC_EncodePriority>
 8001624:	4602      	mov	r2, r0
 8001626:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800162a:	4611      	mov	r1, r2
 800162c:	4618      	mov	r0, r3
 800162e:	f7ff ff5f 	bl	80014f0 <__NVIC_SetPriority>
}
 8001632:	bf00      	nop
 8001634:	3718      	adds	r7, #24
 8001636:	46bd      	mov	sp, r7
 8001638:	bd80      	pop	{r7, pc}

0800163a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800163a:	b580      	push	{r7, lr}
 800163c:	b082      	sub	sp, #8
 800163e:	af00      	add	r7, sp, #0
 8001640:	4603      	mov	r3, r0
 8001642:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001644:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001648:	4618      	mov	r0, r3
 800164a:	f7ff ff35 	bl	80014b8 <__NVIC_EnableIRQ>
}
 800164e:	bf00      	nop
 8001650:	3708      	adds	r7, #8
 8001652:	46bd      	mov	sp, r7
 8001654:	bd80      	pop	{r7, pc}

08001656 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001656:	b580      	push	{r7, lr}
 8001658:	b082      	sub	sp, #8
 800165a:	af00      	add	r7, sp, #0
 800165c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800165e:	6878      	ldr	r0, [r7, #4]
 8001660:	f7ff ffa2 	bl	80015a8 <SysTick_Config>
 8001664:	4603      	mov	r3, r0
}
 8001666:	4618      	mov	r0, r3
 8001668:	3708      	adds	r7, #8
 800166a:	46bd      	mov	sp, r7
 800166c:	bd80      	pop	{r7, pc}
	...

08001670 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001670:	b480      	push	{r7}
 8001672:	b085      	sub	sp, #20
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001678:	2300      	movs	r3, #0
 800167a:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	2b00      	cmp	r3, #0
 8001680:	d101      	bne.n	8001686 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001682:	2301      	movs	r3, #1
 8001684:	e043      	b.n	800170e <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	461a      	mov	r2, r3
 800168c:	4b22      	ldr	r3, [pc, #136]	; (8001718 <HAL_DMA_Init+0xa8>)
 800168e:	4413      	add	r3, r2
 8001690:	4a22      	ldr	r2, [pc, #136]	; (800171c <HAL_DMA_Init+0xac>)
 8001692:	fba2 2303 	umull	r2, r3, r2, r3
 8001696:	091b      	lsrs	r3, r3, #4
 8001698:	009a      	lsls	r2, r3, #2
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	4a1f      	ldr	r2, [pc, #124]	; (8001720 <HAL_DMA_Init+0xb0>)
 80016a2:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	2202      	movs	r2, #2
 80016a8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80016ba:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80016be:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80016c8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	68db      	ldr	r3, [r3, #12]
 80016ce:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80016d4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	695b      	ldr	r3, [r3, #20]
 80016da:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80016e0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	69db      	ldr	r3, [r3, #28]
 80016e6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80016e8:	68fa      	ldr	r2, [r7, #12]
 80016ea:	4313      	orrs	r3, r2
 80016ec:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	68fa      	ldr	r2, [r7, #12]
 80016f4:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	2200      	movs	r2, #0
 80016fa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	2201      	movs	r2, #1
 8001700:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	2200      	movs	r2, #0
 8001708:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800170c:	2300      	movs	r3, #0
}
 800170e:	4618      	mov	r0, r3
 8001710:	3714      	adds	r7, #20
 8001712:	46bd      	mov	sp, r7
 8001714:	bc80      	pop	{r7}
 8001716:	4770      	bx	lr
 8001718:	bffdfff8 	.word	0xbffdfff8
 800171c:	cccccccd 	.word	0xcccccccd
 8001720:	40020000 	.word	0x40020000

08001724 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b086      	sub	sp, #24
 8001728:	af00      	add	r7, sp, #0
 800172a:	60f8      	str	r0, [r7, #12]
 800172c:	60b9      	str	r1, [r7, #8]
 800172e:	607a      	str	r2, [r7, #4]
 8001730:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001732:	2300      	movs	r3, #0
 8001734:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	f893 3020 	ldrb.w	r3, [r3, #32]
 800173c:	2b01      	cmp	r3, #1
 800173e:	d101      	bne.n	8001744 <HAL_DMA_Start_IT+0x20>
 8001740:	2302      	movs	r3, #2
 8001742:	e04a      	b.n	80017da <HAL_DMA_Start_IT+0xb6>
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	2201      	movs	r2, #1
 8001748:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001752:	2b01      	cmp	r3, #1
 8001754:	d13a      	bne.n	80017cc <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	2202      	movs	r2, #2
 800175a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	2200      	movs	r2, #0
 8001762:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	681a      	ldr	r2, [r3, #0]
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f022 0201 	bic.w	r2, r2, #1
 8001772:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001774:	683b      	ldr	r3, [r7, #0]
 8001776:	687a      	ldr	r2, [r7, #4]
 8001778:	68b9      	ldr	r1, [r7, #8]
 800177a:	68f8      	ldr	r0, [r7, #12]
 800177c:	f000 f972 	bl	8001a64 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001784:	2b00      	cmp	r3, #0
 8001786:	d008      	beq.n	800179a <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	681a      	ldr	r2, [r3, #0]
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f042 020e 	orr.w	r2, r2, #14
 8001796:	601a      	str	r2, [r3, #0]
 8001798:	e00f      	b.n	80017ba <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	681a      	ldr	r2, [r3, #0]
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f022 0204 	bic.w	r2, r2, #4
 80017a8:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	681a      	ldr	r2, [r3, #0]
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	f042 020a 	orr.w	r2, r2, #10
 80017b8:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	681a      	ldr	r2, [r3, #0]
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	f042 0201 	orr.w	r2, r2, #1
 80017c8:	601a      	str	r2, [r3, #0]
 80017ca:	e005      	b.n	80017d8 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	2200      	movs	r2, #0
 80017d0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80017d4:	2302      	movs	r3, #2
 80017d6:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 80017d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80017da:	4618      	mov	r0, r3
 80017dc:	3718      	adds	r7, #24
 80017de:	46bd      	mov	sp, r7
 80017e0:	bd80      	pop	{r7, pc}

080017e2 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80017e2:	b480      	push	{r7}
 80017e4:	b085      	sub	sp, #20
 80017e6:	af00      	add	r7, sp, #0
 80017e8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80017ea:	2300      	movs	r3, #0
 80017ec:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80017f4:	2b02      	cmp	r3, #2
 80017f6:	d008      	beq.n	800180a <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	2204      	movs	r2, #4
 80017fc:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	2200      	movs	r2, #0
 8001802:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001806:	2301      	movs	r3, #1
 8001808:	e020      	b.n	800184c <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	681a      	ldr	r2, [r3, #0]
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f022 020e 	bic.w	r2, r2, #14
 8001818:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	681a      	ldr	r2, [r3, #0]
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	f022 0201 	bic.w	r2, r2, #1
 8001828:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001832:	2101      	movs	r1, #1
 8001834:	fa01 f202 	lsl.w	r2, r1, r2
 8001838:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	2201      	movs	r2, #1
 800183e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	2200      	movs	r2, #0
 8001846:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 800184a:	7bfb      	ldrb	r3, [r7, #15]
}
 800184c:	4618      	mov	r0, r3
 800184e:	3714      	adds	r7, #20
 8001850:	46bd      	mov	sp, r7
 8001852:	bc80      	pop	{r7}
 8001854:	4770      	bx	lr
	...

08001858 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b084      	sub	sp, #16
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001874:	2204      	movs	r2, #4
 8001876:	409a      	lsls	r2, r3
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	4013      	ands	r3, r2
 800187c:	2b00      	cmp	r3, #0
 800187e:	d04f      	beq.n	8001920 <HAL_DMA_IRQHandler+0xc8>
 8001880:	68bb      	ldr	r3, [r7, #8]
 8001882:	f003 0304 	and.w	r3, r3, #4
 8001886:	2b00      	cmp	r3, #0
 8001888:	d04a      	beq.n	8001920 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f003 0320 	and.w	r3, r3, #32
 8001894:	2b00      	cmp	r3, #0
 8001896:	d107      	bne.n	80018a8 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	681a      	ldr	r2, [r3, #0]
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f022 0204 	bic.w	r2, r2, #4
 80018a6:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	4a66      	ldr	r2, [pc, #408]	; (8001a48 <HAL_DMA_IRQHandler+0x1f0>)
 80018ae:	4293      	cmp	r3, r2
 80018b0:	d029      	beq.n	8001906 <HAL_DMA_IRQHandler+0xae>
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	4a65      	ldr	r2, [pc, #404]	; (8001a4c <HAL_DMA_IRQHandler+0x1f4>)
 80018b8:	4293      	cmp	r3, r2
 80018ba:	d022      	beq.n	8001902 <HAL_DMA_IRQHandler+0xaa>
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	4a63      	ldr	r2, [pc, #396]	; (8001a50 <HAL_DMA_IRQHandler+0x1f8>)
 80018c2:	4293      	cmp	r3, r2
 80018c4:	d01a      	beq.n	80018fc <HAL_DMA_IRQHandler+0xa4>
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	4a62      	ldr	r2, [pc, #392]	; (8001a54 <HAL_DMA_IRQHandler+0x1fc>)
 80018cc:	4293      	cmp	r3, r2
 80018ce:	d012      	beq.n	80018f6 <HAL_DMA_IRQHandler+0x9e>
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	4a60      	ldr	r2, [pc, #384]	; (8001a58 <HAL_DMA_IRQHandler+0x200>)
 80018d6:	4293      	cmp	r3, r2
 80018d8:	d00a      	beq.n	80018f0 <HAL_DMA_IRQHandler+0x98>
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	4a5f      	ldr	r2, [pc, #380]	; (8001a5c <HAL_DMA_IRQHandler+0x204>)
 80018e0:	4293      	cmp	r3, r2
 80018e2:	d102      	bne.n	80018ea <HAL_DMA_IRQHandler+0x92>
 80018e4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80018e8:	e00e      	b.n	8001908 <HAL_DMA_IRQHandler+0xb0>
 80018ea:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80018ee:	e00b      	b.n	8001908 <HAL_DMA_IRQHandler+0xb0>
 80018f0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80018f4:	e008      	b.n	8001908 <HAL_DMA_IRQHandler+0xb0>
 80018f6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80018fa:	e005      	b.n	8001908 <HAL_DMA_IRQHandler+0xb0>
 80018fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001900:	e002      	b.n	8001908 <HAL_DMA_IRQHandler+0xb0>
 8001902:	2340      	movs	r3, #64	; 0x40
 8001904:	e000      	b.n	8001908 <HAL_DMA_IRQHandler+0xb0>
 8001906:	2304      	movs	r3, #4
 8001908:	4a55      	ldr	r2, [pc, #340]	; (8001a60 <HAL_DMA_IRQHandler+0x208>)
 800190a:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001910:	2b00      	cmp	r3, #0
 8001912:	f000 8094 	beq.w	8001a3e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800191a:	6878      	ldr	r0, [r7, #4]
 800191c:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 800191e:	e08e      	b.n	8001a3e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001924:	2202      	movs	r2, #2
 8001926:	409a      	lsls	r2, r3
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	4013      	ands	r3, r2
 800192c:	2b00      	cmp	r3, #0
 800192e:	d056      	beq.n	80019de <HAL_DMA_IRQHandler+0x186>
 8001930:	68bb      	ldr	r3, [r7, #8]
 8001932:	f003 0302 	and.w	r3, r3, #2
 8001936:	2b00      	cmp	r3, #0
 8001938:	d051      	beq.n	80019de <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f003 0320 	and.w	r3, r3, #32
 8001944:	2b00      	cmp	r3, #0
 8001946:	d10b      	bne.n	8001960 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	681a      	ldr	r2, [r3, #0]
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f022 020a 	bic.w	r2, r2, #10
 8001956:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	2201      	movs	r2, #1
 800195c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	4a38      	ldr	r2, [pc, #224]	; (8001a48 <HAL_DMA_IRQHandler+0x1f0>)
 8001966:	4293      	cmp	r3, r2
 8001968:	d029      	beq.n	80019be <HAL_DMA_IRQHandler+0x166>
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	4a37      	ldr	r2, [pc, #220]	; (8001a4c <HAL_DMA_IRQHandler+0x1f4>)
 8001970:	4293      	cmp	r3, r2
 8001972:	d022      	beq.n	80019ba <HAL_DMA_IRQHandler+0x162>
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	4a35      	ldr	r2, [pc, #212]	; (8001a50 <HAL_DMA_IRQHandler+0x1f8>)
 800197a:	4293      	cmp	r3, r2
 800197c:	d01a      	beq.n	80019b4 <HAL_DMA_IRQHandler+0x15c>
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	4a34      	ldr	r2, [pc, #208]	; (8001a54 <HAL_DMA_IRQHandler+0x1fc>)
 8001984:	4293      	cmp	r3, r2
 8001986:	d012      	beq.n	80019ae <HAL_DMA_IRQHandler+0x156>
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	4a32      	ldr	r2, [pc, #200]	; (8001a58 <HAL_DMA_IRQHandler+0x200>)
 800198e:	4293      	cmp	r3, r2
 8001990:	d00a      	beq.n	80019a8 <HAL_DMA_IRQHandler+0x150>
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	4a31      	ldr	r2, [pc, #196]	; (8001a5c <HAL_DMA_IRQHandler+0x204>)
 8001998:	4293      	cmp	r3, r2
 800199a:	d102      	bne.n	80019a2 <HAL_DMA_IRQHandler+0x14a>
 800199c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80019a0:	e00e      	b.n	80019c0 <HAL_DMA_IRQHandler+0x168>
 80019a2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80019a6:	e00b      	b.n	80019c0 <HAL_DMA_IRQHandler+0x168>
 80019a8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80019ac:	e008      	b.n	80019c0 <HAL_DMA_IRQHandler+0x168>
 80019ae:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80019b2:	e005      	b.n	80019c0 <HAL_DMA_IRQHandler+0x168>
 80019b4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80019b8:	e002      	b.n	80019c0 <HAL_DMA_IRQHandler+0x168>
 80019ba:	2320      	movs	r3, #32
 80019bc:	e000      	b.n	80019c0 <HAL_DMA_IRQHandler+0x168>
 80019be:	2302      	movs	r3, #2
 80019c0:	4a27      	ldr	r2, [pc, #156]	; (8001a60 <HAL_DMA_IRQHandler+0x208>)
 80019c2:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	2200      	movs	r2, #0
 80019c8:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d034      	beq.n	8001a3e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019d8:	6878      	ldr	r0, [r7, #4]
 80019da:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80019dc:	e02f      	b.n	8001a3e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019e2:	2208      	movs	r2, #8
 80019e4:	409a      	lsls	r2, r3
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	4013      	ands	r3, r2
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d028      	beq.n	8001a40 <HAL_DMA_IRQHandler+0x1e8>
 80019ee:	68bb      	ldr	r3, [r7, #8]
 80019f0:	f003 0308 	and.w	r3, r3, #8
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d023      	beq.n	8001a40 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	681a      	ldr	r2, [r3, #0]
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f022 020e 	bic.w	r2, r2, #14
 8001a06:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a10:	2101      	movs	r1, #1
 8001a12:	fa01 f202 	lsl.w	r2, r1, r2
 8001a16:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	2201      	movs	r2, #1
 8001a1c:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	2201      	movs	r2, #1
 8001a22:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	2200      	movs	r2, #0
 8001a2a:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d004      	beq.n	8001a40 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a3a:	6878      	ldr	r0, [r7, #4]
 8001a3c:	4798      	blx	r3
    }
  }
  return;
 8001a3e:	bf00      	nop
 8001a40:	bf00      	nop
}
 8001a42:	3710      	adds	r7, #16
 8001a44:	46bd      	mov	sp, r7
 8001a46:	bd80      	pop	{r7, pc}
 8001a48:	40020008 	.word	0x40020008
 8001a4c:	4002001c 	.word	0x4002001c
 8001a50:	40020030 	.word	0x40020030
 8001a54:	40020044 	.word	0x40020044
 8001a58:	40020058 	.word	0x40020058
 8001a5c:	4002006c 	.word	0x4002006c
 8001a60:	40020000 	.word	0x40020000

08001a64 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001a64:	b480      	push	{r7}
 8001a66:	b085      	sub	sp, #20
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	60f8      	str	r0, [r7, #12]
 8001a6c:	60b9      	str	r1, [r7, #8]
 8001a6e:	607a      	str	r2, [r7, #4]
 8001a70:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a7a:	2101      	movs	r1, #1
 8001a7c:	fa01 f202 	lsl.w	r2, r1, r2
 8001a80:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	683a      	ldr	r2, [r7, #0]
 8001a88:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	685b      	ldr	r3, [r3, #4]
 8001a8e:	2b10      	cmp	r3, #16
 8001a90:	d108      	bne.n	8001aa4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	687a      	ldr	r2, [r7, #4]
 8001a98:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	68ba      	ldr	r2, [r7, #8]
 8001aa0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001aa2:	e007      	b.n	8001ab4 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	68ba      	ldr	r2, [r7, #8]
 8001aaa:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	687a      	ldr	r2, [r7, #4]
 8001ab2:	60da      	str	r2, [r3, #12]
}
 8001ab4:	bf00      	nop
 8001ab6:	3714      	adds	r7, #20
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	bc80      	pop	{r7}
 8001abc:	4770      	bx	lr
	...

08001ac0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	b08b      	sub	sp, #44	; 0x2c
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
 8001ac8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001aca:	2300      	movs	r3, #0
 8001acc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001ace:	2300      	movs	r3, #0
 8001ad0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ad2:	e127      	b.n	8001d24 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001ad4:	2201      	movs	r2, #1
 8001ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ad8:	fa02 f303 	lsl.w	r3, r2, r3
 8001adc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001ade:	683b      	ldr	r3, [r7, #0]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	69fa      	ldr	r2, [r7, #28]
 8001ae4:	4013      	ands	r3, r2
 8001ae6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001ae8:	69ba      	ldr	r2, [r7, #24]
 8001aea:	69fb      	ldr	r3, [r7, #28]
 8001aec:	429a      	cmp	r2, r3
 8001aee:	f040 8116 	bne.w	8001d1e <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001af2:	683b      	ldr	r3, [r7, #0]
 8001af4:	685b      	ldr	r3, [r3, #4]
 8001af6:	2b12      	cmp	r3, #18
 8001af8:	d034      	beq.n	8001b64 <HAL_GPIO_Init+0xa4>
 8001afa:	2b12      	cmp	r3, #18
 8001afc:	d80d      	bhi.n	8001b1a <HAL_GPIO_Init+0x5a>
 8001afe:	2b02      	cmp	r3, #2
 8001b00:	d02b      	beq.n	8001b5a <HAL_GPIO_Init+0x9a>
 8001b02:	2b02      	cmp	r3, #2
 8001b04:	d804      	bhi.n	8001b10 <HAL_GPIO_Init+0x50>
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d031      	beq.n	8001b6e <HAL_GPIO_Init+0xae>
 8001b0a:	2b01      	cmp	r3, #1
 8001b0c:	d01c      	beq.n	8001b48 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001b0e:	e048      	b.n	8001ba2 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001b10:	2b03      	cmp	r3, #3
 8001b12:	d043      	beq.n	8001b9c <HAL_GPIO_Init+0xdc>
 8001b14:	2b11      	cmp	r3, #17
 8001b16:	d01b      	beq.n	8001b50 <HAL_GPIO_Init+0x90>
          break;
 8001b18:	e043      	b.n	8001ba2 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001b1a:	4a89      	ldr	r2, [pc, #548]	; (8001d40 <HAL_GPIO_Init+0x280>)
 8001b1c:	4293      	cmp	r3, r2
 8001b1e:	d026      	beq.n	8001b6e <HAL_GPIO_Init+0xae>
 8001b20:	4a87      	ldr	r2, [pc, #540]	; (8001d40 <HAL_GPIO_Init+0x280>)
 8001b22:	4293      	cmp	r3, r2
 8001b24:	d806      	bhi.n	8001b34 <HAL_GPIO_Init+0x74>
 8001b26:	4a87      	ldr	r2, [pc, #540]	; (8001d44 <HAL_GPIO_Init+0x284>)
 8001b28:	4293      	cmp	r3, r2
 8001b2a:	d020      	beq.n	8001b6e <HAL_GPIO_Init+0xae>
 8001b2c:	4a86      	ldr	r2, [pc, #536]	; (8001d48 <HAL_GPIO_Init+0x288>)
 8001b2e:	4293      	cmp	r3, r2
 8001b30:	d01d      	beq.n	8001b6e <HAL_GPIO_Init+0xae>
          break;
 8001b32:	e036      	b.n	8001ba2 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001b34:	4a85      	ldr	r2, [pc, #532]	; (8001d4c <HAL_GPIO_Init+0x28c>)
 8001b36:	4293      	cmp	r3, r2
 8001b38:	d019      	beq.n	8001b6e <HAL_GPIO_Init+0xae>
 8001b3a:	4a85      	ldr	r2, [pc, #532]	; (8001d50 <HAL_GPIO_Init+0x290>)
 8001b3c:	4293      	cmp	r3, r2
 8001b3e:	d016      	beq.n	8001b6e <HAL_GPIO_Init+0xae>
 8001b40:	4a84      	ldr	r2, [pc, #528]	; (8001d54 <HAL_GPIO_Init+0x294>)
 8001b42:	4293      	cmp	r3, r2
 8001b44:	d013      	beq.n	8001b6e <HAL_GPIO_Init+0xae>
          break;
 8001b46:	e02c      	b.n	8001ba2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	68db      	ldr	r3, [r3, #12]
 8001b4c:	623b      	str	r3, [r7, #32]
          break;
 8001b4e:	e028      	b.n	8001ba2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	68db      	ldr	r3, [r3, #12]
 8001b54:	3304      	adds	r3, #4
 8001b56:	623b      	str	r3, [r7, #32]
          break;
 8001b58:	e023      	b.n	8001ba2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	68db      	ldr	r3, [r3, #12]
 8001b5e:	3308      	adds	r3, #8
 8001b60:	623b      	str	r3, [r7, #32]
          break;
 8001b62:	e01e      	b.n	8001ba2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	68db      	ldr	r3, [r3, #12]
 8001b68:	330c      	adds	r3, #12
 8001b6a:	623b      	str	r3, [r7, #32]
          break;
 8001b6c:	e019      	b.n	8001ba2 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001b6e:	683b      	ldr	r3, [r7, #0]
 8001b70:	689b      	ldr	r3, [r3, #8]
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d102      	bne.n	8001b7c <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001b76:	2304      	movs	r3, #4
 8001b78:	623b      	str	r3, [r7, #32]
          break;
 8001b7a:	e012      	b.n	8001ba2 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	689b      	ldr	r3, [r3, #8]
 8001b80:	2b01      	cmp	r3, #1
 8001b82:	d105      	bne.n	8001b90 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001b84:	2308      	movs	r3, #8
 8001b86:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	69fa      	ldr	r2, [r7, #28]
 8001b8c:	611a      	str	r2, [r3, #16]
          break;
 8001b8e:	e008      	b.n	8001ba2 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001b90:	2308      	movs	r3, #8
 8001b92:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	69fa      	ldr	r2, [r7, #28]
 8001b98:	615a      	str	r2, [r3, #20]
          break;
 8001b9a:	e002      	b.n	8001ba2 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	623b      	str	r3, [r7, #32]
          break;
 8001ba0:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001ba2:	69bb      	ldr	r3, [r7, #24]
 8001ba4:	2bff      	cmp	r3, #255	; 0xff
 8001ba6:	d801      	bhi.n	8001bac <HAL_GPIO_Init+0xec>
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	e001      	b.n	8001bb0 <HAL_GPIO_Init+0xf0>
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	3304      	adds	r3, #4
 8001bb0:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001bb2:	69bb      	ldr	r3, [r7, #24]
 8001bb4:	2bff      	cmp	r3, #255	; 0xff
 8001bb6:	d802      	bhi.n	8001bbe <HAL_GPIO_Init+0xfe>
 8001bb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bba:	009b      	lsls	r3, r3, #2
 8001bbc:	e002      	b.n	8001bc4 <HAL_GPIO_Init+0x104>
 8001bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bc0:	3b08      	subs	r3, #8
 8001bc2:	009b      	lsls	r3, r3, #2
 8001bc4:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001bc6:	697b      	ldr	r3, [r7, #20]
 8001bc8:	681a      	ldr	r2, [r3, #0]
 8001bca:	210f      	movs	r1, #15
 8001bcc:	693b      	ldr	r3, [r7, #16]
 8001bce:	fa01 f303 	lsl.w	r3, r1, r3
 8001bd2:	43db      	mvns	r3, r3
 8001bd4:	401a      	ands	r2, r3
 8001bd6:	6a39      	ldr	r1, [r7, #32]
 8001bd8:	693b      	ldr	r3, [r7, #16]
 8001bda:	fa01 f303 	lsl.w	r3, r1, r3
 8001bde:	431a      	orrs	r2, r3
 8001be0:	697b      	ldr	r3, [r7, #20]
 8001be2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	685b      	ldr	r3, [r3, #4]
 8001be8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	f000 8096 	beq.w	8001d1e <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001bf2:	4b59      	ldr	r3, [pc, #356]	; (8001d58 <HAL_GPIO_Init+0x298>)
 8001bf4:	699b      	ldr	r3, [r3, #24]
 8001bf6:	4a58      	ldr	r2, [pc, #352]	; (8001d58 <HAL_GPIO_Init+0x298>)
 8001bf8:	f043 0301 	orr.w	r3, r3, #1
 8001bfc:	6193      	str	r3, [r2, #24]
 8001bfe:	4b56      	ldr	r3, [pc, #344]	; (8001d58 <HAL_GPIO_Init+0x298>)
 8001c00:	699b      	ldr	r3, [r3, #24]
 8001c02:	f003 0301 	and.w	r3, r3, #1
 8001c06:	60bb      	str	r3, [r7, #8]
 8001c08:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001c0a:	4a54      	ldr	r2, [pc, #336]	; (8001d5c <HAL_GPIO_Init+0x29c>)
 8001c0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c0e:	089b      	lsrs	r3, r3, #2
 8001c10:	3302      	adds	r3, #2
 8001c12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c16:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001c18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c1a:	f003 0303 	and.w	r3, r3, #3
 8001c1e:	009b      	lsls	r3, r3, #2
 8001c20:	220f      	movs	r2, #15
 8001c22:	fa02 f303 	lsl.w	r3, r2, r3
 8001c26:	43db      	mvns	r3, r3
 8001c28:	68fa      	ldr	r2, [r7, #12]
 8001c2a:	4013      	ands	r3, r2
 8001c2c:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	4a4b      	ldr	r2, [pc, #300]	; (8001d60 <HAL_GPIO_Init+0x2a0>)
 8001c32:	4293      	cmp	r3, r2
 8001c34:	d013      	beq.n	8001c5e <HAL_GPIO_Init+0x19e>
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	4a4a      	ldr	r2, [pc, #296]	; (8001d64 <HAL_GPIO_Init+0x2a4>)
 8001c3a:	4293      	cmp	r3, r2
 8001c3c:	d00d      	beq.n	8001c5a <HAL_GPIO_Init+0x19a>
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	4a49      	ldr	r2, [pc, #292]	; (8001d68 <HAL_GPIO_Init+0x2a8>)
 8001c42:	4293      	cmp	r3, r2
 8001c44:	d007      	beq.n	8001c56 <HAL_GPIO_Init+0x196>
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	4a48      	ldr	r2, [pc, #288]	; (8001d6c <HAL_GPIO_Init+0x2ac>)
 8001c4a:	4293      	cmp	r3, r2
 8001c4c:	d101      	bne.n	8001c52 <HAL_GPIO_Init+0x192>
 8001c4e:	2303      	movs	r3, #3
 8001c50:	e006      	b.n	8001c60 <HAL_GPIO_Init+0x1a0>
 8001c52:	2304      	movs	r3, #4
 8001c54:	e004      	b.n	8001c60 <HAL_GPIO_Init+0x1a0>
 8001c56:	2302      	movs	r3, #2
 8001c58:	e002      	b.n	8001c60 <HAL_GPIO_Init+0x1a0>
 8001c5a:	2301      	movs	r3, #1
 8001c5c:	e000      	b.n	8001c60 <HAL_GPIO_Init+0x1a0>
 8001c5e:	2300      	movs	r3, #0
 8001c60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c62:	f002 0203 	and.w	r2, r2, #3
 8001c66:	0092      	lsls	r2, r2, #2
 8001c68:	4093      	lsls	r3, r2
 8001c6a:	68fa      	ldr	r2, [r7, #12]
 8001c6c:	4313      	orrs	r3, r2
 8001c6e:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001c70:	493a      	ldr	r1, [pc, #232]	; (8001d5c <HAL_GPIO_Init+0x29c>)
 8001c72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c74:	089b      	lsrs	r3, r3, #2
 8001c76:	3302      	adds	r3, #2
 8001c78:	68fa      	ldr	r2, [r7, #12]
 8001c7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001c7e:	683b      	ldr	r3, [r7, #0]
 8001c80:	685b      	ldr	r3, [r3, #4]
 8001c82:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d006      	beq.n	8001c98 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001c8a:	4b39      	ldr	r3, [pc, #228]	; (8001d70 <HAL_GPIO_Init+0x2b0>)
 8001c8c:	681a      	ldr	r2, [r3, #0]
 8001c8e:	4938      	ldr	r1, [pc, #224]	; (8001d70 <HAL_GPIO_Init+0x2b0>)
 8001c90:	69bb      	ldr	r3, [r7, #24]
 8001c92:	4313      	orrs	r3, r2
 8001c94:	600b      	str	r3, [r1, #0]
 8001c96:	e006      	b.n	8001ca6 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001c98:	4b35      	ldr	r3, [pc, #212]	; (8001d70 <HAL_GPIO_Init+0x2b0>)
 8001c9a:	681a      	ldr	r2, [r3, #0]
 8001c9c:	69bb      	ldr	r3, [r7, #24]
 8001c9e:	43db      	mvns	r3, r3
 8001ca0:	4933      	ldr	r1, [pc, #204]	; (8001d70 <HAL_GPIO_Init+0x2b0>)
 8001ca2:	4013      	ands	r3, r2
 8001ca4:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001ca6:	683b      	ldr	r3, [r7, #0]
 8001ca8:	685b      	ldr	r3, [r3, #4]
 8001caa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d006      	beq.n	8001cc0 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001cb2:	4b2f      	ldr	r3, [pc, #188]	; (8001d70 <HAL_GPIO_Init+0x2b0>)
 8001cb4:	685a      	ldr	r2, [r3, #4]
 8001cb6:	492e      	ldr	r1, [pc, #184]	; (8001d70 <HAL_GPIO_Init+0x2b0>)
 8001cb8:	69bb      	ldr	r3, [r7, #24]
 8001cba:	4313      	orrs	r3, r2
 8001cbc:	604b      	str	r3, [r1, #4]
 8001cbe:	e006      	b.n	8001cce <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001cc0:	4b2b      	ldr	r3, [pc, #172]	; (8001d70 <HAL_GPIO_Init+0x2b0>)
 8001cc2:	685a      	ldr	r2, [r3, #4]
 8001cc4:	69bb      	ldr	r3, [r7, #24]
 8001cc6:	43db      	mvns	r3, r3
 8001cc8:	4929      	ldr	r1, [pc, #164]	; (8001d70 <HAL_GPIO_Init+0x2b0>)
 8001cca:	4013      	ands	r3, r2
 8001ccc:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001cce:	683b      	ldr	r3, [r7, #0]
 8001cd0:	685b      	ldr	r3, [r3, #4]
 8001cd2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d006      	beq.n	8001ce8 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001cda:	4b25      	ldr	r3, [pc, #148]	; (8001d70 <HAL_GPIO_Init+0x2b0>)
 8001cdc:	689a      	ldr	r2, [r3, #8]
 8001cde:	4924      	ldr	r1, [pc, #144]	; (8001d70 <HAL_GPIO_Init+0x2b0>)
 8001ce0:	69bb      	ldr	r3, [r7, #24]
 8001ce2:	4313      	orrs	r3, r2
 8001ce4:	608b      	str	r3, [r1, #8]
 8001ce6:	e006      	b.n	8001cf6 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001ce8:	4b21      	ldr	r3, [pc, #132]	; (8001d70 <HAL_GPIO_Init+0x2b0>)
 8001cea:	689a      	ldr	r2, [r3, #8]
 8001cec:	69bb      	ldr	r3, [r7, #24]
 8001cee:	43db      	mvns	r3, r3
 8001cf0:	491f      	ldr	r1, [pc, #124]	; (8001d70 <HAL_GPIO_Init+0x2b0>)
 8001cf2:	4013      	ands	r3, r2
 8001cf4:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001cf6:	683b      	ldr	r3, [r7, #0]
 8001cf8:	685b      	ldr	r3, [r3, #4]
 8001cfa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d006      	beq.n	8001d10 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001d02:	4b1b      	ldr	r3, [pc, #108]	; (8001d70 <HAL_GPIO_Init+0x2b0>)
 8001d04:	68da      	ldr	r2, [r3, #12]
 8001d06:	491a      	ldr	r1, [pc, #104]	; (8001d70 <HAL_GPIO_Init+0x2b0>)
 8001d08:	69bb      	ldr	r3, [r7, #24]
 8001d0a:	4313      	orrs	r3, r2
 8001d0c:	60cb      	str	r3, [r1, #12]
 8001d0e:	e006      	b.n	8001d1e <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001d10:	4b17      	ldr	r3, [pc, #92]	; (8001d70 <HAL_GPIO_Init+0x2b0>)
 8001d12:	68da      	ldr	r2, [r3, #12]
 8001d14:	69bb      	ldr	r3, [r7, #24]
 8001d16:	43db      	mvns	r3, r3
 8001d18:	4915      	ldr	r1, [pc, #84]	; (8001d70 <HAL_GPIO_Init+0x2b0>)
 8001d1a:	4013      	ands	r3, r2
 8001d1c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001d1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d20:	3301      	adds	r3, #1
 8001d22:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	681a      	ldr	r2, [r3, #0]
 8001d28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d2a:	fa22 f303 	lsr.w	r3, r2, r3
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	f47f aed0 	bne.w	8001ad4 <HAL_GPIO_Init+0x14>
  }
}
 8001d34:	bf00      	nop
 8001d36:	372c      	adds	r7, #44	; 0x2c
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	bc80      	pop	{r7}
 8001d3c:	4770      	bx	lr
 8001d3e:	bf00      	nop
 8001d40:	10210000 	.word	0x10210000
 8001d44:	10110000 	.word	0x10110000
 8001d48:	10120000 	.word	0x10120000
 8001d4c:	10310000 	.word	0x10310000
 8001d50:	10320000 	.word	0x10320000
 8001d54:	10220000 	.word	0x10220000
 8001d58:	40021000 	.word	0x40021000
 8001d5c:	40010000 	.word	0x40010000
 8001d60:	40010800 	.word	0x40010800
 8001d64:	40010c00 	.word	0x40010c00
 8001d68:	40011000 	.word	0x40011000
 8001d6c:	40011400 	.word	0x40011400
 8001d70:	40010400 	.word	0x40010400

08001d74 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d74:	b480      	push	{r7}
 8001d76:	b083      	sub	sp, #12
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
 8001d7c:	460b      	mov	r3, r1
 8001d7e:	807b      	strh	r3, [r7, #2]
 8001d80:	4613      	mov	r3, r2
 8001d82:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001d84:	787b      	ldrb	r3, [r7, #1]
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d003      	beq.n	8001d92 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d8a:	887a      	ldrh	r2, [r7, #2]
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001d90:	e003      	b.n	8001d9a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001d92:	887b      	ldrh	r3, [r7, #2]
 8001d94:	041a      	lsls	r2, r3, #16
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	611a      	str	r2, [r3, #16]
}
 8001d9a:	bf00      	nop
 8001d9c:	370c      	adds	r7, #12
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bc80      	pop	{r7}
 8001da2:	4770      	bx	lr

08001da4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b082      	sub	sp, #8
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	4603      	mov	r3, r0
 8001dac:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001dae:	4b08      	ldr	r3, [pc, #32]	; (8001dd0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001db0:	695a      	ldr	r2, [r3, #20]
 8001db2:	88fb      	ldrh	r3, [r7, #6]
 8001db4:	4013      	ands	r3, r2
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d006      	beq.n	8001dc8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001dba:	4a05      	ldr	r2, [pc, #20]	; (8001dd0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001dbc:	88fb      	ldrh	r3, [r7, #6]
 8001dbe:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001dc0:	88fb      	ldrh	r3, [r7, #6]
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	f7fe fb90 	bl	80004e8 <HAL_GPIO_EXTI_Callback>
  }
}
 8001dc8:	bf00      	nop
 8001dca:	3708      	adds	r7, #8
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	bd80      	pop	{r7, pc}
 8001dd0:	40010400 	.word	0x40010400

08001dd4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001dd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001dd6:	b08b      	sub	sp, #44	; 0x2c
 8001dd8:	af06      	add	r7, sp, #24
 8001dda:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d101      	bne.n	8001de6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001de2:	2301      	movs	r3, #1
 8001de4:	e0fd      	b.n	8001fe2 <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8001dec:	b2db      	uxtb	r3, r3
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d106      	bne.n	8001e00 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	2200      	movs	r2, #0
 8001df6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001dfa:	6878      	ldr	r0, [r7, #4]
 8001dfc:	f005 ff74 	bl	8007ce8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	2203      	movs	r2, #3
 8001e04:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	f002 f989 	bl	8004124 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	603b      	str	r3, [r7, #0]
 8001e18:	687e      	ldr	r6, [r7, #4]
 8001e1a:	466d      	mov	r5, sp
 8001e1c:	f106 0410 	add.w	r4, r6, #16
 8001e20:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e22:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e24:	6823      	ldr	r3, [r4, #0]
 8001e26:	602b      	str	r3, [r5, #0]
 8001e28:	1d33      	adds	r3, r6, #4
 8001e2a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001e2c:	6838      	ldr	r0, [r7, #0]
 8001e2e:	f002 f953 	bl	80040d8 <USB_CoreInit>
 8001e32:	4603      	mov	r3, r0
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d005      	beq.n	8001e44 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	2202      	movs	r2, #2
 8001e3c:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8001e40:	2301      	movs	r3, #1
 8001e42:	e0ce      	b.n	8001fe2 <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	2100      	movs	r1, #0
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	f002 f984 	bl	8004158 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e50:	2300      	movs	r3, #0
 8001e52:	73fb      	strb	r3, [r7, #15]
 8001e54:	e04c      	b.n	8001ef0 <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001e56:	7bfb      	ldrb	r3, [r7, #15]
 8001e58:	6879      	ldr	r1, [r7, #4]
 8001e5a:	1c5a      	adds	r2, r3, #1
 8001e5c:	4613      	mov	r3, r2
 8001e5e:	009b      	lsls	r3, r3, #2
 8001e60:	4413      	add	r3, r2
 8001e62:	00db      	lsls	r3, r3, #3
 8001e64:	440b      	add	r3, r1
 8001e66:	3301      	adds	r3, #1
 8001e68:	2201      	movs	r2, #1
 8001e6a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001e6c:	7bfb      	ldrb	r3, [r7, #15]
 8001e6e:	6879      	ldr	r1, [r7, #4]
 8001e70:	1c5a      	adds	r2, r3, #1
 8001e72:	4613      	mov	r3, r2
 8001e74:	009b      	lsls	r3, r3, #2
 8001e76:	4413      	add	r3, r2
 8001e78:	00db      	lsls	r3, r3, #3
 8001e7a:	440b      	add	r3, r1
 8001e7c:	7bfa      	ldrb	r2, [r7, #15]
 8001e7e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001e80:	7bfa      	ldrb	r2, [r7, #15]
 8001e82:	7bfb      	ldrb	r3, [r7, #15]
 8001e84:	b298      	uxth	r0, r3
 8001e86:	6879      	ldr	r1, [r7, #4]
 8001e88:	4613      	mov	r3, r2
 8001e8a:	009b      	lsls	r3, r3, #2
 8001e8c:	4413      	add	r3, r2
 8001e8e:	00db      	lsls	r3, r3, #3
 8001e90:	440b      	add	r3, r1
 8001e92:	3336      	adds	r3, #54	; 0x36
 8001e94:	4602      	mov	r2, r0
 8001e96:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001e98:	7bfb      	ldrb	r3, [r7, #15]
 8001e9a:	6879      	ldr	r1, [r7, #4]
 8001e9c:	1c5a      	adds	r2, r3, #1
 8001e9e:	4613      	mov	r3, r2
 8001ea0:	009b      	lsls	r3, r3, #2
 8001ea2:	4413      	add	r3, r2
 8001ea4:	00db      	lsls	r3, r3, #3
 8001ea6:	440b      	add	r3, r1
 8001ea8:	3303      	adds	r3, #3
 8001eaa:	2200      	movs	r2, #0
 8001eac:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001eae:	7bfa      	ldrb	r2, [r7, #15]
 8001eb0:	6879      	ldr	r1, [r7, #4]
 8001eb2:	4613      	mov	r3, r2
 8001eb4:	009b      	lsls	r3, r3, #2
 8001eb6:	4413      	add	r3, r2
 8001eb8:	00db      	lsls	r3, r3, #3
 8001eba:	440b      	add	r3, r1
 8001ebc:	3338      	adds	r3, #56	; 0x38
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001ec2:	7bfa      	ldrb	r2, [r7, #15]
 8001ec4:	6879      	ldr	r1, [r7, #4]
 8001ec6:	4613      	mov	r3, r2
 8001ec8:	009b      	lsls	r3, r3, #2
 8001eca:	4413      	add	r3, r2
 8001ecc:	00db      	lsls	r3, r3, #3
 8001ece:	440b      	add	r3, r1
 8001ed0:	333c      	adds	r3, #60	; 0x3c
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001ed6:	7bfa      	ldrb	r2, [r7, #15]
 8001ed8:	6879      	ldr	r1, [r7, #4]
 8001eda:	4613      	mov	r3, r2
 8001edc:	009b      	lsls	r3, r3, #2
 8001ede:	4413      	add	r3, r2
 8001ee0:	00db      	lsls	r3, r3, #3
 8001ee2:	440b      	add	r3, r1
 8001ee4:	3340      	adds	r3, #64	; 0x40
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001eea:	7bfb      	ldrb	r3, [r7, #15]
 8001eec:	3301      	adds	r3, #1
 8001eee:	73fb      	strb	r3, [r7, #15]
 8001ef0:	7bfa      	ldrb	r2, [r7, #15]
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	685b      	ldr	r3, [r3, #4]
 8001ef6:	429a      	cmp	r2, r3
 8001ef8:	d3ad      	bcc.n	8001e56 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001efa:	2300      	movs	r3, #0
 8001efc:	73fb      	strb	r3, [r7, #15]
 8001efe:	e044      	b.n	8001f8a <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001f00:	7bfa      	ldrb	r2, [r7, #15]
 8001f02:	6879      	ldr	r1, [r7, #4]
 8001f04:	4613      	mov	r3, r2
 8001f06:	009b      	lsls	r3, r3, #2
 8001f08:	4413      	add	r3, r2
 8001f0a:	00db      	lsls	r3, r3, #3
 8001f0c:	440b      	add	r3, r1
 8001f0e:	f203 1369 	addw	r3, r3, #361	; 0x169
 8001f12:	2200      	movs	r2, #0
 8001f14:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001f16:	7bfa      	ldrb	r2, [r7, #15]
 8001f18:	6879      	ldr	r1, [r7, #4]
 8001f1a:	4613      	mov	r3, r2
 8001f1c:	009b      	lsls	r3, r3, #2
 8001f1e:	4413      	add	r3, r2
 8001f20:	00db      	lsls	r3, r3, #3
 8001f22:	440b      	add	r3, r1
 8001f24:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001f28:	7bfa      	ldrb	r2, [r7, #15]
 8001f2a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001f2c:	7bfa      	ldrb	r2, [r7, #15]
 8001f2e:	6879      	ldr	r1, [r7, #4]
 8001f30:	4613      	mov	r3, r2
 8001f32:	009b      	lsls	r3, r3, #2
 8001f34:	4413      	add	r3, r2
 8001f36:	00db      	lsls	r3, r3, #3
 8001f38:	440b      	add	r3, r1
 8001f3a:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8001f3e:	2200      	movs	r2, #0
 8001f40:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001f42:	7bfa      	ldrb	r2, [r7, #15]
 8001f44:	6879      	ldr	r1, [r7, #4]
 8001f46:	4613      	mov	r3, r2
 8001f48:	009b      	lsls	r3, r3, #2
 8001f4a:	4413      	add	r3, r2
 8001f4c:	00db      	lsls	r3, r3, #3
 8001f4e:	440b      	add	r3, r1
 8001f50:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8001f54:	2200      	movs	r2, #0
 8001f56:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001f58:	7bfa      	ldrb	r2, [r7, #15]
 8001f5a:	6879      	ldr	r1, [r7, #4]
 8001f5c:	4613      	mov	r3, r2
 8001f5e:	009b      	lsls	r3, r3, #2
 8001f60:	4413      	add	r3, r2
 8001f62:	00db      	lsls	r3, r3, #3
 8001f64:	440b      	add	r3, r1
 8001f66:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001f6e:	7bfa      	ldrb	r2, [r7, #15]
 8001f70:	6879      	ldr	r1, [r7, #4]
 8001f72:	4613      	mov	r3, r2
 8001f74:	009b      	lsls	r3, r3, #2
 8001f76:	4413      	add	r3, r2
 8001f78:	00db      	lsls	r3, r3, #3
 8001f7a:	440b      	add	r3, r1
 8001f7c:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001f80:	2200      	movs	r2, #0
 8001f82:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f84:	7bfb      	ldrb	r3, [r7, #15]
 8001f86:	3301      	adds	r3, #1
 8001f88:	73fb      	strb	r3, [r7, #15]
 8001f8a:	7bfa      	ldrb	r2, [r7, #15]
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	685b      	ldr	r3, [r3, #4]
 8001f90:	429a      	cmp	r2, r3
 8001f92:	d3b5      	bcc.n	8001f00 <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	603b      	str	r3, [r7, #0]
 8001f9a:	687e      	ldr	r6, [r7, #4]
 8001f9c:	466d      	mov	r5, sp
 8001f9e:	f106 0410 	add.w	r4, r6, #16
 8001fa2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001fa4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001fa6:	6823      	ldr	r3, [r4, #0]
 8001fa8:	602b      	str	r3, [r5, #0]
 8001faa:	1d33      	adds	r3, r6, #4
 8001fac:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001fae:	6838      	ldr	r0, [r7, #0]
 8001fb0:	f002 f8de 	bl	8004170 <USB_DevInit>
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d005      	beq.n	8001fc6 <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	2202      	movs	r2, #2
 8001fbe:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8001fc2:	2301      	movs	r3, #1
 8001fc4:	e00d      	b.n	8001fe2 <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	2200      	movs	r2, #0
 8001fca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	2201      	movs	r2, #1
 8001fd2:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	4618      	mov	r0, r3
 8001fdc:	f004 f878 	bl	80060d0 <USB_DevDisconnect>

  return HAL_OK;
 8001fe0:	2300      	movs	r3, #0
}
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	3714      	adds	r7, #20
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001fea <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001fea:	b580      	push	{r7, lr}
 8001fec:	b082      	sub	sp, #8
 8001fee:	af00      	add	r7, sp, #0
 8001ff0:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001ff8:	2b01      	cmp	r3, #1
 8001ffa:	d101      	bne.n	8002000 <HAL_PCD_Start+0x16>
 8001ffc:	2302      	movs	r3, #2
 8001ffe:	e016      	b.n	800202e <HAL_PCD_Start+0x44>
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	2201      	movs	r2, #1
 8002004:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	4618      	mov	r0, r3
 800200e:	f002 f873 	bl	80040f8 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8002012:	2101      	movs	r1, #1
 8002014:	6878      	ldr	r0, [r7, #4]
 8002016:	f006 f8e2 	bl	80081de <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	4618      	mov	r0, r3
 8002020:	f004 f84c 	bl	80060bc <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	2200      	movs	r2, #0
 8002028:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800202c:	2300      	movs	r3, #0
}
 800202e:	4618      	mov	r0, r3
 8002030:	3708      	adds	r7, #8
 8002032:	46bd      	mov	sp, r7
 8002034:	bd80      	pop	{r7, pc}

08002036 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002036:	b580      	push	{r7, lr}
 8002038:	b088      	sub	sp, #32
 800203a:	af00      	add	r7, sp, #0
 800203c:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	4618      	mov	r0, r3
 8002044:	f004 f84e 	bl	80060e4 <USB_ReadInterrupts>
 8002048:	4603      	mov	r3, r0
 800204a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800204e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002052:	d102      	bne.n	800205a <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8002054:	6878      	ldr	r0, [r7, #4]
 8002056:	f000 fb61 	bl	800271c <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	4618      	mov	r0, r3
 8002060:	f004 f840 	bl	80060e4 <USB_ReadInterrupts>
 8002064:	4603      	mov	r3, r0
 8002066:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800206a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800206e:	d112      	bne.n	8002096 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002078:	b29a      	uxth	r2, r3
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002082:	b292      	uxth	r2, r2
 8002084:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8002088:	6878      	ldr	r0, [r7, #4]
 800208a:	f005 feb0 	bl	8007dee <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 800208e:	2100      	movs	r1, #0
 8002090:	6878      	ldr	r0, [r7, #4]
 8002092:	f000 f925 	bl	80022e0 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	4618      	mov	r0, r3
 800209c:	f004 f822 	bl	80060e4 <USB_ReadInterrupts>
 80020a0:	4603      	mov	r3, r0
 80020a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80020a6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80020aa:	d10b      	bne.n	80020c4 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80020b4:	b29a      	uxth	r2, r3
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80020be:	b292      	uxth	r2, r2
 80020c0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	4618      	mov	r0, r3
 80020ca:	f004 f80b 	bl	80060e4 <USB_ReadInterrupts>
 80020ce:	4603      	mov	r3, r0
 80020d0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80020d4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80020d8:	d10b      	bne.n	80020f2 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80020e2:	b29a      	uxth	r2, r3
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80020ec:	b292      	uxth	r2, r2
 80020ee:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	4618      	mov	r0, r3
 80020f8:	f003 fff4 	bl	80060e4 <USB_ReadInterrupts>
 80020fc:	4603      	mov	r3, r0
 80020fe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002102:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002106:	d126      	bne.n	8002156 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002110:	b29a      	uxth	r2, r3
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f022 0204 	bic.w	r2, r2, #4
 800211a:	b292      	uxth	r2, r2
 800211c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002128:	b29a      	uxth	r2, r3
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f022 0208 	bic.w	r2, r2, #8
 8002132:	b292      	uxth	r2, r2
 8002134:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8002138:	6878      	ldr	r0, [r7, #4]
 800213a:	f005 fe91 	bl	8007e60 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002146:	b29a      	uxth	r2, r3
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002150:	b292      	uxth	r2, r2
 8002152:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	4618      	mov	r0, r3
 800215c:	f003 ffc2 	bl	80060e4 <USB_ReadInterrupts>
 8002160:	4603      	mov	r3, r0
 8002162:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002166:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800216a:	f040 8084 	bne.w	8002276 <HAL_PCD_IRQHandler+0x240>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 800216e:	2300      	movs	r3, #0
 8002170:	77fb      	strb	r3, [r7, #31]
 8002172:	e011      	b.n	8002198 <HAL_PCD_IRQHandler+0x162>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	461a      	mov	r2, r3
 800217a:	7ffb      	ldrb	r3, [r7, #31]
 800217c:	009b      	lsls	r3, r3, #2
 800217e:	441a      	add	r2, r3
 8002180:	7ffb      	ldrb	r3, [r7, #31]
 8002182:	8812      	ldrh	r2, [r2, #0]
 8002184:	b292      	uxth	r2, r2
 8002186:	005b      	lsls	r3, r3, #1
 8002188:	f107 0120 	add.w	r1, r7, #32
 800218c:	440b      	add	r3, r1
 800218e:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 8002192:	7ffb      	ldrb	r3, [r7, #31]
 8002194:	3301      	adds	r3, #1
 8002196:	77fb      	strb	r3, [r7, #31]
 8002198:	7ffb      	ldrb	r3, [r7, #31]
 800219a:	2b07      	cmp	r3, #7
 800219c:	d9ea      	bls.n	8002174 <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80021a6:	b29a      	uxth	r2, r3
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f042 0201 	orr.w	r2, r2, #1
 80021b0:	b292      	uxth	r2, r2
 80021b2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80021be:	b29a      	uxth	r2, r3
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f022 0201 	bic.w	r2, r2, #1
 80021c8:	b292      	uxth	r2, r2
 80021ca:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 80021ce:	bf00      	nop
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80021d8:	b29b      	uxth	r3, r3
 80021da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d0f6      	beq.n	80021d0 <HAL_PCD_IRQHandler+0x19a>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80021ea:	b29a      	uxth	r2, r3
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80021f4:	b292      	uxth	r2, r2
 80021f6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 80021fa:	2300      	movs	r3, #0
 80021fc:	77fb      	strb	r3, [r7, #31]
 80021fe:	e010      	b.n	8002222 <HAL_PCD_IRQHandler+0x1ec>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8002200:	7ffb      	ldrb	r3, [r7, #31]
 8002202:	687a      	ldr	r2, [r7, #4]
 8002204:	6812      	ldr	r2, [r2, #0]
 8002206:	4611      	mov	r1, r2
 8002208:	7ffa      	ldrb	r2, [r7, #31]
 800220a:	0092      	lsls	r2, r2, #2
 800220c:	440a      	add	r2, r1
 800220e:	005b      	lsls	r3, r3, #1
 8002210:	f107 0120 	add.w	r1, r7, #32
 8002214:	440b      	add	r3, r1
 8002216:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 800221a:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 800221c:	7ffb      	ldrb	r3, [r7, #31]
 800221e:	3301      	adds	r3, #1
 8002220:	77fb      	strb	r3, [r7, #31]
 8002222:	7ffb      	ldrb	r3, [r7, #31]
 8002224:	2b07      	cmp	r3, #7
 8002226:	d9eb      	bls.n	8002200 <HAL_PCD_IRQHandler+0x1ca>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002230:	b29a      	uxth	r2, r3
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f042 0208 	orr.w	r2, r2, #8
 800223a:	b292      	uxth	r2, r2
 800223c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002248:	b29a      	uxth	r2, r3
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002252:	b292      	uxth	r2, r2
 8002254:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002260:	b29a      	uxth	r2, r3
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f042 0204 	orr.w	r2, r2, #4
 800226a:	b292      	uxth	r2, r2
 800226c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8002270:	6878      	ldr	r0, [r7, #4]
 8002272:	f005 fddb 	bl	8007e2c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	4618      	mov	r0, r3
 800227c:	f003 ff32 	bl	80060e4 <USB_ReadInterrupts>
 8002280:	4603      	mov	r3, r0
 8002282:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002286:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800228a:	d10e      	bne.n	80022aa <HAL_PCD_IRQHandler+0x274>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002294:	b29a      	uxth	r2, r3
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800229e:	b292      	uxth	r2, r2
 80022a0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80022a4:	6878      	ldr	r0, [r7, #4]
 80022a6:	f005 fd94 	bl	8007dd2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	4618      	mov	r0, r3
 80022b0:	f003 ff18 	bl	80060e4 <USB_ReadInterrupts>
 80022b4:	4603      	mov	r3, r0
 80022b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80022be:	d10b      	bne.n	80022d8 <HAL_PCD_IRQHandler+0x2a2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80022c8:	b29a      	uxth	r2, r3
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80022d2:	b292      	uxth	r2, r2
 80022d4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 80022d8:	bf00      	nop
 80022da:	3720      	adds	r7, #32
 80022dc:	46bd      	mov	sp, r7
 80022de:	bd80      	pop	{r7, pc}

080022e0 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b082      	sub	sp, #8
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
 80022e8:	460b      	mov	r3, r1
 80022ea:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80022f2:	2b01      	cmp	r3, #1
 80022f4:	d101      	bne.n	80022fa <HAL_PCD_SetAddress+0x1a>
 80022f6:	2302      	movs	r3, #2
 80022f8:	e013      	b.n	8002322 <HAL_PCD_SetAddress+0x42>
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	2201      	movs	r2, #1
 80022fe:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	78fa      	ldrb	r2, [r7, #3]
 8002306:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	78fa      	ldrb	r2, [r7, #3]
 8002310:	4611      	mov	r1, r2
 8002312:	4618      	mov	r0, r3
 8002314:	f003 febf 	bl	8006096 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	2200      	movs	r2, #0
 800231c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002320:	2300      	movs	r3, #0
}
 8002322:	4618      	mov	r0, r3
 8002324:	3708      	adds	r7, #8
 8002326:	46bd      	mov	sp, r7
 8002328:	bd80      	pop	{r7, pc}

0800232a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800232a:	b580      	push	{r7, lr}
 800232c:	b084      	sub	sp, #16
 800232e:	af00      	add	r7, sp, #0
 8002330:	6078      	str	r0, [r7, #4]
 8002332:	4608      	mov	r0, r1
 8002334:	4611      	mov	r1, r2
 8002336:	461a      	mov	r2, r3
 8002338:	4603      	mov	r3, r0
 800233a:	70fb      	strb	r3, [r7, #3]
 800233c:	460b      	mov	r3, r1
 800233e:	803b      	strh	r3, [r7, #0]
 8002340:	4613      	mov	r3, r2
 8002342:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002344:	2300      	movs	r3, #0
 8002346:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002348:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800234c:	2b00      	cmp	r3, #0
 800234e:	da0e      	bge.n	800236e <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002350:	78fb      	ldrb	r3, [r7, #3]
 8002352:	f003 0307 	and.w	r3, r3, #7
 8002356:	1c5a      	adds	r2, r3, #1
 8002358:	4613      	mov	r3, r2
 800235a:	009b      	lsls	r3, r3, #2
 800235c:	4413      	add	r3, r2
 800235e:	00db      	lsls	r3, r3, #3
 8002360:	687a      	ldr	r2, [r7, #4]
 8002362:	4413      	add	r3, r2
 8002364:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	2201      	movs	r2, #1
 800236a:	705a      	strb	r2, [r3, #1]
 800236c:	e00e      	b.n	800238c <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800236e:	78fb      	ldrb	r3, [r7, #3]
 8002370:	f003 0207 	and.w	r2, r3, #7
 8002374:	4613      	mov	r3, r2
 8002376:	009b      	lsls	r3, r3, #2
 8002378:	4413      	add	r3, r2
 800237a:	00db      	lsls	r3, r3, #3
 800237c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002380:	687a      	ldr	r2, [r7, #4]
 8002382:	4413      	add	r3, r2
 8002384:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	2200      	movs	r2, #0
 800238a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800238c:	78fb      	ldrb	r3, [r7, #3]
 800238e:	f003 0307 	and.w	r3, r3, #7
 8002392:	b2da      	uxtb	r2, r3
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002398:	883a      	ldrh	r2, [r7, #0]
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	78ba      	ldrb	r2, [r7, #2]
 80023a2:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	785b      	ldrb	r3, [r3, #1]
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d004      	beq.n	80023b6 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	781b      	ldrb	r3, [r3, #0]
 80023b0:	b29a      	uxth	r2, r3
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80023b6:	78bb      	ldrb	r3, [r7, #2]
 80023b8:	2b02      	cmp	r3, #2
 80023ba:	d102      	bne.n	80023c2 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	2200      	movs	r2, #0
 80023c0:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80023c8:	2b01      	cmp	r3, #1
 80023ca:	d101      	bne.n	80023d0 <HAL_PCD_EP_Open+0xa6>
 80023cc:	2302      	movs	r3, #2
 80023ce:	e00e      	b.n	80023ee <HAL_PCD_EP_Open+0xc4>
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2201      	movs	r2, #1
 80023d4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	68f9      	ldr	r1, [r7, #12]
 80023de:	4618      	mov	r0, r3
 80023e0:	f001 fee6 	bl	80041b0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	2200      	movs	r2, #0
 80023e8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 80023ec:	7afb      	ldrb	r3, [r7, #11]
}
 80023ee:	4618      	mov	r0, r3
 80023f0:	3710      	adds	r7, #16
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bd80      	pop	{r7, pc}

080023f6 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80023f6:	b580      	push	{r7, lr}
 80023f8:	b084      	sub	sp, #16
 80023fa:	af00      	add	r7, sp, #0
 80023fc:	6078      	str	r0, [r7, #4]
 80023fe:	460b      	mov	r3, r1
 8002400:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002402:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002406:	2b00      	cmp	r3, #0
 8002408:	da0e      	bge.n	8002428 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800240a:	78fb      	ldrb	r3, [r7, #3]
 800240c:	f003 0307 	and.w	r3, r3, #7
 8002410:	1c5a      	adds	r2, r3, #1
 8002412:	4613      	mov	r3, r2
 8002414:	009b      	lsls	r3, r3, #2
 8002416:	4413      	add	r3, r2
 8002418:	00db      	lsls	r3, r3, #3
 800241a:	687a      	ldr	r2, [r7, #4]
 800241c:	4413      	add	r3, r2
 800241e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	2201      	movs	r2, #1
 8002424:	705a      	strb	r2, [r3, #1]
 8002426:	e00e      	b.n	8002446 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002428:	78fb      	ldrb	r3, [r7, #3]
 800242a:	f003 0207 	and.w	r2, r3, #7
 800242e:	4613      	mov	r3, r2
 8002430:	009b      	lsls	r3, r3, #2
 8002432:	4413      	add	r3, r2
 8002434:	00db      	lsls	r3, r3, #3
 8002436:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800243a:	687a      	ldr	r2, [r7, #4]
 800243c:	4413      	add	r3, r2
 800243e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	2200      	movs	r2, #0
 8002444:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002446:	78fb      	ldrb	r3, [r7, #3]
 8002448:	f003 0307 	and.w	r3, r3, #7
 800244c:	b2da      	uxtb	r2, r3
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002458:	2b01      	cmp	r3, #1
 800245a:	d101      	bne.n	8002460 <HAL_PCD_EP_Close+0x6a>
 800245c:	2302      	movs	r3, #2
 800245e:	e00e      	b.n	800247e <HAL_PCD_EP_Close+0x88>
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	2201      	movs	r2, #1
 8002464:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	68f9      	ldr	r1, [r7, #12]
 800246e:	4618      	mov	r0, r3
 8002470:	f002 fa08 	bl	8004884 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	2200      	movs	r2, #0
 8002478:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 800247c:	2300      	movs	r3, #0
}
 800247e:	4618      	mov	r0, r3
 8002480:	3710      	adds	r7, #16
 8002482:	46bd      	mov	sp, r7
 8002484:	bd80      	pop	{r7, pc}

08002486 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002486:	b580      	push	{r7, lr}
 8002488:	b086      	sub	sp, #24
 800248a:	af00      	add	r7, sp, #0
 800248c:	60f8      	str	r0, [r7, #12]
 800248e:	607a      	str	r2, [r7, #4]
 8002490:	603b      	str	r3, [r7, #0]
 8002492:	460b      	mov	r3, r1
 8002494:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002496:	7afb      	ldrb	r3, [r7, #11]
 8002498:	f003 0207 	and.w	r2, r3, #7
 800249c:	4613      	mov	r3, r2
 800249e:	009b      	lsls	r3, r3, #2
 80024a0:	4413      	add	r3, r2
 80024a2:	00db      	lsls	r3, r3, #3
 80024a4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80024a8:	68fa      	ldr	r2, [r7, #12]
 80024aa:	4413      	add	r3, r2
 80024ac:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80024ae:	697b      	ldr	r3, [r7, #20]
 80024b0:	687a      	ldr	r2, [r7, #4]
 80024b2:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80024b4:	697b      	ldr	r3, [r7, #20]
 80024b6:	683a      	ldr	r2, [r7, #0]
 80024b8:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80024ba:	697b      	ldr	r3, [r7, #20]
 80024bc:	2200      	movs	r2, #0
 80024be:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80024c0:	697b      	ldr	r3, [r7, #20]
 80024c2:	2200      	movs	r2, #0
 80024c4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80024c6:	7afb      	ldrb	r3, [r7, #11]
 80024c8:	f003 0307 	and.w	r3, r3, #7
 80024cc:	b2da      	uxtb	r2, r3
 80024ce:	697b      	ldr	r3, [r7, #20]
 80024d0:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80024d2:	7afb      	ldrb	r3, [r7, #11]
 80024d4:	f003 0307 	and.w	r3, r3, #7
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d106      	bne.n	80024ea <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	6979      	ldr	r1, [r7, #20]
 80024e2:	4618      	mov	r0, r3
 80024e4:	f002 fbba 	bl	8004c5c <USB_EPStartXfer>
 80024e8:	e005      	b.n	80024f6 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	6979      	ldr	r1, [r7, #20]
 80024f0:	4618      	mov	r0, r3
 80024f2:	f002 fbb3 	bl	8004c5c <USB_EPStartXfer>
  }

  return HAL_OK;
 80024f6:	2300      	movs	r3, #0
}
 80024f8:	4618      	mov	r0, r3
 80024fa:	3718      	adds	r7, #24
 80024fc:	46bd      	mov	sp, r7
 80024fe:	bd80      	pop	{r7, pc}

08002500 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002500:	b480      	push	{r7}
 8002502:	b083      	sub	sp, #12
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
 8002508:	460b      	mov	r3, r1
 800250a:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800250c:	78fb      	ldrb	r3, [r7, #3]
 800250e:	f003 0207 	and.w	r2, r3, #7
 8002512:	6879      	ldr	r1, [r7, #4]
 8002514:	4613      	mov	r3, r2
 8002516:	009b      	lsls	r3, r3, #2
 8002518:	4413      	add	r3, r2
 800251a:	00db      	lsls	r3, r3, #3
 800251c:	440b      	add	r3, r1
 800251e:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8002522:	681b      	ldr	r3, [r3, #0]
}
 8002524:	4618      	mov	r0, r3
 8002526:	370c      	adds	r7, #12
 8002528:	46bd      	mov	sp, r7
 800252a:	bc80      	pop	{r7}
 800252c:	4770      	bx	lr

0800252e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800252e:	b580      	push	{r7, lr}
 8002530:	b086      	sub	sp, #24
 8002532:	af00      	add	r7, sp, #0
 8002534:	60f8      	str	r0, [r7, #12]
 8002536:	607a      	str	r2, [r7, #4]
 8002538:	603b      	str	r3, [r7, #0]
 800253a:	460b      	mov	r3, r1
 800253c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800253e:	7afb      	ldrb	r3, [r7, #11]
 8002540:	f003 0307 	and.w	r3, r3, #7
 8002544:	1c5a      	adds	r2, r3, #1
 8002546:	4613      	mov	r3, r2
 8002548:	009b      	lsls	r3, r3, #2
 800254a:	4413      	add	r3, r2
 800254c:	00db      	lsls	r3, r3, #3
 800254e:	68fa      	ldr	r2, [r7, #12]
 8002550:	4413      	add	r3, r2
 8002552:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002554:	697b      	ldr	r3, [r7, #20]
 8002556:	687a      	ldr	r2, [r7, #4]
 8002558:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800255a:	697b      	ldr	r3, [r7, #20]
 800255c:	683a      	ldr	r2, [r7, #0]
 800255e:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8002560:	697b      	ldr	r3, [r7, #20]
 8002562:	2201      	movs	r2, #1
 8002564:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8002568:	697b      	ldr	r3, [r7, #20]
 800256a:	683a      	ldr	r2, [r7, #0]
 800256c:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 800256e:	697b      	ldr	r3, [r7, #20]
 8002570:	2200      	movs	r2, #0
 8002572:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8002574:	697b      	ldr	r3, [r7, #20]
 8002576:	2201      	movs	r2, #1
 8002578:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800257a:	7afb      	ldrb	r3, [r7, #11]
 800257c:	f003 0307 	and.w	r3, r3, #7
 8002580:	b2da      	uxtb	r2, r3
 8002582:	697b      	ldr	r3, [r7, #20]
 8002584:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002586:	7afb      	ldrb	r3, [r7, #11]
 8002588:	f003 0307 	and.w	r3, r3, #7
 800258c:	2b00      	cmp	r3, #0
 800258e:	d106      	bne.n	800259e <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	6979      	ldr	r1, [r7, #20]
 8002596:	4618      	mov	r0, r3
 8002598:	f002 fb60 	bl	8004c5c <USB_EPStartXfer>
 800259c:	e005      	b.n	80025aa <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	6979      	ldr	r1, [r7, #20]
 80025a4:	4618      	mov	r0, r3
 80025a6:	f002 fb59 	bl	8004c5c <USB_EPStartXfer>
  }

  return HAL_OK;
 80025aa:	2300      	movs	r3, #0
}
 80025ac:	4618      	mov	r0, r3
 80025ae:	3718      	adds	r7, #24
 80025b0:	46bd      	mov	sp, r7
 80025b2:	bd80      	pop	{r7, pc}

080025b4 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b084      	sub	sp, #16
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
 80025bc:	460b      	mov	r3, r1
 80025be:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80025c0:	78fb      	ldrb	r3, [r7, #3]
 80025c2:	f003 0207 	and.w	r2, r3, #7
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	685b      	ldr	r3, [r3, #4]
 80025ca:	429a      	cmp	r2, r3
 80025cc:	d901      	bls.n	80025d2 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80025ce:	2301      	movs	r3, #1
 80025d0:	e04c      	b.n	800266c <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80025d2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	da0e      	bge.n	80025f8 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80025da:	78fb      	ldrb	r3, [r7, #3]
 80025dc:	f003 0307 	and.w	r3, r3, #7
 80025e0:	1c5a      	adds	r2, r3, #1
 80025e2:	4613      	mov	r3, r2
 80025e4:	009b      	lsls	r3, r3, #2
 80025e6:	4413      	add	r3, r2
 80025e8:	00db      	lsls	r3, r3, #3
 80025ea:	687a      	ldr	r2, [r7, #4]
 80025ec:	4413      	add	r3, r2
 80025ee:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	2201      	movs	r2, #1
 80025f4:	705a      	strb	r2, [r3, #1]
 80025f6:	e00c      	b.n	8002612 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80025f8:	78fa      	ldrb	r2, [r7, #3]
 80025fa:	4613      	mov	r3, r2
 80025fc:	009b      	lsls	r3, r3, #2
 80025fe:	4413      	add	r3, r2
 8002600:	00db      	lsls	r3, r3, #3
 8002602:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002606:	687a      	ldr	r2, [r7, #4]
 8002608:	4413      	add	r3, r2
 800260a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	2200      	movs	r2, #0
 8002610:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	2201      	movs	r2, #1
 8002616:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002618:	78fb      	ldrb	r3, [r7, #3]
 800261a:	f003 0307 	and.w	r3, r3, #7
 800261e:	b2da      	uxtb	r2, r3
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800262a:	2b01      	cmp	r3, #1
 800262c:	d101      	bne.n	8002632 <HAL_PCD_EP_SetStall+0x7e>
 800262e:	2302      	movs	r3, #2
 8002630:	e01c      	b.n	800266c <HAL_PCD_EP_SetStall+0xb8>
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	2201      	movs	r2, #1
 8002636:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	68f9      	ldr	r1, [r7, #12]
 8002640:	4618      	mov	r0, r3
 8002642:	f003 fc2b 	bl	8005e9c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002646:	78fb      	ldrb	r3, [r7, #3]
 8002648:	f003 0307 	and.w	r3, r3, #7
 800264c:	2b00      	cmp	r3, #0
 800264e:	d108      	bne.n	8002662 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681a      	ldr	r2, [r3, #0]
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800265a:	4619      	mov	r1, r3
 800265c:	4610      	mov	r0, r2
 800265e:	f003 fd50 	bl	8006102 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	2200      	movs	r2, #0
 8002666:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800266a:	2300      	movs	r3, #0
}
 800266c:	4618      	mov	r0, r3
 800266e:	3710      	adds	r7, #16
 8002670:	46bd      	mov	sp, r7
 8002672:	bd80      	pop	{r7, pc}

08002674 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b084      	sub	sp, #16
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
 800267c:	460b      	mov	r3, r1
 800267e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002680:	78fb      	ldrb	r3, [r7, #3]
 8002682:	f003 020f 	and.w	r2, r3, #15
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	685b      	ldr	r3, [r3, #4]
 800268a:	429a      	cmp	r2, r3
 800268c:	d901      	bls.n	8002692 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800268e:	2301      	movs	r3, #1
 8002690:	e040      	b.n	8002714 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002692:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002696:	2b00      	cmp	r3, #0
 8002698:	da0e      	bge.n	80026b8 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800269a:	78fb      	ldrb	r3, [r7, #3]
 800269c:	f003 0307 	and.w	r3, r3, #7
 80026a0:	1c5a      	adds	r2, r3, #1
 80026a2:	4613      	mov	r3, r2
 80026a4:	009b      	lsls	r3, r3, #2
 80026a6:	4413      	add	r3, r2
 80026a8:	00db      	lsls	r3, r3, #3
 80026aa:	687a      	ldr	r2, [r7, #4]
 80026ac:	4413      	add	r3, r2
 80026ae:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	2201      	movs	r2, #1
 80026b4:	705a      	strb	r2, [r3, #1]
 80026b6:	e00e      	b.n	80026d6 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80026b8:	78fb      	ldrb	r3, [r7, #3]
 80026ba:	f003 0207 	and.w	r2, r3, #7
 80026be:	4613      	mov	r3, r2
 80026c0:	009b      	lsls	r3, r3, #2
 80026c2:	4413      	add	r3, r2
 80026c4:	00db      	lsls	r3, r3, #3
 80026c6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80026ca:	687a      	ldr	r2, [r7, #4]
 80026cc:	4413      	add	r3, r2
 80026ce:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	2200      	movs	r2, #0
 80026d4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	2200      	movs	r2, #0
 80026da:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80026dc:	78fb      	ldrb	r3, [r7, #3]
 80026de:	f003 0307 	and.w	r3, r3, #7
 80026e2:	b2da      	uxtb	r2, r3
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80026ee:	2b01      	cmp	r3, #1
 80026f0:	d101      	bne.n	80026f6 <HAL_PCD_EP_ClrStall+0x82>
 80026f2:	2302      	movs	r3, #2
 80026f4:	e00e      	b.n	8002714 <HAL_PCD_EP_ClrStall+0xa0>
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	2201      	movs	r2, #1
 80026fa:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	68f9      	ldr	r1, [r7, #12]
 8002704:	4618      	mov	r0, r3
 8002706:	f003 fc19 	bl	8005f3c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	2200      	movs	r2, #0
 800270e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002712:	2300      	movs	r3, #0
}
 8002714:	4618      	mov	r0, r3
 8002716:	3710      	adds	r7, #16
 8002718:	46bd      	mov	sp, r7
 800271a:	bd80      	pop	{r7, pc}

0800271c <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	b08e      	sub	sp, #56	; 0x38
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002724:	e2df      	b.n	8002ce6 <PCD_EP_ISR_Handler+0x5ca>
  {
    wIstr = hpcd->Instance->ISTR;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800272e:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8002730:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002732:	b2db      	uxtb	r3, r3
 8002734:	f003 030f 	and.w	r3, r3, #15
 8002738:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 800273c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002740:	2b00      	cmp	r3, #0
 8002742:	f040 8158 	bne.w	80029f6 <PCD_EP_ISR_Handler+0x2da>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8002746:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002748:	f003 0310 	and.w	r3, r3, #16
 800274c:	2b00      	cmp	r3, #0
 800274e:	d152      	bne.n	80027f6 <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	881b      	ldrh	r3, [r3, #0]
 8002756:	b29b      	uxth	r3, r3
 8002758:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800275c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002760:	81fb      	strh	r3, [r7, #14]
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681a      	ldr	r2, [r3, #0]
 8002766:	89fb      	ldrh	r3, [r7, #14]
 8002768:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800276c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002770:	b29b      	uxth	r3, r3
 8002772:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	3328      	adds	r3, #40	; 0x28
 8002778:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002782:	b29b      	uxth	r3, r3
 8002784:	461a      	mov	r2, r3
 8002786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002788:	781b      	ldrb	r3, [r3, #0]
 800278a:	00db      	lsls	r3, r3, #3
 800278c:	4413      	add	r3, r2
 800278e:	3302      	adds	r3, #2
 8002790:	005b      	lsls	r3, r3, #1
 8002792:	687a      	ldr	r2, [r7, #4]
 8002794:	6812      	ldr	r2, [r2, #0]
 8002796:	4413      	add	r3, r2
 8002798:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800279c:	881b      	ldrh	r3, [r3, #0]
 800279e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80027a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027a4:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80027a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027a8:	695a      	ldr	r2, [r3, #20]
 80027aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ac:	69db      	ldr	r3, [r3, #28]
 80027ae:	441a      	add	r2, r3
 80027b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027b2:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80027b4:	2100      	movs	r1, #0
 80027b6:	6878      	ldr	r0, [r7, #4]
 80027b8:	f005 faf1 	bl	8007d9e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80027c2:	b2db      	uxtb	r3, r3
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	f000 828e 	beq.w	8002ce6 <PCD_EP_ISR_Handler+0x5ca>
 80027ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027cc:	699b      	ldr	r3, [r3, #24]
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	f040 8289 	bne.w	8002ce6 <PCD_EP_ISR_Handler+0x5ca>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80027da:	b2db      	uxtb	r3, r3
 80027dc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80027e0:	b2da      	uxtb	r2, r3
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	b292      	uxth	r2, r2
 80027e8:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	2200      	movs	r2, #0
 80027f0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80027f4:	e277      	b.n	8002ce6 <PCD_EP_ISR_Handler+0x5ca>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80027fc:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	881b      	ldrh	r3, [r3, #0]
 8002804:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8002806:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002808:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800280c:	2b00      	cmp	r3, #0
 800280e:	d034      	beq.n	800287a <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002818:	b29b      	uxth	r3, r3
 800281a:	461a      	mov	r2, r3
 800281c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800281e:	781b      	ldrb	r3, [r3, #0]
 8002820:	00db      	lsls	r3, r3, #3
 8002822:	4413      	add	r3, r2
 8002824:	3306      	adds	r3, #6
 8002826:	005b      	lsls	r3, r3, #1
 8002828:	687a      	ldr	r2, [r7, #4]
 800282a:	6812      	ldr	r2, [r2, #0]
 800282c:	4413      	add	r3, r2
 800282e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002832:	881b      	ldrh	r3, [r3, #0]
 8002834:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800283a:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	6818      	ldr	r0, [r3, #0]
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8002846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002848:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800284a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800284c:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800284e:	b29b      	uxth	r3, r3
 8002850:	f003 fca6 	bl	80061a0 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	881b      	ldrh	r3, [r3, #0]
 800285a:	b29a      	uxth	r2, r3
 800285c:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002860:	4013      	ands	r3, r2
 8002862:	823b      	strh	r3, [r7, #16]
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	8a3a      	ldrh	r2, [r7, #16]
 800286a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800286e:	b292      	uxth	r2, r2
 8002870:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8002872:	6878      	ldr	r0, [r7, #4]
 8002874:	f005 fa66 	bl	8007d44 <HAL_PCD_SetupStageCallback>
 8002878:	e235      	b.n	8002ce6 <PCD_EP_ISR_Handler+0x5ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800287a:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800287e:	2b00      	cmp	r3, #0
 8002880:	f280 8231 	bge.w	8002ce6 <PCD_EP_ISR_Handler+0x5ca>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	881b      	ldrh	r3, [r3, #0]
 800288a:	b29a      	uxth	r2, r3
 800288c:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002890:	4013      	ands	r3, r2
 8002892:	83bb      	strh	r3, [r7, #28]
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	8bba      	ldrh	r2, [r7, #28]
 800289a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800289e:	b292      	uxth	r2, r2
 80028a0:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80028aa:	b29b      	uxth	r3, r3
 80028ac:	461a      	mov	r2, r3
 80028ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028b0:	781b      	ldrb	r3, [r3, #0]
 80028b2:	00db      	lsls	r3, r3, #3
 80028b4:	4413      	add	r3, r2
 80028b6:	3306      	adds	r3, #6
 80028b8:	005b      	lsls	r3, r3, #1
 80028ba:	687a      	ldr	r2, [r7, #4]
 80028bc:	6812      	ldr	r2, [r2, #0]
 80028be:	4413      	add	r3, r2
 80028c0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80028c4:	881b      	ldrh	r3, [r3, #0]
 80028c6:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80028ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028cc:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80028ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028d0:	69db      	ldr	r3, [r3, #28]
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d019      	beq.n	800290a <PCD_EP_ISR_Handler+0x1ee>
 80028d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028d8:	695b      	ldr	r3, [r3, #20]
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d015      	beq.n	800290a <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6818      	ldr	r0, [r3, #0]
 80028e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028e4:	6959      	ldr	r1, [r3, #20]
 80028e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028e8:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80028ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ec:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80028ee:	b29b      	uxth	r3, r3
 80028f0:	f003 fc56 	bl	80061a0 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80028f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028f6:	695a      	ldr	r2, [r3, #20]
 80028f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028fa:	69db      	ldr	r3, [r3, #28]
 80028fc:	441a      	add	r2, r3
 80028fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002900:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8002902:	2100      	movs	r1, #0
 8002904:	6878      	ldr	r0, [r7, #4]
 8002906:	f005 fa2f 	bl	8007d68 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	61bb      	str	r3, [r7, #24]
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002918:	b29b      	uxth	r3, r3
 800291a:	461a      	mov	r2, r3
 800291c:	69bb      	ldr	r3, [r7, #24]
 800291e:	4413      	add	r3, r2
 8002920:	61bb      	str	r3, [r7, #24]
 8002922:	69bb      	ldr	r3, [r7, #24]
 8002924:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002928:	617b      	str	r3, [r7, #20]
 800292a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800292c:	691b      	ldr	r3, [r3, #16]
 800292e:	2b00      	cmp	r3, #0
 8002930:	d112      	bne.n	8002958 <PCD_EP_ISR_Handler+0x23c>
 8002932:	697b      	ldr	r3, [r7, #20]
 8002934:	881b      	ldrh	r3, [r3, #0]
 8002936:	b29b      	uxth	r3, r3
 8002938:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800293c:	b29a      	uxth	r2, r3
 800293e:	697b      	ldr	r3, [r7, #20]
 8002940:	801a      	strh	r2, [r3, #0]
 8002942:	697b      	ldr	r3, [r7, #20]
 8002944:	881b      	ldrh	r3, [r3, #0]
 8002946:	b29b      	uxth	r3, r3
 8002948:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800294c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002950:	b29a      	uxth	r2, r3
 8002952:	697b      	ldr	r3, [r7, #20]
 8002954:	801a      	strh	r2, [r3, #0]
 8002956:	e02f      	b.n	80029b8 <PCD_EP_ISR_Handler+0x29c>
 8002958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800295a:	691b      	ldr	r3, [r3, #16]
 800295c:	2b3e      	cmp	r3, #62	; 0x3e
 800295e:	d813      	bhi.n	8002988 <PCD_EP_ISR_Handler+0x26c>
 8002960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002962:	691b      	ldr	r3, [r3, #16]
 8002964:	085b      	lsrs	r3, r3, #1
 8002966:	633b      	str	r3, [r7, #48]	; 0x30
 8002968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800296a:	691b      	ldr	r3, [r3, #16]
 800296c:	f003 0301 	and.w	r3, r3, #1
 8002970:	2b00      	cmp	r3, #0
 8002972:	d002      	beq.n	800297a <PCD_EP_ISR_Handler+0x25e>
 8002974:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002976:	3301      	adds	r3, #1
 8002978:	633b      	str	r3, [r7, #48]	; 0x30
 800297a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800297c:	b29b      	uxth	r3, r3
 800297e:	029b      	lsls	r3, r3, #10
 8002980:	b29a      	uxth	r2, r3
 8002982:	697b      	ldr	r3, [r7, #20]
 8002984:	801a      	strh	r2, [r3, #0]
 8002986:	e017      	b.n	80029b8 <PCD_EP_ISR_Handler+0x29c>
 8002988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800298a:	691b      	ldr	r3, [r3, #16]
 800298c:	095b      	lsrs	r3, r3, #5
 800298e:	633b      	str	r3, [r7, #48]	; 0x30
 8002990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002992:	691b      	ldr	r3, [r3, #16]
 8002994:	f003 031f 	and.w	r3, r3, #31
 8002998:	2b00      	cmp	r3, #0
 800299a:	d102      	bne.n	80029a2 <PCD_EP_ISR_Handler+0x286>
 800299c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800299e:	3b01      	subs	r3, #1
 80029a0:	633b      	str	r3, [r7, #48]	; 0x30
 80029a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029a4:	b29b      	uxth	r3, r3
 80029a6:	029b      	lsls	r3, r3, #10
 80029a8:	b29b      	uxth	r3, r3
 80029aa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80029ae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80029b2:	b29a      	uxth	r2, r3
 80029b4:	697b      	ldr	r3, [r7, #20]
 80029b6:	801a      	strh	r2, [r3, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	881b      	ldrh	r3, [r3, #0]
 80029be:	b29b      	uxth	r3, r3
 80029c0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80029c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029c8:	827b      	strh	r3, [r7, #18]
 80029ca:	8a7b      	ldrh	r3, [r7, #18]
 80029cc:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80029d0:	827b      	strh	r3, [r7, #18]
 80029d2:	8a7b      	ldrh	r3, [r7, #18]
 80029d4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80029d8:	827b      	strh	r3, [r7, #18]
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681a      	ldr	r2, [r3, #0]
 80029de:	8a7b      	ldrh	r3, [r7, #18]
 80029e0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80029e4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80029e8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80029ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80029f0:	b29b      	uxth	r3, r3
 80029f2:	8013      	strh	r3, [r2, #0]
 80029f4:	e177      	b.n	8002ce6 <PCD_EP_ISR_Handler+0x5ca>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	461a      	mov	r2, r3
 80029fc:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002a00:	009b      	lsls	r3, r3, #2
 8002a02:	4413      	add	r3, r2
 8002a04:	881b      	ldrh	r3, [r3, #0]
 8002a06:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002a08:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	f280 80ea 	bge.w	8002be6 <PCD_EP_ISR_Handler+0x4ca>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	461a      	mov	r2, r3
 8002a18:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002a1c:	009b      	lsls	r3, r3, #2
 8002a1e:	4413      	add	r3, r2
 8002a20:	881b      	ldrh	r3, [r3, #0]
 8002a22:	b29a      	uxth	r2, r3
 8002a24:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002a28:	4013      	ands	r3, r2
 8002a2a:	853b      	strh	r3, [r7, #40]	; 0x28
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	461a      	mov	r2, r3
 8002a32:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002a36:	009b      	lsls	r3, r3, #2
 8002a38:	4413      	add	r3, r2
 8002a3a:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8002a3c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002a40:	b292      	uxth	r2, r2
 8002a42:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8002a44:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8002a48:	4613      	mov	r3, r2
 8002a4a:	009b      	lsls	r3, r3, #2
 8002a4c:	4413      	add	r3, r2
 8002a4e:	00db      	lsls	r3, r3, #3
 8002a50:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002a54:	687a      	ldr	r2, [r7, #4]
 8002a56:	4413      	add	r3, r2
 8002a58:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8002a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a5c:	7b1b      	ldrb	r3, [r3, #12]
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d122      	bne.n	8002aa8 <PCD_EP_ISR_Handler+0x38c>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002a6a:	b29b      	uxth	r3, r3
 8002a6c:	461a      	mov	r2, r3
 8002a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a70:	781b      	ldrb	r3, [r3, #0]
 8002a72:	00db      	lsls	r3, r3, #3
 8002a74:	4413      	add	r3, r2
 8002a76:	3306      	adds	r3, #6
 8002a78:	005b      	lsls	r3, r3, #1
 8002a7a:	687a      	ldr	r2, [r7, #4]
 8002a7c:	6812      	ldr	r2, [r2, #0]
 8002a7e:	4413      	add	r3, r2
 8002a80:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002a84:	881b      	ldrh	r3, [r3, #0]
 8002a86:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002a8a:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 8002a8c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	f000 8087 	beq.w	8002ba2 <PCD_EP_ISR_Handler+0x486>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6818      	ldr	r0, [r3, #0]
 8002a98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a9a:	6959      	ldr	r1, [r3, #20]
 8002a9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a9e:	88da      	ldrh	r2, [r3, #6]
 8002aa0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002aa2:	f003 fb7d 	bl	80061a0 <USB_ReadPMA>
 8002aa6:	e07c      	b.n	8002ba2 <PCD_EP_ISR_Handler+0x486>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8002aa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aaa:	78db      	ldrb	r3, [r3, #3]
 8002aac:	2b02      	cmp	r3, #2
 8002aae:	d108      	bne.n	8002ac2 <PCD_EP_ISR_Handler+0x3a6>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8002ab0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002ab2:	461a      	mov	r2, r3
 8002ab4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002ab6:	6878      	ldr	r0, [r7, #4]
 8002ab8:	f000 f923 	bl	8002d02 <HAL_PCD_EP_DB_Receive>
 8002abc:	4603      	mov	r3, r0
 8002abe:	86fb      	strh	r3, [r7, #54]	; 0x36
 8002ac0:	e06f      	b.n	8002ba2 <PCD_EP_ISR_Handler+0x486>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	461a      	mov	r2, r3
 8002ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aca:	781b      	ldrb	r3, [r3, #0]
 8002acc:	009b      	lsls	r3, r3, #2
 8002ace:	4413      	add	r3, r2
 8002ad0:	881b      	ldrh	r3, [r3, #0]
 8002ad2:	b29b      	uxth	r3, r3
 8002ad4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002ad8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002adc:	847b      	strh	r3, [r7, #34]	; 0x22
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	461a      	mov	r2, r3
 8002ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ae6:	781b      	ldrb	r3, [r3, #0]
 8002ae8:	009b      	lsls	r3, r3, #2
 8002aea:	441a      	add	r2, r3
 8002aec:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002aee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002af2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002af6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002afa:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002afe:	b29b      	uxth	r3, r3
 8002b00:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	461a      	mov	r2, r3
 8002b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b0a:	781b      	ldrb	r3, [r3, #0]
 8002b0c:	009b      	lsls	r3, r3, #2
 8002b0e:	4413      	add	r3, r2
 8002b10:	881b      	ldrh	r3, [r3, #0]
 8002b12:	b29b      	uxth	r3, r3
 8002b14:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d021      	beq.n	8002b60 <PCD_EP_ISR_Handler+0x444>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002b24:	b29b      	uxth	r3, r3
 8002b26:	461a      	mov	r2, r3
 8002b28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b2a:	781b      	ldrb	r3, [r3, #0]
 8002b2c:	00db      	lsls	r3, r3, #3
 8002b2e:	4413      	add	r3, r2
 8002b30:	3302      	adds	r3, #2
 8002b32:	005b      	lsls	r3, r3, #1
 8002b34:	687a      	ldr	r2, [r7, #4]
 8002b36:	6812      	ldr	r2, [r2, #0]
 8002b38:	4413      	add	r3, r2
 8002b3a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002b3e:	881b      	ldrh	r3, [r3, #0]
 8002b40:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002b44:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8002b46:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d02a      	beq.n	8002ba2 <PCD_EP_ISR_Handler+0x486>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	6818      	ldr	r0, [r3, #0]
 8002b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b52:	6959      	ldr	r1, [r3, #20]
 8002b54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b56:	891a      	ldrh	r2, [r3, #8]
 8002b58:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002b5a:	f003 fb21 	bl	80061a0 <USB_ReadPMA>
 8002b5e:	e020      	b.n	8002ba2 <PCD_EP_ISR_Handler+0x486>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002b68:	b29b      	uxth	r3, r3
 8002b6a:	461a      	mov	r2, r3
 8002b6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b6e:	781b      	ldrb	r3, [r3, #0]
 8002b70:	00db      	lsls	r3, r3, #3
 8002b72:	4413      	add	r3, r2
 8002b74:	3306      	adds	r3, #6
 8002b76:	005b      	lsls	r3, r3, #1
 8002b78:	687a      	ldr	r2, [r7, #4]
 8002b7a:	6812      	ldr	r2, [r2, #0]
 8002b7c:	4413      	add	r3, r2
 8002b7e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002b82:	881b      	ldrh	r3, [r3, #0]
 8002b84:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002b88:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8002b8a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d008      	beq.n	8002ba2 <PCD_EP_ISR_Handler+0x486>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	6818      	ldr	r0, [r3, #0]
 8002b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b96:	6959      	ldr	r1, [r3, #20]
 8002b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b9a:	895a      	ldrh	r2, [r3, #10]
 8002b9c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002b9e:	f003 faff 	bl	80061a0 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8002ba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ba4:	69da      	ldr	r2, [r3, #28]
 8002ba6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002ba8:	441a      	add	r2, r3
 8002baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bac:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8002bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bb0:	695a      	ldr	r2, [r3, #20]
 8002bb2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002bb4:	441a      	add	r2, r3
 8002bb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bb8:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8002bba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bbc:	699b      	ldr	r3, [r3, #24]
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d004      	beq.n	8002bcc <PCD_EP_ISR_Handler+0x4b0>
 8002bc2:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8002bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bc6:	691b      	ldr	r3, [r3, #16]
 8002bc8:	429a      	cmp	r2, r3
 8002bca:	d206      	bcs.n	8002bda <PCD_EP_ISR_Handler+0x4be>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8002bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bce:	781b      	ldrb	r3, [r3, #0]
 8002bd0:	4619      	mov	r1, r3
 8002bd2:	6878      	ldr	r0, [r7, #4]
 8002bd4:	f005 f8c8 	bl	8007d68 <HAL_PCD_DataOutStageCallback>
 8002bd8:	e005      	b.n	8002be6 <PCD_EP_ISR_Handler+0x4ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002be0:	4618      	mov	r0, r3
 8002be2:	f002 f83b 	bl	8004c5c <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8002be6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002be8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d07a      	beq.n	8002ce6 <PCD_EP_ISR_Handler+0x5ca>
      {
        ep = &hpcd->IN_ep[epindex];
 8002bf0:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002bf4:	1c5a      	adds	r2, r3, #1
 8002bf6:	4613      	mov	r3, r2
 8002bf8:	009b      	lsls	r3, r3, #2
 8002bfa:	4413      	add	r3, r2
 8002bfc:	00db      	lsls	r3, r3, #3
 8002bfe:	687a      	ldr	r2, [r7, #4]
 8002c00:	4413      	add	r3, r2
 8002c02:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	461a      	mov	r2, r3
 8002c0a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002c0e:	009b      	lsls	r3, r3, #2
 8002c10:	4413      	add	r3, r2
 8002c12:	881b      	ldrh	r3, [r3, #0]
 8002c14:	b29b      	uxth	r3, r3
 8002c16:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002c1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c1e:	843b      	strh	r3, [r7, #32]
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	461a      	mov	r2, r3
 8002c26:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002c2a:	009b      	lsls	r3, r3, #2
 8002c2c:	441a      	add	r2, r3
 8002c2e:	8c3b      	ldrh	r3, [r7, #32]
 8002c30:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002c34:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002c38:	b29b      	uxth	r3, r3
 8002c3a:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk transaction or Bulk Single Buffer Transaction */
        if ((ep->type != EP_TYPE_BULK) ||
 8002c3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c3e:	78db      	ldrb	r3, [r3, #3]
 8002c40:	2b02      	cmp	r3, #2
 8002c42:	d108      	bne.n	8002c56 <PCD_EP_ISR_Handler+0x53a>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8002c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c46:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type != EP_TYPE_BULK) ||
 8002c48:	2b02      	cmp	r3, #2
 8002c4a:	d146      	bne.n	8002cda <PCD_EP_ISR_Handler+0x5be>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8002c4c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002c4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d141      	bne.n	8002cda <PCD_EP_ISR_Handler+0x5be>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002c5e:	b29b      	uxth	r3, r3
 8002c60:	461a      	mov	r2, r3
 8002c62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c64:	781b      	ldrb	r3, [r3, #0]
 8002c66:	00db      	lsls	r3, r3, #3
 8002c68:	4413      	add	r3, r2
 8002c6a:	3302      	adds	r3, #2
 8002c6c:	005b      	lsls	r3, r3, #1
 8002c6e:	687a      	ldr	r2, [r7, #4]
 8002c70:	6812      	ldr	r2, [r2, #0]
 8002c72:	4413      	add	r3, r2
 8002c74:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002c78:	881b      	ldrh	r3, [r3, #0]
 8002c7a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002c7e:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 8002c80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c82:	699a      	ldr	r2, [r3, #24]
 8002c84:	8bfb      	ldrh	r3, [r7, #30]
 8002c86:	429a      	cmp	r2, r3
 8002c88:	d906      	bls.n	8002c98 <PCD_EP_ISR_Handler+0x57c>
          {
            ep->xfer_len -= TxByteNbre;
 8002c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c8c:	699a      	ldr	r2, [r3, #24]
 8002c8e:	8bfb      	ldrh	r3, [r7, #30]
 8002c90:	1ad2      	subs	r2, r2, r3
 8002c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c94:	619a      	str	r2, [r3, #24]
 8002c96:	e002      	b.n	8002c9e <PCD_EP_ISR_Handler+0x582>
          }
          else
          {
            ep->xfer_len = 0U;
 8002c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8002c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ca0:	699b      	ldr	r3, [r3, #24]
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d106      	bne.n	8002cb4 <PCD_EP_ISR_Handler+0x598>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002ca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ca8:	781b      	ldrb	r3, [r3, #0]
 8002caa:	4619      	mov	r1, r3
 8002cac:	6878      	ldr	r0, [r7, #4]
 8002cae:	f005 f876 	bl	8007d9e <HAL_PCD_DataInStageCallback>
 8002cb2:	e018      	b.n	8002ce6 <PCD_EP_ISR_Handler+0x5ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 8002cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cb6:	695a      	ldr	r2, [r3, #20]
 8002cb8:	8bfb      	ldrh	r3, [r7, #30]
 8002cba:	441a      	add	r2, r3
 8002cbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cbe:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 8002cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cc2:	69da      	ldr	r2, [r3, #28]
 8002cc4:	8bfb      	ldrh	r3, [r7, #30]
 8002cc6:	441a      	add	r2, r3
 8002cc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cca:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	f001 ffc2 	bl	8004c5c <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8002cd8:	e005      	b.n	8002ce6 <PCD_EP_ISR_Handler+0x5ca>
          }
        }
        /* bulk in double buffer enable in case of transferLen> Ep_Mps */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8002cda:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002cdc:	461a      	mov	r2, r3
 8002cde:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002ce0:	6878      	ldr	r0, [r7, #4]
 8002ce2:	f000 f91b 	bl	8002f1c <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002cee:	b29b      	uxth	r3, r3
 8002cf0:	b21b      	sxth	r3, r3
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	f6ff ad17 	blt.w	8002726 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8002cf8:	2300      	movs	r3, #0
}
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	3738      	adds	r7, #56	; 0x38
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	bd80      	pop	{r7, pc}

08002d02 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002d02:	b580      	push	{r7, lr}
 8002d04:	b088      	sub	sp, #32
 8002d06:	af00      	add	r7, sp, #0
 8002d08:	60f8      	str	r0, [r7, #12]
 8002d0a:	60b9      	str	r1, [r7, #8]
 8002d0c:	4613      	mov	r3, r2
 8002d0e:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002d10:	88fb      	ldrh	r3, [r7, #6]
 8002d12:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d07e      	beq.n	8002e18 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002d22:	b29b      	uxth	r3, r3
 8002d24:	461a      	mov	r2, r3
 8002d26:	68bb      	ldr	r3, [r7, #8]
 8002d28:	781b      	ldrb	r3, [r3, #0]
 8002d2a:	00db      	lsls	r3, r3, #3
 8002d2c:	4413      	add	r3, r2
 8002d2e:	3302      	adds	r3, #2
 8002d30:	005b      	lsls	r3, r3, #1
 8002d32:	68fa      	ldr	r2, [r7, #12]
 8002d34:	6812      	ldr	r2, [r2, #0]
 8002d36:	4413      	add	r3, r2
 8002d38:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002d3c:	881b      	ldrh	r3, [r3, #0]
 8002d3e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002d42:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002d44:	68bb      	ldr	r3, [r7, #8]
 8002d46:	699a      	ldr	r2, [r3, #24]
 8002d48:	8b7b      	ldrh	r3, [r7, #26]
 8002d4a:	429a      	cmp	r2, r3
 8002d4c:	d306      	bcc.n	8002d5c <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8002d4e:	68bb      	ldr	r3, [r7, #8]
 8002d50:	699a      	ldr	r2, [r3, #24]
 8002d52:	8b7b      	ldrh	r3, [r7, #26]
 8002d54:	1ad2      	subs	r2, r2, r3
 8002d56:	68bb      	ldr	r3, [r7, #8]
 8002d58:	619a      	str	r2, [r3, #24]
 8002d5a:	e002      	b.n	8002d62 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8002d5c:	68bb      	ldr	r3, [r7, #8]
 8002d5e:	2200      	movs	r2, #0
 8002d60:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002d62:	68bb      	ldr	r3, [r7, #8]
 8002d64:	699b      	ldr	r3, [r3, #24]
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d123      	bne.n	8002db2 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	461a      	mov	r2, r3
 8002d70:	68bb      	ldr	r3, [r7, #8]
 8002d72:	781b      	ldrb	r3, [r3, #0]
 8002d74:	009b      	lsls	r3, r3, #2
 8002d76:	4413      	add	r3, r2
 8002d78:	881b      	ldrh	r3, [r3, #0]
 8002d7a:	b29b      	uxth	r3, r3
 8002d7c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002d80:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d84:	833b      	strh	r3, [r7, #24]
 8002d86:	8b3b      	ldrh	r3, [r7, #24]
 8002d88:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002d8c:	833b      	strh	r3, [r7, #24]
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	461a      	mov	r2, r3
 8002d94:	68bb      	ldr	r3, [r7, #8]
 8002d96:	781b      	ldrb	r3, [r3, #0]
 8002d98:	009b      	lsls	r3, r3, #2
 8002d9a:	441a      	add	r2, r3
 8002d9c:	8b3b      	ldrh	r3, [r7, #24]
 8002d9e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002da2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002da6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002daa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002dae:	b29b      	uxth	r3, r3
 8002db0:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002db2:	88fb      	ldrh	r3, [r7, #6]
 8002db4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d01f      	beq.n	8002dfc <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	461a      	mov	r2, r3
 8002dc2:	68bb      	ldr	r3, [r7, #8]
 8002dc4:	781b      	ldrb	r3, [r3, #0]
 8002dc6:	009b      	lsls	r3, r3, #2
 8002dc8:	4413      	add	r3, r2
 8002dca:	881b      	ldrh	r3, [r3, #0]
 8002dcc:	b29b      	uxth	r3, r3
 8002dce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002dd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002dd6:	82fb      	strh	r3, [r7, #22]
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	461a      	mov	r2, r3
 8002dde:	68bb      	ldr	r3, [r7, #8]
 8002de0:	781b      	ldrb	r3, [r3, #0]
 8002de2:	009b      	lsls	r3, r3, #2
 8002de4:	441a      	add	r2, r3
 8002de6:	8afb      	ldrh	r3, [r7, #22]
 8002de8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002dec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002df0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002df4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002df8:	b29b      	uxth	r3, r3
 8002dfa:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002dfc:	8b7b      	ldrh	r3, [r7, #26]
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	f000 8087 	beq.w	8002f12 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	6818      	ldr	r0, [r3, #0]
 8002e08:	68bb      	ldr	r3, [r7, #8]
 8002e0a:	6959      	ldr	r1, [r3, #20]
 8002e0c:	68bb      	ldr	r3, [r7, #8]
 8002e0e:	891a      	ldrh	r2, [r3, #8]
 8002e10:	8b7b      	ldrh	r3, [r7, #26]
 8002e12:	f003 f9c5 	bl	80061a0 <USB_ReadPMA>
 8002e16:	e07c      	b.n	8002f12 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002e20:	b29b      	uxth	r3, r3
 8002e22:	461a      	mov	r2, r3
 8002e24:	68bb      	ldr	r3, [r7, #8]
 8002e26:	781b      	ldrb	r3, [r3, #0]
 8002e28:	00db      	lsls	r3, r3, #3
 8002e2a:	4413      	add	r3, r2
 8002e2c:	3306      	adds	r3, #6
 8002e2e:	005b      	lsls	r3, r3, #1
 8002e30:	68fa      	ldr	r2, [r7, #12]
 8002e32:	6812      	ldr	r2, [r2, #0]
 8002e34:	4413      	add	r3, r2
 8002e36:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002e3a:	881b      	ldrh	r3, [r3, #0]
 8002e3c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002e40:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002e42:	68bb      	ldr	r3, [r7, #8]
 8002e44:	699a      	ldr	r2, [r3, #24]
 8002e46:	8b7b      	ldrh	r3, [r7, #26]
 8002e48:	429a      	cmp	r2, r3
 8002e4a:	d306      	bcc.n	8002e5a <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8002e4c:	68bb      	ldr	r3, [r7, #8]
 8002e4e:	699a      	ldr	r2, [r3, #24]
 8002e50:	8b7b      	ldrh	r3, [r7, #26]
 8002e52:	1ad2      	subs	r2, r2, r3
 8002e54:	68bb      	ldr	r3, [r7, #8]
 8002e56:	619a      	str	r2, [r3, #24]
 8002e58:	e002      	b.n	8002e60 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8002e5a:	68bb      	ldr	r3, [r7, #8]
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002e60:	68bb      	ldr	r3, [r7, #8]
 8002e62:	699b      	ldr	r3, [r3, #24]
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d123      	bne.n	8002eb0 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	461a      	mov	r2, r3
 8002e6e:	68bb      	ldr	r3, [r7, #8]
 8002e70:	781b      	ldrb	r3, [r3, #0]
 8002e72:	009b      	lsls	r3, r3, #2
 8002e74:	4413      	add	r3, r2
 8002e76:	881b      	ldrh	r3, [r3, #0]
 8002e78:	b29b      	uxth	r3, r3
 8002e7a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002e7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e82:	83fb      	strh	r3, [r7, #30]
 8002e84:	8bfb      	ldrh	r3, [r7, #30]
 8002e86:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002e8a:	83fb      	strh	r3, [r7, #30]
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	461a      	mov	r2, r3
 8002e92:	68bb      	ldr	r3, [r7, #8]
 8002e94:	781b      	ldrb	r3, [r3, #0]
 8002e96:	009b      	lsls	r3, r3, #2
 8002e98:	441a      	add	r2, r3
 8002e9a:	8bfb      	ldrh	r3, [r7, #30]
 8002e9c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002ea0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002ea4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002ea8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002eac:	b29b      	uxth	r3, r3
 8002eae:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8002eb0:	88fb      	ldrh	r3, [r7, #6]
 8002eb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d11f      	bne.n	8002efa <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	461a      	mov	r2, r3
 8002ec0:	68bb      	ldr	r3, [r7, #8]
 8002ec2:	781b      	ldrb	r3, [r3, #0]
 8002ec4:	009b      	lsls	r3, r3, #2
 8002ec6:	4413      	add	r3, r2
 8002ec8:	881b      	ldrh	r3, [r3, #0]
 8002eca:	b29b      	uxth	r3, r3
 8002ecc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002ed0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ed4:	83bb      	strh	r3, [r7, #28]
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	461a      	mov	r2, r3
 8002edc:	68bb      	ldr	r3, [r7, #8]
 8002ede:	781b      	ldrb	r3, [r3, #0]
 8002ee0:	009b      	lsls	r3, r3, #2
 8002ee2:	441a      	add	r2, r3
 8002ee4:	8bbb      	ldrh	r3, [r7, #28]
 8002ee6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002eea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002eee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002ef2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002ef6:	b29b      	uxth	r3, r3
 8002ef8:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002efa:	8b7b      	ldrh	r3, [r7, #26]
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d008      	beq.n	8002f12 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	6818      	ldr	r0, [r3, #0]
 8002f04:	68bb      	ldr	r3, [r7, #8]
 8002f06:	6959      	ldr	r1, [r3, #20]
 8002f08:	68bb      	ldr	r3, [r7, #8]
 8002f0a:	895a      	ldrh	r2, [r3, #10]
 8002f0c:	8b7b      	ldrh	r3, [r7, #26]
 8002f0e:	f003 f947 	bl	80061a0 <USB_ReadPMA>
    }
  }

  return count;
 8002f12:	8b7b      	ldrh	r3, [r7, #26]
}
 8002f14:	4618      	mov	r0, r3
 8002f16:	3720      	adds	r7, #32
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	bd80      	pop	{r7, pc}

08002f1c <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b092      	sub	sp, #72	; 0x48
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	60f8      	str	r0, [r7, #12]
 8002f24:	60b9      	str	r1, [r7, #8]
 8002f26:	4613      	mov	r3, r2
 8002f28:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002f2a:	88fb      	ldrh	r3, [r7, #6]
 8002f2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	f000 8132 	beq.w	800319a <HAL_PCD_EP_DB_Transmit+0x27e>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002f3e:	b29b      	uxth	r3, r3
 8002f40:	461a      	mov	r2, r3
 8002f42:	68bb      	ldr	r3, [r7, #8]
 8002f44:	781b      	ldrb	r3, [r3, #0]
 8002f46:	00db      	lsls	r3, r3, #3
 8002f48:	4413      	add	r3, r2
 8002f4a:	3302      	adds	r3, #2
 8002f4c:	005b      	lsls	r3, r3, #1
 8002f4e:	68fa      	ldr	r2, [r7, #12]
 8002f50:	6812      	ldr	r2, [r2, #0]
 8002f52:	4413      	add	r3, r2
 8002f54:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002f58:	881b      	ldrh	r3, [r3, #0]
 8002f5a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002f5e:	85fb      	strh	r3, [r7, #46]	; 0x2e

    if (ep->xfer_len > TxByteNbre)
 8002f60:	68bb      	ldr	r3, [r7, #8]
 8002f62:	699a      	ldr	r2, [r3, #24]
 8002f64:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002f66:	429a      	cmp	r2, r3
 8002f68:	d906      	bls.n	8002f78 <HAL_PCD_EP_DB_Transmit+0x5c>
    {
      ep->xfer_len -= TxByteNbre;
 8002f6a:	68bb      	ldr	r3, [r7, #8]
 8002f6c:	699a      	ldr	r2, [r3, #24]
 8002f6e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002f70:	1ad2      	subs	r2, r2, r3
 8002f72:	68bb      	ldr	r3, [r7, #8]
 8002f74:	619a      	str	r2, [r3, #24]
 8002f76:	e002      	b.n	8002f7e <HAL_PCD_EP_DB_Transmit+0x62>
    }
    else
    {
      ep->xfer_len = 0U;
 8002f78:	68bb      	ldr	r3, [r7, #8]
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002f7e:	68bb      	ldr	r3, [r7, #8]
 8002f80:	699b      	ldr	r3, [r3, #24]
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d12c      	bne.n	8002fe0 <HAL_PCD_EP_DB_Transmit+0xc4>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002f86:	68bb      	ldr	r3, [r7, #8]
 8002f88:	781b      	ldrb	r3, [r3, #0]
 8002f8a:	4619      	mov	r1, r3
 8002f8c:	68f8      	ldr	r0, [r7, #12]
 8002f8e:	f004 ff06 	bl	8007d9e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002f92:	88fb      	ldrh	r3, [r7, #6]
 8002f94:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	f000 822f 	beq.w	80033fc <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	461a      	mov	r2, r3
 8002fa4:	68bb      	ldr	r3, [r7, #8]
 8002fa6:	781b      	ldrb	r3, [r3, #0]
 8002fa8:	009b      	lsls	r3, r3, #2
 8002faa:	4413      	add	r3, r2
 8002fac:	881b      	ldrh	r3, [r3, #0]
 8002fae:	b29b      	uxth	r3, r3
 8002fb0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002fb4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002fb8:	827b      	strh	r3, [r7, #18]
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	461a      	mov	r2, r3
 8002fc0:	68bb      	ldr	r3, [r7, #8]
 8002fc2:	781b      	ldrb	r3, [r3, #0]
 8002fc4:	009b      	lsls	r3, r3, #2
 8002fc6:	441a      	add	r2, r3
 8002fc8:	8a7b      	ldrh	r3, [r7, #18]
 8002fca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002fce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002fd2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002fd6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002fda:	b29b      	uxth	r3, r3
 8002fdc:	8013      	strh	r3, [r2, #0]
 8002fde:	e20d      	b.n	80033fc <HAL_PCD_EP_DB_Transmit+0x4e0>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002fe0:	88fb      	ldrh	r3, [r7, #6]
 8002fe2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d01f      	beq.n	800302a <HAL_PCD_EP_DB_Transmit+0x10e>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	461a      	mov	r2, r3
 8002ff0:	68bb      	ldr	r3, [r7, #8]
 8002ff2:	781b      	ldrb	r3, [r3, #0]
 8002ff4:	009b      	lsls	r3, r3, #2
 8002ff6:	4413      	add	r3, r2
 8002ff8:	881b      	ldrh	r3, [r3, #0]
 8002ffa:	b29b      	uxth	r3, r3
 8002ffc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003000:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003004:	84bb      	strh	r3, [r7, #36]	; 0x24
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	461a      	mov	r2, r3
 800300c:	68bb      	ldr	r3, [r7, #8]
 800300e:	781b      	ldrb	r3, [r3, #0]
 8003010:	009b      	lsls	r3, r3, #2
 8003012:	441a      	add	r2, r3
 8003014:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003016:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800301a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800301e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003022:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003026:	b29b      	uxth	r3, r3
 8003028:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800302a:	68bb      	ldr	r3, [r7, #8]
 800302c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003030:	2b01      	cmp	r3, #1
 8003032:	f040 81e3 	bne.w	80033fc <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        ep->xfer_buff += TxByteNbre;
 8003036:	68bb      	ldr	r3, [r7, #8]
 8003038:	695a      	ldr	r2, [r3, #20]
 800303a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800303c:	441a      	add	r2, r3
 800303e:	68bb      	ldr	r3, [r7, #8]
 8003040:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8003042:	68bb      	ldr	r3, [r7, #8]
 8003044:	69da      	ldr	r2, [r3, #28]
 8003046:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003048:	441a      	add	r2, r3
 800304a:	68bb      	ldr	r3, [r7, #8]
 800304c:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800304e:	68bb      	ldr	r3, [r7, #8]
 8003050:	6a1a      	ldr	r2, [r3, #32]
 8003052:	68bb      	ldr	r3, [r7, #8]
 8003054:	691b      	ldr	r3, [r3, #16]
 8003056:	429a      	cmp	r2, r3
 8003058:	d309      	bcc.n	800306e <HAL_PCD_EP_DB_Transmit+0x152>
        {
          len = ep->maxpacket;
 800305a:	68bb      	ldr	r3, [r7, #8]
 800305c:	691b      	ldr	r3, [r3, #16]
 800305e:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db -= len;
 8003060:	68bb      	ldr	r3, [r7, #8]
 8003062:	6a1a      	ldr	r2, [r3, #32]
 8003064:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003066:	1ad2      	subs	r2, r2, r3
 8003068:	68bb      	ldr	r3, [r7, #8]
 800306a:	621a      	str	r2, [r3, #32]
 800306c:	e014      	b.n	8003098 <HAL_PCD_EP_DB_Transmit+0x17c>
        }
        else if (ep->xfer_len_db == 0U)
 800306e:	68bb      	ldr	r3, [r7, #8]
 8003070:	6a1b      	ldr	r3, [r3, #32]
 8003072:	2b00      	cmp	r3, #0
 8003074:	d106      	bne.n	8003084 <HAL_PCD_EP_DB_Transmit+0x168>
        {
          len = TxByteNbre;
 8003076:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003078:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_fill_db = 0U;
 800307a:	68bb      	ldr	r3, [r7, #8]
 800307c:	2200      	movs	r2, #0
 800307e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003082:	e009      	b.n	8003098 <HAL_PCD_EP_DB_Transmit+0x17c>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8003084:	68bb      	ldr	r3, [r7, #8]
 8003086:	2200      	movs	r2, #0
 8003088:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 800308c:	68bb      	ldr	r3, [r7, #8]
 800308e:	6a1b      	ldr	r3, [r3, #32]
 8003090:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db = 0U;
 8003092:	68bb      	ldr	r3, [r7, #8]
 8003094:	2200      	movs	r2, #0
 8003096:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003098:	68bb      	ldr	r3, [r7, #8]
 800309a:	785b      	ldrb	r3, [r3, #1]
 800309c:	2b00      	cmp	r3, #0
 800309e:	d155      	bne.n	800314c <HAL_PCD_EP_DB_Transmit+0x230>
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	61bb      	str	r3, [r7, #24]
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80030ae:	b29b      	uxth	r3, r3
 80030b0:	461a      	mov	r2, r3
 80030b2:	69bb      	ldr	r3, [r7, #24]
 80030b4:	4413      	add	r3, r2
 80030b6:	61bb      	str	r3, [r7, #24]
 80030b8:	68bb      	ldr	r3, [r7, #8]
 80030ba:	781b      	ldrb	r3, [r3, #0]
 80030bc:	011a      	lsls	r2, r3, #4
 80030be:	69bb      	ldr	r3, [r7, #24]
 80030c0:	4413      	add	r3, r2
 80030c2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80030c6:	617b      	str	r3, [r7, #20]
 80030c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d112      	bne.n	80030f4 <HAL_PCD_EP_DB_Transmit+0x1d8>
 80030ce:	697b      	ldr	r3, [r7, #20]
 80030d0:	881b      	ldrh	r3, [r3, #0]
 80030d2:	b29b      	uxth	r3, r3
 80030d4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80030d8:	b29a      	uxth	r2, r3
 80030da:	697b      	ldr	r3, [r7, #20]
 80030dc:	801a      	strh	r2, [r3, #0]
 80030de:	697b      	ldr	r3, [r7, #20]
 80030e0:	881b      	ldrh	r3, [r3, #0]
 80030e2:	b29b      	uxth	r3, r3
 80030e4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80030e8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80030ec:	b29a      	uxth	r2, r3
 80030ee:	697b      	ldr	r3, [r7, #20]
 80030f0:	801a      	strh	r2, [r3, #0]
 80030f2:	e047      	b.n	8003184 <HAL_PCD_EP_DB_Transmit+0x268>
 80030f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030f6:	2b3e      	cmp	r3, #62	; 0x3e
 80030f8:	d811      	bhi.n	800311e <HAL_PCD_EP_DB_Transmit+0x202>
 80030fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030fc:	085b      	lsrs	r3, r3, #1
 80030fe:	62bb      	str	r3, [r7, #40]	; 0x28
 8003100:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003102:	f003 0301 	and.w	r3, r3, #1
 8003106:	2b00      	cmp	r3, #0
 8003108:	d002      	beq.n	8003110 <HAL_PCD_EP_DB_Transmit+0x1f4>
 800310a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800310c:	3301      	adds	r3, #1
 800310e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003110:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003112:	b29b      	uxth	r3, r3
 8003114:	029b      	lsls	r3, r3, #10
 8003116:	b29a      	uxth	r2, r3
 8003118:	697b      	ldr	r3, [r7, #20]
 800311a:	801a      	strh	r2, [r3, #0]
 800311c:	e032      	b.n	8003184 <HAL_PCD_EP_DB_Transmit+0x268>
 800311e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003120:	095b      	lsrs	r3, r3, #5
 8003122:	62bb      	str	r3, [r7, #40]	; 0x28
 8003124:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003126:	f003 031f 	and.w	r3, r3, #31
 800312a:	2b00      	cmp	r3, #0
 800312c:	d102      	bne.n	8003134 <HAL_PCD_EP_DB_Transmit+0x218>
 800312e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003130:	3b01      	subs	r3, #1
 8003132:	62bb      	str	r3, [r7, #40]	; 0x28
 8003134:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003136:	b29b      	uxth	r3, r3
 8003138:	029b      	lsls	r3, r3, #10
 800313a:	b29b      	uxth	r3, r3
 800313c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003140:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003144:	b29a      	uxth	r2, r3
 8003146:	697b      	ldr	r3, [r7, #20]
 8003148:	801a      	strh	r2, [r3, #0]
 800314a:	e01b      	b.n	8003184 <HAL_PCD_EP_DB_Transmit+0x268>
 800314c:	68bb      	ldr	r3, [r7, #8]
 800314e:	785b      	ldrb	r3, [r3, #1]
 8003150:	2b01      	cmp	r3, #1
 8003152:	d117      	bne.n	8003184 <HAL_PCD_EP_DB_Transmit+0x268>
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	623b      	str	r3, [r7, #32]
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003162:	b29b      	uxth	r3, r3
 8003164:	461a      	mov	r2, r3
 8003166:	6a3b      	ldr	r3, [r7, #32]
 8003168:	4413      	add	r3, r2
 800316a:	623b      	str	r3, [r7, #32]
 800316c:	68bb      	ldr	r3, [r7, #8]
 800316e:	781b      	ldrb	r3, [r3, #0]
 8003170:	011a      	lsls	r2, r3, #4
 8003172:	6a3b      	ldr	r3, [r7, #32]
 8003174:	4413      	add	r3, r2
 8003176:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800317a:	61fb      	str	r3, [r7, #28]
 800317c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800317e:	b29a      	uxth	r2, r3
 8003180:	69fb      	ldr	r3, [r7, #28]
 8003182:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	6818      	ldr	r0, [r3, #0]
 8003188:	68bb      	ldr	r3, [r7, #8]
 800318a:	6959      	ldr	r1, [r3, #20]
 800318c:	68bb      	ldr	r3, [r7, #8]
 800318e:	891a      	ldrh	r2, [r3, #8]
 8003190:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003192:	b29b      	uxth	r3, r3
 8003194:	f002 ffc0 	bl	8006118 <USB_WritePMA>
 8003198:	e130      	b.n	80033fc <HAL_PCD_EP_DB_Transmit+0x4e0>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80031a2:	b29b      	uxth	r3, r3
 80031a4:	461a      	mov	r2, r3
 80031a6:	68bb      	ldr	r3, [r7, #8]
 80031a8:	781b      	ldrb	r3, [r3, #0]
 80031aa:	00db      	lsls	r3, r3, #3
 80031ac:	4413      	add	r3, r2
 80031ae:	3306      	adds	r3, #6
 80031b0:	005b      	lsls	r3, r3, #1
 80031b2:	68fa      	ldr	r2, [r7, #12]
 80031b4:	6812      	ldr	r2, [r2, #0]
 80031b6:	4413      	add	r3, r2
 80031b8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80031bc:	881b      	ldrh	r3, [r3, #0]
 80031be:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80031c2:	85fb      	strh	r3, [r7, #46]	; 0x2e

    if (ep->xfer_len >= TxByteNbre)
 80031c4:	68bb      	ldr	r3, [r7, #8]
 80031c6:	699a      	ldr	r2, [r3, #24]
 80031c8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80031ca:	429a      	cmp	r2, r3
 80031cc:	d306      	bcc.n	80031dc <HAL_PCD_EP_DB_Transmit+0x2c0>
    {
      ep->xfer_len -= TxByteNbre;
 80031ce:	68bb      	ldr	r3, [r7, #8]
 80031d0:	699a      	ldr	r2, [r3, #24]
 80031d2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80031d4:	1ad2      	subs	r2, r2, r3
 80031d6:	68bb      	ldr	r3, [r7, #8]
 80031d8:	619a      	str	r2, [r3, #24]
 80031da:	e002      	b.n	80031e2 <HAL_PCD_EP_DB_Transmit+0x2c6>
    }
    else
    {
      ep->xfer_len = 0U;
 80031dc:	68bb      	ldr	r3, [r7, #8]
 80031de:	2200      	movs	r2, #0
 80031e0:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80031e2:	68bb      	ldr	r3, [r7, #8]
 80031e4:	699b      	ldr	r3, [r3, #24]
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d12c      	bne.n	8003244 <HAL_PCD_EP_DB_Transmit+0x328>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80031ea:	68bb      	ldr	r3, [r7, #8]
 80031ec:	781b      	ldrb	r3, [r3, #0]
 80031ee:	4619      	mov	r1, r3
 80031f0:	68f8      	ldr	r0, [r7, #12]
 80031f2:	f004 fdd4 	bl	8007d9e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /*need to Free USB Buff*/
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80031f6:	88fb      	ldrh	r3, [r7, #6]
 80031f8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	f040 80fd 	bne.w	80033fc <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	461a      	mov	r2, r3
 8003208:	68bb      	ldr	r3, [r7, #8]
 800320a:	781b      	ldrb	r3, [r3, #0]
 800320c:	009b      	lsls	r3, r3, #2
 800320e:	4413      	add	r3, r2
 8003210:	881b      	ldrh	r3, [r3, #0]
 8003212:	b29b      	uxth	r3, r3
 8003214:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003218:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800321c:	84fb      	strh	r3, [r7, #38]	; 0x26
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	461a      	mov	r2, r3
 8003224:	68bb      	ldr	r3, [r7, #8]
 8003226:	781b      	ldrb	r3, [r3, #0]
 8003228:	009b      	lsls	r3, r3, #2
 800322a:	441a      	add	r2, r3
 800322c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800322e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003232:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003236:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800323a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800323e:	b29b      	uxth	r3, r3
 8003240:	8013      	strh	r3, [r2, #0]
 8003242:	e0db      	b.n	80033fc <HAL_PCD_EP_DB_Transmit+0x4e0>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003244:	88fb      	ldrh	r3, [r7, #6]
 8003246:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800324a:	2b00      	cmp	r3, #0
 800324c:	d11f      	bne.n	800328e <HAL_PCD_EP_DB_Transmit+0x372>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	461a      	mov	r2, r3
 8003254:	68bb      	ldr	r3, [r7, #8]
 8003256:	781b      	ldrb	r3, [r3, #0]
 8003258:	009b      	lsls	r3, r3, #2
 800325a:	4413      	add	r3, r2
 800325c:	881b      	ldrh	r3, [r3, #0]
 800325e:	b29b      	uxth	r3, r3
 8003260:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003264:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003268:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	461a      	mov	r2, r3
 8003270:	68bb      	ldr	r3, [r7, #8]
 8003272:	781b      	ldrb	r3, [r3, #0]
 8003274:	009b      	lsls	r3, r3, #2
 8003276:	441a      	add	r2, r3
 8003278:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800327a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800327e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003282:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003286:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800328a:	b29b      	uxth	r3, r3
 800328c:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800328e:	68bb      	ldr	r3, [r7, #8]
 8003290:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003294:	2b01      	cmp	r3, #1
 8003296:	f040 80b1 	bne.w	80033fc <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        ep->xfer_buff += TxByteNbre;
 800329a:	68bb      	ldr	r3, [r7, #8]
 800329c:	695a      	ldr	r2, [r3, #20]
 800329e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80032a0:	441a      	add	r2, r3
 80032a2:	68bb      	ldr	r3, [r7, #8]
 80032a4:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 80032a6:	68bb      	ldr	r3, [r7, #8]
 80032a8:	69da      	ldr	r2, [r3, #28]
 80032aa:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80032ac:	441a      	add	r2, r3
 80032ae:	68bb      	ldr	r3, [r7, #8]
 80032b0:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80032b2:	68bb      	ldr	r3, [r7, #8]
 80032b4:	6a1a      	ldr	r2, [r3, #32]
 80032b6:	68bb      	ldr	r3, [r7, #8]
 80032b8:	691b      	ldr	r3, [r3, #16]
 80032ba:	429a      	cmp	r2, r3
 80032bc:	d309      	bcc.n	80032d2 <HAL_PCD_EP_DB_Transmit+0x3b6>
        {
          len = ep->maxpacket;
 80032be:	68bb      	ldr	r3, [r7, #8]
 80032c0:	691b      	ldr	r3, [r3, #16]
 80032c2:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db -= len;
 80032c4:	68bb      	ldr	r3, [r7, #8]
 80032c6:	6a1a      	ldr	r2, [r3, #32]
 80032c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032ca:	1ad2      	subs	r2, r2, r3
 80032cc:	68bb      	ldr	r3, [r7, #8]
 80032ce:	621a      	str	r2, [r3, #32]
 80032d0:	e014      	b.n	80032fc <HAL_PCD_EP_DB_Transmit+0x3e0>
        }
        else if (ep->xfer_len_db == 0U)
 80032d2:	68bb      	ldr	r3, [r7, #8]
 80032d4:	6a1b      	ldr	r3, [r3, #32]
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d106      	bne.n	80032e8 <HAL_PCD_EP_DB_Transmit+0x3cc>
        {
          len = TxByteNbre;
 80032da:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80032dc:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_fill_db = 0U;
 80032de:	68bb      	ldr	r3, [r7, #8]
 80032e0:	2200      	movs	r2, #0
 80032e2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80032e6:	e009      	b.n	80032fc <HAL_PCD_EP_DB_Transmit+0x3e0>
        }
        else
        {
          len = ep->xfer_len_db;
 80032e8:	68bb      	ldr	r3, [r7, #8]
 80032ea:	6a1b      	ldr	r3, [r3, #32]
 80032ec:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db = 0U;
 80032ee:	68bb      	ldr	r3, [r7, #8]
 80032f0:	2200      	movs	r2, #0
 80032f2:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80032f4:	68bb      	ldr	r3, [r7, #8]
 80032f6:	2200      	movs	r2, #0
 80032f8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	637b      	str	r3, [r7, #52]	; 0x34
 8003302:	68bb      	ldr	r3, [r7, #8]
 8003304:	785b      	ldrb	r3, [r3, #1]
 8003306:	2b00      	cmp	r3, #0
 8003308:	d155      	bne.n	80033b6 <HAL_PCD_EP_DB_Transmit+0x49a>
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	647b      	str	r3, [r7, #68]	; 0x44
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003318:	b29b      	uxth	r3, r3
 800331a:	461a      	mov	r2, r3
 800331c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800331e:	4413      	add	r3, r2
 8003320:	647b      	str	r3, [r7, #68]	; 0x44
 8003322:	68bb      	ldr	r3, [r7, #8]
 8003324:	781b      	ldrb	r3, [r3, #0]
 8003326:	011a      	lsls	r2, r3, #4
 8003328:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800332a:	4413      	add	r3, r2
 800332c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003330:	643b      	str	r3, [r7, #64]	; 0x40
 8003332:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003334:	2b00      	cmp	r3, #0
 8003336:	d112      	bne.n	800335e <HAL_PCD_EP_DB_Transmit+0x442>
 8003338:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800333a:	881b      	ldrh	r3, [r3, #0]
 800333c:	b29b      	uxth	r3, r3
 800333e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003342:	b29a      	uxth	r2, r3
 8003344:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003346:	801a      	strh	r2, [r3, #0]
 8003348:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800334a:	881b      	ldrh	r3, [r3, #0]
 800334c:	b29b      	uxth	r3, r3
 800334e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003352:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003356:	b29a      	uxth	r2, r3
 8003358:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800335a:	801a      	strh	r2, [r3, #0]
 800335c:	e044      	b.n	80033e8 <HAL_PCD_EP_DB_Transmit+0x4cc>
 800335e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003360:	2b3e      	cmp	r3, #62	; 0x3e
 8003362:	d811      	bhi.n	8003388 <HAL_PCD_EP_DB_Transmit+0x46c>
 8003364:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003366:	085b      	lsrs	r3, r3, #1
 8003368:	63fb      	str	r3, [r7, #60]	; 0x3c
 800336a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800336c:	f003 0301 	and.w	r3, r3, #1
 8003370:	2b00      	cmp	r3, #0
 8003372:	d002      	beq.n	800337a <HAL_PCD_EP_DB_Transmit+0x45e>
 8003374:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003376:	3301      	adds	r3, #1
 8003378:	63fb      	str	r3, [r7, #60]	; 0x3c
 800337a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800337c:	b29b      	uxth	r3, r3
 800337e:	029b      	lsls	r3, r3, #10
 8003380:	b29a      	uxth	r2, r3
 8003382:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003384:	801a      	strh	r2, [r3, #0]
 8003386:	e02f      	b.n	80033e8 <HAL_PCD_EP_DB_Transmit+0x4cc>
 8003388:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800338a:	095b      	lsrs	r3, r3, #5
 800338c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800338e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003390:	f003 031f 	and.w	r3, r3, #31
 8003394:	2b00      	cmp	r3, #0
 8003396:	d102      	bne.n	800339e <HAL_PCD_EP_DB_Transmit+0x482>
 8003398:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800339a:	3b01      	subs	r3, #1
 800339c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800339e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80033a0:	b29b      	uxth	r3, r3
 80033a2:	029b      	lsls	r3, r3, #10
 80033a4:	b29b      	uxth	r3, r3
 80033a6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80033aa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80033ae:	b29a      	uxth	r2, r3
 80033b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80033b2:	801a      	strh	r2, [r3, #0]
 80033b4:	e018      	b.n	80033e8 <HAL_PCD_EP_DB_Transmit+0x4cc>
 80033b6:	68bb      	ldr	r3, [r7, #8]
 80033b8:	785b      	ldrb	r3, [r3, #1]
 80033ba:	2b01      	cmp	r3, #1
 80033bc:	d114      	bne.n	80033e8 <HAL_PCD_EP_DB_Transmit+0x4cc>
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80033c6:	b29b      	uxth	r3, r3
 80033c8:	461a      	mov	r2, r3
 80033ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80033cc:	4413      	add	r3, r2
 80033ce:	637b      	str	r3, [r7, #52]	; 0x34
 80033d0:	68bb      	ldr	r3, [r7, #8]
 80033d2:	781b      	ldrb	r3, [r3, #0]
 80033d4:	011a      	lsls	r2, r3, #4
 80033d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80033d8:	4413      	add	r3, r2
 80033da:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80033de:	633b      	str	r3, [r7, #48]	; 0x30
 80033e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033e2:	b29a      	uxth	r2, r3
 80033e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033e6:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	6818      	ldr	r0, [r3, #0]
 80033ec:	68bb      	ldr	r3, [r7, #8]
 80033ee:	6959      	ldr	r1, [r3, #20]
 80033f0:	68bb      	ldr	r3, [r7, #8]
 80033f2:	895a      	ldrh	r2, [r3, #10]
 80033f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033f6:	b29b      	uxth	r3, r3
 80033f8:	f002 fe8e 	bl	8006118 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	461a      	mov	r2, r3
 8003402:	68bb      	ldr	r3, [r7, #8]
 8003404:	781b      	ldrb	r3, [r3, #0]
 8003406:	009b      	lsls	r3, r3, #2
 8003408:	4413      	add	r3, r2
 800340a:	881b      	ldrh	r3, [r3, #0]
 800340c:	b29b      	uxth	r3, r3
 800340e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003412:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003416:	823b      	strh	r3, [r7, #16]
 8003418:	8a3b      	ldrh	r3, [r7, #16]
 800341a:	f083 0310 	eor.w	r3, r3, #16
 800341e:	823b      	strh	r3, [r7, #16]
 8003420:	8a3b      	ldrh	r3, [r7, #16]
 8003422:	f083 0320 	eor.w	r3, r3, #32
 8003426:	823b      	strh	r3, [r7, #16]
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	461a      	mov	r2, r3
 800342e:	68bb      	ldr	r3, [r7, #8]
 8003430:	781b      	ldrb	r3, [r3, #0]
 8003432:	009b      	lsls	r3, r3, #2
 8003434:	441a      	add	r2, r3
 8003436:	8a3b      	ldrh	r3, [r7, #16]
 8003438:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800343c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003440:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003444:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003448:	b29b      	uxth	r3, r3
 800344a:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 800344c:	2300      	movs	r3, #0
}
 800344e:	4618      	mov	r0, r3
 8003450:	3748      	adds	r7, #72	; 0x48
 8003452:	46bd      	mov	sp, r7
 8003454:	bd80      	pop	{r7, pc}

08003456 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8003456:	b480      	push	{r7}
 8003458:	b087      	sub	sp, #28
 800345a:	af00      	add	r7, sp, #0
 800345c:	60f8      	str	r0, [r7, #12]
 800345e:	607b      	str	r3, [r7, #4]
 8003460:	460b      	mov	r3, r1
 8003462:	817b      	strh	r3, [r7, #10]
 8003464:	4613      	mov	r3, r2
 8003466:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8003468:	897b      	ldrh	r3, [r7, #10]
 800346a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800346e:	b29b      	uxth	r3, r3
 8003470:	2b00      	cmp	r3, #0
 8003472:	d00b      	beq.n	800348c <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003474:	897b      	ldrh	r3, [r7, #10]
 8003476:	f003 0307 	and.w	r3, r3, #7
 800347a:	1c5a      	adds	r2, r3, #1
 800347c:	4613      	mov	r3, r2
 800347e:	009b      	lsls	r3, r3, #2
 8003480:	4413      	add	r3, r2
 8003482:	00db      	lsls	r3, r3, #3
 8003484:	68fa      	ldr	r2, [r7, #12]
 8003486:	4413      	add	r3, r2
 8003488:	617b      	str	r3, [r7, #20]
 800348a:	e009      	b.n	80034a0 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800348c:	897a      	ldrh	r2, [r7, #10]
 800348e:	4613      	mov	r3, r2
 8003490:	009b      	lsls	r3, r3, #2
 8003492:	4413      	add	r3, r2
 8003494:	00db      	lsls	r3, r3, #3
 8003496:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800349a:	68fa      	ldr	r2, [r7, #12]
 800349c:	4413      	add	r3, r2
 800349e:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80034a0:	893b      	ldrh	r3, [r7, #8]
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d107      	bne.n	80034b6 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80034a6:	697b      	ldr	r3, [r7, #20]
 80034a8:	2200      	movs	r2, #0
 80034aa:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	b29a      	uxth	r2, r3
 80034b0:	697b      	ldr	r3, [r7, #20]
 80034b2:	80da      	strh	r2, [r3, #6]
 80034b4:	e00b      	b.n	80034ce <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80034b6:	697b      	ldr	r3, [r7, #20]
 80034b8:	2201      	movs	r2, #1
 80034ba:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	b29a      	uxth	r2, r3
 80034c0:	697b      	ldr	r3, [r7, #20]
 80034c2:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	0c1b      	lsrs	r3, r3, #16
 80034c8:	b29a      	uxth	r2, r3
 80034ca:	697b      	ldr	r3, [r7, #20]
 80034cc:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 80034ce:	2300      	movs	r3, #0
}
 80034d0:	4618      	mov	r0, r3
 80034d2:	371c      	adds	r7, #28
 80034d4:	46bd      	mov	sp, r7
 80034d6:	bc80      	pop	{r7}
 80034d8:	4770      	bx	lr
	...

080034dc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80034dc:	b580      	push	{r7, lr}
 80034de:	b086      	sub	sp, #24
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d101      	bne.n	80034ee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80034ea:	2301      	movs	r3, #1
 80034ec:	e26c      	b.n	80039c8 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f003 0301 	and.w	r3, r3, #1
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	f000 8087 	beq.w	800360a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80034fc:	4b92      	ldr	r3, [pc, #584]	; (8003748 <HAL_RCC_OscConfig+0x26c>)
 80034fe:	685b      	ldr	r3, [r3, #4]
 8003500:	f003 030c 	and.w	r3, r3, #12
 8003504:	2b04      	cmp	r3, #4
 8003506:	d00c      	beq.n	8003522 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003508:	4b8f      	ldr	r3, [pc, #572]	; (8003748 <HAL_RCC_OscConfig+0x26c>)
 800350a:	685b      	ldr	r3, [r3, #4]
 800350c:	f003 030c 	and.w	r3, r3, #12
 8003510:	2b08      	cmp	r3, #8
 8003512:	d112      	bne.n	800353a <HAL_RCC_OscConfig+0x5e>
 8003514:	4b8c      	ldr	r3, [pc, #560]	; (8003748 <HAL_RCC_OscConfig+0x26c>)
 8003516:	685b      	ldr	r3, [r3, #4]
 8003518:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800351c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003520:	d10b      	bne.n	800353a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003522:	4b89      	ldr	r3, [pc, #548]	; (8003748 <HAL_RCC_OscConfig+0x26c>)
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800352a:	2b00      	cmp	r3, #0
 800352c:	d06c      	beq.n	8003608 <HAL_RCC_OscConfig+0x12c>
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	685b      	ldr	r3, [r3, #4]
 8003532:	2b00      	cmp	r3, #0
 8003534:	d168      	bne.n	8003608 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003536:	2301      	movs	r3, #1
 8003538:	e246      	b.n	80039c8 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	685b      	ldr	r3, [r3, #4]
 800353e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003542:	d106      	bne.n	8003552 <HAL_RCC_OscConfig+0x76>
 8003544:	4b80      	ldr	r3, [pc, #512]	; (8003748 <HAL_RCC_OscConfig+0x26c>)
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	4a7f      	ldr	r2, [pc, #508]	; (8003748 <HAL_RCC_OscConfig+0x26c>)
 800354a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800354e:	6013      	str	r3, [r2, #0]
 8003550:	e02e      	b.n	80035b0 <HAL_RCC_OscConfig+0xd4>
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	685b      	ldr	r3, [r3, #4]
 8003556:	2b00      	cmp	r3, #0
 8003558:	d10c      	bne.n	8003574 <HAL_RCC_OscConfig+0x98>
 800355a:	4b7b      	ldr	r3, [pc, #492]	; (8003748 <HAL_RCC_OscConfig+0x26c>)
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	4a7a      	ldr	r2, [pc, #488]	; (8003748 <HAL_RCC_OscConfig+0x26c>)
 8003560:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003564:	6013      	str	r3, [r2, #0]
 8003566:	4b78      	ldr	r3, [pc, #480]	; (8003748 <HAL_RCC_OscConfig+0x26c>)
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	4a77      	ldr	r2, [pc, #476]	; (8003748 <HAL_RCC_OscConfig+0x26c>)
 800356c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003570:	6013      	str	r3, [r2, #0]
 8003572:	e01d      	b.n	80035b0 <HAL_RCC_OscConfig+0xd4>
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	685b      	ldr	r3, [r3, #4]
 8003578:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800357c:	d10c      	bne.n	8003598 <HAL_RCC_OscConfig+0xbc>
 800357e:	4b72      	ldr	r3, [pc, #456]	; (8003748 <HAL_RCC_OscConfig+0x26c>)
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	4a71      	ldr	r2, [pc, #452]	; (8003748 <HAL_RCC_OscConfig+0x26c>)
 8003584:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003588:	6013      	str	r3, [r2, #0]
 800358a:	4b6f      	ldr	r3, [pc, #444]	; (8003748 <HAL_RCC_OscConfig+0x26c>)
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	4a6e      	ldr	r2, [pc, #440]	; (8003748 <HAL_RCC_OscConfig+0x26c>)
 8003590:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003594:	6013      	str	r3, [r2, #0]
 8003596:	e00b      	b.n	80035b0 <HAL_RCC_OscConfig+0xd4>
 8003598:	4b6b      	ldr	r3, [pc, #428]	; (8003748 <HAL_RCC_OscConfig+0x26c>)
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	4a6a      	ldr	r2, [pc, #424]	; (8003748 <HAL_RCC_OscConfig+0x26c>)
 800359e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80035a2:	6013      	str	r3, [r2, #0]
 80035a4:	4b68      	ldr	r3, [pc, #416]	; (8003748 <HAL_RCC_OscConfig+0x26c>)
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	4a67      	ldr	r2, [pc, #412]	; (8003748 <HAL_RCC_OscConfig+0x26c>)
 80035aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80035ae:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	685b      	ldr	r3, [r3, #4]
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d013      	beq.n	80035e0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035b8:	f7fd f9f8 	bl	80009ac <HAL_GetTick>
 80035bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035be:	e008      	b.n	80035d2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80035c0:	f7fd f9f4 	bl	80009ac <HAL_GetTick>
 80035c4:	4602      	mov	r2, r0
 80035c6:	693b      	ldr	r3, [r7, #16]
 80035c8:	1ad3      	subs	r3, r2, r3
 80035ca:	2b64      	cmp	r3, #100	; 0x64
 80035cc:	d901      	bls.n	80035d2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80035ce:	2303      	movs	r3, #3
 80035d0:	e1fa      	b.n	80039c8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035d2:	4b5d      	ldr	r3, [pc, #372]	; (8003748 <HAL_RCC_OscConfig+0x26c>)
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d0f0      	beq.n	80035c0 <HAL_RCC_OscConfig+0xe4>
 80035de:	e014      	b.n	800360a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035e0:	f7fd f9e4 	bl	80009ac <HAL_GetTick>
 80035e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80035e6:	e008      	b.n	80035fa <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80035e8:	f7fd f9e0 	bl	80009ac <HAL_GetTick>
 80035ec:	4602      	mov	r2, r0
 80035ee:	693b      	ldr	r3, [r7, #16]
 80035f0:	1ad3      	subs	r3, r2, r3
 80035f2:	2b64      	cmp	r3, #100	; 0x64
 80035f4:	d901      	bls.n	80035fa <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80035f6:	2303      	movs	r3, #3
 80035f8:	e1e6      	b.n	80039c8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80035fa:	4b53      	ldr	r3, [pc, #332]	; (8003748 <HAL_RCC_OscConfig+0x26c>)
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003602:	2b00      	cmp	r3, #0
 8003604:	d1f0      	bne.n	80035e8 <HAL_RCC_OscConfig+0x10c>
 8003606:	e000      	b.n	800360a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003608:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f003 0302 	and.w	r3, r3, #2
 8003612:	2b00      	cmp	r3, #0
 8003614:	d063      	beq.n	80036de <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003616:	4b4c      	ldr	r3, [pc, #304]	; (8003748 <HAL_RCC_OscConfig+0x26c>)
 8003618:	685b      	ldr	r3, [r3, #4]
 800361a:	f003 030c 	and.w	r3, r3, #12
 800361e:	2b00      	cmp	r3, #0
 8003620:	d00b      	beq.n	800363a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003622:	4b49      	ldr	r3, [pc, #292]	; (8003748 <HAL_RCC_OscConfig+0x26c>)
 8003624:	685b      	ldr	r3, [r3, #4]
 8003626:	f003 030c 	and.w	r3, r3, #12
 800362a:	2b08      	cmp	r3, #8
 800362c:	d11c      	bne.n	8003668 <HAL_RCC_OscConfig+0x18c>
 800362e:	4b46      	ldr	r3, [pc, #280]	; (8003748 <HAL_RCC_OscConfig+0x26c>)
 8003630:	685b      	ldr	r3, [r3, #4]
 8003632:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003636:	2b00      	cmp	r3, #0
 8003638:	d116      	bne.n	8003668 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800363a:	4b43      	ldr	r3, [pc, #268]	; (8003748 <HAL_RCC_OscConfig+0x26c>)
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f003 0302 	and.w	r3, r3, #2
 8003642:	2b00      	cmp	r3, #0
 8003644:	d005      	beq.n	8003652 <HAL_RCC_OscConfig+0x176>
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	691b      	ldr	r3, [r3, #16]
 800364a:	2b01      	cmp	r3, #1
 800364c:	d001      	beq.n	8003652 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800364e:	2301      	movs	r3, #1
 8003650:	e1ba      	b.n	80039c8 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003652:	4b3d      	ldr	r3, [pc, #244]	; (8003748 <HAL_RCC_OscConfig+0x26c>)
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	695b      	ldr	r3, [r3, #20]
 800365e:	00db      	lsls	r3, r3, #3
 8003660:	4939      	ldr	r1, [pc, #228]	; (8003748 <HAL_RCC_OscConfig+0x26c>)
 8003662:	4313      	orrs	r3, r2
 8003664:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003666:	e03a      	b.n	80036de <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	691b      	ldr	r3, [r3, #16]
 800366c:	2b00      	cmp	r3, #0
 800366e:	d020      	beq.n	80036b2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003670:	4b36      	ldr	r3, [pc, #216]	; (800374c <HAL_RCC_OscConfig+0x270>)
 8003672:	2201      	movs	r2, #1
 8003674:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003676:	f7fd f999 	bl	80009ac <HAL_GetTick>
 800367a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800367c:	e008      	b.n	8003690 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800367e:	f7fd f995 	bl	80009ac <HAL_GetTick>
 8003682:	4602      	mov	r2, r0
 8003684:	693b      	ldr	r3, [r7, #16]
 8003686:	1ad3      	subs	r3, r2, r3
 8003688:	2b02      	cmp	r3, #2
 800368a:	d901      	bls.n	8003690 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800368c:	2303      	movs	r3, #3
 800368e:	e19b      	b.n	80039c8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003690:	4b2d      	ldr	r3, [pc, #180]	; (8003748 <HAL_RCC_OscConfig+0x26c>)
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f003 0302 	and.w	r3, r3, #2
 8003698:	2b00      	cmp	r3, #0
 800369a:	d0f0      	beq.n	800367e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800369c:	4b2a      	ldr	r3, [pc, #168]	; (8003748 <HAL_RCC_OscConfig+0x26c>)
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	695b      	ldr	r3, [r3, #20]
 80036a8:	00db      	lsls	r3, r3, #3
 80036aa:	4927      	ldr	r1, [pc, #156]	; (8003748 <HAL_RCC_OscConfig+0x26c>)
 80036ac:	4313      	orrs	r3, r2
 80036ae:	600b      	str	r3, [r1, #0]
 80036b0:	e015      	b.n	80036de <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80036b2:	4b26      	ldr	r3, [pc, #152]	; (800374c <HAL_RCC_OscConfig+0x270>)
 80036b4:	2200      	movs	r2, #0
 80036b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036b8:	f7fd f978 	bl	80009ac <HAL_GetTick>
 80036bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80036be:	e008      	b.n	80036d2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80036c0:	f7fd f974 	bl	80009ac <HAL_GetTick>
 80036c4:	4602      	mov	r2, r0
 80036c6:	693b      	ldr	r3, [r7, #16]
 80036c8:	1ad3      	subs	r3, r2, r3
 80036ca:	2b02      	cmp	r3, #2
 80036cc:	d901      	bls.n	80036d2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80036ce:	2303      	movs	r3, #3
 80036d0:	e17a      	b.n	80039c8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80036d2:	4b1d      	ldr	r3, [pc, #116]	; (8003748 <HAL_RCC_OscConfig+0x26c>)
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f003 0302 	and.w	r3, r3, #2
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d1f0      	bne.n	80036c0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f003 0308 	and.w	r3, r3, #8
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d03a      	beq.n	8003760 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	699b      	ldr	r3, [r3, #24]
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d019      	beq.n	8003726 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80036f2:	4b17      	ldr	r3, [pc, #92]	; (8003750 <HAL_RCC_OscConfig+0x274>)
 80036f4:	2201      	movs	r2, #1
 80036f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036f8:	f7fd f958 	bl	80009ac <HAL_GetTick>
 80036fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80036fe:	e008      	b.n	8003712 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003700:	f7fd f954 	bl	80009ac <HAL_GetTick>
 8003704:	4602      	mov	r2, r0
 8003706:	693b      	ldr	r3, [r7, #16]
 8003708:	1ad3      	subs	r3, r2, r3
 800370a:	2b02      	cmp	r3, #2
 800370c:	d901      	bls.n	8003712 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800370e:	2303      	movs	r3, #3
 8003710:	e15a      	b.n	80039c8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003712:	4b0d      	ldr	r3, [pc, #52]	; (8003748 <HAL_RCC_OscConfig+0x26c>)
 8003714:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003716:	f003 0302 	and.w	r3, r3, #2
 800371a:	2b00      	cmp	r3, #0
 800371c:	d0f0      	beq.n	8003700 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800371e:	2001      	movs	r0, #1
 8003720:	f000 fac6 	bl	8003cb0 <RCC_Delay>
 8003724:	e01c      	b.n	8003760 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003726:	4b0a      	ldr	r3, [pc, #40]	; (8003750 <HAL_RCC_OscConfig+0x274>)
 8003728:	2200      	movs	r2, #0
 800372a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800372c:	f7fd f93e 	bl	80009ac <HAL_GetTick>
 8003730:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003732:	e00f      	b.n	8003754 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003734:	f7fd f93a 	bl	80009ac <HAL_GetTick>
 8003738:	4602      	mov	r2, r0
 800373a:	693b      	ldr	r3, [r7, #16]
 800373c:	1ad3      	subs	r3, r2, r3
 800373e:	2b02      	cmp	r3, #2
 8003740:	d908      	bls.n	8003754 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003742:	2303      	movs	r3, #3
 8003744:	e140      	b.n	80039c8 <HAL_RCC_OscConfig+0x4ec>
 8003746:	bf00      	nop
 8003748:	40021000 	.word	0x40021000
 800374c:	42420000 	.word	0x42420000
 8003750:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003754:	4b9e      	ldr	r3, [pc, #632]	; (80039d0 <HAL_RCC_OscConfig+0x4f4>)
 8003756:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003758:	f003 0302 	and.w	r3, r3, #2
 800375c:	2b00      	cmp	r3, #0
 800375e:	d1e9      	bne.n	8003734 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f003 0304 	and.w	r3, r3, #4
 8003768:	2b00      	cmp	r3, #0
 800376a:	f000 80a6 	beq.w	80038ba <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800376e:	2300      	movs	r3, #0
 8003770:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003772:	4b97      	ldr	r3, [pc, #604]	; (80039d0 <HAL_RCC_OscConfig+0x4f4>)
 8003774:	69db      	ldr	r3, [r3, #28]
 8003776:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800377a:	2b00      	cmp	r3, #0
 800377c:	d10d      	bne.n	800379a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800377e:	4b94      	ldr	r3, [pc, #592]	; (80039d0 <HAL_RCC_OscConfig+0x4f4>)
 8003780:	69db      	ldr	r3, [r3, #28]
 8003782:	4a93      	ldr	r2, [pc, #588]	; (80039d0 <HAL_RCC_OscConfig+0x4f4>)
 8003784:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003788:	61d3      	str	r3, [r2, #28]
 800378a:	4b91      	ldr	r3, [pc, #580]	; (80039d0 <HAL_RCC_OscConfig+0x4f4>)
 800378c:	69db      	ldr	r3, [r3, #28]
 800378e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003792:	60bb      	str	r3, [r7, #8]
 8003794:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003796:	2301      	movs	r3, #1
 8003798:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800379a:	4b8e      	ldr	r3, [pc, #568]	; (80039d4 <HAL_RCC_OscConfig+0x4f8>)
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d118      	bne.n	80037d8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80037a6:	4b8b      	ldr	r3, [pc, #556]	; (80039d4 <HAL_RCC_OscConfig+0x4f8>)
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	4a8a      	ldr	r2, [pc, #552]	; (80039d4 <HAL_RCC_OscConfig+0x4f8>)
 80037ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037b0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80037b2:	f7fd f8fb 	bl	80009ac <HAL_GetTick>
 80037b6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037b8:	e008      	b.n	80037cc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80037ba:	f7fd f8f7 	bl	80009ac <HAL_GetTick>
 80037be:	4602      	mov	r2, r0
 80037c0:	693b      	ldr	r3, [r7, #16]
 80037c2:	1ad3      	subs	r3, r2, r3
 80037c4:	2b64      	cmp	r3, #100	; 0x64
 80037c6:	d901      	bls.n	80037cc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80037c8:	2303      	movs	r3, #3
 80037ca:	e0fd      	b.n	80039c8 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037cc:	4b81      	ldr	r3, [pc, #516]	; (80039d4 <HAL_RCC_OscConfig+0x4f8>)
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d0f0      	beq.n	80037ba <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	68db      	ldr	r3, [r3, #12]
 80037dc:	2b01      	cmp	r3, #1
 80037de:	d106      	bne.n	80037ee <HAL_RCC_OscConfig+0x312>
 80037e0:	4b7b      	ldr	r3, [pc, #492]	; (80039d0 <HAL_RCC_OscConfig+0x4f4>)
 80037e2:	6a1b      	ldr	r3, [r3, #32]
 80037e4:	4a7a      	ldr	r2, [pc, #488]	; (80039d0 <HAL_RCC_OscConfig+0x4f4>)
 80037e6:	f043 0301 	orr.w	r3, r3, #1
 80037ea:	6213      	str	r3, [r2, #32]
 80037ec:	e02d      	b.n	800384a <HAL_RCC_OscConfig+0x36e>
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	68db      	ldr	r3, [r3, #12]
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d10c      	bne.n	8003810 <HAL_RCC_OscConfig+0x334>
 80037f6:	4b76      	ldr	r3, [pc, #472]	; (80039d0 <HAL_RCC_OscConfig+0x4f4>)
 80037f8:	6a1b      	ldr	r3, [r3, #32]
 80037fa:	4a75      	ldr	r2, [pc, #468]	; (80039d0 <HAL_RCC_OscConfig+0x4f4>)
 80037fc:	f023 0301 	bic.w	r3, r3, #1
 8003800:	6213      	str	r3, [r2, #32]
 8003802:	4b73      	ldr	r3, [pc, #460]	; (80039d0 <HAL_RCC_OscConfig+0x4f4>)
 8003804:	6a1b      	ldr	r3, [r3, #32]
 8003806:	4a72      	ldr	r2, [pc, #456]	; (80039d0 <HAL_RCC_OscConfig+0x4f4>)
 8003808:	f023 0304 	bic.w	r3, r3, #4
 800380c:	6213      	str	r3, [r2, #32]
 800380e:	e01c      	b.n	800384a <HAL_RCC_OscConfig+0x36e>
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	68db      	ldr	r3, [r3, #12]
 8003814:	2b05      	cmp	r3, #5
 8003816:	d10c      	bne.n	8003832 <HAL_RCC_OscConfig+0x356>
 8003818:	4b6d      	ldr	r3, [pc, #436]	; (80039d0 <HAL_RCC_OscConfig+0x4f4>)
 800381a:	6a1b      	ldr	r3, [r3, #32]
 800381c:	4a6c      	ldr	r2, [pc, #432]	; (80039d0 <HAL_RCC_OscConfig+0x4f4>)
 800381e:	f043 0304 	orr.w	r3, r3, #4
 8003822:	6213      	str	r3, [r2, #32]
 8003824:	4b6a      	ldr	r3, [pc, #424]	; (80039d0 <HAL_RCC_OscConfig+0x4f4>)
 8003826:	6a1b      	ldr	r3, [r3, #32]
 8003828:	4a69      	ldr	r2, [pc, #420]	; (80039d0 <HAL_RCC_OscConfig+0x4f4>)
 800382a:	f043 0301 	orr.w	r3, r3, #1
 800382e:	6213      	str	r3, [r2, #32]
 8003830:	e00b      	b.n	800384a <HAL_RCC_OscConfig+0x36e>
 8003832:	4b67      	ldr	r3, [pc, #412]	; (80039d0 <HAL_RCC_OscConfig+0x4f4>)
 8003834:	6a1b      	ldr	r3, [r3, #32]
 8003836:	4a66      	ldr	r2, [pc, #408]	; (80039d0 <HAL_RCC_OscConfig+0x4f4>)
 8003838:	f023 0301 	bic.w	r3, r3, #1
 800383c:	6213      	str	r3, [r2, #32]
 800383e:	4b64      	ldr	r3, [pc, #400]	; (80039d0 <HAL_RCC_OscConfig+0x4f4>)
 8003840:	6a1b      	ldr	r3, [r3, #32]
 8003842:	4a63      	ldr	r2, [pc, #396]	; (80039d0 <HAL_RCC_OscConfig+0x4f4>)
 8003844:	f023 0304 	bic.w	r3, r3, #4
 8003848:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	68db      	ldr	r3, [r3, #12]
 800384e:	2b00      	cmp	r3, #0
 8003850:	d015      	beq.n	800387e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003852:	f7fd f8ab 	bl	80009ac <HAL_GetTick>
 8003856:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003858:	e00a      	b.n	8003870 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800385a:	f7fd f8a7 	bl	80009ac <HAL_GetTick>
 800385e:	4602      	mov	r2, r0
 8003860:	693b      	ldr	r3, [r7, #16]
 8003862:	1ad3      	subs	r3, r2, r3
 8003864:	f241 3288 	movw	r2, #5000	; 0x1388
 8003868:	4293      	cmp	r3, r2
 800386a:	d901      	bls.n	8003870 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800386c:	2303      	movs	r3, #3
 800386e:	e0ab      	b.n	80039c8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003870:	4b57      	ldr	r3, [pc, #348]	; (80039d0 <HAL_RCC_OscConfig+0x4f4>)
 8003872:	6a1b      	ldr	r3, [r3, #32]
 8003874:	f003 0302 	and.w	r3, r3, #2
 8003878:	2b00      	cmp	r3, #0
 800387a:	d0ee      	beq.n	800385a <HAL_RCC_OscConfig+0x37e>
 800387c:	e014      	b.n	80038a8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800387e:	f7fd f895 	bl	80009ac <HAL_GetTick>
 8003882:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003884:	e00a      	b.n	800389c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003886:	f7fd f891 	bl	80009ac <HAL_GetTick>
 800388a:	4602      	mov	r2, r0
 800388c:	693b      	ldr	r3, [r7, #16]
 800388e:	1ad3      	subs	r3, r2, r3
 8003890:	f241 3288 	movw	r2, #5000	; 0x1388
 8003894:	4293      	cmp	r3, r2
 8003896:	d901      	bls.n	800389c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003898:	2303      	movs	r3, #3
 800389a:	e095      	b.n	80039c8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800389c:	4b4c      	ldr	r3, [pc, #304]	; (80039d0 <HAL_RCC_OscConfig+0x4f4>)
 800389e:	6a1b      	ldr	r3, [r3, #32]
 80038a0:	f003 0302 	and.w	r3, r3, #2
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d1ee      	bne.n	8003886 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80038a8:	7dfb      	ldrb	r3, [r7, #23]
 80038aa:	2b01      	cmp	r3, #1
 80038ac:	d105      	bne.n	80038ba <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80038ae:	4b48      	ldr	r3, [pc, #288]	; (80039d0 <HAL_RCC_OscConfig+0x4f4>)
 80038b0:	69db      	ldr	r3, [r3, #28]
 80038b2:	4a47      	ldr	r2, [pc, #284]	; (80039d0 <HAL_RCC_OscConfig+0x4f4>)
 80038b4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80038b8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	69db      	ldr	r3, [r3, #28]
 80038be:	2b00      	cmp	r3, #0
 80038c0:	f000 8081 	beq.w	80039c6 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80038c4:	4b42      	ldr	r3, [pc, #264]	; (80039d0 <HAL_RCC_OscConfig+0x4f4>)
 80038c6:	685b      	ldr	r3, [r3, #4]
 80038c8:	f003 030c 	and.w	r3, r3, #12
 80038cc:	2b08      	cmp	r3, #8
 80038ce:	d061      	beq.n	8003994 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	69db      	ldr	r3, [r3, #28]
 80038d4:	2b02      	cmp	r3, #2
 80038d6:	d146      	bne.n	8003966 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038d8:	4b3f      	ldr	r3, [pc, #252]	; (80039d8 <HAL_RCC_OscConfig+0x4fc>)
 80038da:	2200      	movs	r2, #0
 80038dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038de:	f7fd f865 	bl	80009ac <HAL_GetTick>
 80038e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80038e4:	e008      	b.n	80038f8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038e6:	f7fd f861 	bl	80009ac <HAL_GetTick>
 80038ea:	4602      	mov	r2, r0
 80038ec:	693b      	ldr	r3, [r7, #16]
 80038ee:	1ad3      	subs	r3, r2, r3
 80038f0:	2b02      	cmp	r3, #2
 80038f2:	d901      	bls.n	80038f8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80038f4:	2303      	movs	r3, #3
 80038f6:	e067      	b.n	80039c8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80038f8:	4b35      	ldr	r3, [pc, #212]	; (80039d0 <HAL_RCC_OscConfig+0x4f4>)
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003900:	2b00      	cmp	r3, #0
 8003902:	d1f0      	bne.n	80038e6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6a1b      	ldr	r3, [r3, #32]
 8003908:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800390c:	d108      	bne.n	8003920 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800390e:	4b30      	ldr	r3, [pc, #192]	; (80039d0 <HAL_RCC_OscConfig+0x4f4>)
 8003910:	685b      	ldr	r3, [r3, #4]
 8003912:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	689b      	ldr	r3, [r3, #8]
 800391a:	492d      	ldr	r1, [pc, #180]	; (80039d0 <HAL_RCC_OscConfig+0x4f4>)
 800391c:	4313      	orrs	r3, r2
 800391e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003920:	4b2b      	ldr	r3, [pc, #172]	; (80039d0 <HAL_RCC_OscConfig+0x4f4>)
 8003922:	685b      	ldr	r3, [r3, #4]
 8003924:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6a19      	ldr	r1, [r3, #32]
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003930:	430b      	orrs	r3, r1
 8003932:	4927      	ldr	r1, [pc, #156]	; (80039d0 <HAL_RCC_OscConfig+0x4f4>)
 8003934:	4313      	orrs	r3, r2
 8003936:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003938:	4b27      	ldr	r3, [pc, #156]	; (80039d8 <HAL_RCC_OscConfig+0x4fc>)
 800393a:	2201      	movs	r2, #1
 800393c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800393e:	f7fd f835 	bl	80009ac <HAL_GetTick>
 8003942:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003944:	e008      	b.n	8003958 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003946:	f7fd f831 	bl	80009ac <HAL_GetTick>
 800394a:	4602      	mov	r2, r0
 800394c:	693b      	ldr	r3, [r7, #16]
 800394e:	1ad3      	subs	r3, r2, r3
 8003950:	2b02      	cmp	r3, #2
 8003952:	d901      	bls.n	8003958 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003954:	2303      	movs	r3, #3
 8003956:	e037      	b.n	80039c8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003958:	4b1d      	ldr	r3, [pc, #116]	; (80039d0 <HAL_RCC_OscConfig+0x4f4>)
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003960:	2b00      	cmp	r3, #0
 8003962:	d0f0      	beq.n	8003946 <HAL_RCC_OscConfig+0x46a>
 8003964:	e02f      	b.n	80039c6 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003966:	4b1c      	ldr	r3, [pc, #112]	; (80039d8 <HAL_RCC_OscConfig+0x4fc>)
 8003968:	2200      	movs	r2, #0
 800396a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800396c:	f7fd f81e 	bl	80009ac <HAL_GetTick>
 8003970:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003972:	e008      	b.n	8003986 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003974:	f7fd f81a 	bl	80009ac <HAL_GetTick>
 8003978:	4602      	mov	r2, r0
 800397a:	693b      	ldr	r3, [r7, #16]
 800397c:	1ad3      	subs	r3, r2, r3
 800397e:	2b02      	cmp	r3, #2
 8003980:	d901      	bls.n	8003986 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003982:	2303      	movs	r3, #3
 8003984:	e020      	b.n	80039c8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003986:	4b12      	ldr	r3, [pc, #72]	; (80039d0 <HAL_RCC_OscConfig+0x4f4>)
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800398e:	2b00      	cmp	r3, #0
 8003990:	d1f0      	bne.n	8003974 <HAL_RCC_OscConfig+0x498>
 8003992:	e018      	b.n	80039c6 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	69db      	ldr	r3, [r3, #28]
 8003998:	2b01      	cmp	r3, #1
 800399a:	d101      	bne.n	80039a0 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 800399c:	2301      	movs	r3, #1
 800399e:	e013      	b.n	80039c8 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80039a0:	4b0b      	ldr	r3, [pc, #44]	; (80039d0 <HAL_RCC_OscConfig+0x4f4>)
 80039a2:	685b      	ldr	r3, [r3, #4]
 80039a4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	6a1b      	ldr	r3, [r3, #32]
 80039b0:	429a      	cmp	r2, r3
 80039b2:	d106      	bne.n	80039c2 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80039be:	429a      	cmp	r2, r3
 80039c0:	d001      	beq.n	80039c6 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80039c2:	2301      	movs	r3, #1
 80039c4:	e000      	b.n	80039c8 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80039c6:	2300      	movs	r3, #0
}
 80039c8:	4618      	mov	r0, r3
 80039ca:	3718      	adds	r7, #24
 80039cc:	46bd      	mov	sp, r7
 80039ce:	bd80      	pop	{r7, pc}
 80039d0:	40021000 	.word	0x40021000
 80039d4:	40007000 	.word	0x40007000
 80039d8:	42420060 	.word	0x42420060

080039dc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80039dc:	b580      	push	{r7, lr}
 80039de:	b084      	sub	sp, #16
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	6078      	str	r0, [r7, #4]
 80039e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d101      	bne.n	80039f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80039ec:	2301      	movs	r3, #1
 80039ee:	e0d0      	b.n	8003b92 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80039f0:	4b6a      	ldr	r3, [pc, #424]	; (8003b9c <HAL_RCC_ClockConfig+0x1c0>)
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f003 0307 	and.w	r3, r3, #7
 80039f8:	683a      	ldr	r2, [r7, #0]
 80039fa:	429a      	cmp	r2, r3
 80039fc:	d910      	bls.n	8003a20 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039fe:	4b67      	ldr	r3, [pc, #412]	; (8003b9c <HAL_RCC_ClockConfig+0x1c0>)
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f023 0207 	bic.w	r2, r3, #7
 8003a06:	4965      	ldr	r1, [pc, #404]	; (8003b9c <HAL_RCC_ClockConfig+0x1c0>)
 8003a08:	683b      	ldr	r3, [r7, #0]
 8003a0a:	4313      	orrs	r3, r2
 8003a0c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a0e:	4b63      	ldr	r3, [pc, #396]	; (8003b9c <HAL_RCC_ClockConfig+0x1c0>)
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f003 0307 	and.w	r3, r3, #7
 8003a16:	683a      	ldr	r2, [r7, #0]
 8003a18:	429a      	cmp	r2, r3
 8003a1a:	d001      	beq.n	8003a20 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003a1c:	2301      	movs	r3, #1
 8003a1e:	e0b8      	b.n	8003b92 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f003 0302 	and.w	r3, r3, #2
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d020      	beq.n	8003a6e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f003 0304 	and.w	r3, r3, #4
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d005      	beq.n	8003a44 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003a38:	4b59      	ldr	r3, [pc, #356]	; (8003ba0 <HAL_RCC_ClockConfig+0x1c4>)
 8003a3a:	685b      	ldr	r3, [r3, #4]
 8003a3c:	4a58      	ldr	r2, [pc, #352]	; (8003ba0 <HAL_RCC_ClockConfig+0x1c4>)
 8003a3e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003a42:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f003 0308 	and.w	r3, r3, #8
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d005      	beq.n	8003a5c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003a50:	4b53      	ldr	r3, [pc, #332]	; (8003ba0 <HAL_RCC_ClockConfig+0x1c4>)
 8003a52:	685b      	ldr	r3, [r3, #4]
 8003a54:	4a52      	ldr	r2, [pc, #328]	; (8003ba0 <HAL_RCC_ClockConfig+0x1c4>)
 8003a56:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003a5a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a5c:	4b50      	ldr	r3, [pc, #320]	; (8003ba0 <HAL_RCC_ClockConfig+0x1c4>)
 8003a5e:	685b      	ldr	r3, [r3, #4]
 8003a60:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	689b      	ldr	r3, [r3, #8]
 8003a68:	494d      	ldr	r1, [pc, #308]	; (8003ba0 <HAL_RCC_ClockConfig+0x1c4>)
 8003a6a:	4313      	orrs	r3, r2
 8003a6c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f003 0301 	and.w	r3, r3, #1
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d040      	beq.n	8003afc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	685b      	ldr	r3, [r3, #4]
 8003a7e:	2b01      	cmp	r3, #1
 8003a80:	d107      	bne.n	8003a92 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a82:	4b47      	ldr	r3, [pc, #284]	; (8003ba0 <HAL_RCC_ClockConfig+0x1c4>)
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d115      	bne.n	8003aba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a8e:	2301      	movs	r3, #1
 8003a90:	e07f      	b.n	8003b92 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	685b      	ldr	r3, [r3, #4]
 8003a96:	2b02      	cmp	r3, #2
 8003a98:	d107      	bne.n	8003aaa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a9a:	4b41      	ldr	r3, [pc, #260]	; (8003ba0 <HAL_RCC_ClockConfig+0x1c4>)
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d109      	bne.n	8003aba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003aa6:	2301      	movs	r3, #1
 8003aa8:	e073      	b.n	8003b92 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003aaa:	4b3d      	ldr	r3, [pc, #244]	; (8003ba0 <HAL_RCC_ClockConfig+0x1c4>)
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f003 0302 	and.w	r3, r3, #2
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d101      	bne.n	8003aba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ab6:	2301      	movs	r3, #1
 8003ab8:	e06b      	b.n	8003b92 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003aba:	4b39      	ldr	r3, [pc, #228]	; (8003ba0 <HAL_RCC_ClockConfig+0x1c4>)
 8003abc:	685b      	ldr	r3, [r3, #4]
 8003abe:	f023 0203 	bic.w	r2, r3, #3
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	685b      	ldr	r3, [r3, #4]
 8003ac6:	4936      	ldr	r1, [pc, #216]	; (8003ba0 <HAL_RCC_ClockConfig+0x1c4>)
 8003ac8:	4313      	orrs	r3, r2
 8003aca:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003acc:	f7fc ff6e 	bl	80009ac <HAL_GetTick>
 8003ad0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ad2:	e00a      	b.n	8003aea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ad4:	f7fc ff6a 	bl	80009ac <HAL_GetTick>
 8003ad8:	4602      	mov	r2, r0
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	1ad3      	subs	r3, r2, r3
 8003ade:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ae2:	4293      	cmp	r3, r2
 8003ae4:	d901      	bls.n	8003aea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003ae6:	2303      	movs	r3, #3
 8003ae8:	e053      	b.n	8003b92 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003aea:	4b2d      	ldr	r3, [pc, #180]	; (8003ba0 <HAL_RCC_ClockConfig+0x1c4>)
 8003aec:	685b      	ldr	r3, [r3, #4]
 8003aee:	f003 020c 	and.w	r2, r3, #12
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	685b      	ldr	r3, [r3, #4]
 8003af6:	009b      	lsls	r3, r3, #2
 8003af8:	429a      	cmp	r2, r3
 8003afa:	d1eb      	bne.n	8003ad4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003afc:	4b27      	ldr	r3, [pc, #156]	; (8003b9c <HAL_RCC_ClockConfig+0x1c0>)
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f003 0307 	and.w	r3, r3, #7
 8003b04:	683a      	ldr	r2, [r7, #0]
 8003b06:	429a      	cmp	r2, r3
 8003b08:	d210      	bcs.n	8003b2c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b0a:	4b24      	ldr	r3, [pc, #144]	; (8003b9c <HAL_RCC_ClockConfig+0x1c0>)
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f023 0207 	bic.w	r2, r3, #7
 8003b12:	4922      	ldr	r1, [pc, #136]	; (8003b9c <HAL_RCC_ClockConfig+0x1c0>)
 8003b14:	683b      	ldr	r3, [r7, #0]
 8003b16:	4313      	orrs	r3, r2
 8003b18:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b1a:	4b20      	ldr	r3, [pc, #128]	; (8003b9c <HAL_RCC_ClockConfig+0x1c0>)
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f003 0307 	and.w	r3, r3, #7
 8003b22:	683a      	ldr	r2, [r7, #0]
 8003b24:	429a      	cmp	r2, r3
 8003b26:	d001      	beq.n	8003b2c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003b28:	2301      	movs	r3, #1
 8003b2a:	e032      	b.n	8003b92 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f003 0304 	and.w	r3, r3, #4
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d008      	beq.n	8003b4a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b38:	4b19      	ldr	r3, [pc, #100]	; (8003ba0 <HAL_RCC_ClockConfig+0x1c4>)
 8003b3a:	685b      	ldr	r3, [r3, #4]
 8003b3c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	68db      	ldr	r3, [r3, #12]
 8003b44:	4916      	ldr	r1, [pc, #88]	; (8003ba0 <HAL_RCC_ClockConfig+0x1c4>)
 8003b46:	4313      	orrs	r3, r2
 8003b48:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f003 0308 	and.w	r3, r3, #8
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d009      	beq.n	8003b6a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003b56:	4b12      	ldr	r3, [pc, #72]	; (8003ba0 <HAL_RCC_ClockConfig+0x1c4>)
 8003b58:	685b      	ldr	r3, [r3, #4]
 8003b5a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	691b      	ldr	r3, [r3, #16]
 8003b62:	00db      	lsls	r3, r3, #3
 8003b64:	490e      	ldr	r1, [pc, #56]	; (8003ba0 <HAL_RCC_ClockConfig+0x1c4>)
 8003b66:	4313      	orrs	r3, r2
 8003b68:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003b6a:	f000 f821 	bl	8003bb0 <HAL_RCC_GetSysClockFreq>
 8003b6e:	4601      	mov	r1, r0
 8003b70:	4b0b      	ldr	r3, [pc, #44]	; (8003ba0 <HAL_RCC_ClockConfig+0x1c4>)
 8003b72:	685b      	ldr	r3, [r3, #4]
 8003b74:	091b      	lsrs	r3, r3, #4
 8003b76:	f003 030f 	and.w	r3, r3, #15
 8003b7a:	4a0a      	ldr	r2, [pc, #40]	; (8003ba4 <HAL_RCC_ClockConfig+0x1c8>)
 8003b7c:	5cd3      	ldrb	r3, [r2, r3]
 8003b7e:	fa21 f303 	lsr.w	r3, r1, r3
 8003b82:	4a09      	ldr	r2, [pc, #36]	; (8003ba8 <HAL_RCC_ClockConfig+0x1cc>)
 8003b84:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003b86:	4b09      	ldr	r3, [pc, #36]	; (8003bac <HAL_RCC_ClockConfig+0x1d0>)
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	f7fc fecc 	bl	8000928 <HAL_InitTick>

  return HAL_OK;
 8003b90:	2300      	movs	r3, #0
}
 8003b92:	4618      	mov	r0, r3
 8003b94:	3710      	adds	r7, #16
 8003b96:	46bd      	mov	sp, r7
 8003b98:	bd80      	pop	{r7, pc}
 8003b9a:	bf00      	nop
 8003b9c:	40022000 	.word	0x40022000
 8003ba0:	40021000 	.word	0x40021000
 8003ba4:	08008344 	.word	0x08008344
 8003ba8:	20000004 	.word	0x20000004
 8003bac:	20000008 	.word	0x20000008

08003bb0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003bb0:	b490      	push	{r4, r7}
 8003bb2:	b08a      	sub	sp, #40	; 0x28
 8003bb4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003bb6:	4b2a      	ldr	r3, [pc, #168]	; (8003c60 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003bb8:	1d3c      	adds	r4, r7, #4
 8003bba:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003bbc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003bc0:	4b28      	ldr	r3, [pc, #160]	; (8003c64 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003bc2:	881b      	ldrh	r3, [r3, #0]
 8003bc4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003bc6:	2300      	movs	r3, #0
 8003bc8:	61fb      	str	r3, [r7, #28]
 8003bca:	2300      	movs	r3, #0
 8003bcc:	61bb      	str	r3, [r7, #24]
 8003bce:	2300      	movs	r3, #0
 8003bd0:	627b      	str	r3, [r7, #36]	; 0x24
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003bd6:	2300      	movs	r3, #0
 8003bd8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003bda:	4b23      	ldr	r3, [pc, #140]	; (8003c68 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003bdc:	685b      	ldr	r3, [r3, #4]
 8003bde:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003be0:	69fb      	ldr	r3, [r7, #28]
 8003be2:	f003 030c 	and.w	r3, r3, #12
 8003be6:	2b04      	cmp	r3, #4
 8003be8:	d002      	beq.n	8003bf0 <HAL_RCC_GetSysClockFreq+0x40>
 8003bea:	2b08      	cmp	r3, #8
 8003bec:	d003      	beq.n	8003bf6 <HAL_RCC_GetSysClockFreq+0x46>
 8003bee:	e02d      	b.n	8003c4c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003bf0:	4b1e      	ldr	r3, [pc, #120]	; (8003c6c <HAL_RCC_GetSysClockFreq+0xbc>)
 8003bf2:	623b      	str	r3, [r7, #32]
      break;
 8003bf4:	e02d      	b.n	8003c52 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003bf6:	69fb      	ldr	r3, [r7, #28]
 8003bf8:	0c9b      	lsrs	r3, r3, #18
 8003bfa:	f003 030f 	and.w	r3, r3, #15
 8003bfe:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003c02:	4413      	add	r3, r2
 8003c04:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003c08:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003c0a:	69fb      	ldr	r3, [r7, #28]
 8003c0c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d013      	beq.n	8003c3c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003c14:	4b14      	ldr	r3, [pc, #80]	; (8003c68 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003c16:	685b      	ldr	r3, [r3, #4]
 8003c18:	0c5b      	lsrs	r3, r3, #17
 8003c1a:	f003 0301 	and.w	r3, r3, #1
 8003c1e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003c22:	4413      	add	r3, r2
 8003c24:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003c28:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003c2a:	697b      	ldr	r3, [r7, #20]
 8003c2c:	4a0f      	ldr	r2, [pc, #60]	; (8003c6c <HAL_RCC_GetSysClockFreq+0xbc>)
 8003c2e:	fb02 f203 	mul.w	r2, r2, r3
 8003c32:	69bb      	ldr	r3, [r7, #24]
 8003c34:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c38:	627b      	str	r3, [r7, #36]	; 0x24
 8003c3a:	e004      	b.n	8003c46 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003c3c:	697b      	ldr	r3, [r7, #20]
 8003c3e:	4a0c      	ldr	r2, [pc, #48]	; (8003c70 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003c40:	fb02 f303 	mul.w	r3, r2, r3
 8003c44:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003c46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c48:	623b      	str	r3, [r7, #32]
      break;
 8003c4a:	e002      	b.n	8003c52 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003c4c:	4b07      	ldr	r3, [pc, #28]	; (8003c6c <HAL_RCC_GetSysClockFreq+0xbc>)
 8003c4e:	623b      	str	r3, [r7, #32]
      break;
 8003c50:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003c52:	6a3b      	ldr	r3, [r7, #32]
}
 8003c54:	4618      	mov	r0, r3
 8003c56:	3728      	adds	r7, #40	; 0x28
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	bc90      	pop	{r4, r7}
 8003c5c:	4770      	bx	lr
 8003c5e:	bf00      	nop
 8003c60:	080082d4 	.word	0x080082d4
 8003c64:	080082e4 	.word	0x080082e4
 8003c68:	40021000 	.word	0x40021000
 8003c6c:	007a1200 	.word	0x007a1200
 8003c70:	003d0900 	.word	0x003d0900

08003c74 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003c74:	b480      	push	{r7}
 8003c76:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003c78:	4b02      	ldr	r3, [pc, #8]	; (8003c84 <HAL_RCC_GetHCLKFreq+0x10>)
 8003c7a:	681b      	ldr	r3, [r3, #0]
}
 8003c7c:	4618      	mov	r0, r3
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	bc80      	pop	{r7}
 8003c82:	4770      	bx	lr
 8003c84:	20000004 	.word	0x20000004

08003c88 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003c8c:	f7ff fff2 	bl	8003c74 <HAL_RCC_GetHCLKFreq>
 8003c90:	4601      	mov	r1, r0
 8003c92:	4b05      	ldr	r3, [pc, #20]	; (8003ca8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003c94:	685b      	ldr	r3, [r3, #4]
 8003c96:	0adb      	lsrs	r3, r3, #11
 8003c98:	f003 0307 	and.w	r3, r3, #7
 8003c9c:	4a03      	ldr	r2, [pc, #12]	; (8003cac <HAL_RCC_GetPCLK2Freq+0x24>)
 8003c9e:	5cd3      	ldrb	r3, [r2, r3]
 8003ca0:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	bd80      	pop	{r7, pc}
 8003ca8:	40021000 	.word	0x40021000
 8003cac:	08008354 	.word	0x08008354

08003cb0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003cb0:	b480      	push	{r7}
 8003cb2:	b085      	sub	sp, #20
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003cb8:	4b0a      	ldr	r3, [pc, #40]	; (8003ce4 <RCC_Delay+0x34>)
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	4a0a      	ldr	r2, [pc, #40]	; (8003ce8 <RCC_Delay+0x38>)
 8003cbe:	fba2 2303 	umull	r2, r3, r2, r3
 8003cc2:	0a5b      	lsrs	r3, r3, #9
 8003cc4:	687a      	ldr	r2, [r7, #4]
 8003cc6:	fb02 f303 	mul.w	r3, r2, r3
 8003cca:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003ccc:	bf00      	nop
  }
  while (Delay --);
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	1e5a      	subs	r2, r3, #1
 8003cd2:	60fa      	str	r2, [r7, #12]
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d1f9      	bne.n	8003ccc <RCC_Delay+0x1c>
}
 8003cd8:	bf00      	nop
 8003cda:	3714      	adds	r7, #20
 8003cdc:	46bd      	mov	sp, r7
 8003cde:	bc80      	pop	{r7}
 8003ce0:	4770      	bx	lr
 8003ce2:	bf00      	nop
 8003ce4:	20000004 	.word	0x20000004
 8003ce8:	10624dd3 	.word	0x10624dd3

08003cec <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003cec:	b580      	push	{r7, lr}
 8003cee:	b086      	sub	sp, #24
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003cf4:	2300      	movs	r3, #0
 8003cf6:	613b      	str	r3, [r7, #16]
 8003cf8:	2300      	movs	r3, #0
 8003cfa:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f003 0301 	and.w	r3, r3, #1
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d07d      	beq.n	8003e04 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8003d08:	2300      	movs	r3, #0
 8003d0a:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003d0c:	4b4f      	ldr	r3, [pc, #316]	; (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d0e:	69db      	ldr	r3, [r3, #28]
 8003d10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d10d      	bne.n	8003d34 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d18:	4b4c      	ldr	r3, [pc, #304]	; (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d1a:	69db      	ldr	r3, [r3, #28]
 8003d1c:	4a4b      	ldr	r2, [pc, #300]	; (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d1e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d22:	61d3      	str	r3, [r2, #28]
 8003d24:	4b49      	ldr	r3, [pc, #292]	; (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d26:	69db      	ldr	r3, [r3, #28]
 8003d28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d2c:	60bb      	str	r3, [r7, #8]
 8003d2e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d30:	2301      	movs	r3, #1
 8003d32:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d34:	4b46      	ldr	r3, [pc, #280]	; (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d118      	bne.n	8003d72 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003d40:	4b43      	ldr	r3, [pc, #268]	; (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	4a42      	ldr	r2, [pc, #264]	; (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003d46:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d4a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003d4c:	f7fc fe2e 	bl	80009ac <HAL_GetTick>
 8003d50:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d52:	e008      	b.n	8003d66 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d54:	f7fc fe2a 	bl	80009ac <HAL_GetTick>
 8003d58:	4602      	mov	r2, r0
 8003d5a:	693b      	ldr	r3, [r7, #16]
 8003d5c:	1ad3      	subs	r3, r2, r3
 8003d5e:	2b64      	cmp	r3, #100	; 0x64
 8003d60:	d901      	bls.n	8003d66 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003d62:	2303      	movs	r3, #3
 8003d64:	e06d      	b.n	8003e42 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d66:	4b3a      	ldr	r3, [pc, #232]	; (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d0f0      	beq.n	8003d54 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003d72:	4b36      	ldr	r3, [pc, #216]	; (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d74:	6a1b      	ldr	r3, [r3, #32]
 8003d76:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d7a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d02e      	beq.n	8003de0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	685b      	ldr	r3, [r3, #4]
 8003d86:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d8a:	68fa      	ldr	r2, [r7, #12]
 8003d8c:	429a      	cmp	r2, r3
 8003d8e:	d027      	beq.n	8003de0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003d90:	4b2e      	ldr	r3, [pc, #184]	; (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d92:	6a1b      	ldr	r3, [r3, #32]
 8003d94:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d98:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003d9a:	4b2e      	ldr	r3, [pc, #184]	; (8003e54 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003d9c:	2201      	movs	r2, #1
 8003d9e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003da0:	4b2c      	ldr	r3, [pc, #176]	; (8003e54 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003da2:	2200      	movs	r2, #0
 8003da4:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003da6:	4a29      	ldr	r2, [pc, #164]	; (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	f003 0301 	and.w	r3, r3, #1
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d014      	beq.n	8003de0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003db6:	f7fc fdf9 	bl	80009ac <HAL_GetTick>
 8003dba:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003dbc:	e00a      	b.n	8003dd4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003dbe:	f7fc fdf5 	bl	80009ac <HAL_GetTick>
 8003dc2:	4602      	mov	r2, r0
 8003dc4:	693b      	ldr	r3, [r7, #16]
 8003dc6:	1ad3      	subs	r3, r2, r3
 8003dc8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003dcc:	4293      	cmp	r3, r2
 8003dce:	d901      	bls.n	8003dd4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003dd0:	2303      	movs	r3, #3
 8003dd2:	e036      	b.n	8003e42 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003dd4:	4b1d      	ldr	r3, [pc, #116]	; (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003dd6:	6a1b      	ldr	r3, [r3, #32]
 8003dd8:	f003 0302 	and.w	r3, r3, #2
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d0ee      	beq.n	8003dbe <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003de0:	4b1a      	ldr	r3, [pc, #104]	; (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003de2:	6a1b      	ldr	r3, [r3, #32]
 8003de4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	685b      	ldr	r3, [r3, #4]
 8003dec:	4917      	ldr	r1, [pc, #92]	; (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003dee:	4313      	orrs	r3, r2
 8003df0:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003df2:	7dfb      	ldrb	r3, [r7, #23]
 8003df4:	2b01      	cmp	r3, #1
 8003df6:	d105      	bne.n	8003e04 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003df8:	4b14      	ldr	r3, [pc, #80]	; (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003dfa:	69db      	ldr	r3, [r3, #28]
 8003dfc:	4a13      	ldr	r2, [pc, #76]	; (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003dfe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e02:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f003 0302 	and.w	r3, r3, #2
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d008      	beq.n	8003e22 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003e10:	4b0e      	ldr	r3, [pc, #56]	; (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e12:	685b      	ldr	r3, [r3, #4]
 8003e14:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	689b      	ldr	r3, [r3, #8]
 8003e1c:	490b      	ldr	r1, [pc, #44]	; (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e1e:	4313      	orrs	r3, r2
 8003e20:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f003 0310 	and.w	r3, r3, #16
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d008      	beq.n	8003e40 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003e2e:	4b07      	ldr	r3, [pc, #28]	; (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e30:	685b      	ldr	r3, [r3, #4]
 8003e32:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	68db      	ldr	r3, [r3, #12]
 8003e3a:	4904      	ldr	r1, [pc, #16]	; (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e3c:	4313      	orrs	r3, r2
 8003e3e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003e40:	2300      	movs	r3, #0
}
 8003e42:	4618      	mov	r0, r3
 8003e44:	3718      	adds	r7, #24
 8003e46:	46bd      	mov	sp, r7
 8003e48:	bd80      	pop	{r7, pc}
 8003e4a:	bf00      	nop
 8003e4c:	40021000 	.word	0x40021000
 8003e50:	40007000 	.word	0x40007000
 8003e54:	42420440 	.word	0x42420440

08003e58 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003e58:	b590      	push	{r4, r7, lr}
 8003e5a:	b08d      	sub	sp, #52	; 0x34
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003e60:	4b55      	ldr	r3, [pc, #340]	; (8003fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8003e62:	f107 040c 	add.w	r4, r7, #12
 8003e66:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003e68:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003e6c:	4b53      	ldr	r3, [pc, #332]	; (8003fbc <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8003e6e:	881b      	ldrh	r3, [r3, #0]
 8003e70:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8003e72:	2300      	movs	r3, #0
 8003e74:	627b      	str	r3, [r7, #36]	; 0x24
 8003e76:	2300      	movs	r3, #0
 8003e78:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003e7a:	2300      	movs	r3, #0
 8003e7c:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8003e7e:	2300      	movs	r3, #0
 8003e80:	61fb      	str	r3, [r7, #28]
 8003e82:	2300      	movs	r3, #0
 8003e84:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	2b02      	cmp	r3, #2
 8003e8a:	d07f      	beq.n	8003f8c <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 8003e8c:	2b10      	cmp	r3, #16
 8003e8e:	d002      	beq.n	8003e96 <HAL_RCCEx_GetPeriphCLKFreq+0x3e>
 8003e90:	2b01      	cmp	r3, #1
 8003e92:	d048      	beq.n	8003f26 <HAL_RCCEx_GetPeriphCLKFreq+0xce>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8003e94:	e08b      	b.n	8003fae <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      temp_reg = RCC->CFGR;
 8003e96:	4b4a      	ldr	r3, [pc, #296]	; (8003fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8003e98:	685b      	ldr	r3, [r3, #4]
 8003e9a:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8003e9c:	4b48      	ldr	r3, [pc, #288]	; (8003fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d07f      	beq.n	8003fa8 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003ea8:	69fb      	ldr	r3, [r7, #28]
 8003eaa:	0c9b      	lsrs	r3, r3, #18
 8003eac:	f003 030f 	and.w	r3, r3, #15
 8003eb0:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8003eb4:	4413      	add	r3, r2
 8003eb6:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003eba:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003ebc:	69fb      	ldr	r3, [r7, #28]
 8003ebe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d018      	beq.n	8003ef8 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003ec6:	4b3e      	ldr	r3, [pc, #248]	; (8003fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8003ec8:	685b      	ldr	r3, [r3, #4]
 8003eca:	0c5b      	lsrs	r3, r3, #17
 8003ecc:	f003 0301 	and.w	r3, r3, #1
 8003ed0:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8003ed4:	4413      	add	r3, r2
 8003ed6:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003eda:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003edc:	69fb      	ldr	r3, [r7, #28]
 8003ede:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d00d      	beq.n	8003f02 <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8003ee6:	4a37      	ldr	r2, [pc, #220]	; (8003fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>)
 8003ee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eea:	fbb2 f2f3 	udiv	r2, r2, r3
 8003eee:	6a3b      	ldr	r3, [r7, #32]
 8003ef0:	fb02 f303 	mul.w	r3, r2, r3
 8003ef4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003ef6:	e004      	b.n	8003f02 <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003ef8:	6a3b      	ldr	r3, [r7, #32]
 8003efa:	4a33      	ldr	r2, [pc, #204]	; (8003fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8003efc:	fb02 f303 	mul.w	r3, r2, r3
 8003f00:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8003f02:	4b2f      	ldr	r3, [pc, #188]	; (8003fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8003f04:	685b      	ldr	r3, [r3, #4]
 8003f06:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f0a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003f0e:	d102      	bne.n	8003f16 <HAL_RCCEx_GetPeriphCLKFreq+0xbe>
          frequency = pllclk;
 8003f10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f12:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8003f14:	e048      	b.n	8003fa8 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
          frequency = (pllclk * 2) / 3;
 8003f16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f18:	005b      	lsls	r3, r3, #1
 8003f1a:	4a2c      	ldr	r2, [pc, #176]	; (8003fcc <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 8003f1c:	fba2 2303 	umull	r2, r3, r2, r3
 8003f20:	085b      	lsrs	r3, r3, #1
 8003f22:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8003f24:	e040      	b.n	8003fa8 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
      temp_reg = RCC->BDCR;
 8003f26:	4b26      	ldr	r3, [pc, #152]	; (8003fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8003f28:	6a1b      	ldr	r3, [r3, #32]
 8003f2a:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8003f2c:	69fb      	ldr	r3, [r7, #28]
 8003f2e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f32:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f36:	d108      	bne.n	8003f4a <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
 8003f38:	69fb      	ldr	r3, [r7, #28]
 8003f3a:	f003 0302 	and.w	r3, r3, #2
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d003      	beq.n	8003f4a <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
        frequency = LSE_VALUE;
 8003f42:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003f46:	62bb      	str	r3, [r7, #40]	; 0x28
 8003f48:	e01f      	b.n	8003f8a <HAL_RCCEx_GetPeriphCLKFreq+0x132>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8003f4a:	69fb      	ldr	r3, [r7, #28]
 8003f4c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f50:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f54:	d109      	bne.n	8003f6a <HAL_RCCEx_GetPeriphCLKFreq+0x112>
 8003f56:	4b1a      	ldr	r3, [pc, #104]	; (8003fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8003f58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f5a:	f003 0302 	and.w	r3, r3, #2
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d003      	beq.n	8003f6a <HAL_RCCEx_GetPeriphCLKFreq+0x112>
        frequency = LSI_VALUE;
 8003f62:	f649 4340 	movw	r3, #40000	; 0x9c40
 8003f66:	62bb      	str	r3, [r7, #40]	; 0x28
 8003f68:	e00f      	b.n	8003f8a <HAL_RCCEx_GetPeriphCLKFreq+0x132>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8003f6a:	69fb      	ldr	r3, [r7, #28]
 8003f6c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f70:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003f74:	d11a      	bne.n	8003fac <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 8003f76:	4b12      	ldr	r3, [pc, #72]	; (8003fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d014      	beq.n	8003fac <HAL_RCCEx_GetPeriphCLKFreq+0x154>
        frequency = HSE_VALUE / 128U;
 8003f82:	f24f 4324 	movw	r3, #62500	; 0xf424
 8003f86:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8003f88:	e010      	b.n	8003fac <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 8003f8a:	e00f      	b.n	8003fac <HAL_RCCEx_GetPeriphCLKFreq+0x154>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8003f8c:	f7ff fe7c 	bl	8003c88 <HAL_RCC_GetPCLK2Freq>
 8003f90:	4602      	mov	r2, r0
 8003f92:	4b0b      	ldr	r3, [pc, #44]	; (8003fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8003f94:	685b      	ldr	r3, [r3, #4]
 8003f96:	0b9b      	lsrs	r3, r3, #14
 8003f98:	f003 0303 	and.w	r3, r3, #3
 8003f9c:	3301      	adds	r3, #1
 8003f9e:	005b      	lsls	r3, r3, #1
 8003fa0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fa4:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8003fa6:	e002      	b.n	8003fae <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      break;
 8003fa8:	bf00      	nop
 8003faa:	e000      	b.n	8003fae <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      break;
 8003fac:	bf00      	nop
    }
  }
  return (frequency);
 8003fae:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	3734      	adds	r7, #52	; 0x34
 8003fb4:	46bd      	mov	sp, r7
 8003fb6:	bd90      	pop	{r4, r7, pc}
 8003fb8:	080082e8 	.word	0x080082e8
 8003fbc:	080082f8 	.word	0x080082f8
 8003fc0:	40021000 	.word	0x40021000
 8003fc4:	007a1200 	.word	0x007a1200
 8003fc8:	003d0900 	.word	0x003d0900
 8003fcc:	aaaaaaab 	.word	0xaaaaaaab

08003fd0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003fd0:	b580      	push	{r7, lr}
 8003fd2:	b082      	sub	sp, #8
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d101      	bne.n	8003fe2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003fde:	2301      	movs	r3, #1
 8003fe0:	e076      	b.n	80040d0 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d108      	bne.n	8003ffc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	685b      	ldr	r3, [r3, #4]
 8003fee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003ff2:	d009      	beq.n	8004008 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	61da      	str	r2, [r3, #28]
 8003ffa:	e005      	b.n	8004008 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2200      	movs	r2, #0
 8004000:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	2200      	movs	r2, #0
 8004006:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2200      	movs	r2, #0
 800400c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004014:	b2db      	uxtb	r3, r3
 8004016:	2b00      	cmp	r3, #0
 8004018:	d106      	bne.n	8004028 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	2200      	movs	r2, #0
 800401e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004022:	6878      	ldr	r0, [r7, #4]
 8004024:	f7fc fb94 	bl	8000750 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2202      	movs	r2, #2
 800402c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	681a      	ldr	r2, [r3, #0]
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800403e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	685b      	ldr	r3, [r3, #4]
 8004044:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	689b      	ldr	r3, [r3, #8]
 800404c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004050:	431a      	orrs	r2, r3
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	68db      	ldr	r3, [r3, #12]
 8004056:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800405a:	431a      	orrs	r2, r3
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	691b      	ldr	r3, [r3, #16]
 8004060:	f003 0302 	and.w	r3, r3, #2
 8004064:	431a      	orrs	r2, r3
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	695b      	ldr	r3, [r3, #20]
 800406a:	f003 0301 	and.w	r3, r3, #1
 800406e:	431a      	orrs	r2, r3
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	699b      	ldr	r3, [r3, #24]
 8004074:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004078:	431a      	orrs	r2, r3
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	69db      	ldr	r3, [r3, #28]
 800407e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004082:	431a      	orrs	r2, r3
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	6a1b      	ldr	r3, [r3, #32]
 8004088:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800408c:	ea42 0103 	orr.w	r1, r2, r3
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004094:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	430a      	orrs	r2, r1
 800409e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	699b      	ldr	r3, [r3, #24]
 80040a4:	0c1a      	lsrs	r2, r3, #16
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f002 0204 	and.w	r2, r2, #4
 80040ae:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	69da      	ldr	r2, [r3, #28]
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80040be:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	2200      	movs	r2, #0
 80040c4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	2201      	movs	r2, #1
 80040ca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80040ce:	2300      	movs	r3, #0
}
 80040d0:	4618      	mov	r0, r3
 80040d2:	3708      	adds	r7, #8
 80040d4:	46bd      	mov	sp, r7
 80040d6:	bd80      	pop	{r7, pc}

080040d8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80040d8:	b084      	sub	sp, #16
 80040da:	b480      	push	{r7}
 80040dc:	b083      	sub	sp, #12
 80040de:	af00      	add	r7, sp, #0
 80040e0:	6078      	str	r0, [r7, #4]
 80040e2:	f107 0014 	add.w	r0, r7, #20
 80040e6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80040ea:	2300      	movs	r3, #0
}
 80040ec:	4618      	mov	r0, r3
 80040ee:	370c      	adds	r7, #12
 80040f0:	46bd      	mov	sp, r7
 80040f2:	bc80      	pop	{r7}
 80040f4:	b004      	add	sp, #16
 80040f6:	4770      	bx	lr

080040f8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80040f8:	b480      	push	{r7}
 80040fa:	b085      	sub	sp, #20
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2200      	movs	r2, #0
 8004104:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004108:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 800410c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	b29a      	uxth	r2, r3
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004118:	2300      	movs	r3, #0
}
 800411a:	4618      	mov	r0, r3
 800411c:	3714      	adds	r7, #20
 800411e:	46bd      	mov	sp, r7
 8004120:	bc80      	pop	{r7}
 8004122:	4770      	bx	lr

08004124 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8004124:	b480      	push	{r7}
 8004126:	b085      	sub	sp, #20
 8004128:	af00      	add	r7, sp, #0
 800412a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800412c:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8004130:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004138:	b29a      	uxth	r2, r3
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	b29b      	uxth	r3, r3
 800413e:	43db      	mvns	r3, r3
 8004140:	b29b      	uxth	r3, r3
 8004142:	4013      	ands	r3, r2
 8004144:	b29a      	uxth	r2, r3
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800414c:	2300      	movs	r3, #0
}
 800414e:	4618      	mov	r0, r3
 8004150:	3714      	adds	r7, #20
 8004152:	46bd      	mov	sp, r7
 8004154:	bc80      	pop	{r7}
 8004156:	4770      	bx	lr

08004158 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8004158:	b480      	push	{r7}
 800415a:	b083      	sub	sp, #12
 800415c:	af00      	add	r7, sp, #0
 800415e:	6078      	str	r0, [r7, #4]
 8004160:	460b      	mov	r3, r1
 8004162:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8004164:	2300      	movs	r3, #0
}
 8004166:	4618      	mov	r0, r3
 8004168:	370c      	adds	r7, #12
 800416a:	46bd      	mov	sp, r7
 800416c:	bc80      	pop	{r7}
 800416e:	4770      	bx	lr

08004170 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004170:	b084      	sub	sp, #16
 8004172:	b480      	push	{r7}
 8004174:	b083      	sub	sp, #12
 8004176:	af00      	add	r7, sp, #0
 8004178:	6078      	str	r0, [r7, #4]
 800417a:	f107 0014 	add.w	r0, r7, #20
 800417e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	2201      	movs	r2, #1
 8004186:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	2200      	movs	r2, #0
 800418e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	2200      	movs	r2, #0
 8004196:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	2200      	movs	r2, #0
 800419e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80041a2:	2300      	movs	r3, #0
}
 80041a4:	4618      	mov	r0, r3
 80041a6:	370c      	adds	r7, #12
 80041a8:	46bd      	mov	sp, r7
 80041aa:	bc80      	pop	{r7}
 80041ac:	b004      	add	sp, #16
 80041ae:	4770      	bx	lr

080041b0 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80041b0:	b480      	push	{r7}
 80041b2:	b09b      	sub	sp, #108	; 0x6c
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	6078      	str	r0, [r7, #4]
 80041b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80041ba:	2300      	movs	r3, #0
 80041bc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80041c0:	687a      	ldr	r2, [r7, #4]
 80041c2:	683b      	ldr	r3, [r7, #0]
 80041c4:	781b      	ldrb	r3, [r3, #0]
 80041c6:	009b      	lsls	r3, r3, #2
 80041c8:	4413      	add	r3, r2
 80041ca:	881b      	ldrh	r3, [r3, #0]
 80041cc:	b29b      	uxth	r3, r3
 80041ce:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 80041d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041d6:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 80041da:	683b      	ldr	r3, [r7, #0]
 80041dc:	78db      	ldrb	r3, [r3, #3]
 80041de:	2b03      	cmp	r3, #3
 80041e0:	d81f      	bhi.n	8004222 <USB_ActivateEndpoint+0x72>
 80041e2:	a201      	add	r2, pc, #4	; (adr r2, 80041e8 <USB_ActivateEndpoint+0x38>)
 80041e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041e8:	080041f9 	.word	0x080041f9
 80041ec:	08004215 	.word	0x08004215
 80041f0:	0800422b 	.word	0x0800422b
 80041f4:	08004207 	.word	0x08004207
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80041f8:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80041fc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004200:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8004204:	e012      	b.n	800422c <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8004206:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800420a:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 800420e:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8004212:	e00b      	b.n	800422c <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8004214:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004218:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800421c:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8004220:	e004      	b.n	800422c <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8004222:	2301      	movs	r3, #1
 8004224:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8004228:	e000      	b.n	800422c <USB_ActivateEndpoint+0x7c>
      break;
 800422a:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800422c:	687a      	ldr	r2, [r7, #4]
 800422e:	683b      	ldr	r3, [r7, #0]
 8004230:	781b      	ldrb	r3, [r3, #0]
 8004232:	009b      	lsls	r3, r3, #2
 8004234:	441a      	add	r2, r3
 8004236:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800423a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800423e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004242:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004246:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800424a:	b29b      	uxth	r3, r3
 800424c:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800424e:	687a      	ldr	r2, [r7, #4]
 8004250:	683b      	ldr	r3, [r7, #0]
 8004252:	781b      	ldrb	r3, [r3, #0]
 8004254:	009b      	lsls	r3, r3, #2
 8004256:	4413      	add	r3, r2
 8004258:	881b      	ldrh	r3, [r3, #0]
 800425a:	b29b      	uxth	r3, r3
 800425c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004260:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004264:	b29a      	uxth	r2, r3
 8004266:	683b      	ldr	r3, [r7, #0]
 8004268:	781b      	ldrb	r3, [r3, #0]
 800426a:	b29b      	uxth	r3, r3
 800426c:	4313      	orrs	r3, r2
 800426e:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8004272:	687a      	ldr	r2, [r7, #4]
 8004274:	683b      	ldr	r3, [r7, #0]
 8004276:	781b      	ldrb	r3, [r3, #0]
 8004278:	009b      	lsls	r3, r3, #2
 800427a:	441a      	add	r2, r3
 800427c:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8004280:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004284:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004288:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800428c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004290:	b29b      	uxth	r3, r3
 8004292:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8004294:	683b      	ldr	r3, [r7, #0]
 8004296:	7b1b      	ldrb	r3, [r3, #12]
 8004298:	2b00      	cmp	r3, #0
 800429a:	f040 8149 	bne.w	8004530 <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 800429e:	683b      	ldr	r3, [r7, #0]
 80042a0:	785b      	ldrb	r3, [r3, #1]
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	f000 8084 	beq.w	80043b0 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	617b      	str	r3, [r7, #20]
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80042b2:	b29b      	uxth	r3, r3
 80042b4:	461a      	mov	r2, r3
 80042b6:	697b      	ldr	r3, [r7, #20]
 80042b8:	4413      	add	r3, r2
 80042ba:	617b      	str	r3, [r7, #20]
 80042bc:	683b      	ldr	r3, [r7, #0]
 80042be:	781b      	ldrb	r3, [r3, #0]
 80042c0:	011a      	lsls	r2, r3, #4
 80042c2:	697b      	ldr	r3, [r7, #20]
 80042c4:	4413      	add	r3, r2
 80042c6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80042ca:	613b      	str	r3, [r7, #16]
 80042cc:	683b      	ldr	r3, [r7, #0]
 80042ce:	88db      	ldrh	r3, [r3, #6]
 80042d0:	085b      	lsrs	r3, r3, #1
 80042d2:	b29b      	uxth	r3, r3
 80042d4:	005b      	lsls	r3, r3, #1
 80042d6:	b29a      	uxth	r2, r3
 80042d8:	693b      	ldr	r3, [r7, #16]
 80042da:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80042dc:	687a      	ldr	r2, [r7, #4]
 80042de:	683b      	ldr	r3, [r7, #0]
 80042e0:	781b      	ldrb	r3, [r3, #0]
 80042e2:	009b      	lsls	r3, r3, #2
 80042e4:	4413      	add	r3, r2
 80042e6:	881b      	ldrh	r3, [r3, #0]
 80042e8:	81fb      	strh	r3, [r7, #14]
 80042ea:	89fb      	ldrh	r3, [r7, #14]
 80042ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d01b      	beq.n	800432c <USB_ActivateEndpoint+0x17c>
 80042f4:	687a      	ldr	r2, [r7, #4]
 80042f6:	683b      	ldr	r3, [r7, #0]
 80042f8:	781b      	ldrb	r3, [r3, #0]
 80042fa:	009b      	lsls	r3, r3, #2
 80042fc:	4413      	add	r3, r2
 80042fe:	881b      	ldrh	r3, [r3, #0]
 8004300:	b29b      	uxth	r3, r3
 8004302:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004306:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800430a:	81bb      	strh	r3, [r7, #12]
 800430c:	687a      	ldr	r2, [r7, #4]
 800430e:	683b      	ldr	r3, [r7, #0]
 8004310:	781b      	ldrb	r3, [r3, #0]
 8004312:	009b      	lsls	r3, r3, #2
 8004314:	441a      	add	r2, r3
 8004316:	89bb      	ldrh	r3, [r7, #12]
 8004318:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800431c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004320:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004324:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004328:	b29b      	uxth	r3, r3
 800432a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800432c:	683b      	ldr	r3, [r7, #0]
 800432e:	78db      	ldrb	r3, [r3, #3]
 8004330:	2b01      	cmp	r3, #1
 8004332:	d020      	beq.n	8004376 <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004334:	687a      	ldr	r2, [r7, #4]
 8004336:	683b      	ldr	r3, [r7, #0]
 8004338:	781b      	ldrb	r3, [r3, #0]
 800433a:	009b      	lsls	r3, r3, #2
 800433c:	4413      	add	r3, r2
 800433e:	881b      	ldrh	r3, [r3, #0]
 8004340:	b29b      	uxth	r3, r3
 8004342:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004346:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800434a:	813b      	strh	r3, [r7, #8]
 800434c:	893b      	ldrh	r3, [r7, #8]
 800434e:	f083 0320 	eor.w	r3, r3, #32
 8004352:	813b      	strh	r3, [r7, #8]
 8004354:	687a      	ldr	r2, [r7, #4]
 8004356:	683b      	ldr	r3, [r7, #0]
 8004358:	781b      	ldrb	r3, [r3, #0]
 800435a:	009b      	lsls	r3, r3, #2
 800435c:	441a      	add	r2, r3
 800435e:	893b      	ldrh	r3, [r7, #8]
 8004360:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004364:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004368:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800436c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004370:	b29b      	uxth	r3, r3
 8004372:	8013      	strh	r3, [r2, #0]
 8004374:	e27f      	b.n	8004876 <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004376:	687a      	ldr	r2, [r7, #4]
 8004378:	683b      	ldr	r3, [r7, #0]
 800437a:	781b      	ldrb	r3, [r3, #0]
 800437c:	009b      	lsls	r3, r3, #2
 800437e:	4413      	add	r3, r2
 8004380:	881b      	ldrh	r3, [r3, #0]
 8004382:	b29b      	uxth	r3, r3
 8004384:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004388:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800438c:	817b      	strh	r3, [r7, #10]
 800438e:	687a      	ldr	r2, [r7, #4]
 8004390:	683b      	ldr	r3, [r7, #0]
 8004392:	781b      	ldrb	r3, [r3, #0]
 8004394:	009b      	lsls	r3, r3, #2
 8004396:	441a      	add	r2, r3
 8004398:	897b      	ldrh	r3, [r7, #10]
 800439a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800439e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80043a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80043a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80043aa:	b29b      	uxth	r3, r3
 80043ac:	8013      	strh	r3, [r2, #0]
 80043ae:	e262      	b.n	8004876 <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80043ba:	b29b      	uxth	r3, r3
 80043bc:	461a      	mov	r2, r3
 80043be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043c0:	4413      	add	r3, r2
 80043c2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80043c4:	683b      	ldr	r3, [r7, #0]
 80043c6:	781b      	ldrb	r3, [r3, #0]
 80043c8:	011a      	lsls	r2, r3, #4
 80043ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043cc:	4413      	add	r3, r2
 80043ce:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80043d2:	62bb      	str	r3, [r7, #40]	; 0x28
 80043d4:	683b      	ldr	r3, [r7, #0]
 80043d6:	88db      	ldrh	r3, [r3, #6]
 80043d8:	085b      	lsrs	r3, r3, #1
 80043da:	b29b      	uxth	r3, r3
 80043dc:	005b      	lsls	r3, r3, #1
 80043de:	b29a      	uxth	r2, r3
 80043e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043e2:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	627b      	str	r3, [r7, #36]	; 0x24
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80043ee:	b29b      	uxth	r3, r3
 80043f0:	461a      	mov	r2, r3
 80043f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043f4:	4413      	add	r3, r2
 80043f6:	627b      	str	r3, [r7, #36]	; 0x24
 80043f8:	683b      	ldr	r3, [r7, #0]
 80043fa:	781b      	ldrb	r3, [r3, #0]
 80043fc:	011a      	lsls	r2, r3, #4
 80043fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004400:	4413      	add	r3, r2
 8004402:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004406:	623b      	str	r3, [r7, #32]
 8004408:	683b      	ldr	r3, [r7, #0]
 800440a:	691b      	ldr	r3, [r3, #16]
 800440c:	2b00      	cmp	r3, #0
 800440e:	d112      	bne.n	8004436 <USB_ActivateEndpoint+0x286>
 8004410:	6a3b      	ldr	r3, [r7, #32]
 8004412:	881b      	ldrh	r3, [r3, #0]
 8004414:	b29b      	uxth	r3, r3
 8004416:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800441a:	b29a      	uxth	r2, r3
 800441c:	6a3b      	ldr	r3, [r7, #32]
 800441e:	801a      	strh	r2, [r3, #0]
 8004420:	6a3b      	ldr	r3, [r7, #32]
 8004422:	881b      	ldrh	r3, [r3, #0]
 8004424:	b29b      	uxth	r3, r3
 8004426:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800442a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800442e:	b29a      	uxth	r2, r3
 8004430:	6a3b      	ldr	r3, [r7, #32]
 8004432:	801a      	strh	r2, [r3, #0]
 8004434:	e02f      	b.n	8004496 <USB_ActivateEndpoint+0x2e6>
 8004436:	683b      	ldr	r3, [r7, #0]
 8004438:	691b      	ldr	r3, [r3, #16]
 800443a:	2b3e      	cmp	r3, #62	; 0x3e
 800443c:	d813      	bhi.n	8004466 <USB_ActivateEndpoint+0x2b6>
 800443e:	683b      	ldr	r3, [r7, #0]
 8004440:	691b      	ldr	r3, [r3, #16]
 8004442:	085b      	lsrs	r3, r3, #1
 8004444:	663b      	str	r3, [r7, #96]	; 0x60
 8004446:	683b      	ldr	r3, [r7, #0]
 8004448:	691b      	ldr	r3, [r3, #16]
 800444a:	f003 0301 	and.w	r3, r3, #1
 800444e:	2b00      	cmp	r3, #0
 8004450:	d002      	beq.n	8004458 <USB_ActivateEndpoint+0x2a8>
 8004452:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004454:	3301      	adds	r3, #1
 8004456:	663b      	str	r3, [r7, #96]	; 0x60
 8004458:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800445a:	b29b      	uxth	r3, r3
 800445c:	029b      	lsls	r3, r3, #10
 800445e:	b29a      	uxth	r2, r3
 8004460:	6a3b      	ldr	r3, [r7, #32]
 8004462:	801a      	strh	r2, [r3, #0]
 8004464:	e017      	b.n	8004496 <USB_ActivateEndpoint+0x2e6>
 8004466:	683b      	ldr	r3, [r7, #0]
 8004468:	691b      	ldr	r3, [r3, #16]
 800446a:	095b      	lsrs	r3, r3, #5
 800446c:	663b      	str	r3, [r7, #96]	; 0x60
 800446e:	683b      	ldr	r3, [r7, #0]
 8004470:	691b      	ldr	r3, [r3, #16]
 8004472:	f003 031f 	and.w	r3, r3, #31
 8004476:	2b00      	cmp	r3, #0
 8004478:	d102      	bne.n	8004480 <USB_ActivateEndpoint+0x2d0>
 800447a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800447c:	3b01      	subs	r3, #1
 800447e:	663b      	str	r3, [r7, #96]	; 0x60
 8004480:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004482:	b29b      	uxth	r3, r3
 8004484:	029b      	lsls	r3, r3, #10
 8004486:	b29b      	uxth	r3, r3
 8004488:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800448c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004490:	b29a      	uxth	r2, r3
 8004492:	6a3b      	ldr	r3, [r7, #32]
 8004494:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004496:	687a      	ldr	r2, [r7, #4]
 8004498:	683b      	ldr	r3, [r7, #0]
 800449a:	781b      	ldrb	r3, [r3, #0]
 800449c:	009b      	lsls	r3, r3, #2
 800449e:	4413      	add	r3, r2
 80044a0:	881b      	ldrh	r3, [r3, #0]
 80044a2:	83fb      	strh	r3, [r7, #30]
 80044a4:	8bfb      	ldrh	r3, [r7, #30]
 80044a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d01b      	beq.n	80044e6 <USB_ActivateEndpoint+0x336>
 80044ae:	687a      	ldr	r2, [r7, #4]
 80044b0:	683b      	ldr	r3, [r7, #0]
 80044b2:	781b      	ldrb	r3, [r3, #0]
 80044b4:	009b      	lsls	r3, r3, #2
 80044b6:	4413      	add	r3, r2
 80044b8:	881b      	ldrh	r3, [r3, #0]
 80044ba:	b29b      	uxth	r3, r3
 80044bc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80044c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044c4:	83bb      	strh	r3, [r7, #28]
 80044c6:	687a      	ldr	r2, [r7, #4]
 80044c8:	683b      	ldr	r3, [r7, #0]
 80044ca:	781b      	ldrb	r3, [r3, #0]
 80044cc:	009b      	lsls	r3, r3, #2
 80044ce:	441a      	add	r2, r3
 80044d0:	8bbb      	ldrh	r3, [r7, #28]
 80044d2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80044d6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80044da:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80044de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80044e2:	b29b      	uxth	r3, r3
 80044e4:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80044e6:	687a      	ldr	r2, [r7, #4]
 80044e8:	683b      	ldr	r3, [r7, #0]
 80044ea:	781b      	ldrb	r3, [r3, #0]
 80044ec:	009b      	lsls	r3, r3, #2
 80044ee:	4413      	add	r3, r2
 80044f0:	881b      	ldrh	r3, [r3, #0]
 80044f2:	b29b      	uxth	r3, r3
 80044f4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80044f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044fc:	837b      	strh	r3, [r7, #26]
 80044fe:	8b7b      	ldrh	r3, [r7, #26]
 8004500:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004504:	837b      	strh	r3, [r7, #26]
 8004506:	8b7b      	ldrh	r3, [r7, #26]
 8004508:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800450c:	837b      	strh	r3, [r7, #26]
 800450e:	687a      	ldr	r2, [r7, #4]
 8004510:	683b      	ldr	r3, [r7, #0]
 8004512:	781b      	ldrb	r3, [r3, #0]
 8004514:	009b      	lsls	r3, r3, #2
 8004516:	441a      	add	r2, r3
 8004518:	8b7b      	ldrh	r3, [r7, #26]
 800451a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800451e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004522:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004526:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800452a:	b29b      	uxth	r3, r3
 800452c:	8013      	strh	r3, [r2, #0]
 800452e:	e1a2      	b.n	8004876 <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8004530:	687a      	ldr	r2, [r7, #4]
 8004532:	683b      	ldr	r3, [r7, #0]
 8004534:	781b      	ldrb	r3, [r3, #0]
 8004536:	009b      	lsls	r3, r3, #2
 8004538:	4413      	add	r3, r2
 800453a:	881b      	ldrh	r3, [r3, #0]
 800453c:	b29b      	uxth	r3, r3
 800453e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004542:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004546:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 800454a:	687a      	ldr	r2, [r7, #4]
 800454c:	683b      	ldr	r3, [r7, #0]
 800454e:	781b      	ldrb	r3, [r3, #0]
 8004550:	009b      	lsls	r3, r3, #2
 8004552:	441a      	add	r2, r3
 8004554:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8004558:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800455c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004560:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8004564:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004568:	b29b      	uxth	r3, r3
 800456a:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	65bb      	str	r3, [r7, #88]	; 0x58
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004576:	b29b      	uxth	r3, r3
 8004578:	461a      	mov	r2, r3
 800457a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800457c:	4413      	add	r3, r2
 800457e:	65bb      	str	r3, [r7, #88]	; 0x58
 8004580:	683b      	ldr	r3, [r7, #0]
 8004582:	781b      	ldrb	r3, [r3, #0]
 8004584:	011a      	lsls	r2, r3, #4
 8004586:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004588:	4413      	add	r3, r2
 800458a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800458e:	657b      	str	r3, [r7, #84]	; 0x54
 8004590:	683b      	ldr	r3, [r7, #0]
 8004592:	891b      	ldrh	r3, [r3, #8]
 8004594:	085b      	lsrs	r3, r3, #1
 8004596:	b29b      	uxth	r3, r3
 8004598:	005b      	lsls	r3, r3, #1
 800459a:	b29a      	uxth	r2, r3
 800459c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800459e:	801a      	strh	r2, [r3, #0]
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	653b      	str	r3, [r7, #80]	; 0x50
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80045aa:	b29b      	uxth	r3, r3
 80045ac:	461a      	mov	r2, r3
 80045ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80045b0:	4413      	add	r3, r2
 80045b2:	653b      	str	r3, [r7, #80]	; 0x50
 80045b4:	683b      	ldr	r3, [r7, #0]
 80045b6:	781b      	ldrb	r3, [r3, #0]
 80045b8:	011a      	lsls	r2, r3, #4
 80045ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80045bc:	4413      	add	r3, r2
 80045be:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80045c2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80045c4:	683b      	ldr	r3, [r7, #0]
 80045c6:	895b      	ldrh	r3, [r3, #10]
 80045c8:	085b      	lsrs	r3, r3, #1
 80045ca:	b29b      	uxth	r3, r3
 80045cc:	005b      	lsls	r3, r3, #1
 80045ce:	b29a      	uxth	r2, r3
 80045d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80045d2:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 80045d4:	683b      	ldr	r3, [r7, #0]
 80045d6:	785b      	ldrb	r3, [r3, #1]
 80045d8:	2b00      	cmp	r3, #0
 80045da:	f040 8091 	bne.w	8004700 <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80045de:	687a      	ldr	r2, [r7, #4]
 80045e0:	683b      	ldr	r3, [r7, #0]
 80045e2:	781b      	ldrb	r3, [r3, #0]
 80045e4:	009b      	lsls	r3, r3, #2
 80045e6:	4413      	add	r3, r2
 80045e8:	881b      	ldrh	r3, [r3, #0]
 80045ea:	87bb      	strh	r3, [r7, #60]	; 0x3c
 80045ec:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80045ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d01b      	beq.n	800462e <USB_ActivateEndpoint+0x47e>
 80045f6:	687a      	ldr	r2, [r7, #4]
 80045f8:	683b      	ldr	r3, [r7, #0]
 80045fa:	781b      	ldrb	r3, [r3, #0]
 80045fc:	009b      	lsls	r3, r3, #2
 80045fe:	4413      	add	r3, r2
 8004600:	881b      	ldrh	r3, [r3, #0]
 8004602:	b29b      	uxth	r3, r3
 8004604:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004608:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800460c:	877b      	strh	r3, [r7, #58]	; 0x3a
 800460e:	687a      	ldr	r2, [r7, #4]
 8004610:	683b      	ldr	r3, [r7, #0]
 8004612:	781b      	ldrb	r3, [r3, #0]
 8004614:	009b      	lsls	r3, r3, #2
 8004616:	441a      	add	r2, r3
 8004618:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800461a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800461e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004622:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004626:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800462a:	b29b      	uxth	r3, r3
 800462c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800462e:	687a      	ldr	r2, [r7, #4]
 8004630:	683b      	ldr	r3, [r7, #0]
 8004632:	781b      	ldrb	r3, [r3, #0]
 8004634:	009b      	lsls	r3, r3, #2
 8004636:	4413      	add	r3, r2
 8004638:	881b      	ldrh	r3, [r3, #0]
 800463a:	873b      	strh	r3, [r7, #56]	; 0x38
 800463c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800463e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004642:	2b00      	cmp	r3, #0
 8004644:	d01b      	beq.n	800467e <USB_ActivateEndpoint+0x4ce>
 8004646:	687a      	ldr	r2, [r7, #4]
 8004648:	683b      	ldr	r3, [r7, #0]
 800464a:	781b      	ldrb	r3, [r3, #0]
 800464c:	009b      	lsls	r3, r3, #2
 800464e:	4413      	add	r3, r2
 8004650:	881b      	ldrh	r3, [r3, #0]
 8004652:	b29b      	uxth	r3, r3
 8004654:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004658:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800465c:	86fb      	strh	r3, [r7, #54]	; 0x36
 800465e:	687a      	ldr	r2, [r7, #4]
 8004660:	683b      	ldr	r3, [r7, #0]
 8004662:	781b      	ldrb	r3, [r3, #0]
 8004664:	009b      	lsls	r3, r3, #2
 8004666:	441a      	add	r2, r3
 8004668:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800466a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800466e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004672:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004676:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800467a:	b29b      	uxth	r3, r3
 800467c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800467e:	687a      	ldr	r2, [r7, #4]
 8004680:	683b      	ldr	r3, [r7, #0]
 8004682:	781b      	ldrb	r3, [r3, #0]
 8004684:	009b      	lsls	r3, r3, #2
 8004686:	4413      	add	r3, r2
 8004688:	881b      	ldrh	r3, [r3, #0]
 800468a:	b29b      	uxth	r3, r3
 800468c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004690:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004694:	86bb      	strh	r3, [r7, #52]	; 0x34
 8004696:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004698:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800469c:	86bb      	strh	r3, [r7, #52]	; 0x34
 800469e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80046a0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80046a4:	86bb      	strh	r3, [r7, #52]	; 0x34
 80046a6:	687a      	ldr	r2, [r7, #4]
 80046a8:	683b      	ldr	r3, [r7, #0]
 80046aa:	781b      	ldrb	r3, [r3, #0]
 80046ac:	009b      	lsls	r3, r3, #2
 80046ae:	441a      	add	r2, r3
 80046b0:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80046b2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80046b6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80046ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80046be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80046c2:	b29b      	uxth	r3, r3
 80046c4:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80046c6:	687a      	ldr	r2, [r7, #4]
 80046c8:	683b      	ldr	r3, [r7, #0]
 80046ca:	781b      	ldrb	r3, [r3, #0]
 80046cc:	009b      	lsls	r3, r3, #2
 80046ce:	4413      	add	r3, r2
 80046d0:	881b      	ldrh	r3, [r3, #0]
 80046d2:	b29b      	uxth	r3, r3
 80046d4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80046d8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80046dc:	867b      	strh	r3, [r7, #50]	; 0x32
 80046de:	687a      	ldr	r2, [r7, #4]
 80046e0:	683b      	ldr	r3, [r7, #0]
 80046e2:	781b      	ldrb	r3, [r3, #0]
 80046e4:	009b      	lsls	r3, r3, #2
 80046e6:	441a      	add	r2, r3
 80046e8:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80046ea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80046ee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80046f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80046f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80046fa:	b29b      	uxth	r3, r3
 80046fc:	8013      	strh	r3, [r2, #0]
 80046fe:	e0ba      	b.n	8004876 <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004700:	687a      	ldr	r2, [r7, #4]
 8004702:	683b      	ldr	r3, [r7, #0]
 8004704:	781b      	ldrb	r3, [r3, #0]
 8004706:	009b      	lsls	r3, r3, #2
 8004708:	4413      	add	r3, r2
 800470a:	881b      	ldrh	r3, [r3, #0]
 800470c:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8004710:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004714:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004718:	2b00      	cmp	r3, #0
 800471a:	d01d      	beq.n	8004758 <USB_ActivateEndpoint+0x5a8>
 800471c:	687a      	ldr	r2, [r7, #4]
 800471e:	683b      	ldr	r3, [r7, #0]
 8004720:	781b      	ldrb	r3, [r3, #0]
 8004722:	009b      	lsls	r3, r3, #2
 8004724:	4413      	add	r3, r2
 8004726:	881b      	ldrh	r3, [r3, #0]
 8004728:	b29b      	uxth	r3, r3
 800472a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800472e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004732:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8004736:	687a      	ldr	r2, [r7, #4]
 8004738:	683b      	ldr	r3, [r7, #0]
 800473a:	781b      	ldrb	r3, [r3, #0]
 800473c:	009b      	lsls	r3, r3, #2
 800473e:	441a      	add	r2, r3
 8004740:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8004744:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004748:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800474c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004750:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004754:	b29b      	uxth	r3, r3
 8004756:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004758:	687a      	ldr	r2, [r7, #4]
 800475a:	683b      	ldr	r3, [r7, #0]
 800475c:	781b      	ldrb	r3, [r3, #0]
 800475e:	009b      	lsls	r3, r3, #2
 8004760:	4413      	add	r3, r2
 8004762:	881b      	ldrh	r3, [r3, #0]
 8004764:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8004768:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800476c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004770:	2b00      	cmp	r3, #0
 8004772:	d01d      	beq.n	80047b0 <USB_ActivateEndpoint+0x600>
 8004774:	687a      	ldr	r2, [r7, #4]
 8004776:	683b      	ldr	r3, [r7, #0]
 8004778:	781b      	ldrb	r3, [r3, #0]
 800477a:	009b      	lsls	r3, r3, #2
 800477c:	4413      	add	r3, r2
 800477e:	881b      	ldrh	r3, [r3, #0]
 8004780:	b29b      	uxth	r3, r3
 8004782:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004786:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800478a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800478e:	687a      	ldr	r2, [r7, #4]
 8004790:	683b      	ldr	r3, [r7, #0]
 8004792:	781b      	ldrb	r3, [r3, #0]
 8004794:	009b      	lsls	r3, r3, #2
 8004796:	441a      	add	r2, r3
 8004798:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800479c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80047a0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80047a4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80047a8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80047ac:	b29b      	uxth	r3, r3
 80047ae:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80047b0:	683b      	ldr	r3, [r7, #0]
 80047b2:	78db      	ldrb	r3, [r3, #3]
 80047b4:	2b01      	cmp	r3, #1
 80047b6:	d024      	beq.n	8004802 <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80047b8:	687a      	ldr	r2, [r7, #4]
 80047ba:	683b      	ldr	r3, [r7, #0]
 80047bc:	781b      	ldrb	r3, [r3, #0]
 80047be:	009b      	lsls	r3, r3, #2
 80047c0:	4413      	add	r3, r2
 80047c2:	881b      	ldrh	r3, [r3, #0]
 80047c4:	b29b      	uxth	r3, r3
 80047c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80047ca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80047ce:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80047d2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80047d6:	f083 0320 	eor.w	r3, r3, #32
 80047da:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80047de:	687a      	ldr	r2, [r7, #4]
 80047e0:	683b      	ldr	r3, [r7, #0]
 80047e2:	781b      	ldrb	r3, [r3, #0]
 80047e4:	009b      	lsls	r3, r3, #2
 80047e6:	441a      	add	r2, r3
 80047e8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80047ec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80047f0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80047f4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80047f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80047fc:	b29b      	uxth	r3, r3
 80047fe:	8013      	strh	r3, [r2, #0]
 8004800:	e01d      	b.n	800483e <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004802:	687a      	ldr	r2, [r7, #4]
 8004804:	683b      	ldr	r3, [r7, #0]
 8004806:	781b      	ldrb	r3, [r3, #0]
 8004808:	009b      	lsls	r3, r3, #2
 800480a:	4413      	add	r3, r2
 800480c:	881b      	ldrh	r3, [r3, #0]
 800480e:	b29b      	uxth	r3, r3
 8004810:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004814:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004818:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800481c:	687a      	ldr	r2, [r7, #4]
 800481e:	683b      	ldr	r3, [r7, #0]
 8004820:	781b      	ldrb	r3, [r3, #0]
 8004822:	009b      	lsls	r3, r3, #2
 8004824:	441a      	add	r2, r3
 8004826:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800482a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800482e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004832:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004836:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800483a:	b29b      	uxth	r3, r3
 800483c:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800483e:	687a      	ldr	r2, [r7, #4]
 8004840:	683b      	ldr	r3, [r7, #0]
 8004842:	781b      	ldrb	r3, [r3, #0]
 8004844:	009b      	lsls	r3, r3, #2
 8004846:	4413      	add	r3, r2
 8004848:	881b      	ldrh	r3, [r3, #0]
 800484a:	b29b      	uxth	r3, r3
 800484c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004850:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004854:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8004856:	687a      	ldr	r2, [r7, #4]
 8004858:	683b      	ldr	r3, [r7, #0]
 800485a:	781b      	ldrb	r3, [r3, #0]
 800485c:	009b      	lsls	r3, r3, #2
 800485e:	441a      	add	r2, r3
 8004860:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8004862:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004866:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800486a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800486e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004872:	b29b      	uxth	r3, r3
 8004874:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8004876:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800487a:	4618      	mov	r0, r3
 800487c:	376c      	adds	r7, #108	; 0x6c
 800487e:	46bd      	mov	sp, r7
 8004880:	bc80      	pop	{r7}
 8004882:	4770      	bx	lr

08004884 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004884:	b480      	push	{r7}
 8004886:	b08d      	sub	sp, #52	; 0x34
 8004888:	af00      	add	r7, sp, #0
 800488a:	6078      	str	r0, [r7, #4]
 800488c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800488e:	683b      	ldr	r3, [r7, #0]
 8004890:	7b1b      	ldrb	r3, [r3, #12]
 8004892:	2b00      	cmp	r3, #0
 8004894:	f040 808e 	bne.w	80049b4 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8004898:	683b      	ldr	r3, [r7, #0]
 800489a:	785b      	ldrb	r3, [r3, #1]
 800489c:	2b00      	cmp	r3, #0
 800489e:	d044      	beq.n	800492a <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80048a0:	687a      	ldr	r2, [r7, #4]
 80048a2:	683b      	ldr	r3, [r7, #0]
 80048a4:	781b      	ldrb	r3, [r3, #0]
 80048a6:	009b      	lsls	r3, r3, #2
 80048a8:	4413      	add	r3, r2
 80048aa:	881b      	ldrh	r3, [r3, #0]
 80048ac:	81bb      	strh	r3, [r7, #12]
 80048ae:	89bb      	ldrh	r3, [r7, #12]
 80048b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d01b      	beq.n	80048f0 <USB_DeactivateEndpoint+0x6c>
 80048b8:	687a      	ldr	r2, [r7, #4]
 80048ba:	683b      	ldr	r3, [r7, #0]
 80048bc:	781b      	ldrb	r3, [r3, #0]
 80048be:	009b      	lsls	r3, r3, #2
 80048c0:	4413      	add	r3, r2
 80048c2:	881b      	ldrh	r3, [r3, #0]
 80048c4:	b29b      	uxth	r3, r3
 80048c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80048ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048ce:	817b      	strh	r3, [r7, #10]
 80048d0:	687a      	ldr	r2, [r7, #4]
 80048d2:	683b      	ldr	r3, [r7, #0]
 80048d4:	781b      	ldrb	r3, [r3, #0]
 80048d6:	009b      	lsls	r3, r3, #2
 80048d8:	441a      	add	r2, r3
 80048da:	897b      	ldrh	r3, [r7, #10]
 80048dc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80048e0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80048e4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80048e8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80048ec:	b29b      	uxth	r3, r3
 80048ee:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80048f0:	687a      	ldr	r2, [r7, #4]
 80048f2:	683b      	ldr	r3, [r7, #0]
 80048f4:	781b      	ldrb	r3, [r3, #0]
 80048f6:	009b      	lsls	r3, r3, #2
 80048f8:	4413      	add	r3, r2
 80048fa:	881b      	ldrh	r3, [r3, #0]
 80048fc:	b29b      	uxth	r3, r3
 80048fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004902:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004906:	813b      	strh	r3, [r7, #8]
 8004908:	687a      	ldr	r2, [r7, #4]
 800490a:	683b      	ldr	r3, [r7, #0]
 800490c:	781b      	ldrb	r3, [r3, #0]
 800490e:	009b      	lsls	r3, r3, #2
 8004910:	441a      	add	r2, r3
 8004912:	893b      	ldrh	r3, [r7, #8]
 8004914:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004918:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800491c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004920:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004924:	b29b      	uxth	r3, r3
 8004926:	8013      	strh	r3, [r2, #0]
 8004928:	e192      	b.n	8004c50 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800492a:	687a      	ldr	r2, [r7, #4]
 800492c:	683b      	ldr	r3, [r7, #0]
 800492e:	781b      	ldrb	r3, [r3, #0]
 8004930:	009b      	lsls	r3, r3, #2
 8004932:	4413      	add	r3, r2
 8004934:	881b      	ldrh	r3, [r3, #0]
 8004936:	827b      	strh	r3, [r7, #18]
 8004938:	8a7b      	ldrh	r3, [r7, #18]
 800493a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800493e:	2b00      	cmp	r3, #0
 8004940:	d01b      	beq.n	800497a <USB_DeactivateEndpoint+0xf6>
 8004942:	687a      	ldr	r2, [r7, #4]
 8004944:	683b      	ldr	r3, [r7, #0]
 8004946:	781b      	ldrb	r3, [r3, #0]
 8004948:	009b      	lsls	r3, r3, #2
 800494a:	4413      	add	r3, r2
 800494c:	881b      	ldrh	r3, [r3, #0]
 800494e:	b29b      	uxth	r3, r3
 8004950:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004954:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004958:	823b      	strh	r3, [r7, #16]
 800495a:	687a      	ldr	r2, [r7, #4]
 800495c:	683b      	ldr	r3, [r7, #0]
 800495e:	781b      	ldrb	r3, [r3, #0]
 8004960:	009b      	lsls	r3, r3, #2
 8004962:	441a      	add	r2, r3
 8004964:	8a3b      	ldrh	r3, [r7, #16]
 8004966:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800496a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800496e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004972:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004976:	b29b      	uxth	r3, r3
 8004978:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800497a:	687a      	ldr	r2, [r7, #4]
 800497c:	683b      	ldr	r3, [r7, #0]
 800497e:	781b      	ldrb	r3, [r3, #0]
 8004980:	009b      	lsls	r3, r3, #2
 8004982:	4413      	add	r3, r2
 8004984:	881b      	ldrh	r3, [r3, #0]
 8004986:	b29b      	uxth	r3, r3
 8004988:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800498c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004990:	81fb      	strh	r3, [r7, #14]
 8004992:	687a      	ldr	r2, [r7, #4]
 8004994:	683b      	ldr	r3, [r7, #0]
 8004996:	781b      	ldrb	r3, [r3, #0]
 8004998:	009b      	lsls	r3, r3, #2
 800499a:	441a      	add	r2, r3
 800499c:	89fb      	ldrh	r3, [r7, #14]
 800499e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80049a2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80049a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80049aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80049ae:	b29b      	uxth	r3, r3
 80049b0:	8013      	strh	r3, [r2, #0]
 80049b2:	e14d      	b.n	8004c50 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 80049b4:	683b      	ldr	r3, [r7, #0]
 80049b6:	785b      	ldrb	r3, [r3, #1]
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	f040 80a5 	bne.w	8004b08 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80049be:	687a      	ldr	r2, [r7, #4]
 80049c0:	683b      	ldr	r3, [r7, #0]
 80049c2:	781b      	ldrb	r3, [r3, #0]
 80049c4:	009b      	lsls	r3, r3, #2
 80049c6:	4413      	add	r3, r2
 80049c8:	881b      	ldrh	r3, [r3, #0]
 80049ca:	843b      	strh	r3, [r7, #32]
 80049cc:	8c3b      	ldrh	r3, [r7, #32]
 80049ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d01b      	beq.n	8004a0e <USB_DeactivateEndpoint+0x18a>
 80049d6:	687a      	ldr	r2, [r7, #4]
 80049d8:	683b      	ldr	r3, [r7, #0]
 80049da:	781b      	ldrb	r3, [r3, #0]
 80049dc:	009b      	lsls	r3, r3, #2
 80049de:	4413      	add	r3, r2
 80049e0:	881b      	ldrh	r3, [r3, #0]
 80049e2:	b29b      	uxth	r3, r3
 80049e4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80049e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049ec:	83fb      	strh	r3, [r7, #30]
 80049ee:	687a      	ldr	r2, [r7, #4]
 80049f0:	683b      	ldr	r3, [r7, #0]
 80049f2:	781b      	ldrb	r3, [r3, #0]
 80049f4:	009b      	lsls	r3, r3, #2
 80049f6:	441a      	add	r2, r3
 80049f8:	8bfb      	ldrh	r3, [r7, #30]
 80049fa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80049fe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a02:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004a06:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a0a:	b29b      	uxth	r3, r3
 8004a0c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004a0e:	687a      	ldr	r2, [r7, #4]
 8004a10:	683b      	ldr	r3, [r7, #0]
 8004a12:	781b      	ldrb	r3, [r3, #0]
 8004a14:	009b      	lsls	r3, r3, #2
 8004a16:	4413      	add	r3, r2
 8004a18:	881b      	ldrh	r3, [r3, #0]
 8004a1a:	83bb      	strh	r3, [r7, #28]
 8004a1c:	8bbb      	ldrh	r3, [r7, #28]
 8004a1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d01b      	beq.n	8004a5e <USB_DeactivateEndpoint+0x1da>
 8004a26:	687a      	ldr	r2, [r7, #4]
 8004a28:	683b      	ldr	r3, [r7, #0]
 8004a2a:	781b      	ldrb	r3, [r3, #0]
 8004a2c:	009b      	lsls	r3, r3, #2
 8004a2e:	4413      	add	r3, r2
 8004a30:	881b      	ldrh	r3, [r3, #0]
 8004a32:	b29b      	uxth	r3, r3
 8004a34:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a38:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a3c:	837b      	strh	r3, [r7, #26]
 8004a3e:	687a      	ldr	r2, [r7, #4]
 8004a40:	683b      	ldr	r3, [r7, #0]
 8004a42:	781b      	ldrb	r3, [r3, #0]
 8004a44:	009b      	lsls	r3, r3, #2
 8004a46:	441a      	add	r2, r3
 8004a48:	8b7b      	ldrh	r3, [r7, #26]
 8004a4a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a4e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a52:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a56:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004a5a:	b29b      	uxth	r3, r3
 8004a5c:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8004a5e:	687a      	ldr	r2, [r7, #4]
 8004a60:	683b      	ldr	r3, [r7, #0]
 8004a62:	781b      	ldrb	r3, [r3, #0]
 8004a64:	009b      	lsls	r3, r3, #2
 8004a66:	4413      	add	r3, r2
 8004a68:	881b      	ldrh	r3, [r3, #0]
 8004a6a:	b29b      	uxth	r3, r3
 8004a6c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a70:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a74:	833b      	strh	r3, [r7, #24]
 8004a76:	687a      	ldr	r2, [r7, #4]
 8004a78:	683b      	ldr	r3, [r7, #0]
 8004a7a:	781b      	ldrb	r3, [r3, #0]
 8004a7c:	009b      	lsls	r3, r3, #2
 8004a7e:	441a      	add	r2, r3
 8004a80:	8b3b      	ldrh	r3, [r7, #24]
 8004a82:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a86:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a8a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a8e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004a92:	b29b      	uxth	r3, r3
 8004a94:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004a96:	687a      	ldr	r2, [r7, #4]
 8004a98:	683b      	ldr	r3, [r7, #0]
 8004a9a:	781b      	ldrb	r3, [r3, #0]
 8004a9c:	009b      	lsls	r3, r3, #2
 8004a9e:	4413      	add	r3, r2
 8004aa0:	881b      	ldrh	r3, [r3, #0]
 8004aa2:	b29b      	uxth	r3, r3
 8004aa4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004aa8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004aac:	82fb      	strh	r3, [r7, #22]
 8004aae:	687a      	ldr	r2, [r7, #4]
 8004ab0:	683b      	ldr	r3, [r7, #0]
 8004ab2:	781b      	ldrb	r3, [r3, #0]
 8004ab4:	009b      	lsls	r3, r3, #2
 8004ab6:	441a      	add	r2, r3
 8004ab8:	8afb      	ldrh	r3, [r7, #22]
 8004aba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004abe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ac2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ac6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004aca:	b29b      	uxth	r3, r3
 8004acc:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004ace:	687a      	ldr	r2, [r7, #4]
 8004ad0:	683b      	ldr	r3, [r7, #0]
 8004ad2:	781b      	ldrb	r3, [r3, #0]
 8004ad4:	009b      	lsls	r3, r3, #2
 8004ad6:	4413      	add	r3, r2
 8004ad8:	881b      	ldrh	r3, [r3, #0]
 8004ada:	b29b      	uxth	r3, r3
 8004adc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ae0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004ae4:	82bb      	strh	r3, [r7, #20]
 8004ae6:	687a      	ldr	r2, [r7, #4]
 8004ae8:	683b      	ldr	r3, [r7, #0]
 8004aea:	781b      	ldrb	r3, [r3, #0]
 8004aec:	009b      	lsls	r3, r3, #2
 8004aee:	441a      	add	r2, r3
 8004af0:	8abb      	ldrh	r3, [r7, #20]
 8004af2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004af6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004afa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004afe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b02:	b29b      	uxth	r3, r3
 8004b04:	8013      	strh	r3, [r2, #0]
 8004b06:	e0a3      	b.n	8004c50 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004b08:	687a      	ldr	r2, [r7, #4]
 8004b0a:	683b      	ldr	r3, [r7, #0]
 8004b0c:	781b      	ldrb	r3, [r3, #0]
 8004b0e:	009b      	lsls	r3, r3, #2
 8004b10:	4413      	add	r3, r2
 8004b12:	881b      	ldrh	r3, [r3, #0]
 8004b14:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004b16:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004b18:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d01b      	beq.n	8004b58 <USB_DeactivateEndpoint+0x2d4>
 8004b20:	687a      	ldr	r2, [r7, #4]
 8004b22:	683b      	ldr	r3, [r7, #0]
 8004b24:	781b      	ldrb	r3, [r3, #0]
 8004b26:	009b      	lsls	r3, r3, #2
 8004b28:	4413      	add	r3, r2
 8004b2a:	881b      	ldrh	r3, [r3, #0]
 8004b2c:	b29b      	uxth	r3, r3
 8004b2e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b36:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8004b38:	687a      	ldr	r2, [r7, #4]
 8004b3a:	683b      	ldr	r3, [r7, #0]
 8004b3c:	781b      	ldrb	r3, [r3, #0]
 8004b3e:	009b      	lsls	r3, r3, #2
 8004b40:	441a      	add	r2, r3
 8004b42:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8004b44:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b48:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b4c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004b50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b54:	b29b      	uxth	r3, r3
 8004b56:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004b58:	687a      	ldr	r2, [r7, #4]
 8004b5a:	683b      	ldr	r3, [r7, #0]
 8004b5c:	781b      	ldrb	r3, [r3, #0]
 8004b5e:	009b      	lsls	r3, r3, #2
 8004b60:	4413      	add	r3, r2
 8004b62:	881b      	ldrh	r3, [r3, #0]
 8004b64:	857b      	strh	r3, [r7, #42]	; 0x2a
 8004b66:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004b68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d01b      	beq.n	8004ba8 <USB_DeactivateEndpoint+0x324>
 8004b70:	687a      	ldr	r2, [r7, #4]
 8004b72:	683b      	ldr	r3, [r7, #0]
 8004b74:	781b      	ldrb	r3, [r3, #0]
 8004b76:	009b      	lsls	r3, r3, #2
 8004b78:	4413      	add	r3, r2
 8004b7a:	881b      	ldrh	r3, [r3, #0]
 8004b7c:	b29b      	uxth	r3, r3
 8004b7e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b86:	853b      	strh	r3, [r7, #40]	; 0x28
 8004b88:	687a      	ldr	r2, [r7, #4]
 8004b8a:	683b      	ldr	r3, [r7, #0]
 8004b8c:	781b      	ldrb	r3, [r3, #0]
 8004b8e:	009b      	lsls	r3, r3, #2
 8004b90:	441a      	add	r2, r3
 8004b92:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004b94:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b98:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b9c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ba0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004ba4:	b29b      	uxth	r3, r3
 8004ba6:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8004ba8:	687a      	ldr	r2, [r7, #4]
 8004baa:	683b      	ldr	r3, [r7, #0]
 8004bac:	781b      	ldrb	r3, [r3, #0]
 8004bae:	009b      	lsls	r3, r3, #2
 8004bb0:	4413      	add	r3, r2
 8004bb2:	881b      	ldrh	r3, [r3, #0]
 8004bb4:	b29b      	uxth	r3, r3
 8004bb6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004bba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bbe:	84fb      	strh	r3, [r7, #38]	; 0x26
 8004bc0:	687a      	ldr	r2, [r7, #4]
 8004bc2:	683b      	ldr	r3, [r7, #0]
 8004bc4:	781b      	ldrb	r3, [r3, #0]
 8004bc6:	009b      	lsls	r3, r3, #2
 8004bc8:	441a      	add	r2, r3
 8004bca:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004bcc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004bd0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004bd4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004bd8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004bdc:	b29b      	uxth	r3, r3
 8004bde:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004be0:	687a      	ldr	r2, [r7, #4]
 8004be2:	683b      	ldr	r3, [r7, #0]
 8004be4:	781b      	ldrb	r3, [r3, #0]
 8004be6:	009b      	lsls	r3, r3, #2
 8004be8:	4413      	add	r3, r2
 8004bea:	881b      	ldrh	r3, [r3, #0]
 8004bec:	b29b      	uxth	r3, r3
 8004bee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004bf2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004bf6:	84bb      	strh	r3, [r7, #36]	; 0x24
 8004bf8:	687a      	ldr	r2, [r7, #4]
 8004bfa:	683b      	ldr	r3, [r7, #0]
 8004bfc:	781b      	ldrb	r3, [r3, #0]
 8004bfe:	009b      	lsls	r3, r3, #2
 8004c00:	441a      	add	r2, r3
 8004c02:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004c04:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c08:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c0c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c14:	b29b      	uxth	r3, r3
 8004c16:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004c18:	687a      	ldr	r2, [r7, #4]
 8004c1a:	683b      	ldr	r3, [r7, #0]
 8004c1c:	781b      	ldrb	r3, [r3, #0]
 8004c1e:	009b      	lsls	r3, r3, #2
 8004c20:	4413      	add	r3, r2
 8004c22:	881b      	ldrh	r3, [r3, #0]
 8004c24:	b29b      	uxth	r3, r3
 8004c26:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004c2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c2e:	847b      	strh	r3, [r7, #34]	; 0x22
 8004c30:	687a      	ldr	r2, [r7, #4]
 8004c32:	683b      	ldr	r3, [r7, #0]
 8004c34:	781b      	ldrb	r3, [r3, #0]
 8004c36:	009b      	lsls	r3, r3, #2
 8004c38:	441a      	add	r2, r3
 8004c3a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004c3c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c40:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c44:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c4c:	b29b      	uxth	r3, r3
 8004c4e:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8004c50:	2300      	movs	r3, #0
}
 8004c52:	4618      	mov	r0, r3
 8004c54:	3734      	adds	r7, #52	; 0x34
 8004c56:	46bd      	mov	sp, r7
 8004c58:	bc80      	pop	{r7}
 8004c5a:	4770      	bx	lr

08004c5c <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004c5c:	b580      	push	{r7, lr}
 8004c5e:	b0c4      	sub	sp, #272	; 0x110
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	1d3b      	adds	r3, r7, #4
 8004c64:	6018      	str	r0, [r3, #0]
 8004c66:	463b      	mov	r3, r7
 8004c68:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004c6a:	463b      	mov	r3, r7
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	785b      	ldrb	r3, [r3, #1]
 8004c70:	2b01      	cmp	r3, #1
 8004c72:	f040 8557 	bne.w	8005724 <USB_EPStartXfer+0xac8>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8004c76:	463b      	mov	r3, r7
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	699a      	ldr	r2, [r3, #24]
 8004c7c:	463b      	mov	r3, r7
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	691b      	ldr	r3, [r3, #16]
 8004c82:	429a      	cmp	r2, r3
 8004c84:	d905      	bls.n	8004c92 <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 8004c86:	463b      	mov	r3, r7
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	691b      	ldr	r3, [r3, #16]
 8004c8c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8004c90:	e004      	b.n	8004c9c <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 8004c92:	463b      	mov	r3, r7
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	699b      	ldr	r3, [r3, #24]
 8004c98:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8004c9c:	463b      	mov	r3, r7
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	7b1b      	ldrb	r3, [r3, #12]
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d12c      	bne.n	8004d00 <USB_EPStartXfer+0xa4>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8004ca6:	463b      	mov	r3, r7
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	6959      	ldr	r1, [r3, #20]
 8004cac:	463b      	mov	r3, r7
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	88da      	ldrh	r2, [r3, #6]
 8004cb2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004cb6:	b29b      	uxth	r3, r3
 8004cb8:	1d38      	adds	r0, r7, #4
 8004cba:	6800      	ldr	r0, [r0, #0]
 8004cbc:	f001 fa2c 	bl	8006118 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8004cc0:	1d3b      	adds	r3, r7, #4
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	617b      	str	r3, [r7, #20]
 8004cc6:	1d3b      	adds	r3, r7, #4
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004cce:	b29b      	uxth	r3, r3
 8004cd0:	461a      	mov	r2, r3
 8004cd2:	697b      	ldr	r3, [r7, #20]
 8004cd4:	4413      	add	r3, r2
 8004cd6:	617b      	str	r3, [r7, #20]
 8004cd8:	463b      	mov	r3, r7
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	781b      	ldrb	r3, [r3, #0]
 8004cde:	011a      	lsls	r2, r3, #4
 8004ce0:	697b      	ldr	r3, [r7, #20]
 8004ce2:	4413      	add	r3, r2
 8004ce4:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8004ce8:	f107 0310 	add.w	r3, r7, #16
 8004cec:	601a      	str	r2, [r3, #0]
 8004cee:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004cf2:	b29a      	uxth	r2, r3
 8004cf4:	f107 0310 	add.w	r3, r7, #16
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	801a      	strh	r2, [r3, #0]
 8004cfc:	f000 bcdd 	b.w	80056ba <USB_EPStartXfer+0xa5e>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8004d00:	463b      	mov	r3, r7
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	78db      	ldrb	r3, [r3, #3]
 8004d06:	2b02      	cmp	r3, #2
 8004d08:	f040 8347 	bne.w	800539a <USB_EPStartXfer+0x73e>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8004d0c:	463b      	mov	r3, r7
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	6a1a      	ldr	r2, [r3, #32]
 8004d12:	463b      	mov	r3, r7
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	691b      	ldr	r3, [r3, #16]
 8004d18:	429a      	cmp	r2, r3
 8004d1a:	f240 82eb 	bls.w	80052f4 <USB_EPStartXfer+0x698>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 8004d1e:	1d3b      	adds	r3, r7, #4
 8004d20:	681a      	ldr	r2, [r3, #0]
 8004d22:	463b      	mov	r3, r7
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	781b      	ldrb	r3, [r3, #0]
 8004d28:	009b      	lsls	r3, r3, #2
 8004d2a:	4413      	add	r3, r2
 8004d2c:	881b      	ldrh	r3, [r3, #0]
 8004d2e:	b29b      	uxth	r3, r3
 8004d30:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d34:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d38:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
 8004d3c:	1d3b      	adds	r3, r7, #4
 8004d3e:	681a      	ldr	r2, [r3, #0]
 8004d40:	463b      	mov	r3, r7
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	781b      	ldrb	r3, [r3, #0]
 8004d46:	009b      	lsls	r3, r3, #2
 8004d48:	441a      	add	r2, r3
 8004d4a:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8004d4e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d52:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d56:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8004d5a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d5e:	b29b      	uxth	r3, r3
 8004d60:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8004d62:	463b      	mov	r3, r7
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	6a1a      	ldr	r2, [r3, #32]
 8004d68:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004d6c:	1ad2      	subs	r2, r2, r3
 8004d6e:	463b      	mov	r3, r7
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8004d74:	1d3b      	adds	r3, r7, #4
 8004d76:	681a      	ldr	r2, [r3, #0]
 8004d78:	463b      	mov	r3, r7
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	781b      	ldrb	r3, [r3, #0]
 8004d7e:	009b      	lsls	r3, r3, #2
 8004d80:	4413      	add	r3, r2
 8004d82:	881b      	ldrh	r3, [r3, #0]
 8004d84:	b29b      	uxth	r3, r3
 8004d86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	f000 8159 	beq.w	8005042 <USB_EPStartXfer+0x3e6>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004d90:	1d3b      	adds	r3, r7, #4
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	637b      	str	r3, [r7, #52]	; 0x34
 8004d96:	463b      	mov	r3, r7
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	785b      	ldrb	r3, [r3, #1]
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d164      	bne.n	8004e6a <USB_EPStartXfer+0x20e>
 8004da0:	1d3b      	adds	r3, r7, #4
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004da6:	1d3b      	adds	r3, r7, #4
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004dae:	b29b      	uxth	r3, r3
 8004db0:	461a      	mov	r2, r3
 8004db2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004db4:	4413      	add	r3, r2
 8004db6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004db8:	463b      	mov	r3, r7
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	781b      	ldrb	r3, [r3, #0]
 8004dbe:	011a      	lsls	r2, r3, #4
 8004dc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dc2:	4413      	add	r3, r2
 8004dc4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004dc8:	62bb      	str	r3, [r7, #40]	; 0x28
 8004dca:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d112      	bne.n	8004df8 <USB_EPStartXfer+0x19c>
 8004dd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dd4:	881b      	ldrh	r3, [r3, #0]
 8004dd6:	b29b      	uxth	r3, r3
 8004dd8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004ddc:	b29a      	uxth	r2, r3
 8004dde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004de0:	801a      	strh	r2, [r3, #0]
 8004de2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004de4:	881b      	ldrh	r3, [r3, #0]
 8004de6:	b29b      	uxth	r3, r3
 8004de8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004dec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004df0:	b29a      	uxth	r2, r3
 8004df2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004df4:	801a      	strh	r2, [r3, #0]
 8004df6:	e054      	b.n	8004ea2 <USB_EPStartXfer+0x246>
 8004df8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004dfc:	2b3e      	cmp	r3, #62	; 0x3e
 8004dfe:	d817      	bhi.n	8004e30 <USB_EPStartXfer+0x1d4>
 8004e00:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004e04:	085b      	lsrs	r3, r3, #1
 8004e06:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004e0a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004e0e:	f003 0301 	and.w	r3, r3, #1
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d004      	beq.n	8004e20 <USB_EPStartXfer+0x1c4>
 8004e16:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004e1a:	3301      	adds	r3, #1
 8004e1c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004e20:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004e24:	b29b      	uxth	r3, r3
 8004e26:	029b      	lsls	r3, r3, #10
 8004e28:	b29a      	uxth	r2, r3
 8004e2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e2c:	801a      	strh	r2, [r3, #0]
 8004e2e:	e038      	b.n	8004ea2 <USB_EPStartXfer+0x246>
 8004e30:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004e34:	095b      	lsrs	r3, r3, #5
 8004e36:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004e3a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004e3e:	f003 031f 	and.w	r3, r3, #31
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d104      	bne.n	8004e50 <USB_EPStartXfer+0x1f4>
 8004e46:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004e4a:	3b01      	subs	r3, #1
 8004e4c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004e50:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004e54:	b29b      	uxth	r3, r3
 8004e56:	029b      	lsls	r3, r3, #10
 8004e58:	b29b      	uxth	r3, r3
 8004e5a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004e5e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004e62:	b29a      	uxth	r2, r3
 8004e64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e66:	801a      	strh	r2, [r3, #0]
 8004e68:	e01b      	b.n	8004ea2 <USB_EPStartXfer+0x246>
 8004e6a:	463b      	mov	r3, r7
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	785b      	ldrb	r3, [r3, #1]
 8004e70:	2b01      	cmp	r3, #1
 8004e72:	d116      	bne.n	8004ea2 <USB_EPStartXfer+0x246>
 8004e74:	1d3b      	adds	r3, r7, #4
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004e7c:	b29b      	uxth	r3, r3
 8004e7e:	461a      	mov	r2, r3
 8004e80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e82:	4413      	add	r3, r2
 8004e84:	637b      	str	r3, [r7, #52]	; 0x34
 8004e86:	463b      	mov	r3, r7
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	781b      	ldrb	r3, [r3, #0]
 8004e8c:	011a      	lsls	r2, r3, #4
 8004e8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e90:	4413      	add	r3, r2
 8004e92:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004e96:	633b      	str	r3, [r7, #48]	; 0x30
 8004e98:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004e9c:	b29a      	uxth	r2, r3
 8004e9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ea0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8004ea2:	463b      	mov	r3, r7
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	895b      	ldrh	r3, [r3, #10]
 8004ea8:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004eac:	463b      	mov	r3, r7
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	6959      	ldr	r1, [r3, #20]
 8004eb2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004eb6:	b29b      	uxth	r3, r3
 8004eb8:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8004ebc:	1d38      	adds	r0, r7, #4
 8004ebe:	6800      	ldr	r0, [r0, #0]
 8004ec0:	f001 f92a 	bl	8006118 <USB_WritePMA>
            ep->xfer_buff += len;
 8004ec4:	463b      	mov	r3, r7
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	695a      	ldr	r2, [r3, #20]
 8004eca:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004ece:	441a      	add	r2, r3
 8004ed0:	463b      	mov	r3, r7
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8004ed6:	463b      	mov	r3, r7
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	6a1a      	ldr	r2, [r3, #32]
 8004edc:	463b      	mov	r3, r7
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	691b      	ldr	r3, [r3, #16]
 8004ee2:	429a      	cmp	r2, r3
 8004ee4:	d909      	bls.n	8004efa <USB_EPStartXfer+0x29e>
            {
              ep->xfer_len_db -= len;
 8004ee6:	463b      	mov	r3, r7
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	6a1a      	ldr	r2, [r3, #32]
 8004eec:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004ef0:	1ad2      	subs	r2, r2, r3
 8004ef2:	463b      	mov	r3, r7
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	621a      	str	r2, [r3, #32]
 8004ef8:	e008      	b.n	8004f0c <USB_EPStartXfer+0x2b0>
            }
            else
            {
              len = ep->xfer_len_db;
 8004efa:	463b      	mov	r3, r7
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	6a1b      	ldr	r3, [r3, #32]
 8004f00:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
              ep->xfer_len_db = 0U;
 8004f04:	463b      	mov	r3, r7
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	2200      	movs	r2, #0
 8004f0a:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004f0c:	463b      	mov	r3, r7
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	785b      	ldrb	r3, [r3, #1]
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d164      	bne.n	8004fe0 <USB_EPStartXfer+0x384>
 8004f16:	1d3b      	adds	r3, r7, #4
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	61fb      	str	r3, [r7, #28]
 8004f1c:	1d3b      	adds	r3, r7, #4
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004f24:	b29b      	uxth	r3, r3
 8004f26:	461a      	mov	r2, r3
 8004f28:	69fb      	ldr	r3, [r7, #28]
 8004f2a:	4413      	add	r3, r2
 8004f2c:	61fb      	str	r3, [r7, #28]
 8004f2e:	463b      	mov	r3, r7
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	781b      	ldrb	r3, [r3, #0]
 8004f34:	011a      	lsls	r2, r3, #4
 8004f36:	69fb      	ldr	r3, [r7, #28]
 8004f38:	4413      	add	r3, r2
 8004f3a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004f3e:	61bb      	str	r3, [r7, #24]
 8004f40:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d112      	bne.n	8004f6e <USB_EPStartXfer+0x312>
 8004f48:	69bb      	ldr	r3, [r7, #24]
 8004f4a:	881b      	ldrh	r3, [r3, #0]
 8004f4c:	b29b      	uxth	r3, r3
 8004f4e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004f52:	b29a      	uxth	r2, r3
 8004f54:	69bb      	ldr	r3, [r7, #24]
 8004f56:	801a      	strh	r2, [r3, #0]
 8004f58:	69bb      	ldr	r3, [r7, #24]
 8004f5a:	881b      	ldrh	r3, [r3, #0]
 8004f5c:	b29b      	uxth	r3, r3
 8004f5e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004f62:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004f66:	b29a      	uxth	r2, r3
 8004f68:	69bb      	ldr	r3, [r7, #24]
 8004f6a:	801a      	strh	r2, [r3, #0]
 8004f6c:	e057      	b.n	800501e <USB_EPStartXfer+0x3c2>
 8004f6e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004f72:	2b3e      	cmp	r3, #62	; 0x3e
 8004f74:	d817      	bhi.n	8004fa6 <USB_EPStartXfer+0x34a>
 8004f76:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004f7a:	085b      	lsrs	r3, r3, #1
 8004f7c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8004f80:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004f84:	f003 0301 	and.w	r3, r3, #1
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d004      	beq.n	8004f96 <USB_EPStartXfer+0x33a>
 8004f8c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8004f90:	3301      	adds	r3, #1
 8004f92:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8004f96:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8004f9a:	b29b      	uxth	r3, r3
 8004f9c:	029b      	lsls	r3, r3, #10
 8004f9e:	b29a      	uxth	r2, r3
 8004fa0:	69bb      	ldr	r3, [r7, #24]
 8004fa2:	801a      	strh	r2, [r3, #0]
 8004fa4:	e03b      	b.n	800501e <USB_EPStartXfer+0x3c2>
 8004fa6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004faa:	095b      	lsrs	r3, r3, #5
 8004fac:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8004fb0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004fb4:	f003 031f 	and.w	r3, r3, #31
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d104      	bne.n	8004fc6 <USB_EPStartXfer+0x36a>
 8004fbc:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8004fc0:	3b01      	subs	r3, #1
 8004fc2:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8004fc6:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8004fca:	b29b      	uxth	r3, r3
 8004fcc:	029b      	lsls	r3, r3, #10
 8004fce:	b29b      	uxth	r3, r3
 8004fd0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004fd4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004fd8:	b29a      	uxth	r2, r3
 8004fda:	69bb      	ldr	r3, [r7, #24]
 8004fdc:	801a      	strh	r2, [r3, #0]
 8004fde:	e01e      	b.n	800501e <USB_EPStartXfer+0x3c2>
 8004fe0:	463b      	mov	r3, r7
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	785b      	ldrb	r3, [r3, #1]
 8004fe6:	2b01      	cmp	r3, #1
 8004fe8:	d119      	bne.n	800501e <USB_EPStartXfer+0x3c2>
 8004fea:	1d3b      	adds	r3, r7, #4
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	627b      	str	r3, [r7, #36]	; 0x24
 8004ff0:	1d3b      	adds	r3, r7, #4
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004ff8:	b29b      	uxth	r3, r3
 8004ffa:	461a      	mov	r2, r3
 8004ffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ffe:	4413      	add	r3, r2
 8005000:	627b      	str	r3, [r7, #36]	; 0x24
 8005002:	463b      	mov	r3, r7
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	781b      	ldrb	r3, [r3, #0]
 8005008:	011a      	lsls	r2, r3, #4
 800500a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800500c:	4413      	add	r3, r2
 800500e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005012:	623b      	str	r3, [r7, #32]
 8005014:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005018:	b29a      	uxth	r2, r3
 800501a:	6a3b      	ldr	r3, [r7, #32]
 800501c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800501e:	463b      	mov	r3, r7
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	891b      	ldrh	r3, [r3, #8]
 8005024:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005028:	463b      	mov	r3, r7
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	6959      	ldr	r1, [r3, #20]
 800502e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005032:	b29b      	uxth	r3, r3
 8005034:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8005038:	1d38      	adds	r0, r7, #4
 800503a:	6800      	ldr	r0, [r0, #0]
 800503c:	f001 f86c 	bl	8006118 <USB_WritePMA>
 8005040:	e33b      	b.n	80056ba <USB_EPStartXfer+0xa5e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005042:	463b      	mov	r3, r7
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	785b      	ldrb	r3, [r3, #1]
 8005048:	2b00      	cmp	r3, #0
 800504a:	d164      	bne.n	8005116 <USB_EPStartXfer+0x4ba>
 800504c:	1d3b      	adds	r3, r7, #4
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005052:	1d3b      	adds	r3, r7, #4
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800505a:	b29b      	uxth	r3, r3
 800505c:	461a      	mov	r2, r3
 800505e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005060:	4413      	add	r3, r2
 8005062:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005064:	463b      	mov	r3, r7
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	781b      	ldrb	r3, [r3, #0]
 800506a:	011a      	lsls	r2, r3, #4
 800506c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800506e:	4413      	add	r3, r2
 8005070:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005074:	64bb      	str	r3, [r7, #72]	; 0x48
 8005076:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800507a:	2b00      	cmp	r3, #0
 800507c:	d112      	bne.n	80050a4 <USB_EPStartXfer+0x448>
 800507e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005080:	881b      	ldrh	r3, [r3, #0]
 8005082:	b29b      	uxth	r3, r3
 8005084:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005088:	b29a      	uxth	r2, r3
 800508a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800508c:	801a      	strh	r2, [r3, #0]
 800508e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005090:	881b      	ldrh	r3, [r3, #0]
 8005092:	b29b      	uxth	r3, r3
 8005094:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005098:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800509c:	b29a      	uxth	r2, r3
 800509e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80050a0:	801a      	strh	r2, [r3, #0]
 80050a2:	e057      	b.n	8005154 <USB_EPStartXfer+0x4f8>
 80050a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80050a8:	2b3e      	cmp	r3, #62	; 0x3e
 80050aa:	d817      	bhi.n	80050dc <USB_EPStartXfer+0x480>
 80050ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80050b0:	085b      	lsrs	r3, r3, #1
 80050b2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80050b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80050ba:	f003 0301 	and.w	r3, r3, #1
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d004      	beq.n	80050cc <USB_EPStartXfer+0x470>
 80050c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80050c6:	3301      	adds	r3, #1
 80050c8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80050cc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80050d0:	b29b      	uxth	r3, r3
 80050d2:	029b      	lsls	r3, r3, #10
 80050d4:	b29a      	uxth	r2, r3
 80050d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80050d8:	801a      	strh	r2, [r3, #0]
 80050da:	e03b      	b.n	8005154 <USB_EPStartXfer+0x4f8>
 80050dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80050e0:	095b      	lsrs	r3, r3, #5
 80050e2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80050e6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80050ea:	f003 031f 	and.w	r3, r3, #31
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d104      	bne.n	80050fc <USB_EPStartXfer+0x4a0>
 80050f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80050f6:	3b01      	subs	r3, #1
 80050f8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80050fc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005100:	b29b      	uxth	r3, r3
 8005102:	029b      	lsls	r3, r3, #10
 8005104:	b29b      	uxth	r3, r3
 8005106:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800510a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800510e:	b29a      	uxth	r2, r3
 8005110:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005112:	801a      	strh	r2, [r3, #0]
 8005114:	e01e      	b.n	8005154 <USB_EPStartXfer+0x4f8>
 8005116:	463b      	mov	r3, r7
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	785b      	ldrb	r3, [r3, #1]
 800511c:	2b01      	cmp	r3, #1
 800511e:	d119      	bne.n	8005154 <USB_EPStartXfer+0x4f8>
 8005120:	1d3b      	adds	r3, r7, #4
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	657b      	str	r3, [r7, #84]	; 0x54
 8005126:	1d3b      	adds	r3, r7, #4
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800512e:	b29b      	uxth	r3, r3
 8005130:	461a      	mov	r2, r3
 8005132:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005134:	4413      	add	r3, r2
 8005136:	657b      	str	r3, [r7, #84]	; 0x54
 8005138:	463b      	mov	r3, r7
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	781b      	ldrb	r3, [r3, #0]
 800513e:	011a      	lsls	r2, r3, #4
 8005140:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005142:	4413      	add	r3, r2
 8005144:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005148:	653b      	str	r3, [r7, #80]	; 0x50
 800514a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800514e:	b29a      	uxth	r2, r3
 8005150:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005152:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005154:	463b      	mov	r3, r7
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	891b      	ldrh	r3, [r3, #8]
 800515a:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800515e:	463b      	mov	r3, r7
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	6959      	ldr	r1, [r3, #20]
 8005164:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005168:	b29b      	uxth	r3, r3
 800516a:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 800516e:	1d38      	adds	r0, r7, #4
 8005170:	6800      	ldr	r0, [r0, #0]
 8005172:	f000 ffd1 	bl	8006118 <USB_WritePMA>
            ep->xfer_buff += len;
 8005176:	463b      	mov	r3, r7
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	695a      	ldr	r2, [r3, #20]
 800517c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005180:	441a      	add	r2, r3
 8005182:	463b      	mov	r3, r7
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005188:	463b      	mov	r3, r7
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	6a1a      	ldr	r2, [r3, #32]
 800518e:	463b      	mov	r3, r7
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	691b      	ldr	r3, [r3, #16]
 8005194:	429a      	cmp	r2, r3
 8005196:	d909      	bls.n	80051ac <USB_EPStartXfer+0x550>
            {
              ep->xfer_len_db -= len;
 8005198:	463b      	mov	r3, r7
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	6a1a      	ldr	r2, [r3, #32]
 800519e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80051a2:	1ad2      	subs	r2, r2, r3
 80051a4:	463b      	mov	r3, r7
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	621a      	str	r2, [r3, #32]
 80051aa:	e008      	b.n	80051be <USB_EPStartXfer+0x562>
            }
            else
            {
              len = ep->xfer_len_db;
 80051ac:	463b      	mov	r3, r7
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	6a1b      	ldr	r3, [r3, #32]
 80051b2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
              ep->xfer_len_db = 0U;
 80051b6:	463b      	mov	r3, r7
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	2200      	movs	r2, #0
 80051bc:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80051be:	1d3b      	adds	r3, r7, #4
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	647b      	str	r3, [r7, #68]	; 0x44
 80051c4:	463b      	mov	r3, r7
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	785b      	ldrb	r3, [r3, #1]
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d164      	bne.n	8005298 <USB_EPStartXfer+0x63c>
 80051ce:	1d3b      	adds	r3, r7, #4
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80051d4:	1d3b      	adds	r3, r7, #4
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80051dc:	b29b      	uxth	r3, r3
 80051de:	461a      	mov	r2, r3
 80051e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80051e2:	4413      	add	r3, r2
 80051e4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80051e6:	463b      	mov	r3, r7
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	781b      	ldrb	r3, [r3, #0]
 80051ec:	011a      	lsls	r2, r3, #4
 80051ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80051f0:	4413      	add	r3, r2
 80051f2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80051f6:	63bb      	str	r3, [r7, #56]	; 0x38
 80051f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d112      	bne.n	8005226 <USB_EPStartXfer+0x5ca>
 8005200:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005202:	881b      	ldrh	r3, [r3, #0]
 8005204:	b29b      	uxth	r3, r3
 8005206:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800520a:	b29a      	uxth	r2, r3
 800520c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800520e:	801a      	strh	r2, [r3, #0]
 8005210:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005212:	881b      	ldrh	r3, [r3, #0]
 8005214:	b29b      	uxth	r3, r3
 8005216:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800521a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800521e:	b29a      	uxth	r2, r3
 8005220:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005222:	801a      	strh	r2, [r3, #0]
 8005224:	e054      	b.n	80052d0 <USB_EPStartXfer+0x674>
 8005226:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800522a:	2b3e      	cmp	r3, #62	; 0x3e
 800522c:	d817      	bhi.n	800525e <USB_EPStartXfer+0x602>
 800522e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005232:	085b      	lsrs	r3, r3, #1
 8005234:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005238:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800523c:	f003 0301 	and.w	r3, r3, #1
 8005240:	2b00      	cmp	r3, #0
 8005242:	d004      	beq.n	800524e <USB_EPStartXfer+0x5f2>
 8005244:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005248:	3301      	adds	r3, #1
 800524a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800524e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005252:	b29b      	uxth	r3, r3
 8005254:	029b      	lsls	r3, r3, #10
 8005256:	b29a      	uxth	r2, r3
 8005258:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800525a:	801a      	strh	r2, [r3, #0]
 800525c:	e038      	b.n	80052d0 <USB_EPStartXfer+0x674>
 800525e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005262:	095b      	lsrs	r3, r3, #5
 8005264:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005268:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800526c:	f003 031f 	and.w	r3, r3, #31
 8005270:	2b00      	cmp	r3, #0
 8005272:	d104      	bne.n	800527e <USB_EPStartXfer+0x622>
 8005274:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005278:	3b01      	subs	r3, #1
 800527a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800527e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005282:	b29b      	uxth	r3, r3
 8005284:	029b      	lsls	r3, r3, #10
 8005286:	b29b      	uxth	r3, r3
 8005288:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800528c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005290:	b29a      	uxth	r2, r3
 8005292:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005294:	801a      	strh	r2, [r3, #0]
 8005296:	e01b      	b.n	80052d0 <USB_EPStartXfer+0x674>
 8005298:	463b      	mov	r3, r7
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	785b      	ldrb	r3, [r3, #1]
 800529e:	2b01      	cmp	r3, #1
 80052a0:	d116      	bne.n	80052d0 <USB_EPStartXfer+0x674>
 80052a2:	1d3b      	adds	r3, r7, #4
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80052aa:	b29b      	uxth	r3, r3
 80052ac:	461a      	mov	r2, r3
 80052ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80052b0:	4413      	add	r3, r2
 80052b2:	647b      	str	r3, [r7, #68]	; 0x44
 80052b4:	463b      	mov	r3, r7
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	781b      	ldrb	r3, [r3, #0]
 80052ba:	011a      	lsls	r2, r3, #4
 80052bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80052be:	4413      	add	r3, r2
 80052c0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80052c4:	643b      	str	r3, [r7, #64]	; 0x40
 80052c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80052ca:	b29a      	uxth	r2, r3
 80052cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80052ce:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80052d0:	463b      	mov	r3, r7
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	895b      	ldrh	r3, [r3, #10]
 80052d6:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80052da:	463b      	mov	r3, r7
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	6959      	ldr	r1, [r3, #20]
 80052e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80052e4:	b29b      	uxth	r3, r3
 80052e6:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 80052ea:	1d38      	adds	r0, r7, #4
 80052ec:	6800      	ldr	r0, [r0, #0]
 80052ee:	f000 ff13 	bl	8006118 <USB_WritePMA>
 80052f2:	e1e2      	b.n	80056ba <USB_EPStartXfer+0xa5e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 80052f4:	463b      	mov	r3, r7
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	6a1b      	ldr	r3, [r3, #32]
 80052fa:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 80052fe:	1d3b      	adds	r3, r7, #4
 8005300:	681a      	ldr	r2, [r3, #0]
 8005302:	463b      	mov	r3, r7
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	781b      	ldrb	r3, [r3, #0]
 8005308:	009b      	lsls	r3, r3, #2
 800530a:	4413      	add	r3, r2
 800530c:	881b      	ldrh	r3, [r3, #0]
 800530e:	b29b      	uxth	r3, r3
 8005310:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8005314:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005318:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 800531c:	1d3b      	adds	r3, r7, #4
 800531e:	681a      	ldr	r2, [r3, #0]
 8005320:	463b      	mov	r3, r7
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	781b      	ldrb	r3, [r3, #0]
 8005326:	009b      	lsls	r3, r3, #2
 8005328:	441a      	add	r2, r3
 800532a:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 800532e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005332:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005336:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800533a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800533e:	b29b      	uxth	r3, r3
 8005340:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005342:	1d3b      	adds	r3, r7, #4
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	663b      	str	r3, [r7, #96]	; 0x60
 8005348:	1d3b      	adds	r3, r7, #4
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005350:	b29b      	uxth	r3, r3
 8005352:	461a      	mov	r2, r3
 8005354:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005356:	4413      	add	r3, r2
 8005358:	663b      	str	r3, [r7, #96]	; 0x60
 800535a:	463b      	mov	r3, r7
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	781b      	ldrb	r3, [r3, #0]
 8005360:	011a      	lsls	r2, r3, #4
 8005362:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005364:	4413      	add	r3, r2
 8005366:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800536a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800536c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005370:	b29a      	uxth	r2, r3
 8005372:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005374:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005376:	463b      	mov	r3, r7
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	891b      	ldrh	r3, [r3, #8]
 800537c:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005380:	463b      	mov	r3, r7
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	6959      	ldr	r1, [r3, #20]
 8005386:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800538a:	b29b      	uxth	r3, r3
 800538c:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8005390:	1d38      	adds	r0, r7, #4
 8005392:	6800      	ldr	r0, [r0, #0]
 8005394:	f000 fec0 	bl	8006118 <USB_WritePMA>
 8005398:	e18f      	b.n	80056ba <USB_EPStartXfer+0xa5e>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* Write the data to the USB endpoint */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800539a:	1d3b      	adds	r3, r7, #4
 800539c:	681a      	ldr	r2, [r3, #0]
 800539e:	463b      	mov	r3, r7
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	781b      	ldrb	r3, [r3, #0]
 80053a4:	009b      	lsls	r3, r3, #2
 80053a6:	4413      	add	r3, r2
 80053a8:	881b      	ldrh	r3, [r3, #0]
 80053aa:	b29b      	uxth	r3, r3
 80053ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	f000 808f 	beq.w	80054d4 <USB_EPStartXfer+0x878>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80053b6:	1d3b      	adds	r3, r7, #4
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	67bb      	str	r3, [r7, #120]	; 0x78
 80053bc:	463b      	mov	r3, r7
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	785b      	ldrb	r3, [r3, #1]
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d164      	bne.n	8005490 <USB_EPStartXfer+0x834>
 80053c6:	1d3b      	adds	r3, r7, #4
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	673b      	str	r3, [r7, #112]	; 0x70
 80053cc:	1d3b      	adds	r3, r7, #4
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80053d4:	b29b      	uxth	r3, r3
 80053d6:	461a      	mov	r2, r3
 80053d8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80053da:	4413      	add	r3, r2
 80053dc:	673b      	str	r3, [r7, #112]	; 0x70
 80053de:	463b      	mov	r3, r7
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	781b      	ldrb	r3, [r3, #0]
 80053e4:	011a      	lsls	r2, r3, #4
 80053e6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80053e8:	4413      	add	r3, r2
 80053ea:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80053ee:	66fb      	str	r3, [r7, #108]	; 0x6c
 80053f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d112      	bne.n	800541e <USB_EPStartXfer+0x7c2>
 80053f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80053fa:	881b      	ldrh	r3, [r3, #0]
 80053fc:	b29b      	uxth	r3, r3
 80053fe:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005402:	b29a      	uxth	r2, r3
 8005404:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005406:	801a      	strh	r2, [r3, #0]
 8005408:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800540a:	881b      	ldrh	r3, [r3, #0]
 800540c:	b29b      	uxth	r3, r3
 800540e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005412:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005416:	b29a      	uxth	r2, r3
 8005418:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800541a:	801a      	strh	r2, [r3, #0]
 800541c:	e054      	b.n	80054c8 <USB_EPStartXfer+0x86c>
 800541e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005422:	2b3e      	cmp	r3, #62	; 0x3e
 8005424:	d817      	bhi.n	8005456 <USB_EPStartXfer+0x7fa>
 8005426:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800542a:	085b      	lsrs	r3, r3, #1
 800542c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005430:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005434:	f003 0301 	and.w	r3, r3, #1
 8005438:	2b00      	cmp	r3, #0
 800543a:	d004      	beq.n	8005446 <USB_EPStartXfer+0x7ea>
 800543c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005440:	3301      	adds	r3, #1
 8005442:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005446:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800544a:	b29b      	uxth	r3, r3
 800544c:	029b      	lsls	r3, r3, #10
 800544e:	b29a      	uxth	r2, r3
 8005450:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005452:	801a      	strh	r2, [r3, #0]
 8005454:	e038      	b.n	80054c8 <USB_EPStartXfer+0x86c>
 8005456:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800545a:	095b      	lsrs	r3, r3, #5
 800545c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005460:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005464:	f003 031f 	and.w	r3, r3, #31
 8005468:	2b00      	cmp	r3, #0
 800546a:	d104      	bne.n	8005476 <USB_EPStartXfer+0x81a>
 800546c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005470:	3b01      	subs	r3, #1
 8005472:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005476:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800547a:	b29b      	uxth	r3, r3
 800547c:	029b      	lsls	r3, r3, #10
 800547e:	b29b      	uxth	r3, r3
 8005480:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005484:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005488:	b29a      	uxth	r2, r3
 800548a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800548c:	801a      	strh	r2, [r3, #0]
 800548e:	e01b      	b.n	80054c8 <USB_EPStartXfer+0x86c>
 8005490:	463b      	mov	r3, r7
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	785b      	ldrb	r3, [r3, #1]
 8005496:	2b01      	cmp	r3, #1
 8005498:	d116      	bne.n	80054c8 <USB_EPStartXfer+0x86c>
 800549a:	1d3b      	adds	r3, r7, #4
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80054a2:	b29b      	uxth	r3, r3
 80054a4:	461a      	mov	r2, r3
 80054a6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80054a8:	4413      	add	r3, r2
 80054aa:	67bb      	str	r3, [r7, #120]	; 0x78
 80054ac:	463b      	mov	r3, r7
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	781b      	ldrb	r3, [r3, #0]
 80054b2:	011a      	lsls	r2, r3, #4
 80054b4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80054b6:	4413      	add	r3, r2
 80054b8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80054bc:	677b      	str	r3, [r7, #116]	; 0x74
 80054be:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80054c2:	b29a      	uxth	r2, r3
 80054c4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80054c6:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 80054c8:	463b      	mov	r3, r7
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	895b      	ldrh	r3, [r3, #10]
 80054ce:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
 80054d2:	e097      	b.n	8005604 <USB_EPStartXfer+0x9a8>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80054d4:	463b      	mov	r3, r7
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	785b      	ldrb	r3, [r3, #1]
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d168      	bne.n	80055b0 <USB_EPStartXfer+0x954>
 80054de:	1d3b      	adds	r3, r7, #4
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80054e6:	1d3b      	adds	r3, r7, #4
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80054ee:	b29b      	uxth	r3, r3
 80054f0:	461a      	mov	r2, r3
 80054f2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80054f6:	4413      	add	r3, r2
 80054f8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80054fc:	463b      	mov	r3, r7
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	781b      	ldrb	r3, [r3, #0]
 8005502:	011a      	lsls	r2, r3, #4
 8005504:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005508:	4413      	add	r3, r2
 800550a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800550e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005510:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005514:	2b00      	cmp	r3, #0
 8005516:	d112      	bne.n	800553e <USB_EPStartXfer+0x8e2>
 8005518:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800551a:	881b      	ldrh	r3, [r3, #0]
 800551c:	b29b      	uxth	r3, r3
 800551e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005522:	b29a      	uxth	r2, r3
 8005524:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005526:	801a      	strh	r2, [r3, #0]
 8005528:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800552a:	881b      	ldrh	r3, [r3, #0]
 800552c:	b29b      	uxth	r3, r3
 800552e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005532:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005536:	b29a      	uxth	r2, r3
 8005538:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800553a:	801a      	strh	r2, [r3, #0]
 800553c:	e05d      	b.n	80055fa <USB_EPStartXfer+0x99e>
 800553e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005542:	2b3e      	cmp	r3, #62	; 0x3e
 8005544:	d817      	bhi.n	8005576 <USB_EPStartXfer+0x91a>
 8005546:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800554a:	085b      	lsrs	r3, r3, #1
 800554c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005550:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005554:	f003 0301 	and.w	r3, r3, #1
 8005558:	2b00      	cmp	r3, #0
 800555a:	d004      	beq.n	8005566 <USB_EPStartXfer+0x90a>
 800555c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005560:	3301      	adds	r3, #1
 8005562:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005566:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800556a:	b29b      	uxth	r3, r3
 800556c:	029b      	lsls	r3, r3, #10
 800556e:	b29a      	uxth	r2, r3
 8005570:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005572:	801a      	strh	r2, [r3, #0]
 8005574:	e041      	b.n	80055fa <USB_EPStartXfer+0x99e>
 8005576:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800557a:	095b      	lsrs	r3, r3, #5
 800557c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005580:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005584:	f003 031f 	and.w	r3, r3, #31
 8005588:	2b00      	cmp	r3, #0
 800558a:	d104      	bne.n	8005596 <USB_EPStartXfer+0x93a>
 800558c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005590:	3b01      	subs	r3, #1
 8005592:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005596:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800559a:	b29b      	uxth	r3, r3
 800559c:	029b      	lsls	r3, r3, #10
 800559e:	b29b      	uxth	r3, r3
 80055a0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80055a4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80055a8:	b29a      	uxth	r2, r3
 80055aa:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80055ac:	801a      	strh	r2, [r3, #0]
 80055ae:	e024      	b.n	80055fa <USB_EPStartXfer+0x99e>
 80055b0:	463b      	mov	r3, r7
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	785b      	ldrb	r3, [r3, #1]
 80055b6:	2b01      	cmp	r3, #1
 80055b8:	d11f      	bne.n	80055fa <USB_EPStartXfer+0x99e>
 80055ba:	1d3b      	adds	r3, r7, #4
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80055c2:	1d3b      	adds	r3, r7, #4
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80055ca:	b29b      	uxth	r3, r3
 80055cc:	461a      	mov	r2, r3
 80055ce:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80055d2:	4413      	add	r3, r2
 80055d4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80055d8:	463b      	mov	r3, r7
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	781b      	ldrb	r3, [r3, #0]
 80055de:	011a      	lsls	r2, r3, #4
 80055e0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80055e4:	4413      	add	r3, r2
 80055e6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80055ea:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80055ee:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80055f2:	b29a      	uxth	r2, r3
 80055f4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80055f8:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80055fa:	463b      	mov	r3, r7
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	891b      	ldrh	r3, [r3, #8]
 8005600:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
        }

        USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005604:	463b      	mov	r3, r7
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	6959      	ldr	r1, [r3, #20]
 800560a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800560e:	b29b      	uxth	r3, r3
 8005610:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8005614:	1d38      	adds	r0, r7, #4
 8005616:	6800      	ldr	r0, [r0, #0]
 8005618:	f000 fd7e 	bl	8006118 <USB_WritePMA>
        PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 800561c:	463b      	mov	r3, r7
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	785b      	ldrb	r3, [r3, #1]
 8005622:	2b00      	cmp	r3, #0
 8005624:	d122      	bne.n	800566c <USB_EPStartXfer+0xa10>
 8005626:	1d3b      	adds	r3, r7, #4
 8005628:	681a      	ldr	r2, [r3, #0]
 800562a:	463b      	mov	r3, r7
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	781b      	ldrb	r3, [r3, #0]
 8005630:	009b      	lsls	r3, r3, #2
 8005632:	4413      	add	r3, r2
 8005634:	881b      	ldrh	r3, [r3, #0]
 8005636:	b29b      	uxth	r3, r3
 8005638:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800563c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005640:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 8005644:	1d3b      	adds	r3, r7, #4
 8005646:	681a      	ldr	r2, [r3, #0]
 8005648:	463b      	mov	r3, r7
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	781b      	ldrb	r3, [r3, #0]
 800564e:	009b      	lsls	r3, r3, #2
 8005650:	441a      	add	r2, r3
 8005652:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8005656:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800565a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800565e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005662:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005666:	b29b      	uxth	r3, r3
 8005668:	8013      	strh	r3, [r2, #0]
 800566a:	e026      	b.n	80056ba <USB_EPStartXfer+0xa5e>
 800566c:	463b      	mov	r3, r7
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	785b      	ldrb	r3, [r3, #1]
 8005672:	2b01      	cmp	r3, #1
 8005674:	d121      	bne.n	80056ba <USB_EPStartXfer+0xa5e>
 8005676:	1d3b      	adds	r3, r7, #4
 8005678:	681a      	ldr	r2, [r3, #0]
 800567a:	463b      	mov	r3, r7
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	781b      	ldrb	r3, [r3, #0]
 8005680:	009b      	lsls	r3, r3, #2
 8005682:	4413      	add	r3, r2
 8005684:	881b      	ldrh	r3, [r3, #0]
 8005686:	b29b      	uxth	r3, r3
 8005688:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800568c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005690:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
 8005694:	1d3b      	adds	r3, r7, #4
 8005696:	681a      	ldr	r2, [r3, #0]
 8005698:	463b      	mov	r3, r7
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	781b      	ldrb	r3, [r3, #0]
 800569e:	009b      	lsls	r3, r3, #2
 80056a0:	441a      	add	r2, r3
 80056a2:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 80056a6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80056aa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80056ae:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80056b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80056b6:	b29b      	uxth	r3, r3
 80056b8:	8013      	strh	r3, [r2, #0]
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80056ba:	1d3b      	adds	r3, r7, #4
 80056bc:	681a      	ldr	r2, [r3, #0]
 80056be:	463b      	mov	r3, r7
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	781b      	ldrb	r3, [r3, #0]
 80056c4:	009b      	lsls	r3, r3, #2
 80056c6:	4413      	add	r3, r2
 80056c8:	881b      	ldrh	r3, [r3, #0]
 80056ca:	b29b      	uxth	r3, r3
 80056cc:	f107 020e 	add.w	r2, r7, #14
 80056d0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80056d4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80056d8:	8013      	strh	r3, [r2, #0]
 80056da:	f107 030e 	add.w	r3, r7, #14
 80056de:	f107 020e 	add.w	r2, r7, #14
 80056e2:	8812      	ldrh	r2, [r2, #0]
 80056e4:	f082 0210 	eor.w	r2, r2, #16
 80056e8:	801a      	strh	r2, [r3, #0]
 80056ea:	f107 030e 	add.w	r3, r7, #14
 80056ee:	f107 020e 	add.w	r2, r7, #14
 80056f2:	8812      	ldrh	r2, [r2, #0]
 80056f4:	f082 0220 	eor.w	r2, r2, #32
 80056f8:	801a      	strh	r2, [r3, #0]
 80056fa:	1d3b      	adds	r3, r7, #4
 80056fc:	681a      	ldr	r2, [r3, #0]
 80056fe:	463b      	mov	r3, r7
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	781b      	ldrb	r3, [r3, #0]
 8005704:	009b      	lsls	r3, r3, #2
 8005706:	441a      	add	r2, r3
 8005708:	f107 030e 	add.w	r3, r7, #14
 800570c:	881b      	ldrh	r3, [r3, #0]
 800570e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005712:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005716:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800571a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800571e:	b29b      	uxth	r3, r3
 8005720:	8013      	strh	r3, [r2, #0]
 8005722:	e3b5      	b.n	8005e90 <USB_EPStartXfer+0x1234>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8005724:	463b      	mov	r3, r7
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	7b1b      	ldrb	r3, [r3, #12]
 800572a:	2b00      	cmp	r3, #0
 800572c:	f040 8090 	bne.w	8005850 <USB_EPStartXfer+0xbf4>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8005730:	463b      	mov	r3, r7
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	699a      	ldr	r2, [r3, #24]
 8005736:	463b      	mov	r3, r7
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	691b      	ldr	r3, [r3, #16]
 800573c:	429a      	cmp	r2, r3
 800573e:	d90e      	bls.n	800575e <USB_EPStartXfer+0xb02>
      {
        len = ep->maxpacket;
 8005740:	463b      	mov	r3, r7
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	691b      	ldr	r3, [r3, #16]
 8005746:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        ep->xfer_len -= len;
 800574a:	463b      	mov	r3, r7
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	699a      	ldr	r2, [r3, #24]
 8005750:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005754:	1ad2      	subs	r2, r2, r3
 8005756:	463b      	mov	r3, r7
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	619a      	str	r2, [r3, #24]
 800575c:	e008      	b.n	8005770 <USB_EPStartXfer+0xb14>
      }
      else
      {
        len = ep->xfer_len;
 800575e:	463b      	mov	r3, r7
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	699b      	ldr	r3, [r3, #24]
 8005764:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        ep->xfer_len = 0U;
 8005768:	463b      	mov	r3, r7
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	2200      	movs	r2, #0
 800576e:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8005770:	1d3b      	adds	r3, r7, #4
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005778:	1d3b      	adds	r3, r7, #4
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005780:	b29b      	uxth	r3, r3
 8005782:	461a      	mov	r2, r3
 8005784:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005788:	4413      	add	r3, r2
 800578a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800578e:	463b      	mov	r3, r7
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	781b      	ldrb	r3, [r3, #0]
 8005794:	011a      	lsls	r2, r3, #4
 8005796:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800579a:	4413      	add	r3, r2
 800579c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80057a0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80057a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d116      	bne.n	80057da <USB_EPStartXfer+0xb7e>
 80057ac:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80057b0:	881b      	ldrh	r3, [r3, #0]
 80057b2:	b29b      	uxth	r3, r3
 80057b4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80057b8:	b29a      	uxth	r2, r3
 80057ba:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80057be:	801a      	strh	r2, [r3, #0]
 80057c0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80057c4:	881b      	ldrh	r3, [r3, #0]
 80057c6:	b29b      	uxth	r3, r3
 80057c8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80057cc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80057d0:	b29a      	uxth	r2, r3
 80057d2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80057d6:	801a      	strh	r2, [r3, #0]
 80057d8:	e32c      	b.n	8005e34 <USB_EPStartXfer+0x11d8>
 80057da:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80057de:	2b3e      	cmp	r3, #62	; 0x3e
 80057e0:	d818      	bhi.n	8005814 <USB_EPStartXfer+0xbb8>
 80057e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80057e6:	085b      	lsrs	r3, r3, #1
 80057e8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80057ec:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80057f0:	f003 0301 	and.w	r3, r3, #1
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d004      	beq.n	8005802 <USB_EPStartXfer+0xba6>
 80057f8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80057fc:	3301      	adds	r3, #1
 80057fe:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005802:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005806:	b29b      	uxth	r3, r3
 8005808:	029b      	lsls	r3, r3, #10
 800580a:	b29a      	uxth	r2, r3
 800580c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005810:	801a      	strh	r2, [r3, #0]
 8005812:	e30f      	b.n	8005e34 <USB_EPStartXfer+0x11d8>
 8005814:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005818:	095b      	lsrs	r3, r3, #5
 800581a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800581e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005822:	f003 031f 	and.w	r3, r3, #31
 8005826:	2b00      	cmp	r3, #0
 8005828:	d104      	bne.n	8005834 <USB_EPStartXfer+0xbd8>
 800582a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800582e:	3b01      	subs	r3, #1
 8005830:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005834:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005838:	b29b      	uxth	r3, r3
 800583a:	029b      	lsls	r3, r3, #10
 800583c:	b29b      	uxth	r3, r3
 800583e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005842:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005846:	b29a      	uxth	r2, r3
 8005848:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800584c:	801a      	strh	r2, [r3, #0]
 800584e:	e2f1      	b.n	8005e34 <USB_EPStartXfer+0x11d8>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8005850:	463b      	mov	r3, r7
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	78db      	ldrb	r3, [r3, #3]
 8005856:	2b02      	cmp	r3, #2
 8005858:	f040 818f 	bne.w	8005b7a <USB_EPStartXfer+0xf1e>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800585c:	463b      	mov	r3, r7
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	785b      	ldrb	r3, [r3, #1]
 8005862:	2b00      	cmp	r3, #0
 8005864:	d175      	bne.n	8005952 <USB_EPStartXfer+0xcf6>
 8005866:	1d3b      	adds	r3, r7, #4
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800586e:	1d3b      	adds	r3, r7, #4
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005876:	b29b      	uxth	r3, r3
 8005878:	461a      	mov	r2, r3
 800587a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800587e:	4413      	add	r3, r2
 8005880:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005884:	463b      	mov	r3, r7
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	781b      	ldrb	r3, [r3, #0]
 800588a:	011a      	lsls	r2, r3, #4
 800588c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8005890:	4413      	add	r3, r2
 8005892:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005896:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800589a:	463b      	mov	r3, r7
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	691b      	ldr	r3, [r3, #16]
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d116      	bne.n	80058d2 <USB_EPStartXfer+0xc76>
 80058a4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80058a8:	881b      	ldrh	r3, [r3, #0]
 80058aa:	b29b      	uxth	r3, r3
 80058ac:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80058b0:	b29a      	uxth	r2, r3
 80058b2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80058b6:	801a      	strh	r2, [r3, #0]
 80058b8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80058bc:	881b      	ldrh	r3, [r3, #0]
 80058be:	b29b      	uxth	r3, r3
 80058c0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80058c4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80058c8:	b29a      	uxth	r2, r3
 80058ca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80058ce:	801a      	strh	r2, [r3, #0]
 80058d0:	e065      	b.n	800599e <USB_EPStartXfer+0xd42>
 80058d2:	463b      	mov	r3, r7
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	691b      	ldr	r3, [r3, #16]
 80058d8:	2b3e      	cmp	r3, #62	; 0x3e
 80058da:	d81a      	bhi.n	8005912 <USB_EPStartXfer+0xcb6>
 80058dc:	463b      	mov	r3, r7
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	691b      	ldr	r3, [r3, #16]
 80058e2:	085b      	lsrs	r3, r3, #1
 80058e4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80058e8:	463b      	mov	r3, r7
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	691b      	ldr	r3, [r3, #16]
 80058ee:	f003 0301 	and.w	r3, r3, #1
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d004      	beq.n	8005900 <USB_EPStartXfer+0xca4>
 80058f6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80058fa:	3301      	adds	r3, #1
 80058fc:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005900:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005904:	b29b      	uxth	r3, r3
 8005906:	029b      	lsls	r3, r3, #10
 8005908:	b29a      	uxth	r2, r3
 800590a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800590e:	801a      	strh	r2, [r3, #0]
 8005910:	e045      	b.n	800599e <USB_EPStartXfer+0xd42>
 8005912:	463b      	mov	r3, r7
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	691b      	ldr	r3, [r3, #16]
 8005918:	095b      	lsrs	r3, r3, #5
 800591a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800591e:	463b      	mov	r3, r7
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	691b      	ldr	r3, [r3, #16]
 8005924:	f003 031f 	and.w	r3, r3, #31
 8005928:	2b00      	cmp	r3, #0
 800592a:	d104      	bne.n	8005936 <USB_EPStartXfer+0xcda>
 800592c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005930:	3b01      	subs	r3, #1
 8005932:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005936:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800593a:	b29b      	uxth	r3, r3
 800593c:	029b      	lsls	r3, r3, #10
 800593e:	b29b      	uxth	r3, r3
 8005940:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005944:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005948:	b29a      	uxth	r2, r3
 800594a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800594e:	801a      	strh	r2, [r3, #0]
 8005950:	e025      	b.n	800599e <USB_EPStartXfer+0xd42>
 8005952:	463b      	mov	r3, r7
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	785b      	ldrb	r3, [r3, #1]
 8005958:	2b01      	cmp	r3, #1
 800595a:	d120      	bne.n	800599e <USB_EPStartXfer+0xd42>
 800595c:	1d3b      	adds	r3, r7, #4
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005964:	1d3b      	adds	r3, r7, #4
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800596c:	b29b      	uxth	r3, r3
 800596e:	461a      	mov	r2, r3
 8005970:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005974:	4413      	add	r3, r2
 8005976:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800597a:	463b      	mov	r3, r7
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	781b      	ldrb	r3, [r3, #0]
 8005980:	011a      	lsls	r2, r3, #4
 8005982:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005986:	4413      	add	r3, r2
 8005988:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800598c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005990:	463b      	mov	r3, r7
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	691b      	ldr	r3, [r3, #16]
 8005996:	b29a      	uxth	r2, r3
 8005998:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800599c:	801a      	strh	r2, [r3, #0]
 800599e:	1d3b      	adds	r3, r7, #4
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80059a6:	463b      	mov	r3, r7
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	785b      	ldrb	r3, [r3, #1]
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d175      	bne.n	8005a9c <USB_EPStartXfer+0xe40>
 80059b0:	1d3b      	adds	r3, r7, #4
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80059b8:	1d3b      	adds	r3, r7, #4
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80059c0:	b29b      	uxth	r3, r3
 80059c2:	461a      	mov	r2, r3
 80059c4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80059c8:	4413      	add	r3, r2
 80059ca:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80059ce:	463b      	mov	r3, r7
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	781b      	ldrb	r3, [r3, #0]
 80059d4:	011a      	lsls	r2, r3, #4
 80059d6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80059da:	4413      	add	r3, r2
 80059dc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80059e0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80059e4:	463b      	mov	r3, r7
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	691b      	ldr	r3, [r3, #16]
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d116      	bne.n	8005a1c <USB_EPStartXfer+0xdc0>
 80059ee:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80059f2:	881b      	ldrh	r3, [r3, #0]
 80059f4:	b29b      	uxth	r3, r3
 80059f6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80059fa:	b29a      	uxth	r2, r3
 80059fc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005a00:	801a      	strh	r2, [r3, #0]
 8005a02:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005a06:	881b      	ldrh	r3, [r3, #0]
 8005a08:	b29b      	uxth	r3, r3
 8005a0a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a0e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a12:	b29a      	uxth	r2, r3
 8005a14:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005a18:	801a      	strh	r2, [r3, #0]
 8005a1a:	e061      	b.n	8005ae0 <USB_EPStartXfer+0xe84>
 8005a1c:	463b      	mov	r3, r7
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	691b      	ldr	r3, [r3, #16]
 8005a22:	2b3e      	cmp	r3, #62	; 0x3e
 8005a24:	d81a      	bhi.n	8005a5c <USB_EPStartXfer+0xe00>
 8005a26:	463b      	mov	r3, r7
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	691b      	ldr	r3, [r3, #16]
 8005a2c:	085b      	lsrs	r3, r3, #1
 8005a2e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005a32:	463b      	mov	r3, r7
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	691b      	ldr	r3, [r3, #16]
 8005a38:	f003 0301 	and.w	r3, r3, #1
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d004      	beq.n	8005a4a <USB_EPStartXfer+0xdee>
 8005a40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a44:	3301      	adds	r3, #1
 8005a46:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005a4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a4e:	b29b      	uxth	r3, r3
 8005a50:	029b      	lsls	r3, r3, #10
 8005a52:	b29a      	uxth	r2, r3
 8005a54:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005a58:	801a      	strh	r2, [r3, #0]
 8005a5a:	e041      	b.n	8005ae0 <USB_EPStartXfer+0xe84>
 8005a5c:	463b      	mov	r3, r7
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	691b      	ldr	r3, [r3, #16]
 8005a62:	095b      	lsrs	r3, r3, #5
 8005a64:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005a68:	463b      	mov	r3, r7
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	691b      	ldr	r3, [r3, #16]
 8005a6e:	f003 031f 	and.w	r3, r3, #31
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d104      	bne.n	8005a80 <USB_EPStartXfer+0xe24>
 8005a76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a7a:	3b01      	subs	r3, #1
 8005a7c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005a80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a84:	b29b      	uxth	r3, r3
 8005a86:	029b      	lsls	r3, r3, #10
 8005a88:	b29b      	uxth	r3, r3
 8005a8a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a8e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a92:	b29a      	uxth	r2, r3
 8005a94:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005a98:	801a      	strh	r2, [r3, #0]
 8005a9a:	e021      	b.n	8005ae0 <USB_EPStartXfer+0xe84>
 8005a9c:	463b      	mov	r3, r7
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	785b      	ldrb	r3, [r3, #1]
 8005aa2:	2b01      	cmp	r3, #1
 8005aa4:	d11c      	bne.n	8005ae0 <USB_EPStartXfer+0xe84>
 8005aa6:	1d3b      	adds	r3, r7, #4
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005aae:	b29b      	uxth	r3, r3
 8005ab0:	461a      	mov	r2, r3
 8005ab2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005ab6:	4413      	add	r3, r2
 8005ab8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005abc:	463b      	mov	r3, r7
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	781b      	ldrb	r3, [r3, #0]
 8005ac2:	011a      	lsls	r2, r3, #4
 8005ac4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005ac8:	4413      	add	r3, r2
 8005aca:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005ace:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8005ad2:	463b      	mov	r3, r7
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	691b      	ldr	r3, [r3, #16]
 8005ad8:	b29a      	uxth	r2, r3
 8005ada:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005ade:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8005ae0:	463b      	mov	r3, r7
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	69db      	ldr	r3, [r3, #28]
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	f000 81a4 	beq.w	8005e34 <USB_EPStartXfer+0x11d8>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8005aec:	1d3b      	adds	r3, r7, #4
 8005aee:	681a      	ldr	r2, [r3, #0]
 8005af0:	463b      	mov	r3, r7
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	781b      	ldrb	r3, [r3, #0]
 8005af6:	009b      	lsls	r3, r3, #2
 8005af8:	4413      	add	r3, r2
 8005afa:	881b      	ldrh	r3, [r3, #0]
 8005afc:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8005b00:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8005b04:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d005      	beq.n	8005b18 <USB_EPStartXfer+0xebc>
 8005b0c:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8005b10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d10d      	bne.n	8005b34 <USB_EPStartXfer+0xed8>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8005b18:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8005b1c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	f040 8187 	bne.w	8005e34 <USB_EPStartXfer+0x11d8>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8005b26:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8005b2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	f040 8180 	bne.w	8005e34 <USB_EPStartXfer+0x11d8>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8005b34:	1d3b      	adds	r3, r7, #4
 8005b36:	681a      	ldr	r2, [r3, #0]
 8005b38:	463b      	mov	r3, r7
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	781b      	ldrb	r3, [r3, #0]
 8005b3e:	009b      	lsls	r3, r3, #2
 8005b40:	4413      	add	r3, r2
 8005b42:	881b      	ldrh	r3, [r3, #0]
 8005b44:	b29b      	uxth	r3, r3
 8005b46:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b4e:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
 8005b52:	1d3b      	adds	r3, r7, #4
 8005b54:	681a      	ldr	r2, [r3, #0]
 8005b56:	463b      	mov	r3, r7
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	781b      	ldrb	r3, [r3, #0]
 8005b5c:	009b      	lsls	r3, r3, #2
 8005b5e:	441a      	add	r2, r3
 8005b60:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 8005b64:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005b68:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005b6c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005b70:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005b74:	b29b      	uxth	r3, r3
 8005b76:	8013      	strh	r3, [r2, #0]
 8005b78:	e15c      	b.n	8005e34 <USB_EPStartXfer+0x11d8>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8005b7a:	463b      	mov	r3, r7
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	78db      	ldrb	r3, [r3, #3]
 8005b80:	2b01      	cmp	r3, #1
 8005b82:	f040 8155 	bne.w	8005e30 <USB_EPStartXfer+0x11d4>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8005b86:	463b      	mov	r3, r7
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	699a      	ldr	r2, [r3, #24]
 8005b8c:	463b      	mov	r3, r7
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	691b      	ldr	r3, [r3, #16]
 8005b92:	429a      	cmp	r2, r3
 8005b94:	d90e      	bls.n	8005bb4 <USB_EPStartXfer+0xf58>
        {
          len = ep->maxpacket;
 8005b96:	463b      	mov	r3, r7
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	691b      	ldr	r3, [r3, #16]
 8005b9c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
          ep->xfer_len -= len;
 8005ba0:	463b      	mov	r3, r7
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	699a      	ldr	r2, [r3, #24]
 8005ba6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005baa:	1ad2      	subs	r2, r2, r3
 8005bac:	463b      	mov	r3, r7
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	619a      	str	r2, [r3, #24]
 8005bb2:	e008      	b.n	8005bc6 <USB_EPStartXfer+0xf6a>
        }
        else
        {
          len = ep->xfer_len;
 8005bb4:	463b      	mov	r3, r7
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	699b      	ldr	r3, [r3, #24]
 8005bba:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
          ep->xfer_len = 0U;
 8005bbe:	463b      	mov	r3, r7
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	2200      	movs	r2, #0
 8005bc4:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8005bc6:	463b      	mov	r3, r7
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	785b      	ldrb	r3, [r3, #1]
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d16f      	bne.n	8005cb0 <USB_EPStartXfer+0x1054>
 8005bd0:	1d3b      	adds	r3, r7, #4
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005bd8:	1d3b      	adds	r3, r7, #4
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005be0:	b29b      	uxth	r3, r3
 8005be2:	461a      	mov	r2, r3
 8005be4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8005be8:	4413      	add	r3, r2
 8005bea:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005bee:	463b      	mov	r3, r7
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	781b      	ldrb	r3, [r3, #0]
 8005bf4:	011a      	lsls	r2, r3, #4
 8005bf6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8005bfa:	4413      	add	r3, r2
 8005bfc:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005c00:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005c04:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d116      	bne.n	8005c3a <USB_EPStartXfer+0xfde>
 8005c0c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005c10:	881b      	ldrh	r3, [r3, #0]
 8005c12:	b29b      	uxth	r3, r3
 8005c14:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005c18:	b29a      	uxth	r2, r3
 8005c1a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005c1e:	801a      	strh	r2, [r3, #0]
 8005c20:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005c24:	881b      	ldrh	r3, [r3, #0]
 8005c26:	b29b      	uxth	r3, r3
 8005c28:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005c2c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005c30:	b29a      	uxth	r2, r3
 8005c32:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005c36:	801a      	strh	r2, [r3, #0]
 8005c38:	e05f      	b.n	8005cfa <USB_EPStartXfer+0x109e>
 8005c3a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005c3e:	2b3e      	cmp	r3, #62	; 0x3e
 8005c40:	d818      	bhi.n	8005c74 <USB_EPStartXfer+0x1018>
 8005c42:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005c46:	085b      	lsrs	r3, r3, #1
 8005c48:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005c4c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005c50:	f003 0301 	and.w	r3, r3, #1
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d004      	beq.n	8005c62 <USB_EPStartXfer+0x1006>
 8005c58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005c5c:	3301      	adds	r3, #1
 8005c5e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005c62:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005c66:	b29b      	uxth	r3, r3
 8005c68:	029b      	lsls	r3, r3, #10
 8005c6a:	b29a      	uxth	r2, r3
 8005c6c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005c70:	801a      	strh	r2, [r3, #0]
 8005c72:	e042      	b.n	8005cfa <USB_EPStartXfer+0x109e>
 8005c74:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005c78:	095b      	lsrs	r3, r3, #5
 8005c7a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005c7e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005c82:	f003 031f 	and.w	r3, r3, #31
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d104      	bne.n	8005c94 <USB_EPStartXfer+0x1038>
 8005c8a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005c8e:	3b01      	subs	r3, #1
 8005c90:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005c94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005c98:	b29b      	uxth	r3, r3
 8005c9a:	029b      	lsls	r3, r3, #10
 8005c9c:	b29b      	uxth	r3, r3
 8005c9e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ca2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005ca6:	b29a      	uxth	r2, r3
 8005ca8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005cac:	801a      	strh	r2, [r3, #0]
 8005cae:	e024      	b.n	8005cfa <USB_EPStartXfer+0x109e>
 8005cb0:	463b      	mov	r3, r7
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	785b      	ldrb	r3, [r3, #1]
 8005cb6:	2b01      	cmp	r3, #1
 8005cb8:	d11f      	bne.n	8005cfa <USB_EPStartXfer+0x109e>
 8005cba:	1d3b      	adds	r3, r7, #4
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005cc2:	1d3b      	adds	r3, r7, #4
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005cca:	b29b      	uxth	r3, r3
 8005ccc:	461a      	mov	r2, r3
 8005cce:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005cd2:	4413      	add	r3, r2
 8005cd4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005cd8:	463b      	mov	r3, r7
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	781b      	ldrb	r3, [r3, #0]
 8005cde:	011a      	lsls	r2, r3, #4
 8005ce0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005ce4:	4413      	add	r3, r2
 8005ce6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005cea:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8005cee:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005cf2:	b29a      	uxth	r2, r3
 8005cf4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005cf8:	801a      	strh	r2, [r3, #0]
 8005cfa:	1d3b      	adds	r3, r7, #4
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005d02:	463b      	mov	r3, r7
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	785b      	ldrb	r3, [r3, #1]
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d16f      	bne.n	8005dec <USB_EPStartXfer+0x1190>
 8005d0c:	1d3b      	adds	r3, r7, #4
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005d14:	1d3b      	adds	r3, r7, #4
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005d1c:	b29b      	uxth	r3, r3
 8005d1e:	461a      	mov	r2, r3
 8005d20:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005d24:	4413      	add	r3, r2
 8005d26:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005d2a:	463b      	mov	r3, r7
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	781b      	ldrb	r3, [r3, #0]
 8005d30:	011a      	lsls	r2, r3, #4
 8005d32:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005d36:	4413      	add	r3, r2
 8005d38:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005d3c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8005d40:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d116      	bne.n	8005d76 <USB_EPStartXfer+0x111a>
 8005d48:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005d4c:	881b      	ldrh	r3, [r3, #0]
 8005d4e:	b29b      	uxth	r3, r3
 8005d50:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005d54:	b29a      	uxth	r2, r3
 8005d56:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005d5a:	801a      	strh	r2, [r3, #0]
 8005d5c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005d60:	881b      	ldrh	r3, [r3, #0]
 8005d62:	b29b      	uxth	r3, r3
 8005d64:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d68:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d6c:	b29a      	uxth	r2, r3
 8005d6e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005d72:	801a      	strh	r2, [r3, #0]
 8005d74:	e05e      	b.n	8005e34 <USB_EPStartXfer+0x11d8>
 8005d76:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005d7a:	2b3e      	cmp	r3, #62	; 0x3e
 8005d7c:	d818      	bhi.n	8005db0 <USB_EPStartXfer+0x1154>
 8005d7e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005d82:	085b      	lsrs	r3, r3, #1
 8005d84:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005d88:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005d8c:	f003 0301 	and.w	r3, r3, #1
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d004      	beq.n	8005d9e <USB_EPStartXfer+0x1142>
 8005d94:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005d98:	3301      	adds	r3, #1
 8005d9a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005d9e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005da2:	b29b      	uxth	r3, r3
 8005da4:	029b      	lsls	r3, r3, #10
 8005da6:	b29a      	uxth	r2, r3
 8005da8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005dac:	801a      	strh	r2, [r3, #0]
 8005dae:	e041      	b.n	8005e34 <USB_EPStartXfer+0x11d8>
 8005db0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005db4:	095b      	lsrs	r3, r3, #5
 8005db6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005dba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005dbe:	f003 031f 	and.w	r3, r3, #31
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d104      	bne.n	8005dd0 <USB_EPStartXfer+0x1174>
 8005dc6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005dca:	3b01      	subs	r3, #1
 8005dcc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005dd0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005dd4:	b29b      	uxth	r3, r3
 8005dd6:	029b      	lsls	r3, r3, #10
 8005dd8:	b29b      	uxth	r3, r3
 8005dda:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005dde:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005de2:	b29a      	uxth	r2, r3
 8005de4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005de8:	801a      	strh	r2, [r3, #0]
 8005dea:	e023      	b.n	8005e34 <USB_EPStartXfer+0x11d8>
 8005dec:	463b      	mov	r3, r7
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	785b      	ldrb	r3, [r3, #1]
 8005df2:	2b01      	cmp	r3, #1
 8005df4:	d11e      	bne.n	8005e34 <USB_EPStartXfer+0x11d8>
 8005df6:	1d3b      	adds	r3, r7, #4
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005dfe:	b29b      	uxth	r3, r3
 8005e00:	461a      	mov	r2, r3
 8005e02:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005e06:	4413      	add	r3, r2
 8005e08:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005e0c:	463b      	mov	r3, r7
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	781b      	ldrb	r3, [r3, #0]
 8005e12:	011a      	lsls	r2, r3, #4
 8005e14:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005e18:	4413      	add	r3, r2
 8005e1a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005e1e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005e22:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005e26:	b29a      	uxth	r2, r3
 8005e28:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005e2c:	801a      	strh	r2, [r3, #0]
 8005e2e:	e001      	b.n	8005e34 <USB_EPStartXfer+0x11d8>
      }
      else
      {
        return HAL_ERROR;
 8005e30:	2301      	movs	r3, #1
 8005e32:	e02e      	b.n	8005e92 <USB_EPStartXfer+0x1236>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005e34:	1d3b      	adds	r3, r7, #4
 8005e36:	681a      	ldr	r2, [r3, #0]
 8005e38:	463b      	mov	r3, r7
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	781b      	ldrb	r3, [r3, #0]
 8005e3e:	009b      	lsls	r3, r3, #2
 8005e40:	4413      	add	r3, r2
 8005e42:	881b      	ldrh	r3, [r3, #0]
 8005e44:	b29b      	uxth	r3, r3
 8005e46:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005e4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e4e:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8005e52:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8005e56:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005e5a:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8005e5e:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8005e62:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005e66:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8005e6a:	1d3b      	adds	r3, r7, #4
 8005e6c:	681a      	ldr	r2, [r3, #0]
 8005e6e:	463b      	mov	r3, r7
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	781b      	ldrb	r3, [r3, #0]
 8005e74:	009b      	lsls	r3, r3, #2
 8005e76:	441a      	add	r2, r3
 8005e78:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8005e7c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e80:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e84:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e8c:	b29b      	uxth	r3, r3
 8005e8e:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8005e90:	2300      	movs	r3, #0
}
 8005e92:	4618      	mov	r0, r3
 8005e94:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8005e98:	46bd      	mov	sp, r7
 8005e9a:	bd80      	pop	{r7, pc}

08005e9c <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005e9c:	b480      	push	{r7}
 8005e9e:	b085      	sub	sp, #20
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	6078      	str	r0, [r7, #4]
 8005ea4:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8005ea6:	683b      	ldr	r3, [r7, #0]
 8005ea8:	785b      	ldrb	r3, [r3, #1]
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d020      	beq.n	8005ef0 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8005eae:	687a      	ldr	r2, [r7, #4]
 8005eb0:	683b      	ldr	r3, [r7, #0]
 8005eb2:	781b      	ldrb	r3, [r3, #0]
 8005eb4:	009b      	lsls	r3, r3, #2
 8005eb6:	4413      	add	r3, r2
 8005eb8:	881b      	ldrh	r3, [r3, #0]
 8005eba:	b29b      	uxth	r3, r3
 8005ebc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ec0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005ec4:	81bb      	strh	r3, [r7, #12]
 8005ec6:	89bb      	ldrh	r3, [r7, #12]
 8005ec8:	f083 0310 	eor.w	r3, r3, #16
 8005ecc:	81bb      	strh	r3, [r7, #12]
 8005ece:	687a      	ldr	r2, [r7, #4]
 8005ed0:	683b      	ldr	r3, [r7, #0]
 8005ed2:	781b      	ldrb	r3, [r3, #0]
 8005ed4:	009b      	lsls	r3, r3, #2
 8005ed6:	441a      	add	r2, r3
 8005ed8:	89bb      	ldrh	r3, [r7, #12]
 8005eda:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005ede:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005ee2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005ee6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005eea:	b29b      	uxth	r3, r3
 8005eec:	8013      	strh	r3, [r2, #0]
 8005eee:	e01f      	b.n	8005f30 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8005ef0:	687a      	ldr	r2, [r7, #4]
 8005ef2:	683b      	ldr	r3, [r7, #0]
 8005ef4:	781b      	ldrb	r3, [r3, #0]
 8005ef6:	009b      	lsls	r3, r3, #2
 8005ef8:	4413      	add	r3, r2
 8005efa:	881b      	ldrh	r3, [r3, #0]
 8005efc:	b29b      	uxth	r3, r3
 8005efe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005f02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f06:	81fb      	strh	r3, [r7, #14]
 8005f08:	89fb      	ldrh	r3, [r7, #14]
 8005f0a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005f0e:	81fb      	strh	r3, [r7, #14]
 8005f10:	687a      	ldr	r2, [r7, #4]
 8005f12:	683b      	ldr	r3, [r7, #0]
 8005f14:	781b      	ldrb	r3, [r3, #0]
 8005f16:	009b      	lsls	r3, r3, #2
 8005f18:	441a      	add	r2, r3
 8005f1a:	89fb      	ldrh	r3, [r7, #14]
 8005f1c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f20:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f24:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f2c:	b29b      	uxth	r3, r3
 8005f2e:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8005f30:	2300      	movs	r3, #0
}
 8005f32:	4618      	mov	r0, r3
 8005f34:	3714      	adds	r7, #20
 8005f36:	46bd      	mov	sp, r7
 8005f38:	bc80      	pop	{r7}
 8005f3a:	4770      	bx	lr

08005f3c <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005f3c:	b480      	push	{r7}
 8005f3e:	b087      	sub	sp, #28
 8005f40:	af00      	add	r7, sp, #0
 8005f42:	6078      	str	r0, [r7, #4]
 8005f44:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8005f46:	683b      	ldr	r3, [r7, #0]
 8005f48:	7b1b      	ldrb	r3, [r3, #12]
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	f040 809d 	bne.w	800608a <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8005f50:	683b      	ldr	r3, [r7, #0]
 8005f52:	785b      	ldrb	r3, [r3, #1]
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d04c      	beq.n	8005ff2 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005f58:	687a      	ldr	r2, [r7, #4]
 8005f5a:	683b      	ldr	r3, [r7, #0]
 8005f5c:	781b      	ldrb	r3, [r3, #0]
 8005f5e:	009b      	lsls	r3, r3, #2
 8005f60:	4413      	add	r3, r2
 8005f62:	881b      	ldrh	r3, [r3, #0]
 8005f64:	823b      	strh	r3, [r7, #16]
 8005f66:	8a3b      	ldrh	r3, [r7, #16]
 8005f68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d01b      	beq.n	8005fa8 <USB_EPClearStall+0x6c>
 8005f70:	687a      	ldr	r2, [r7, #4]
 8005f72:	683b      	ldr	r3, [r7, #0]
 8005f74:	781b      	ldrb	r3, [r3, #0]
 8005f76:	009b      	lsls	r3, r3, #2
 8005f78:	4413      	add	r3, r2
 8005f7a:	881b      	ldrh	r3, [r3, #0]
 8005f7c:	b29b      	uxth	r3, r3
 8005f7e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f86:	81fb      	strh	r3, [r7, #14]
 8005f88:	687a      	ldr	r2, [r7, #4]
 8005f8a:	683b      	ldr	r3, [r7, #0]
 8005f8c:	781b      	ldrb	r3, [r3, #0]
 8005f8e:	009b      	lsls	r3, r3, #2
 8005f90:	441a      	add	r2, r3
 8005f92:	89fb      	ldrh	r3, [r7, #14]
 8005f94:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f98:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f9c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005fa0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005fa4:	b29b      	uxth	r3, r3
 8005fa6:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005fa8:	683b      	ldr	r3, [r7, #0]
 8005faa:	78db      	ldrb	r3, [r3, #3]
 8005fac:	2b01      	cmp	r3, #1
 8005fae:	d06c      	beq.n	800608a <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005fb0:	687a      	ldr	r2, [r7, #4]
 8005fb2:	683b      	ldr	r3, [r7, #0]
 8005fb4:	781b      	ldrb	r3, [r3, #0]
 8005fb6:	009b      	lsls	r3, r3, #2
 8005fb8:	4413      	add	r3, r2
 8005fba:	881b      	ldrh	r3, [r3, #0]
 8005fbc:	b29b      	uxth	r3, r3
 8005fbe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005fc2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005fc6:	81bb      	strh	r3, [r7, #12]
 8005fc8:	89bb      	ldrh	r3, [r7, #12]
 8005fca:	f083 0320 	eor.w	r3, r3, #32
 8005fce:	81bb      	strh	r3, [r7, #12]
 8005fd0:	687a      	ldr	r2, [r7, #4]
 8005fd2:	683b      	ldr	r3, [r7, #0]
 8005fd4:	781b      	ldrb	r3, [r3, #0]
 8005fd6:	009b      	lsls	r3, r3, #2
 8005fd8:	441a      	add	r2, r3
 8005fda:	89bb      	ldrh	r3, [r7, #12]
 8005fdc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005fe0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005fe4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005fe8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005fec:	b29b      	uxth	r3, r3
 8005fee:	8013      	strh	r3, [r2, #0]
 8005ff0:	e04b      	b.n	800608a <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005ff2:	687a      	ldr	r2, [r7, #4]
 8005ff4:	683b      	ldr	r3, [r7, #0]
 8005ff6:	781b      	ldrb	r3, [r3, #0]
 8005ff8:	009b      	lsls	r3, r3, #2
 8005ffa:	4413      	add	r3, r2
 8005ffc:	881b      	ldrh	r3, [r3, #0]
 8005ffe:	82fb      	strh	r3, [r7, #22]
 8006000:	8afb      	ldrh	r3, [r7, #22]
 8006002:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006006:	2b00      	cmp	r3, #0
 8006008:	d01b      	beq.n	8006042 <USB_EPClearStall+0x106>
 800600a:	687a      	ldr	r2, [r7, #4]
 800600c:	683b      	ldr	r3, [r7, #0]
 800600e:	781b      	ldrb	r3, [r3, #0]
 8006010:	009b      	lsls	r3, r3, #2
 8006012:	4413      	add	r3, r2
 8006014:	881b      	ldrh	r3, [r3, #0]
 8006016:	b29b      	uxth	r3, r3
 8006018:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800601c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006020:	82bb      	strh	r3, [r7, #20]
 8006022:	687a      	ldr	r2, [r7, #4]
 8006024:	683b      	ldr	r3, [r7, #0]
 8006026:	781b      	ldrb	r3, [r3, #0]
 8006028:	009b      	lsls	r3, r3, #2
 800602a:	441a      	add	r2, r3
 800602c:	8abb      	ldrh	r3, [r7, #20]
 800602e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006032:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006036:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800603a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800603e:	b29b      	uxth	r3, r3
 8006040:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006042:	687a      	ldr	r2, [r7, #4]
 8006044:	683b      	ldr	r3, [r7, #0]
 8006046:	781b      	ldrb	r3, [r3, #0]
 8006048:	009b      	lsls	r3, r3, #2
 800604a:	4413      	add	r3, r2
 800604c:	881b      	ldrh	r3, [r3, #0]
 800604e:	b29b      	uxth	r3, r3
 8006050:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006054:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006058:	827b      	strh	r3, [r7, #18]
 800605a:	8a7b      	ldrh	r3, [r7, #18]
 800605c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006060:	827b      	strh	r3, [r7, #18]
 8006062:	8a7b      	ldrh	r3, [r7, #18]
 8006064:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006068:	827b      	strh	r3, [r7, #18]
 800606a:	687a      	ldr	r2, [r7, #4]
 800606c:	683b      	ldr	r3, [r7, #0]
 800606e:	781b      	ldrb	r3, [r3, #0]
 8006070:	009b      	lsls	r3, r3, #2
 8006072:	441a      	add	r2, r3
 8006074:	8a7b      	ldrh	r3, [r7, #18]
 8006076:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800607a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800607e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006082:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006086:	b29b      	uxth	r3, r3
 8006088:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800608a:	2300      	movs	r3, #0
}
 800608c:	4618      	mov	r0, r3
 800608e:	371c      	adds	r7, #28
 8006090:	46bd      	mov	sp, r7
 8006092:	bc80      	pop	{r7}
 8006094:	4770      	bx	lr

08006096 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8006096:	b480      	push	{r7}
 8006098:	b083      	sub	sp, #12
 800609a:	af00      	add	r7, sp, #0
 800609c:	6078      	str	r0, [r7, #4]
 800609e:	460b      	mov	r3, r1
 80060a0:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 80060a2:	78fb      	ldrb	r3, [r7, #3]
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d103      	bne.n	80060b0 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	2280      	movs	r2, #128	; 0x80
 80060ac:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80060b0:	2300      	movs	r3, #0
}
 80060b2:	4618      	mov	r0, r3
 80060b4:	370c      	adds	r7, #12
 80060b6:	46bd      	mov	sp, r7
 80060b8:	bc80      	pop	{r7}
 80060ba:	4770      	bx	lr

080060bc <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 80060bc:	b480      	push	{r7}
 80060be:	b083      	sub	sp, #12
 80060c0:	af00      	add	r7, sp, #0
 80060c2:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80060c4:	2300      	movs	r3, #0
}
 80060c6:	4618      	mov	r0, r3
 80060c8:	370c      	adds	r7, #12
 80060ca:	46bd      	mov	sp, r7
 80060cc:	bc80      	pop	{r7}
 80060ce:	4770      	bx	lr

080060d0 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 80060d0:	b480      	push	{r7}
 80060d2:	b083      	sub	sp, #12
 80060d4:	af00      	add	r7, sp, #0
 80060d6:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80060d8:	2300      	movs	r3, #0
}
 80060da:	4618      	mov	r0, r3
 80060dc:	370c      	adds	r7, #12
 80060de:	46bd      	mov	sp, r7
 80060e0:	bc80      	pop	{r7}
 80060e2:	4770      	bx	lr

080060e4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 80060e4:	b480      	push	{r7}
 80060e6:	b085      	sub	sp, #20
 80060e8:	af00      	add	r7, sp, #0
 80060ea:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80060f2:	b29b      	uxth	r3, r3
 80060f4:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 80060f6:	68fb      	ldr	r3, [r7, #12]
}
 80060f8:	4618      	mov	r0, r3
 80060fa:	3714      	adds	r7, #20
 80060fc:	46bd      	mov	sp, r7
 80060fe:	bc80      	pop	{r7}
 8006100:	4770      	bx	lr

08006102 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8006102:	b480      	push	{r7}
 8006104:	b083      	sub	sp, #12
 8006106:	af00      	add	r7, sp, #0
 8006108:	6078      	str	r0, [r7, #4]
 800610a:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800610c:	2300      	movs	r3, #0
}
 800610e:	4618      	mov	r0, r3
 8006110:	370c      	adds	r7, #12
 8006112:	46bd      	mov	sp, r7
 8006114:	bc80      	pop	{r7}
 8006116:	4770      	bx	lr

08006118 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006118:	b480      	push	{r7}
 800611a:	b08d      	sub	sp, #52	; 0x34
 800611c:	af00      	add	r7, sp, #0
 800611e:	60f8      	str	r0, [r7, #12]
 8006120:	60b9      	str	r1, [r7, #8]
 8006122:	4611      	mov	r1, r2
 8006124:	461a      	mov	r2, r3
 8006126:	460b      	mov	r3, r1
 8006128:	80fb      	strh	r3, [r7, #6]
 800612a:	4613      	mov	r3, r2
 800612c:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800612e:	88bb      	ldrh	r3, [r7, #4]
 8006130:	3301      	adds	r3, #1
 8006132:	085b      	lsrs	r3, r3, #1
 8006134:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800613a:	68bb      	ldr	r3, [r7, #8]
 800613c:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800613e:	88fb      	ldrh	r3, [r7, #6]
 8006140:	005a      	lsls	r2, r3, #1
 8006142:	69fb      	ldr	r3, [r7, #28]
 8006144:	4413      	add	r3, r2
 8006146:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800614a:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 800614c:	6a3b      	ldr	r3, [r7, #32]
 800614e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006150:	e01e      	b.n	8006190 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8006152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006154:	781b      	ldrb	r3, [r3, #0]
 8006156:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8006158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800615a:	3301      	adds	r3, #1
 800615c:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 800615e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006160:	781b      	ldrb	r3, [r3, #0]
 8006162:	b29b      	uxth	r3, r3
 8006164:	021b      	lsls	r3, r3, #8
 8006166:	b29b      	uxth	r3, r3
 8006168:	461a      	mov	r2, r3
 800616a:	69bb      	ldr	r3, [r7, #24]
 800616c:	4313      	orrs	r3, r2
 800616e:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8006170:	697b      	ldr	r3, [r7, #20]
 8006172:	b29a      	uxth	r2, r3
 8006174:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006176:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8006178:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800617a:	3302      	adds	r3, #2
 800617c:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 800617e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006180:	3302      	adds	r3, #2
 8006182:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 8006184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006186:	3301      	adds	r3, #1
 8006188:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 800618a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800618c:	3b01      	subs	r3, #1
 800618e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006190:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006192:	2b00      	cmp	r3, #0
 8006194:	d1dd      	bne.n	8006152 <USB_WritePMA+0x3a>
  }
}
 8006196:	bf00      	nop
 8006198:	3734      	adds	r7, #52	; 0x34
 800619a:	46bd      	mov	sp, r7
 800619c:	bc80      	pop	{r7}
 800619e:	4770      	bx	lr

080061a0 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80061a0:	b480      	push	{r7}
 80061a2:	b08b      	sub	sp, #44	; 0x2c
 80061a4:	af00      	add	r7, sp, #0
 80061a6:	60f8      	str	r0, [r7, #12]
 80061a8:	60b9      	str	r1, [r7, #8]
 80061aa:	4611      	mov	r1, r2
 80061ac:	461a      	mov	r2, r3
 80061ae:	460b      	mov	r3, r1
 80061b0:	80fb      	strh	r3, [r7, #6]
 80061b2:	4613      	mov	r3, r2
 80061b4:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 80061b6:	88bb      	ldrh	r3, [r7, #4]
 80061b8:	085b      	lsrs	r3, r3, #1
 80061ba:	b29b      	uxth	r3, r3
 80061bc:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80061c2:	68bb      	ldr	r3, [r7, #8]
 80061c4:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80061c6:	88fb      	ldrh	r3, [r7, #6]
 80061c8:	005a      	lsls	r2, r3, #1
 80061ca:	697b      	ldr	r3, [r7, #20]
 80061cc:	4413      	add	r3, r2
 80061ce:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80061d2:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 80061d4:	69bb      	ldr	r3, [r7, #24]
 80061d6:	627b      	str	r3, [r7, #36]	; 0x24
 80061d8:	e01b      	b.n	8006212 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 80061da:	6a3b      	ldr	r3, [r7, #32]
 80061dc:	881b      	ldrh	r3, [r3, #0]
 80061de:	b29b      	uxth	r3, r3
 80061e0:	613b      	str	r3, [r7, #16]
    pdwVal++;
 80061e2:	6a3b      	ldr	r3, [r7, #32]
 80061e4:	3302      	adds	r3, #2
 80061e6:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80061e8:	693b      	ldr	r3, [r7, #16]
 80061ea:	b2da      	uxtb	r2, r3
 80061ec:	69fb      	ldr	r3, [r7, #28]
 80061ee:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80061f0:	69fb      	ldr	r3, [r7, #28]
 80061f2:	3301      	adds	r3, #1
 80061f4:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 80061f6:	693b      	ldr	r3, [r7, #16]
 80061f8:	0a1b      	lsrs	r3, r3, #8
 80061fa:	b2da      	uxtb	r2, r3
 80061fc:	69fb      	ldr	r3, [r7, #28]
 80061fe:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006200:	69fb      	ldr	r3, [r7, #28]
 8006202:	3301      	adds	r3, #1
 8006204:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8006206:	6a3b      	ldr	r3, [r7, #32]
 8006208:	3302      	adds	r3, #2
 800620a:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 800620c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800620e:	3b01      	subs	r3, #1
 8006210:	627b      	str	r3, [r7, #36]	; 0x24
 8006212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006214:	2b00      	cmp	r3, #0
 8006216:	d1e0      	bne.n	80061da <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8006218:	88bb      	ldrh	r3, [r7, #4]
 800621a:	f003 0301 	and.w	r3, r3, #1
 800621e:	b29b      	uxth	r3, r3
 8006220:	2b00      	cmp	r3, #0
 8006222:	d007      	beq.n	8006234 <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 8006224:	6a3b      	ldr	r3, [r7, #32]
 8006226:	881b      	ldrh	r3, [r3, #0]
 8006228:	b29b      	uxth	r3, r3
 800622a:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800622c:	693b      	ldr	r3, [r7, #16]
 800622e:	b2da      	uxtb	r2, r3
 8006230:	69fb      	ldr	r3, [r7, #28]
 8006232:	701a      	strb	r2, [r3, #0]
  }
}
 8006234:	bf00      	nop
 8006236:	372c      	adds	r7, #44	; 0x2c
 8006238:	46bd      	mov	sp, r7
 800623a:	bc80      	pop	{r7}
 800623c:	4770      	bx	lr

0800623e <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800623e:	b580      	push	{r7, lr}
 8006240:	b084      	sub	sp, #16
 8006242:	af00      	add	r7, sp, #0
 8006244:	6078      	str	r0, [r7, #4]
 8006246:	460b      	mov	r3, r1
 8006248:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800624a:	2300      	movs	r3, #0
 800624c:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	7c1b      	ldrb	r3, [r3, #16]
 8006252:	2b00      	cmp	r3, #0
 8006254:	d115      	bne.n	8006282 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006256:	f44f 7300 	mov.w	r3, #512	; 0x200
 800625a:	2202      	movs	r2, #2
 800625c:	2181      	movs	r1, #129	; 0x81
 800625e:	6878      	ldr	r0, [r7, #4]
 8006260:	f001 fe81 	bl	8007f66 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	2201      	movs	r2, #1
 8006268:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800626a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800626e:	2202      	movs	r2, #2
 8006270:	2101      	movs	r1, #1
 8006272:	6878      	ldr	r0, [r7, #4]
 8006274:	f001 fe77 	bl	8007f66 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	2201      	movs	r2, #1
 800627c:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8006280:	e012      	b.n	80062a8 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006282:	2340      	movs	r3, #64	; 0x40
 8006284:	2202      	movs	r2, #2
 8006286:	2181      	movs	r1, #129	; 0x81
 8006288:	6878      	ldr	r0, [r7, #4]
 800628a:	f001 fe6c 	bl	8007f66 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	2201      	movs	r2, #1
 8006292:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006294:	2340      	movs	r3, #64	; 0x40
 8006296:	2202      	movs	r2, #2
 8006298:	2101      	movs	r1, #1
 800629a:	6878      	ldr	r0, [r7, #4]
 800629c:	f001 fe63 	bl	8007f66 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	2201      	movs	r2, #1
 80062a4:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80062a8:	2308      	movs	r3, #8
 80062aa:	2203      	movs	r2, #3
 80062ac:	2182      	movs	r1, #130	; 0x82
 80062ae:	6878      	ldr	r0, [r7, #4]
 80062b0:	f001 fe59 	bl	8007f66 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	2201      	movs	r2, #1
 80062b8:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80062ba:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80062be:	f001 ff79 	bl	80081b4 <USBD_static_malloc>
 80062c2:	4602      	mov	r2, r0
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d102      	bne.n	80062da <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 80062d4:	2301      	movs	r3, #1
 80062d6:	73fb      	strb	r3, [r7, #15]
 80062d8:	e026      	b.n	8006328 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80062e0:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 80062ec:	68bb      	ldr	r3, [r7, #8]
 80062ee:	2200      	movs	r2, #0
 80062f0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 80062f4:	68bb      	ldr	r3, [r7, #8]
 80062f6:	2200      	movs	r2, #0
 80062f8:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	7c1b      	ldrb	r3, [r3, #16]
 8006300:	2b00      	cmp	r3, #0
 8006302:	d109      	bne.n	8006318 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006304:	68bb      	ldr	r3, [r7, #8]
 8006306:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800630a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800630e:	2101      	movs	r1, #1
 8006310:	6878      	ldr	r0, [r7, #4]
 8006312:	f001 ff19 	bl	8008148 <USBD_LL_PrepareReceive>
 8006316:	e007      	b.n	8006328 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006318:	68bb      	ldr	r3, [r7, #8]
 800631a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800631e:	2340      	movs	r3, #64	; 0x40
 8006320:	2101      	movs	r1, #1
 8006322:	6878      	ldr	r0, [r7, #4]
 8006324:	f001 ff10 	bl	8008148 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8006328:	7bfb      	ldrb	r3, [r7, #15]
}
 800632a:	4618      	mov	r0, r3
 800632c:	3710      	adds	r7, #16
 800632e:	46bd      	mov	sp, r7
 8006330:	bd80      	pop	{r7, pc}

08006332 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006332:	b580      	push	{r7, lr}
 8006334:	b084      	sub	sp, #16
 8006336:	af00      	add	r7, sp, #0
 8006338:	6078      	str	r0, [r7, #4]
 800633a:	460b      	mov	r3, r1
 800633c:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800633e:	2300      	movs	r3, #0
 8006340:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8006342:	2181      	movs	r1, #129	; 0x81
 8006344:	6878      	ldr	r0, [r7, #4]
 8006346:	f001 fe34 	bl	8007fb2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	2200      	movs	r2, #0
 800634e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8006350:	2101      	movs	r1, #1
 8006352:	6878      	ldr	r0, [r7, #4]
 8006354:	f001 fe2d 	bl	8007fb2 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	2200      	movs	r2, #0
 800635c:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8006360:	2182      	movs	r1, #130	; 0x82
 8006362:	6878      	ldr	r0, [r7, #4]
 8006364:	f001 fe25 	bl	8007fb2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	2200      	movs	r2, #0
 800636c:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006374:	2b00      	cmp	r3, #0
 8006376:	d00e      	beq.n	8006396 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800637e:	685b      	ldr	r3, [r3, #4]
 8006380:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006388:	4618      	mov	r0, r3
 800638a:	f001 ff1f 	bl	80081cc <USBD_static_free>
    pdev->pClassData = NULL;
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	2200      	movs	r2, #0
 8006392:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8006396:	7bfb      	ldrb	r3, [r7, #15]
}
 8006398:	4618      	mov	r0, r3
 800639a:	3710      	adds	r7, #16
 800639c:	46bd      	mov	sp, r7
 800639e:	bd80      	pop	{r7, pc}

080063a0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80063a0:	b580      	push	{r7, lr}
 80063a2:	b086      	sub	sp, #24
 80063a4:	af00      	add	r7, sp, #0
 80063a6:	6078      	str	r0, [r7, #4]
 80063a8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80063b0:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 80063b2:	2300      	movs	r3, #0
 80063b4:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 80063b6:	2300      	movs	r3, #0
 80063b8:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 80063ba:	2300      	movs	r3, #0
 80063bc:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80063be:	683b      	ldr	r3, [r7, #0]
 80063c0:	781b      	ldrb	r3, [r3, #0]
 80063c2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d039      	beq.n	800643e <USBD_CDC_Setup+0x9e>
 80063ca:	2b20      	cmp	r3, #32
 80063cc:	d17c      	bne.n	80064c8 <USBD_CDC_Setup+0x128>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 80063ce:	683b      	ldr	r3, [r7, #0]
 80063d0:	88db      	ldrh	r3, [r3, #6]
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d029      	beq.n	800642a <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 80063d6:	683b      	ldr	r3, [r7, #0]
 80063d8:	781b      	ldrb	r3, [r3, #0]
 80063da:	b25b      	sxtb	r3, r3
 80063dc:	2b00      	cmp	r3, #0
 80063de:	da11      	bge.n	8006404 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80063e6:	689b      	ldr	r3, [r3, #8]
 80063e8:	683a      	ldr	r2, [r7, #0]
 80063ea:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 80063ec:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80063ee:	683a      	ldr	r2, [r7, #0]
 80063f0:	88d2      	ldrh	r2, [r2, #6]
 80063f2:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80063f4:	6939      	ldr	r1, [r7, #16]
 80063f6:	683b      	ldr	r3, [r7, #0]
 80063f8:	88db      	ldrh	r3, [r3, #6]
 80063fa:	461a      	mov	r2, r3
 80063fc:	6878      	ldr	r0, [r7, #4]
 80063fe:	f001 f9f9 	bl	80077f4 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8006402:	e068      	b.n	80064d6 <USBD_CDC_Setup+0x136>
          hcdc->CmdOpCode = req->bRequest;
 8006404:	683b      	ldr	r3, [r7, #0]
 8006406:	785a      	ldrb	r2, [r3, #1]
 8006408:	693b      	ldr	r3, [r7, #16]
 800640a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800640e:	683b      	ldr	r3, [r7, #0]
 8006410:	88db      	ldrh	r3, [r3, #6]
 8006412:	b2da      	uxtb	r2, r3
 8006414:	693b      	ldr	r3, [r7, #16]
 8006416:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800641a:	6939      	ldr	r1, [r7, #16]
 800641c:	683b      	ldr	r3, [r7, #0]
 800641e:	88db      	ldrh	r3, [r3, #6]
 8006420:	461a      	mov	r2, r3
 8006422:	6878      	ldr	r0, [r7, #4]
 8006424:	f001 fa14 	bl	8007850 <USBD_CtlPrepareRx>
      break;
 8006428:	e055      	b.n	80064d6 <USBD_CDC_Setup+0x136>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006430:	689b      	ldr	r3, [r3, #8]
 8006432:	683a      	ldr	r2, [r7, #0]
 8006434:	7850      	ldrb	r0, [r2, #1]
 8006436:	2200      	movs	r2, #0
 8006438:	6839      	ldr	r1, [r7, #0]
 800643a:	4798      	blx	r3
      break;
 800643c:	e04b      	b.n	80064d6 <USBD_CDC_Setup+0x136>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800643e:	683b      	ldr	r3, [r7, #0]
 8006440:	785b      	ldrb	r3, [r3, #1]
 8006442:	2b0a      	cmp	r3, #10
 8006444:	d017      	beq.n	8006476 <USBD_CDC_Setup+0xd6>
 8006446:	2b0b      	cmp	r3, #11
 8006448:	d029      	beq.n	800649e <USBD_CDC_Setup+0xfe>
 800644a:	2b00      	cmp	r3, #0
 800644c:	d133      	bne.n	80064b6 <USBD_CDC_Setup+0x116>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006454:	2b03      	cmp	r3, #3
 8006456:	d107      	bne.n	8006468 <USBD_CDC_Setup+0xc8>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8006458:	f107 030c 	add.w	r3, r7, #12
 800645c:	2202      	movs	r2, #2
 800645e:	4619      	mov	r1, r3
 8006460:	6878      	ldr	r0, [r7, #4]
 8006462:	f001 f9c7 	bl	80077f4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006466:	e02e      	b.n	80064c6 <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 8006468:	6839      	ldr	r1, [r7, #0]
 800646a:	6878      	ldr	r0, [r7, #4]
 800646c:	f001 f958 	bl	8007720 <USBD_CtlError>
            ret = USBD_FAIL;
 8006470:	2302      	movs	r3, #2
 8006472:	75fb      	strb	r3, [r7, #23]
          break;
 8006474:	e027      	b.n	80064c6 <USBD_CDC_Setup+0x126>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800647c:	2b03      	cmp	r3, #3
 800647e:	d107      	bne.n	8006490 <USBD_CDC_Setup+0xf0>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8006480:	f107 030f 	add.w	r3, r7, #15
 8006484:	2201      	movs	r2, #1
 8006486:	4619      	mov	r1, r3
 8006488:	6878      	ldr	r0, [r7, #4]
 800648a:	f001 f9b3 	bl	80077f4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800648e:	e01a      	b.n	80064c6 <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 8006490:	6839      	ldr	r1, [r7, #0]
 8006492:	6878      	ldr	r0, [r7, #4]
 8006494:	f001 f944 	bl	8007720 <USBD_CtlError>
            ret = USBD_FAIL;
 8006498:	2302      	movs	r3, #2
 800649a:	75fb      	strb	r3, [r7, #23]
          break;
 800649c:	e013      	b.n	80064c6 <USBD_CDC_Setup+0x126>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80064a4:	2b03      	cmp	r3, #3
 80064a6:	d00d      	beq.n	80064c4 <USBD_CDC_Setup+0x124>
          {
            USBD_CtlError(pdev, req);
 80064a8:	6839      	ldr	r1, [r7, #0]
 80064aa:	6878      	ldr	r0, [r7, #4]
 80064ac:	f001 f938 	bl	8007720 <USBD_CtlError>
            ret = USBD_FAIL;
 80064b0:	2302      	movs	r3, #2
 80064b2:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80064b4:	e006      	b.n	80064c4 <USBD_CDC_Setup+0x124>

        default:
          USBD_CtlError(pdev, req);
 80064b6:	6839      	ldr	r1, [r7, #0]
 80064b8:	6878      	ldr	r0, [r7, #4]
 80064ba:	f001 f931 	bl	8007720 <USBD_CtlError>
          ret = USBD_FAIL;
 80064be:	2302      	movs	r3, #2
 80064c0:	75fb      	strb	r3, [r7, #23]
          break;
 80064c2:	e000      	b.n	80064c6 <USBD_CDC_Setup+0x126>
          break;
 80064c4:	bf00      	nop
      }
      break;
 80064c6:	e006      	b.n	80064d6 <USBD_CDC_Setup+0x136>

    default:
      USBD_CtlError(pdev, req);
 80064c8:	6839      	ldr	r1, [r7, #0]
 80064ca:	6878      	ldr	r0, [r7, #4]
 80064cc:	f001 f928 	bl	8007720 <USBD_CtlError>
      ret = USBD_FAIL;
 80064d0:	2302      	movs	r3, #2
 80064d2:	75fb      	strb	r3, [r7, #23]
      break;
 80064d4:	bf00      	nop
  }

  return ret;
 80064d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80064d8:	4618      	mov	r0, r3
 80064da:	3718      	adds	r7, #24
 80064dc:	46bd      	mov	sp, r7
 80064de:	bd80      	pop	{r7, pc}

080064e0 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80064e0:	b580      	push	{r7, lr}
 80064e2:	b084      	sub	sp, #16
 80064e4:	af00      	add	r7, sp, #0
 80064e6:	6078      	str	r0, [r7, #4]
 80064e8:	460b      	mov	r3, r1
 80064ea:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80064f2:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80064fa:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006502:	2b00      	cmp	r3, #0
 8006504:	d03a      	beq.n	800657c <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8006506:	78fa      	ldrb	r2, [r7, #3]
 8006508:	6879      	ldr	r1, [r7, #4]
 800650a:	4613      	mov	r3, r2
 800650c:	009b      	lsls	r3, r3, #2
 800650e:	4413      	add	r3, r2
 8006510:	009b      	lsls	r3, r3, #2
 8006512:	440b      	add	r3, r1
 8006514:	331c      	adds	r3, #28
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	2b00      	cmp	r3, #0
 800651a:	d029      	beq.n	8006570 <USBD_CDC_DataIn+0x90>
 800651c:	78fa      	ldrb	r2, [r7, #3]
 800651e:	6879      	ldr	r1, [r7, #4]
 8006520:	4613      	mov	r3, r2
 8006522:	009b      	lsls	r3, r3, #2
 8006524:	4413      	add	r3, r2
 8006526:	009b      	lsls	r3, r3, #2
 8006528:	440b      	add	r3, r1
 800652a:	331c      	adds	r3, #28
 800652c:	681a      	ldr	r2, [r3, #0]
 800652e:	78f9      	ldrb	r1, [r7, #3]
 8006530:	68b8      	ldr	r0, [r7, #8]
 8006532:	460b      	mov	r3, r1
 8006534:	009b      	lsls	r3, r3, #2
 8006536:	440b      	add	r3, r1
 8006538:	00db      	lsls	r3, r3, #3
 800653a:	4403      	add	r3, r0
 800653c:	3338      	adds	r3, #56	; 0x38
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	fbb2 f1f3 	udiv	r1, r2, r3
 8006544:	fb03 f301 	mul.w	r3, r3, r1
 8006548:	1ad3      	subs	r3, r2, r3
 800654a:	2b00      	cmp	r3, #0
 800654c:	d110      	bne.n	8006570 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 800654e:	78fa      	ldrb	r2, [r7, #3]
 8006550:	6879      	ldr	r1, [r7, #4]
 8006552:	4613      	mov	r3, r2
 8006554:	009b      	lsls	r3, r3, #2
 8006556:	4413      	add	r3, r2
 8006558:	009b      	lsls	r3, r3, #2
 800655a:	440b      	add	r3, r1
 800655c:	331c      	adds	r3, #28
 800655e:	2200      	movs	r2, #0
 8006560:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006562:	78f9      	ldrb	r1, [r7, #3]
 8006564:	2300      	movs	r3, #0
 8006566:	2200      	movs	r2, #0
 8006568:	6878      	ldr	r0, [r7, #4]
 800656a:	f001 fdca 	bl	8008102 <USBD_LL_Transmit>
 800656e:	e003      	b.n	8006578 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	2200      	movs	r2, #0
 8006574:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8006578:	2300      	movs	r3, #0
 800657a:	e000      	b.n	800657e <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 800657c:	2302      	movs	r3, #2
  }
}
 800657e:	4618      	mov	r0, r3
 8006580:	3710      	adds	r7, #16
 8006582:	46bd      	mov	sp, r7
 8006584:	bd80      	pop	{r7, pc}

08006586 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006586:	b580      	push	{r7, lr}
 8006588:	b084      	sub	sp, #16
 800658a:	af00      	add	r7, sp, #0
 800658c:	6078      	str	r0, [r7, #4]
 800658e:	460b      	mov	r3, r1
 8006590:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006598:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800659a:	78fb      	ldrb	r3, [r7, #3]
 800659c:	4619      	mov	r1, r3
 800659e:	6878      	ldr	r0, [r7, #4]
 80065a0:	f001 fdf5 	bl	800818e <USBD_LL_GetRxDataSize>
 80065a4:	4602      	mov	r2, r0
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d00d      	beq.n	80065d2 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80065bc:	68db      	ldr	r3, [r3, #12]
 80065be:	68fa      	ldr	r2, [r7, #12]
 80065c0:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80065c4:	68fa      	ldr	r2, [r7, #12]
 80065c6:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80065ca:	4611      	mov	r1, r2
 80065cc:	4798      	blx	r3

    return USBD_OK;
 80065ce:	2300      	movs	r3, #0
 80065d0:	e000      	b.n	80065d4 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 80065d2:	2302      	movs	r3, #2
  }
}
 80065d4:	4618      	mov	r0, r3
 80065d6:	3710      	adds	r7, #16
 80065d8:	46bd      	mov	sp, r7
 80065da:	bd80      	pop	{r7, pc}

080065dc <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80065dc:	b580      	push	{r7, lr}
 80065de:	b084      	sub	sp, #16
 80065e0:	af00      	add	r7, sp, #0
 80065e2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80065ea:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d015      	beq.n	8006622 <USBD_CDC_EP0_RxReady+0x46>
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80065fc:	2bff      	cmp	r3, #255	; 0xff
 80065fe:	d010      	beq.n	8006622 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006606:	689b      	ldr	r3, [r3, #8]
 8006608:	68fa      	ldr	r2, [r7, #12]
 800660a:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 800660e:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8006610:	68fa      	ldr	r2, [r7, #12]
 8006612:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006616:	b292      	uxth	r2, r2
 8006618:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	22ff      	movs	r2, #255	; 0xff
 800661e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8006622:	2300      	movs	r3, #0
}
 8006624:	4618      	mov	r0, r3
 8006626:	3710      	adds	r7, #16
 8006628:	46bd      	mov	sp, r7
 800662a:	bd80      	pop	{r7, pc}

0800662c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800662c:	b480      	push	{r7}
 800662e:	b083      	sub	sp, #12
 8006630:	af00      	add	r7, sp, #0
 8006632:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	2243      	movs	r2, #67	; 0x43
 8006638:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800663a:	4b03      	ldr	r3, [pc, #12]	; (8006648 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800663c:	4618      	mov	r0, r3
 800663e:	370c      	adds	r7, #12
 8006640:	46bd      	mov	sp, r7
 8006642:	bc80      	pop	{r7}
 8006644:	4770      	bx	lr
 8006646:	bf00      	nop
 8006648:	20000098 	.word	0x20000098

0800664c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800664c:	b480      	push	{r7}
 800664e:	b083      	sub	sp, #12
 8006650:	af00      	add	r7, sp, #0
 8006652:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	2243      	movs	r2, #67	; 0x43
 8006658:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800665a:	4b03      	ldr	r3, [pc, #12]	; (8006668 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800665c:	4618      	mov	r0, r3
 800665e:	370c      	adds	r7, #12
 8006660:	46bd      	mov	sp, r7
 8006662:	bc80      	pop	{r7}
 8006664:	4770      	bx	lr
 8006666:	bf00      	nop
 8006668:	20000054 	.word	0x20000054

0800666c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800666c:	b480      	push	{r7}
 800666e:	b083      	sub	sp, #12
 8006670:	af00      	add	r7, sp, #0
 8006672:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	2243      	movs	r2, #67	; 0x43
 8006678:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800667a:	4b03      	ldr	r3, [pc, #12]	; (8006688 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800667c:	4618      	mov	r0, r3
 800667e:	370c      	adds	r7, #12
 8006680:	46bd      	mov	sp, r7
 8006682:	bc80      	pop	{r7}
 8006684:	4770      	bx	lr
 8006686:	bf00      	nop
 8006688:	200000dc 	.word	0x200000dc

0800668c <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800668c:	b480      	push	{r7}
 800668e:	b083      	sub	sp, #12
 8006690:	af00      	add	r7, sp, #0
 8006692:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	220a      	movs	r2, #10
 8006698:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800669a:	4b03      	ldr	r3, [pc, #12]	; (80066a8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800669c:	4618      	mov	r0, r3
 800669e:	370c      	adds	r7, #12
 80066a0:	46bd      	mov	sp, r7
 80066a2:	bc80      	pop	{r7}
 80066a4:	4770      	bx	lr
 80066a6:	bf00      	nop
 80066a8:	20000010 	.word	0x20000010

080066ac <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 80066ac:	b480      	push	{r7}
 80066ae:	b085      	sub	sp, #20
 80066b0:	af00      	add	r7, sp, #0
 80066b2:	6078      	str	r0, [r7, #4]
 80066b4:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 80066b6:	2302      	movs	r3, #2
 80066b8:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 80066ba:	683b      	ldr	r3, [r7, #0]
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d005      	beq.n	80066cc <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	683a      	ldr	r2, [r7, #0]
 80066c4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 80066c8:	2300      	movs	r3, #0
 80066ca:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80066cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80066ce:	4618      	mov	r0, r3
 80066d0:	3714      	adds	r7, #20
 80066d2:	46bd      	mov	sp, r7
 80066d4:	bc80      	pop	{r7}
 80066d6:	4770      	bx	lr

080066d8 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 80066d8:	b480      	push	{r7}
 80066da:	b087      	sub	sp, #28
 80066dc:	af00      	add	r7, sp, #0
 80066de:	60f8      	str	r0, [r7, #12]
 80066e0:	60b9      	str	r1, [r7, #8]
 80066e2:	4613      	mov	r3, r2
 80066e4:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80066ec:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 80066ee:	697b      	ldr	r3, [r7, #20]
 80066f0:	68ba      	ldr	r2, [r7, #8]
 80066f2:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80066f6:	88fa      	ldrh	r2, [r7, #6]
 80066f8:	697b      	ldr	r3, [r7, #20]
 80066fa:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 80066fe:	2300      	movs	r3, #0
}
 8006700:	4618      	mov	r0, r3
 8006702:	371c      	adds	r7, #28
 8006704:	46bd      	mov	sp, r7
 8006706:	bc80      	pop	{r7}
 8006708:	4770      	bx	lr

0800670a <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 800670a:	b480      	push	{r7}
 800670c:	b085      	sub	sp, #20
 800670e:	af00      	add	r7, sp, #0
 8006710:	6078      	str	r0, [r7, #4]
 8006712:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800671a:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	683a      	ldr	r2, [r7, #0]
 8006720:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8006724:	2300      	movs	r3, #0
}
 8006726:	4618      	mov	r0, r3
 8006728:	3714      	adds	r7, #20
 800672a:	46bd      	mov	sp, r7
 800672c:	bc80      	pop	{r7}
 800672e:	4770      	bx	lr

08006730 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8006730:	b580      	push	{r7, lr}
 8006732:	b084      	sub	sp, #16
 8006734:	af00      	add	r7, sp, #0
 8006736:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800673e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006746:	2b00      	cmp	r3, #0
 8006748:	d01c      	beq.n	8006784 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006750:	2b00      	cmp	r3, #0
 8006752:	d115      	bne.n	8006780 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	2201      	movs	r2, #1
 8006758:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8006772:	b29b      	uxth	r3, r3
 8006774:	2181      	movs	r1, #129	; 0x81
 8006776:	6878      	ldr	r0, [r7, #4]
 8006778:	f001 fcc3 	bl	8008102 <USBD_LL_Transmit>

      return USBD_OK;
 800677c:	2300      	movs	r3, #0
 800677e:	e002      	b.n	8006786 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8006780:	2301      	movs	r3, #1
 8006782:	e000      	b.n	8006786 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8006784:	2302      	movs	r3, #2
  }
}
 8006786:	4618      	mov	r0, r3
 8006788:	3710      	adds	r7, #16
 800678a:	46bd      	mov	sp, r7
 800678c:	bd80      	pop	{r7, pc}

0800678e <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800678e:	b580      	push	{r7, lr}
 8006790:	b084      	sub	sp, #16
 8006792:	af00      	add	r7, sp, #0
 8006794:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800679c:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d017      	beq.n	80067d8 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	7c1b      	ldrb	r3, [r3, #16]
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d109      	bne.n	80067c4 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80067b6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80067ba:	2101      	movs	r1, #1
 80067bc:	6878      	ldr	r0, [r7, #4]
 80067be:	f001 fcc3 	bl	8008148 <USBD_LL_PrepareReceive>
 80067c2:	e007      	b.n	80067d4 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80067ca:	2340      	movs	r3, #64	; 0x40
 80067cc:	2101      	movs	r1, #1
 80067ce:	6878      	ldr	r0, [r7, #4]
 80067d0:	f001 fcba 	bl	8008148 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 80067d4:	2300      	movs	r3, #0
 80067d6:	e000      	b.n	80067da <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 80067d8:	2302      	movs	r3, #2
  }
}
 80067da:	4618      	mov	r0, r3
 80067dc:	3710      	adds	r7, #16
 80067de:	46bd      	mov	sp, r7
 80067e0:	bd80      	pop	{r7, pc}

080067e2 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80067e2:	b580      	push	{r7, lr}
 80067e4:	b084      	sub	sp, #16
 80067e6:	af00      	add	r7, sp, #0
 80067e8:	60f8      	str	r0, [r7, #12]
 80067ea:	60b9      	str	r1, [r7, #8]
 80067ec:	4613      	mov	r3, r2
 80067ee:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d101      	bne.n	80067fa <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80067f6:	2302      	movs	r3, #2
 80067f8:	e01a      	b.n	8006830 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006800:	2b00      	cmp	r3, #0
 8006802:	d003      	beq.n	800680c <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	2200      	movs	r2, #0
 8006808:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800680c:	68bb      	ldr	r3, [r7, #8]
 800680e:	2b00      	cmp	r3, #0
 8006810:	d003      	beq.n	800681a <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	68ba      	ldr	r2, [r7, #8]
 8006816:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	2201      	movs	r2, #1
 800681e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	79fa      	ldrb	r2, [r7, #7]
 8006826:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8006828:	68f8      	ldr	r0, [r7, #12]
 800682a:	f001 fb27 	bl	8007e7c <USBD_LL_Init>

  return USBD_OK;
 800682e:	2300      	movs	r3, #0
}
 8006830:	4618      	mov	r0, r3
 8006832:	3710      	adds	r7, #16
 8006834:	46bd      	mov	sp, r7
 8006836:	bd80      	pop	{r7, pc}

08006838 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006838:	b480      	push	{r7}
 800683a:	b085      	sub	sp, #20
 800683c:	af00      	add	r7, sp, #0
 800683e:	6078      	str	r0, [r7, #4]
 8006840:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8006842:	2300      	movs	r3, #0
 8006844:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8006846:	683b      	ldr	r3, [r7, #0]
 8006848:	2b00      	cmp	r3, #0
 800684a:	d006      	beq.n	800685a <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	683a      	ldr	r2, [r7, #0]
 8006850:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8006854:	2300      	movs	r3, #0
 8006856:	73fb      	strb	r3, [r7, #15]
 8006858:	e001      	b.n	800685e <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800685a:	2302      	movs	r3, #2
 800685c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800685e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006860:	4618      	mov	r0, r3
 8006862:	3714      	adds	r7, #20
 8006864:	46bd      	mov	sp, r7
 8006866:	bc80      	pop	{r7}
 8006868:	4770      	bx	lr

0800686a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800686a:	b580      	push	{r7, lr}
 800686c:	b082      	sub	sp, #8
 800686e:	af00      	add	r7, sp, #0
 8006870:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8006872:	6878      	ldr	r0, [r7, #4]
 8006874:	f001 fb5c 	bl	8007f30 <USBD_LL_Start>

  return USBD_OK;
 8006878:	2300      	movs	r3, #0
}
 800687a:	4618      	mov	r0, r3
 800687c:	3708      	adds	r7, #8
 800687e:	46bd      	mov	sp, r7
 8006880:	bd80      	pop	{r7, pc}

08006882 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8006882:	b480      	push	{r7}
 8006884:	b083      	sub	sp, #12
 8006886:	af00      	add	r7, sp, #0
 8006888:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800688a:	2300      	movs	r3, #0
}
 800688c:	4618      	mov	r0, r3
 800688e:	370c      	adds	r7, #12
 8006890:	46bd      	mov	sp, r7
 8006892:	bc80      	pop	{r7}
 8006894:	4770      	bx	lr

08006896 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8006896:	b580      	push	{r7, lr}
 8006898:	b084      	sub	sp, #16
 800689a:	af00      	add	r7, sp, #0
 800689c:	6078      	str	r0, [r7, #4]
 800689e:	460b      	mov	r3, r1
 80068a0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80068a2:	2302      	movs	r3, #2
 80068a4:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d00c      	beq.n	80068ca <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	78fa      	ldrb	r2, [r7, #3]
 80068ba:	4611      	mov	r1, r2
 80068bc:	6878      	ldr	r0, [r7, #4]
 80068be:	4798      	blx	r3
 80068c0:	4603      	mov	r3, r0
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d101      	bne.n	80068ca <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 80068c6:	2300      	movs	r3, #0
 80068c8:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 80068ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80068cc:	4618      	mov	r0, r3
 80068ce:	3710      	adds	r7, #16
 80068d0:	46bd      	mov	sp, r7
 80068d2:	bd80      	pop	{r7, pc}

080068d4 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80068d4:	b580      	push	{r7, lr}
 80068d6:	b082      	sub	sp, #8
 80068d8:	af00      	add	r7, sp, #0
 80068da:	6078      	str	r0, [r7, #4]
 80068dc:	460b      	mov	r3, r1
 80068de:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80068e6:	685b      	ldr	r3, [r3, #4]
 80068e8:	78fa      	ldrb	r2, [r7, #3]
 80068ea:	4611      	mov	r1, r2
 80068ec:	6878      	ldr	r0, [r7, #4]
 80068ee:	4798      	blx	r3

  return USBD_OK;
 80068f0:	2300      	movs	r3, #0
}
 80068f2:	4618      	mov	r0, r3
 80068f4:	3708      	adds	r7, #8
 80068f6:	46bd      	mov	sp, r7
 80068f8:	bd80      	pop	{r7, pc}

080068fa <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80068fa:	b580      	push	{r7, lr}
 80068fc:	b082      	sub	sp, #8
 80068fe:	af00      	add	r7, sp, #0
 8006900:	6078      	str	r0, [r7, #4]
 8006902:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800690a:	6839      	ldr	r1, [r7, #0]
 800690c:	4618      	mov	r0, r3
 800690e:	f000 fecb 	bl	80076a8 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	2201      	movs	r2, #1
 8006916:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8006920:	461a      	mov	r2, r3
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800692e:	f003 031f 	and.w	r3, r3, #31
 8006932:	2b01      	cmp	r3, #1
 8006934:	d00c      	beq.n	8006950 <USBD_LL_SetupStage+0x56>
 8006936:	2b01      	cmp	r3, #1
 8006938:	d302      	bcc.n	8006940 <USBD_LL_SetupStage+0x46>
 800693a:	2b02      	cmp	r3, #2
 800693c:	d010      	beq.n	8006960 <USBD_LL_SetupStage+0x66>
 800693e:	e017      	b.n	8006970 <USBD_LL_SetupStage+0x76>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006946:	4619      	mov	r1, r3
 8006948:	6878      	ldr	r0, [r7, #4]
 800694a:	f000 f9cb 	bl	8006ce4 <USBD_StdDevReq>
      break;
 800694e:	e01a      	b.n	8006986 <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006956:	4619      	mov	r1, r3
 8006958:	6878      	ldr	r0, [r7, #4]
 800695a:	f000 fa2d 	bl	8006db8 <USBD_StdItfReq>
      break;
 800695e:	e012      	b.n	8006986 <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006966:	4619      	mov	r1, r3
 8006968:	6878      	ldr	r0, [r7, #4]
 800696a:	f000 fa6b 	bl	8006e44 <USBD_StdEPReq>
      break;
 800696e:	e00a      	b.n	8006986 <USBD_LL_SetupStage+0x8c>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8006976:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800697a:	b2db      	uxtb	r3, r3
 800697c:	4619      	mov	r1, r3
 800697e:	6878      	ldr	r0, [r7, #4]
 8006980:	f001 fb36 	bl	8007ff0 <USBD_LL_StallEP>
      break;
 8006984:	bf00      	nop
  }

  return USBD_OK;
 8006986:	2300      	movs	r3, #0
}
 8006988:	4618      	mov	r0, r3
 800698a:	3708      	adds	r7, #8
 800698c:	46bd      	mov	sp, r7
 800698e:	bd80      	pop	{r7, pc}

08006990 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006990:	b580      	push	{r7, lr}
 8006992:	b086      	sub	sp, #24
 8006994:	af00      	add	r7, sp, #0
 8006996:	60f8      	str	r0, [r7, #12]
 8006998:	460b      	mov	r3, r1
 800699a:	607a      	str	r2, [r7, #4]
 800699c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800699e:	7afb      	ldrb	r3, [r7, #11]
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d14b      	bne.n	8006a3c <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80069aa:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80069b2:	2b03      	cmp	r3, #3
 80069b4:	d134      	bne.n	8006a20 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 80069b6:	697b      	ldr	r3, [r7, #20]
 80069b8:	68da      	ldr	r2, [r3, #12]
 80069ba:	697b      	ldr	r3, [r7, #20]
 80069bc:	691b      	ldr	r3, [r3, #16]
 80069be:	429a      	cmp	r2, r3
 80069c0:	d919      	bls.n	80069f6 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 80069c2:	697b      	ldr	r3, [r7, #20]
 80069c4:	68da      	ldr	r2, [r3, #12]
 80069c6:	697b      	ldr	r3, [r7, #20]
 80069c8:	691b      	ldr	r3, [r3, #16]
 80069ca:	1ad2      	subs	r2, r2, r3
 80069cc:	697b      	ldr	r3, [r7, #20]
 80069ce:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80069d0:	697b      	ldr	r3, [r7, #20]
 80069d2:	68da      	ldr	r2, [r3, #12]
 80069d4:	697b      	ldr	r3, [r7, #20]
 80069d6:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80069d8:	429a      	cmp	r2, r3
 80069da:	d203      	bcs.n	80069e4 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80069dc:	697b      	ldr	r3, [r7, #20]
 80069de:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 80069e0:	b29b      	uxth	r3, r3
 80069e2:	e002      	b.n	80069ea <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80069e4:	697b      	ldr	r3, [r7, #20]
 80069e6:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80069e8:	b29b      	uxth	r3, r3
 80069ea:	461a      	mov	r2, r3
 80069ec:	6879      	ldr	r1, [r7, #4]
 80069ee:	68f8      	ldr	r0, [r7, #12]
 80069f0:	f000 ff4c 	bl	800788c <USBD_CtlContinueRx>
 80069f4:	e038      	b.n	8006a68 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80069fc:	691b      	ldr	r3, [r3, #16]
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d00a      	beq.n	8006a18 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8006a08:	2b03      	cmp	r3, #3
 8006a0a:	d105      	bne.n	8006a18 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006a12:	691b      	ldr	r3, [r3, #16]
 8006a14:	68f8      	ldr	r0, [r7, #12]
 8006a16:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8006a18:	68f8      	ldr	r0, [r7, #12]
 8006a1a:	f000 ff49 	bl	80078b0 <USBD_CtlSendStatus>
 8006a1e:	e023      	b.n	8006a68 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006a26:	2b05      	cmp	r3, #5
 8006a28:	d11e      	bne.n	8006a68 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	2200      	movs	r2, #0
 8006a2e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8006a32:	2100      	movs	r1, #0
 8006a34:	68f8      	ldr	r0, [r7, #12]
 8006a36:	f001 fadb 	bl	8007ff0 <USBD_LL_StallEP>
 8006a3a:	e015      	b.n	8006a68 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006a42:	699b      	ldr	r3, [r3, #24]
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d00d      	beq.n	8006a64 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8006a4e:	2b03      	cmp	r3, #3
 8006a50:	d108      	bne.n	8006a64 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006a58:	699b      	ldr	r3, [r3, #24]
 8006a5a:	7afa      	ldrb	r2, [r7, #11]
 8006a5c:	4611      	mov	r1, r2
 8006a5e:	68f8      	ldr	r0, [r7, #12]
 8006a60:	4798      	blx	r3
 8006a62:	e001      	b.n	8006a68 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006a64:	2302      	movs	r3, #2
 8006a66:	e000      	b.n	8006a6a <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8006a68:	2300      	movs	r3, #0
}
 8006a6a:	4618      	mov	r0, r3
 8006a6c:	3718      	adds	r7, #24
 8006a6e:	46bd      	mov	sp, r7
 8006a70:	bd80      	pop	{r7, pc}

08006a72 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006a72:	b580      	push	{r7, lr}
 8006a74:	b086      	sub	sp, #24
 8006a76:	af00      	add	r7, sp, #0
 8006a78:	60f8      	str	r0, [r7, #12]
 8006a7a:	460b      	mov	r3, r1
 8006a7c:	607a      	str	r2, [r7, #4]
 8006a7e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8006a80:	7afb      	ldrb	r3, [r7, #11]
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d17f      	bne.n	8006b86 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	3314      	adds	r3, #20
 8006a8a:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006a92:	2b02      	cmp	r3, #2
 8006a94:	d15c      	bne.n	8006b50 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8006a96:	697b      	ldr	r3, [r7, #20]
 8006a98:	68da      	ldr	r2, [r3, #12]
 8006a9a:	697b      	ldr	r3, [r7, #20]
 8006a9c:	691b      	ldr	r3, [r3, #16]
 8006a9e:	429a      	cmp	r2, r3
 8006aa0:	d915      	bls.n	8006ace <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8006aa2:	697b      	ldr	r3, [r7, #20]
 8006aa4:	68da      	ldr	r2, [r3, #12]
 8006aa6:	697b      	ldr	r3, [r7, #20]
 8006aa8:	691b      	ldr	r3, [r3, #16]
 8006aaa:	1ad2      	subs	r2, r2, r3
 8006aac:	697b      	ldr	r3, [r7, #20]
 8006aae:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8006ab0:	697b      	ldr	r3, [r7, #20]
 8006ab2:	68db      	ldr	r3, [r3, #12]
 8006ab4:	b29b      	uxth	r3, r3
 8006ab6:	461a      	mov	r2, r3
 8006ab8:	6879      	ldr	r1, [r7, #4]
 8006aba:	68f8      	ldr	r0, [r7, #12]
 8006abc:	f000 feb6 	bl	800782c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006ac0:	2300      	movs	r3, #0
 8006ac2:	2200      	movs	r2, #0
 8006ac4:	2100      	movs	r1, #0
 8006ac6:	68f8      	ldr	r0, [r7, #12]
 8006ac8:	f001 fb3e 	bl	8008148 <USBD_LL_PrepareReceive>
 8006acc:	e04e      	b.n	8006b6c <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8006ace:	697b      	ldr	r3, [r7, #20]
 8006ad0:	689b      	ldr	r3, [r3, #8]
 8006ad2:	697a      	ldr	r2, [r7, #20]
 8006ad4:	6912      	ldr	r2, [r2, #16]
 8006ad6:	fbb3 f1f2 	udiv	r1, r3, r2
 8006ada:	fb02 f201 	mul.w	r2, r2, r1
 8006ade:	1a9b      	subs	r3, r3, r2
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d11c      	bne.n	8006b1e <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8006ae4:	697b      	ldr	r3, [r7, #20]
 8006ae6:	689a      	ldr	r2, [r3, #8]
 8006ae8:	697b      	ldr	r3, [r7, #20]
 8006aea:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8006aec:	429a      	cmp	r2, r3
 8006aee:	d316      	bcc.n	8006b1e <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8006af0:	697b      	ldr	r3, [r7, #20]
 8006af2:	689a      	ldr	r2, [r3, #8]
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006afa:	429a      	cmp	r2, r3
 8006afc:	d20f      	bcs.n	8006b1e <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006afe:	2200      	movs	r2, #0
 8006b00:	2100      	movs	r1, #0
 8006b02:	68f8      	ldr	r0, [r7, #12]
 8006b04:	f000 fe92 	bl	800782c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	2200      	movs	r2, #0
 8006b0c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006b10:	2300      	movs	r3, #0
 8006b12:	2200      	movs	r2, #0
 8006b14:	2100      	movs	r1, #0
 8006b16:	68f8      	ldr	r0, [r7, #12]
 8006b18:	f001 fb16 	bl	8008148 <USBD_LL_PrepareReceive>
 8006b1c:	e026      	b.n	8006b6c <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006b24:	68db      	ldr	r3, [r3, #12]
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d00a      	beq.n	8006b40 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8006b30:	2b03      	cmp	r3, #3
 8006b32:	d105      	bne.n	8006b40 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006b3a:	68db      	ldr	r3, [r3, #12]
 8006b3c:	68f8      	ldr	r0, [r7, #12]
 8006b3e:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8006b40:	2180      	movs	r1, #128	; 0x80
 8006b42:	68f8      	ldr	r0, [r7, #12]
 8006b44:	f001 fa54 	bl	8007ff0 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8006b48:	68f8      	ldr	r0, [r7, #12]
 8006b4a:	f000 fec4 	bl	80078d6 <USBD_CtlReceiveStatus>
 8006b4e:	e00d      	b.n	8006b6c <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006b56:	2b04      	cmp	r3, #4
 8006b58:	d004      	beq.n	8006b64 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d103      	bne.n	8006b6c <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8006b64:	2180      	movs	r1, #128	; 0x80
 8006b66:	68f8      	ldr	r0, [r7, #12]
 8006b68:	f001 fa42 	bl	8007ff0 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8006b72:	2b01      	cmp	r3, #1
 8006b74:	d11d      	bne.n	8006bb2 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8006b76:	68f8      	ldr	r0, [r7, #12]
 8006b78:	f7ff fe83 	bl	8006882 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	2200      	movs	r2, #0
 8006b80:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8006b84:	e015      	b.n	8006bb2 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006b8c:	695b      	ldr	r3, [r3, #20]
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d00d      	beq.n	8006bae <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8006b98:	2b03      	cmp	r3, #3
 8006b9a:	d108      	bne.n	8006bae <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006ba2:	695b      	ldr	r3, [r3, #20]
 8006ba4:	7afa      	ldrb	r2, [r7, #11]
 8006ba6:	4611      	mov	r1, r2
 8006ba8:	68f8      	ldr	r0, [r7, #12]
 8006baa:	4798      	blx	r3
 8006bac:	e001      	b.n	8006bb2 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006bae:	2302      	movs	r3, #2
 8006bb0:	e000      	b.n	8006bb4 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8006bb2:	2300      	movs	r3, #0
}
 8006bb4:	4618      	mov	r0, r3
 8006bb6:	3718      	adds	r7, #24
 8006bb8:	46bd      	mov	sp, r7
 8006bba:	bd80      	pop	{r7, pc}

08006bbc <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006bbc:	b580      	push	{r7, lr}
 8006bbe:	b082      	sub	sp, #8
 8006bc0:	af00      	add	r7, sp, #0
 8006bc2:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006bc4:	2340      	movs	r3, #64	; 0x40
 8006bc6:	2200      	movs	r2, #0
 8006bc8:	2100      	movs	r1, #0
 8006bca:	6878      	ldr	r0, [r7, #4]
 8006bcc:	f001 f9cb 	bl	8007f66 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	2201      	movs	r2, #1
 8006bd4:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	2240      	movs	r2, #64	; 0x40
 8006bdc:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006be0:	2340      	movs	r3, #64	; 0x40
 8006be2:	2200      	movs	r2, #0
 8006be4:	2180      	movs	r1, #128	; 0x80
 8006be6:	6878      	ldr	r0, [r7, #4]
 8006be8:	f001 f9bd 	bl	8007f66 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	2201      	movs	r2, #1
 8006bf0:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	2240      	movs	r2, #64	; 0x40
 8006bf6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	2201      	movs	r2, #1
 8006bfc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	2200      	movs	r2, #0
 8006c04:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	2200      	movs	r2, #0
 8006c0c:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	2200      	movs	r2, #0
 8006c12:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d009      	beq.n	8006c34 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006c26:	685b      	ldr	r3, [r3, #4]
 8006c28:	687a      	ldr	r2, [r7, #4]
 8006c2a:	6852      	ldr	r2, [r2, #4]
 8006c2c:	b2d2      	uxtb	r2, r2
 8006c2e:	4611      	mov	r1, r2
 8006c30:	6878      	ldr	r0, [r7, #4]
 8006c32:	4798      	blx	r3
  }

  return USBD_OK;
 8006c34:	2300      	movs	r3, #0
}
 8006c36:	4618      	mov	r0, r3
 8006c38:	3708      	adds	r7, #8
 8006c3a:	46bd      	mov	sp, r7
 8006c3c:	bd80      	pop	{r7, pc}

08006c3e <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006c3e:	b480      	push	{r7}
 8006c40:	b083      	sub	sp, #12
 8006c42:	af00      	add	r7, sp, #0
 8006c44:	6078      	str	r0, [r7, #4]
 8006c46:	460b      	mov	r3, r1
 8006c48:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	78fa      	ldrb	r2, [r7, #3]
 8006c4e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006c50:	2300      	movs	r3, #0
}
 8006c52:	4618      	mov	r0, r3
 8006c54:	370c      	adds	r7, #12
 8006c56:	46bd      	mov	sp, r7
 8006c58:	bc80      	pop	{r7}
 8006c5a:	4770      	bx	lr

08006c5c <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006c5c:	b480      	push	{r7}
 8006c5e:	b083      	sub	sp, #12
 8006c60:	af00      	add	r7, sp, #0
 8006c62:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	2204      	movs	r2, #4
 8006c74:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8006c78:	2300      	movs	r3, #0
}
 8006c7a:	4618      	mov	r0, r3
 8006c7c:	370c      	adds	r7, #12
 8006c7e:	46bd      	mov	sp, r7
 8006c80:	bc80      	pop	{r7}
 8006c82:	4770      	bx	lr

08006c84 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006c84:	b480      	push	{r7}
 8006c86:	b083      	sub	sp, #12
 8006c88:	af00      	add	r7, sp, #0
 8006c8a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c92:	2b04      	cmp	r3, #4
 8006c94:	d105      	bne.n	8006ca2 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8006ca2:	2300      	movs	r3, #0
}
 8006ca4:	4618      	mov	r0, r3
 8006ca6:	370c      	adds	r7, #12
 8006ca8:	46bd      	mov	sp, r7
 8006caa:	bc80      	pop	{r7}
 8006cac:	4770      	bx	lr

08006cae <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006cae:	b580      	push	{r7, lr}
 8006cb0:	b082      	sub	sp, #8
 8006cb2:	af00      	add	r7, sp, #0
 8006cb4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006cbc:	2b03      	cmp	r3, #3
 8006cbe:	d10b      	bne.n	8006cd8 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006cc6:	69db      	ldr	r3, [r3, #28]
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d005      	beq.n	8006cd8 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006cd2:	69db      	ldr	r3, [r3, #28]
 8006cd4:	6878      	ldr	r0, [r7, #4]
 8006cd6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006cd8:	2300      	movs	r3, #0
}
 8006cda:	4618      	mov	r0, r3
 8006cdc:	3708      	adds	r7, #8
 8006cde:	46bd      	mov	sp, r7
 8006ce0:	bd80      	pop	{r7, pc}
	...

08006ce4 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8006ce4:	b580      	push	{r7, lr}
 8006ce6:	b084      	sub	sp, #16
 8006ce8:	af00      	add	r7, sp, #0
 8006cea:	6078      	str	r0, [r7, #4]
 8006cec:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006cee:	2300      	movs	r3, #0
 8006cf0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006cf2:	683b      	ldr	r3, [r7, #0]
 8006cf4:	781b      	ldrb	r3, [r3, #0]
 8006cf6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006cfa:	2b20      	cmp	r3, #32
 8006cfc:	d004      	beq.n	8006d08 <USBD_StdDevReq+0x24>
 8006cfe:	2b40      	cmp	r3, #64	; 0x40
 8006d00:	d002      	beq.n	8006d08 <USBD_StdDevReq+0x24>
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d008      	beq.n	8006d18 <USBD_StdDevReq+0x34>
 8006d06:	e04c      	b.n	8006da2 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006d0e:	689b      	ldr	r3, [r3, #8]
 8006d10:	6839      	ldr	r1, [r7, #0]
 8006d12:	6878      	ldr	r0, [r7, #4]
 8006d14:	4798      	blx	r3
      break;
 8006d16:	e049      	b.n	8006dac <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006d18:	683b      	ldr	r3, [r7, #0]
 8006d1a:	785b      	ldrb	r3, [r3, #1]
 8006d1c:	2b09      	cmp	r3, #9
 8006d1e:	d83a      	bhi.n	8006d96 <USBD_StdDevReq+0xb2>
 8006d20:	a201      	add	r2, pc, #4	; (adr r2, 8006d28 <USBD_StdDevReq+0x44>)
 8006d22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d26:	bf00      	nop
 8006d28:	08006d79 	.word	0x08006d79
 8006d2c:	08006d8d 	.word	0x08006d8d
 8006d30:	08006d97 	.word	0x08006d97
 8006d34:	08006d83 	.word	0x08006d83
 8006d38:	08006d97 	.word	0x08006d97
 8006d3c:	08006d5b 	.word	0x08006d5b
 8006d40:	08006d51 	.word	0x08006d51
 8006d44:	08006d97 	.word	0x08006d97
 8006d48:	08006d6f 	.word	0x08006d6f
 8006d4c:	08006d65 	.word	0x08006d65
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006d50:	6839      	ldr	r1, [r7, #0]
 8006d52:	6878      	ldr	r0, [r7, #4]
 8006d54:	f000 f9d4 	bl	8007100 <USBD_GetDescriptor>
          break;
 8006d58:	e022      	b.n	8006da0 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8006d5a:	6839      	ldr	r1, [r7, #0]
 8006d5c:	6878      	ldr	r0, [r7, #4]
 8006d5e:	f000 fb37 	bl	80073d0 <USBD_SetAddress>
          break;
 8006d62:	e01d      	b.n	8006da0 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8006d64:	6839      	ldr	r1, [r7, #0]
 8006d66:	6878      	ldr	r0, [r7, #4]
 8006d68:	f000 fb74 	bl	8007454 <USBD_SetConfig>
          break;
 8006d6c:	e018      	b.n	8006da0 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8006d6e:	6839      	ldr	r1, [r7, #0]
 8006d70:	6878      	ldr	r0, [r7, #4]
 8006d72:	f000 fbfd 	bl	8007570 <USBD_GetConfig>
          break;
 8006d76:	e013      	b.n	8006da0 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006d78:	6839      	ldr	r1, [r7, #0]
 8006d7a:	6878      	ldr	r0, [r7, #4]
 8006d7c:	f000 fc2c 	bl	80075d8 <USBD_GetStatus>
          break;
 8006d80:	e00e      	b.n	8006da0 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8006d82:	6839      	ldr	r1, [r7, #0]
 8006d84:	6878      	ldr	r0, [r7, #4]
 8006d86:	f000 fc5a 	bl	800763e <USBD_SetFeature>
          break;
 8006d8a:	e009      	b.n	8006da0 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006d8c:	6839      	ldr	r1, [r7, #0]
 8006d8e:	6878      	ldr	r0, [r7, #4]
 8006d90:	f000 fc69 	bl	8007666 <USBD_ClrFeature>
          break;
 8006d94:	e004      	b.n	8006da0 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8006d96:	6839      	ldr	r1, [r7, #0]
 8006d98:	6878      	ldr	r0, [r7, #4]
 8006d9a:	f000 fcc1 	bl	8007720 <USBD_CtlError>
          break;
 8006d9e:	bf00      	nop
      }
      break;
 8006da0:	e004      	b.n	8006dac <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8006da2:	6839      	ldr	r1, [r7, #0]
 8006da4:	6878      	ldr	r0, [r7, #4]
 8006da6:	f000 fcbb 	bl	8007720 <USBD_CtlError>
      break;
 8006daa:	bf00      	nop
  }

  return ret;
 8006dac:	7bfb      	ldrb	r3, [r7, #15]
}
 8006dae:	4618      	mov	r0, r3
 8006db0:	3710      	adds	r7, #16
 8006db2:	46bd      	mov	sp, r7
 8006db4:	bd80      	pop	{r7, pc}
 8006db6:	bf00      	nop

08006db8 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8006db8:	b580      	push	{r7, lr}
 8006dba:	b084      	sub	sp, #16
 8006dbc:	af00      	add	r7, sp, #0
 8006dbe:	6078      	str	r0, [r7, #4]
 8006dc0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006dc2:	2300      	movs	r3, #0
 8006dc4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006dc6:	683b      	ldr	r3, [r7, #0]
 8006dc8:	781b      	ldrb	r3, [r3, #0]
 8006dca:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006dce:	2b20      	cmp	r3, #32
 8006dd0:	d003      	beq.n	8006dda <USBD_StdItfReq+0x22>
 8006dd2:	2b40      	cmp	r3, #64	; 0x40
 8006dd4:	d001      	beq.n	8006dda <USBD_StdItfReq+0x22>
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d12a      	bne.n	8006e30 <USBD_StdItfReq+0x78>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006de0:	3b01      	subs	r3, #1
 8006de2:	2b02      	cmp	r3, #2
 8006de4:	d81d      	bhi.n	8006e22 <USBD_StdItfReq+0x6a>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006de6:	683b      	ldr	r3, [r7, #0]
 8006de8:	889b      	ldrh	r3, [r3, #4]
 8006dea:	b2db      	uxtb	r3, r3
 8006dec:	2b01      	cmp	r3, #1
 8006dee:	d813      	bhi.n	8006e18 <USBD_StdItfReq+0x60>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006df6:	689b      	ldr	r3, [r3, #8]
 8006df8:	6839      	ldr	r1, [r7, #0]
 8006dfa:	6878      	ldr	r0, [r7, #4]
 8006dfc:	4798      	blx	r3
 8006dfe:	4603      	mov	r3, r0
 8006e00:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006e02:	683b      	ldr	r3, [r7, #0]
 8006e04:	88db      	ldrh	r3, [r3, #6]
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d110      	bne.n	8006e2c <USBD_StdItfReq+0x74>
 8006e0a:	7bfb      	ldrb	r3, [r7, #15]
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d10d      	bne.n	8006e2c <USBD_StdItfReq+0x74>
            {
              USBD_CtlSendStatus(pdev);
 8006e10:	6878      	ldr	r0, [r7, #4]
 8006e12:	f000 fd4d 	bl	80078b0 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8006e16:	e009      	b.n	8006e2c <USBD_StdItfReq+0x74>
            USBD_CtlError(pdev, req);
 8006e18:	6839      	ldr	r1, [r7, #0]
 8006e1a:	6878      	ldr	r0, [r7, #4]
 8006e1c:	f000 fc80 	bl	8007720 <USBD_CtlError>
          break;
 8006e20:	e004      	b.n	8006e2c <USBD_StdItfReq+0x74>

        default:
          USBD_CtlError(pdev, req);
 8006e22:	6839      	ldr	r1, [r7, #0]
 8006e24:	6878      	ldr	r0, [r7, #4]
 8006e26:	f000 fc7b 	bl	8007720 <USBD_CtlError>
          break;
 8006e2a:	e000      	b.n	8006e2e <USBD_StdItfReq+0x76>
          break;
 8006e2c:	bf00      	nop
      }
      break;
 8006e2e:	e004      	b.n	8006e3a <USBD_StdItfReq+0x82>

    default:
      USBD_CtlError(pdev, req);
 8006e30:	6839      	ldr	r1, [r7, #0]
 8006e32:	6878      	ldr	r0, [r7, #4]
 8006e34:	f000 fc74 	bl	8007720 <USBD_CtlError>
      break;
 8006e38:	bf00      	nop
  }

  return USBD_OK;
 8006e3a:	2300      	movs	r3, #0
}
 8006e3c:	4618      	mov	r0, r3
 8006e3e:	3710      	adds	r7, #16
 8006e40:	46bd      	mov	sp, r7
 8006e42:	bd80      	pop	{r7, pc}

08006e44 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8006e44:	b580      	push	{r7, lr}
 8006e46:	b084      	sub	sp, #16
 8006e48:	af00      	add	r7, sp, #0
 8006e4a:	6078      	str	r0, [r7, #4]
 8006e4c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8006e4e:	2300      	movs	r3, #0
 8006e50:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8006e52:	683b      	ldr	r3, [r7, #0]
 8006e54:	889b      	ldrh	r3, [r3, #4]
 8006e56:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006e58:	683b      	ldr	r3, [r7, #0]
 8006e5a:	781b      	ldrb	r3, [r3, #0]
 8006e5c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006e60:	2b20      	cmp	r3, #32
 8006e62:	d004      	beq.n	8006e6e <USBD_StdEPReq+0x2a>
 8006e64:	2b40      	cmp	r3, #64	; 0x40
 8006e66:	d002      	beq.n	8006e6e <USBD_StdEPReq+0x2a>
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d008      	beq.n	8006e7e <USBD_StdEPReq+0x3a>
 8006e6c:	e13d      	b.n	80070ea <USBD_StdEPReq+0x2a6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e74:	689b      	ldr	r3, [r3, #8]
 8006e76:	6839      	ldr	r1, [r7, #0]
 8006e78:	6878      	ldr	r0, [r7, #4]
 8006e7a:	4798      	blx	r3
      break;
 8006e7c:	e13a      	b.n	80070f4 <USBD_StdEPReq+0x2b0>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8006e7e:	683b      	ldr	r3, [r7, #0]
 8006e80:	781b      	ldrb	r3, [r3, #0]
 8006e82:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006e86:	2b20      	cmp	r3, #32
 8006e88:	d10a      	bne.n	8006ea0 <USBD_StdEPReq+0x5c>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e90:	689b      	ldr	r3, [r3, #8]
 8006e92:	6839      	ldr	r1, [r7, #0]
 8006e94:	6878      	ldr	r0, [r7, #4]
 8006e96:	4798      	blx	r3
 8006e98:	4603      	mov	r3, r0
 8006e9a:	73fb      	strb	r3, [r7, #15]

        return ret;
 8006e9c:	7bfb      	ldrb	r3, [r7, #15]
 8006e9e:	e12a      	b.n	80070f6 <USBD_StdEPReq+0x2b2>
      }

      switch (req->bRequest)
 8006ea0:	683b      	ldr	r3, [r7, #0]
 8006ea2:	785b      	ldrb	r3, [r3, #1]
 8006ea4:	2b01      	cmp	r3, #1
 8006ea6:	d03e      	beq.n	8006f26 <USBD_StdEPReq+0xe2>
 8006ea8:	2b03      	cmp	r3, #3
 8006eaa:	d002      	beq.n	8006eb2 <USBD_StdEPReq+0x6e>
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d070      	beq.n	8006f92 <USBD_StdEPReq+0x14e>
 8006eb0:	e115      	b.n	80070de <USBD_StdEPReq+0x29a>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006eb8:	2b02      	cmp	r3, #2
 8006eba:	d002      	beq.n	8006ec2 <USBD_StdEPReq+0x7e>
 8006ebc:	2b03      	cmp	r3, #3
 8006ebe:	d015      	beq.n	8006eec <USBD_StdEPReq+0xa8>
 8006ec0:	e02b      	b.n	8006f1a <USBD_StdEPReq+0xd6>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006ec2:	7bbb      	ldrb	r3, [r7, #14]
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d00c      	beq.n	8006ee2 <USBD_StdEPReq+0x9e>
 8006ec8:	7bbb      	ldrb	r3, [r7, #14]
 8006eca:	2b80      	cmp	r3, #128	; 0x80
 8006ecc:	d009      	beq.n	8006ee2 <USBD_StdEPReq+0x9e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8006ece:	7bbb      	ldrb	r3, [r7, #14]
 8006ed0:	4619      	mov	r1, r3
 8006ed2:	6878      	ldr	r0, [r7, #4]
 8006ed4:	f001 f88c 	bl	8007ff0 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8006ed8:	2180      	movs	r1, #128	; 0x80
 8006eda:	6878      	ldr	r0, [r7, #4]
 8006edc:	f001 f888 	bl	8007ff0 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006ee0:	e020      	b.n	8006f24 <USBD_StdEPReq+0xe0>
                USBD_CtlError(pdev, req);
 8006ee2:	6839      	ldr	r1, [r7, #0]
 8006ee4:	6878      	ldr	r0, [r7, #4]
 8006ee6:	f000 fc1b 	bl	8007720 <USBD_CtlError>
              break;
 8006eea:	e01b      	b.n	8006f24 <USBD_StdEPReq+0xe0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006eec:	683b      	ldr	r3, [r7, #0]
 8006eee:	885b      	ldrh	r3, [r3, #2]
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d10e      	bne.n	8006f12 <USBD_StdEPReq+0xce>
              {
                if ((ep_addr != 0x00U) &&
 8006ef4:	7bbb      	ldrb	r3, [r7, #14]
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d00b      	beq.n	8006f12 <USBD_StdEPReq+0xce>
 8006efa:	7bbb      	ldrb	r3, [r7, #14]
 8006efc:	2b80      	cmp	r3, #128	; 0x80
 8006efe:	d008      	beq.n	8006f12 <USBD_StdEPReq+0xce>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006f00:	683b      	ldr	r3, [r7, #0]
 8006f02:	88db      	ldrh	r3, [r3, #6]
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d104      	bne.n	8006f12 <USBD_StdEPReq+0xce>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8006f08:	7bbb      	ldrb	r3, [r7, #14]
 8006f0a:	4619      	mov	r1, r3
 8006f0c:	6878      	ldr	r0, [r7, #4]
 8006f0e:	f001 f86f 	bl	8007ff0 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8006f12:	6878      	ldr	r0, [r7, #4]
 8006f14:	f000 fccc 	bl	80078b0 <USBD_CtlSendStatus>

              break;
 8006f18:	e004      	b.n	8006f24 <USBD_StdEPReq+0xe0>

            default:
              USBD_CtlError(pdev, req);
 8006f1a:	6839      	ldr	r1, [r7, #0]
 8006f1c:	6878      	ldr	r0, [r7, #4]
 8006f1e:	f000 fbff 	bl	8007720 <USBD_CtlError>
              break;
 8006f22:	bf00      	nop
          }
          break;
 8006f24:	e0e0      	b.n	80070e8 <USBD_StdEPReq+0x2a4>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f2c:	2b02      	cmp	r3, #2
 8006f2e:	d002      	beq.n	8006f36 <USBD_StdEPReq+0xf2>
 8006f30:	2b03      	cmp	r3, #3
 8006f32:	d015      	beq.n	8006f60 <USBD_StdEPReq+0x11c>
 8006f34:	e026      	b.n	8006f84 <USBD_StdEPReq+0x140>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006f36:	7bbb      	ldrb	r3, [r7, #14]
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d00c      	beq.n	8006f56 <USBD_StdEPReq+0x112>
 8006f3c:	7bbb      	ldrb	r3, [r7, #14]
 8006f3e:	2b80      	cmp	r3, #128	; 0x80
 8006f40:	d009      	beq.n	8006f56 <USBD_StdEPReq+0x112>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8006f42:	7bbb      	ldrb	r3, [r7, #14]
 8006f44:	4619      	mov	r1, r3
 8006f46:	6878      	ldr	r0, [r7, #4]
 8006f48:	f001 f852 	bl	8007ff0 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8006f4c:	2180      	movs	r1, #128	; 0x80
 8006f4e:	6878      	ldr	r0, [r7, #4]
 8006f50:	f001 f84e 	bl	8007ff0 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006f54:	e01c      	b.n	8006f90 <USBD_StdEPReq+0x14c>
                USBD_CtlError(pdev, req);
 8006f56:	6839      	ldr	r1, [r7, #0]
 8006f58:	6878      	ldr	r0, [r7, #4]
 8006f5a:	f000 fbe1 	bl	8007720 <USBD_CtlError>
              break;
 8006f5e:	e017      	b.n	8006f90 <USBD_StdEPReq+0x14c>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006f60:	683b      	ldr	r3, [r7, #0]
 8006f62:	885b      	ldrh	r3, [r3, #2]
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d112      	bne.n	8006f8e <USBD_StdEPReq+0x14a>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006f68:	7bbb      	ldrb	r3, [r7, #14]
 8006f6a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d004      	beq.n	8006f7c <USBD_StdEPReq+0x138>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8006f72:	7bbb      	ldrb	r3, [r7, #14]
 8006f74:	4619      	mov	r1, r3
 8006f76:	6878      	ldr	r0, [r7, #4]
 8006f78:	f001 f859 	bl	800802e <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8006f7c:	6878      	ldr	r0, [r7, #4]
 8006f7e:	f000 fc97 	bl	80078b0 <USBD_CtlSendStatus>
              }
              break;
 8006f82:	e004      	b.n	8006f8e <USBD_StdEPReq+0x14a>

            default:
              USBD_CtlError(pdev, req);
 8006f84:	6839      	ldr	r1, [r7, #0]
 8006f86:	6878      	ldr	r0, [r7, #4]
 8006f88:	f000 fbca 	bl	8007720 <USBD_CtlError>
              break;
 8006f8c:	e000      	b.n	8006f90 <USBD_StdEPReq+0x14c>
              break;
 8006f8e:	bf00      	nop
          }
          break;
 8006f90:	e0aa      	b.n	80070e8 <USBD_StdEPReq+0x2a4>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f98:	2b02      	cmp	r3, #2
 8006f9a:	d002      	beq.n	8006fa2 <USBD_StdEPReq+0x15e>
 8006f9c:	2b03      	cmp	r3, #3
 8006f9e:	d032      	beq.n	8007006 <USBD_StdEPReq+0x1c2>
 8006fa0:	e097      	b.n	80070d2 <USBD_StdEPReq+0x28e>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006fa2:	7bbb      	ldrb	r3, [r7, #14]
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d007      	beq.n	8006fb8 <USBD_StdEPReq+0x174>
 8006fa8:	7bbb      	ldrb	r3, [r7, #14]
 8006faa:	2b80      	cmp	r3, #128	; 0x80
 8006fac:	d004      	beq.n	8006fb8 <USBD_StdEPReq+0x174>
              {
                USBD_CtlError(pdev, req);
 8006fae:	6839      	ldr	r1, [r7, #0]
 8006fb0:	6878      	ldr	r0, [r7, #4]
 8006fb2:	f000 fbb5 	bl	8007720 <USBD_CtlError>
                break;
 8006fb6:	e091      	b.n	80070dc <USBD_StdEPReq+0x298>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006fb8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	da0b      	bge.n	8006fd8 <USBD_StdEPReq+0x194>
 8006fc0:	7bbb      	ldrb	r3, [r7, #14]
 8006fc2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006fc6:	4613      	mov	r3, r2
 8006fc8:	009b      	lsls	r3, r3, #2
 8006fca:	4413      	add	r3, r2
 8006fcc:	009b      	lsls	r3, r3, #2
 8006fce:	3310      	adds	r3, #16
 8006fd0:	687a      	ldr	r2, [r7, #4]
 8006fd2:	4413      	add	r3, r2
 8006fd4:	3304      	adds	r3, #4
 8006fd6:	e00b      	b.n	8006ff0 <USBD_StdEPReq+0x1ac>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006fd8:	7bbb      	ldrb	r3, [r7, #14]
 8006fda:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006fde:	4613      	mov	r3, r2
 8006fe0:	009b      	lsls	r3, r3, #2
 8006fe2:	4413      	add	r3, r2
 8006fe4:	009b      	lsls	r3, r3, #2
 8006fe6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006fea:	687a      	ldr	r2, [r7, #4]
 8006fec:	4413      	add	r3, r2
 8006fee:	3304      	adds	r3, #4
 8006ff0:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8006ff2:	68bb      	ldr	r3, [r7, #8]
 8006ff4:	2200      	movs	r2, #0
 8006ff6:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8006ff8:	68bb      	ldr	r3, [r7, #8]
 8006ffa:	2202      	movs	r2, #2
 8006ffc:	4619      	mov	r1, r3
 8006ffe:	6878      	ldr	r0, [r7, #4]
 8007000:	f000 fbf8 	bl	80077f4 <USBD_CtlSendData>
              break;
 8007004:	e06a      	b.n	80070dc <USBD_StdEPReq+0x298>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007006:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800700a:	2b00      	cmp	r3, #0
 800700c:	da11      	bge.n	8007032 <USBD_StdEPReq+0x1ee>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800700e:	7bbb      	ldrb	r3, [r7, #14]
 8007010:	f003 020f 	and.w	r2, r3, #15
 8007014:	6879      	ldr	r1, [r7, #4]
 8007016:	4613      	mov	r3, r2
 8007018:	009b      	lsls	r3, r3, #2
 800701a:	4413      	add	r3, r2
 800701c:	009b      	lsls	r3, r3, #2
 800701e:	440b      	add	r3, r1
 8007020:	3318      	adds	r3, #24
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	2b00      	cmp	r3, #0
 8007026:	d117      	bne.n	8007058 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 8007028:	6839      	ldr	r1, [r7, #0]
 800702a:	6878      	ldr	r0, [r7, #4]
 800702c:	f000 fb78 	bl	8007720 <USBD_CtlError>
                  break;
 8007030:	e054      	b.n	80070dc <USBD_StdEPReq+0x298>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007032:	7bbb      	ldrb	r3, [r7, #14]
 8007034:	f003 020f 	and.w	r2, r3, #15
 8007038:	6879      	ldr	r1, [r7, #4]
 800703a:	4613      	mov	r3, r2
 800703c:	009b      	lsls	r3, r3, #2
 800703e:	4413      	add	r3, r2
 8007040:	009b      	lsls	r3, r3, #2
 8007042:	440b      	add	r3, r1
 8007044:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	2b00      	cmp	r3, #0
 800704c:	d104      	bne.n	8007058 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 800704e:	6839      	ldr	r1, [r7, #0]
 8007050:	6878      	ldr	r0, [r7, #4]
 8007052:	f000 fb65 	bl	8007720 <USBD_CtlError>
                  break;
 8007056:	e041      	b.n	80070dc <USBD_StdEPReq+0x298>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007058:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800705c:	2b00      	cmp	r3, #0
 800705e:	da0b      	bge.n	8007078 <USBD_StdEPReq+0x234>
 8007060:	7bbb      	ldrb	r3, [r7, #14]
 8007062:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007066:	4613      	mov	r3, r2
 8007068:	009b      	lsls	r3, r3, #2
 800706a:	4413      	add	r3, r2
 800706c:	009b      	lsls	r3, r3, #2
 800706e:	3310      	adds	r3, #16
 8007070:	687a      	ldr	r2, [r7, #4]
 8007072:	4413      	add	r3, r2
 8007074:	3304      	adds	r3, #4
 8007076:	e00b      	b.n	8007090 <USBD_StdEPReq+0x24c>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007078:	7bbb      	ldrb	r3, [r7, #14]
 800707a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800707e:	4613      	mov	r3, r2
 8007080:	009b      	lsls	r3, r3, #2
 8007082:	4413      	add	r3, r2
 8007084:	009b      	lsls	r3, r3, #2
 8007086:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800708a:	687a      	ldr	r2, [r7, #4]
 800708c:	4413      	add	r3, r2
 800708e:	3304      	adds	r3, #4
 8007090:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007092:	7bbb      	ldrb	r3, [r7, #14]
 8007094:	2b00      	cmp	r3, #0
 8007096:	d002      	beq.n	800709e <USBD_StdEPReq+0x25a>
 8007098:	7bbb      	ldrb	r3, [r7, #14]
 800709a:	2b80      	cmp	r3, #128	; 0x80
 800709c:	d103      	bne.n	80070a6 <USBD_StdEPReq+0x262>
              {
                pep->status = 0x0000U;
 800709e:	68bb      	ldr	r3, [r7, #8]
 80070a0:	2200      	movs	r2, #0
 80070a2:	601a      	str	r2, [r3, #0]
 80070a4:	e00e      	b.n	80070c4 <USBD_StdEPReq+0x280>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 80070a6:	7bbb      	ldrb	r3, [r7, #14]
 80070a8:	4619      	mov	r1, r3
 80070aa:	6878      	ldr	r0, [r7, #4]
 80070ac:	f000 ffde 	bl	800806c <USBD_LL_IsStallEP>
 80070b0:	4603      	mov	r3, r0
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d003      	beq.n	80070be <USBD_StdEPReq+0x27a>
              {
                pep->status = 0x0001U;
 80070b6:	68bb      	ldr	r3, [r7, #8]
 80070b8:	2201      	movs	r2, #1
 80070ba:	601a      	str	r2, [r3, #0]
 80070bc:	e002      	b.n	80070c4 <USBD_StdEPReq+0x280>
              }
              else
              {
                pep->status = 0x0000U;
 80070be:	68bb      	ldr	r3, [r7, #8]
 80070c0:	2200      	movs	r2, #0
 80070c2:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80070c4:	68bb      	ldr	r3, [r7, #8]
 80070c6:	2202      	movs	r2, #2
 80070c8:	4619      	mov	r1, r3
 80070ca:	6878      	ldr	r0, [r7, #4]
 80070cc:	f000 fb92 	bl	80077f4 <USBD_CtlSendData>
              break;
 80070d0:	e004      	b.n	80070dc <USBD_StdEPReq+0x298>

            default:
              USBD_CtlError(pdev, req);
 80070d2:	6839      	ldr	r1, [r7, #0]
 80070d4:	6878      	ldr	r0, [r7, #4]
 80070d6:	f000 fb23 	bl	8007720 <USBD_CtlError>
              break;
 80070da:	bf00      	nop
          }
          break;
 80070dc:	e004      	b.n	80070e8 <USBD_StdEPReq+0x2a4>

        default:
          USBD_CtlError(pdev, req);
 80070de:	6839      	ldr	r1, [r7, #0]
 80070e0:	6878      	ldr	r0, [r7, #4]
 80070e2:	f000 fb1d 	bl	8007720 <USBD_CtlError>
          break;
 80070e6:	bf00      	nop
      }
      break;
 80070e8:	e004      	b.n	80070f4 <USBD_StdEPReq+0x2b0>

    default:
      USBD_CtlError(pdev, req);
 80070ea:	6839      	ldr	r1, [r7, #0]
 80070ec:	6878      	ldr	r0, [r7, #4]
 80070ee:	f000 fb17 	bl	8007720 <USBD_CtlError>
      break;
 80070f2:	bf00      	nop
  }

  return ret;
 80070f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80070f6:	4618      	mov	r0, r3
 80070f8:	3710      	adds	r7, #16
 80070fa:	46bd      	mov	sp, r7
 80070fc:	bd80      	pop	{r7, pc}
	...

08007100 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8007100:	b580      	push	{r7, lr}
 8007102:	b084      	sub	sp, #16
 8007104:	af00      	add	r7, sp, #0
 8007106:	6078      	str	r0, [r7, #4]
 8007108:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800710a:	2300      	movs	r3, #0
 800710c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800710e:	2300      	movs	r3, #0
 8007110:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007112:	2300      	movs	r3, #0
 8007114:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007116:	683b      	ldr	r3, [r7, #0]
 8007118:	885b      	ldrh	r3, [r3, #2]
 800711a:	0a1b      	lsrs	r3, r3, #8
 800711c:	b29b      	uxth	r3, r3
 800711e:	3b01      	subs	r3, #1
 8007120:	2b06      	cmp	r3, #6
 8007122:	f200 8128 	bhi.w	8007376 <USBD_GetDescriptor+0x276>
 8007126:	a201      	add	r2, pc, #4	; (adr r2, 800712c <USBD_GetDescriptor+0x2c>)
 8007128:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800712c:	08007149 	.word	0x08007149
 8007130:	08007161 	.word	0x08007161
 8007134:	080071a1 	.word	0x080071a1
 8007138:	08007377 	.word	0x08007377
 800713c:	08007377 	.word	0x08007377
 8007140:	08007317 	.word	0x08007317
 8007144:	08007343 	.word	0x08007343
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	687a      	ldr	r2, [r7, #4]
 8007152:	7c12      	ldrb	r2, [r2, #16]
 8007154:	f107 0108 	add.w	r1, r7, #8
 8007158:	4610      	mov	r0, r2
 800715a:	4798      	blx	r3
 800715c:	60f8      	str	r0, [r7, #12]
      break;
 800715e:	e112      	b.n	8007386 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	7c1b      	ldrb	r3, [r3, #16]
 8007164:	2b00      	cmp	r3, #0
 8007166:	d10d      	bne.n	8007184 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800716e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007170:	f107 0208 	add.w	r2, r7, #8
 8007174:	4610      	mov	r0, r2
 8007176:	4798      	blx	r3
 8007178:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	3301      	adds	r3, #1
 800717e:	2202      	movs	r2, #2
 8007180:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007182:	e100      	b.n	8007386 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800718a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800718c:	f107 0208 	add.w	r2, r7, #8
 8007190:	4610      	mov	r0, r2
 8007192:	4798      	blx	r3
 8007194:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	3301      	adds	r3, #1
 800719a:	2202      	movs	r2, #2
 800719c:	701a      	strb	r2, [r3, #0]
      break;
 800719e:	e0f2      	b.n	8007386 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80071a0:	683b      	ldr	r3, [r7, #0]
 80071a2:	885b      	ldrh	r3, [r3, #2]
 80071a4:	b2db      	uxtb	r3, r3
 80071a6:	2b05      	cmp	r3, #5
 80071a8:	f200 80ac 	bhi.w	8007304 <USBD_GetDescriptor+0x204>
 80071ac:	a201      	add	r2, pc, #4	; (adr r2, 80071b4 <USBD_GetDescriptor+0xb4>)
 80071ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071b2:	bf00      	nop
 80071b4:	080071cd 	.word	0x080071cd
 80071b8:	08007201 	.word	0x08007201
 80071bc:	08007235 	.word	0x08007235
 80071c0:	08007269 	.word	0x08007269
 80071c4:	0800729d 	.word	0x0800729d
 80071c8:	080072d1 	.word	0x080072d1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80071d2:	685b      	ldr	r3, [r3, #4]
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d00b      	beq.n	80071f0 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80071de:	685b      	ldr	r3, [r3, #4]
 80071e0:	687a      	ldr	r2, [r7, #4]
 80071e2:	7c12      	ldrb	r2, [r2, #16]
 80071e4:	f107 0108 	add.w	r1, r7, #8
 80071e8:	4610      	mov	r0, r2
 80071ea:	4798      	blx	r3
 80071ec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80071ee:	e091      	b.n	8007314 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80071f0:	6839      	ldr	r1, [r7, #0]
 80071f2:	6878      	ldr	r0, [r7, #4]
 80071f4:	f000 fa94 	bl	8007720 <USBD_CtlError>
            err++;
 80071f8:	7afb      	ldrb	r3, [r7, #11]
 80071fa:	3301      	adds	r3, #1
 80071fc:	72fb      	strb	r3, [r7, #11]
          break;
 80071fe:	e089      	b.n	8007314 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007206:	689b      	ldr	r3, [r3, #8]
 8007208:	2b00      	cmp	r3, #0
 800720a:	d00b      	beq.n	8007224 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007212:	689b      	ldr	r3, [r3, #8]
 8007214:	687a      	ldr	r2, [r7, #4]
 8007216:	7c12      	ldrb	r2, [r2, #16]
 8007218:	f107 0108 	add.w	r1, r7, #8
 800721c:	4610      	mov	r0, r2
 800721e:	4798      	blx	r3
 8007220:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007222:	e077      	b.n	8007314 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007224:	6839      	ldr	r1, [r7, #0]
 8007226:	6878      	ldr	r0, [r7, #4]
 8007228:	f000 fa7a 	bl	8007720 <USBD_CtlError>
            err++;
 800722c:	7afb      	ldrb	r3, [r7, #11]
 800722e:	3301      	adds	r3, #1
 8007230:	72fb      	strb	r3, [r7, #11]
          break;
 8007232:	e06f      	b.n	8007314 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800723a:	68db      	ldr	r3, [r3, #12]
 800723c:	2b00      	cmp	r3, #0
 800723e:	d00b      	beq.n	8007258 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007246:	68db      	ldr	r3, [r3, #12]
 8007248:	687a      	ldr	r2, [r7, #4]
 800724a:	7c12      	ldrb	r2, [r2, #16]
 800724c:	f107 0108 	add.w	r1, r7, #8
 8007250:	4610      	mov	r0, r2
 8007252:	4798      	blx	r3
 8007254:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007256:	e05d      	b.n	8007314 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007258:	6839      	ldr	r1, [r7, #0]
 800725a:	6878      	ldr	r0, [r7, #4]
 800725c:	f000 fa60 	bl	8007720 <USBD_CtlError>
            err++;
 8007260:	7afb      	ldrb	r3, [r7, #11]
 8007262:	3301      	adds	r3, #1
 8007264:	72fb      	strb	r3, [r7, #11]
          break;
 8007266:	e055      	b.n	8007314 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800726e:	691b      	ldr	r3, [r3, #16]
 8007270:	2b00      	cmp	r3, #0
 8007272:	d00b      	beq.n	800728c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800727a:	691b      	ldr	r3, [r3, #16]
 800727c:	687a      	ldr	r2, [r7, #4]
 800727e:	7c12      	ldrb	r2, [r2, #16]
 8007280:	f107 0108 	add.w	r1, r7, #8
 8007284:	4610      	mov	r0, r2
 8007286:	4798      	blx	r3
 8007288:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800728a:	e043      	b.n	8007314 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800728c:	6839      	ldr	r1, [r7, #0]
 800728e:	6878      	ldr	r0, [r7, #4]
 8007290:	f000 fa46 	bl	8007720 <USBD_CtlError>
            err++;
 8007294:	7afb      	ldrb	r3, [r7, #11]
 8007296:	3301      	adds	r3, #1
 8007298:	72fb      	strb	r3, [r7, #11]
          break;
 800729a:	e03b      	b.n	8007314 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80072a2:	695b      	ldr	r3, [r3, #20]
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d00b      	beq.n	80072c0 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80072ae:	695b      	ldr	r3, [r3, #20]
 80072b0:	687a      	ldr	r2, [r7, #4]
 80072b2:	7c12      	ldrb	r2, [r2, #16]
 80072b4:	f107 0108 	add.w	r1, r7, #8
 80072b8:	4610      	mov	r0, r2
 80072ba:	4798      	blx	r3
 80072bc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80072be:	e029      	b.n	8007314 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80072c0:	6839      	ldr	r1, [r7, #0]
 80072c2:	6878      	ldr	r0, [r7, #4]
 80072c4:	f000 fa2c 	bl	8007720 <USBD_CtlError>
            err++;
 80072c8:	7afb      	ldrb	r3, [r7, #11]
 80072ca:	3301      	adds	r3, #1
 80072cc:	72fb      	strb	r3, [r7, #11]
          break;
 80072ce:	e021      	b.n	8007314 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80072d6:	699b      	ldr	r3, [r3, #24]
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d00b      	beq.n	80072f4 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80072e2:	699b      	ldr	r3, [r3, #24]
 80072e4:	687a      	ldr	r2, [r7, #4]
 80072e6:	7c12      	ldrb	r2, [r2, #16]
 80072e8:	f107 0108 	add.w	r1, r7, #8
 80072ec:	4610      	mov	r0, r2
 80072ee:	4798      	blx	r3
 80072f0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80072f2:	e00f      	b.n	8007314 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80072f4:	6839      	ldr	r1, [r7, #0]
 80072f6:	6878      	ldr	r0, [r7, #4]
 80072f8:	f000 fa12 	bl	8007720 <USBD_CtlError>
            err++;
 80072fc:	7afb      	ldrb	r3, [r7, #11]
 80072fe:	3301      	adds	r3, #1
 8007300:	72fb      	strb	r3, [r7, #11]
          break;
 8007302:	e007      	b.n	8007314 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8007304:	6839      	ldr	r1, [r7, #0]
 8007306:	6878      	ldr	r0, [r7, #4]
 8007308:	f000 fa0a 	bl	8007720 <USBD_CtlError>
          err++;
 800730c:	7afb      	ldrb	r3, [r7, #11]
 800730e:	3301      	adds	r3, #1
 8007310:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8007312:	e038      	b.n	8007386 <USBD_GetDescriptor+0x286>
 8007314:	e037      	b.n	8007386 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	7c1b      	ldrb	r3, [r3, #16]
 800731a:	2b00      	cmp	r3, #0
 800731c:	d109      	bne.n	8007332 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007324:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007326:	f107 0208 	add.w	r2, r7, #8
 800732a:	4610      	mov	r0, r2
 800732c:	4798      	blx	r3
 800732e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007330:	e029      	b.n	8007386 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007332:	6839      	ldr	r1, [r7, #0]
 8007334:	6878      	ldr	r0, [r7, #4]
 8007336:	f000 f9f3 	bl	8007720 <USBD_CtlError>
        err++;
 800733a:	7afb      	ldrb	r3, [r7, #11]
 800733c:	3301      	adds	r3, #1
 800733e:	72fb      	strb	r3, [r7, #11]
      break;
 8007340:	e021      	b.n	8007386 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	7c1b      	ldrb	r3, [r3, #16]
 8007346:	2b00      	cmp	r3, #0
 8007348:	d10d      	bne.n	8007366 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007352:	f107 0208 	add.w	r2, r7, #8
 8007356:	4610      	mov	r0, r2
 8007358:	4798      	blx	r3
 800735a:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	3301      	adds	r3, #1
 8007360:	2207      	movs	r2, #7
 8007362:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007364:	e00f      	b.n	8007386 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007366:	6839      	ldr	r1, [r7, #0]
 8007368:	6878      	ldr	r0, [r7, #4]
 800736a:	f000 f9d9 	bl	8007720 <USBD_CtlError>
        err++;
 800736e:	7afb      	ldrb	r3, [r7, #11]
 8007370:	3301      	adds	r3, #1
 8007372:	72fb      	strb	r3, [r7, #11]
      break;
 8007374:	e007      	b.n	8007386 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8007376:	6839      	ldr	r1, [r7, #0]
 8007378:	6878      	ldr	r0, [r7, #4]
 800737a:	f000 f9d1 	bl	8007720 <USBD_CtlError>
      err++;
 800737e:	7afb      	ldrb	r3, [r7, #11]
 8007380:	3301      	adds	r3, #1
 8007382:	72fb      	strb	r3, [r7, #11]
      break;
 8007384:	bf00      	nop
  }

  if (err != 0U)
 8007386:	7afb      	ldrb	r3, [r7, #11]
 8007388:	2b00      	cmp	r3, #0
 800738a:	d11c      	bne.n	80073c6 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800738c:	893b      	ldrh	r3, [r7, #8]
 800738e:	2b00      	cmp	r3, #0
 8007390:	d011      	beq.n	80073b6 <USBD_GetDescriptor+0x2b6>
 8007392:	683b      	ldr	r3, [r7, #0]
 8007394:	88db      	ldrh	r3, [r3, #6]
 8007396:	2b00      	cmp	r3, #0
 8007398:	d00d      	beq.n	80073b6 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800739a:	683b      	ldr	r3, [r7, #0]
 800739c:	88da      	ldrh	r2, [r3, #6]
 800739e:	893b      	ldrh	r3, [r7, #8]
 80073a0:	4293      	cmp	r3, r2
 80073a2:	bf28      	it	cs
 80073a4:	4613      	movcs	r3, r2
 80073a6:	b29b      	uxth	r3, r3
 80073a8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80073aa:	893b      	ldrh	r3, [r7, #8]
 80073ac:	461a      	mov	r2, r3
 80073ae:	68f9      	ldr	r1, [r7, #12]
 80073b0:	6878      	ldr	r0, [r7, #4]
 80073b2:	f000 fa1f 	bl	80077f4 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 80073b6:	683b      	ldr	r3, [r7, #0]
 80073b8:	88db      	ldrh	r3, [r3, #6]
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d104      	bne.n	80073c8 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 80073be:	6878      	ldr	r0, [r7, #4]
 80073c0:	f000 fa76 	bl	80078b0 <USBD_CtlSendStatus>
 80073c4:	e000      	b.n	80073c8 <USBD_GetDescriptor+0x2c8>
    return;
 80073c6:	bf00      	nop
    }
  }
}
 80073c8:	3710      	adds	r7, #16
 80073ca:	46bd      	mov	sp, r7
 80073cc:	bd80      	pop	{r7, pc}
 80073ce:	bf00      	nop

080073d0 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80073d0:	b580      	push	{r7, lr}
 80073d2:	b084      	sub	sp, #16
 80073d4:	af00      	add	r7, sp, #0
 80073d6:	6078      	str	r0, [r7, #4]
 80073d8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80073da:	683b      	ldr	r3, [r7, #0]
 80073dc:	889b      	ldrh	r3, [r3, #4]
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d130      	bne.n	8007444 <USBD_SetAddress+0x74>
 80073e2:	683b      	ldr	r3, [r7, #0]
 80073e4:	88db      	ldrh	r3, [r3, #6]
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d12c      	bne.n	8007444 <USBD_SetAddress+0x74>
 80073ea:	683b      	ldr	r3, [r7, #0]
 80073ec:	885b      	ldrh	r3, [r3, #2]
 80073ee:	2b7f      	cmp	r3, #127	; 0x7f
 80073f0:	d828      	bhi.n	8007444 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80073f2:	683b      	ldr	r3, [r7, #0]
 80073f4:	885b      	ldrh	r3, [r3, #2]
 80073f6:	b2db      	uxtb	r3, r3
 80073f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80073fc:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007404:	2b03      	cmp	r3, #3
 8007406:	d104      	bne.n	8007412 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8007408:	6839      	ldr	r1, [r7, #0]
 800740a:	6878      	ldr	r0, [r7, #4]
 800740c:	f000 f988 	bl	8007720 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007410:	e01c      	b.n	800744c <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	7bfa      	ldrb	r2, [r7, #15]
 8007416:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800741a:	7bfb      	ldrb	r3, [r7, #15]
 800741c:	4619      	mov	r1, r3
 800741e:	6878      	ldr	r0, [r7, #4]
 8007420:	f000 fe50 	bl	80080c4 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8007424:	6878      	ldr	r0, [r7, #4]
 8007426:	f000 fa43 	bl	80078b0 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800742a:	7bfb      	ldrb	r3, [r7, #15]
 800742c:	2b00      	cmp	r3, #0
 800742e:	d004      	beq.n	800743a <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	2202      	movs	r2, #2
 8007434:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007438:	e008      	b.n	800744c <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	2201      	movs	r2, #1
 800743e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007442:	e003      	b.n	800744c <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007444:	6839      	ldr	r1, [r7, #0]
 8007446:	6878      	ldr	r0, [r7, #4]
 8007448:	f000 f96a 	bl	8007720 <USBD_CtlError>
  }
}
 800744c:	bf00      	nop
 800744e:	3710      	adds	r7, #16
 8007450:	46bd      	mov	sp, r7
 8007452:	bd80      	pop	{r7, pc}

08007454 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007454:	b580      	push	{r7, lr}
 8007456:	b082      	sub	sp, #8
 8007458:	af00      	add	r7, sp, #0
 800745a:	6078      	str	r0, [r7, #4]
 800745c:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800745e:	683b      	ldr	r3, [r7, #0]
 8007460:	885b      	ldrh	r3, [r3, #2]
 8007462:	b2da      	uxtb	r2, r3
 8007464:	4b41      	ldr	r3, [pc, #260]	; (800756c <USBD_SetConfig+0x118>)
 8007466:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007468:	4b40      	ldr	r3, [pc, #256]	; (800756c <USBD_SetConfig+0x118>)
 800746a:	781b      	ldrb	r3, [r3, #0]
 800746c:	2b01      	cmp	r3, #1
 800746e:	d904      	bls.n	800747a <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8007470:	6839      	ldr	r1, [r7, #0]
 8007472:	6878      	ldr	r0, [r7, #4]
 8007474:	f000 f954 	bl	8007720 <USBD_CtlError>
 8007478:	e075      	b.n	8007566 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007480:	2b02      	cmp	r3, #2
 8007482:	d002      	beq.n	800748a <USBD_SetConfig+0x36>
 8007484:	2b03      	cmp	r3, #3
 8007486:	d023      	beq.n	80074d0 <USBD_SetConfig+0x7c>
 8007488:	e062      	b.n	8007550 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800748a:	4b38      	ldr	r3, [pc, #224]	; (800756c <USBD_SetConfig+0x118>)
 800748c:	781b      	ldrb	r3, [r3, #0]
 800748e:	2b00      	cmp	r3, #0
 8007490:	d01a      	beq.n	80074c8 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8007492:	4b36      	ldr	r3, [pc, #216]	; (800756c <USBD_SetConfig+0x118>)
 8007494:	781b      	ldrb	r3, [r3, #0]
 8007496:	461a      	mov	r2, r3
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	2203      	movs	r2, #3
 80074a0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80074a4:	4b31      	ldr	r3, [pc, #196]	; (800756c <USBD_SetConfig+0x118>)
 80074a6:	781b      	ldrb	r3, [r3, #0]
 80074a8:	4619      	mov	r1, r3
 80074aa:	6878      	ldr	r0, [r7, #4]
 80074ac:	f7ff f9f3 	bl	8006896 <USBD_SetClassConfig>
 80074b0:	4603      	mov	r3, r0
 80074b2:	2b02      	cmp	r3, #2
 80074b4:	d104      	bne.n	80074c0 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 80074b6:	6839      	ldr	r1, [r7, #0]
 80074b8:	6878      	ldr	r0, [r7, #4]
 80074ba:	f000 f931 	bl	8007720 <USBD_CtlError>
            return;
 80074be:	e052      	b.n	8007566 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 80074c0:	6878      	ldr	r0, [r7, #4]
 80074c2:	f000 f9f5 	bl	80078b0 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80074c6:	e04e      	b.n	8007566 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80074c8:	6878      	ldr	r0, [r7, #4]
 80074ca:	f000 f9f1 	bl	80078b0 <USBD_CtlSendStatus>
        break;
 80074ce:	e04a      	b.n	8007566 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 80074d0:	4b26      	ldr	r3, [pc, #152]	; (800756c <USBD_SetConfig+0x118>)
 80074d2:	781b      	ldrb	r3, [r3, #0]
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d112      	bne.n	80074fe <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	2202      	movs	r2, #2
 80074dc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 80074e0:	4b22      	ldr	r3, [pc, #136]	; (800756c <USBD_SetConfig+0x118>)
 80074e2:	781b      	ldrb	r3, [r3, #0]
 80074e4:	461a      	mov	r2, r3
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 80074ea:	4b20      	ldr	r3, [pc, #128]	; (800756c <USBD_SetConfig+0x118>)
 80074ec:	781b      	ldrb	r3, [r3, #0]
 80074ee:	4619      	mov	r1, r3
 80074f0:	6878      	ldr	r0, [r7, #4]
 80074f2:	f7ff f9ef 	bl	80068d4 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 80074f6:	6878      	ldr	r0, [r7, #4]
 80074f8:	f000 f9da 	bl	80078b0 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80074fc:	e033      	b.n	8007566 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 80074fe:	4b1b      	ldr	r3, [pc, #108]	; (800756c <USBD_SetConfig+0x118>)
 8007500:	781b      	ldrb	r3, [r3, #0]
 8007502:	461a      	mov	r2, r3
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	685b      	ldr	r3, [r3, #4]
 8007508:	429a      	cmp	r2, r3
 800750a:	d01d      	beq.n	8007548 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	685b      	ldr	r3, [r3, #4]
 8007510:	b2db      	uxtb	r3, r3
 8007512:	4619      	mov	r1, r3
 8007514:	6878      	ldr	r0, [r7, #4]
 8007516:	f7ff f9dd 	bl	80068d4 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800751a:	4b14      	ldr	r3, [pc, #80]	; (800756c <USBD_SetConfig+0x118>)
 800751c:	781b      	ldrb	r3, [r3, #0]
 800751e:	461a      	mov	r2, r3
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007524:	4b11      	ldr	r3, [pc, #68]	; (800756c <USBD_SetConfig+0x118>)
 8007526:	781b      	ldrb	r3, [r3, #0]
 8007528:	4619      	mov	r1, r3
 800752a:	6878      	ldr	r0, [r7, #4]
 800752c:	f7ff f9b3 	bl	8006896 <USBD_SetClassConfig>
 8007530:	4603      	mov	r3, r0
 8007532:	2b02      	cmp	r3, #2
 8007534:	d104      	bne.n	8007540 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8007536:	6839      	ldr	r1, [r7, #0]
 8007538:	6878      	ldr	r0, [r7, #4]
 800753a:	f000 f8f1 	bl	8007720 <USBD_CtlError>
            return;
 800753e:	e012      	b.n	8007566 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007540:	6878      	ldr	r0, [r7, #4]
 8007542:	f000 f9b5 	bl	80078b0 <USBD_CtlSendStatus>
        break;
 8007546:	e00e      	b.n	8007566 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007548:	6878      	ldr	r0, [r7, #4]
 800754a:	f000 f9b1 	bl	80078b0 <USBD_CtlSendStatus>
        break;
 800754e:	e00a      	b.n	8007566 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8007550:	6839      	ldr	r1, [r7, #0]
 8007552:	6878      	ldr	r0, [r7, #4]
 8007554:	f000 f8e4 	bl	8007720 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8007558:	4b04      	ldr	r3, [pc, #16]	; (800756c <USBD_SetConfig+0x118>)
 800755a:	781b      	ldrb	r3, [r3, #0]
 800755c:	4619      	mov	r1, r3
 800755e:	6878      	ldr	r0, [r7, #4]
 8007560:	f7ff f9b8 	bl	80068d4 <USBD_ClrClassConfig>
        break;
 8007564:	bf00      	nop
    }
  }
}
 8007566:	3708      	adds	r7, #8
 8007568:	46bd      	mov	sp, r7
 800756a:	bd80      	pop	{r7, pc}
 800756c:	200001a0 	.word	0x200001a0

08007570 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007570:	b580      	push	{r7, lr}
 8007572:	b082      	sub	sp, #8
 8007574:	af00      	add	r7, sp, #0
 8007576:	6078      	str	r0, [r7, #4]
 8007578:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800757a:	683b      	ldr	r3, [r7, #0]
 800757c:	88db      	ldrh	r3, [r3, #6]
 800757e:	2b01      	cmp	r3, #1
 8007580:	d004      	beq.n	800758c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007582:	6839      	ldr	r1, [r7, #0]
 8007584:	6878      	ldr	r0, [r7, #4]
 8007586:	f000 f8cb 	bl	8007720 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800758a:	e021      	b.n	80075d0 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007592:	2b01      	cmp	r3, #1
 8007594:	db17      	blt.n	80075c6 <USBD_GetConfig+0x56>
 8007596:	2b02      	cmp	r3, #2
 8007598:	dd02      	ble.n	80075a0 <USBD_GetConfig+0x30>
 800759a:	2b03      	cmp	r3, #3
 800759c:	d00b      	beq.n	80075b6 <USBD_GetConfig+0x46>
 800759e:	e012      	b.n	80075c6 <USBD_GetConfig+0x56>
        pdev->dev_default_config = 0U;
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	2200      	movs	r2, #0
 80075a4:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	3308      	adds	r3, #8
 80075aa:	2201      	movs	r2, #1
 80075ac:	4619      	mov	r1, r3
 80075ae:	6878      	ldr	r0, [r7, #4]
 80075b0:	f000 f920 	bl	80077f4 <USBD_CtlSendData>
        break;
 80075b4:	e00c      	b.n	80075d0 <USBD_GetConfig+0x60>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	3304      	adds	r3, #4
 80075ba:	2201      	movs	r2, #1
 80075bc:	4619      	mov	r1, r3
 80075be:	6878      	ldr	r0, [r7, #4]
 80075c0:	f000 f918 	bl	80077f4 <USBD_CtlSendData>
        break;
 80075c4:	e004      	b.n	80075d0 <USBD_GetConfig+0x60>
        USBD_CtlError(pdev, req);
 80075c6:	6839      	ldr	r1, [r7, #0]
 80075c8:	6878      	ldr	r0, [r7, #4]
 80075ca:	f000 f8a9 	bl	8007720 <USBD_CtlError>
        break;
 80075ce:	bf00      	nop
}
 80075d0:	bf00      	nop
 80075d2:	3708      	adds	r7, #8
 80075d4:	46bd      	mov	sp, r7
 80075d6:	bd80      	pop	{r7, pc}

080075d8 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80075d8:	b580      	push	{r7, lr}
 80075da:	b082      	sub	sp, #8
 80075dc:	af00      	add	r7, sp, #0
 80075de:	6078      	str	r0, [r7, #4]
 80075e0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80075e8:	3b01      	subs	r3, #1
 80075ea:	2b02      	cmp	r3, #2
 80075ec:	d81e      	bhi.n	800762c <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80075ee:	683b      	ldr	r3, [r7, #0]
 80075f0:	88db      	ldrh	r3, [r3, #6]
 80075f2:	2b02      	cmp	r3, #2
 80075f4:	d004      	beq.n	8007600 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 80075f6:	6839      	ldr	r1, [r7, #0]
 80075f8:	6878      	ldr	r0, [r7, #4]
 80075fa:	f000 f891 	bl	8007720 <USBD_CtlError>
        break;
 80075fe:	e01a      	b.n	8007636 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	2201      	movs	r2, #1
 8007604:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800760c:	2b00      	cmp	r3, #0
 800760e:	d005      	beq.n	800761c <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	68db      	ldr	r3, [r3, #12]
 8007614:	f043 0202 	orr.w	r2, r3, #2
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	330c      	adds	r3, #12
 8007620:	2202      	movs	r2, #2
 8007622:	4619      	mov	r1, r3
 8007624:	6878      	ldr	r0, [r7, #4]
 8007626:	f000 f8e5 	bl	80077f4 <USBD_CtlSendData>
      break;
 800762a:	e004      	b.n	8007636 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800762c:	6839      	ldr	r1, [r7, #0]
 800762e:	6878      	ldr	r0, [r7, #4]
 8007630:	f000 f876 	bl	8007720 <USBD_CtlError>
      break;
 8007634:	bf00      	nop
  }
}
 8007636:	bf00      	nop
 8007638:	3708      	adds	r7, #8
 800763a:	46bd      	mov	sp, r7
 800763c:	bd80      	pop	{r7, pc}

0800763e <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800763e:	b580      	push	{r7, lr}
 8007640:	b082      	sub	sp, #8
 8007642:	af00      	add	r7, sp, #0
 8007644:	6078      	str	r0, [r7, #4]
 8007646:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007648:	683b      	ldr	r3, [r7, #0]
 800764a:	885b      	ldrh	r3, [r3, #2]
 800764c:	2b01      	cmp	r3, #1
 800764e:	d106      	bne.n	800765e <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	2201      	movs	r2, #1
 8007654:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8007658:	6878      	ldr	r0, [r7, #4]
 800765a:	f000 f929 	bl	80078b0 <USBD_CtlSendStatus>
  }
}
 800765e:	bf00      	nop
 8007660:	3708      	adds	r7, #8
 8007662:	46bd      	mov	sp, r7
 8007664:	bd80      	pop	{r7, pc}

08007666 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007666:	b580      	push	{r7, lr}
 8007668:	b082      	sub	sp, #8
 800766a:	af00      	add	r7, sp, #0
 800766c:	6078      	str	r0, [r7, #4]
 800766e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007676:	3b01      	subs	r3, #1
 8007678:	2b02      	cmp	r3, #2
 800767a:	d80b      	bhi.n	8007694 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800767c:	683b      	ldr	r3, [r7, #0]
 800767e:	885b      	ldrh	r3, [r3, #2]
 8007680:	2b01      	cmp	r3, #1
 8007682:	d10c      	bne.n	800769e <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	2200      	movs	r2, #0
 8007688:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 800768c:	6878      	ldr	r0, [r7, #4]
 800768e:	f000 f90f 	bl	80078b0 <USBD_CtlSendStatus>
      }
      break;
 8007692:	e004      	b.n	800769e <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8007694:	6839      	ldr	r1, [r7, #0]
 8007696:	6878      	ldr	r0, [r7, #4]
 8007698:	f000 f842 	bl	8007720 <USBD_CtlError>
      break;
 800769c:	e000      	b.n	80076a0 <USBD_ClrFeature+0x3a>
      break;
 800769e:	bf00      	nop
  }
}
 80076a0:	bf00      	nop
 80076a2:	3708      	adds	r7, #8
 80076a4:	46bd      	mov	sp, r7
 80076a6:	bd80      	pop	{r7, pc}

080076a8 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80076a8:	b480      	push	{r7}
 80076aa:	b083      	sub	sp, #12
 80076ac:	af00      	add	r7, sp, #0
 80076ae:	6078      	str	r0, [r7, #4]
 80076b0:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 80076b2:	683b      	ldr	r3, [r7, #0]
 80076b4:	781a      	ldrb	r2, [r3, #0]
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 80076ba:	683b      	ldr	r3, [r7, #0]
 80076bc:	785a      	ldrb	r2, [r3, #1]
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 80076c2:	683b      	ldr	r3, [r7, #0]
 80076c4:	3302      	adds	r3, #2
 80076c6:	781b      	ldrb	r3, [r3, #0]
 80076c8:	b29a      	uxth	r2, r3
 80076ca:	683b      	ldr	r3, [r7, #0]
 80076cc:	3303      	adds	r3, #3
 80076ce:	781b      	ldrb	r3, [r3, #0]
 80076d0:	b29b      	uxth	r3, r3
 80076d2:	021b      	lsls	r3, r3, #8
 80076d4:	b29b      	uxth	r3, r3
 80076d6:	4413      	add	r3, r2
 80076d8:	b29a      	uxth	r2, r3
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 80076de:	683b      	ldr	r3, [r7, #0]
 80076e0:	3304      	adds	r3, #4
 80076e2:	781b      	ldrb	r3, [r3, #0]
 80076e4:	b29a      	uxth	r2, r3
 80076e6:	683b      	ldr	r3, [r7, #0]
 80076e8:	3305      	adds	r3, #5
 80076ea:	781b      	ldrb	r3, [r3, #0]
 80076ec:	b29b      	uxth	r3, r3
 80076ee:	021b      	lsls	r3, r3, #8
 80076f0:	b29b      	uxth	r3, r3
 80076f2:	4413      	add	r3, r2
 80076f4:	b29a      	uxth	r2, r3
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 80076fa:	683b      	ldr	r3, [r7, #0]
 80076fc:	3306      	adds	r3, #6
 80076fe:	781b      	ldrb	r3, [r3, #0]
 8007700:	b29a      	uxth	r2, r3
 8007702:	683b      	ldr	r3, [r7, #0]
 8007704:	3307      	adds	r3, #7
 8007706:	781b      	ldrb	r3, [r3, #0]
 8007708:	b29b      	uxth	r3, r3
 800770a:	021b      	lsls	r3, r3, #8
 800770c:	b29b      	uxth	r3, r3
 800770e:	4413      	add	r3, r2
 8007710:	b29a      	uxth	r2, r3
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	80da      	strh	r2, [r3, #6]

}
 8007716:	bf00      	nop
 8007718:	370c      	adds	r7, #12
 800771a:	46bd      	mov	sp, r7
 800771c:	bc80      	pop	{r7}
 800771e:	4770      	bx	lr

08007720 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8007720:	b580      	push	{r7, lr}
 8007722:	b082      	sub	sp, #8
 8007724:	af00      	add	r7, sp, #0
 8007726:	6078      	str	r0, [r7, #4]
 8007728:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800772a:	2180      	movs	r1, #128	; 0x80
 800772c:	6878      	ldr	r0, [r7, #4]
 800772e:	f000 fc5f 	bl	8007ff0 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8007732:	2100      	movs	r1, #0
 8007734:	6878      	ldr	r0, [r7, #4]
 8007736:	f000 fc5b 	bl	8007ff0 <USBD_LL_StallEP>
}
 800773a:	bf00      	nop
 800773c:	3708      	adds	r7, #8
 800773e:	46bd      	mov	sp, r7
 8007740:	bd80      	pop	{r7, pc}

08007742 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007742:	b580      	push	{r7, lr}
 8007744:	b086      	sub	sp, #24
 8007746:	af00      	add	r7, sp, #0
 8007748:	60f8      	str	r0, [r7, #12]
 800774a:	60b9      	str	r1, [r7, #8]
 800774c:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800774e:	2300      	movs	r3, #0
 8007750:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	2b00      	cmp	r3, #0
 8007756:	d032      	beq.n	80077be <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8007758:	68f8      	ldr	r0, [r7, #12]
 800775a:	f000 f834 	bl	80077c6 <USBD_GetLen>
 800775e:	4603      	mov	r3, r0
 8007760:	3301      	adds	r3, #1
 8007762:	b29b      	uxth	r3, r3
 8007764:	005b      	lsls	r3, r3, #1
 8007766:	b29a      	uxth	r2, r3
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800776c:	7dfb      	ldrb	r3, [r7, #23]
 800776e:	1c5a      	adds	r2, r3, #1
 8007770:	75fa      	strb	r2, [r7, #23]
 8007772:	461a      	mov	r2, r3
 8007774:	68bb      	ldr	r3, [r7, #8]
 8007776:	4413      	add	r3, r2
 8007778:	687a      	ldr	r2, [r7, #4]
 800777a:	7812      	ldrb	r2, [r2, #0]
 800777c:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800777e:	7dfb      	ldrb	r3, [r7, #23]
 8007780:	1c5a      	adds	r2, r3, #1
 8007782:	75fa      	strb	r2, [r7, #23]
 8007784:	461a      	mov	r2, r3
 8007786:	68bb      	ldr	r3, [r7, #8]
 8007788:	4413      	add	r3, r2
 800778a:	2203      	movs	r2, #3
 800778c:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800778e:	e012      	b.n	80077b6 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	1c5a      	adds	r2, r3, #1
 8007794:	60fa      	str	r2, [r7, #12]
 8007796:	7dfa      	ldrb	r2, [r7, #23]
 8007798:	1c51      	adds	r1, r2, #1
 800779a:	75f9      	strb	r1, [r7, #23]
 800779c:	4611      	mov	r1, r2
 800779e:	68ba      	ldr	r2, [r7, #8]
 80077a0:	440a      	add	r2, r1
 80077a2:	781b      	ldrb	r3, [r3, #0]
 80077a4:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 80077a6:	7dfb      	ldrb	r3, [r7, #23]
 80077a8:	1c5a      	adds	r2, r3, #1
 80077aa:	75fa      	strb	r2, [r7, #23]
 80077ac:	461a      	mov	r2, r3
 80077ae:	68bb      	ldr	r3, [r7, #8]
 80077b0:	4413      	add	r3, r2
 80077b2:	2200      	movs	r2, #0
 80077b4:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	781b      	ldrb	r3, [r3, #0]
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d1e8      	bne.n	8007790 <USBD_GetString+0x4e>
    }
  }
}
 80077be:	bf00      	nop
 80077c0:	3718      	adds	r7, #24
 80077c2:	46bd      	mov	sp, r7
 80077c4:	bd80      	pop	{r7, pc}

080077c6 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80077c6:	b480      	push	{r7}
 80077c8:	b085      	sub	sp, #20
 80077ca:	af00      	add	r7, sp, #0
 80077cc:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80077ce:	2300      	movs	r3, #0
 80077d0:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 80077d2:	e005      	b.n	80077e0 <USBD_GetLen+0x1a>
  {
    len++;
 80077d4:	7bfb      	ldrb	r3, [r7, #15]
 80077d6:	3301      	adds	r3, #1
 80077d8:	73fb      	strb	r3, [r7, #15]
    buf++;
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	3301      	adds	r3, #1
 80077de:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	781b      	ldrb	r3, [r3, #0]
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d1f5      	bne.n	80077d4 <USBD_GetLen+0xe>
  }

  return len;
 80077e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80077ea:	4618      	mov	r0, r3
 80077ec:	3714      	adds	r7, #20
 80077ee:	46bd      	mov	sp, r7
 80077f0:	bc80      	pop	{r7}
 80077f2:	4770      	bx	lr

080077f4 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 80077f4:	b580      	push	{r7, lr}
 80077f6:	b084      	sub	sp, #16
 80077f8:	af00      	add	r7, sp, #0
 80077fa:	60f8      	str	r0, [r7, #12]
 80077fc:	60b9      	str	r1, [r7, #8]
 80077fe:	4613      	mov	r3, r2
 8007800:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	2202      	movs	r2, #2
 8007806:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800780a:	88fa      	ldrh	r2, [r7, #6]
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8007810:	88fa      	ldrh	r2, [r7, #6]
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007816:	88fb      	ldrh	r3, [r7, #6]
 8007818:	68ba      	ldr	r2, [r7, #8]
 800781a:	2100      	movs	r1, #0
 800781c:	68f8      	ldr	r0, [r7, #12]
 800781e:	f000 fc70 	bl	8008102 <USBD_LL_Transmit>

  return USBD_OK;
 8007822:	2300      	movs	r3, #0
}
 8007824:	4618      	mov	r0, r3
 8007826:	3710      	adds	r7, #16
 8007828:	46bd      	mov	sp, r7
 800782a:	bd80      	pop	{r7, pc}

0800782c <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800782c:	b580      	push	{r7, lr}
 800782e:	b084      	sub	sp, #16
 8007830:	af00      	add	r7, sp, #0
 8007832:	60f8      	str	r0, [r7, #12]
 8007834:	60b9      	str	r1, [r7, #8]
 8007836:	4613      	mov	r3, r2
 8007838:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800783a:	88fb      	ldrh	r3, [r7, #6]
 800783c:	68ba      	ldr	r2, [r7, #8]
 800783e:	2100      	movs	r1, #0
 8007840:	68f8      	ldr	r0, [r7, #12]
 8007842:	f000 fc5e 	bl	8008102 <USBD_LL_Transmit>

  return USBD_OK;
 8007846:	2300      	movs	r3, #0
}
 8007848:	4618      	mov	r0, r3
 800784a:	3710      	adds	r7, #16
 800784c:	46bd      	mov	sp, r7
 800784e:	bd80      	pop	{r7, pc}

08007850 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8007850:	b580      	push	{r7, lr}
 8007852:	b084      	sub	sp, #16
 8007854:	af00      	add	r7, sp, #0
 8007856:	60f8      	str	r0, [r7, #12]
 8007858:	60b9      	str	r1, [r7, #8]
 800785a:	4613      	mov	r3, r2
 800785c:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	2203      	movs	r2, #3
 8007862:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8007866:	88fa      	ldrh	r2, [r7, #6]
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 800786e:	88fa      	ldrh	r2, [r7, #6]
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007876:	88fb      	ldrh	r3, [r7, #6]
 8007878:	68ba      	ldr	r2, [r7, #8]
 800787a:	2100      	movs	r1, #0
 800787c:	68f8      	ldr	r0, [r7, #12]
 800787e:	f000 fc63 	bl	8008148 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007882:	2300      	movs	r3, #0
}
 8007884:	4618      	mov	r0, r3
 8007886:	3710      	adds	r7, #16
 8007888:	46bd      	mov	sp, r7
 800788a:	bd80      	pop	{r7, pc}

0800788c <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800788c:	b580      	push	{r7, lr}
 800788e:	b084      	sub	sp, #16
 8007890:	af00      	add	r7, sp, #0
 8007892:	60f8      	str	r0, [r7, #12]
 8007894:	60b9      	str	r1, [r7, #8]
 8007896:	4613      	mov	r3, r2
 8007898:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800789a:	88fb      	ldrh	r3, [r7, #6]
 800789c:	68ba      	ldr	r2, [r7, #8]
 800789e:	2100      	movs	r1, #0
 80078a0:	68f8      	ldr	r0, [r7, #12]
 80078a2:	f000 fc51 	bl	8008148 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80078a6:	2300      	movs	r3, #0
}
 80078a8:	4618      	mov	r0, r3
 80078aa:	3710      	adds	r7, #16
 80078ac:	46bd      	mov	sp, r7
 80078ae:	bd80      	pop	{r7, pc}

080078b0 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80078b0:	b580      	push	{r7, lr}
 80078b2:	b082      	sub	sp, #8
 80078b4:	af00      	add	r7, sp, #0
 80078b6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	2204      	movs	r2, #4
 80078bc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80078c0:	2300      	movs	r3, #0
 80078c2:	2200      	movs	r2, #0
 80078c4:	2100      	movs	r1, #0
 80078c6:	6878      	ldr	r0, [r7, #4]
 80078c8:	f000 fc1b 	bl	8008102 <USBD_LL_Transmit>

  return USBD_OK;
 80078cc:	2300      	movs	r3, #0
}
 80078ce:	4618      	mov	r0, r3
 80078d0:	3708      	adds	r7, #8
 80078d2:	46bd      	mov	sp, r7
 80078d4:	bd80      	pop	{r7, pc}

080078d6 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80078d6:	b580      	push	{r7, lr}
 80078d8:	b082      	sub	sp, #8
 80078da:	af00      	add	r7, sp, #0
 80078dc:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	2205      	movs	r2, #5
 80078e2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80078e6:	2300      	movs	r3, #0
 80078e8:	2200      	movs	r2, #0
 80078ea:	2100      	movs	r1, #0
 80078ec:	6878      	ldr	r0, [r7, #4]
 80078ee:	f000 fc2b 	bl	8008148 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80078f2:	2300      	movs	r3, #0
}
 80078f4:	4618      	mov	r0, r3
 80078f6:	3708      	adds	r7, #8
 80078f8:	46bd      	mov	sp, r7
 80078fa:	bd80      	pop	{r7, pc}

080078fc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80078fc:	b580      	push	{r7, lr}
 80078fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007900:	2200      	movs	r2, #0
 8007902:	4912      	ldr	r1, [pc, #72]	; (800794c <MX_USB_DEVICE_Init+0x50>)
 8007904:	4812      	ldr	r0, [pc, #72]	; (8007950 <MX_USB_DEVICE_Init+0x54>)
 8007906:	f7fe ff6c 	bl	80067e2 <USBD_Init>
 800790a:	4603      	mov	r3, r0
 800790c:	2b00      	cmp	r3, #0
 800790e:	d001      	beq.n	8007914 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007910:	f7f8 fe7c 	bl	800060c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8007914:	490f      	ldr	r1, [pc, #60]	; (8007954 <MX_USB_DEVICE_Init+0x58>)
 8007916:	480e      	ldr	r0, [pc, #56]	; (8007950 <MX_USB_DEVICE_Init+0x54>)
 8007918:	f7fe ff8e 	bl	8006838 <USBD_RegisterClass>
 800791c:	4603      	mov	r3, r0
 800791e:	2b00      	cmp	r3, #0
 8007920:	d001      	beq.n	8007926 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8007922:	f7f8 fe73 	bl	800060c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8007926:	490c      	ldr	r1, [pc, #48]	; (8007958 <MX_USB_DEVICE_Init+0x5c>)
 8007928:	4809      	ldr	r0, [pc, #36]	; (8007950 <MX_USB_DEVICE_Init+0x54>)
 800792a:	f7fe febf 	bl	80066ac <USBD_CDC_RegisterInterface>
 800792e:	4603      	mov	r3, r0
 8007930:	2b00      	cmp	r3, #0
 8007932:	d001      	beq.n	8007938 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8007934:	f7f8 fe6a 	bl	800060c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007938:	4805      	ldr	r0, [pc, #20]	; (8007950 <MX_USB_DEVICE_Init+0x54>)
 800793a:	f7fe ff96 	bl	800686a <USBD_Start>
 800793e:	4603      	mov	r3, r0
 8007940:	2b00      	cmp	r3, #0
 8007942:	d001      	beq.n	8007948 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8007944:	f7f8 fe62 	bl	800060c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007948:	bf00      	nop
 800794a:	bd80      	pop	{r7, pc}
 800794c:	20000130 	.word	0x20000130
 8007950:	20000cb4 	.word	0x20000cb4
 8007954:	2000001c 	.word	0x2000001c
 8007958:	20000120 	.word	0x20000120

0800795c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800795c:	b580      	push	{r7, lr}
 800795e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8007960:	2200      	movs	r2, #0
 8007962:	4905      	ldr	r1, [pc, #20]	; (8007978 <CDC_Init_FS+0x1c>)
 8007964:	4805      	ldr	r0, [pc, #20]	; (800797c <CDC_Init_FS+0x20>)
 8007966:	f7fe feb7 	bl	80066d8 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800796a:	4905      	ldr	r1, [pc, #20]	; (8007980 <CDC_Init_FS+0x24>)
 800796c:	4803      	ldr	r0, [pc, #12]	; (800797c <CDC_Init_FS+0x20>)
 800796e:	f7fe fecc 	bl	800670a <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8007972:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8007974:	4618      	mov	r0, r3
 8007976:	bd80      	pop	{r7, pc}
 8007978:	20000f88 	.word	0x20000f88
 800797c:	20000cb4 	.word	0x20000cb4
 8007980:	20000f78 	.word	0x20000f78

08007984 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8007984:	b480      	push	{r7}
 8007986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8007988:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800798a:	4618      	mov	r0, r3
 800798c:	46bd      	mov	sp, r7
 800798e:	bc80      	pop	{r7}
 8007990:	4770      	bx	lr
	...

08007994 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8007994:	b480      	push	{r7}
 8007996:	b083      	sub	sp, #12
 8007998:	af00      	add	r7, sp, #0
 800799a:	4603      	mov	r3, r0
 800799c:	6039      	str	r1, [r7, #0]
 800799e:	71fb      	strb	r3, [r7, #7]
 80079a0:	4613      	mov	r3, r2
 80079a2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80079a4:	79fb      	ldrb	r3, [r7, #7]
 80079a6:	2b23      	cmp	r3, #35	; 0x23
 80079a8:	d84a      	bhi.n	8007a40 <CDC_Control_FS+0xac>
 80079aa:	a201      	add	r2, pc, #4	; (adr r2, 80079b0 <CDC_Control_FS+0x1c>)
 80079ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079b0:	08007a41 	.word	0x08007a41
 80079b4:	08007a41 	.word	0x08007a41
 80079b8:	08007a41 	.word	0x08007a41
 80079bc:	08007a41 	.word	0x08007a41
 80079c0:	08007a41 	.word	0x08007a41
 80079c4:	08007a41 	.word	0x08007a41
 80079c8:	08007a41 	.word	0x08007a41
 80079cc:	08007a41 	.word	0x08007a41
 80079d0:	08007a41 	.word	0x08007a41
 80079d4:	08007a41 	.word	0x08007a41
 80079d8:	08007a41 	.word	0x08007a41
 80079dc:	08007a41 	.word	0x08007a41
 80079e0:	08007a41 	.word	0x08007a41
 80079e4:	08007a41 	.word	0x08007a41
 80079e8:	08007a41 	.word	0x08007a41
 80079ec:	08007a41 	.word	0x08007a41
 80079f0:	08007a41 	.word	0x08007a41
 80079f4:	08007a41 	.word	0x08007a41
 80079f8:	08007a41 	.word	0x08007a41
 80079fc:	08007a41 	.word	0x08007a41
 8007a00:	08007a41 	.word	0x08007a41
 8007a04:	08007a41 	.word	0x08007a41
 8007a08:	08007a41 	.word	0x08007a41
 8007a0c:	08007a41 	.word	0x08007a41
 8007a10:	08007a41 	.word	0x08007a41
 8007a14:	08007a41 	.word	0x08007a41
 8007a18:	08007a41 	.word	0x08007a41
 8007a1c:	08007a41 	.word	0x08007a41
 8007a20:	08007a41 	.word	0x08007a41
 8007a24:	08007a41 	.word	0x08007a41
 8007a28:	08007a41 	.word	0x08007a41
 8007a2c:	08007a41 	.word	0x08007a41
 8007a30:	08007a41 	.word	0x08007a41
 8007a34:	08007a41 	.word	0x08007a41
 8007a38:	08007a41 	.word	0x08007a41
 8007a3c:	08007a41 	.word	0x08007a41
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8007a40:	bf00      	nop
  }

  return (USBD_OK);
 8007a42:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8007a44:	4618      	mov	r0, r3
 8007a46:	370c      	adds	r7, #12
 8007a48:	46bd      	mov	sp, r7
 8007a4a:	bc80      	pop	{r7}
 8007a4c:	4770      	bx	lr
 8007a4e:	bf00      	nop

08007a50 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8007a50:	b580      	push	{r7, lr}
 8007a52:	b082      	sub	sp, #8
 8007a54:	af00      	add	r7, sp, #0
 8007a56:	6078      	str	r0, [r7, #4]
 8007a58:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8007a5a:	6879      	ldr	r1, [r7, #4]
 8007a5c:	4807      	ldr	r0, [pc, #28]	; (8007a7c <CDC_Receive_FS+0x2c>)
 8007a5e:	f7fe fe54 	bl	800670a <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8007a62:	4806      	ldr	r0, [pc, #24]	; (8007a7c <CDC_Receive_FS+0x2c>)
 8007a64:	f7fe fe93 	bl	800678e <USBD_CDC_ReceivePacket>
  CDC_ReciveCallBack(Buf, Len);
 8007a68:	6839      	ldr	r1, [r7, #0]
 8007a6a:	6878      	ldr	r0, [r7, #4]
 8007a6c:	f7f8 fd26 	bl	80004bc <CDC_ReciveCallBack>
  return (USBD_OK);
 8007a70:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8007a72:	4618      	mov	r0, r3
 8007a74:	3708      	adds	r7, #8
 8007a76:	46bd      	mov	sp, r7
 8007a78:	bd80      	pop	{r7, pc}
 8007a7a:	bf00      	nop
 8007a7c:	20000cb4 	.word	0x20000cb4

08007a80 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8007a80:	b580      	push	{r7, lr}
 8007a82:	b084      	sub	sp, #16
 8007a84:	af00      	add	r7, sp, #0
 8007a86:	6078      	str	r0, [r7, #4]
 8007a88:	460b      	mov	r3, r1
 8007a8a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8007a8c:	2300      	movs	r3, #0
 8007a8e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8007a90:	4b0d      	ldr	r3, [pc, #52]	; (8007ac8 <CDC_Transmit_FS+0x48>)
 8007a92:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a96:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8007a98:	68bb      	ldr	r3, [r7, #8]
 8007a9a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d001      	beq.n	8007aa6 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8007aa2:	2301      	movs	r3, #1
 8007aa4:	e00b      	b.n	8007abe <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8007aa6:	887b      	ldrh	r3, [r7, #2]
 8007aa8:	461a      	mov	r2, r3
 8007aaa:	6879      	ldr	r1, [r7, #4]
 8007aac:	4806      	ldr	r0, [pc, #24]	; (8007ac8 <CDC_Transmit_FS+0x48>)
 8007aae:	f7fe fe13 	bl	80066d8 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8007ab2:	4805      	ldr	r0, [pc, #20]	; (8007ac8 <CDC_Transmit_FS+0x48>)
 8007ab4:	f7fe fe3c 	bl	8006730 <USBD_CDC_TransmitPacket>
 8007ab8:	4603      	mov	r3, r0
 8007aba:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8007abc:	7bfb      	ldrb	r3, [r7, #15]
}
 8007abe:	4618      	mov	r0, r3
 8007ac0:	3710      	adds	r7, #16
 8007ac2:	46bd      	mov	sp, r7
 8007ac4:	bd80      	pop	{r7, pc}
 8007ac6:	bf00      	nop
 8007ac8:	20000cb4 	.word	0x20000cb4

08007acc <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007acc:	b480      	push	{r7}
 8007ace:	b083      	sub	sp, #12
 8007ad0:	af00      	add	r7, sp, #0
 8007ad2:	4603      	mov	r3, r0
 8007ad4:	6039      	str	r1, [r7, #0]
 8007ad6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007ad8:	683b      	ldr	r3, [r7, #0]
 8007ada:	2212      	movs	r2, #18
 8007adc:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8007ade:	4b03      	ldr	r3, [pc, #12]	; (8007aec <USBD_FS_DeviceDescriptor+0x20>)
}
 8007ae0:	4618      	mov	r0, r3
 8007ae2:	370c      	adds	r7, #12
 8007ae4:	46bd      	mov	sp, r7
 8007ae6:	bc80      	pop	{r7}
 8007ae8:	4770      	bx	lr
 8007aea:	bf00      	nop
 8007aec:	2000014c 	.word	0x2000014c

08007af0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007af0:	b480      	push	{r7}
 8007af2:	b083      	sub	sp, #12
 8007af4:	af00      	add	r7, sp, #0
 8007af6:	4603      	mov	r3, r0
 8007af8:	6039      	str	r1, [r7, #0]
 8007afa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007afc:	683b      	ldr	r3, [r7, #0]
 8007afe:	2204      	movs	r2, #4
 8007b00:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8007b02:	4b03      	ldr	r3, [pc, #12]	; (8007b10 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007b04:	4618      	mov	r0, r3
 8007b06:	370c      	adds	r7, #12
 8007b08:	46bd      	mov	sp, r7
 8007b0a:	bc80      	pop	{r7}
 8007b0c:	4770      	bx	lr
 8007b0e:	bf00      	nop
 8007b10:	20000160 	.word	0x20000160

08007b14 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007b14:	b580      	push	{r7, lr}
 8007b16:	b082      	sub	sp, #8
 8007b18:	af00      	add	r7, sp, #0
 8007b1a:	4603      	mov	r3, r0
 8007b1c:	6039      	str	r1, [r7, #0]
 8007b1e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007b20:	79fb      	ldrb	r3, [r7, #7]
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d105      	bne.n	8007b32 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007b26:	683a      	ldr	r2, [r7, #0]
 8007b28:	4907      	ldr	r1, [pc, #28]	; (8007b48 <USBD_FS_ProductStrDescriptor+0x34>)
 8007b2a:	4808      	ldr	r0, [pc, #32]	; (8007b4c <USBD_FS_ProductStrDescriptor+0x38>)
 8007b2c:	f7ff fe09 	bl	8007742 <USBD_GetString>
 8007b30:	e004      	b.n	8007b3c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007b32:	683a      	ldr	r2, [r7, #0]
 8007b34:	4904      	ldr	r1, [pc, #16]	; (8007b48 <USBD_FS_ProductStrDescriptor+0x34>)
 8007b36:	4805      	ldr	r0, [pc, #20]	; (8007b4c <USBD_FS_ProductStrDescriptor+0x38>)
 8007b38:	f7ff fe03 	bl	8007742 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007b3c:	4b02      	ldr	r3, [pc, #8]	; (8007b48 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8007b3e:	4618      	mov	r0, r3
 8007b40:	3708      	adds	r7, #8
 8007b42:	46bd      	mov	sp, r7
 8007b44:	bd80      	pop	{r7, pc}
 8007b46:	bf00      	nop
 8007b48:	20000f98 	.word	0x20000f98
 8007b4c:	080082fc 	.word	0x080082fc

08007b50 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007b50:	b580      	push	{r7, lr}
 8007b52:	b082      	sub	sp, #8
 8007b54:	af00      	add	r7, sp, #0
 8007b56:	4603      	mov	r3, r0
 8007b58:	6039      	str	r1, [r7, #0]
 8007b5a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007b5c:	683a      	ldr	r2, [r7, #0]
 8007b5e:	4904      	ldr	r1, [pc, #16]	; (8007b70 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007b60:	4804      	ldr	r0, [pc, #16]	; (8007b74 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8007b62:	f7ff fdee 	bl	8007742 <USBD_GetString>
  return USBD_StrDesc;
 8007b66:	4b02      	ldr	r3, [pc, #8]	; (8007b70 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007b68:	4618      	mov	r0, r3
 8007b6a:	3708      	adds	r7, #8
 8007b6c:	46bd      	mov	sp, r7
 8007b6e:	bd80      	pop	{r7, pc}
 8007b70:	20000f98 	.word	0x20000f98
 8007b74:	08008314 	.word	0x08008314

08007b78 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007b78:	b580      	push	{r7, lr}
 8007b7a:	b082      	sub	sp, #8
 8007b7c:	af00      	add	r7, sp, #0
 8007b7e:	4603      	mov	r3, r0
 8007b80:	6039      	str	r1, [r7, #0]
 8007b82:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007b84:	683b      	ldr	r3, [r7, #0]
 8007b86:	221a      	movs	r2, #26
 8007b88:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007b8a:	f000 f843 	bl	8007c14 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8007b8e:	4b02      	ldr	r3, [pc, #8]	; (8007b98 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007b90:	4618      	mov	r0, r3
 8007b92:	3708      	adds	r7, #8
 8007b94:	46bd      	mov	sp, r7
 8007b96:	bd80      	pop	{r7, pc}
 8007b98:	20000164 	.word	0x20000164

08007b9c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007b9c:	b580      	push	{r7, lr}
 8007b9e:	b082      	sub	sp, #8
 8007ba0:	af00      	add	r7, sp, #0
 8007ba2:	4603      	mov	r3, r0
 8007ba4:	6039      	str	r1, [r7, #0]
 8007ba6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007ba8:	79fb      	ldrb	r3, [r7, #7]
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d105      	bne.n	8007bba <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007bae:	683a      	ldr	r2, [r7, #0]
 8007bb0:	4907      	ldr	r1, [pc, #28]	; (8007bd0 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007bb2:	4808      	ldr	r0, [pc, #32]	; (8007bd4 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007bb4:	f7ff fdc5 	bl	8007742 <USBD_GetString>
 8007bb8:	e004      	b.n	8007bc4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007bba:	683a      	ldr	r2, [r7, #0]
 8007bbc:	4904      	ldr	r1, [pc, #16]	; (8007bd0 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007bbe:	4805      	ldr	r0, [pc, #20]	; (8007bd4 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007bc0:	f7ff fdbf 	bl	8007742 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007bc4:	4b02      	ldr	r3, [pc, #8]	; (8007bd0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8007bc6:	4618      	mov	r0, r3
 8007bc8:	3708      	adds	r7, #8
 8007bca:	46bd      	mov	sp, r7
 8007bcc:	bd80      	pop	{r7, pc}
 8007bce:	bf00      	nop
 8007bd0:	20000f98 	.word	0x20000f98
 8007bd4:	08008328 	.word	0x08008328

08007bd8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007bd8:	b580      	push	{r7, lr}
 8007bda:	b082      	sub	sp, #8
 8007bdc:	af00      	add	r7, sp, #0
 8007bde:	4603      	mov	r3, r0
 8007be0:	6039      	str	r1, [r7, #0]
 8007be2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007be4:	79fb      	ldrb	r3, [r7, #7]
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d105      	bne.n	8007bf6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007bea:	683a      	ldr	r2, [r7, #0]
 8007bec:	4907      	ldr	r1, [pc, #28]	; (8007c0c <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007bee:	4808      	ldr	r0, [pc, #32]	; (8007c10 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007bf0:	f7ff fda7 	bl	8007742 <USBD_GetString>
 8007bf4:	e004      	b.n	8007c00 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007bf6:	683a      	ldr	r2, [r7, #0]
 8007bf8:	4904      	ldr	r1, [pc, #16]	; (8007c0c <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007bfa:	4805      	ldr	r0, [pc, #20]	; (8007c10 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007bfc:	f7ff fda1 	bl	8007742 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007c00:	4b02      	ldr	r3, [pc, #8]	; (8007c0c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8007c02:	4618      	mov	r0, r3
 8007c04:	3708      	adds	r7, #8
 8007c06:	46bd      	mov	sp, r7
 8007c08:	bd80      	pop	{r7, pc}
 8007c0a:	bf00      	nop
 8007c0c:	20000f98 	.word	0x20000f98
 8007c10:	08008334 	.word	0x08008334

08007c14 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007c14:	b580      	push	{r7, lr}
 8007c16:	b084      	sub	sp, #16
 8007c18:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007c1a:	4b0f      	ldr	r3, [pc, #60]	; (8007c58 <Get_SerialNum+0x44>)
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007c20:	4b0e      	ldr	r3, [pc, #56]	; (8007c5c <Get_SerialNum+0x48>)
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8007c26:	4b0e      	ldr	r3, [pc, #56]	; (8007c60 <Get_SerialNum+0x4c>)
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007c2c:	68fa      	ldr	r2, [r7, #12]
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	4413      	add	r3, r2
 8007c32:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d009      	beq.n	8007c4e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007c3a:	2208      	movs	r2, #8
 8007c3c:	4909      	ldr	r1, [pc, #36]	; (8007c64 <Get_SerialNum+0x50>)
 8007c3e:	68f8      	ldr	r0, [r7, #12]
 8007c40:	f000 f814 	bl	8007c6c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007c44:	2204      	movs	r2, #4
 8007c46:	4908      	ldr	r1, [pc, #32]	; (8007c68 <Get_SerialNum+0x54>)
 8007c48:	68b8      	ldr	r0, [r7, #8]
 8007c4a:	f000 f80f 	bl	8007c6c <IntToUnicode>
  }
}
 8007c4e:	bf00      	nop
 8007c50:	3710      	adds	r7, #16
 8007c52:	46bd      	mov	sp, r7
 8007c54:	bd80      	pop	{r7, pc}
 8007c56:	bf00      	nop
 8007c58:	1ffff7e8 	.word	0x1ffff7e8
 8007c5c:	1ffff7ec 	.word	0x1ffff7ec
 8007c60:	1ffff7f0 	.word	0x1ffff7f0
 8007c64:	20000166 	.word	0x20000166
 8007c68:	20000176 	.word	0x20000176

08007c6c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007c6c:	b480      	push	{r7}
 8007c6e:	b087      	sub	sp, #28
 8007c70:	af00      	add	r7, sp, #0
 8007c72:	60f8      	str	r0, [r7, #12]
 8007c74:	60b9      	str	r1, [r7, #8]
 8007c76:	4613      	mov	r3, r2
 8007c78:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8007c7a:	2300      	movs	r3, #0
 8007c7c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8007c7e:	2300      	movs	r3, #0
 8007c80:	75fb      	strb	r3, [r7, #23]
 8007c82:	e027      	b.n	8007cd4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	0f1b      	lsrs	r3, r3, #28
 8007c88:	2b09      	cmp	r3, #9
 8007c8a:	d80b      	bhi.n	8007ca4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	0f1b      	lsrs	r3, r3, #28
 8007c90:	b2da      	uxtb	r2, r3
 8007c92:	7dfb      	ldrb	r3, [r7, #23]
 8007c94:	005b      	lsls	r3, r3, #1
 8007c96:	4619      	mov	r1, r3
 8007c98:	68bb      	ldr	r3, [r7, #8]
 8007c9a:	440b      	add	r3, r1
 8007c9c:	3230      	adds	r2, #48	; 0x30
 8007c9e:	b2d2      	uxtb	r2, r2
 8007ca0:	701a      	strb	r2, [r3, #0]
 8007ca2:	e00a      	b.n	8007cba <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	0f1b      	lsrs	r3, r3, #28
 8007ca8:	b2da      	uxtb	r2, r3
 8007caa:	7dfb      	ldrb	r3, [r7, #23]
 8007cac:	005b      	lsls	r3, r3, #1
 8007cae:	4619      	mov	r1, r3
 8007cb0:	68bb      	ldr	r3, [r7, #8]
 8007cb2:	440b      	add	r3, r1
 8007cb4:	3237      	adds	r2, #55	; 0x37
 8007cb6:	b2d2      	uxtb	r2, r2
 8007cb8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	011b      	lsls	r3, r3, #4
 8007cbe:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007cc0:	7dfb      	ldrb	r3, [r7, #23]
 8007cc2:	005b      	lsls	r3, r3, #1
 8007cc4:	3301      	adds	r3, #1
 8007cc6:	68ba      	ldr	r2, [r7, #8]
 8007cc8:	4413      	add	r3, r2
 8007cca:	2200      	movs	r2, #0
 8007ccc:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8007cce:	7dfb      	ldrb	r3, [r7, #23]
 8007cd0:	3301      	adds	r3, #1
 8007cd2:	75fb      	strb	r3, [r7, #23]
 8007cd4:	7dfa      	ldrb	r2, [r7, #23]
 8007cd6:	79fb      	ldrb	r3, [r7, #7]
 8007cd8:	429a      	cmp	r2, r3
 8007cda:	d3d3      	bcc.n	8007c84 <IntToUnicode+0x18>
  }
}
 8007cdc:	bf00      	nop
 8007cde:	371c      	adds	r7, #28
 8007ce0:	46bd      	mov	sp, r7
 8007ce2:	bc80      	pop	{r7}
 8007ce4:	4770      	bx	lr
	...

08007ce8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007ce8:	b580      	push	{r7, lr}
 8007cea:	b084      	sub	sp, #16
 8007cec:	af00      	add	r7, sp, #0
 8007cee:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	4a11      	ldr	r2, [pc, #68]	; (8007d3c <HAL_PCD_MspInit+0x54>)
 8007cf6:	4293      	cmp	r3, r2
 8007cf8:	d11b      	bne.n	8007d32 <HAL_PCD_MspInit+0x4a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8007cfa:	4b11      	ldr	r3, [pc, #68]	; (8007d40 <HAL_PCD_MspInit+0x58>)
 8007cfc:	69db      	ldr	r3, [r3, #28]
 8007cfe:	4a10      	ldr	r2, [pc, #64]	; (8007d40 <HAL_PCD_MspInit+0x58>)
 8007d00:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007d04:	61d3      	str	r3, [r2, #28]
 8007d06:	4b0e      	ldr	r3, [pc, #56]	; (8007d40 <HAL_PCD_MspInit+0x58>)
 8007d08:	69db      	ldr	r3, [r3, #28]
 8007d0a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007d0e:	60fb      	str	r3, [r7, #12]
 8007d10:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_HP_CAN1_TX_IRQn, 0, 0);
 8007d12:	2200      	movs	r2, #0
 8007d14:	2100      	movs	r1, #0
 8007d16:	2013      	movs	r0, #19
 8007d18:	f7f9 fc73 	bl	8001602 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_HP_CAN1_TX_IRQn);
 8007d1c:	2013      	movs	r0, #19
 8007d1e:	f7f9 fc8c 	bl	800163a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8007d22:	2200      	movs	r2, #0
 8007d24:	2100      	movs	r1, #0
 8007d26:	2014      	movs	r0, #20
 8007d28:	f7f9 fc6b 	bl	8001602 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8007d2c:	2014      	movs	r0, #20
 8007d2e:	f7f9 fc84 	bl	800163a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8007d32:	bf00      	nop
 8007d34:	3710      	adds	r7, #16
 8007d36:	46bd      	mov	sp, r7
 8007d38:	bd80      	pop	{r7, pc}
 8007d3a:	bf00      	nop
 8007d3c:	40005c00 	.word	0x40005c00
 8007d40:	40021000 	.word	0x40021000

08007d44 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007d44:	b580      	push	{r7, lr}
 8007d46:	b082      	sub	sp, #8
 8007d48:	af00      	add	r7, sp, #0
 8007d4a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8007d58:	4619      	mov	r1, r3
 8007d5a:	4610      	mov	r0, r2
 8007d5c:	f7fe fdcd 	bl	80068fa <USBD_LL_SetupStage>
}
 8007d60:	bf00      	nop
 8007d62:	3708      	adds	r7, #8
 8007d64:	46bd      	mov	sp, r7
 8007d66:	bd80      	pop	{r7, pc}

08007d68 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007d68:	b580      	push	{r7, lr}
 8007d6a:	b082      	sub	sp, #8
 8007d6c:	af00      	add	r7, sp, #0
 8007d6e:	6078      	str	r0, [r7, #4]
 8007d70:	460b      	mov	r3, r1
 8007d72:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8007d7a:	78fa      	ldrb	r2, [r7, #3]
 8007d7c:	6879      	ldr	r1, [r7, #4]
 8007d7e:	4613      	mov	r3, r2
 8007d80:	009b      	lsls	r3, r3, #2
 8007d82:	4413      	add	r3, r2
 8007d84:	00db      	lsls	r3, r3, #3
 8007d86:	440b      	add	r3, r1
 8007d88:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8007d8c:	681a      	ldr	r2, [r3, #0]
 8007d8e:	78fb      	ldrb	r3, [r7, #3]
 8007d90:	4619      	mov	r1, r3
 8007d92:	f7fe fdfd 	bl	8006990 <USBD_LL_DataOutStage>
}
 8007d96:	bf00      	nop
 8007d98:	3708      	adds	r7, #8
 8007d9a:	46bd      	mov	sp, r7
 8007d9c:	bd80      	pop	{r7, pc}

08007d9e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007d9e:	b580      	push	{r7, lr}
 8007da0:	b082      	sub	sp, #8
 8007da2:	af00      	add	r7, sp, #0
 8007da4:	6078      	str	r0, [r7, #4]
 8007da6:	460b      	mov	r3, r1
 8007da8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8007db0:	78fa      	ldrb	r2, [r7, #3]
 8007db2:	6879      	ldr	r1, [r7, #4]
 8007db4:	4613      	mov	r3, r2
 8007db6:	009b      	lsls	r3, r3, #2
 8007db8:	4413      	add	r3, r2
 8007dba:	00db      	lsls	r3, r3, #3
 8007dbc:	440b      	add	r3, r1
 8007dbe:	333c      	adds	r3, #60	; 0x3c
 8007dc0:	681a      	ldr	r2, [r3, #0]
 8007dc2:	78fb      	ldrb	r3, [r7, #3]
 8007dc4:	4619      	mov	r1, r3
 8007dc6:	f7fe fe54 	bl	8006a72 <USBD_LL_DataInStage>
}
 8007dca:	bf00      	nop
 8007dcc:	3708      	adds	r7, #8
 8007dce:	46bd      	mov	sp, r7
 8007dd0:	bd80      	pop	{r7, pc}

08007dd2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007dd2:	b580      	push	{r7, lr}
 8007dd4:	b082      	sub	sp, #8
 8007dd6:	af00      	add	r7, sp, #0
 8007dd8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8007de0:	4618      	mov	r0, r3
 8007de2:	f7fe ff64 	bl	8006cae <USBD_LL_SOF>
}
 8007de6:	bf00      	nop
 8007de8:	3708      	adds	r7, #8
 8007dea:	46bd      	mov	sp, r7
 8007dec:	bd80      	pop	{r7, pc}

08007dee <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007dee:	b580      	push	{r7, lr}
 8007df0:	b084      	sub	sp, #16
 8007df2:	af00      	add	r7, sp, #0
 8007df4:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007df6:	2301      	movs	r3, #1
 8007df8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	689b      	ldr	r3, [r3, #8]
 8007dfe:	2b02      	cmp	r3, #2
 8007e00:	d001      	beq.n	8007e06 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8007e02:	f7f8 fc03 	bl	800060c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8007e0c:	7bfa      	ldrb	r2, [r7, #15]
 8007e0e:	4611      	mov	r1, r2
 8007e10:	4618      	mov	r0, r3
 8007e12:	f7fe ff14 	bl	8006c3e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8007e1c:	4618      	mov	r0, r3
 8007e1e:	f7fe fecd 	bl	8006bbc <USBD_LL_Reset>
}
 8007e22:	bf00      	nop
 8007e24:	3710      	adds	r7, #16
 8007e26:	46bd      	mov	sp, r7
 8007e28:	bd80      	pop	{r7, pc}
	...

08007e2c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007e2c:	b580      	push	{r7, lr}
 8007e2e:	b082      	sub	sp, #8
 8007e30:	af00      	add	r7, sp, #0
 8007e32:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8007e3a:	4618      	mov	r0, r3
 8007e3c:	f7fe ff0e 	bl	8006c5c <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	699b      	ldr	r3, [r3, #24]
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d005      	beq.n	8007e54 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007e48:	4b04      	ldr	r3, [pc, #16]	; (8007e5c <HAL_PCD_SuspendCallback+0x30>)
 8007e4a:	691b      	ldr	r3, [r3, #16]
 8007e4c:	4a03      	ldr	r2, [pc, #12]	; (8007e5c <HAL_PCD_SuspendCallback+0x30>)
 8007e4e:	f043 0306 	orr.w	r3, r3, #6
 8007e52:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007e54:	bf00      	nop
 8007e56:	3708      	adds	r7, #8
 8007e58:	46bd      	mov	sp, r7
 8007e5a:	bd80      	pop	{r7, pc}
 8007e5c:	e000ed00 	.word	0xe000ed00

08007e60 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007e60:	b580      	push	{r7, lr}
 8007e62:	b082      	sub	sp, #8
 8007e64:	af00      	add	r7, sp, #0
 8007e66:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8007e6e:	4618      	mov	r0, r3
 8007e70:	f7fe ff08 	bl	8006c84 <USBD_LL_Resume>
}
 8007e74:	bf00      	nop
 8007e76:	3708      	adds	r7, #8
 8007e78:	46bd      	mov	sp, r7
 8007e7a:	bd80      	pop	{r7, pc}

08007e7c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007e7c:	b580      	push	{r7, lr}
 8007e7e:	b082      	sub	sp, #8
 8007e80:	af00      	add	r7, sp, #0
 8007e82:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8007e84:	4a28      	ldr	r2, [pc, #160]	; (8007f28 <USBD_LL_Init+0xac>)
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	4a26      	ldr	r2, [pc, #152]	; (8007f28 <USBD_LL_Init+0xac>)
 8007e90:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 8007e94:	4b24      	ldr	r3, [pc, #144]	; (8007f28 <USBD_LL_Init+0xac>)
 8007e96:	4a25      	ldr	r2, [pc, #148]	; (8007f2c <USBD_LL_Init+0xb0>)
 8007e98:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8007e9a:	4b23      	ldr	r3, [pc, #140]	; (8007f28 <USBD_LL_Init+0xac>)
 8007e9c:	2208      	movs	r2, #8
 8007e9e:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8007ea0:	4b21      	ldr	r3, [pc, #132]	; (8007f28 <USBD_LL_Init+0xac>)
 8007ea2:	2202      	movs	r2, #2
 8007ea4:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8007ea6:	4b20      	ldr	r3, [pc, #128]	; (8007f28 <USBD_LL_Init+0xac>)
 8007ea8:	2200      	movs	r2, #0
 8007eaa:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8007eac:	4b1e      	ldr	r3, [pc, #120]	; (8007f28 <USBD_LL_Init+0xac>)
 8007eae:	2200      	movs	r2, #0
 8007eb0:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8007eb2:	4b1d      	ldr	r3, [pc, #116]	; (8007f28 <USBD_LL_Init+0xac>)
 8007eb4:	2200      	movs	r2, #0
 8007eb6:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8007eb8:	481b      	ldr	r0, [pc, #108]	; (8007f28 <USBD_LL_Init+0xac>)
 8007eba:	f7f9 ff8b 	bl	8001dd4 <HAL_PCD_Init>
 8007ebe:	4603      	mov	r3, r0
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d001      	beq.n	8007ec8 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8007ec4:	f7f8 fba2 	bl	800060c <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007ece:	2318      	movs	r3, #24
 8007ed0:	2200      	movs	r2, #0
 8007ed2:	2100      	movs	r1, #0
 8007ed4:	f7fb fabf 	bl	8003456 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007ede:	2358      	movs	r3, #88	; 0x58
 8007ee0:	2200      	movs	r2, #0
 8007ee2:	2180      	movs	r1, #128	; 0x80
 8007ee4:	f7fb fab7 	bl	8003456 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007eee:	23c0      	movs	r3, #192	; 0xc0
 8007ef0:	2200      	movs	r2, #0
 8007ef2:	2181      	movs	r1, #129	; 0x81
 8007ef4:	f7fb faaf 	bl	8003456 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007efe:	f44f 7388 	mov.w	r3, #272	; 0x110
 8007f02:	2200      	movs	r2, #0
 8007f04:	2101      	movs	r1, #1
 8007f06:	f7fb faa6 	bl	8003456 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007f10:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007f14:	2200      	movs	r2, #0
 8007f16:	2182      	movs	r1, #130	; 0x82
 8007f18:	f7fb fa9d 	bl	8003456 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8007f1c:	2300      	movs	r3, #0
}
 8007f1e:	4618      	mov	r0, r3
 8007f20:	3708      	adds	r7, #8
 8007f22:	46bd      	mov	sp, r7
 8007f24:	bd80      	pop	{r7, pc}
 8007f26:	bf00      	nop
 8007f28:	20001098 	.word	0x20001098
 8007f2c:	40005c00 	.word	0x40005c00

08007f30 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007f30:	b580      	push	{r7, lr}
 8007f32:	b084      	sub	sp, #16
 8007f34:	af00      	add	r7, sp, #0
 8007f36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007f38:	2300      	movs	r3, #0
 8007f3a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007f3c:	2300      	movs	r3, #0
 8007f3e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007f46:	4618      	mov	r0, r3
 8007f48:	f7fa f84f 	bl	8001fea <HAL_PCD_Start>
 8007f4c:	4603      	mov	r3, r0
 8007f4e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007f50:	7bfb      	ldrb	r3, [r7, #15]
 8007f52:	4618      	mov	r0, r3
 8007f54:	f000 f94e 	bl	80081f4 <USBD_Get_USB_Status>
 8007f58:	4603      	mov	r3, r0
 8007f5a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007f5c:	7bbb      	ldrb	r3, [r7, #14]
}
 8007f5e:	4618      	mov	r0, r3
 8007f60:	3710      	adds	r7, #16
 8007f62:	46bd      	mov	sp, r7
 8007f64:	bd80      	pop	{r7, pc}

08007f66 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8007f66:	b580      	push	{r7, lr}
 8007f68:	b084      	sub	sp, #16
 8007f6a:	af00      	add	r7, sp, #0
 8007f6c:	6078      	str	r0, [r7, #4]
 8007f6e:	4608      	mov	r0, r1
 8007f70:	4611      	mov	r1, r2
 8007f72:	461a      	mov	r2, r3
 8007f74:	4603      	mov	r3, r0
 8007f76:	70fb      	strb	r3, [r7, #3]
 8007f78:	460b      	mov	r3, r1
 8007f7a:	70bb      	strb	r3, [r7, #2]
 8007f7c:	4613      	mov	r3, r2
 8007f7e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007f80:	2300      	movs	r3, #0
 8007f82:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007f84:	2300      	movs	r3, #0
 8007f86:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007f8e:	78bb      	ldrb	r3, [r7, #2]
 8007f90:	883a      	ldrh	r2, [r7, #0]
 8007f92:	78f9      	ldrb	r1, [r7, #3]
 8007f94:	f7fa f9c9 	bl	800232a <HAL_PCD_EP_Open>
 8007f98:	4603      	mov	r3, r0
 8007f9a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007f9c:	7bfb      	ldrb	r3, [r7, #15]
 8007f9e:	4618      	mov	r0, r3
 8007fa0:	f000 f928 	bl	80081f4 <USBD_Get_USB_Status>
 8007fa4:	4603      	mov	r3, r0
 8007fa6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007fa8:	7bbb      	ldrb	r3, [r7, #14]
}
 8007faa:	4618      	mov	r0, r3
 8007fac:	3710      	adds	r7, #16
 8007fae:	46bd      	mov	sp, r7
 8007fb0:	bd80      	pop	{r7, pc}

08007fb2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007fb2:	b580      	push	{r7, lr}
 8007fb4:	b084      	sub	sp, #16
 8007fb6:	af00      	add	r7, sp, #0
 8007fb8:	6078      	str	r0, [r7, #4]
 8007fba:	460b      	mov	r3, r1
 8007fbc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007fbe:	2300      	movs	r3, #0
 8007fc0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007fc2:	2300      	movs	r3, #0
 8007fc4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007fcc:	78fa      	ldrb	r2, [r7, #3]
 8007fce:	4611      	mov	r1, r2
 8007fd0:	4618      	mov	r0, r3
 8007fd2:	f7fa fa10 	bl	80023f6 <HAL_PCD_EP_Close>
 8007fd6:	4603      	mov	r3, r0
 8007fd8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007fda:	7bfb      	ldrb	r3, [r7, #15]
 8007fdc:	4618      	mov	r0, r3
 8007fde:	f000 f909 	bl	80081f4 <USBD_Get_USB_Status>
 8007fe2:	4603      	mov	r3, r0
 8007fe4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007fe6:	7bbb      	ldrb	r3, [r7, #14]
}
 8007fe8:	4618      	mov	r0, r3
 8007fea:	3710      	adds	r7, #16
 8007fec:	46bd      	mov	sp, r7
 8007fee:	bd80      	pop	{r7, pc}

08007ff0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007ff0:	b580      	push	{r7, lr}
 8007ff2:	b084      	sub	sp, #16
 8007ff4:	af00      	add	r7, sp, #0
 8007ff6:	6078      	str	r0, [r7, #4]
 8007ff8:	460b      	mov	r3, r1
 8007ffa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007ffc:	2300      	movs	r3, #0
 8007ffe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008000:	2300      	movs	r3, #0
 8008002:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800800a:	78fa      	ldrb	r2, [r7, #3]
 800800c:	4611      	mov	r1, r2
 800800e:	4618      	mov	r0, r3
 8008010:	f7fa fad0 	bl	80025b4 <HAL_PCD_EP_SetStall>
 8008014:	4603      	mov	r3, r0
 8008016:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008018:	7bfb      	ldrb	r3, [r7, #15]
 800801a:	4618      	mov	r0, r3
 800801c:	f000 f8ea 	bl	80081f4 <USBD_Get_USB_Status>
 8008020:	4603      	mov	r3, r0
 8008022:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008024:	7bbb      	ldrb	r3, [r7, #14]
}
 8008026:	4618      	mov	r0, r3
 8008028:	3710      	adds	r7, #16
 800802a:	46bd      	mov	sp, r7
 800802c:	bd80      	pop	{r7, pc}

0800802e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800802e:	b580      	push	{r7, lr}
 8008030:	b084      	sub	sp, #16
 8008032:	af00      	add	r7, sp, #0
 8008034:	6078      	str	r0, [r7, #4]
 8008036:	460b      	mov	r3, r1
 8008038:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800803a:	2300      	movs	r3, #0
 800803c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800803e:	2300      	movs	r3, #0
 8008040:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008048:	78fa      	ldrb	r2, [r7, #3]
 800804a:	4611      	mov	r1, r2
 800804c:	4618      	mov	r0, r3
 800804e:	f7fa fb11 	bl	8002674 <HAL_PCD_EP_ClrStall>
 8008052:	4603      	mov	r3, r0
 8008054:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008056:	7bfb      	ldrb	r3, [r7, #15]
 8008058:	4618      	mov	r0, r3
 800805a:	f000 f8cb 	bl	80081f4 <USBD_Get_USB_Status>
 800805e:	4603      	mov	r3, r0
 8008060:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008062:	7bbb      	ldrb	r3, [r7, #14]
}
 8008064:	4618      	mov	r0, r3
 8008066:	3710      	adds	r7, #16
 8008068:	46bd      	mov	sp, r7
 800806a:	bd80      	pop	{r7, pc}

0800806c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800806c:	b480      	push	{r7}
 800806e:	b085      	sub	sp, #20
 8008070:	af00      	add	r7, sp, #0
 8008072:	6078      	str	r0, [r7, #4]
 8008074:	460b      	mov	r3, r1
 8008076:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800807e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008080:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008084:	2b00      	cmp	r3, #0
 8008086:	da0c      	bge.n	80080a2 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008088:	78fb      	ldrb	r3, [r7, #3]
 800808a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800808e:	68f9      	ldr	r1, [r7, #12]
 8008090:	1c5a      	adds	r2, r3, #1
 8008092:	4613      	mov	r3, r2
 8008094:	009b      	lsls	r3, r3, #2
 8008096:	4413      	add	r3, r2
 8008098:	00db      	lsls	r3, r3, #3
 800809a:	440b      	add	r3, r1
 800809c:	3302      	adds	r3, #2
 800809e:	781b      	ldrb	r3, [r3, #0]
 80080a0:	e00b      	b.n	80080ba <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80080a2:	78fb      	ldrb	r3, [r7, #3]
 80080a4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80080a8:	68f9      	ldr	r1, [r7, #12]
 80080aa:	4613      	mov	r3, r2
 80080ac:	009b      	lsls	r3, r3, #2
 80080ae:	4413      	add	r3, r2
 80080b0:	00db      	lsls	r3, r3, #3
 80080b2:	440b      	add	r3, r1
 80080b4:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 80080b8:	781b      	ldrb	r3, [r3, #0]
  }
}
 80080ba:	4618      	mov	r0, r3
 80080bc:	3714      	adds	r7, #20
 80080be:	46bd      	mov	sp, r7
 80080c0:	bc80      	pop	{r7}
 80080c2:	4770      	bx	lr

080080c4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80080c4:	b580      	push	{r7, lr}
 80080c6:	b084      	sub	sp, #16
 80080c8:	af00      	add	r7, sp, #0
 80080ca:	6078      	str	r0, [r7, #4]
 80080cc:	460b      	mov	r3, r1
 80080ce:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80080d0:	2300      	movs	r3, #0
 80080d2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80080d4:	2300      	movs	r3, #0
 80080d6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80080de:	78fa      	ldrb	r2, [r7, #3]
 80080e0:	4611      	mov	r1, r2
 80080e2:	4618      	mov	r0, r3
 80080e4:	f7fa f8fc 	bl	80022e0 <HAL_PCD_SetAddress>
 80080e8:	4603      	mov	r3, r0
 80080ea:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80080ec:	7bfb      	ldrb	r3, [r7, #15]
 80080ee:	4618      	mov	r0, r3
 80080f0:	f000 f880 	bl	80081f4 <USBD_Get_USB_Status>
 80080f4:	4603      	mov	r3, r0
 80080f6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80080f8:	7bbb      	ldrb	r3, [r7, #14]
}
 80080fa:	4618      	mov	r0, r3
 80080fc:	3710      	adds	r7, #16
 80080fe:	46bd      	mov	sp, r7
 8008100:	bd80      	pop	{r7, pc}

08008102 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8008102:	b580      	push	{r7, lr}
 8008104:	b086      	sub	sp, #24
 8008106:	af00      	add	r7, sp, #0
 8008108:	60f8      	str	r0, [r7, #12]
 800810a:	607a      	str	r2, [r7, #4]
 800810c:	461a      	mov	r2, r3
 800810e:	460b      	mov	r3, r1
 8008110:	72fb      	strb	r3, [r7, #11]
 8008112:	4613      	mov	r3, r2
 8008114:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008116:	2300      	movs	r3, #0
 8008118:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800811a:	2300      	movs	r3, #0
 800811c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008124:	893b      	ldrh	r3, [r7, #8]
 8008126:	7af9      	ldrb	r1, [r7, #11]
 8008128:	687a      	ldr	r2, [r7, #4]
 800812a:	f7fa fa00 	bl	800252e <HAL_PCD_EP_Transmit>
 800812e:	4603      	mov	r3, r0
 8008130:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008132:	7dfb      	ldrb	r3, [r7, #23]
 8008134:	4618      	mov	r0, r3
 8008136:	f000 f85d 	bl	80081f4 <USBD_Get_USB_Status>
 800813a:	4603      	mov	r3, r0
 800813c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800813e:	7dbb      	ldrb	r3, [r7, #22]
}
 8008140:	4618      	mov	r0, r3
 8008142:	3718      	adds	r7, #24
 8008144:	46bd      	mov	sp, r7
 8008146:	bd80      	pop	{r7, pc}

08008148 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8008148:	b580      	push	{r7, lr}
 800814a:	b086      	sub	sp, #24
 800814c:	af00      	add	r7, sp, #0
 800814e:	60f8      	str	r0, [r7, #12]
 8008150:	607a      	str	r2, [r7, #4]
 8008152:	461a      	mov	r2, r3
 8008154:	460b      	mov	r3, r1
 8008156:	72fb      	strb	r3, [r7, #11]
 8008158:	4613      	mov	r3, r2
 800815a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800815c:	2300      	movs	r3, #0
 800815e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008160:	2300      	movs	r3, #0
 8008162:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800816a:	893b      	ldrh	r3, [r7, #8]
 800816c:	7af9      	ldrb	r1, [r7, #11]
 800816e:	687a      	ldr	r2, [r7, #4]
 8008170:	f7fa f989 	bl	8002486 <HAL_PCD_EP_Receive>
 8008174:	4603      	mov	r3, r0
 8008176:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008178:	7dfb      	ldrb	r3, [r7, #23]
 800817a:	4618      	mov	r0, r3
 800817c:	f000 f83a 	bl	80081f4 <USBD_Get_USB_Status>
 8008180:	4603      	mov	r3, r0
 8008182:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008184:	7dbb      	ldrb	r3, [r7, #22]
}
 8008186:	4618      	mov	r0, r3
 8008188:	3718      	adds	r7, #24
 800818a:	46bd      	mov	sp, r7
 800818c:	bd80      	pop	{r7, pc}

0800818e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800818e:	b580      	push	{r7, lr}
 8008190:	b082      	sub	sp, #8
 8008192:	af00      	add	r7, sp, #0
 8008194:	6078      	str	r0, [r7, #4]
 8008196:	460b      	mov	r3, r1
 8008198:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80081a0:	78fa      	ldrb	r2, [r7, #3]
 80081a2:	4611      	mov	r1, r2
 80081a4:	4618      	mov	r0, r3
 80081a6:	f7fa f9ab 	bl	8002500 <HAL_PCD_EP_GetRxCount>
 80081aa:	4603      	mov	r3, r0
}
 80081ac:	4618      	mov	r0, r3
 80081ae:	3708      	adds	r7, #8
 80081b0:	46bd      	mov	sp, r7
 80081b2:	bd80      	pop	{r7, pc}

080081b4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80081b4:	b480      	push	{r7}
 80081b6:	b083      	sub	sp, #12
 80081b8:	af00      	add	r7, sp, #0
 80081ba:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80081bc:	4b02      	ldr	r3, [pc, #8]	; (80081c8 <USBD_static_malloc+0x14>)
}
 80081be:	4618      	mov	r0, r3
 80081c0:	370c      	adds	r7, #12
 80081c2:	46bd      	mov	sp, r7
 80081c4:	bc80      	pop	{r7}
 80081c6:	4770      	bx	lr
 80081c8:	200001a4 	.word	0x200001a4

080081cc <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80081cc:	b480      	push	{r7}
 80081ce:	b083      	sub	sp, #12
 80081d0:	af00      	add	r7, sp, #0
 80081d2:	6078      	str	r0, [r7, #4]

}
 80081d4:	bf00      	nop
 80081d6:	370c      	adds	r7, #12
 80081d8:	46bd      	mov	sp, r7
 80081da:	bc80      	pop	{r7}
 80081dc:	4770      	bx	lr

080081de <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80081de:	b480      	push	{r7}
 80081e0:	b083      	sub	sp, #12
 80081e2:	af00      	add	r7, sp, #0
 80081e4:	6078      	str	r0, [r7, #4]
 80081e6:	460b      	mov	r3, r1
 80081e8:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 80081ea:	bf00      	nop
 80081ec:	370c      	adds	r7, #12
 80081ee:	46bd      	mov	sp, r7
 80081f0:	bc80      	pop	{r7}
 80081f2:	4770      	bx	lr

080081f4 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80081f4:	b480      	push	{r7}
 80081f6:	b085      	sub	sp, #20
 80081f8:	af00      	add	r7, sp, #0
 80081fa:	4603      	mov	r3, r0
 80081fc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80081fe:	2300      	movs	r3, #0
 8008200:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008202:	79fb      	ldrb	r3, [r7, #7]
 8008204:	2b03      	cmp	r3, #3
 8008206:	d817      	bhi.n	8008238 <USBD_Get_USB_Status+0x44>
 8008208:	a201      	add	r2, pc, #4	; (adr r2, 8008210 <USBD_Get_USB_Status+0x1c>)
 800820a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800820e:	bf00      	nop
 8008210:	08008221 	.word	0x08008221
 8008214:	08008227 	.word	0x08008227
 8008218:	0800822d 	.word	0x0800822d
 800821c:	08008233 	.word	0x08008233
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008220:	2300      	movs	r3, #0
 8008222:	73fb      	strb	r3, [r7, #15]
    break;
 8008224:	e00b      	b.n	800823e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008226:	2302      	movs	r3, #2
 8008228:	73fb      	strb	r3, [r7, #15]
    break;
 800822a:	e008      	b.n	800823e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800822c:	2301      	movs	r3, #1
 800822e:	73fb      	strb	r3, [r7, #15]
    break;
 8008230:	e005      	b.n	800823e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008232:	2302      	movs	r3, #2
 8008234:	73fb      	strb	r3, [r7, #15]
    break;
 8008236:	e002      	b.n	800823e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008238:	2302      	movs	r3, #2
 800823a:	73fb      	strb	r3, [r7, #15]
    break;
 800823c:	bf00      	nop
  }
  return usb_status;
 800823e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008240:	4618      	mov	r0, r3
 8008242:	3714      	adds	r7, #20
 8008244:	46bd      	mov	sp, r7
 8008246:	bc80      	pop	{r7}
 8008248:	4770      	bx	lr
 800824a:	bf00      	nop

0800824c <__libc_init_array>:
 800824c:	b570      	push	{r4, r5, r6, lr}
 800824e:	2500      	movs	r5, #0
 8008250:	4e0c      	ldr	r6, [pc, #48]	; (8008284 <__libc_init_array+0x38>)
 8008252:	4c0d      	ldr	r4, [pc, #52]	; (8008288 <__libc_init_array+0x3c>)
 8008254:	1ba4      	subs	r4, r4, r6
 8008256:	10a4      	asrs	r4, r4, #2
 8008258:	42a5      	cmp	r5, r4
 800825a:	d109      	bne.n	8008270 <__libc_init_array+0x24>
 800825c:	f000 f82e 	bl	80082bc <_init>
 8008260:	2500      	movs	r5, #0
 8008262:	4e0a      	ldr	r6, [pc, #40]	; (800828c <__libc_init_array+0x40>)
 8008264:	4c0a      	ldr	r4, [pc, #40]	; (8008290 <__libc_init_array+0x44>)
 8008266:	1ba4      	subs	r4, r4, r6
 8008268:	10a4      	asrs	r4, r4, #2
 800826a:	42a5      	cmp	r5, r4
 800826c:	d105      	bne.n	800827a <__libc_init_array+0x2e>
 800826e:	bd70      	pop	{r4, r5, r6, pc}
 8008270:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008274:	4798      	blx	r3
 8008276:	3501      	adds	r5, #1
 8008278:	e7ee      	b.n	8008258 <__libc_init_array+0xc>
 800827a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800827e:	4798      	blx	r3
 8008280:	3501      	adds	r5, #1
 8008282:	e7f2      	b.n	800826a <__libc_init_array+0x1e>
 8008284:	0800835c 	.word	0x0800835c
 8008288:	0800835c 	.word	0x0800835c
 800828c:	0800835c 	.word	0x0800835c
 8008290:	08008360 	.word	0x08008360

08008294 <memcpy>:
 8008294:	b510      	push	{r4, lr}
 8008296:	1e43      	subs	r3, r0, #1
 8008298:	440a      	add	r2, r1
 800829a:	4291      	cmp	r1, r2
 800829c:	d100      	bne.n	80082a0 <memcpy+0xc>
 800829e:	bd10      	pop	{r4, pc}
 80082a0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80082a4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80082a8:	e7f7      	b.n	800829a <memcpy+0x6>

080082aa <memset>:
 80082aa:	4603      	mov	r3, r0
 80082ac:	4402      	add	r2, r0
 80082ae:	4293      	cmp	r3, r2
 80082b0:	d100      	bne.n	80082b4 <memset+0xa>
 80082b2:	4770      	bx	lr
 80082b4:	f803 1b01 	strb.w	r1, [r3], #1
 80082b8:	e7f9      	b.n	80082ae <memset+0x4>
	...

080082bc <_init>:
 80082bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082be:	bf00      	nop
 80082c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80082c2:	bc08      	pop	{r3}
 80082c4:	469e      	mov	lr, r3
 80082c6:	4770      	bx	lr

080082c8 <_fini>:
 80082c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082ca:	bf00      	nop
 80082cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80082ce:	bc08      	pop	{r3}
 80082d0:	469e      	mov	lr, r3
 80082d2:	4770      	bx	lr
