
alpha_firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008914  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000194  08008a20  08008a20  00018a20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008bb4  08008bb4  00020350  2**0
                  CONTENTS
  4 .ARM          00000000  08008bb4  08008bb4  00020350  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008bb4  08008bb4  00020350  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008bb4  08008bb4  00018bb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008bb8  08008bb8  00018bb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000350  20000000  08008bbc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000019dc  20000350  08008f0c  00020350  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001d2c  08008f0c  00021d2c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020350  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014da0  00000000  00000000  00020379  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003275  00000000  00000000  00035119  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000ea0  00000000  00000000  00038390  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000d18  00000000  00000000  00039230  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001a7b3  00000000  00000000  00039f48  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000f782  00000000  00000000  000546fb  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008b9f6  00000000  00000000  00063e7d  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000ef873  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003bdc  00000000  00000000  000ef8f0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000350 	.word	0x20000350
 8000128:	00000000 	.word	0x00000000
 800012c:	08008a08 	.word	0x08008a08

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000354 	.word	0x20000354
 8000148:	08008a08 	.word	0x08008a08

0800014c <DAC_Write>:
static void MX_DMA_Init(void);
static void MX_ADC1_Init(void);
static void MX_SPI1_Init(void);
/* USER CODE BEGIN PFP */
void DAC_Write(uint16_t val)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b084      	sub	sp, #16
 8000150:	af00      	add	r7, sp, #0
 8000152:	4603      	mov	r3, r0
 8000154:	80fb      	strh	r3, [r7, #6]
  uint16_t dac_data = 0x7000 | (val&0x0FFF);
 8000156:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800015a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800015e:	b21b      	sxth	r3, r3
 8000160:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 8000164:	b21b      	sxth	r3, r3
 8000166:	b29b      	uxth	r3, r3
 8000168:	81fb      	strh	r3, [r7, #14]
  uint8_t data[2];
  memcpy(&data, &dac_data, sizeof(data));
 800016a:	89fb      	ldrh	r3, [r7, #14]
 800016c:	81bb      	strh	r3, [r7, #12]
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 800016e:	2200      	movs	r2, #0
 8000170:	2180      	movs	r1, #128	; 0x80
 8000172:	4809      	ldr	r0, [pc, #36]	; (8000198 <DAC_Write+0x4c>)
 8000174:	f001 ff0c 	bl	8001f90 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi1, data, sizeof(data), 0);
 8000178:	f107 010c 	add.w	r1, r7, #12
 800017c:	2300      	movs	r3, #0
 800017e:	2202      	movs	r2, #2
 8000180:	4806      	ldr	r0, [pc, #24]	; (800019c <DAC_Write+0x50>)
 8000182:	f004 f8b7 	bl	80042f4 <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8000186:	2201      	movs	r2, #1
 8000188:	2180      	movs	r1, #128	; 0x80
 800018a:	4803      	ldr	r0, [pc, #12]	; (8000198 <DAC_Write+0x4c>)
 800018c:	f001 ff00 	bl	8001f90 <HAL_GPIO_WritePin>
}
 8000190:	bf00      	nop
 8000192:	3710      	adds	r7, #16
 8000194:	46bd      	mov	sp, r7
 8000196:	bd80      	pop	{r7, pc}
 8000198:	40010c00 	.word	0x40010c00
 800019c:	20000660 	.word	0x20000660

080001a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001a0:	b580      	push	{r7, lr}
 80001a2:	b082      	sub	sp, #8
 80001a4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001a6:	f000 fcb7 	bl	8000b18 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001aa:	f000 f88d 	bl	80002c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001ae:	f000 f97b 	bl	80004a8 <MX_GPIO_Init>
  MX_DMA_Init();
 80001b2:	f000 f95b 	bl	800046c <MX_DMA_Init>
  MX_ADC1_Init();
 80001b6:	f000 f8e5 	bl	8000384 <MX_ADC1_Init>
  MX_SPI1_Init();
 80001ba:	f000 f921 	bl	8000400 <MX_SPI1_Init>
  MX_USB_DEVICE_Init();
 80001be:	f007 fe8d 	bl	8007edc <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */


  HAL_ADCEx_Calibration_Start(&hadc1);
 80001c2:	4834      	ldr	r0, [pc, #208]	; (8000294 <main+0xf4>)
 80001c4:	f001 f9b8 	bl	8001538 <HAL_ADCEx_Calibration_Start>
  HAL_ADC_Start(&hadc1);
 80001c8:	4832      	ldr	r0, [pc, #200]	; (8000294 <main+0xf4>)
 80001ca:	f000 fddf 	bl	8000d8c <HAL_ADC_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (settings_changed) {
 80001ce:	4b32      	ldr	r3, [pc, #200]	; (8000298 <main+0xf8>)
 80001d0:	781b      	ldrb	r3, [r3, #0]
 80001d2:	2b00      	cmp	r3, #0
 80001d4:	d020      	beq.n	8000218 <main+0x78>
		  trigger_level = new_trigger_level;
 80001d6:	4b31      	ldr	r3, [pc, #196]	; (800029c <main+0xfc>)
 80001d8:	881a      	ldrh	r2, [r3, #0]
 80001da:	4b31      	ldr	r3, [pc, #196]	; (80002a0 <main+0x100>)
 80001dc:	801a      	strh	r2, [r3, #0]
		  DAC_Write(newGain);
 80001de:	4b31      	ldr	r3, [pc, #196]	; (80002a4 <main+0x104>)
 80001e0:	881b      	ldrh	r3, [r3, #0]
 80001e2:	4618      	mov	r0, r3
 80001e4:	f7ff ffb2 	bl	800014c <DAC_Write>
		  gain = newGain;
 80001e8:	4b2e      	ldr	r3, [pc, #184]	; (80002a4 <main+0x104>)
 80001ea:	881a      	ldrh	r2, [r3, #0]
 80001ec:	4b2e      	ldr	r3, [pc, #184]	; (80002a8 <main+0x108>)
 80001ee:	801a      	strh	r2, [r3, #0]
		  settings_changed = False;
 80001f0:	4b29      	ldr	r3, [pc, #164]	; (8000298 <main+0xf8>)
 80001f2:	2200      	movs	r2, #0
 80001f4:	701a      	strb	r2, [r3, #0]
	  }
	  //release
	  while (status == status_reading_trigger) {
 80001f6:	e00f      	b.n	8000218 <main+0x78>
			  if((adc_value = HAL_ADC_GetValue(&hadc1)) > trigger_level) {
 80001f8:	4826      	ldr	r0, [pc, #152]	; (8000294 <main+0xf4>)
 80001fa:	f000 ff9e 	bl	800113a <HAL_ADC_GetValue>
 80001fe:	4603      	mov	r3, r0
 8000200:	b29a      	uxth	r2, r3
 8000202:	4b2a      	ldr	r3, [pc, #168]	; (80002ac <main+0x10c>)
 8000204:	801a      	strh	r2, [r3, #0]
 8000206:	4b29      	ldr	r3, [pc, #164]	; (80002ac <main+0x10c>)
 8000208:	881a      	ldrh	r2, [r3, #0]
 800020a:	4b25      	ldr	r3, [pc, #148]	; (80002a0 <main+0x100>)
 800020c:	881b      	ldrh	r3, [r3, #0]
 800020e:	429a      	cmp	r2, r3
 8000210:	d902      	bls.n	8000218 <main+0x78>
				  is_triggered = 1;
 8000212:	4b27      	ldr	r3, [pc, #156]	; (80002b0 <main+0x110>)
 8000214:	2201      	movs	r2, #1
 8000216:	701a      	strb	r2, [r3, #0]
	  while (status == status_reading_trigger) {
 8000218:	4b26      	ldr	r3, [pc, #152]	; (80002b4 <main+0x114>)
 800021a:	781b      	ldrb	r3, [r3, #0]
 800021c:	2b0a      	cmp	r3, #10
 800021e:	d0eb      	beq.n	80001f8 <main+0x58>
			  }
			  //is_triggered = 1;
	  }
	  if (status == status_SENDING_Data) {
 8000220:	4b24      	ldr	r3, [pc, #144]	; (80002b4 <main+0x114>)
 8000222:	781b      	ldrb	r3, [r3, #0]
 8000224:	2b0b      	cmp	r3, #11
 8000226:	d1d2      	bne.n	80001ce <main+0x2e>
		  while(CDC_Transmit_FS((uint8_t*)&Data_buffer, Data_buf_lenth * sizeof(uint16_t)) == USBD_BUSY);
 8000228:	bf00      	nop
 800022a:	f44f 617a 	mov.w	r1, #4000	; 0xfa0
 800022e:	4822      	ldr	r0, [pc, #136]	; (80002b8 <main+0x118>)
 8000230:	f007 ff16 	bl	8008060 <CDC_Transmit_FS>
 8000234:	4603      	mov	r3, r0
 8000236:	2b01      	cmp	r3, #1
 8000238:	d0f7      	beq.n	800022a <main+0x8a>
		  while(ack != True);
 800023a:	bf00      	nop
 800023c:	4b1f      	ldr	r3, [pc, #124]	; (80002bc <main+0x11c>)
 800023e:	781b      	ldrb	r3, [r3, #0]
 8000240:	2b01      	cmp	r3, #1
 8000242:	d1fb      	bne.n	800023c <main+0x9c>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_RESET);
 8000244:	2200      	movs	r2, #0
 8000246:	2104      	movs	r1, #4
 8000248:	481d      	ldr	r0, [pc, #116]	; (80002c0 <main+0x120>)
 800024a:	f001 fea1 	bl	8001f90 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
 800024e:	2200      	movs	r2, #0
 8000250:	2108      	movs	r1, #8
 8000252:	481b      	ldr	r0, [pc, #108]	; (80002c0 <main+0x120>)
 8000254:	f001 fe9c 	bl	8001f90 <HAL_GPIO_WritePin>
		  //HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);

		  for(int i = 0; i < Data_buf_lenth; i++)
 8000258:	2300      	movs	r3, #0
 800025a:	607b      	str	r3, [r7, #4]
 800025c:	e008      	b.n	8000270 <main+0xd0>
		  			Data_buffer[i] = 2000;
 800025e:	4a16      	ldr	r2, [pc, #88]	; (80002b8 <main+0x118>)
 8000260:	687b      	ldr	r3, [r7, #4]
 8000262:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8000266:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		  for(int i = 0; i < Data_buf_lenth; i++)
 800026a:	687b      	ldr	r3, [r7, #4]
 800026c:	3301      	adds	r3, #1
 800026e:	607b      	str	r3, [r7, #4]
 8000270:	687b      	ldr	r3, [r7, #4]
 8000272:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000276:	dbf2      	blt.n	800025e <main+0xbe>
		  ack = False;
 8000278:	4b10      	ldr	r3, [pc, #64]	; (80002bc <main+0x11c>)
 800027a:	2200      	movs	r2, #0
 800027c:	701a      	strb	r2, [r3, #0]
		  status = status_doNothing;
 800027e:	4b0d      	ldr	r3, [pc, #52]	; (80002b4 <main+0x114>)
 8000280:	220d      	movs	r2, #13
 8000282:	701a      	strb	r2, [r3, #0]
		  is_triggered = 0;
 8000284:	4b0a      	ldr	r3, [pc, #40]	; (80002b0 <main+0x110>)
 8000286:	2200      	movs	r2, #0
 8000288:	701a      	strb	r2, [r3, #0]
		  data_part_idx = 0;
 800028a:	4b0e      	ldr	r3, [pc, #56]	; (80002c4 <main+0x124>)
 800028c:	2200      	movs	r2, #0
 800028e:	801a      	strh	r2, [r3, #0]
	  if (settings_changed) {
 8000290:	e79d      	b.n	80001ce <main+0x2e>
 8000292:	bf00      	nop
 8000294:	200005ec 	.word	0x200005ec
 8000298:	20000370 	.word	0x20000370
 800029c:	20000374 	.word	0x20000374
 80002a0:	20000002 	.word	0x20000002
 80002a4:	20000376 	.word	0x20000376
 80002a8:	20000378 	.word	0x20000378
 80002ac:	20000372 	.word	0x20000372
 80002b0:	2000036c 	.word	0x2000036c
 80002b4:	20000001 	.word	0x20000001
 80002b8:	200006b8 	.word	0x200006b8
 80002bc:	2000036d 	.word	0x2000036d
 80002c0:	40010800 	.word	0x40010800
 80002c4:	2000036e 	.word	0x2000036e

080002c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002c8:	b580      	push	{r7, lr}
 80002ca:	b094      	sub	sp, #80	; 0x50
 80002cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002ce:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80002d2:	2228      	movs	r2, #40	; 0x28
 80002d4:	2100      	movs	r1, #0
 80002d6:	4618      	mov	r0, r3
 80002d8:	f008 fadb 	bl	8008892 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002dc:	f107 0314 	add.w	r3, r7, #20
 80002e0:	2200      	movs	r2, #0
 80002e2:	601a      	str	r2, [r3, #0]
 80002e4:	605a      	str	r2, [r3, #4]
 80002e6:	609a      	str	r2, [r3, #8]
 80002e8:	60da      	str	r2, [r3, #12]
 80002ea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80002ec:	1d3b      	adds	r3, r7, #4
 80002ee:	2200      	movs	r2, #0
 80002f0:	601a      	str	r2, [r3, #0]
 80002f2:	605a      	str	r2, [r3, #4]
 80002f4:	609a      	str	r2, [r3, #8]
 80002f6:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80002f8:	2301      	movs	r3, #1
 80002fa:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80002fc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000300:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000302:	2300      	movs	r3, #0
 8000304:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000306:	2301      	movs	r3, #1
 8000308:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800030a:	2302      	movs	r3, #2
 800030c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800030e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000312:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000314:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000318:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800031a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800031e:	4618      	mov	r0, r3
 8000320:	f003 f9ea 	bl	80036f8 <HAL_RCC_OscConfig>
 8000324:	4603      	mov	r3, r0
 8000326:	2b00      	cmp	r3, #0
 8000328:	d001      	beq.n	800032e <SystemClock_Config+0x66>
  {
    Error_Handler();
 800032a:	f000 fa7d 	bl	8000828 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800032e:	230f      	movs	r3, #15
 8000330:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000332:	2302      	movs	r3, #2
 8000334:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000336:	2300      	movs	r3, #0
 8000338:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800033a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800033e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000340:	2300      	movs	r3, #0
 8000342:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000344:	f107 0314 	add.w	r3, r7, #20
 8000348:	2102      	movs	r1, #2
 800034a:	4618      	mov	r0, r3
 800034c:	f003 fc54 	bl	8003bf8 <HAL_RCC_ClockConfig>
 8000350:	4603      	mov	r3, r0
 8000352:	2b00      	cmp	r3, #0
 8000354:	d001      	beq.n	800035a <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000356:	f000 fa67 	bl	8000828 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_USB;
 800035a:	2312      	movs	r3, #18
 800035c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 800035e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000362:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8000364:	2300      	movs	r3, #0
 8000366:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000368:	1d3b      	adds	r3, r7, #4
 800036a:	4618      	mov	r0, r3
 800036c:	f003 fdcc 	bl	8003f08 <HAL_RCCEx_PeriphCLKConfig>
 8000370:	4603      	mov	r3, r0
 8000372:	2b00      	cmp	r3, #0
 8000374:	d001      	beq.n	800037a <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8000376:	f000 fa57 	bl	8000828 <Error_Handler>
  }
}
 800037a:	bf00      	nop
 800037c:	3750      	adds	r7, #80	; 0x50
 800037e:	46bd      	mov	sp, r7
 8000380:	bd80      	pop	{r7, pc}
	...

08000384 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000384:	b580      	push	{r7, lr}
 8000386:	b084      	sub	sp, #16
 8000388:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800038a:	1d3b      	adds	r3, r7, #4
 800038c:	2200      	movs	r2, #0
 800038e:	601a      	str	r2, [r3, #0]
 8000390:	605a      	str	r2, [r3, #4]
 8000392:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000394:	4b18      	ldr	r3, [pc, #96]	; (80003f8 <MX_ADC1_Init+0x74>)
 8000396:	4a19      	ldr	r2, [pc, #100]	; (80003fc <MX_ADC1_Init+0x78>)
 8000398:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800039a:	4b17      	ldr	r3, [pc, #92]	; (80003f8 <MX_ADC1_Init+0x74>)
 800039c:	2200      	movs	r2, #0
 800039e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80003a0:	4b15      	ldr	r3, [pc, #84]	; (80003f8 <MX_ADC1_Init+0x74>)
 80003a2:	2201      	movs	r2, #1
 80003a4:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80003a6:	4b14      	ldr	r3, [pc, #80]	; (80003f8 <MX_ADC1_Init+0x74>)
 80003a8:	2200      	movs	r2, #0
 80003aa:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80003ac:	4b12      	ldr	r3, [pc, #72]	; (80003f8 <MX_ADC1_Init+0x74>)
 80003ae:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80003b2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80003b4:	4b10      	ldr	r3, [pc, #64]	; (80003f8 <MX_ADC1_Init+0x74>)
 80003b6:	2200      	movs	r2, #0
 80003b8:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 80003ba:	4b0f      	ldr	r3, [pc, #60]	; (80003f8 <MX_ADC1_Init+0x74>)
 80003bc:	2201      	movs	r2, #1
 80003be:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80003c0:	480d      	ldr	r0, [pc, #52]	; (80003f8 <MX_ADC1_Init+0x74>)
 80003c2:	f000 fc0b 	bl	8000bdc <HAL_ADC_Init>
 80003c6:	4603      	mov	r3, r0
 80003c8:	2b00      	cmp	r3, #0
 80003ca:	d001      	beq.n	80003d0 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 80003cc:	f000 fa2c 	bl	8000828 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80003d0:	2300      	movs	r3, #0
 80003d2:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80003d4:	2301      	movs	r3, #1
 80003d6:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80003d8:	2300      	movs	r3, #0
 80003da:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80003dc:	1d3b      	adds	r3, r7, #4
 80003de:	4619      	mov	r1, r3
 80003e0:	4805      	ldr	r0, [pc, #20]	; (80003f8 <MX_ADC1_Init+0x74>)
 80003e2:	f000 febf 	bl	8001164 <HAL_ADC_ConfigChannel>
 80003e6:	4603      	mov	r3, r0
 80003e8:	2b00      	cmp	r3, #0
 80003ea:	d001      	beq.n	80003f0 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 80003ec:	f000 fa1c 	bl	8000828 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80003f0:	bf00      	nop
 80003f2:	3710      	adds	r7, #16
 80003f4:	46bd      	mov	sp, r7
 80003f6:	bd80      	pop	{r7, pc}
 80003f8:	200005ec 	.word	0x200005ec
 80003fc:	40012400 	.word	0x40012400

08000400 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000400:	b580      	push	{r7, lr}
 8000402:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000404:	4b17      	ldr	r3, [pc, #92]	; (8000464 <MX_SPI1_Init+0x64>)
 8000406:	4a18      	ldr	r2, [pc, #96]	; (8000468 <MX_SPI1_Init+0x68>)
 8000408:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800040a:	4b16      	ldr	r3, [pc, #88]	; (8000464 <MX_SPI1_Init+0x64>)
 800040c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000410:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000412:	4b14      	ldr	r3, [pc, #80]	; (8000464 <MX_SPI1_Init+0x64>)
 8000414:	2200      	movs	r2, #0
 8000416:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000418:	4b12      	ldr	r3, [pc, #72]	; (8000464 <MX_SPI1_Init+0x64>)
 800041a:	2200      	movs	r2, #0
 800041c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800041e:	4b11      	ldr	r3, [pc, #68]	; (8000464 <MX_SPI1_Init+0x64>)
 8000420:	2200      	movs	r2, #0
 8000422:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000424:	4b0f      	ldr	r3, [pc, #60]	; (8000464 <MX_SPI1_Init+0x64>)
 8000426:	2200      	movs	r2, #0
 8000428:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800042a:	4b0e      	ldr	r3, [pc, #56]	; (8000464 <MX_SPI1_Init+0x64>)
 800042c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000430:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000432:	4b0c      	ldr	r3, [pc, #48]	; (8000464 <MX_SPI1_Init+0x64>)
 8000434:	2208      	movs	r2, #8
 8000436:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000438:	4b0a      	ldr	r3, [pc, #40]	; (8000464 <MX_SPI1_Init+0x64>)
 800043a:	2200      	movs	r2, #0
 800043c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800043e:	4b09      	ldr	r3, [pc, #36]	; (8000464 <MX_SPI1_Init+0x64>)
 8000440:	2200      	movs	r2, #0
 8000442:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000444:	4b07      	ldr	r3, [pc, #28]	; (8000464 <MX_SPI1_Init+0x64>)
 8000446:	2200      	movs	r2, #0
 8000448:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800044a:	4b06      	ldr	r3, [pc, #24]	; (8000464 <MX_SPI1_Init+0x64>)
 800044c:	220a      	movs	r2, #10
 800044e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000450:	4804      	ldr	r0, [pc, #16]	; (8000464 <MX_SPI1_Init+0x64>)
 8000452:	f003 fecb 	bl	80041ec <HAL_SPI_Init>
 8000456:	4603      	mov	r3, r0
 8000458:	2b00      	cmp	r3, #0
 800045a:	d001      	beq.n	8000460 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800045c:	f000 f9e4 	bl	8000828 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000460:	bf00      	nop
 8000462:	bd80      	pop	{r7, pc}
 8000464:	20000660 	.word	0x20000660
 8000468:	40013000 	.word	0x40013000

0800046c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800046c:	b580      	push	{r7, lr}
 800046e:	b082      	sub	sp, #8
 8000470:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000472:	4b0c      	ldr	r3, [pc, #48]	; (80004a4 <MX_DMA_Init+0x38>)
 8000474:	695b      	ldr	r3, [r3, #20]
 8000476:	4a0b      	ldr	r2, [pc, #44]	; (80004a4 <MX_DMA_Init+0x38>)
 8000478:	f043 0301 	orr.w	r3, r3, #1
 800047c:	6153      	str	r3, [r2, #20]
 800047e:	4b09      	ldr	r3, [pc, #36]	; (80004a4 <MX_DMA_Init+0x38>)
 8000480:	695b      	ldr	r3, [r3, #20]
 8000482:	f003 0301 	and.w	r3, r3, #1
 8000486:	607b      	str	r3, [r7, #4]
 8000488:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800048a:	2200      	movs	r2, #0
 800048c:	2100      	movs	r1, #0
 800048e:	200b      	movs	r0, #11
 8000490:	f001 f9c5 	bl	800181e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000494:	200b      	movs	r0, #11
 8000496:	f001 f9de 	bl	8001856 <HAL_NVIC_EnableIRQ>

}
 800049a:	bf00      	nop
 800049c:	3708      	adds	r7, #8
 800049e:	46bd      	mov	sp, r7
 80004a0:	bd80      	pop	{r7, pc}
 80004a2:	bf00      	nop
 80004a4:	40021000 	.word	0x40021000

080004a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004a8:	b580      	push	{r7, lr}
 80004aa:	b088      	sub	sp, #32
 80004ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004ae:	f107 0310 	add.w	r3, r7, #16
 80004b2:	2200      	movs	r2, #0
 80004b4:	601a      	str	r2, [r3, #0]
 80004b6:	605a      	str	r2, [r3, #4]
 80004b8:	609a      	str	r2, [r3, #8]
 80004ba:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004bc:	4b36      	ldr	r3, [pc, #216]	; (8000598 <MX_GPIO_Init+0xf0>)
 80004be:	699b      	ldr	r3, [r3, #24]
 80004c0:	4a35      	ldr	r2, [pc, #212]	; (8000598 <MX_GPIO_Init+0xf0>)
 80004c2:	f043 0310 	orr.w	r3, r3, #16
 80004c6:	6193      	str	r3, [r2, #24]
 80004c8:	4b33      	ldr	r3, [pc, #204]	; (8000598 <MX_GPIO_Init+0xf0>)
 80004ca:	699b      	ldr	r3, [r3, #24]
 80004cc:	f003 0310 	and.w	r3, r3, #16
 80004d0:	60fb      	str	r3, [r7, #12]
 80004d2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80004d4:	4b30      	ldr	r3, [pc, #192]	; (8000598 <MX_GPIO_Init+0xf0>)
 80004d6:	699b      	ldr	r3, [r3, #24]
 80004d8:	4a2f      	ldr	r2, [pc, #188]	; (8000598 <MX_GPIO_Init+0xf0>)
 80004da:	f043 0320 	orr.w	r3, r3, #32
 80004de:	6193      	str	r3, [r2, #24]
 80004e0:	4b2d      	ldr	r3, [pc, #180]	; (8000598 <MX_GPIO_Init+0xf0>)
 80004e2:	699b      	ldr	r3, [r3, #24]
 80004e4:	f003 0320 	and.w	r3, r3, #32
 80004e8:	60bb      	str	r3, [r7, #8]
 80004ea:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004ec:	4b2a      	ldr	r3, [pc, #168]	; (8000598 <MX_GPIO_Init+0xf0>)
 80004ee:	699b      	ldr	r3, [r3, #24]
 80004f0:	4a29      	ldr	r2, [pc, #164]	; (8000598 <MX_GPIO_Init+0xf0>)
 80004f2:	f043 0304 	orr.w	r3, r3, #4
 80004f6:	6193      	str	r3, [r2, #24]
 80004f8:	4b27      	ldr	r3, [pc, #156]	; (8000598 <MX_GPIO_Init+0xf0>)
 80004fa:	699b      	ldr	r3, [r3, #24]
 80004fc:	f003 0304 	and.w	r3, r3, #4
 8000500:	607b      	str	r3, [r7, #4]
 8000502:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000504:	4b24      	ldr	r3, [pc, #144]	; (8000598 <MX_GPIO_Init+0xf0>)
 8000506:	699b      	ldr	r3, [r3, #24]
 8000508:	4a23      	ldr	r2, [pc, #140]	; (8000598 <MX_GPIO_Init+0xf0>)
 800050a:	f043 0308 	orr.w	r3, r3, #8
 800050e:	6193      	str	r3, [r2, #24]
 8000510:	4b21      	ldr	r3, [pc, #132]	; (8000598 <MX_GPIO_Init+0xf0>)
 8000512:	699b      	ldr	r3, [r3, #24]
 8000514:	f003 0308 	and.w	r3, r3, #8
 8000518:	603b      	str	r3, [r7, #0]
 800051a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4, GPIO_PIN_RESET);
 800051c:	2200      	movs	r2, #0
 800051e:	211c      	movs	r1, #28
 8000520:	481e      	ldr	r0, [pc, #120]	; (800059c <MX_GPIO_Init+0xf4>)
 8000522:	f001 fd35 	bl	8001f90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 8000526:	2200      	movs	r2, #0
 8000528:	21c0      	movs	r1, #192	; 0xc0
 800052a:	481d      	ldr	r0, [pc, #116]	; (80005a0 <MX_GPIO_Init+0xf8>)
 800052c:	f001 fd30 	bl	8001f90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000530:	2302      	movs	r3, #2
 8000532:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000534:	4b1b      	ldr	r3, [pc, #108]	; (80005a4 <MX_GPIO_Init+0xfc>)
 8000536:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000538:	2300      	movs	r3, #0
 800053a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800053c:	f107 0310 	add.w	r3, r7, #16
 8000540:	4619      	mov	r1, r3
 8000542:	4816      	ldr	r0, [pc, #88]	; (800059c <MX_GPIO_Init+0xf4>)
 8000544:	f001 fbca 	bl	8001cdc <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2 PA3 PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4;
 8000548:	231c      	movs	r3, #28
 800054a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800054c:	2301      	movs	r3, #1
 800054e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000550:	2300      	movs	r3, #0
 8000552:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000554:	2302      	movs	r3, #2
 8000556:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000558:	f107 0310 	add.w	r3, r7, #16
 800055c:	4619      	mov	r1, r3
 800055e:	480f      	ldr	r0, [pc, #60]	; (800059c <MX_GPIO_Init+0xf4>)
 8000560:	f001 fbbc 	bl	8001cdc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000564:	23c0      	movs	r3, #192	; 0xc0
 8000566:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000568:	2301      	movs	r3, #1
 800056a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800056c:	2300      	movs	r3, #0
 800056e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000570:	2302      	movs	r3, #2
 8000572:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000574:	f107 0310 	add.w	r3, r7, #16
 8000578:	4619      	mov	r1, r3
 800057a:	4809      	ldr	r0, [pc, #36]	; (80005a0 <MX_GPIO_Init+0xf8>)
 800057c:	f001 fbae 	bl	8001cdc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8000580:	2200      	movs	r2, #0
 8000582:	2100      	movs	r1, #0
 8000584:	2007      	movs	r0, #7
 8000586:	f001 f94a 	bl	800181e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 800058a:	2007      	movs	r0, #7
 800058c:	f001 f963 	bl	8001856 <HAL_NVIC_EnableIRQ>

}
 8000590:	bf00      	nop
 8000592:	3720      	adds	r7, #32
 8000594:	46bd      	mov	sp, r7
 8000596:	bd80      	pop	{r7, pc}
 8000598:	40021000 	.word	0x40021000
 800059c:	40010800 	.word	0x40010800
 80005a0:	40010c00 	.word	0x40010c00
 80005a4:	10110000 	.word	0x10110000

080005a8 <CDC_ReciveCallBack>:

/* USER CODE BEGIN 4 */
void CDC_ReciveCallBack(uint8_t *Buf, uint32_t *Len) {
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b082      	sub	sp, #8
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	6078      	str	r0, [r7, #4]
 80005b0:	6039      	str	r1, [r7, #0]
	switch(Buf[0]) {
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	781b      	ldrb	r3, [r3, #0]
 80005b6:	3b61      	subs	r3, #97	; 0x61
 80005b8:	2b12      	cmp	r3, #18
 80005ba:	d876      	bhi.n	80006aa <CDC_ReciveCallBack+0x102>
 80005bc:	a201      	add	r2, pc, #4	; (adr r2, 80005c4 <CDC_ReciveCallBack+0x1c>)
 80005be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005c2:	bf00      	nop
 80005c4:	08000611 	.word	0x08000611
 80005c8:	0800062d 	.word	0x0800062d
 80005cc:	080006ab 	.word	0x080006ab
 80005d0:	080006ab 	.word	0x080006ab
 80005d4:	0800066d 	.word	0x0800066d
 80005d8:	080006ab 	.word	0x080006ab
 80005dc:	080006ab 	.word	0x080006ab
 80005e0:	080006ab 	.word	0x080006ab
 80005e4:	080006ab 	.word	0x080006ab
 80005e8:	080006ab 	.word	0x080006ab
 80005ec:	080006ab 	.word	0x080006ab
 80005f0:	080006ab 	.word	0x080006ab
 80005f4:	080006ab 	.word	0x080006ab
 80005f8:	080006ab 	.word	0x080006ab
 80005fc:	080006ab 	.word	0x080006ab
 8000600:	080006ab 	.word	0x080006ab
 8000604:	080006ab 	.word	0x080006ab
 8000608:	080006ab 	.word	0x080006ab
 800060c:	0800067b 	.word	0x0800067b
		case 'a': {//ack
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_SET);
 8000610:	2201      	movs	r2, #1
 8000612:	2108      	movs	r1, #8
 8000614:	4827      	ldr	r0, [pc, #156]	; (80006b4 <CDC_ReciveCallBack+0x10c>)
 8000616:	f001 fcbb 	bl	8001f90 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
 800061a:	2200      	movs	r2, #0
 800061c:	2108      	movs	r1, #8
 800061e:	4825      	ldr	r0, [pc, #148]	; (80006b4 <CDC_ReciveCallBack+0x10c>)
 8000620:	f001 fcb6 	bl	8001f90 <HAL_GPIO_WritePin>
			ack = True;
 8000624:	4b24      	ldr	r3, [pc, #144]	; (80006b8 <CDC_ReciveCallBack+0x110>)
 8000626:	2201      	movs	r2, #1
 8000628:	701a      	strb	r2, [r3, #0]
				break;
 800062a:	e03e      	b.n	80006aa <CDC_ReciveCallBack+0x102>
			}
		case 'b': {//begin
			if (status == status_doNothing) {
 800062c:	4b23      	ldr	r3, [pc, #140]	; (80006bc <CDC_ReciveCallBack+0x114>)
 800062e:	781b      	ldrb	r3, [r3, #0]
 8000630:	2b0d      	cmp	r3, #13
 8000632:	d11b      	bne.n	800066c <CDC_ReciveCallBack+0xc4>
				if(Buf[1] == 't') {
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	3301      	adds	r3, #1
 8000638:	781b      	ldrb	r3, [r3, #0]
 800063a:	2b74      	cmp	r3, #116	; 0x74
 800063c:	d10d      	bne.n	800065a <CDC_ReciveCallBack+0xb2>
					status = status_reading_trigger;
 800063e:	4b1f      	ldr	r3, [pc, #124]	; (80006bc <CDC_ReciveCallBack+0x114>)
 8000640:	220a      	movs	r2, #10
 8000642:	701a      	strb	r2, [r3, #0]
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_SET);
 8000644:	2201      	movs	r2, #1
 8000646:	2108      	movs	r1, #8
 8000648:	481a      	ldr	r0, [pc, #104]	; (80006b4 <CDC_ReciveCallBack+0x10c>)
 800064a:	f001 fca1 	bl	8001f90 <HAL_GPIO_WritePin>
					HAL_ADC_Start_DMA(&hadc1, (uint32_t*)&DMA_buffer, DMA_buf_size);
 800064e:	2228      	movs	r2, #40	; 0x28
 8000650:	491b      	ldr	r1, [pc, #108]	; (80006c0 <CDC_ReciveCallBack+0x118>)
 8000652:	481c      	ldr	r0, [pc, #112]	; (80006c4 <CDC_ReciveCallBack+0x11c>)
 8000654:	f000 fc48 	bl	8000ee8 <HAL_ADC_Start_DMA>
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_SET);
				}

				//HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_3);
				//HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_3);
				break;
 8000658:	e027      	b.n	80006aa <CDC_ReciveCallBack+0x102>
					status = status_beReady_tracer;
 800065a:	4b18      	ldr	r3, [pc, #96]	; (80006bc <CDC_ReciveCallBack+0x114>)
 800065c:	220e      	movs	r2, #14
 800065e:	701a      	strb	r2, [r3, #0]
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_SET);
 8000660:	2201      	movs	r2, #1
 8000662:	2108      	movs	r1, #8
 8000664:	4813      	ldr	r0, [pc, #76]	; (80006b4 <CDC_ReciveCallBack+0x10c>)
 8000666:	f001 fc93 	bl	8001f90 <HAL_GPIO_WritePin>
				break;
 800066a:	e01e      	b.n	80006aa <CDC_ReciveCallBack+0x102>
			}
		}
		case 'e': {//end
			status = status_doNothing;
 800066c:	4b13      	ldr	r3, [pc, #76]	; (80006bc <CDC_ReciveCallBack+0x114>)
 800066e:	220d      	movs	r2, #13
 8000670:	701a      	strb	r2, [r3, #0]
			is_triggered = 0;
 8000672:	4b15      	ldr	r3, [pc, #84]	; (80006c8 <CDC_ReciveCallBack+0x120>)
 8000674:	2200      	movs	r2, #0
 8000676:	701a      	strb	r2, [r3, #0]
			//data_part_idx = 0;
			break;
 8000678:	e017      	b.n	80006aa <CDC_ReciveCallBack+0x102>
		}
		case 's': {//settings
			//Buf[] = "st0000g0000"

			new_trigger_level = atoi(Buf[2]);
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	3302      	adds	r3, #2
 800067e:	781b      	ldrb	r3, [r3, #0]
 8000680:	4618      	mov	r0, r3
 8000682:	f008 f8d3 	bl	800882c <atoi>
 8000686:	4603      	mov	r3, r0
 8000688:	b29a      	uxth	r2, r3
 800068a:	4b10      	ldr	r3, [pc, #64]	; (80006cc <CDC_ReciveCallBack+0x124>)
 800068c:	801a      	strh	r2, [r3, #0]
			newGain = atoi(Buf[7]);
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	3307      	adds	r3, #7
 8000692:	781b      	ldrb	r3, [r3, #0]
 8000694:	4618      	mov	r0, r3
 8000696:	f008 f8c9 	bl	800882c <atoi>
 800069a:	4603      	mov	r3, r0
 800069c:	b29a      	uxth	r2, r3
 800069e:	4b0c      	ldr	r3, [pc, #48]	; (80006d0 <CDC_ReciveCallBack+0x128>)
 80006a0:	801a      	strh	r2, [r3, #0]
			settings_changed = True;
 80006a2:	4b0c      	ldr	r3, [pc, #48]	; (80006d4 <CDC_ReciveCallBack+0x12c>)
 80006a4:	2201      	movs	r2, #1
 80006a6:	701a      	strb	r2, [r3, #0]
			break;
 80006a8:	bf00      	nop
		}
	}
}
 80006aa:	bf00      	nop
 80006ac:	3708      	adds	r7, #8
 80006ae:	46bd      	mov	sp, r7
 80006b0:	bd80      	pop	{r7, pc}
 80006b2:	bf00      	nop
 80006b4:	40010800 	.word	0x40010800
 80006b8:	2000036d 	.word	0x2000036d
 80006bc:	20000001 	.word	0x20000001
 80006c0:	2000059c 	.word	0x2000059c
 80006c4:	200005ec 	.word	0x200005ec
 80006c8:	2000036c 	.word	0x2000036c
 80006cc:	20000374 	.word	0x20000374
 80006d0:	20000376 	.word	0x20000376
 80006d4:	20000370 	.word	0x20000370

080006d8 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80006d8:	b580      	push	{r7, lr}
 80006da:	b082      	sub	sp, #8
 80006dc:	af00      	add	r7, sp, #0
 80006de:	4603      	mov	r3, r0
 80006e0:	80fb      	strh	r3, [r7, #6]
	if((GPIO_Pin == GPIO_PIN_1)&&(status == status_beReady_tracer)) //3.3 on PA1
 80006e2:	88fb      	ldrh	r3, [r7, #6]
 80006e4:	2b02      	cmp	r3, #2
 80006e6:	d10f      	bne.n	8000708 <HAL_GPIO_EXTI_Callback+0x30>
 80006e8:	4b0a      	ldr	r3, [pc, #40]	; (8000714 <HAL_GPIO_EXTI_Callback+0x3c>)
 80006ea:	781b      	ldrb	r3, [r3, #0]
 80006ec:	2b0e      	cmp	r3, #14
 80006ee:	d10b      	bne.n	8000708 <HAL_GPIO_EXTI_Callback+0x30>
		{
			status = status_reading_tracer;
 80006f0:	4b08      	ldr	r3, [pc, #32]	; (8000714 <HAL_GPIO_EXTI_Callback+0x3c>)
 80006f2:	2209      	movs	r2, #9
 80006f4:	701a      	strb	r2, [r3, #0]
			is_triggered = 1;
 80006f6:	4b08      	ldr	r3, [pc, #32]	; (8000718 <HAL_GPIO_EXTI_Callback+0x40>)
 80006f8:	2201      	movs	r2, #1
 80006fa:	701a      	strb	r2, [r3, #0]
			HAL_ADC_Start_DMA(&hadc1, (uint32_t*)&DMA_buffer, DMA_buf_size);
 80006fc:	2228      	movs	r2, #40	; 0x28
 80006fe:	4907      	ldr	r1, [pc, #28]	; (800071c <HAL_GPIO_EXTI_Callback+0x44>)
 8000700:	4807      	ldr	r0, [pc, #28]	; (8000720 <HAL_GPIO_EXTI_Callback+0x48>)
 8000702:	f000 fbf1 	bl	8000ee8 <HAL_ADC_Start_DMA>
 8000706:	e000      	b.n	800070a <HAL_GPIO_EXTI_Callback+0x32>
			//HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3 | GPIO_PIN_4, GPIO_PIN_RESET); //set 0 v on PA3
		}
		else
		{
			__NOP();
 8000708:	bf00      	nop
		}
}
 800070a:	bf00      	nop
 800070c:	3708      	adds	r7, #8
 800070e:	46bd      	mov	sp, r7
 8000710:	bd80      	pop	{r7, pc}
 8000712:	bf00      	nop
 8000714:	20000001 	.word	0x20000001
 8000718:	2000036c 	.word	0x2000036c
 800071c:	2000059c 	.word	0x2000059c
 8000720:	200005ec 	.word	0x200005ec

08000724 <HAL_ADC_ConvCpltCallback>:


 void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 8000724:	b580      	push	{r7, lr}
 8000726:	b082      	sub	sp, #8
 8000728:	af00      	add	r7, sp, #0
 800072a:	6078      	str	r0, [r7, #4]
	data_part_idx += is_triggered;
 800072c:	4b17      	ldr	r3, [pc, #92]	; (800078c <HAL_ADC_ConvCpltCallback+0x68>)
 800072e:	781b      	ldrb	r3, [r3, #0]
 8000730:	b29a      	uxth	r2, r3
 8000732:	4b17      	ldr	r3, [pc, #92]	; (8000790 <HAL_ADC_ConvCpltCallback+0x6c>)
 8000734:	881b      	ldrh	r3, [r3, #0]
 8000736:	4413      	add	r3, r2
 8000738:	b29a      	uxth	r2, r3
 800073a:	4b15      	ldr	r3, [pc, #84]	; (8000790 <HAL_ADC_ConvCpltCallback+0x6c>)
 800073c:	801a      	strh	r2, [r3, #0]
	memcpy(&Data_buffer[data_part_idx * DMA_half_buf_size], &DMA_buffer[DMA_midIdx], DMA_half_buf_size * sizeof(uint16_t));
 800073e:	4b14      	ldr	r3, [pc, #80]	; (8000790 <HAL_ADC_ConvCpltCallback+0x6c>)
 8000740:	881b      	ldrh	r3, [r3, #0]
 8000742:	461a      	mov	r2, r3
 8000744:	4613      	mov	r3, r2
 8000746:	009b      	lsls	r3, r3, #2
 8000748:	4413      	add	r3, r2
 800074a:	009b      	lsls	r3, r3, #2
 800074c:	005b      	lsls	r3, r3, #1
 800074e:	4a11      	ldr	r2, [pc, #68]	; (8000794 <HAL_ADC_ConvCpltCallback+0x70>)
 8000750:	1898      	adds	r0, r3, r2
 8000752:	4b11      	ldr	r3, [pc, #68]	; (8000798 <HAL_ADC_ConvCpltCallback+0x74>)
 8000754:	781b      	ldrb	r3, [r3, #0]
 8000756:	005b      	lsls	r3, r3, #1
 8000758:	4a10      	ldr	r2, [pc, #64]	; (800079c <HAL_ADC_ConvCpltCallback+0x78>)
 800075a:	4413      	add	r3, r2
 800075c:	2228      	movs	r2, #40	; 0x28
 800075e:	4619      	mov	r1, r3
 8000760:	f008 f88c 	bl	800887c <memcpy>
	if(data_part_idx >= number_half_bufSize) {//количество полоивин дма буффера в большом буффере
 8000764:	4b0a      	ldr	r3, [pc, #40]	; (8000790 <HAL_ADC_ConvCpltCallback+0x6c>)
 8000766:	881b      	ldrh	r3, [r3, #0]
 8000768:	2b63      	cmp	r3, #99	; 0x63
 800076a:	d90a      	bls.n	8000782 <HAL_ADC_ConvCpltCallback+0x5e>
		HAL_ADC_Stop_DMA(&hadc1);
 800076c:	480c      	ldr	r0, [pc, #48]	; (80007a0 <HAL_ADC_ConvCpltCallback+0x7c>)
 800076e:	f000 fc99 	bl	80010a4 <HAL_ADC_Stop_DMA>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_SET);
 8000772:	2201      	movs	r2, #1
 8000774:	2104      	movs	r1, #4
 8000776:	480b      	ldr	r0, [pc, #44]	; (80007a4 <HAL_ADC_ConvCpltCallback+0x80>)
 8000778:	f001 fc0a 	bl	8001f90 <HAL_GPIO_WritePin>
		status = status_SENDING_Data;
 800077c:	4b0a      	ldr	r3, [pc, #40]	; (80007a8 <HAL_ADC_ConvCpltCallback+0x84>)
 800077e:	220b      	movs	r2, #11
 8000780:	701a      	strb	r2, [r3, #0]
	}
}
 8000782:	bf00      	nop
 8000784:	3708      	adds	r7, #8
 8000786:	46bd      	mov	sp, r7
 8000788:	bd80      	pop	{r7, pc}
 800078a:	bf00      	nop
 800078c:	2000036c 	.word	0x2000036c
 8000790:	2000036e 	.word	0x2000036e
 8000794:	200006b8 	.word	0x200006b8
 8000798:	20000000 	.word	0x20000000
 800079c:	2000059c 	.word	0x2000059c
 80007a0:	200005ec 	.word	0x200005ec
 80007a4:	40010800 	.word	0x40010800
 80007a8:	20000001 	.word	0x20000001

080007ac <HAL_ADC_ConvHalfCpltCallback>:

void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc) {
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b082      	sub	sp, #8
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	6078      	str	r0, [r7, #4]
	data_part_idx += is_triggered;
 80007b4:	4b15      	ldr	r3, [pc, #84]	; (800080c <HAL_ADC_ConvHalfCpltCallback+0x60>)
 80007b6:	781b      	ldrb	r3, [r3, #0]
 80007b8:	b29a      	uxth	r2, r3
 80007ba:	4b15      	ldr	r3, [pc, #84]	; (8000810 <HAL_ADC_ConvHalfCpltCallback+0x64>)
 80007bc:	881b      	ldrh	r3, [r3, #0]
 80007be:	4413      	add	r3, r2
 80007c0:	b29a      	uxth	r2, r3
 80007c2:	4b13      	ldr	r3, [pc, #76]	; (8000810 <HAL_ADC_ConvHalfCpltCallback+0x64>)
 80007c4:	801a      	strh	r2, [r3, #0]
	memcpy(&Data_buffer[data_part_idx * DMA_half_buf_size], &DMA_buffer, DMA_half_buf_size * sizeof(uint16_t));
 80007c6:	4b12      	ldr	r3, [pc, #72]	; (8000810 <HAL_ADC_ConvHalfCpltCallback+0x64>)
 80007c8:	881b      	ldrh	r3, [r3, #0]
 80007ca:	461a      	mov	r2, r3
 80007cc:	4613      	mov	r3, r2
 80007ce:	009b      	lsls	r3, r3, #2
 80007d0:	4413      	add	r3, r2
 80007d2:	009b      	lsls	r3, r3, #2
 80007d4:	005b      	lsls	r3, r3, #1
 80007d6:	4a0f      	ldr	r2, [pc, #60]	; (8000814 <HAL_ADC_ConvHalfCpltCallback+0x68>)
 80007d8:	4413      	add	r3, r2
 80007da:	2228      	movs	r2, #40	; 0x28
 80007dc:	490e      	ldr	r1, [pc, #56]	; (8000818 <HAL_ADC_ConvHalfCpltCallback+0x6c>)
 80007de:	4618      	mov	r0, r3
 80007e0:	f008 f84c 	bl	800887c <memcpy>
	if(data_part_idx >= number_half_bufSize) {
 80007e4:	4b0a      	ldr	r3, [pc, #40]	; (8000810 <HAL_ADC_ConvHalfCpltCallback+0x64>)
 80007e6:	881b      	ldrh	r3, [r3, #0]
 80007e8:	2b63      	cmp	r3, #99	; 0x63
 80007ea:	d90a      	bls.n	8000802 <HAL_ADC_ConvHalfCpltCallback+0x56>
		HAL_ADC_Stop_DMA(&hadc1);
 80007ec:	480b      	ldr	r0, [pc, #44]	; (800081c <HAL_ADC_ConvHalfCpltCallback+0x70>)
 80007ee:	f000 fc59 	bl	80010a4 <HAL_ADC_Stop_DMA>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_SET);
 80007f2:	2201      	movs	r2, #1
 80007f4:	2104      	movs	r1, #4
 80007f6:	480a      	ldr	r0, [pc, #40]	; (8000820 <HAL_ADC_ConvHalfCpltCallback+0x74>)
 80007f8:	f001 fbca 	bl	8001f90 <HAL_GPIO_WritePin>
		status = status_SENDING_Data;
 80007fc:	4b09      	ldr	r3, [pc, #36]	; (8000824 <HAL_ADC_ConvHalfCpltCallback+0x78>)
 80007fe:	220b      	movs	r2, #11
 8000800:	701a      	strb	r2, [r3, #0]
	}
}
 8000802:	bf00      	nop
 8000804:	3708      	adds	r7, #8
 8000806:	46bd      	mov	sp, r7
 8000808:	bd80      	pop	{r7, pc}
 800080a:	bf00      	nop
 800080c:	2000036c 	.word	0x2000036c
 8000810:	2000036e 	.word	0x2000036e
 8000814:	200006b8 	.word	0x200006b8
 8000818:	2000059c 	.word	0x2000059c
 800081c:	200005ec 	.word	0x200005ec
 8000820:	40010800 	.word	0x40010800
 8000824:	20000001 	.word	0x20000001

08000828 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000828:	b480      	push	{r7}
 800082a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800082c:	bf00      	nop
 800082e:	46bd      	mov	sp, r7
 8000830:	bc80      	pop	{r7}
 8000832:	4770      	bx	lr

08000834 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000834:	b480      	push	{r7}
 8000836:	b085      	sub	sp, #20
 8000838:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800083a:	4b15      	ldr	r3, [pc, #84]	; (8000890 <HAL_MspInit+0x5c>)
 800083c:	699b      	ldr	r3, [r3, #24]
 800083e:	4a14      	ldr	r2, [pc, #80]	; (8000890 <HAL_MspInit+0x5c>)
 8000840:	f043 0301 	orr.w	r3, r3, #1
 8000844:	6193      	str	r3, [r2, #24]
 8000846:	4b12      	ldr	r3, [pc, #72]	; (8000890 <HAL_MspInit+0x5c>)
 8000848:	699b      	ldr	r3, [r3, #24]
 800084a:	f003 0301 	and.w	r3, r3, #1
 800084e:	60bb      	str	r3, [r7, #8]
 8000850:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000852:	4b0f      	ldr	r3, [pc, #60]	; (8000890 <HAL_MspInit+0x5c>)
 8000854:	69db      	ldr	r3, [r3, #28]
 8000856:	4a0e      	ldr	r2, [pc, #56]	; (8000890 <HAL_MspInit+0x5c>)
 8000858:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800085c:	61d3      	str	r3, [r2, #28]
 800085e:	4b0c      	ldr	r3, [pc, #48]	; (8000890 <HAL_MspInit+0x5c>)
 8000860:	69db      	ldr	r3, [r3, #28]
 8000862:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000866:	607b      	str	r3, [r7, #4]
 8000868:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800086a:	4b0a      	ldr	r3, [pc, #40]	; (8000894 <HAL_MspInit+0x60>)
 800086c:	685b      	ldr	r3, [r3, #4]
 800086e:	60fb      	str	r3, [r7, #12]
 8000870:	68fb      	ldr	r3, [r7, #12]
 8000872:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000876:	60fb      	str	r3, [r7, #12]
 8000878:	68fb      	ldr	r3, [r7, #12]
 800087a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800087e:	60fb      	str	r3, [r7, #12]
 8000880:	4a04      	ldr	r2, [pc, #16]	; (8000894 <HAL_MspInit+0x60>)
 8000882:	68fb      	ldr	r3, [r7, #12]
 8000884:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000886:	bf00      	nop
 8000888:	3714      	adds	r7, #20
 800088a:	46bd      	mov	sp, r7
 800088c:	bc80      	pop	{r7}
 800088e:	4770      	bx	lr
 8000890:	40021000 	.word	0x40021000
 8000894:	40010000 	.word	0x40010000

08000898 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b088      	sub	sp, #32
 800089c:	af00      	add	r7, sp, #0
 800089e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008a0:	f107 0310 	add.w	r3, r7, #16
 80008a4:	2200      	movs	r2, #0
 80008a6:	601a      	str	r2, [r3, #0]
 80008a8:	605a      	str	r2, [r3, #4]
 80008aa:	609a      	str	r2, [r3, #8]
 80008ac:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	681b      	ldr	r3, [r3, #0]
 80008b2:	4a29      	ldr	r2, [pc, #164]	; (8000958 <HAL_ADC_MspInit+0xc0>)
 80008b4:	4293      	cmp	r3, r2
 80008b6:	d14a      	bne.n	800094e <HAL_ADC_MspInit+0xb6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80008b8:	4b28      	ldr	r3, [pc, #160]	; (800095c <HAL_ADC_MspInit+0xc4>)
 80008ba:	699b      	ldr	r3, [r3, #24]
 80008bc:	4a27      	ldr	r2, [pc, #156]	; (800095c <HAL_ADC_MspInit+0xc4>)
 80008be:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80008c2:	6193      	str	r3, [r2, #24]
 80008c4:	4b25      	ldr	r3, [pc, #148]	; (800095c <HAL_ADC_MspInit+0xc4>)
 80008c6:	699b      	ldr	r3, [r3, #24]
 80008c8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80008cc:	60fb      	str	r3, [r7, #12]
 80008ce:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008d0:	4b22      	ldr	r3, [pc, #136]	; (800095c <HAL_ADC_MspInit+0xc4>)
 80008d2:	699b      	ldr	r3, [r3, #24]
 80008d4:	4a21      	ldr	r2, [pc, #132]	; (800095c <HAL_ADC_MspInit+0xc4>)
 80008d6:	f043 0304 	orr.w	r3, r3, #4
 80008da:	6193      	str	r3, [r2, #24]
 80008dc:	4b1f      	ldr	r3, [pc, #124]	; (800095c <HAL_ADC_MspInit+0xc4>)
 80008de:	699b      	ldr	r3, [r3, #24]
 80008e0:	f003 0304 	and.w	r3, r3, #4
 80008e4:	60bb      	str	r3, [r7, #8]
 80008e6:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80008e8:	2301      	movs	r3, #1
 80008ea:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80008ec:	2303      	movs	r3, #3
 80008ee:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008f0:	f107 0310 	add.w	r3, r7, #16
 80008f4:	4619      	mov	r1, r3
 80008f6:	481a      	ldr	r0, [pc, #104]	; (8000960 <HAL_ADC_MspInit+0xc8>)
 80008f8:	f001 f9f0 	bl	8001cdc <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80008fc:	4b19      	ldr	r3, [pc, #100]	; (8000964 <HAL_ADC_MspInit+0xcc>)
 80008fe:	4a1a      	ldr	r2, [pc, #104]	; (8000968 <HAL_ADC_MspInit+0xd0>)
 8000900:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000902:	4b18      	ldr	r3, [pc, #96]	; (8000964 <HAL_ADC_MspInit+0xcc>)
 8000904:	2200      	movs	r2, #0
 8000906:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000908:	4b16      	ldr	r3, [pc, #88]	; (8000964 <HAL_ADC_MspInit+0xcc>)
 800090a:	2200      	movs	r2, #0
 800090c:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800090e:	4b15      	ldr	r3, [pc, #84]	; (8000964 <HAL_ADC_MspInit+0xcc>)
 8000910:	2280      	movs	r2, #128	; 0x80
 8000912:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000914:	4b13      	ldr	r3, [pc, #76]	; (8000964 <HAL_ADC_MspInit+0xcc>)
 8000916:	f44f 7280 	mov.w	r2, #256	; 0x100
 800091a:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800091c:	4b11      	ldr	r3, [pc, #68]	; (8000964 <HAL_ADC_MspInit+0xcc>)
 800091e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000922:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000924:	4b0f      	ldr	r3, [pc, #60]	; (8000964 <HAL_ADC_MspInit+0xcc>)
 8000926:	2220      	movs	r2, #32
 8000928:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800092a:	4b0e      	ldr	r3, [pc, #56]	; (8000964 <HAL_ADC_MspInit+0xcc>)
 800092c:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8000930:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000932:	480c      	ldr	r0, [pc, #48]	; (8000964 <HAL_ADC_MspInit+0xcc>)
 8000934:	f000 ffaa 	bl	800188c <HAL_DMA_Init>
 8000938:	4603      	mov	r3, r0
 800093a:	2b00      	cmp	r3, #0
 800093c:	d001      	beq.n	8000942 <HAL_ADC_MspInit+0xaa>
    {
      Error_Handler();
 800093e:	f7ff ff73 	bl	8000828 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	4a07      	ldr	r2, [pc, #28]	; (8000964 <HAL_ADC_MspInit+0xcc>)
 8000946:	621a      	str	r2, [r3, #32]
 8000948:	4a06      	ldr	r2, [pc, #24]	; (8000964 <HAL_ADC_MspInit+0xcc>)
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800094e:	bf00      	nop
 8000950:	3720      	adds	r7, #32
 8000952:	46bd      	mov	sp, r7
 8000954:	bd80      	pop	{r7, pc}
 8000956:	bf00      	nop
 8000958:	40012400 	.word	0x40012400
 800095c:	40021000 	.word	0x40021000
 8000960:	40010800 	.word	0x40010800
 8000964:	2000061c 	.word	0x2000061c
 8000968:	40020008 	.word	0x40020008

0800096c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b08a      	sub	sp, #40	; 0x28
 8000970:	af00      	add	r7, sp, #0
 8000972:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000974:	f107 0314 	add.w	r3, r7, #20
 8000978:	2200      	movs	r2, #0
 800097a:	601a      	str	r2, [r3, #0]
 800097c:	605a      	str	r2, [r3, #4]
 800097e:	609a      	str	r2, [r3, #8]
 8000980:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	681b      	ldr	r3, [r3, #0]
 8000986:	4a22      	ldr	r2, [pc, #136]	; (8000a10 <HAL_SPI_MspInit+0xa4>)
 8000988:	4293      	cmp	r3, r2
 800098a:	d13d      	bne.n	8000a08 <HAL_SPI_MspInit+0x9c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800098c:	4b21      	ldr	r3, [pc, #132]	; (8000a14 <HAL_SPI_MspInit+0xa8>)
 800098e:	699b      	ldr	r3, [r3, #24]
 8000990:	4a20      	ldr	r2, [pc, #128]	; (8000a14 <HAL_SPI_MspInit+0xa8>)
 8000992:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000996:	6193      	str	r3, [r2, #24]
 8000998:	4b1e      	ldr	r3, [pc, #120]	; (8000a14 <HAL_SPI_MspInit+0xa8>)
 800099a:	699b      	ldr	r3, [r3, #24]
 800099c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80009a0:	613b      	str	r3, [r7, #16]
 80009a2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009a4:	4b1b      	ldr	r3, [pc, #108]	; (8000a14 <HAL_SPI_MspInit+0xa8>)
 80009a6:	699b      	ldr	r3, [r3, #24]
 80009a8:	4a1a      	ldr	r2, [pc, #104]	; (8000a14 <HAL_SPI_MspInit+0xa8>)
 80009aa:	f043 0308 	orr.w	r3, r3, #8
 80009ae:	6193      	str	r3, [r2, #24]
 80009b0:	4b18      	ldr	r3, [pc, #96]	; (8000a14 <HAL_SPI_MspInit+0xa8>)
 80009b2:	699b      	ldr	r3, [r3, #24]
 80009b4:	f003 0308 	and.w	r3, r3, #8
 80009b8:	60fb      	str	r3, [r7, #12]
 80009ba:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 80009bc:	2328      	movs	r3, #40	; 0x28
 80009be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009c0:	2302      	movs	r3, #2
 80009c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80009c4:	2303      	movs	r3, #3
 80009c6:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009c8:	f107 0314 	add.w	r3, r7, #20
 80009cc:	4619      	mov	r1, r3
 80009ce:	4812      	ldr	r0, [pc, #72]	; (8000a18 <HAL_SPI_MspInit+0xac>)
 80009d0:	f001 f984 	bl	8001cdc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80009d4:	2310      	movs	r3, #16
 80009d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009d8:	2300      	movs	r3, #0
 80009da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009dc:	2300      	movs	r3, #0
 80009de:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009e0:	f107 0314 	add.w	r3, r7, #20
 80009e4:	4619      	mov	r1, r3
 80009e6:	480c      	ldr	r0, [pc, #48]	; (8000a18 <HAL_SPI_MspInit+0xac>)
 80009e8:	f001 f978 	bl	8001cdc <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_SPI1_ENABLE();
 80009ec:	4b0b      	ldr	r3, [pc, #44]	; (8000a1c <HAL_SPI_MspInit+0xb0>)
 80009ee:	685b      	ldr	r3, [r3, #4]
 80009f0:	627b      	str	r3, [r7, #36]	; 0x24
 80009f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009f4:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80009f8:	627b      	str	r3, [r7, #36]	; 0x24
 80009fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009fc:	f043 0301 	orr.w	r3, r3, #1
 8000a00:	627b      	str	r3, [r7, #36]	; 0x24
 8000a02:	4a06      	ldr	r2, [pc, #24]	; (8000a1c <HAL_SPI_MspInit+0xb0>)
 8000a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a06:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000a08:	bf00      	nop
 8000a0a:	3728      	adds	r7, #40	; 0x28
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	bd80      	pop	{r7, pc}
 8000a10:	40013000 	.word	0x40013000
 8000a14:	40021000 	.word	0x40021000
 8000a18:	40010c00 	.word	0x40010c00
 8000a1c:	40010000 	.word	0x40010000

08000a20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a20:	b480      	push	{r7}
 8000a22:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000a24:	bf00      	nop
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bc80      	pop	{r7}
 8000a2a:	4770      	bx	lr

08000a2c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a30:	e7fe      	b.n	8000a30 <HardFault_Handler+0x4>

08000a32 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a32:	b480      	push	{r7}
 8000a34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a36:	e7fe      	b.n	8000a36 <MemManage_Handler+0x4>

08000a38 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a3c:	e7fe      	b.n	8000a3c <BusFault_Handler+0x4>

08000a3e <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a3e:	b480      	push	{r7}
 8000a40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a42:	e7fe      	b.n	8000a42 <UsageFault_Handler+0x4>

08000a44 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a44:	b480      	push	{r7}
 8000a46:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a48:	bf00      	nop
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	bc80      	pop	{r7}
 8000a4e:	4770      	bx	lr

08000a50 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a50:	b480      	push	{r7}
 8000a52:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a54:	bf00      	nop
 8000a56:	46bd      	mov	sp, r7
 8000a58:	bc80      	pop	{r7}
 8000a5a:	4770      	bx	lr

08000a5c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a60:	bf00      	nop
 8000a62:	46bd      	mov	sp, r7
 8000a64:	bc80      	pop	{r7}
 8000a66:	4770      	bx	lr

08000a68 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a6c:	f000 f89a 	bl	8000ba4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a70:	bf00      	nop
 8000a72:	bd80      	pop	{r7, pc}

08000a74 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8000a78:	2002      	movs	r0, #2
 8000a7a:	f001 faa1 	bl	8001fc0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8000a7e:	bf00      	nop
 8000a80:	bd80      	pop	{r7, pc}
	...

08000a84 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000a88:	4802      	ldr	r0, [pc, #8]	; (8000a94 <DMA1_Channel1_IRQHandler+0x10>)
 8000a8a:	f000 fff3 	bl	8001a74 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000a8e:	bf00      	nop
 8000a90:	bd80      	pop	{r7, pc}
 8000a92:	bf00      	nop
 8000a94:	2000061c 	.word	0x2000061c

08000a98 <USB_HP_CAN1_TX_IRQHandler>:

/**
  * @brief This function handles USB high priority or CAN TX interrupts.
  */
void USB_HP_CAN1_TX_IRQHandler(void)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 0 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000a9c:	4802      	ldr	r0, [pc, #8]	; (8000aa8 <USB_HP_CAN1_TX_IRQHandler+0x10>)
 8000a9e:	f001 fbd8 	bl	8002252 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 1 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 1 */
}
 8000aa2:	bf00      	nop
 8000aa4:	bd80      	pop	{r7, pc}
 8000aa6:	bf00      	nop
 8000aa8:	20001a40 	.word	0x20001a40

08000aac <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000ab0:	4802      	ldr	r0, [pc, #8]	; (8000abc <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8000ab2:	f001 fbce 	bl	8002252 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8000ab6:	bf00      	nop
 8000ab8:	bd80      	pop	{r7, pc}
 8000aba:	bf00      	nop
 8000abc:	20001a40 	.word	0x20001a40

08000ac0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ac4:	bf00      	nop
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	bc80      	pop	{r7}
 8000aca:	4770      	bx	lr

08000acc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000acc:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000ace:	e003      	b.n	8000ad8 <LoopCopyDataInit>

08000ad0 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000ad0:	4b0b      	ldr	r3, [pc, #44]	; (8000b00 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000ad2:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000ad4:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000ad6:	3104      	adds	r1, #4

08000ad8 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000ad8:	480a      	ldr	r0, [pc, #40]	; (8000b04 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000ada:	4b0b      	ldr	r3, [pc, #44]	; (8000b08 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000adc:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000ade:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000ae0:	d3f6      	bcc.n	8000ad0 <CopyDataInit>
  ldr r2, =_sbss
 8000ae2:	4a0a      	ldr	r2, [pc, #40]	; (8000b0c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000ae4:	e002      	b.n	8000aec <LoopFillZerobss>

08000ae6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000ae6:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000ae8:	f842 3b04 	str.w	r3, [r2], #4

08000aec <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000aec:	4b08      	ldr	r3, [pc, #32]	; (8000b10 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000aee:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000af0:	d3f9      	bcc.n	8000ae6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000af2:	f7ff ffe5 	bl	8000ac0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000af6:	f007 fe9d 	bl	8008834 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000afa:	f7ff fb51 	bl	80001a0 <main>
  bx lr
 8000afe:	4770      	bx	lr
  ldr r3, =_sidata
 8000b00:	08008bbc 	.word	0x08008bbc
  ldr r0, =_sdata
 8000b04:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000b08:	20000350 	.word	0x20000350
  ldr r2, =_sbss
 8000b0c:	20000350 	.word	0x20000350
  ldr r3, = _ebss
 8000b10:	20001d2c 	.word	0x20001d2c

08000b14 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000b14:	e7fe      	b.n	8000b14 <ADC1_2_IRQHandler>
	...

08000b18 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b1c:	4b08      	ldr	r3, [pc, #32]	; (8000b40 <HAL_Init+0x28>)
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	4a07      	ldr	r2, [pc, #28]	; (8000b40 <HAL_Init+0x28>)
 8000b22:	f043 0310 	orr.w	r3, r3, #16
 8000b26:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b28:	2003      	movs	r0, #3
 8000b2a:	f000 fe6d 	bl	8001808 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b2e:	2000      	movs	r0, #0
 8000b30:	f000 f808 	bl	8000b44 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b34:	f7ff fe7e 	bl	8000834 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b38:	2300      	movs	r3, #0
}
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	bd80      	pop	{r7, pc}
 8000b3e:	bf00      	nop
 8000b40:	40022000 	.word	0x40022000

08000b44 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b082      	sub	sp, #8
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b4c:	4b12      	ldr	r3, [pc, #72]	; (8000b98 <HAL_InitTick+0x54>)
 8000b4e:	681a      	ldr	r2, [r3, #0]
 8000b50:	4b12      	ldr	r3, [pc, #72]	; (8000b9c <HAL_InitTick+0x58>)
 8000b52:	781b      	ldrb	r3, [r3, #0]
 8000b54:	4619      	mov	r1, r3
 8000b56:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b5a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b62:	4618      	mov	r0, r3
 8000b64:	f000 fe85 	bl	8001872 <HAL_SYSTICK_Config>
 8000b68:	4603      	mov	r3, r0
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d001      	beq.n	8000b72 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b6e:	2301      	movs	r3, #1
 8000b70:	e00e      	b.n	8000b90 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	2b0f      	cmp	r3, #15
 8000b76:	d80a      	bhi.n	8000b8e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b78:	2200      	movs	r2, #0
 8000b7a:	6879      	ldr	r1, [r7, #4]
 8000b7c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b80:	f000 fe4d 	bl	800181e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b84:	4a06      	ldr	r2, [pc, #24]	; (8000ba0 <HAL_InitTick+0x5c>)
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	e000      	b.n	8000b90 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b8e:	2301      	movs	r3, #1
}
 8000b90:	4618      	mov	r0, r3
 8000b92:	3708      	adds	r7, #8
 8000b94:	46bd      	mov	sp, r7
 8000b96:	bd80      	pop	{r7, pc}
 8000b98:	20000004 	.word	0x20000004
 8000b9c:	2000000c 	.word	0x2000000c
 8000ba0:	20000008 	.word	0x20000008

08000ba4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ba8:	4b05      	ldr	r3, [pc, #20]	; (8000bc0 <HAL_IncTick+0x1c>)
 8000baa:	781b      	ldrb	r3, [r3, #0]
 8000bac:	461a      	mov	r2, r3
 8000bae:	4b05      	ldr	r3, [pc, #20]	; (8000bc4 <HAL_IncTick+0x20>)
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	4413      	add	r3, r2
 8000bb4:	4a03      	ldr	r2, [pc, #12]	; (8000bc4 <HAL_IncTick+0x20>)
 8000bb6:	6013      	str	r3, [r2, #0]
}
 8000bb8:	bf00      	nop
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bc80      	pop	{r7}
 8000bbe:	4770      	bx	lr
 8000bc0:	2000000c 	.word	0x2000000c
 8000bc4:	20001658 	.word	0x20001658

08000bc8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	af00      	add	r7, sp, #0
  return uwTick;
 8000bcc:	4b02      	ldr	r3, [pc, #8]	; (8000bd8 <HAL_GetTick+0x10>)
 8000bce:	681b      	ldr	r3, [r3, #0]
}
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bc80      	pop	{r7}
 8000bd6:	4770      	bx	lr
 8000bd8:	20001658 	.word	0x20001658

08000bdc <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b086      	sub	sp, #24
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000be4:	2300      	movs	r3, #0
 8000be6:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000be8:	2300      	movs	r3, #0
 8000bea:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000bec:	2300      	movs	r3, #0
 8000bee:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d101      	bne.n	8000bfe <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000bfa:	2301      	movs	r3, #1
 8000bfc:	e0be      	b.n	8000d7c <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	689b      	ldr	r3, [r3, #8]
 8000c02:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d109      	bne.n	8000c20 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	2200      	movs	r2, #0
 8000c10:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	2200      	movs	r2, #0
 8000c16:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000c1a:	6878      	ldr	r0, [r7, #4]
 8000c1c:	f7ff fe3c 	bl	8000898 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000c20:	6878      	ldr	r0, [r7, #4]
 8000c22:	f000 fbe9 	bl	80013f8 <ADC_ConversionStop_Disable>
 8000c26:	4603      	mov	r3, r0
 8000c28:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c2e:	f003 0310 	and.w	r3, r3, #16
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	f040 8099 	bne.w	8000d6a <HAL_ADC_Init+0x18e>
 8000c38:	7dfb      	ldrb	r3, [r7, #23]
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	f040 8095 	bne.w	8000d6a <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c44:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000c48:	f023 0302 	bic.w	r3, r3, #2
 8000c4c:	f043 0202 	orr.w	r2, r3, #2
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000c5c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	7b1b      	ldrb	r3, [r3, #12]
 8000c62:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000c64:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000c66:	68ba      	ldr	r2, [r7, #8]
 8000c68:	4313      	orrs	r3, r2
 8000c6a:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	689b      	ldr	r3, [r3, #8]
 8000c70:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000c74:	d003      	beq.n	8000c7e <HAL_ADC_Init+0xa2>
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	689b      	ldr	r3, [r3, #8]
 8000c7a:	2b01      	cmp	r3, #1
 8000c7c:	d102      	bne.n	8000c84 <HAL_ADC_Init+0xa8>
 8000c7e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c82:	e000      	b.n	8000c86 <HAL_ADC_Init+0xaa>
 8000c84:	2300      	movs	r3, #0
 8000c86:	693a      	ldr	r2, [r7, #16]
 8000c88:	4313      	orrs	r3, r2
 8000c8a:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	7d1b      	ldrb	r3, [r3, #20]
 8000c90:	2b01      	cmp	r3, #1
 8000c92:	d119      	bne.n	8000cc8 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	7b1b      	ldrb	r3, [r3, #12]
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d109      	bne.n	8000cb0 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	699b      	ldr	r3, [r3, #24]
 8000ca0:	3b01      	subs	r3, #1
 8000ca2:	035a      	lsls	r2, r3, #13
 8000ca4:	693b      	ldr	r3, [r7, #16]
 8000ca6:	4313      	orrs	r3, r2
 8000ca8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000cac:	613b      	str	r3, [r7, #16]
 8000cae:	e00b      	b.n	8000cc8 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000cb4:	f043 0220 	orr.w	r2, r3, #32
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000cc0:	f043 0201 	orr.w	r2, r3, #1
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	685b      	ldr	r3, [r3, #4]
 8000cce:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	693a      	ldr	r2, [r7, #16]
 8000cd8:	430a      	orrs	r2, r1
 8000cda:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	689a      	ldr	r2, [r3, #8]
 8000ce2:	4b28      	ldr	r3, [pc, #160]	; (8000d84 <HAL_ADC_Init+0x1a8>)
 8000ce4:	4013      	ands	r3, r2
 8000ce6:	687a      	ldr	r2, [r7, #4]
 8000ce8:	6812      	ldr	r2, [r2, #0]
 8000cea:	68b9      	ldr	r1, [r7, #8]
 8000cec:	430b      	orrs	r3, r1
 8000cee:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	689b      	ldr	r3, [r3, #8]
 8000cf4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000cf8:	d003      	beq.n	8000d02 <HAL_ADC_Init+0x126>
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	689b      	ldr	r3, [r3, #8]
 8000cfe:	2b01      	cmp	r3, #1
 8000d00:	d104      	bne.n	8000d0c <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	691b      	ldr	r3, [r3, #16]
 8000d06:	3b01      	subs	r3, #1
 8000d08:	051b      	lsls	r3, r3, #20
 8000d0a:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d12:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	68fa      	ldr	r2, [r7, #12]
 8000d1c:	430a      	orrs	r2, r1
 8000d1e:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	689a      	ldr	r2, [r3, #8]
 8000d26:	4b18      	ldr	r3, [pc, #96]	; (8000d88 <HAL_ADC_Init+0x1ac>)
 8000d28:	4013      	ands	r3, r2
 8000d2a:	68ba      	ldr	r2, [r7, #8]
 8000d2c:	429a      	cmp	r2, r3
 8000d2e:	d10b      	bne.n	8000d48 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	2200      	movs	r2, #0
 8000d34:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d3a:	f023 0303 	bic.w	r3, r3, #3
 8000d3e:	f043 0201 	orr.w	r2, r3, #1
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000d46:	e018      	b.n	8000d7a <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d4c:	f023 0312 	bic.w	r3, r3, #18
 8000d50:	f043 0210 	orr.w	r2, r3, #16
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d5c:	f043 0201 	orr.w	r2, r3, #1
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000d64:	2301      	movs	r3, #1
 8000d66:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000d68:	e007      	b.n	8000d7a <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d6e:	f043 0210 	orr.w	r2, r3, #16
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8000d76:	2301      	movs	r3, #1
 8000d78:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000d7a:	7dfb      	ldrb	r3, [r7, #23]
}
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	3718      	adds	r7, #24
 8000d80:	46bd      	mov	sp, r7
 8000d82:	bd80      	pop	{r7, pc}
 8000d84:	ffe1f7fd 	.word	0xffe1f7fd
 8000d88:	ff1f0efe 	.word	0xff1f0efe

08000d8c <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b084      	sub	sp, #16
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000d94:	2300      	movs	r3, #0
 8000d96:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000d9e:	2b01      	cmp	r3, #1
 8000da0:	d101      	bne.n	8000da6 <HAL_ADC_Start+0x1a>
 8000da2:	2302      	movs	r3, #2
 8000da4:	e098      	b.n	8000ed8 <HAL_ADC_Start+0x14c>
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	2201      	movs	r2, #1
 8000daa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8000dae:	6878      	ldr	r0, [r7, #4]
 8000db0:	f000 fad0 	bl	8001354 <ADC_Enable>
 8000db4:	4603      	mov	r3, r0
 8000db6:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8000db8:	7bfb      	ldrb	r3, [r7, #15]
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	f040 8087 	bne.w	8000ece <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000dc4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000dc8:	f023 0301 	bic.w	r3, r3, #1
 8000dcc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	4a41      	ldr	r2, [pc, #260]	; (8000ee0 <HAL_ADC_Start+0x154>)
 8000dda:	4293      	cmp	r3, r2
 8000ddc:	d105      	bne.n	8000dea <HAL_ADC_Start+0x5e>
 8000dde:	4b41      	ldr	r3, [pc, #260]	; (8000ee4 <HAL_ADC_Start+0x158>)
 8000de0:	685b      	ldr	r3, [r3, #4]
 8000de2:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d115      	bne.n	8000e16 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000dee:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	685b      	ldr	r3, [r3, #4]
 8000dfc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d026      	beq.n	8000e52 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e08:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000e0c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000e14:	e01d      	b.n	8000e52 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e1a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	4a2f      	ldr	r2, [pc, #188]	; (8000ee4 <HAL_ADC_Start+0x158>)
 8000e28:	4293      	cmp	r3, r2
 8000e2a:	d004      	beq.n	8000e36 <HAL_ADC_Start+0xaa>
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	4a2b      	ldr	r2, [pc, #172]	; (8000ee0 <HAL_ADC_Start+0x154>)
 8000e32:	4293      	cmp	r3, r2
 8000e34:	d10d      	bne.n	8000e52 <HAL_ADC_Start+0xc6>
 8000e36:	4b2b      	ldr	r3, [pc, #172]	; (8000ee4 <HAL_ADC_Start+0x158>)
 8000e38:	685b      	ldr	r3, [r3, #4]
 8000e3a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d007      	beq.n	8000e52 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e46:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000e4a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e56:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d006      	beq.n	8000e6c <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e62:	f023 0206 	bic.w	r2, r3, #6
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	62da      	str	r2, [r3, #44]	; 0x2c
 8000e6a:	e002      	b.n	8000e72 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	2200      	movs	r2, #0
 8000e70:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	2200      	movs	r2, #0
 8000e76:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	f06f 0202 	mvn.w	r2, #2
 8000e82:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	689b      	ldr	r3, [r3, #8]
 8000e8a:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8000e8e:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000e92:	d113      	bne.n	8000ebc <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000e98:	4a11      	ldr	r2, [pc, #68]	; (8000ee0 <HAL_ADC_Start+0x154>)
 8000e9a:	4293      	cmp	r3, r2
 8000e9c:	d105      	bne.n	8000eaa <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8000e9e:	4b11      	ldr	r3, [pc, #68]	; (8000ee4 <HAL_ADC_Start+0x158>)
 8000ea0:	685b      	ldr	r3, [r3, #4]
 8000ea2:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d108      	bne.n	8000ebc <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	689a      	ldr	r2, [r3, #8]
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8000eb8:	609a      	str	r2, [r3, #8]
 8000eba:	e00c      	b.n	8000ed6 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	689a      	ldr	r2, [r3, #8]
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8000eca:	609a      	str	r2, [r3, #8]
 8000ecc:	e003      	b.n	8000ed6 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8000ed6:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ed8:	4618      	mov	r0, r3
 8000eda:	3710      	adds	r7, #16
 8000edc:	46bd      	mov	sp, r7
 8000ede:	bd80      	pop	{r7, pc}
 8000ee0:	40012800 	.word	0x40012800
 8000ee4:	40012400 	.word	0x40012400

08000ee8 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b086      	sub	sp, #24
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	60f8      	str	r0, [r7, #12]
 8000ef0:	60b9      	str	r1, [r7, #8]
 8000ef2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8000ef8:	68fb      	ldr	r3, [r7, #12]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	4a64      	ldr	r2, [pc, #400]	; (8001090 <HAL_ADC_Start_DMA+0x1a8>)
 8000efe:	4293      	cmp	r3, r2
 8000f00:	d004      	beq.n	8000f0c <HAL_ADC_Start_DMA+0x24>
 8000f02:	68fb      	ldr	r3, [r7, #12]
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	4a63      	ldr	r2, [pc, #396]	; (8001094 <HAL_ADC_Start_DMA+0x1ac>)
 8000f08:	4293      	cmp	r3, r2
 8000f0a:	d106      	bne.n	8000f1a <HAL_ADC_Start_DMA+0x32>
 8000f0c:	4b60      	ldr	r3, [pc, #384]	; (8001090 <HAL_ADC_Start_DMA+0x1a8>)
 8000f0e:	685b      	ldr	r3, [r3, #4]
 8000f10:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	f040 80b3 	bne.w	8001080 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8000f1a:	68fb      	ldr	r3, [r7, #12]
 8000f1c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000f20:	2b01      	cmp	r3, #1
 8000f22:	d101      	bne.n	8000f28 <HAL_ADC_Start_DMA+0x40>
 8000f24:	2302      	movs	r3, #2
 8000f26:	e0ae      	b.n	8001086 <HAL_ADC_Start_DMA+0x19e>
 8000f28:	68fb      	ldr	r3, [r7, #12]
 8000f2a:	2201      	movs	r2, #1
 8000f2c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8000f30:	68f8      	ldr	r0, [r7, #12]
 8000f32:	f000 fa0f 	bl	8001354 <ADC_Enable>
 8000f36:	4603      	mov	r3, r0
 8000f38:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8000f3a:	7dfb      	ldrb	r3, [r7, #23]
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	f040 809a 	bne.w	8001076 <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8000f42:	68fb      	ldr	r3, [r7, #12]
 8000f44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f46:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8000f4a:	f023 0301 	bic.w	r3, r3, #1
 8000f4e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000f52:	68fb      	ldr	r3, [r7, #12]
 8000f54:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000f56:	68fb      	ldr	r3, [r7, #12]
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	4a4e      	ldr	r2, [pc, #312]	; (8001094 <HAL_ADC_Start_DMA+0x1ac>)
 8000f5c:	4293      	cmp	r3, r2
 8000f5e:	d105      	bne.n	8000f6c <HAL_ADC_Start_DMA+0x84>
 8000f60:	4b4b      	ldr	r3, [pc, #300]	; (8001090 <HAL_ADC_Start_DMA+0x1a8>)
 8000f62:	685b      	ldr	r3, [r3, #4]
 8000f64:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d115      	bne.n	8000f98 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f70:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000f78:	68fb      	ldr	r3, [r7, #12]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	685b      	ldr	r3, [r3, #4]
 8000f7e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d026      	beq.n	8000fd4 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000f86:	68fb      	ldr	r3, [r7, #12]
 8000f88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f8a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000f8e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000f92:	68fb      	ldr	r3, [r7, #12]
 8000f94:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000f96:	e01d      	b.n	8000fd4 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000f98:	68fb      	ldr	r3, [r7, #12]
 8000f9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f9c:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	4a39      	ldr	r2, [pc, #228]	; (8001090 <HAL_ADC_Start_DMA+0x1a8>)
 8000faa:	4293      	cmp	r3, r2
 8000fac:	d004      	beq.n	8000fb8 <HAL_ADC_Start_DMA+0xd0>
 8000fae:	68fb      	ldr	r3, [r7, #12]
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	4a38      	ldr	r2, [pc, #224]	; (8001094 <HAL_ADC_Start_DMA+0x1ac>)
 8000fb4:	4293      	cmp	r3, r2
 8000fb6:	d10d      	bne.n	8000fd4 <HAL_ADC_Start_DMA+0xec>
 8000fb8:	4b35      	ldr	r3, [pc, #212]	; (8001090 <HAL_ADC_Start_DMA+0x1a8>)
 8000fba:	685b      	ldr	r3, [r3, #4]
 8000fbc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d007      	beq.n	8000fd4 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fc8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000fcc:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000fd4:	68fb      	ldr	r3, [r7, #12]
 8000fd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fd8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d006      	beq.n	8000fee <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fe4:	f023 0206 	bic.w	r2, r3, #6
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	62da      	str	r2, [r3, #44]	; 0x2c
 8000fec:	e002      	b.n	8000ff4 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8000fee:	68fb      	ldr	r3, [r7, #12]
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	6a1b      	ldr	r3, [r3, #32]
 8001000:	4a25      	ldr	r2, [pc, #148]	; (8001098 <HAL_ADC_Start_DMA+0x1b0>)
 8001002:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	6a1b      	ldr	r3, [r3, #32]
 8001008:	4a24      	ldr	r2, [pc, #144]	; (800109c <HAL_ADC_Start_DMA+0x1b4>)
 800100a:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	6a1b      	ldr	r3, [r3, #32]
 8001010:	4a23      	ldr	r2, [pc, #140]	; (80010a0 <HAL_ADC_Start_DMA+0x1b8>)
 8001012:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	f06f 0202 	mvn.w	r2, #2
 800101c:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800101e:	68fb      	ldr	r3, [r7, #12]
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	689a      	ldr	r2, [r3, #8]
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800102c:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800102e:	68fb      	ldr	r3, [r7, #12]
 8001030:	6a18      	ldr	r0, [r3, #32]
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	334c      	adds	r3, #76	; 0x4c
 8001038:	4619      	mov	r1, r3
 800103a:	68ba      	ldr	r2, [r7, #8]
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	f000 fc7f 	bl	8001940 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8001042:	68fb      	ldr	r3, [r7, #12]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	689b      	ldr	r3, [r3, #8]
 8001048:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800104c:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001050:	d108      	bne.n	8001064 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001052:	68fb      	ldr	r3, [r7, #12]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	689a      	ldr	r2, [r3, #8]
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8001060:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8001062:	e00f      	b.n	8001084 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	689a      	ldr	r2, [r3, #8]
 800106a:	68fb      	ldr	r3, [r7, #12]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8001072:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8001074:	e006      	b.n	8001084 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001076:	68fb      	ldr	r3, [r7, #12]
 8001078:	2200      	movs	r2, #0
 800107a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 800107e:	e001      	b.n	8001084 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001080:	2301      	movs	r3, #1
 8001082:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001084:	7dfb      	ldrb	r3, [r7, #23]
}
 8001086:	4618      	mov	r0, r3
 8001088:	3718      	adds	r7, #24
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}
 800108e:	bf00      	nop
 8001090:	40012400 	.word	0x40012400
 8001094:	40012800 	.word	0x40012800
 8001098:	0800146d 	.word	0x0800146d
 800109c:	080014e9 	.word	0x080014e9
 80010a0:	08001505 	.word	0x08001505

080010a4 <HAL_ADC_Stop_DMA>:
  *         on devices) have DMA capability.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b084      	sub	sp, #16
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80010ac:	2300      	movs	r3, #0
 80010ae:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80010b6:	2b01      	cmp	r3, #1
 80010b8:	d101      	bne.n	80010be <HAL_ADC_Stop_DMA+0x1a>
 80010ba:	2302      	movs	r3, #2
 80010bc:	e039      	b.n	8001132 <HAL_ADC_Stop_DMA+0x8e>
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	2201      	movs	r2, #1
 80010c2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80010c6:	6878      	ldr	r0, [r7, #4]
 80010c8:	f000 f996 	bl	80013f8 <ADC_ConversionStop_Disable>
 80010cc:	4603      	mov	r3, r0
 80010ce:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80010d0:	7bfb      	ldrb	r3, [r7, #15]
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d128      	bne.n	8001128 <HAL_ADC_Stop_DMA+0x84>
  {
    /* Disable ADC DMA mode */
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	689a      	ldr	r2, [r3, #8]
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80010e4:	609a      	str	r2, [r3, #8]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	6a1b      	ldr	r3, [r3, #32]
 80010ea:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80010ee:	2b02      	cmp	r3, #2
 80010f0:	d11a      	bne.n	8001128 <HAL_ADC_Stop_DMA+0x84>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	6a1b      	ldr	r3, [r3, #32]
 80010f6:	4618      	mov	r0, r3
 80010f8:	f000 fc81 	bl	80019fe <HAL_DMA_Abort>
 80010fc:	4603      	mov	r3, r0
 80010fe:	73fb      	strb	r3, [r7, #15]
      
      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status == HAL_OK)
 8001100:	7bfb      	ldrb	r3, [r7, #15]
 8001102:	2b00      	cmp	r3, #0
 8001104:	d10a      	bne.n	800111c <HAL_ADC_Stop_DMA+0x78>
      {
        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800110a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800110e:	f023 0301 	bic.w	r3, r3, #1
 8001112:	f043 0201 	orr.w	r2, r3, #1
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	629a      	str	r2, [r3, #40]	; 0x28
 800111a:	e005      	b.n	8001128 <HAL_ADC_Stop_DMA+0x84>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001120:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	2200      	movs	r2, #0
 800112c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
  /* Return function status */
  return tmp_hal_status;
 8001130:	7bfb      	ldrb	r3, [r7, #15]
}
 8001132:	4618      	mov	r0, r3
 8001134:	3710      	adds	r7, #16
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}

0800113a <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 800113a:	b480      	push	{r7}
 800113c:	b083      	sub	sp, #12
 800113e:	af00      	add	r7, sp, #0
 8001140:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001148:	4618      	mov	r0, r3
 800114a:	370c      	adds	r7, #12
 800114c:	46bd      	mov	sp, r7
 800114e:	bc80      	pop	{r7}
 8001150:	4770      	bx	lr

08001152 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001152:	b480      	push	{r7}
 8001154:	b083      	sub	sp, #12
 8001156:	af00      	add	r7, sp, #0
 8001158:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800115a:	bf00      	nop
 800115c:	370c      	adds	r7, #12
 800115e:	46bd      	mov	sp, r7
 8001160:	bc80      	pop	{r7}
 8001162:	4770      	bx	lr

08001164 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001164:	b480      	push	{r7}
 8001166:	b085      	sub	sp, #20
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
 800116c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800116e:	2300      	movs	r3, #0
 8001170:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001172:	2300      	movs	r3, #0
 8001174:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800117c:	2b01      	cmp	r3, #1
 800117e:	d101      	bne.n	8001184 <HAL_ADC_ConfigChannel+0x20>
 8001180:	2302      	movs	r3, #2
 8001182:	e0dc      	b.n	800133e <HAL_ADC_ConfigChannel+0x1da>
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	2201      	movs	r2, #1
 8001188:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800118c:	683b      	ldr	r3, [r7, #0]
 800118e:	685b      	ldr	r3, [r3, #4]
 8001190:	2b06      	cmp	r3, #6
 8001192:	d81c      	bhi.n	80011ce <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800119a:	683b      	ldr	r3, [r7, #0]
 800119c:	685a      	ldr	r2, [r3, #4]
 800119e:	4613      	mov	r3, r2
 80011a0:	009b      	lsls	r3, r3, #2
 80011a2:	4413      	add	r3, r2
 80011a4:	3b05      	subs	r3, #5
 80011a6:	221f      	movs	r2, #31
 80011a8:	fa02 f303 	lsl.w	r3, r2, r3
 80011ac:	43db      	mvns	r3, r3
 80011ae:	4019      	ands	r1, r3
 80011b0:	683b      	ldr	r3, [r7, #0]
 80011b2:	6818      	ldr	r0, [r3, #0]
 80011b4:	683b      	ldr	r3, [r7, #0]
 80011b6:	685a      	ldr	r2, [r3, #4]
 80011b8:	4613      	mov	r3, r2
 80011ba:	009b      	lsls	r3, r3, #2
 80011bc:	4413      	add	r3, r2
 80011be:	3b05      	subs	r3, #5
 80011c0:	fa00 f203 	lsl.w	r2, r0, r3
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	430a      	orrs	r2, r1
 80011ca:	635a      	str	r2, [r3, #52]	; 0x34
 80011cc:	e03c      	b.n	8001248 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80011ce:	683b      	ldr	r3, [r7, #0]
 80011d0:	685b      	ldr	r3, [r3, #4]
 80011d2:	2b0c      	cmp	r3, #12
 80011d4:	d81c      	bhi.n	8001210 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80011dc:	683b      	ldr	r3, [r7, #0]
 80011de:	685a      	ldr	r2, [r3, #4]
 80011e0:	4613      	mov	r3, r2
 80011e2:	009b      	lsls	r3, r3, #2
 80011e4:	4413      	add	r3, r2
 80011e6:	3b23      	subs	r3, #35	; 0x23
 80011e8:	221f      	movs	r2, #31
 80011ea:	fa02 f303 	lsl.w	r3, r2, r3
 80011ee:	43db      	mvns	r3, r3
 80011f0:	4019      	ands	r1, r3
 80011f2:	683b      	ldr	r3, [r7, #0]
 80011f4:	6818      	ldr	r0, [r3, #0]
 80011f6:	683b      	ldr	r3, [r7, #0]
 80011f8:	685a      	ldr	r2, [r3, #4]
 80011fa:	4613      	mov	r3, r2
 80011fc:	009b      	lsls	r3, r3, #2
 80011fe:	4413      	add	r3, r2
 8001200:	3b23      	subs	r3, #35	; 0x23
 8001202:	fa00 f203 	lsl.w	r2, r0, r3
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	430a      	orrs	r2, r1
 800120c:	631a      	str	r2, [r3, #48]	; 0x30
 800120e:	e01b      	b.n	8001248 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001216:	683b      	ldr	r3, [r7, #0]
 8001218:	685a      	ldr	r2, [r3, #4]
 800121a:	4613      	mov	r3, r2
 800121c:	009b      	lsls	r3, r3, #2
 800121e:	4413      	add	r3, r2
 8001220:	3b41      	subs	r3, #65	; 0x41
 8001222:	221f      	movs	r2, #31
 8001224:	fa02 f303 	lsl.w	r3, r2, r3
 8001228:	43db      	mvns	r3, r3
 800122a:	4019      	ands	r1, r3
 800122c:	683b      	ldr	r3, [r7, #0]
 800122e:	6818      	ldr	r0, [r3, #0]
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	685a      	ldr	r2, [r3, #4]
 8001234:	4613      	mov	r3, r2
 8001236:	009b      	lsls	r3, r3, #2
 8001238:	4413      	add	r3, r2
 800123a:	3b41      	subs	r3, #65	; 0x41
 800123c:	fa00 f203 	lsl.w	r2, r0, r3
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	430a      	orrs	r2, r1
 8001246:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001248:	683b      	ldr	r3, [r7, #0]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	2b09      	cmp	r3, #9
 800124e:	d91c      	bls.n	800128a <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	68d9      	ldr	r1, [r3, #12]
 8001256:	683b      	ldr	r3, [r7, #0]
 8001258:	681a      	ldr	r2, [r3, #0]
 800125a:	4613      	mov	r3, r2
 800125c:	005b      	lsls	r3, r3, #1
 800125e:	4413      	add	r3, r2
 8001260:	3b1e      	subs	r3, #30
 8001262:	2207      	movs	r2, #7
 8001264:	fa02 f303 	lsl.w	r3, r2, r3
 8001268:	43db      	mvns	r3, r3
 800126a:	4019      	ands	r1, r3
 800126c:	683b      	ldr	r3, [r7, #0]
 800126e:	6898      	ldr	r0, [r3, #8]
 8001270:	683b      	ldr	r3, [r7, #0]
 8001272:	681a      	ldr	r2, [r3, #0]
 8001274:	4613      	mov	r3, r2
 8001276:	005b      	lsls	r3, r3, #1
 8001278:	4413      	add	r3, r2
 800127a:	3b1e      	subs	r3, #30
 800127c:	fa00 f203 	lsl.w	r2, r0, r3
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	430a      	orrs	r2, r1
 8001286:	60da      	str	r2, [r3, #12]
 8001288:	e019      	b.n	80012be <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	6919      	ldr	r1, [r3, #16]
 8001290:	683b      	ldr	r3, [r7, #0]
 8001292:	681a      	ldr	r2, [r3, #0]
 8001294:	4613      	mov	r3, r2
 8001296:	005b      	lsls	r3, r3, #1
 8001298:	4413      	add	r3, r2
 800129a:	2207      	movs	r2, #7
 800129c:	fa02 f303 	lsl.w	r3, r2, r3
 80012a0:	43db      	mvns	r3, r3
 80012a2:	4019      	ands	r1, r3
 80012a4:	683b      	ldr	r3, [r7, #0]
 80012a6:	6898      	ldr	r0, [r3, #8]
 80012a8:	683b      	ldr	r3, [r7, #0]
 80012aa:	681a      	ldr	r2, [r3, #0]
 80012ac:	4613      	mov	r3, r2
 80012ae:	005b      	lsls	r3, r3, #1
 80012b0:	4413      	add	r3, r2
 80012b2:	fa00 f203 	lsl.w	r2, r0, r3
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	430a      	orrs	r2, r1
 80012bc:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80012be:	683b      	ldr	r3, [r7, #0]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	2b10      	cmp	r3, #16
 80012c4:	d003      	beq.n	80012ce <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80012c6:	683b      	ldr	r3, [r7, #0]
 80012c8:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80012ca:	2b11      	cmp	r3, #17
 80012cc:	d132      	bne.n	8001334 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	4a1d      	ldr	r2, [pc, #116]	; (8001348 <HAL_ADC_ConfigChannel+0x1e4>)
 80012d4:	4293      	cmp	r3, r2
 80012d6:	d125      	bne.n	8001324 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	689b      	ldr	r3, [r3, #8]
 80012de:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d126      	bne.n	8001334 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	689a      	ldr	r2, [r3, #8]
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80012f4:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80012f6:	683b      	ldr	r3, [r7, #0]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	2b10      	cmp	r3, #16
 80012fc:	d11a      	bne.n	8001334 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80012fe:	4b13      	ldr	r3, [pc, #76]	; (800134c <HAL_ADC_ConfigChannel+0x1e8>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	4a13      	ldr	r2, [pc, #76]	; (8001350 <HAL_ADC_ConfigChannel+0x1ec>)
 8001304:	fba2 2303 	umull	r2, r3, r2, r3
 8001308:	0c9a      	lsrs	r2, r3, #18
 800130a:	4613      	mov	r3, r2
 800130c:	009b      	lsls	r3, r3, #2
 800130e:	4413      	add	r3, r2
 8001310:	005b      	lsls	r3, r3, #1
 8001312:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001314:	e002      	b.n	800131c <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001316:	68bb      	ldr	r3, [r7, #8]
 8001318:	3b01      	subs	r3, #1
 800131a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800131c:	68bb      	ldr	r3, [r7, #8]
 800131e:	2b00      	cmp	r3, #0
 8001320:	d1f9      	bne.n	8001316 <HAL_ADC_ConfigChannel+0x1b2>
 8001322:	e007      	b.n	8001334 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001328:	f043 0220 	orr.w	r2, r3, #32
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001330:	2301      	movs	r3, #1
 8001332:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	2200      	movs	r2, #0
 8001338:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800133c:	7bfb      	ldrb	r3, [r7, #15]
}
 800133e:	4618      	mov	r0, r3
 8001340:	3714      	adds	r7, #20
 8001342:	46bd      	mov	sp, r7
 8001344:	bc80      	pop	{r7}
 8001346:	4770      	bx	lr
 8001348:	40012400 	.word	0x40012400
 800134c:	20000004 	.word	0x20000004
 8001350:	431bde83 	.word	0x431bde83

08001354 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b084      	sub	sp, #16
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800135c:	2300      	movs	r3, #0
 800135e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001360:	2300      	movs	r3, #0
 8001362:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	689b      	ldr	r3, [r3, #8]
 800136a:	f003 0301 	and.w	r3, r3, #1
 800136e:	2b01      	cmp	r3, #1
 8001370:	d039      	beq.n	80013e6 <ADC_Enable+0x92>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	689a      	ldr	r2, [r3, #8]
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	f042 0201 	orr.w	r2, r2, #1
 8001380:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001382:	4b1b      	ldr	r3, [pc, #108]	; (80013f0 <ADC_Enable+0x9c>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	4a1b      	ldr	r2, [pc, #108]	; (80013f4 <ADC_Enable+0xa0>)
 8001388:	fba2 2303 	umull	r2, r3, r2, r3
 800138c:	0c9b      	lsrs	r3, r3, #18
 800138e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001390:	e002      	b.n	8001398 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8001392:	68bb      	ldr	r3, [r7, #8]
 8001394:	3b01      	subs	r3, #1
 8001396:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001398:	68bb      	ldr	r3, [r7, #8]
 800139a:	2b00      	cmp	r3, #0
 800139c:	d1f9      	bne.n	8001392 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 800139e:	f7ff fc13 	bl	8000bc8 <HAL_GetTick>
 80013a2:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80013a4:	e018      	b.n	80013d8 <ADC_Enable+0x84>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80013a6:	f7ff fc0f 	bl	8000bc8 <HAL_GetTick>
 80013aa:	4602      	mov	r2, r0
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	1ad3      	subs	r3, r2, r3
 80013b0:	2b02      	cmp	r3, #2
 80013b2:	d911      	bls.n	80013d8 <ADC_Enable+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013b8:	f043 0210 	orr.w	r2, r3, #16
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	629a      	str	r2, [r3, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013c4:	f043 0201 	orr.w	r2, r3, #1
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	2200      	movs	r2, #0
 80013d0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
        return HAL_ERROR;
 80013d4:	2301      	movs	r3, #1
 80013d6:	e007      	b.n	80013e8 <ADC_Enable+0x94>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	689b      	ldr	r3, [r3, #8]
 80013de:	f003 0301 	and.w	r3, r3, #1
 80013e2:	2b01      	cmp	r3, #1
 80013e4:	d1df      	bne.n	80013a6 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80013e6:	2300      	movs	r3, #0
}
 80013e8:	4618      	mov	r0, r3
 80013ea:	3710      	adds	r7, #16
 80013ec:	46bd      	mov	sp, r7
 80013ee:	bd80      	pop	{r7, pc}
 80013f0:	20000004 	.word	0x20000004
 80013f4:	431bde83 	.word	0x431bde83

080013f8 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b084      	sub	sp, #16
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001400:	2300      	movs	r3, #0
 8001402:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	689b      	ldr	r3, [r3, #8]
 800140a:	f003 0301 	and.w	r3, r3, #1
 800140e:	2b01      	cmp	r3, #1
 8001410:	d127      	bne.n	8001462 <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	689a      	ldr	r2, [r3, #8]
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	f022 0201 	bic.w	r2, r2, #1
 8001420:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001422:	f7ff fbd1 	bl	8000bc8 <HAL_GetTick>
 8001426:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001428:	e014      	b.n	8001454 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800142a:	f7ff fbcd 	bl	8000bc8 <HAL_GetTick>
 800142e:	4602      	mov	r2, r0
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	1ad3      	subs	r3, r2, r3
 8001434:	2b02      	cmp	r3, #2
 8001436:	d90d      	bls.n	8001454 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800143c:	f043 0210 	orr.w	r2, r3, #16
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001448:	f043 0201 	orr.w	r2, r3, #1
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 8001450:	2301      	movs	r3, #1
 8001452:	e007      	b.n	8001464 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	689b      	ldr	r3, [r3, #8]
 800145a:	f003 0301 	and.w	r3, r3, #1
 800145e:	2b01      	cmp	r3, #1
 8001460:	d0e3      	beq.n	800142a <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001462:	2300      	movs	r3, #0
}
 8001464:	4618      	mov	r0, r3
 8001466:	3710      	adds	r7, #16
 8001468:	46bd      	mov	sp, r7
 800146a:	bd80      	pop	{r7, pc}

0800146c <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b084      	sub	sp, #16
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001478:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800147e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001482:	2b00      	cmp	r3, #0
 8001484:	d127      	bne.n	80014d6 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800148a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	689b      	ldr	r3, [r3, #8]
 8001498:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800149c:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80014a0:	d115      	bne.n	80014ce <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d111      	bne.n	80014ce <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014ae:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014ba:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d105      	bne.n	80014ce <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014c6:	f043 0201 	orr.w	r2, r3, #1
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80014ce:	68f8      	ldr	r0, [r7, #12]
 80014d0:	f7ff f928 	bl	8000724 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 80014d4:	e004      	b.n	80014e0 <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	6a1b      	ldr	r3, [r3, #32]
 80014da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014dc:	6878      	ldr	r0, [r7, #4]
 80014de:	4798      	blx	r3
}
 80014e0:	bf00      	nop
 80014e2:	3710      	adds	r7, #16
 80014e4:	46bd      	mov	sp, r7
 80014e6:	bd80      	pop	{r7, pc}

080014e8 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b084      	sub	sp, #16
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014f4:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80014f6:	68f8      	ldr	r0, [r7, #12]
 80014f8:	f7ff f958 	bl	80007ac <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80014fc:	bf00      	nop
 80014fe:	3710      	adds	r7, #16
 8001500:	46bd      	mov	sp, r7
 8001502:	bd80      	pop	{r7, pc}

08001504 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b084      	sub	sp, #16
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001510:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001516:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001522:	f043 0204 	orr.w	r2, r3, #4
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800152a:	68f8      	ldr	r0, [r7, #12]
 800152c:	f7ff fe11 	bl	8001152 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001530:	bf00      	nop
 8001532:	3710      	adds	r7, #16
 8001534:	46bd      	mov	sp, r7
 8001536:	bd80      	pop	{r7, pc}

08001538 <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8001538:	b590      	push	{r4, r7, lr}
 800153a:	b087      	sub	sp, #28
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001540:	2300      	movs	r3, #0
 8001542:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 8001544:	2300      	movs	r3, #0
 8001546:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800154e:	2b01      	cmp	r3, #1
 8001550:	d101      	bne.n	8001556 <HAL_ADCEx_Calibration_Start+0x1e>
 8001552:	2302      	movs	r3, #2
 8001554:	e086      	b.n	8001664 <HAL_ADCEx_Calibration_Start+0x12c>
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	2201      	movs	r2, #1
 800155a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  /* 1. Calibration prerequisite:                                             */
  /*    - ADC must be disabled for at least two ADC clock cycles in disable   */
  /*      mode before ADC enable                                              */
  /* Stop potential conversion on going, on regular and injected groups       */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800155e:	6878      	ldr	r0, [r7, #4]
 8001560:	f7ff ff4a 	bl	80013f8 <ADC_ConversionStop_Disable>
 8001564:	4603      	mov	r3, r0
 8001566:	75fb      	strb	r3, [r7, #23]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8001568:	7dfb      	ldrb	r3, [r7, #23]
 800156a:	2b00      	cmp	r3, #0
 800156c:	d175      	bne.n	800165a <HAL_ADCEx_Calibration_Start+0x122>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001572:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001576:	f023 0302 	bic.w	r3, r3, #2
 800157a:	f043 0202 	orr.w	r2, r3, #2
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8001582:	4b3a      	ldr	r3, [pc, #232]	; (800166c <HAL_ADCEx_Calibration_Start+0x134>)
 8001584:	681c      	ldr	r4, [r3, #0]
 8001586:	2002      	movs	r0, #2
 8001588:	f002 fd74 	bl	8004074 <HAL_RCCEx_GetPeriphCLKFreq>
 800158c:	4603      	mov	r3, r0
 800158e:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 8001592:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 8001594:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 8001596:	e002      	b.n	800159e <HAL_ADCEx_Calibration_Start+0x66>
    {
      wait_loop_index--;
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	3b01      	subs	r3, #1
 800159c:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d1f9      	bne.n	8001598 <HAL_ADCEx_Calibration_Start+0x60>
    }
    
    /* 2. Enable the ADC peripheral */
    ADC_Enable(hadc);
 80015a4:	6878      	ldr	r0, [r7, #4]
 80015a6:	f7ff fed5 	bl	8001354 <ADC_Enable>
    
    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	689a      	ldr	r2, [r3, #8]
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	f042 0208 	orr.w	r2, r2, #8
 80015b8:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 80015ba:	f7ff fb05 	bl	8000bc8 <HAL_GetTick>
 80015be:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 80015c0:	e014      	b.n	80015ec <HAL_ADCEx_Calibration_Start+0xb4>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 80015c2:	f7ff fb01 	bl	8000bc8 <HAL_GetTick>
 80015c6:	4602      	mov	r2, r0
 80015c8:	693b      	ldr	r3, [r7, #16]
 80015ca:	1ad3      	subs	r3, r2, r3
 80015cc:	2b0a      	cmp	r3, #10
 80015ce:	d90d      	bls.n	80015ec <HAL_ADCEx_Calibration_Start+0xb4>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015d4:	f023 0312 	bic.w	r3, r3, #18
 80015d8:	f043 0210 	orr.w	r2, r3, #16
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	629a      	str	r2, [r3, #40]	; 0x28
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	2200      	movs	r2, #0
 80015e4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        
        return HAL_ERROR;
 80015e8:	2301      	movs	r3, #1
 80015ea:	e03b      	b.n	8001664 <HAL_ADCEx_Calibration_Start+0x12c>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	689b      	ldr	r3, [r3, #8]
 80015f2:	f003 0308 	and.w	r3, r3, #8
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d1e3      	bne.n	80015c2 <HAL_ADCEx_Calibration_Start+0x8a>
      }
    }
    
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	689a      	ldr	r2, [r3, #8]
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	f042 0204 	orr.w	r2, r2, #4
 8001608:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 800160a:	f7ff fadd 	bl	8000bc8 <HAL_GetTick>
 800160e:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8001610:	e014      	b.n	800163c <HAL_ADCEx_Calibration_Start+0x104>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8001612:	f7ff fad9 	bl	8000bc8 <HAL_GetTick>
 8001616:	4602      	mov	r2, r0
 8001618:	693b      	ldr	r3, [r7, #16]
 800161a:	1ad3      	subs	r3, r2, r3
 800161c:	2b0a      	cmp	r3, #10
 800161e:	d90d      	bls.n	800163c <HAL_ADCEx_Calibration_Start+0x104>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001624:	f023 0312 	bic.w	r3, r3, #18
 8001628:	f043 0210 	orr.w	r2, r3, #16
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	629a      	str	r2, [r3, #40]	; 0x28
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	2200      	movs	r2, #0
 8001634:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        
        return HAL_ERROR;
 8001638:	2301      	movs	r3, #1
 800163a:	e013      	b.n	8001664 <HAL_ADCEx_Calibration_Start+0x12c>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	689b      	ldr	r3, [r3, #8]
 8001642:	f003 0304 	and.w	r3, r3, #4
 8001646:	2b00      	cmp	r3, #0
 8001648:	d1e3      	bne.n	8001612 <HAL_ADCEx_Calibration_Start+0xda>
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800164e:	f023 0303 	bic.w	r3, r3, #3
 8001652:	f043 0201 	orr.w	r2, r3, #1
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	2200      	movs	r2, #0
 800165e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001662:	7dfb      	ldrb	r3, [r7, #23]
}
 8001664:	4618      	mov	r0, r3
 8001666:	371c      	adds	r7, #28
 8001668:	46bd      	mov	sp, r7
 800166a:	bd90      	pop	{r4, r7, pc}
 800166c:	20000004 	.word	0x20000004

08001670 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001670:	b480      	push	{r7}
 8001672:	b085      	sub	sp, #20
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	f003 0307 	and.w	r3, r3, #7
 800167e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001680:	4b0c      	ldr	r3, [pc, #48]	; (80016b4 <__NVIC_SetPriorityGrouping+0x44>)
 8001682:	68db      	ldr	r3, [r3, #12]
 8001684:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001686:	68ba      	ldr	r2, [r7, #8]
 8001688:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800168c:	4013      	ands	r3, r2
 800168e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001694:	68bb      	ldr	r3, [r7, #8]
 8001696:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001698:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800169c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016a2:	4a04      	ldr	r2, [pc, #16]	; (80016b4 <__NVIC_SetPriorityGrouping+0x44>)
 80016a4:	68bb      	ldr	r3, [r7, #8]
 80016a6:	60d3      	str	r3, [r2, #12]
}
 80016a8:	bf00      	nop
 80016aa:	3714      	adds	r7, #20
 80016ac:	46bd      	mov	sp, r7
 80016ae:	bc80      	pop	{r7}
 80016b0:	4770      	bx	lr
 80016b2:	bf00      	nop
 80016b4:	e000ed00 	.word	0xe000ed00

080016b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80016b8:	b480      	push	{r7}
 80016ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016bc:	4b04      	ldr	r3, [pc, #16]	; (80016d0 <__NVIC_GetPriorityGrouping+0x18>)
 80016be:	68db      	ldr	r3, [r3, #12]
 80016c0:	0a1b      	lsrs	r3, r3, #8
 80016c2:	f003 0307 	and.w	r3, r3, #7
}
 80016c6:	4618      	mov	r0, r3
 80016c8:	46bd      	mov	sp, r7
 80016ca:	bc80      	pop	{r7}
 80016cc:	4770      	bx	lr
 80016ce:	bf00      	nop
 80016d0:	e000ed00 	.word	0xe000ed00

080016d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016d4:	b480      	push	{r7}
 80016d6:	b083      	sub	sp, #12
 80016d8:	af00      	add	r7, sp, #0
 80016da:	4603      	mov	r3, r0
 80016dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	db0b      	blt.n	80016fe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80016e6:	79fb      	ldrb	r3, [r7, #7]
 80016e8:	f003 021f 	and.w	r2, r3, #31
 80016ec:	4906      	ldr	r1, [pc, #24]	; (8001708 <__NVIC_EnableIRQ+0x34>)
 80016ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016f2:	095b      	lsrs	r3, r3, #5
 80016f4:	2001      	movs	r0, #1
 80016f6:	fa00 f202 	lsl.w	r2, r0, r2
 80016fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80016fe:	bf00      	nop
 8001700:	370c      	adds	r7, #12
 8001702:	46bd      	mov	sp, r7
 8001704:	bc80      	pop	{r7}
 8001706:	4770      	bx	lr
 8001708:	e000e100 	.word	0xe000e100

0800170c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800170c:	b480      	push	{r7}
 800170e:	b083      	sub	sp, #12
 8001710:	af00      	add	r7, sp, #0
 8001712:	4603      	mov	r3, r0
 8001714:	6039      	str	r1, [r7, #0]
 8001716:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001718:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800171c:	2b00      	cmp	r3, #0
 800171e:	db0a      	blt.n	8001736 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001720:	683b      	ldr	r3, [r7, #0]
 8001722:	b2da      	uxtb	r2, r3
 8001724:	490c      	ldr	r1, [pc, #48]	; (8001758 <__NVIC_SetPriority+0x4c>)
 8001726:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800172a:	0112      	lsls	r2, r2, #4
 800172c:	b2d2      	uxtb	r2, r2
 800172e:	440b      	add	r3, r1
 8001730:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001734:	e00a      	b.n	800174c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001736:	683b      	ldr	r3, [r7, #0]
 8001738:	b2da      	uxtb	r2, r3
 800173a:	4908      	ldr	r1, [pc, #32]	; (800175c <__NVIC_SetPriority+0x50>)
 800173c:	79fb      	ldrb	r3, [r7, #7]
 800173e:	f003 030f 	and.w	r3, r3, #15
 8001742:	3b04      	subs	r3, #4
 8001744:	0112      	lsls	r2, r2, #4
 8001746:	b2d2      	uxtb	r2, r2
 8001748:	440b      	add	r3, r1
 800174a:	761a      	strb	r2, [r3, #24]
}
 800174c:	bf00      	nop
 800174e:	370c      	adds	r7, #12
 8001750:	46bd      	mov	sp, r7
 8001752:	bc80      	pop	{r7}
 8001754:	4770      	bx	lr
 8001756:	bf00      	nop
 8001758:	e000e100 	.word	0xe000e100
 800175c:	e000ed00 	.word	0xe000ed00

08001760 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001760:	b480      	push	{r7}
 8001762:	b089      	sub	sp, #36	; 0x24
 8001764:	af00      	add	r7, sp, #0
 8001766:	60f8      	str	r0, [r7, #12]
 8001768:	60b9      	str	r1, [r7, #8]
 800176a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	f003 0307 	and.w	r3, r3, #7
 8001772:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001774:	69fb      	ldr	r3, [r7, #28]
 8001776:	f1c3 0307 	rsb	r3, r3, #7
 800177a:	2b04      	cmp	r3, #4
 800177c:	bf28      	it	cs
 800177e:	2304      	movcs	r3, #4
 8001780:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001782:	69fb      	ldr	r3, [r7, #28]
 8001784:	3304      	adds	r3, #4
 8001786:	2b06      	cmp	r3, #6
 8001788:	d902      	bls.n	8001790 <NVIC_EncodePriority+0x30>
 800178a:	69fb      	ldr	r3, [r7, #28]
 800178c:	3b03      	subs	r3, #3
 800178e:	e000      	b.n	8001792 <NVIC_EncodePriority+0x32>
 8001790:	2300      	movs	r3, #0
 8001792:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001794:	f04f 32ff 	mov.w	r2, #4294967295
 8001798:	69bb      	ldr	r3, [r7, #24]
 800179a:	fa02 f303 	lsl.w	r3, r2, r3
 800179e:	43da      	mvns	r2, r3
 80017a0:	68bb      	ldr	r3, [r7, #8]
 80017a2:	401a      	ands	r2, r3
 80017a4:	697b      	ldr	r3, [r7, #20]
 80017a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017a8:	f04f 31ff 	mov.w	r1, #4294967295
 80017ac:	697b      	ldr	r3, [r7, #20]
 80017ae:	fa01 f303 	lsl.w	r3, r1, r3
 80017b2:	43d9      	mvns	r1, r3
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017b8:	4313      	orrs	r3, r2
         );
}
 80017ba:	4618      	mov	r0, r3
 80017bc:	3724      	adds	r7, #36	; 0x24
 80017be:	46bd      	mov	sp, r7
 80017c0:	bc80      	pop	{r7}
 80017c2:	4770      	bx	lr

080017c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b082      	sub	sp, #8
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	3b01      	subs	r3, #1
 80017d0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80017d4:	d301      	bcc.n	80017da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80017d6:	2301      	movs	r3, #1
 80017d8:	e00f      	b.n	80017fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017da:	4a0a      	ldr	r2, [pc, #40]	; (8001804 <SysTick_Config+0x40>)
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	3b01      	subs	r3, #1
 80017e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80017e2:	210f      	movs	r1, #15
 80017e4:	f04f 30ff 	mov.w	r0, #4294967295
 80017e8:	f7ff ff90 	bl	800170c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017ec:	4b05      	ldr	r3, [pc, #20]	; (8001804 <SysTick_Config+0x40>)
 80017ee:	2200      	movs	r2, #0
 80017f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017f2:	4b04      	ldr	r3, [pc, #16]	; (8001804 <SysTick_Config+0x40>)
 80017f4:	2207      	movs	r2, #7
 80017f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80017f8:	2300      	movs	r3, #0
}
 80017fa:	4618      	mov	r0, r3
 80017fc:	3708      	adds	r7, #8
 80017fe:	46bd      	mov	sp, r7
 8001800:	bd80      	pop	{r7, pc}
 8001802:	bf00      	nop
 8001804:	e000e010 	.word	0xe000e010

08001808 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b082      	sub	sp, #8
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001810:	6878      	ldr	r0, [r7, #4]
 8001812:	f7ff ff2d 	bl	8001670 <__NVIC_SetPriorityGrouping>
}
 8001816:	bf00      	nop
 8001818:	3708      	adds	r7, #8
 800181a:	46bd      	mov	sp, r7
 800181c:	bd80      	pop	{r7, pc}

0800181e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800181e:	b580      	push	{r7, lr}
 8001820:	b086      	sub	sp, #24
 8001822:	af00      	add	r7, sp, #0
 8001824:	4603      	mov	r3, r0
 8001826:	60b9      	str	r1, [r7, #8]
 8001828:	607a      	str	r2, [r7, #4]
 800182a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800182c:	2300      	movs	r3, #0
 800182e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001830:	f7ff ff42 	bl	80016b8 <__NVIC_GetPriorityGrouping>
 8001834:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001836:	687a      	ldr	r2, [r7, #4]
 8001838:	68b9      	ldr	r1, [r7, #8]
 800183a:	6978      	ldr	r0, [r7, #20]
 800183c:	f7ff ff90 	bl	8001760 <NVIC_EncodePriority>
 8001840:	4602      	mov	r2, r0
 8001842:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001846:	4611      	mov	r1, r2
 8001848:	4618      	mov	r0, r3
 800184a:	f7ff ff5f 	bl	800170c <__NVIC_SetPriority>
}
 800184e:	bf00      	nop
 8001850:	3718      	adds	r7, #24
 8001852:	46bd      	mov	sp, r7
 8001854:	bd80      	pop	{r7, pc}

08001856 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001856:	b580      	push	{r7, lr}
 8001858:	b082      	sub	sp, #8
 800185a:	af00      	add	r7, sp, #0
 800185c:	4603      	mov	r3, r0
 800185e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001860:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001864:	4618      	mov	r0, r3
 8001866:	f7ff ff35 	bl	80016d4 <__NVIC_EnableIRQ>
}
 800186a:	bf00      	nop
 800186c:	3708      	adds	r7, #8
 800186e:	46bd      	mov	sp, r7
 8001870:	bd80      	pop	{r7, pc}

08001872 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001872:	b580      	push	{r7, lr}
 8001874:	b082      	sub	sp, #8
 8001876:	af00      	add	r7, sp, #0
 8001878:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800187a:	6878      	ldr	r0, [r7, #4]
 800187c:	f7ff ffa2 	bl	80017c4 <SysTick_Config>
 8001880:	4603      	mov	r3, r0
}
 8001882:	4618      	mov	r0, r3
 8001884:	3708      	adds	r7, #8
 8001886:	46bd      	mov	sp, r7
 8001888:	bd80      	pop	{r7, pc}
	...

0800188c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800188c:	b480      	push	{r7}
 800188e:	b085      	sub	sp, #20
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001894:	2300      	movs	r3, #0
 8001896:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	2b00      	cmp	r3, #0
 800189c:	d101      	bne.n	80018a2 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800189e:	2301      	movs	r3, #1
 80018a0:	e043      	b.n	800192a <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	461a      	mov	r2, r3
 80018a8:	4b22      	ldr	r3, [pc, #136]	; (8001934 <HAL_DMA_Init+0xa8>)
 80018aa:	4413      	add	r3, r2
 80018ac:	4a22      	ldr	r2, [pc, #136]	; (8001938 <HAL_DMA_Init+0xac>)
 80018ae:	fba2 2303 	umull	r2, r3, r2, r3
 80018b2:	091b      	lsrs	r3, r3, #4
 80018b4:	009a      	lsls	r2, r3, #2
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	4a1f      	ldr	r2, [pc, #124]	; (800193c <HAL_DMA_Init+0xb0>)
 80018be:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	2202      	movs	r2, #2
 80018c4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80018d6:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80018da:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80018e4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	68db      	ldr	r3, [r3, #12]
 80018ea:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80018f0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	695b      	ldr	r3, [r3, #20]
 80018f6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80018fc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	69db      	ldr	r3, [r3, #28]
 8001902:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001904:	68fa      	ldr	r2, [r7, #12]
 8001906:	4313      	orrs	r3, r2
 8001908:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	68fa      	ldr	r2, [r7, #12]
 8001910:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	2200      	movs	r2, #0
 8001916:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	2201      	movs	r2, #1
 800191c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	2200      	movs	r2, #0
 8001924:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001928:	2300      	movs	r3, #0
}
 800192a:	4618      	mov	r0, r3
 800192c:	3714      	adds	r7, #20
 800192e:	46bd      	mov	sp, r7
 8001930:	bc80      	pop	{r7}
 8001932:	4770      	bx	lr
 8001934:	bffdfff8 	.word	0xbffdfff8
 8001938:	cccccccd 	.word	0xcccccccd
 800193c:	40020000 	.word	0x40020000

08001940 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b086      	sub	sp, #24
 8001944:	af00      	add	r7, sp, #0
 8001946:	60f8      	str	r0, [r7, #12]
 8001948:	60b9      	str	r1, [r7, #8]
 800194a:	607a      	str	r2, [r7, #4]
 800194c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800194e:	2300      	movs	r3, #0
 8001950:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001958:	2b01      	cmp	r3, #1
 800195a:	d101      	bne.n	8001960 <HAL_DMA_Start_IT+0x20>
 800195c:	2302      	movs	r3, #2
 800195e:	e04a      	b.n	80019f6 <HAL_DMA_Start_IT+0xb6>
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	2201      	movs	r2, #1
 8001964:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800196e:	2b01      	cmp	r3, #1
 8001970:	d13a      	bne.n	80019e8 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	2202      	movs	r2, #2
 8001976:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	2200      	movs	r2, #0
 800197e:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	681a      	ldr	r2, [r3, #0]
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f022 0201 	bic.w	r2, r2, #1
 800198e:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001990:	683b      	ldr	r3, [r7, #0]
 8001992:	687a      	ldr	r2, [r7, #4]
 8001994:	68b9      	ldr	r1, [r7, #8]
 8001996:	68f8      	ldr	r0, [r7, #12]
 8001998:	f000 f972 	bl	8001c80 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d008      	beq.n	80019b6 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	681a      	ldr	r2, [r3, #0]
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f042 020e 	orr.w	r2, r2, #14
 80019b2:	601a      	str	r2, [r3, #0]
 80019b4:	e00f      	b.n	80019d6 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	681a      	ldr	r2, [r3, #0]
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f022 0204 	bic.w	r2, r2, #4
 80019c4:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	681a      	ldr	r2, [r3, #0]
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f042 020a 	orr.w	r2, r2, #10
 80019d4:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	681a      	ldr	r2, [r3, #0]
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f042 0201 	orr.w	r2, r2, #1
 80019e4:	601a      	str	r2, [r3, #0]
 80019e6:	e005      	b.n	80019f4 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	2200      	movs	r2, #0
 80019ec:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80019f0:	2302      	movs	r3, #2
 80019f2:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 80019f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80019f6:	4618      	mov	r0, r3
 80019f8:	3718      	adds	r7, #24
 80019fa:	46bd      	mov	sp, r7
 80019fc:	bd80      	pop	{r7, pc}

080019fe <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80019fe:	b480      	push	{r7}
 8001a00:	b085      	sub	sp, #20
 8001a02:	af00      	add	r7, sp, #0
 8001a04:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001a06:	2300      	movs	r3, #0
 8001a08:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001a10:	2b02      	cmp	r3, #2
 8001a12:	d008      	beq.n	8001a26 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	2204      	movs	r2, #4
 8001a18:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001a22:	2301      	movs	r3, #1
 8001a24:	e020      	b.n	8001a68 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	681a      	ldr	r2, [r3, #0]
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f022 020e 	bic.w	r2, r2, #14
 8001a34:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	681a      	ldr	r2, [r3, #0]
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f022 0201 	bic.w	r2, r2, #1
 8001a44:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a4e:	2101      	movs	r1, #1
 8001a50:	fa01 f202 	lsl.w	r2, r1, r2
 8001a54:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	2201      	movs	r2, #1
 8001a5a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	2200      	movs	r2, #0
 8001a62:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001a66:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a68:	4618      	mov	r0, r3
 8001a6a:	3714      	adds	r7, #20
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	bc80      	pop	{r7}
 8001a70:	4770      	bx	lr
	...

08001a74 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b084      	sub	sp, #16
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a90:	2204      	movs	r2, #4
 8001a92:	409a      	lsls	r2, r3
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	4013      	ands	r3, r2
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d04f      	beq.n	8001b3c <HAL_DMA_IRQHandler+0xc8>
 8001a9c:	68bb      	ldr	r3, [r7, #8]
 8001a9e:	f003 0304 	and.w	r3, r3, #4
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d04a      	beq.n	8001b3c <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f003 0320 	and.w	r3, r3, #32
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d107      	bne.n	8001ac4 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	681a      	ldr	r2, [r3, #0]
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f022 0204 	bic.w	r2, r2, #4
 8001ac2:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	4a66      	ldr	r2, [pc, #408]	; (8001c64 <HAL_DMA_IRQHandler+0x1f0>)
 8001aca:	4293      	cmp	r3, r2
 8001acc:	d029      	beq.n	8001b22 <HAL_DMA_IRQHandler+0xae>
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	4a65      	ldr	r2, [pc, #404]	; (8001c68 <HAL_DMA_IRQHandler+0x1f4>)
 8001ad4:	4293      	cmp	r3, r2
 8001ad6:	d022      	beq.n	8001b1e <HAL_DMA_IRQHandler+0xaa>
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	4a63      	ldr	r2, [pc, #396]	; (8001c6c <HAL_DMA_IRQHandler+0x1f8>)
 8001ade:	4293      	cmp	r3, r2
 8001ae0:	d01a      	beq.n	8001b18 <HAL_DMA_IRQHandler+0xa4>
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	4a62      	ldr	r2, [pc, #392]	; (8001c70 <HAL_DMA_IRQHandler+0x1fc>)
 8001ae8:	4293      	cmp	r3, r2
 8001aea:	d012      	beq.n	8001b12 <HAL_DMA_IRQHandler+0x9e>
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	4a60      	ldr	r2, [pc, #384]	; (8001c74 <HAL_DMA_IRQHandler+0x200>)
 8001af2:	4293      	cmp	r3, r2
 8001af4:	d00a      	beq.n	8001b0c <HAL_DMA_IRQHandler+0x98>
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	4a5f      	ldr	r2, [pc, #380]	; (8001c78 <HAL_DMA_IRQHandler+0x204>)
 8001afc:	4293      	cmp	r3, r2
 8001afe:	d102      	bne.n	8001b06 <HAL_DMA_IRQHandler+0x92>
 8001b00:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001b04:	e00e      	b.n	8001b24 <HAL_DMA_IRQHandler+0xb0>
 8001b06:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001b0a:	e00b      	b.n	8001b24 <HAL_DMA_IRQHandler+0xb0>
 8001b0c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001b10:	e008      	b.n	8001b24 <HAL_DMA_IRQHandler+0xb0>
 8001b12:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001b16:	e005      	b.n	8001b24 <HAL_DMA_IRQHandler+0xb0>
 8001b18:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001b1c:	e002      	b.n	8001b24 <HAL_DMA_IRQHandler+0xb0>
 8001b1e:	2340      	movs	r3, #64	; 0x40
 8001b20:	e000      	b.n	8001b24 <HAL_DMA_IRQHandler+0xb0>
 8001b22:	2304      	movs	r3, #4
 8001b24:	4a55      	ldr	r2, [pc, #340]	; (8001c7c <HAL_DMA_IRQHandler+0x208>)
 8001b26:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	f000 8094 	beq.w	8001c5a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b36:	6878      	ldr	r0, [r7, #4]
 8001b38:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8001b3a:	e08e      	b.n	8001c5a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b40:	2202      	movs	r2, #2
 8001b42:	409a      	lsls	r2, r3
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	4013      	ands	r3, r2
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d056      	beq.n	8001bfa <HAL_DMA_IRQHandler+0x186>
 8001b4c:	68bb      	ldr	r3, [r7, #8]
 8001b4e:	f003 0302 	and.w	r3, r3, #2
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d051      	beq.n	8001bfa <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f003 0320 	and.w	r3, r3, #32
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d10b      	bne.n	8001b7c <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	681a      	ldr	r2, [r3, #0]
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f022 020a 	bic.w	r2, r2, #10
 8001b72:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	2201      	movs	r2, #1
 8001b78:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	4a38      	ldr	r2, [pc, #224]	; (8001c64 <HAL_DMA_IRQHandler+0x1f0>)
 8001b82:	4293      	cmp	r3, r2
 8001b84:	d029      	beq.n	8001bda <HAL_DMA_IRQHandler+0x166>
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	4a37      	ldr	r2, [pc, #220]	; (8001c68 <HAL_DMA_IRQHandler+0x1f4>)
 8001b8c:	4293      	cmp	r3, r2
 8001b8e:	d022      	beq.n	8001bd6 <HAL_DMA_IRQHandler+0x162>
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	4a35      	ldr	r2, [pc, #212]	; (8001c6c <HAL_DMA_IRQHandler+0x1f8>)
 8001b96:	4293      	cmp	r3, r2
 8001b98:	d01a      	beq.n	8001bd0 <HAL_DMA_IRQHandler+0x15c>
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	4a34      	ldr	r2, [pc, #208]	; (8001c70 <HAL_DMA_IRQHandler+0x1fc>)
 8001ba0:	4293      	cmp	r3, r2
 8001ba2:	d012      	beq.n	8001bca <HAL_DMA_IRQHandler+0x156>
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	4a32      	ldr	r2, [pc, #200]	; (8001c74 <HAL_DMA_IRQHandler+0x200>)
 8001baa:	4293      	cmp	r3, r2
 8001bac:	d00a      	beq.n	8001bc4 <HAL_DMA_IRQHandler+0x150>
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	4a31      	ldr	r2, [pc, #196]	; (8001c78 <HAL_DMA_IRQHandler+0x204>)
 8001bb4:	4293      	cmp	r3, r2
 8001bb6:	d102      	bne.n	8001bbe <HAL_DMA_IRQHandler+0x14a>
 8001bb8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001bbc:	e00e      	b.n	8001bdc <HAL_DMA_IRQHandler+0x168>
 8001bbe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001bc2:	e00b      	b.n	8001bdc <HAL_DMA_IRQHandler+0x168>
 8001bc4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001bc8:	e008      	b.n	8001bdc <HAL_DMA_IRQHandler+0x168>
 8001bca:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001bce:	e005      	b.n	8001bdc <HAL_DMA_IRQHandler+0x168>
 8001bd0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001bd4:	e002      	b.n	8001bdc <HAL_DMA_IRQHandler+0x168>
 8001bd6:	2320      	movs	r3, #32
 8001bd8:	e000      	b.n	8001bdc <HAL_DMA_IRQHandler+0x168>
 8001bda:	2302      	movs	r3, #2
 8001bdc:	4a27      	ldr	r2, [pc, #156]	; (8001c7c <HAL_DMA_IRQHandler+0x208>)
 8001bde:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	2200      	movs	r2, #0
 8001be4:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d034      	beq.n	8001c5a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bf4:	6878      	ldr	r0, [r7, #4]
 8001bf6:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001bf8:	e02f      	b.n	8001c5a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bfe:	2208      	movs	r2, #8
 8001c00:	409a      	lsls	r2, r3
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	4013      	ands	r3, r2
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d028      	beq.n	8001c5c <HAL_DMA_IRQHandler+0x1e8>
 8001c0a:	68bb      	ldr	r3, [r7, #8]
 8001c0c:	f003 0308 	and.w	r3, r3, #8
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d023      	beq.n	8001c5c <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	681a      	ldr	r2, [r3, #0]
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f022 020e 	bic.w	r2, r2, #14
 8001c22:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c2c:	2101      	movs	r1, #1
 8001c2e:	fa01 f202 	lsl.w	r2, r1, r2
 8001c32:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	2201      	movs	r2, #1
 8001c38:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	2201      	movs	r2, #1
 8001c3e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	2200      	movs	r2, #0
 8001c46:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d004      	beq.n	8001c5c <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c56:	6878      	ldr	r0, [r7, #4]
 8001c58:	4798      	blx	r3
    }
  }
  return;
 8001c5a:	bf00      	nop
 8001c5c:	bf00      	nop
}
 8001c5e:	3710      	adds	r7, #16
 8001c60:	46bd      	mov	sp, r7
 8001c62:	bd80      	pop	{r7, pc}
 8001c64:	40020008 	.word	0x40020008
 8001c68:	4002001c 	.word	0x4002001c
 8001c6c:	40020030 	.word	0x40020030
 8001c70:	40020044 	.word	0x40020044
 8001c74:	40020058 	.word	0x40020058
 8001c78:	4002006c 	.word	0x4002006c
 8001c7c:	40020000 	.word	0x40020000

08001c80 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001c80:	b480      	push	{r7}
 8001c82:	b085      	sub	sp, #20
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	60f8      	str	r0, [r7, #12]
 8001c88:	60b9      	str	r1, [r7, #8]
 8001c8a:	607a      	str	r2, [r7, #4]
 8001c8c:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c96:	2101      	movs	r1, #1
 8001c98:	fa01 f202 	lsl.w	r2, r1, r2
 8001c9c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	683a      	ldr	r2, [r7, #0]
 8001ca4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	685b      	ldr	r3, [r3, #4]
 8001caa:	2b10      	cmp	r3, #16
 8001cac:	d108      	bne.n	8001cc0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	687a      	ldr	r2, [r7, #4]
 8001cb4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	68ba      	ldr	r2, [r7, #8]
 8001cbc:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001cbe:	e007      	b.n	8001cd0 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	68ba      	ldr	r2, [r7, #8]
 8001cc6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	687a      	ldr	r2, [r7, #4]
 8001cce:	60da      	str	r2, [r3, #12]
}
 8001cd0:	bf00      	nop
 8001cd2:	3714      	adds	r7, #20
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	bc80      	pop	{r7}
 8001cd8:	4770      	bx	lr
	...

08001cdc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	b08b      	sub	sp, #44	; 0x2c
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
 8001ce4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001cea:	2300      	movs	r3, #0
 8001cec:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001cee:	e127      	b.n	8001f40 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001cf0:	2201      	movs	r2, #1
 8001cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001cfa:	683b      	ldr	r3, [r7, #0]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	69fa      	ldr	r2, [r7, #28]
 8001d00:	4013      	ands	r3, r2
 8001d02:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001d04:	69ba      	ldr	r2, [r7, #24]
 8001d06:	69fb      	ldr	r3, [r7, #28]
 8001d08:	429a      	cmp	r2, r3
 8001d0a:	f040 8116 	bne.w	8001f3a <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001d0e:	683b      	ldr	r3, [r7, #0]
 8001d10:	685b      	ldr	r3, [r3, #4]
 8001d12:	2b12      	cmp	r3, #18
 8001d14:	d034      	beq.n	8001d80 <HAL_GPIO_Init+0xa4>
 8001d16:	2b12      	cmp	r3, #18
 8001d18:	d80d      	bhi.n	8001d36 <HAL_GPIO_Init+0x5a>
 8001d1a:	2b02      	cmp	r3, #2
 8001d1c:	d02b      	beq.n	8001d76 <HAL_GPIO_Init+0x9a>
 8001d1e:	2b02      	cmp	r3, #2
 8001d20:	d804      	bhi.n	8001d2c <HAL_GPIO_Init+0x50>
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d031      	beq.n	8001d8a <HAL_GPIO_Init+0xae>
 8001d26:	2b01      	cmp	r3, #1
 8001d28:	d01c      	beq.n	8001d64 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001d2a:	e048      	b.n	8001dbe <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001d2c:	2b03      	cmp	r3, #3
 8001d2e:	d043      	beq.n	8001db8 <HAL_GPIO_Init+0xdc>
 8001d30:	2b11      	cmp	r3, #17
 8001d32:	d01b      	beq.n	8001d6c <HAL_GPIO_Init+0x90>
          break;
 8001d34:	e043      	b.n	8001dbe <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001d36:	4a89      	ldr	r2, [pc, #548]	; (8001f5c <HAL_GPIO_Init+0x280>)
 8001d38:	4293      	cmp	r3, r2
 8001d3a:	d026      	beq.n	8001d8a <HAL_GPIO_Init+0xae>
 8001d3c:	4a87      	ldr	r2, [pc, #540]	; (8001f5c <HAL_GPIO_Init+0x280>)
 8001d3e:	4293      	cmp	r3, r2
 8001d40:	d806      	bhi.n	8001d50 <HAL_GPIO_Init+0x74>
 8001d42:	4a87      	ldr	r2, [pc, #540]	; (8001f60 <HAL_GPIO_Init+0x284>)
 8001d44:	4293      	cmp	r3, r2
 8001d46:	d020      	beq.n	8001d8a <HAL_GPIO_Init+0xae>
 8001d48:	4a86      	ldr	r2, [pc, #536]	; (8001f64 <HAL_GPIO_Init+0x288>)
 8001d4a:	4293      	cmp	r3, r2
 8001d4c:	d01d      	beq.n	8001d8a <HAL_GPIO_Init+0xae>
          break;
 8001d4e:	e036      	b.n	8001dbe <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001d50:	4a85      	ldr	r2, [pc, #532]	; (8001f68 <HAL_GPIO_Init+0x28c>)
 8001d52:	4293      	cmp	r3, r2
 8001d54:	d019      	beq.n	8001d8a <HAL_GPIO_Init+0xae>
 8001d56:	4a85      	ldr	r2, [pc, #532]	; (8001f6c <HAL_GPIO_Init+0x290>)
 8001d58:	4293      	cmp	r3, r2
 8001d5a:	d016      	beq.n	8001d8a <HAL_GPIO_Init+0xae>
 8001d5c:	4a84      	ldr	r2, [pc, #528]	; (8001f70 <HAL_GPIO_Init+0x294>)
 8001d5e:	4293      	cmp	r3, r2
 8001d60:	d013      	beq.n	8001d8a <HAL_GPIO_Init+0xae>
          break;
 8001d62:	e02c      	b.n	8001dbe <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	68db      	ldr	r3, [r3, #12]
 8001d68:	623b      	str	r3, [r7, #32]
          break;
 8001d6a:	e028      	b.n	8001dbe <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	68db      	ldr	r3, [r3, #12]
 8001d70:	3304      	adds	r3, #4
 8001d72:	623b      	str	r3, [r7, #32]
          break;
 8001d74:	e023      	b.n	8001dbe <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001d76:	683b      	ldr	r3, [r7, #0]
 8001d78:	68db      	ldr	r3, [r3, #12]
 8001d7a:	3308      	adds	r3, #8
 8001d7c:	623b      	str	r3, [r7, #32]
          break;
 8001d7e:	e01e      	b.n	8001dbe <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	68db      	ldr	r3, [r3, #12]
 8001d84:	330c      	adds	r3, #12
 8001d86:	623b      	str	r3, [r7, #32]
          break;
 8001d88:	e019      	b.n	8001dbe <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001d8a:	683b      	ldr	r3, [r7, #0]
 8001d8c:	689b      	ldr	r3, [r3, #8]
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d102      	bne.n	8001d98 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001d92:	2304      	movs	r3, #4
 8001d94:	623b      	str	r3, [r7, #32]
          break;
 8001d96:	e012      	b.n	8001dbe <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001d98:	683b      	ldr	r3, [r7, #0]
 8001d9a:	689b      	ldr	r3, [r3, #8]
 8001d9c:	2b01      	cmp	r3, #1
 8001d9e:	d105      	bne.n	8001dac <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001da0:	2308      	movs	r3, #8
 8001da2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	69fa      	ldr	r2, [r7, #28]
 8001da8:	611a      	str	r2, [r3, #16]
          break;
 8001daa:	e008      	b.n	8001dbe <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001dac:	2308      	movs	r3, #8
 8001dae:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	69fa      	ldr	r2, [r7, #28]
 8001db4:	615a      	str	r2, [r3, #20]
          break;
 8001db6:	e002      	b.n	8001dbe <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001db8:	2300      	movs	r3, #0
 8001dba:	623b      	str	r3, [r7, #32]
          break;
 8001dbc:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001dbe:	69bb      	ldr	r3, [r7, #24]
 8001dc0:	2bff      	cmp	r3, #255	; 0xff
 8001dc2:	d801      	bhi.n	8001dc8 <HAL_GPIO_Init+0xec>
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	e001      	b.n	8001dcc <HAL_GPIO_Init+0xf0>
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	3304      	adds	r3, #4
 8001dcc:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001dce:	69bb      	ldr	r3, [r7, #24]
 8001dd0:	2bff      	cmp	r3, #255	; 0xff
 8001dd2:	d802      	bhi.n	8001dda <HAL_GPIO_Init+0xfe>
 8001dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dd6:	009b      	lsls	r3, r3, #2
 8001dd8:	e002      	b.n	8001de0 <HAL_GPIO_Init+0x104>
 8001dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ddc:	3b08      	subs	r3, #8
 8001dde:	009b      	lsls	r3, r3, #2
 8001de0:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001de2:	697b      	ldr	r3, [r7, #20]
 8001de4:	681a      	ldr	r2, [r3, #0]
 8001de6:	210f      	movs	r1, #15
 8001de8:	693b      	ldr	r3, [r7, #16]
 8001dea:	fa01 f303 	lsl.w	r3, r1, r3
 8001dee:	43db      	mvns	r3, r3
 8001df0:	401a      	ands	r2, r3
 8001df2:	6a39      	ldr	r1, [r7, #32]
 8001df4:	693b      	ldr	r3, [r7, #16]
 8001df6:	fa01 f303 	lsl.w	r3, r1, r3
 8001dfa:	431a      	orrs	r2, r3
 8001dfc:	697b      	ldr	r3, [r7, #20]
 8001dfe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	685b      	ldr	r3, [r3, #4]
 8001e04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	f000 8096 	beq.w	8001f3a <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001e0e:	4b59      	ldr	r3, [pc, #356]	; (8001f74 <HAL_GPIO_Init+0x298>)
 8001e10:	699b      	ldr	r3, [r3, #24]
 8001e12:	4a58      	ldr	r2, [pc, #352]	; (8001f74 <HAL_GPIO_Init+0x298>)
 8001e14:	f043 0301 	orr.w	r3, r3, #1
 8001e18:	6193      	str	r3, [r2, #24]
 8001e1a:	4b56      	ldr	r3, [pc, #344]	; (8001f74 <HAL_GPIO_Init+0x298>)
 8001e1c:	699b      	ldr	r3, [r3, #24]
 8001e1e:	f003 0301 	and.w	r3, r3, #1
 8001e22:	60bb      	str	r3, [r7, #8]
 8001e24:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001e26:	4a54      	ldr	r2, [pc, #336]	; (8001f78 <HAL_GPIO_Init+0x29c>)
 8001e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e2a:	089b      	lsrs	r3, r3, #2
 8001e2c:	3302      	adds	r3, #2
 8001e2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e32:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e36:	f003 0303 	and.w	r3, r3, #3
 8001e3a:	009b      	lsls	r3, r3, #2
 8001e3c:	220f      	movs	r2, #15
 8001e3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e42:	43db      	mvns	r3, r3
 8001e44:	68fa      	ldr	r2, [r7, #12]
 8001e46:	4013      	ands	r3, r2
 8001e48:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	4a4b      	ldr	r2, [pc, #300]	; (8001f7c <HAL_GPIO_Init+0x2a0>)
 8001e4e:	4293      	cmp	r3, r2
 8001e50:	d013      	beq.n	8001e7a <HAL_GPIO_Init+0x19e>
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	4a4a      	ldr	r2, [pc, #296]	; (8001f80 <HAL_GPIO_Init+0x2a4>)
 8001e56:	4293      	cmp	r3, r2
 8001e58:	d00d      	beq.n	8001e76 <HAL_GPIO_Init+0x19a>
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	4a49      	ldr	r2, [pc, #292]	; (8001f84 <HAL_GPIO_Init+0x2a8>)
 8001e5e:	4293      	cmp	r3, r2
 8001e60:	d007      	beq.n	8001e72 <HAL_GPIO_Init+0x196>
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	4a48      	ldr	r2, [pc, #288]	; (8001f88 <HAL_GPIO_Init+0x2ac>)
 8001e66:	4293      	cmp	r3, r2
 8001e68:	d101      	bne.n	8001e6e <HAL_GPIO_Init+0x192>
 8001e6a:	2303      	movs	r3, #3
 8001e6c:	e006      	b.n	8001e7c <HAL_GPIO_Init+0x1a0>
 8001e6e:	2304      	movs	r3, #4
 8001e70:	e004      	b.n	8001e7c <HAL_GPIO_Init+0x1a0>
 8001e72:	2302      	movs	r3, #2
 8001e74:	e002      	b.n	8001e7c <HAL_GPIO_Init+0x1a0>
 8001e76:	2301      	movs	r3, #1
 8001e78:	e000      	b.n	8001e7c <HAL_GPIO_Init+0x1a0>
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e7e:	f002 0203 	and.w	r2, r2, #3
 8001e82:	0092      	lsls	r2, r2, #2
 8001e84:	4093      	lsls	r3, r2
 8001e86:	68fa      	ldr	r2, [r7, #12]
 8001e88:	4313      	orrs	r3, r2
 8001e8a:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001e8c:	493a      	ldr	r1, [pc, #232]	; (8001f78 <HAL_GPIO_Init+0x29c>)
 8001e8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e90:	089b      	lsrs	r3, r3, #2
 8001e92:	3302      	adds	r3, #2
 8001e94:	68fa      	ldr	r2, [r7, #12]
 8001e96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001e9a:	683b      	ldr	r3, [r7, #0]
 8001e9c:	685b      	ldr	r3, [r3, #4]
 8001e9e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d006      	beq.n	8001eb4 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001ea6:	4b39      	ldr	r3, [pc, #228]	; (8001f8c <HAL_GPIO_Init+0x2b0>)
 8001ea8:	681a      	ldr	r2, [r3, #0]
 8001eaa:	4938      	ldr	r1, [pc, #224]	; (8001f8c <HAL_GPIO_Init+0x2b0>)
 8001eac:	69bb      	ldr	r3, [r7, #24]
 8001eae:	4313      	orrs	r3, r2
 8001eb0:	600b      	str	r3, [r1, #0]
 8001eb2:	e006      	b.n	8001ec2 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001eb4:	4b35      	ldr	r3, [pc, #212]	; (8001f8c <HAL_GPIO_Init+0x2b0>)
 8001eb6:	681a      	ldr	r2, [r3, #0]
 8001eb8:	69bb      	ldr	r3, [r7, #24]
 8001eba:	43db      	mvns	r3, r3
 8001ebc:	4933      	ldr	r1, [pc, #204]	; (8001f8c <HAL_GPIO_Init+0x2b0>)
 8001ebe:	4013      	ands	r3, r2
 8001ec0:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001ec2:	683b      	ldr	r3, [r7, #0]
 8001ec4:	685b      	ldr	r3, [r3, #4]
 8001ec6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d006      	beq.n	8001edc <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001ece:	4b2f      	ldr	r3, [pc, #188]	; (8001f8c <HAL_GPIO_Init+0x2b0>)
 8001ed0:	685a      	ldr	r2, [r3, #4]
 8001ed2:	492e      	ldr	r1, [pc, #184]	; (8001f8c <HAL_GPIO_Init+0x2b0>)
 8001ed4:	69bb      	ldr	r3, [r7, #24]
 8001ed6:	4313      	orrs	r3, r2
 8001ed8:	604b      	str	r3, [r1, #4]
 8001eda:	e006      	b.n	8001eea <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001edc:	4b2b      	ldr	r3, [pc, #172]	; (8001f8c <HAL_GPIO_Init+0x2b0>)
 8001ede:	685a      	ldr	r2, [r3, #4]
 8001ee0:	69bb      	ldr	r3, [r7, #24]
 8001ee2:	43db      	mvns	r3, r3
 8001ee4:	4929      	ldr	r1, [pc, #164]	; (8001f8c <HAL_GPIO_Init+0x2b0>)
 8001ee6:	4013      	ands	r3, r2
 8001ee8:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001eea:	683b      	ldr	r3, [r7, #0]
 8001eec:	685b      	ldr	r3, [r3, #4]
 8001eee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d006      	beq.n	8001f04 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001ef6:	4b25      	ldr	r3, [pc, #148]	; (8001f8c <HAL_GPIO_Init+0x2b0>)
 8001ef8:	689a      	ldr	r2, [r3, #8]
 8001efa:	4924      	ldr	r1, [pc, #144]	; (8001f8c <HAL_GPIO_Init+0x2b0>)
 8001efc:	69bb      	ldr	r3, [r7, #24]
 8001efe:	4313      	orrs	r3, r2
 8001f00:	608b      	str	r3, [r1, #8]
 8001f02:	e006      	b.n	8001f12 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001f04:	4b21      	ldr	r3, [pc, #132]	; (8001f8c <HAL_GPIO_Init+0x2b0>)
 8001f06:	689a      	ldr	r2, [r3, #8]
 8001f08:	69bb      	ldr	r3, [r7, #24]
 8001f0a:	43db      	mvns	r3, r3
 8001f0c:	491f      	ldr	r1, [pc, #124]	; (8001f8c <HAL_GPIO_Init+0x2b0>)
 8001f0e:	4013      	ands	r3, r2
 8001f10:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001f12:	683b      	ldr	r3, [r7, #0]
 8001f14:	685b      	ldr	r3, [r3, #4]
 8001f16:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d006      	beq.n	8001f2c <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001f1e:	4b1b      	ldr	r3, [pc, #108]	; (8001f8c <HAL_GPIO_Init+0x2b0>)
 8001f20:	68da      	ldr	r2, [r3, #12]
 8001f22:	491a      	ldr	r1, [pc, #104]	; (8001f8c <HAL_GPIO_Init+0x2b0>)
 8001f24:	69bb      	ldr	r3, [r7, #24]
 8001f26:	4313      	orrs	r3, r2
 8001f28:	60cb      	str	r3, [r1, #12]
 8001f2a:	e006      	b.n	8001f3a <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001f2c:	4b17      	ldr	r3, [pc, #92]	; (8001f8c <HAL_GPIO_Init+0x2b0>)
 8001f2e:	68da      	ldr	r2, [r3, #12]
 8001f30:	69bb      	ldr	r3, [r7, #24]
 8001f32:	43db      	mvns	r3, r3
 8001f34:	4915      	ldr	r1, [pc, #84]	; (8001f8c <HAL_GPIO_Init+0x2b0>)
 8001f36:	4013      	ands	r3, r2
 8001f38:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f3c:	3301      	adds	r3, #1
 8001f3e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	681a      	ldr	r2, [r3, #0]
 8001f44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f46:	fa22 f303 	lsr.w	r3, r2, r3
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	f47f aed0 	bne.w	8001cf0 <HAL_GPIO_Init+0x14>
  }
}
 8001f50:	bf00      	nop
 8001f52:	372c      	adds	r7, #44	; 0x2c
 8001f54:	46bd      	mov	sp, r7
 8001f56:	bc80      	pop	{r7}
 8001f58:	4770      	bx	lr
 8001f5a:	bf00      	nop
 8001f5c:	10210000 	.word	0x10210000
 8001f60:	10110000 	.word	0x10110000
 8001f64:	10120000 	.word	0x10120000
 8001f68:	10310000 	.word	0x10310000
 8001f6c:	10320000 	.word	0x10320000
 8001f70:	10220000 	.word	0x10220000
 8001f74:	40021000 	.word	0x40021000
 8001f78:	40010000 	.word	0x40010000
 8001f7c:	40010800 	.word	0x40010800
 8001f80:	40010c00 	.word	0x40010c00
 8001f84:	40011000 	.word	0x40011000
 8001f88:	40011400 	.word	0x40011400
 8001f8c:	40010400 	.word	0x40010400

08001f90 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f90:	b480      	push	{r7}
 8001f92:	b083      	sub	sp, #12
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
 8001f98:	460b      	mov	r3, r1
 8001f9a:	807b      	strh	r3, [r7, #2]
 8001f9c:	4613      	mov	r3, r2
 8001f9e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001fa0:	787b      	ldrb	r3, [r7, #1]
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d003      	beq.n	8001fae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001fa6:	887a      	ldrh	r2, [r7, #2]
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001fac:	e003      	b.n	8001fb6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001fae:	887b      	ldrh	r3, [r7, #2]
 8001fb0:	041a      	lsls	r2, r3, #16
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	611a      	str	r2, [r3, #16]
}
 8001fb6:	bf00      	nop
 8001fb8:	370c      	adds	r7, #12
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	bc80      	pop	{r7}
 8001fbe:	4770      	bx	lr

08001fc0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b082      	sub	sp, #8
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001fca:	4b08      	ldr	r3, [pc, #32]	; (8001fec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001fcc:	695a      	ldr	r2, [r3, #20]
 8001fce:	88fb      	ldrh	r3, [r7, #6]
 8001fd0:	4013      	ands	r3, r2
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d006      	beq.n	8001fe4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001fd6:	4a05      	ldr	r2, [pc, #20]	; (8001fec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001fd8:	88fb      	ldrh	r3, [r7, #6]
 8001fda:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001fdc:	88fb      	ldrh	r3, [r7, #6]
 8001fde:	4618      	mov	r0, r3
 8001fe0:	f7fe fb7a 	bl	80006d8 <HAL_GPIO_EXTI_Callback>
  }
}
 8001fe4:	bf00      	nop
 8001fe6:	3708      	adds	r7, #8
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	bd80      	pop	{r7, pc}
 8001fec:	40010400 	.word	0x40010400

08001ff0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001ff0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ff2:	b08b      	sub	sp, #44	; 0x2c
 8001ff4:	af06      	add	r7, sp, #24
 8001ff6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d101      	bne.n	8002002 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001ffe:	2301      	movs	r3, #1
 8002000:	e0fd      	b.n	80021fe <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8002008:	b2db      	uxtb	r3, r3
 800200a:	2b00      	cmp	r3, #0
 800200c:	d106      	bne.n	800201c <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	2200      	movs	r2, #0
 8002012:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002016:	6878      	ldr	r0, [r7, #4]
 8002018:	f006 f956 	bl	80082c8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	2203      	movs	r2, #3
 8002020:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	4618      	mov	r0, r3
 800202a:	f002 fb6b 	bl	8004704 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	603b      	str	r3, [r7, #0]
 8002034:	687e      	ldr	r6, [r7, #4]
 8002036:	466d      	mov	r5, sp
 8002038:	f106 0410 	add.w	r4, r6, #16
 800203c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800203e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002040:	6823      	ldr	r3, [r4, #0]
 8002042:	602b      	str	r3, [r5, #0]
 8002044:	1d33      	adds	r3, r6, #4
 8002046:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002048:	6838      	ldr	r0, [r7, #0]
 800204a:	f002 fb35 	bl	80046b8 <USB_CoreInit>
 800204e:	4603      	mov	r3, r0
 8002050:	2b00      	cmp	r3, #0
 8002052:	d005      	beq.n	8002060 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	2202      	movs	r2, #2
 8002058:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 800205c:	2301      	movs	r3, #1
 800205e:	e0ce      	b.n	80021fe <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	2100      	movs	r1, #0
 8002066:	4618      	mov	r0, r3
 8002068:	f002 fb66 	bl	8004738 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800206c:	2300      	movs	r3, #0
 800206e:	73fb      	strb	r3, [r7, #15]
 8002070:	e04c      	b.n	800210c <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002072:	7bfb      	ldrb	r3, [r7, #15]
 8002074:	6879      	ldr	r1, [r7, #4]
 8002076:	1c5a      	adds	r2, r3, #1
 8002078:	4613      	mov	r3, r2
 800207a:	009b      	lsls	r3, r3, #2
 800207c:	4413      	add	r3, r2
 800207e:	00db      	lsls	r3, r3, #3
 8002080:	440b      	add	r3, r1
 8002082:	3301      	adds	r3, #1
 8002084:	2201      	movs	r2, #1
 8002086:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002088:	7bfb      	ldrb	r3, [r7, #15]
 800208a:	6879      	ldr	r1, [r7, #4]
 800208c:	1c5a      	adds	r2, r3, #1
 800208e:	4613      	mov	r3, r2
 8002090:	009b      	lsls	r3, r3, #2
 8002092:	4413      	add	r3, r2
 8002094:	00db      	lsls	r3, r3, #3
 8002096:	440b      	add	r3, r1
 8002098:	7bfa      	ldrb	r2, [r7, #15]
 800209a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800209c:	7bfa      	ldrb	r2, [r7, #15]
 800209e:	7bfb      	ldrb	r3, [r7, #15]
 80020a0:	b298      	uxth	r0, r3
 80020a2:	6879      	ldr	r1, [r7, #4]
 80020a4:	4613      	mov	r3, r2
 80020a6:	009b      	lsls	r3, r3, #2
 80020a8:	4413      	add	r3, r2
 80020aa:	00db      	lsls	r3, r3, #3
 80020ac:	440b      	add	r3, r1
 80020ae:	3336      	adds	r3, #54	; 0x36
 80020b0:	4602      	mov	r2, r0
 80020b2:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80020b4:	7bfb      	ldrb	r3, [r7, #15]
 80020b6:	6879      	ldr	r1, [r7, #4]
 80020b8:	1c5a      	adds	r2, r3, #1
 80020ba:	4613      	mov	r3, r2
 80020bc:	009b      	lsls	r3, r3, #2
 80020be:	4413      	add	r3, r2
 80020c0:	00db      	lsls	r3, r3, #3
 80020c2:	440b      	add	r3, r1
 80020c4:	3303      	adds	r3, #3
 80020c6:	2200      	movs	r2, #0
 80020c8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80020ca:	7bfa      	ldrb	r2, [r7, #15]
 80020cc:	6879      	ldr	r1, [r7, #4]
 80020ce:	4613      	mov	r3, r2
 80020d0:	009b      	lsls	r3, r3, #2
 80020d2:	4413      	add	r3, r2
 80020d4:	00db      	lsls	r3, r3, #3
 80020d6:	440b      	add	r3, r1
 80020d8:	3338      	adds	r3, #56	; 0x38
 80020da:	2200      	movs	r2, #0
 80020dc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80020de:	7bfa      	ldrb	r2, [r7, #15]
 80020e0:	6879      	ldr	r1, [r7, #4]
 80020e2:	4613      	mov	r3, r2
 80020e4:	009b      	lsls	r3, r3, #2
 80020e6:	4413      	add	r3, r2
 80020e8:	00db      	lsls	r3, r3, #3
 80020ea:	440b      	add	r3, r1
 80020ec:	333c      	adds	r3, #60	; 0x3c
 80020ee:	2200      	movs	r2, #0
 80020f0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80020f2:	7bfa      	ldrb	r2, [r7, #15]
 80020f4:	6879      	ldr	r1, [r7, #4]
 80020f6:	4613      	mov	r3, r2
 80020f8:	009b      	lsls	r3, r3, #2
 80020fa:	4413      	add	r3, r2
 80020fc:	00db      	lsls	r3, r3, #3
 80020fe:	440b      	add	r3, r1
 8002100:	3340      	adds	r3, #64	; 0x40
 8002102:	2200      	movs	r2, #0
 8002104:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002106:	7bfb      	ldrb	r3, [r7, #15]
 8002108:	3301      	adds	r3, #1
 800210a:	73fb      	strb	r3, [r7, #15]
 800210c:	7bfa      	ldrb	r2, [r7, #15]
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	685b      	ldr	r3, [r3, #4]
 8002112:	429a      	cmp	r2, r3
 8002114:	d3ad      	bcc.n	8002072 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002116:	2300      	movs	r3, #0
 8002118:	73fb      	strb	r3, [r7, #15]
 800211a:	e044      	b.n	80021a6 <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800211c:	7bfa      	ldrb	r2, [r7, #15]
 800211e:	6879      	ldr	r1, [r7, #4]
 8002120:	4613      	mov	r3, r2
 8002122:	009b      	lsls	r3, r3, #2
 8002124:	4413      	add	r3, r2
 8002126:	00db      	lsls	r3, r3, #3
 8002128:	440b      	add	r3, r1
 800212a:	f203 1369 	addw	r3, r3, #361	; 0x169
 800212e:	2200      	movs	r2, #0
 8002130:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002132:	7bfa      	ldrb	r2, [r7, #15]
 8002134:	6879      	ldr	r1, [r7, #4]
 8002136:	4613      	mov	r3, r2
 8002138:	009b      	lsls	r3, r3, #2
 800213a:	4413      	add	r3, r2
 800213c:	00db      	lsls	r3, r3, #3
 800213e:	440b      	add	r3, r1
 8002140:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002144:	7bfa      	ldrb	r2, [r7, #15]
 8002146:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002148:	7bfa      	ldrb	r2, [r7, #15]
 800214a:	6879      	ldr	r1, [r7, #4]
 800214c:	4613      	mov	r3, r2
 800214e:	009b      	lsls	r3, r3, #2
 8002150:	4413      	add	r3, r2
 8002152:	00db      	lsls	r3, r3, #3
 8002154:	440b      	add	r3, r1
 8002156:	f203 136b 	addw	r3, r3, #363	; 0x16b
 800215a:	2200      	movs	r2, #0
 800215c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800215e:	7bfa      	ldrb	r2, [r7, #15]
 8002160:	6879      	ldr	r1, [r7, #4]
 8002162:	4613      	mov	r3, r2
 8002164:	009b      	lsls	r3, r3, #2
 8002166:	4413      	add	r3, r2
 8002168:	00db      	lsls	r3, r3, #3
 800216a:	440b      	add	r3, r1
 800216c:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8002170:	2200      	movs	r2, #0
 8002172:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002174:	7bfa      	ldrb	r2, [r7, #15]
 8002176:	6879      	ldr	r1, [r7, #4]
 8002178:	4613      	mov	r3, r2
 800217a:	009b      	lsls	r3, r3, #2
 800217c:	4413      	add	r3, r2
 800217e:	00db      	lsls	r3, r3, #3
 8002180:	440b      	add	r3, r1
 8002182:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8002186:	2200      	movs	r2, #0
 8002188:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800218a:	7bfa      	ldrb	r2, [r7, #15]
 800218c:	6879      	ldr	r1, [r7, #4]
 800218e:	4613      	mov	r3, r2
 8002190:	009b      	lsls	r3, r3, #2
 8002192:	4413      	add	r3, r2
 8002194:	00db      	lsls	r3, r3, #3
 8002196:	440b      	add	r3, r1
 8002198:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800219c:	2200      	movs	r2, #0
 800219e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80021a0:	7bfb      	ldrb	r3, [r7, #15]
 80021a2:	3301      	adds	r3, #1
 80021a4:	73fb      	strb	r3, [r7, #15]
 80021a6:	7bfa      	ldrb	r2, [r7, #15]
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	685b      	ldr	r3, [r3, #4]
 80021ac:	429a      	cmp	r2, r3
 80021ae:	d3b5      	bcc.n	800211c <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	603b      	str	r3, [r7, #0]
 80021b6:	687e      	ldr	r6, [r7, #4]
 80021b8:	466d      	mov	r5, sp
 80021ba:	f106 0410 	add.w	r4, r6, #16
 80021be:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80021c0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80021c2:	6823      	ldr	r3, [r4, #0]
 80021c4:	602b      	str	r3, [r5, #0]
 80021c6:	1d33      	adds	r3, r6, #4
 80021c8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80021ca:	6838      	ldr	r0, [r7, #0]
 80021cc:	f002 fac0 	bl	8004750 <USB_DevInit>
 80021d0:	4603      	mov	r3, r0
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d005      	beq.n	80021e2 <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	2202      	movs	r2, #2
 80021da:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 80021de:	2301      	movs	r3, #1
 80021e0:	e00d      	b.n	80021fe <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	2200      	movs	r2, #0
 80021e6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	2201      	movs	r2, #1
 80021ee:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	4618      	mov	r0, r3
 80021f8:	f004 fa5a 	bl	80066b0 <USB_DevDisconnect>

  return HAL_OK;
 80021fc:	2300      	movs	r3, #0
}
 80021fe:	4618      	mov	r0, r3
 8002200:	3714      	adds	r7, #20
 8002202:	46bd      	mov	sp, r7
 8002204:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002206 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002206:	b580      	push	{r7, lr}
 8002208:	b082      	sub	sp, #8
 800220a:	af00      	add	r7, sp, #0
 800220c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002214:	2b01      	cmp	r3, #1
 8002216:	d101      	bne.n	800221c <HAL_PCD_Start+0x16>
 8002218:	2302      	movs	r3, #2
 800221a:	e016      	b.n	800224a <HAL_PCD_Start+0x44>
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	2201      	movs	r2, #1
 8002220:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	4618      	mov	r0, r3
 800222a:	f002 fa55 	bl	80046d8 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 800222e:	2101      	movs	r1, #1
 8002230:	6878      	ldr	r0, [r7, #4]
 8002232:	f006 fac4 	bl	80087be <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	4618      	mov	r0, r3
 800223c:	f004 fa2e 	bl	800669c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	2200      	movs	r2, #0
 8002244:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002248:	2300      	movs	r3, #0
}
 800224a:	4618      	mov	r0, r3
 800224c:	3708      	adds	r7, #8
 800224e:	46bd      	mov	sp, r7
 8002250:	bd80      	pop	{r7, pc}

08002252 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002252:	b580      	push	{r7, lr}
 8002254:	b088      	sub	sp, #32
 8002256:	af00      	add	r7, sp, #0
 8002258:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	4618      	mov	r0, r3
 8002260:	f004 fa30 	bl	80066c4 <USB_ReadInterrupts>
 8002264:	4603      	mov	r3, r0
 8002266:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800226a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800226e:	d102      	bne.n	8002276 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8002270:	6878      	ldr	r0, [r7, #4]
 8002272:	f000 fb61 	bl	8002938 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	4618      	mov	r0, r3
 800227c:	f004 fa22 	bl	80066c4 <USB_ReadInterrupts>
 8002280:	4603      	mov	r3, r0
 8002282:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002286:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800228a:	d112      	bne.n	80022b2 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002294:	b29a      	uxth	r2, r3
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800229e:	b292      	uxth	r2, r2
 80022a0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80022a4:	6878      	ldr	r0, [r7, #4]
 80022a6:	f006 f892 	bl	80083ce <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80022aa:	2100      	movs	r1, #0
 80022ac:	6878      	ldr	r0, [r7, #4]
 80022ae:	f000 f925 	bl	80024fc <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	4618      	mov	r0, r3
 80022b8:	f004 fa04 	bl	80066c4 <USB_ReadInterrupts>
 80022bc:	4603      	mov	r3, r0
 80022be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022c2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80022c6:	d10b      	bne.n	80022e0 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80022d0:	b29a      	uxth	r2, r3
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80022da:	b292      	uxth	r2, r2
 80022dc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	4618      	mov	r0, r3
 80022e6:	f004 f9ed 	bl	80066c4 <USB_ReadInterrupts>
 80022ea:	4603      	mov	r3, r0
 80022ec:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80022f0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80022f4:	d10b      	bne.n	800230e <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80022fe:	b29a      	uxth	r2, r3
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002308:	b292      	uxth	r2, r2
 800230a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	4618      	mov	r0, r3
 8002314:	f004 f9d6 	bl	80066c4 <USB_ReadInterrupts>
 8002318:	4603      	mov	r3, r0
 800231a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800231e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002322:	d126      	bne.n	8002372 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800232c:	b29a      	uxth	r2, r3
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f022 0204 	bic.w	r2, r2, #4
 8002336:	b292      	uxth	r2, r2
 8002338:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002344:	b29a      	uxth	r2, r3
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f022 0208 	bic.w	r2, r2, #8
 800234e:	b292      	uxth	r2, r2
 8002350:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8002354:	6878      	ldr	r0, [r7, #4]
 8002356:	f006 f873 	bl	8008440 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002362:	b29a      	uxth	r2, r3
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800236c:	b292      	uxth	r2, r2
 800236e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	4618      	mov	r0, r3
 8002378:	f004 f9a4 	bl	80066c4 <USB_ReadInterrupts>
 800237c:	4603      	mov	r3, r0
 800237e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002382:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002386:	f040 8084 	bne.w	8002492 <HAL_PCD_IRQHandler+0x240>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 800238a:	2300      	movs	r3, #0
 800238c:	77fb      	strb	r3, [r7, #31]
 800238e:	e011      	b.n	80023b4 <HAL_PCD_IRQHandler+0x162>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	461a      	mov	r2, r3
 8002396:	7ffb      	ldrb	r3, [r7, #31]
 8002398:	009b      	lsls	r3, r3, #2
 800239a:	441a      	add	r2, r3
 800239c:	7ffb      	ldrb	r3, [r7, #31]
 800239e:	8812      	ldrh	r2, [r2, #0]
 80023a0:	b292      	uxth	r2, r2
 80023a2:	005b      	lsls	r3, r3, #1
 80023a4:	f107 0120 	add.w	r1, r7, #32
 80023a8:	440b      	add	r3, r1
 80023aa:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 80023ae:	7ffb      	ldrb	r3, [r7, #31]
 80023b0:	3301      	adds	r3, #1
 80023b2:	77fb      	strb	r3, [r7, #31]
 80023b4:	7ffb      	ldrb	r3, [r7, #31]
 80023b6:	2b07      	cmp	r3, #7
 80023b8:	d9ea      	bls.n	8002390 <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80023c2:	b29a      	uxth	r2, r3
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f042 0201 	orr.w	r2, r2, #1
 80023cc:	b292      	uxth	r2, r2
 80023ce:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80023da:	b29a      	uxth	r2, r3
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f022 0201 	bic.w	r2, r2, #1
 80023e4:	b292      	uxth	r2, r2
 80023e6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 80023ea:	bf00      	nop
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80023f4:	b29b      	uxth	r3, r3
 80023f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d0f6      	beq.n	80023ec <HAL_PCD_IRQHandler+0x19a>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002406:	b29a      	uxth	r2, r3
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002410:	b292      	uxth	r2, r2
 8002412:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8002416:	2300      	movs	r3, #0
 8002418:	77fb      	strb	r3, [r7, #31]
 800241a:	e010      	b.n	800243e <HAL_PCD_IRQHandler+0x1ec>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 800241c:	7ffb      	ldrb	r3, [r7, #31]
 800241e:	687a      	ldr	r2, [r7, #4]
 8002420:	6812      	ldr	r2, [r2, #0]
 8002422:	4611      	mov	r1, r2
 8002424:	7ffa      	ldrb	r2, [r7, #31]
 8002426:	0092      	lsls	r2, r2, #2
 8002428:	440a      	add	r2, r1
 800242a:	005b      	lsls	r3, r3, #1
 800242c:	f107 0120 	add.w	r1, r7, #32
 8002430:	440b      	add	r3, r1
 8002432:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8002436:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8002438:	7ffb      	ldrb	r3, [r7, #31]
 800243a:	3301      	adds	r3, #1
 800243c:	77fb      	strb	r3, [r7, #31]
 800243e:	7ffb      	ldrb	r3, [r7, #31]
 8002440:	2b07      	cmp	r3, #7
 8002442:	d9eb      	bls.n	800241c <HAL_PCD_IRQHandler+0x1ca>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800244c:	b29a      	uxth	r2, r3
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f042 0208 	orr.w	r2, r2, #8
 8002456:	b292      	uxth	r2, r2
 8002458:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002464:	b29a      	uxth	r2, r3
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800246e:	b292      	uxth	r2, r2
 8002470:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800247c:	b29a      	uxth	r2, r3
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f042 0204 	orr.w	r2, r2, #4
 8002486:	b292      	uxth	r2, r2
 8002488:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 800248c:	6878      	ldr	r0, [r7, #4]
 800248e:	f005 ffbd 	bl	800840c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	4618      	mov	r0, r3
 8002498:	f004 f914 	bl	80066c4 <USB_ReadInterrupts>
 800249c:	4603      	mov	r3, r0
 800249e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80024a2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80024a6:	d10e      	bne.n	80024c6 <HAL_PCD_IRQHandler+0x274>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80024b0:	b29a      	uxth	r2, r3
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80024ba:	b292      	uxth	r2, r2
 80024bc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80024c0:	6878      	ldr	r0, [r7, #4]
 80024c2:	f005 ff76 	bl	80083b2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	4618      	mov	r0, r3
 80024cc:	f004 f8fa 	bl	80066c4 <USB_ReadInterrupts>
 80024d0:	4603      	mov	r3, r0
 80024d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80024da:	d10b      	bne.n	80024f4 <HAL_PCD_IRQHandler+0x2a2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80024e4:	b29a      	uxth	r2, r3
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80024ee:	b292      	uxth	r2, r2
 80024f0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 80024f4:	bf00      	nop
 80024f6:	3720      	adds	r7, #32
 80024f8:	46bd      	mov	sp, r7
 80024fa:	bd80      	pop	{r7, pc}

080024fc <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b082      	sub	sp, #8
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
 8002504:	460b      	mov	r3, r1
 8002506:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800250e:	2b01      	cmp	r3, #1
 8002510:	d101      	bne.n	8002516 <HAL_PCD_SetAddress+0x1a>
 8002512:	2302      	movs	r3, #2
 8002514:	e013      	b.n	800253e <HAL_PCD_SetAddress+0x42>
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	2201      	movs	r2, #1
 800251a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	78fa      	ldrb	r2, [r7, #3]
 8002522:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	78fa      	ldrb	r2, [r7, #3]
 800252c:	4611      	mov	r1, r2
 800252e:	4618      	mov	r0, r3
 8002530:	f004 f8a1 	bl	8006676 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	2200      	movs	r2, #0
 8002538:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800253c:	2300      	movs	r3, #0
}
 800253e:	4618      	mov	r0, r3
 8002540:	3708      	adds	r7, #8
 8002542:	46bd      	mov	sp, r7
 8002544:	bd80      	pop	{r7, pc}

08002546 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002546:	b580      	push	{r7, lr}
 8002548:	b084      	sub	sp, #16
 800254a:	af00      	add	r7, sp, #0
 800254c:	6078      	str	r0, [r7, #4]
 800254e:	4608      	mov	r0, r1
 8002550:	4611      	mov	r1, r2
 8002552:	461a      	mov	r2, r3
 8002554:	4603      	mov	r3, r0
 8002556:	70fb      	strb	r3, [r7, #3]
 8002558:	460b      	mov	r3, r1
 800255a:	803b      	strh	r3, [r7, #0]
 800255c:	4613      	mov	r3, r2
 800255e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002560:	2300      	movs	r3, #0
 8002562:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002564:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002568:	2b00      	cmp	r3, #0
 800256a:	da0e      	bge.n	800258a <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800256c:	78fb      	ldrb	r3, [r7, #3]
 800256e:	f003 0307 	and.w	r3, r3, #7
 8002572:	1c5a      	adds	r2, r3, #1
 8002574:	4613      	mov	r3, r2
 8002576:	009b      	lsls	r3, r3, #2
 8002578:	4413      	add	r3, r2
 800257a:	00db      	lsls	r3, r3, #3
 800257c:	687a      	ldr	r2, [r7, #4]
 800257e:	4413      	add	r3, r2
 8002580:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	2201      	movs	r2, #1
 8002586:	705a      	strb	r2, [r3, #1]
 8002588:	e00e      	b.n	80025a8 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800258a:	78fb      	ldrb	r3, [r7, #3]
 800258c:	f003 0207 	and.w	r2, r3, #7
 8002590:	4613      	mov	r3, r2
 8002592:	009b      	lsls	r3, r3, #2
 8002594:	4413      	add	r3, r2
 8002596:	00db      	lsls	r3, r3, #3
 8002598:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800259c:	687a      	ldr	r2, [r7, #4]
 800259e:	4413      	add	r3, r2
 80025a0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	2200      	movs	r2, #0
 80025a6:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80025a8:	78fb      	ldrb	r3, [r7, #3]
 80025aa:	f003 0307 	and.w	r3, r3, #7
 80025ae:	b2da      	uxtb	r2, r3
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80025b4:	883a      	ldrh	r2, [r7, #0]
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	78ba      	ldrb	r2, [r7, #2]
 80025be:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	785b      	ldrb	r3, [r3, #1]
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d004      	beq.n	80025d2 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	781b      	ldrb	r3, [r3, #0]
 80025cc:	b29a      	uxth	r2, r3
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80025d2:	78bb      	ldrb	r3, [r7, #2]
 80025d4:	2b02      	cmp	r3, #2
 80025d6:	d102      	bne.n	80025de <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	2200      	movs	r2, #0
 80025dc:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80025e4:	2b01      	cmp	r3, #1
 80025e6:	d101      	bne.n	80025ec <HAL_PCD_EP_Open+0xa6>
 80025e8:	2302      	movs	r3, #2
 80025ea:	e00e      	b.n	800260a <HAL_PCD_EP_Open+0xc4>
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	2201      	movs	r2, #1
 80025f0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	68f9      	ldr	r1, [r7, #12]
 80025fa:	4618      	mov	r0, r3
 80025fc:	f002 f8c8 	bl	8004790 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	2200      	movs	r2, #0
 8002604:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8002608:	7afb      	ldrb	r3, [r7, #11]
}
 800260a:	4618      	mov	r0, r3
 800260c:	3710      	adds	r7, #16
 800260e:	46bd      	mov	sp, r7
 8002610:	bd80      	pop	{r7, pc}

08002612 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002612:	b580      	push	{r7, lr}
 8002614:	b084      	sub	sp, #16
 8002616:	af00      	add	r7, sp, #0
 8002618:	6078      	str	r0, [r7, #4]
 800261a:	460b      	mov	r3, r1
 800261c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800261e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002622:	2b00      	cmp	r3, #0
 8002624:	da0e      	bge.n	8002644 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002626:	78fb      	ldrb	r3, [r7, #3]
 8002628:	f003 0307 	and.w	r3, r3, #7
 800262c:	1c5a      	adds	r2, r3, #1
 800262e:	4613      	mov	r3, r2
 8002630:	009b      	lsls	r3, r3, #2
 8002632:	4413      	add	r3, r2
 8002634:	00db      	lsls	r3, r3, #3
 8002636:	687a      	ldr	r2, [r7, #4]
 8002638:	4413      	add	r3, r2
 800263a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	2201      	movs	r2, #1
 8002640:	705a      	strb	r2, [r3, #1]
 8002642:	e00e      	b.n	8002662 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002644:	78fb      	ldrb	r3, [r7, #3]
 8002646:	f003 0207 	and.w	r2, r3, #7
 800264a:	4613      	mov	r3, r2
 800264c:	009b      	lsls	r3, r3, #2
 800264e:	4413      	add	r3, r2
 8002650:	00db      	lsls	r3, r3, #3
 8002652:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002656:	687a      	ldr	r2, [r7, #4]
 8002658:	4413      	add	r3, r2
 800265a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	2200      	movs	r2, #0
 8002660:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002662:	78fb      	ldrb	r3, [r7, #3]
 8002664:	f003 0307 	and.w	r3, r3, #7
 8002668:	b2da      	uxtb	r2, r3
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002674:	2b01      	cmp	r3, #1
 8002676:	d101      	bne.n	800267c <HAL_PCD_EP_Close+0x6a>
 8002678:	2302      	movs	r3, #2
 800267a:	e00e      	b.n	800269a <HAL_PCD_EP_Close+0x88>
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	2201      	movs	r2, #1
 8002680:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	68f9      	ldr	r1, [r7, #12]
 800268a:	4618      	mov	r0, r3
 800268c:	f002 fbea 	bl	8004e64 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	2200      	movs	r2, #0
 8002694:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8002698:	2300      	movs	r3, #0
}
 800269a:	4618      	mov	r0, r3
 800269c:	3710      	adds	r7, #16
 800269e:	46bd      	mov	sp, r7
 80026a0:	bd80      	pop	{r7, pc}

080026a2 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80026a2:	b580      	push	{r7, lr}
 80026a4:	b086      	sub	sp, #24
 80026a6:	af00      	add	r7, sp, #0
 80026a8:	60f8      	str	r0, [r7, #12]
 80026aa:	607a      	str	r2, [r7, #4]
 80026ac:	603b      	str	r3, [r7, #0]
 80026ae:	460b      	mov	r3, r1
 80026b0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80026b2:	7afb      	ldrb	r3, [r7, #11]
 80026b4:	f003 0207 	and.w	r2, r3, #7
 80026b8:	4613      	mov	r3, r2
 80026ba:	009b      	lsls	r3, r3, #2
 80026bc:	4413      	add	r3, r2
 80026be:	00db      	lsls	r3, r3, #3
 80026c0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80026c4:	68fa      	ldr	r2, [r7, #12]
 80026c6:	4413      	add	r3, r2
 80026c8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80026ca:	697b      	ldr	r3, [r7, #20]
 80026cc:	687a      	ldr	r2, [r7, #4]
 80026ce:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80026d0:	697b      	ldr	r3, [r7, #20]
 80026d2:	683a      	ldr	r2, [r7, #0]
 80026d4:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80026d6:	697b      	ldr	r3, [r7, #20]
 80026d8:	2200      	movs	r2, #0
 80026da:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80026dc:	697b      	ldr	r3, [r7, #20]
 80026de:	2200      	movs	r2, #0
 80026e0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80026e2:	7afb      	ldrb	r3, [r7, #11]
 80026e4:	f003 0307 	and.w	r3, r3, #7
 80026e8:	b2da      	uxtb	r2, r3
 80026ea:	697b      	ldr	r3, [r7, #20]
 80026ec:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80026ee:	7afb      	ldrb	r3, [r7, #11]
 80026f0:	f003 0307 	and.w	r3, r3, #7
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d106      	bne.n	8002706 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	6979      	ldr	r1, [r7, #20]
 80026fe:	4618      	mov	r0, r3
 8002700:	f002 fd9c 	bl	800523c <USB_EPStartXfer>
 8002704:	e005      	b.n	8002712 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	6979      	ldr	r1, [r7, #20]
 800270c:	4618      	mov	r0, r3
 800270e:	f002 fd95 	bl	800523c <USB_EPStartXfer>
  }

  return HAL_OK;
 8002712:	2300      	movs	r3, #0
}
 8002714:	4618      	mov	r0, r3
 8002716:	3718      	adds	r7, #24
 8002718:	46bd      	mov	sp, r7
 800271a:	bd80      	pop	{r7, pc}

0800271c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800271c:	b480      	push	{r7}
 800271e:	b083      	sub	sp, #12
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
 8002724:	460b      	mov	r3, r1
 8002726:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002728:	78fb      	ldrb	r3, [r7, #3]
 800272a:	f003 0207 	and.w	r2, r3, #7
 800272e:	6879      	ldr	r1, [r7, #4]
 8002730:	4613      	mov	r3, r2
 8002732:	009b      	lsls	r3, r3, #2
 8002734:	4413      	add	r3, r2
 8002736:	00db      	lsls	r3, r3, #3
 8002738:	440b      	add	r3, r1
 800273a:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 800273e:	681b      	ldr	r3, [r3, #0]
}
 8002740:	4618      	mov	r0, r3
 8002742:	370c      	adds	r7, #12
 8002744:	46bd      	mov	sp, r7
 8002746:	bc80      	pop	{r7}
 8002748:	4770      	bx	lr

0800274a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800274a:	b580      	push	{r7, lr}
 800274c:	b086      	sub	sp, #24
 800274e:	af00      	add	r7, sp, #0
 8002750:	60f8      	str	r0, [r7, #12]
 8002752:	607a      	str	r2, [r7, #4]
 8002754:	603b      	str	r3, [r7, #0]
 8002756:	460b      	mov	r3, r1
 8002758:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800275a:	7afb      	ldrb	r3, [r7, #11]
 800275c:	f003 0307 	and.w	r3, r3, #7
 8002760:	1c5a      	adds	r2, r3, #1
 8002762:	4613      	mov	r3, r2
 8002764:	009b      	lsls	r3, r3, #2
 8002766:	4413      	add	r3, r2
 8002768:	00db      	lsls	r3, r3, #3
 800276a:	68fa      	ldr	r2, [r7, #12]
 800276c:	4413      	add	r3, r2
 800276e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002770:	697b      	ldr	r3, [r7, #20]
 8002772:	687a      	ldr	r2, [r7, #4]
 8002774:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002776:	697b      	ldr	r3, [r7, #20]
 8002778:	683a      	ldr	r2, [r7, #0]
 800277a:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 800277c:	697b      	ldr	r3, [r7, #20]
 800277e:	2201      	movs	r2, #1
 8002780:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8002784:	697b      	ldr	r3, [r7, #20]
 8002786:	683a      	ldr	r2, [r7, #0]
 8002788:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 800278a:	697b      	ldr	r3, [r7, #20]
 800278c:	2200      	movs	r2, #0
 800278e:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8002790:	697b      	ldr	r3, [r7, #20]
 8002792:	2201      	movs	r2, #1
 8002794:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002796:	7afb      	ldrb	r3, [r7, #11]
 8002798:	f003 0307 	and.w	r3, r3, #7
 800279c:	b2da      	uxtb	r2, r3
 800279e:	697b      	ldr	r3, [r7, #20]
 80027a0:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80027a2:	7afb      	ldrb	r3, [r7, #11]
 80027a4:	f003 0307 	and.w	r3, r3, #7
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d106      	bne.n	80027ba <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	6979      	ldr	r1, [r7, #20]
 80027b2:	4618      	mov	r0, r3
 80027b4:	f002 fd42 	bl	800523c <USB_EPStartXfer>
 80027b8:	e005      	b.n	80027c6 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	6979      	ldr	r1, [r7, #20]
 80027c0:	4618      	mov	r0, r3
 80027c2:	f002 fd3b 	bl	800523c <USB_EPStartXfer>
  }

  return HAL_OK;
 80027c6:	2300      	movs	r3, #0
}
 80027c8:	4618      	mov	r0, r3
 80027ca:	3718      	adds	r7, #24
 80027cc:	46bd      	mov	sp, r7
 80027ce:	bd80      	pop	{r7, pc}

080027d0 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b084      	sub	sp, #16
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
 80027d8:	460b      	mov	r3, r1
 80027da:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80027dc:	78fb      	ldrb	r3, [r7, #3]
 80027de:	f003 0207 	and.w	r2, r3, #7
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	685b      	ldr	r3, [r3, #4]
 80027e6:	429a      	cmp	r2, r3
 80027e8:	d901      	bls.n	80027ee <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80027ea:	2301      	movs	r3, #1
 80027ec:	e04c      	b.n	8002888 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80027ee:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	da0e      	bge.n	8002814 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80027f6:	78fb      	ldrb	r3, [r7, #3]
 80027f8:	f003 0307 	and.w	r3, r3, #7
 80027fc:	1c5a      	adds	r2, r3, #1
 80027fe:	4613      	mov	r3, r2
 8002800:	009b      	lsls	r3, r3, #2
 8002802:	4413      	add	r3, r2
 8002804:	00db      	lsls	r3, r3, #3
 8002806:	687a      	ldr	r2, [r7, #4]
 8002808:	4413      	add	r3, r2
 800280a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	2201      	movs	r2, #1
 8002810:	705a      	strb	r2, [r3, #1]
 8002812:	e00c      	b.n	800282e <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002814:	78fa      	ldrb	r2, [r7, #3]
 8002816:	4613      	mov	r3, r2
 8002818:	009b      	lsls	r3, r3, #2
 800281a:	4413      	add	r3, r2
 800281c:	00db      	lsls	r3, r3, #3
 800281e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002822:	687a      	ldr	r2, [r7, #4]
 8002824:	4413      	add	r3, r2
 8002826:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	2200      	movs	r2, #0
 800282c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	2201      	movs	r2, #1
 8002832:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002834:	78fb      	ldrb	r3, [r7, #3]
 8002836:	f003 0307 	and.w	r3, r3, #7
 800283a:	b2da      	uxtb	r2, r3
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002846:	2b01      	cmp	r3, #1
 8002848:	d101      	bne.n	800284e <HAL_PCD_EP_SetStall+0x7e>
 800284a:	2302      	movs	r3, #2
 800284c:	e01c      	b.n	8002888 <HAL_PCD_EP_SetStall+0xb8>
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	2201      	movs	r2, #1
 8002852:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	68f9      	ldr	r1, [r7, #12]
 800285c:	4618      	mov	r0, r3
 800285e:	f003 fe0d 	bl	800647c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002862:	78fb      	ldrb	r3, [r7, #3]
 8002864:	f003 0307 	and.w	r3, r3, #7
 8002868:	2b00      	cmp	r3, #0
 800286a:	d108      	bne.n	800287e <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681a      	ldr	r2, [r3, #0]
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8002876:	4619      	mov	r1, r3
 8002878:	4610      	mov	r0, r2
 800287a:	f003 ff32 	bl	80066e2 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	2200      	movs	r2, #0
 8002882:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002886:	2300      	movs	r3, #0
}
 8002888:	4618      	mov	r0, r3
 800288a:	3710      	adds	r7, #16
 800288c:	46bd      	mov	sp, r7
 800288e:	bd80      	pop	{r7, pc}

08002890 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	b084      	sub	sp, #16
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
 8002898:	460b      	mov	r3, r1
 800289a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800289c:	78fb      	ldrb	r3, [r7, #3]
 800289e:	f003 020f 	and.w	r2, r3, #15
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	685b      	ldr	r3, [r3, #4]
 80028a6:	429a      	cmp	r2, r3
 80028a8:	d901      	bls.n	80028ae <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80028aa:	2301      	movs	r3, #1
 80028ac:	e040      	b.n	8002930 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80028ae:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	da0e      	bge.n	80028d4 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80028b6:	78fb      	ldrb	r3, [r7, #3]
 80028b8:	f003 0307 	and.w	r3, r3, #7
 80028bc:	1c5a      	adds	r2, r3, #1
 80028be:	4613      	mov	r3, r2
 80028c0:	009b      	lsls	r3, r3, #2
 80028c2:	4413      	add	r3, r2
 80028c4:	00db      	lsls	r3, r3, #3
 80028c6:	687a      	ldr	r2, [r7, #4]
 80028c8:	4413      	add	r3, r2
 80028ca:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	2201      	movs	r2, #1
 80028d0:	705a      	strb	r2, [r3, #1]
 80028d2:	e00e      	b.n	80028f2 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80028d4:	78fb      	ldrb	r3, [r7, #3]
 80028d6:	f003 0207 	and.w	r2, r3, #7
 80028da:	4613      	mov	r3, r2
 80028dc:	009b      	lsls	r3, r3, #2
 80028de:	4413      	add	r3, r2
 80028e0:	00db      	lsls	r3, r3, #3
 80028e2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80028e6:	687a      	ldr	r2, [r7, #4]
 80028e8:	4413      	add	r3, r2
 80028ea:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	2200      	movs	r2, #0
 80028f0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	2200      	movs	r2, #0
 80028f6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80028f8:	78fb      	ldrb	r3, [r7, #3]
 80028fa:	f003 0307 	and.w	r3, r3, #7
 80028fe:	b2da      	uxtb	r2, r3
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800290a:	2b01      	cmp	r3, #1
 800290c:	d101      	bne.n	8002912 <HAL_PCD_EP_ClrStall+0x82>
 800290e:	2302      	movs	r3, #2
 8002910:	e00e      	b.n	8002930 <HAL_PCD_EP_ClrStall+0xa0>
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	2201      	movs	r2, #1
 8002916:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	68f9      	ldr	r1, [r7, #12]
 8002920:	4618      	mov	r0, r3
 8002922:	f003 fdfb 	bl	800651c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	2200      	movs	r2, #0
 800292a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800292e:	2300      	movs	r3, #0
}
 8002930:	4618      	mov	r0, r3
 8002932:	3710      	adds	r7, #16
 8002934:	46bd      	mov	sp, r7
 8002936:	bd80      	pop	{r7, pc}

08002938 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	b08e      	sub	sp, #56	; 0x38
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002940:	e2df      	b.n	8002f02 <PCD_EP_ISR_Handler+0x5ca>
  {
    wIstr = hpcd->Instance->ISTR;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800294a:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800294c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800294e:	b2db      	uxtb	r3, r3
 8002950:	f003 030f 	and.w	r3, r3, #15
 8002954:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8002958:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800295c:	2b00      	cmp	r3, #0
 800295e:	f040 8158 	bne.w	8002c12 <PCD_EP_ISR_Handler+0x2da>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8002962:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002964:	f003 0310 	and.w	r3, r3, #16
 8002968:	2b00      	cmp	r3, #0
 800296a:	d152      	bne.n	8002a12 <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	881b      	ldrh	r3, [r3, #0]
 8002972:	b29b      	uxth	r3, r3
 8002974:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002978:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800297c:	81fb      	strh	r3, [r7, #14]
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681a      	ldr	r2, [r3, #0]
 8002982:	89fb      	ldrh	r3, [r7, #14]
 8002984:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002988:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800298c:	b29b      	uxth	r3, r3
 800298e:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	3328      	adds	r3, #40	; 0x28
 8002994:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800299e:	b29b      	uxth	r3, r3
 80029a0:	461a      	mov	r2, r3
 80029a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029a4:	781b      	ldrb	r3, [r3, #0]
 80029a6:	00db      	lsls	r3, r3, #3
 80029a8:	4413      	add	r3, r2
 80029aa:	3302      	adds	r3, #2
 80029ac:	005b      	lsls	r3, r3, #1
 80029ae:	687a      	ldr	r2, [r7, #4]
 80029b0:	6812      	ldr	r2, [r2, #0]
 80029b2:	4413      	add	r3, r2
 80029b4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80029b8:	881b      	ldrh	r3, [r3, #0]
 80029ba:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80029be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029c0:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80029c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029c4:	695a      	ldr	r2, [r3, #20]
 80029c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029c8:	69db      	ldr	r3, [r3, #28]
 80029ca:	441a      	add	r2, r3
 80029cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ce:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80029d0:	2100      	movs	r1, #0
 80029d2:	6878      	ldr	r0, [r7, #4]
 80029d4:	f005 fcd3 	bl	800837e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80029de:	b2db      	uxtb	r3, r3
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	f000 828e 	beq.w	8002f02 <PCD_EP_ISR_Handler+0x5ca>
 80029e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029e8:	699b      	ldr	r3, [r3, #24]
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	f040 8289 	bne.w	8002f02 <PCD_EP_ISR_Handler+0x5ca>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80029f6:	b2db      	uxtb	r3, r3
 80029f8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80029fc:	b2da      	uxtb	r2, r3
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	b292      	uxth	r2, r2
 8002a04:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002a10:	e277      	b.n	8002f02 <PCD_EP_ISR_Handler+0x5ca>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002a18:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	881b      	ldrh	r3, [r3, #0]
 8002a20:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8002a22:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002a24:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d034      	beq.n	8002a96 <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002a34:	b29b      	uxth	r3, r3
 8002a36:	461a      	mov	r2, r3
 8002a38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a3a:	781b      	ldrb	r3, [r3, #0]
 8002a3c:	00db      	lsls	r3, r3, #3
 8002a3e:	4413      	add	r3, r2
 8002a40:	3306      	adds	r3, #6
 8002a42:	005b      	lsls	r3, r3, #1
 8002a44:	687a      	ldr	r2, [r7, #4]
 8002a46:	6812      	ldr	r2, [r2, #0]
 8002a48:	4413      	add	r3, r2
 8002a4a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002a4e:	881b      	ldrh	r3, [r3, #0]
 8002a50:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002a54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a56:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	6818      	ldr	r0, [r3, #0]
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8002a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a64:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8002a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a68:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002a6a:	b29b      	uxth	r3, r3
 8002a6c:	f003 fe88 	bl	8006780 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	881b      	ldrh	r3, [r3, #0]
 8002a76:	b29a      	uxth	r2, r3
 8002a78:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002a7c:	4013      	ands	r3, r2
 8002a7e:	823b      	strh	r3, [r7, #16]
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	8a3a      	ldrh	r2, [r7, #16]
 8002a86:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002a8a:	b292      	uxth	r2, r2
 8002a8c:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8002a8e:	6878      	ldr	r0, [r7, #4]
 8002a90:	f005 fc48 	bl	8008324 <HAL_PCD_SetupStageCallback>
 8002a94:	e235      	b.n	8002f02 <PCD_EP_ISR_Handler+0x5ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002a96:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	f280 8231 	bge.w	8002f02 <PCD_EP_ISR_Handler+0x5ca>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	881b      	ldrh	r3, [r3, #0]
 8002aa6:	b29a      	uxth	r2, r3
 8002aa8:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002aac:	4013      	ands	r3, r2
 8002aae:	83bb      	strh	r3, [r7, #28]
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	8bba      	ldrh	r2, [r7, #28]
 8002ab6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002aba:	b292      	uxth	r2, r2
 8002abc:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002ac6:	b29b      	uxth	r3, r3
 8002ac8:	461a      	mov	r2, r3
 8002aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002acc:	781b      	ldrb	r3, [r3, #0]
 8002ace:	00db      	lsls	r3, r3, #3
 8002ad0:	4413      	add	r3, r2
 8002ad2:	3306      	adds	r3, #6
 8002ad4:	005b      	lsls	r3, r3, #1
 8002ad6:	687a      	ldr	r2, [r7, #4]
 8002ad8:	6812      	ldr	r2, [r2, #0]
 8002ada:	4413      	add	r3, r2
 8002adc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002ae0:	881b      	ldrh	r3, [r3, #0]
 8002ae2:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ae8:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8002aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aec:	69db      	ldr	r3, [r3, #28]
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d019      	beq.n	8002b26 <PCD_EP_ISR_Handler+0x1ee>
 8002af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002af4:	695b      	ldr	r3, [r3, #20]
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d015      	beq.n	8002b26 <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6818      	ldr	r0, [r3, #0]
 8002afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b00:	6959      	ldr	r1, [r3, #20]
 8002b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b04:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8002b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b08:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002b0a:	b29b      	uxth	r3, r3
 8002b0c:	f003 fe38 	bl	8006780 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8002b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b12:	695a      	ldr	r2, [r3, #20]
 8002b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b16:	69db      	ldr	r3, [r3, #28]
 8002b18:	441a      	add	r2, r3
 8002b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b1c:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8002b1e:	2100      	movs	r1, #0
 8002b20:	6878      	ldr	r0, [r7, #4]
 8002b22:	f005 fc11 	bl	8008348 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	61bb      	str	r3, [r7, #24]
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002b34:	b29b      	uxth	r3, r3
 8002b36:	461a      	mov	r2, r3
 8002b38:	69bb      	ldr	r3, [r7, #24]
 8002b3a:	4413      	add	r3, r2
 8002b3c:	61bb      	str	r3, [r7, #24]
 8002b3e:	69bb      	ldr	r3, [r7, #24]
 8002b40:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002b44:	617b      	str	r3, [r7, #20]
 8002b46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b48:	691b      	ldr	r3, [r3, #16]
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d112      	bne.n	8002b74 <PCD_EP_ISR_Handler+0x23c>
 8002b4e:	697b      	ldr	r3, [r7, #20]
 8002b50:	881b      	ldrh	r3, [r3, #0]
 8002b52:	b29b      	uxth	r3, r3
 8002b54:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002b58:	b29a      	uxth	r2, r3
 8002b5a:	697b      	ldr	r3, [r7, #20]
 8002b5c:	801a      	strh	r2, [r3, #0]
 8002b5e:	697b      	ldr	r3, [r7, #20]
 8002b60:	881b      	ldrh	r3, [r3, #0]
 8002b62:	b29b      	uxth	r3, r3
 8002b64:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002b68:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002b6c:	b29a      	uxth	r2, r3
 8002b6e:	697b      	ldr	r3, [r7, #20]
 8002b70:	801a      	strh	r2, [r3, #0]
 8002b72:	e02f      	b.n	8002bd4 <PCD_EP_ISR_Handler+0x29c>
 8002b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b76:	691b      	ldr	r3, [r3, #16]
 8002b78:	2b3e      	cmp	r3, #62	; 0x3e
 8002b7a:	d813      	bhi.n	8002ba4 <PCD_EP_ISR_Handler+0x26c>
 8002b7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b7e:	691b      	ldr	r3, [r3, #16]
 8002b80:	085b      	lsrs	r3, r3, #1
 8002b82:	633b      	str	r3, [r7, #48]	; 0x30
 8002b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b86:	691b      	ldr	r3, [r3, #16]
 8002b88:	f003 0301 	and.w	r3, r3, #1
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d002      	beq.n	8002b96 <PCD_EP_ISR_Handler+0x25e>
 8002b90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b92:	3301      	adds	r3, #1
 8002b94:	633b      	str	r3, [r7, #48]	; 0x30
 8002b96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b98:	b29b      	uxth	r3, r3
 8002b9a:	029b      	lsls	r3, r3, #10
 8002b9c:	b29a      	uxth	r2, r3
 8002b9e:	697b      	ldr	r3, [r7, #20]
 8002ba0:	801a      	strh	r2, [r3, #0]
 8002ba2:	e017      	b.n	8002bd4 <PCD_EP_ISR_Handler+0x29c>
 8002ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ba6:	691b      	ldr	r3, [r3, #16]
 8002ba8:	095b      	lsrs	r3, r3, #5
 8002baa:	633b      	str	r3, [r7, #48]	; 0x30
 8002bac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bae:	691b      	ldr	r3, [r3, #16]
 8002bb0:	f003 031f 	and.w	r3, r3, #31
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d102      	bne.n	8002bbe <PCD_EP_ISR_Handler+0x286>
 8002bb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bba:	3b01      	subs	r3, #1
 8002bbc:	633b      	str	r3, [r7, #48]	; 0x30
 8002bbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bc0:	b29b      	uxth	r3, r3
 8002bc2:	029b      	lsls	r3, r3, #10
 8002bc4:	b29b      	uxth	r3, r3
 8002bc6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002bca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002bce:	b29a      	uxth	r2, r3
 8002bd0:	697b      	ldr	r3, [r7, #20]
 8002bd2:	801a      	strh	r2, [r3, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	881b      	ldrh	r3, [r3, #0]
 8002bda:	b29b      	uxth	r3, r3
 8002bdc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002be0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002be4:	827b      	strh	r3, [r7, #18]
 8002be6:	8a7b      	ldrh	r3, [r7, #18]
 8002be8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8002bec:	827b      	strh	r3, [r7, #18]
 8002bee:	8a7b      	ldrh	r3, [r7, #18]
 8002bf0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002bf4:	827b      	strh	r3, [r7, #18]
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681a      	ldr	r2, [r3, #0]
 8002bfa:	8a7b      	ldrh	r3, [r7, #18]
 8002bfc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002c00:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002c04:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002c08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c0c:	b29b      	uxth	r3, r3
 8002c0e:	8013      	strh	r3, [r2, #0]
 8002c10:	e177      	b.n	8002f02 <PCD_EP_ISR_Handler+0x5ca>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	461a      	mov	r2, r3
 8002c18:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002c1c:	009b      	lsls	r3, r3, #2
 8002c1e:	4413      	add	r3, r2
 8002c20:	881b      	ldrh	r3, [r3, #0]
 8002c22:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002c24:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	f280 80ea 	bge.w	8002e02 <PCD_EP_ISR_Handler+0x4ca>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	461a      	mov	r2, r3
 8002c34:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002c38:	009b      	lsls	r3, r3, #2
 8002c3a:	4413      	add	r3, r2
 8002c3c:	881b      	ldrh	r3, [r3, #0]
 8002c3e:	b29a      	uxth	r2, r3
 8002c40:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002c44:	4013      	ands	r3, r2
 8002c46:	853b      	strh	r3, [r7, #40]	; 0x28
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	461a      	mov	r2, r3
 8002c4e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002c52:	009b      	lsls	r3, r3, #2
 8002c54:	4413      	add	r3, r2
 8002c56:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8002c58:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002c5c:	b292      	uxth	r2, r2
 8002c5e:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8002c60:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8002c64:	4613      	mov	r3, r2
 8002c66:	009b      	lsls	r3, r3, #2
 8002c68:	4413      	add	r3, r2
 8002c6a:	00db      	lsls	r3, r3, #3
 8002c6c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002c70:	687a      	ldr	r2, [r7, #4]
 8002c72:	4413      	add	r3, r2
 8002c74:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8002c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c78:	7b1b      	ldrb	r3, [r3, #12]
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d122      	bne.n	8002cc4 <PCD_EP_ISR_Handler+0x38c>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002c86:	b29b      	uxth	r3, r3
 8002c88:	461a      	mov	r2, r3
 8002c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c8c:	781b      	ldrb	r3, [r3, #0]
 8002c8e:	00db      	lsls	r3, r3, #3
 8002c90:	4413      	add	r3, r2
 8002c92:	3306      	adds	r3, #6
 8002c94:	005b      	lsls	r3, r3, #1
 8002c96:	687a      	ldr	r2, [r7, #4]
 8002c98:	6812      	ldr	r2, [r2, #0]
 8002c9a:	4413      	add	r3, r2
 8002c9c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002ca0:	881b      	ldrh	r3, [r3, #0]
 8002ca2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002ca6:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 8002ca8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	f000 8087 	beq.w	8002dbe <PCD_EP_ISR_Handler+0x486>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	6818      	ldr	r0, [r3, #0]
 8002cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cb6:	6959      	ldr	r1, [r3, #20]
 8002cb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cba:	88da      	ldrh	r2, [r3, #6]
 8002cbc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002cbe:	f003 fd5f 	bl	8006780 <USB_ReadPMA>
 8002cc2:	e07c      	b.n	8002dbe <PCD_EP_ISR_Handler+0x486>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8002cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cc6:	78db      	ldrb	r3, [r3, #3]
 8002cc8:	2b02      	cmp	r3, #2
 8002cca:	d108      	bne.n	8002cde <PCD_EP_ISR_Handler+0x3a6>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8002ccc:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002cce:	461a      	mov	r2, r3
 8002cd0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002cd2:	6878      	ldr	r0, [r7, #4]
 8002cd4:	f000 f923 	bl	8002f1e <HAL_PCD_EP_DB_Receive>
 8002cd8:	4603      	mov	r3, r0
 8002cda:	86fb      	strh	r3, [r7, #54]	; 0x36
 8002cdc:	e06f      	b.n	8002dbe <PCD_EP_ISR_Handler+0x486>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	461a      	mov	r2, r3
 8002ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ce6:	781b      	ldrb	r3, [r3, #0]
 8002ce8:	009b      	lsls	r3, r3, #2
 8002cea:	4413      	add	r3, r2
 8002cec:	881b      	ldrh	r3, [r3, #0]
 8002cee:	b29b      	uxth	r3, r3
 8002cf0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002cf4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002cf8:	847b      	strh	r3, [r7, #34]	; 0x22
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	461a      	mov	r2, r3
 8002d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d02:	781b      	ldrb	r3, [r3, #0]
 8002d04:	009b      	lsls	r3, r3, #2
 8002d06:	441a      	add	r2, r3
 8002d08:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002d0a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002d0e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002d12:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002d16:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002d1a:	b29b      	uxth	r3, r3
 8002d1c:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	461a      	mov	r2, r3
 8002d24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d26:	781b      	ldrb	r3, [r3, #0]
 8002d28:	009b      	lsls	r3, r3, #2
 8002d2a:	4413      	add	r3, r2
 8002d2c:	881b      	ldrh	r3, [r3, #0]
 8002d2e:	b29b      	uxth	r3, r3
 8002d30:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d021      	beq.n	8002d7c <PCD_EP_ISR_Handler+0x444>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002d40:	b29b      	uxth	r3, r3
 8002d42:	461a      	mov	r2, r3
 8002d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d46:	781b      	ldrb	r3, [r3, #0]
 8002d48:	00db      	lsls	r3, r3, #3
 8002d4a:	4413      	add	r3, r2
 8002d4c:	3302      	adds	r3, #2
 8002d4e:	005b      	lsls	r3, r3, #1
 8002d50:	687a      	ldr	r2, [r7, #4]
 8002d52:	6812      	ldr	r2, [r2, #0]
 8002d54:	4413      	add	r3, r2
 8002d56:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002d5a:	881b      	ldrh	r3, [r3, #0]
 8002d5c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002d60:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8002d62:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d02a      	beq.n	8002dbe <PCD_EP_ISR_Handler+0x486>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	6818      	ldr	r0, [r3, #0]
 8002d6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d6e:	6959      	ldr	r1, [r3, #20]
 8002d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d72:	891a      	ldrh	r2, [r3, #8]
 8002d74:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002d76:	f003 fd03 	bl	8006780 <USB_ReadPMA>
 8002d7a:	e020      	b.n	8002dbe <PCD_EP_ISR_Handler+0x486>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002d84:	b29b      	uxth	r3, r3
 8002d86:	461a      	mov	r2, r3
 8002d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d8a:	781b      	ldrb	r3, [r3, #0]
 8002d8c:	00db      	lsls	r3, r3, #3
 8002d8e:	4413      	add	r3, r2
 8002d90:	3306      	adds	r3, #6
 8002d92:	005b      	lsls	r3, r3, #1
 8002d94:	687a      	ldr	r2, [r7, #4]
 8002d96:	6812      	ldr	r2, [r2, #0]
 8002d98:	4413      	add	r3, r2
 8002d9a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002d9e:	881b      	ldrh	r3, [r3, #0]
 8002da0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002da4:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8002da6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d008      	beq.n	8002dbe <PCD_EP_ISR_Handler+0x486>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	6818      	ldr	r0, [r3, #0]
 8002db0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002db2:	6959      	ldr	r1, [r3, #20]
 8002db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002db6:	895a      	ldrh	r2, [r3, #10]
 8002db8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002dba:	f003 fce1 	bl	8006780 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8002dbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dc0:	69da      	ldr	r2, [r3, #28]
 8002dc2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002dc4:	441a      	add	r2, r3
 8002dc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dc8:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8002dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dcc:	695a      	ldr	r2, [r3, #20]
 8002dce:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002dd0:	441a      	add	r2, r3
 8002dd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dd4:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8002dd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dd8:	699b      	ldr	r3, [r3, #24]
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d004      	beq.n	8002de8 <PCD_EP_ISR_Handler+0x4b0>
 8002dde:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8002de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002de2:	691b      	ldr	r3, [r3, #16]
 8002de4:	429a      	cmp	r2, r3
 8002de6:	d206      	bcs.n	8002df6 <PCD_EP_ISR_Handler+0x4be>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8002de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dea:	781b      	ldrb	r3, [r3, #0]
 8002dec:	4619      	mov	r1, r3
 8002dee:	6878      	ldr	r0, [r7, #4]
 8002df0:	f005 faaa 	bl	8008348 <HAL_PCD_DataOutStageCallback>
 8002df4:	e005      	b.n	8002e02 <PCD_EP_ISR_Handler+0x4ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	f002 fa1d 	bl	800523c <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8002e02:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002e04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d07a      	beq.n	8002f02 <PCD_EP_ISR_Handler+0x5ca>
      {
        ep = &hpcd->IN_ep[epindex];
 8002e0c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002e10:	1c5a      	adds	r2, r3, #1
 8002e12:	4613      	mov	r3, r2
 8002e14:	009b      	lsls	r3, r3, #2
 8002e16:	4413      	add	r3, r2
 8002e18:	00db      	lsls	r3, r3, #3
 8002e1a:	687a      	ldr	r2, [r7, #4]
 8002e1c:	4413      	add	r3, r2
 8002e1e:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	461a      	mov	r2, r3
 8002e26:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002e2a:	009b      	lsls	r3, r3, #2
 8002e2c:	4413      	add	r3, r2
 8002e2e:	881b      	ldrh	r3, [r3, #0]
 8002e30:	b29b      	uxth	r3, r3
 8002e32:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002e36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e3a:	843b      	strh	r3, [r7, #32]
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	461a      	mov	r2, r3
 8002e42:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002e46:	009b      	lsls	r3, r3, #2
 8002e48:	441a      	add	r2, r3
 8002e4a:	8c3b      	ldrh	r3, [r7, #32]
 8002e4c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002e50:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002e54:	b29b      	uxth	r3, r3
 8002e56:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk transaction or Bulk Single Buffer Transaction */
        if ((ep->type != EP_TYPE_BULK) ||
 8002e58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e5a:	78db      	ldrb	r3, [r3, #3]
 8002e5c:	2b02      	cmp	r3, #2
 8002e5e:	d108      	bne.n	8002e72 <PCD_EP_ISR_Handler+0x53a>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8002e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e62:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type != EP_TYPE_BULK) ||
 8002e64:	2b02      	cmp	r3, #2
 8002e66:	d146      	bne.n	8002ef6 <PCD_EP_ISR_Handler+0x5be>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8002e68:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002e6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d141      	bne.n	8002ef6 <PCD_EP_ISR_Handler+0x5be>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002e7a:	b29b      	uxth	r3, r3
 8002e7c:	461a      	mov	r2, r3
 8002e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e80:	781b      	ldrb	r3, [r3, #0]
 8002e82:	00db      	lsls	r3, r3, #3
 8002e84:	4413      	add	r3, r2
 8002e86:	3302      	adds	r3, #2
 8002e88:	005b      	lsls	r3, r3, #1
 8002e8a:	687a      	ldr	r2, [r7, #4]
 8002e8c:	6812      	ldr	r2, [r2, #0]
 8002e8e:	4413      	add	r3, r2
 8002e90:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002e94:	881b      	ldrh	r3, [r3, #0]
 8002e96:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002e9a:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 8002e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e9e:	699a      	ldr	r2, [r3, #24]
 8002ea0:	8bfb      	ldrh	r3, [r7, #30]
 8002ea2:	429a      	cmp	r2, r3
 8002ea4:	d906      	bls.n	8002eb4 <PCD_EP_ISR_Handler+0x57c>
          {
            ep->xfer_len -= TxByteNbre;
 8002ea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ea8:	699a      	ldr	r2, [r3, #24]
 8002eaa:	8bfb      	ldrh	r3, [r7, #30]
 8002eac:	1ad2      	subs	r2, r2, r3
 8002eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eb0:	619a      	str	r2, [r3, #24]
 8002eb2:	e002      	b.n	8002eba <PCD_EP_ISR_Handler+0x582>
          }
          else
          {
            ep->xfer_len = 0U;
 8002eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8002eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ebc:	699b      	ldr	r3, [r3, #24]
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d106      	bne.n	8002ed0 <PCD_EP_ISR_Handler+0x598>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002ec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ec4:	781b      	ldrb	r3, [r3, #0]
 8002ec6:	4619      	mov	r1, r3
 8002ec8:	6878      	ldr	r0, [r7, #4]
 8002eca:	f005 fa58 	bl	800837e <HAL_PCD_DataInStageCallback>
 8002ece:	e018      	b.n	8002f02 <PCD_EP_ISR_Handler+0x5ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 8002ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ed2:	695a      	ldr	r2, [r3, #20]
 8002ed4:	8bfb      	ldrh	r3, [r7, #30]
 8002ed6:	441a      	add	r2, r3
 8002ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eda:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 8002edc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ede:	69da      	ldr	r2, [r3, #28]
 8002ee0:	8bfb      	ldrh	r3, [r7, #30]
 8002ee2:	441a      	add	r2, r3
 8002ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ee6:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002eee:	4618      	mov	r0, r3
 8002ef0:	f002 f9a4 	bl	800523c <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8002ef4:	e005      	b.n	8002f02 <PCD_EP_ISR_Handler+0x5ca>
          }
        }
        /* bulk in double buffer enable in case of transferLen> Ep_Mps */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8002ef6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002ef8:	461a      	mov	r2, r3
 8002efa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002efc:	6878      	ldr	r0, [r7, #4]
 8002efe:	f000 f91b 	bl	8003138 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002f0a:	b29b      	uxth	r3, r3
 8002f0c:	b21b      	sxth	r3, r3
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	f6ff ad17 	blt.w	8002942 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8002f14:	2300      	movs	r3, #0
}
 8002f16:	4618      	mov	r0, r3
 8002f18:	3738      	adds	r7, #56	; 0x38
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	bd80      	pop	{r7, pc}

08002f1e <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002f1e:	b580      	push	{r7, lr}
 8002f20:	b088      	sub	sp, #32
 8002f22:	af00      	add	r7, sp, #0
 8002f24:	60f8      	str	r0, [r7, #12]
 8002f26:	60b9      	str	r1, [r7, #8]
 8002f28:	4613      	mov	r3, r2
 8002f2a:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002f2c:	88fb      	ldrh	r3, [r7, #6]
 8002f2e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d07e      	beq.n	8003034 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002f3e:	b29b      	uxth	r3, r3
 8002f40:	461a      	mov	r2, r3
 8002f42:	68bb      	ldr	r3, [r7, #8]
 8002f44:	781b      	ldrb	r3, [r3, #0]
 8002f46:	00db      	lsls	r3, r3, #3
 8002f48:	4413      	add	r3, r2
 8002f4a:	3302      	adds	r3, #2
 8002f4c:	005b      	lsls	r3, r3, #1
 8002f4e:	68fa      	ldr	r2, [r7, #12]
 8002f50:	6812      	ldr	r2, [r2, #0]
 8002f52:	4413      	add	r3, r2
 8002f54:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002f58:	881b      	ldrh	r3, [r3, #0]
 8002f5a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002f5e:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002f60:	68bb      	ldr	r3, [r7, #8]
 8002f62:	699a      	ldr	r2, [r3, #24]
 8002f64:	8b7b      	ldrh	r3, [r7, #26]
 8002f66:	429a      	cmp	r2, r3
 8002f68:	d306      	bcc.n	8002f78 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8002f6a:	68bb      	ldr	r3, [r7, #8]
 8002f6c:	699a      	ldr	r2, [r3, #24]
 8002f6e:	8b7b      	ldrh	r3, [r7, #26]
 8002f70:	1ad2      	subs	r2, r2, r3
 8002f72:	68bb      	ldr	r3, [r7, #8]
 8002f74:	619a      	str	r2, [r3, #24]
 8002f76:	e002      	b.n	8002f7e <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8002f78:	68bb      	ldr	r3, [r7, #8]
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002f7e:	68bb      	ldr	r3, [r7, #8]
 8002f80:	699b      	ldr	r3, [r3, #24]
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d123      	bne.n	8002fce <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	461a      	mov	r2, r3
 8002f8c:	68bb      	ldr	r3, [r7, #8]
 8002f8e:	781b      	ldrb	r3, [r3, #0]
 8002f90:	009b      	lsls	r3, r3, #2
 8002f92:	4413      	add	r3, r2
 8002f94:	881b      	ldrh	r3, [r3, #0]
 8002f96:	b29b      	uxth	r3, r3
 8002f98:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002f9c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002fa0:	833b      	strh	r3, [r7, #24]
 8002fa2:	8b3b      	ldrh	r3, [r7, #24]
 8002fa4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002fa8:	833b      	strh	r3, [r7, #24]
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	461a      	mov	r2, r3
 8002fb0:	68bb      	ldr	r3, [r7, #8]
 8002fb2:	781b      	ldrb	r3, [r3, #0]
 8002fb4:	009b      	lsls	r3, r3, #2
 8002fb6:	441a      	add	r2, r3
 8002fb8:	8b3b      	ldrh	r3, [r7, #24]
 8002fba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002fbe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002fc2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002fc6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002fca:	b29b      	uxth	r3, r3
 8002fcc:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002fce:	88fb      	ldrh	r3, [r7, #6]
 8002fd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d01f      	beq.n	8003018 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	461a      	mov	r2, r3
 8002fde:	68bb      	ldr	r3, [r7, #8]
 8002fe0:	781b      	ldrb	r3, [r3, #0]
 8002fe2:	009b      	lsls	r3, r3, #2
 8002fe4:	4413      	add	r3, r2
 8002fe6:	881b      	ldrh	r3, [r3, #0]
 8002fe8:	b29b      	uxth	r3, r3
 8002fea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002fee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ff2:	82fb      	strh	r3, [r7, #22]
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	461a      	mov	r2, r3
 8002ffa:	68bb      	ldr	r3, [r7, #8]
 8002ffc:	781b      	ldrb	r3, [r3, #0]
 8002ffe:	009b      	lsls	r3, r3, #2
 8003000:	441a      	add	r2, r3
 8003002:	8afb      	ldrh	r3, [r7, #22]
 8003004:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003008:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800300c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003010:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003014:	b29b      	uxth	r3, r3
 8003016:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003018:	8b7b      	ldrh	r3, [r7, #26]
 800301a:	2b00      	cmp	r3, #0
 800301c:	f000 8087 	beq.w	800312e <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	6818      	ldr	r0, [r3, #0]
 8003024:	68bb      	ldr	r3, [r7, #8]
 8003026:	6959      	ldr	r1, [r3, #20]
 8003028:	68bb      	ldr	r3, [r7, #8]
 800302a:	891a      	ldrh	r2, [r3, #8]
 800302c:	8b7b      	ldrh	r3, [r7, #26]
 800302e:	f003 fba7 	bl	8006780 <USB_ReadPMA>
 8003032:	e07c      	b.n	800312e <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800303c:	b29b      	uxth	r3, r3
 800303e:	461a      	mov	r2, r3
 8003040:	68bb      	ldr	r3, [r7, #8]
 8003042:	781b      	ldrb	r3, [r3, #0]
 8003044:	00db      	lsls	r3, r3, #3
 8003046:	4413      	add	r3, r2
 8003048:	3306      	adds	r3, #6
 800304a:	005b      	lsls	r3, r3, #1
 800304c:	68fa      	ldr	r2, [r7, #12]
 800304e:	6812      	ldr	r2, [r2, #0]
 8003050:	4413      	add	r3, r2
 8003052:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003056:	881b      	ldrh	r3, [r3, #0]
 8003058:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800305c:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800305e:	68bb      	ldr	r3, [r7, #8]
 8003060:	699a      	ldr	r2, [r3, #24]
 8003062:	8b7b      	ldrh	r3, [r7, #26]
 8003064:	429a      	cmp	r2, r3
 8003066:	d306      	bcc.n	8003076 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8003068:	68bb      	ldr	r3, [r7, #8]
 800306a:	699a      	ldr	r2, [r3, #24]
 800306c:	8b7b      	ldrh	r3, [r7, #26]
 800306e:	1ad2      	subs	r2, r2, r3
 8003070:	68bb      	ldr	r3, [r7, #8]
 8003072:	619a      	str	r2, [r3, #24]
 8003074:	e002      	b.n	800307c <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8003076:	68bb      	ldr	r3, [r7, #8]
 8003078:	2200      	movs	r2, #0
 800307a:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800307c:	68bb      	ldr	r3, [r7, #8]
 800307e:	699b      	ldr	r3, [r3, #24]
 8003080:	2b00      	cmp	r3, #0
 8003082:	d123      	bne.n	80030cc <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	461a      	mov	r2, r3
 800308a:	68bb      	ldr	r3, [r7, #8]
 800308c:	781b      	ldrb	r3, [r3, #0]
 800308e:	009b      	lsls	r3, r3, #2
 8003090:	4413      	add	r3, r2
 8003092:	881b      	ldrh	r3, [r3, #0]
 8003094:	b29b      	uxth	r3, r3
 8003096:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800309a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800309e:	83fb      	strh	r3, [r7, #30]
 80030a0:	8bfb      	ldrh	r3, [r7, #30]
 80030a2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80030a6:	83fb      	strh	r3, [r7, #30]
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	461a      	mov	r2, r3
 80030ae:	68bb      	ldr	r3, [r7, #8]
 80030b0:	781b      	ldrb	r3, [r3, #0]
 80030b2:	009b      	lsls	r3, r3, #2
 80030b4:	441a      	add	r2, r3
 80030b6:	8bfb      	ldrh	r3, [r7, #30]
 80030b8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80030bc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80030c0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80030c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80030c8:	b29b      	uxth	r3, r3
 80030ca:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80030cc:	88fb      	ldrh	r3, [r7, #6]
 80030ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d11f      	bne.n	8003116 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	461a      	mov	r2, r3
 80030dc:	68bb      	ldr	r3, [r7, #8]
 80030de:	781b      	ldrb	r3, [r3, #0]
 80030e0:	009b      	lsls	r3, r3, #2
 80030e2:	4413      	add	r3, r2
 80030e4:	881b      	ldrh	r3, [r3, #0]
 80030e6:	b29b      	uxth	r3, r3
 80030e8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80030ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030f0:	83bb      	strh	r3, [r7, #28]
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	461a      	mov	r2, r3
 80030f8:	68bb      	ldr	r3, [r7, #8]
 80030fa:	781b      	ldrb	r3, [r3, #0]
 80030fc:	009b      	lsls	r3, r3, #2
 80030fe:	441a      	add	r2, r3
 8003100:	8bbb      	ldrh	r3, [r7, #28]
 8003102:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003106:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800310a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800310e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003112:	b29b      	uxth	r3, r3
 8003114:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003116:	8b7b      	ldrh	r3, [r7, #26]
 8003118:	2b00      	cmp	r3, #0
 800311a:	d008      	beq.n	800312e <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	6818      	ldr	r0, [r3, #0]
 8003120:	68bb      	ldr	r3, [r7, #8]
 8003122:	6959      	ldr	r1, [r3, #20]
 8003124:	68bb      	ldr	r3, [r7, #8]
 8003126:	895a      	ldrh	r2, [r3, #10]
 8003128:	8b7b      	ldrh	r3, [r7, #26]
 800312a:	f003 fb29 	bl	8006780 <USB_ReadPMA>
    }
  }

  return count;
 800312e:	8b7b      	ldrh	r3, [r7, #26]
}
 8003130:	4618      	mov	r0, r3
 8003132:	3720      	adds	r7, #32
 8003134:	46bd      	mov	sp, r7
 8003136:	bd80      	pop	{r7, pc}

08003138 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003138:	b580      	push	{r7, lr}
 800313a:	b092      	sub	sp, #72	; 0x48
 800313c:	af00      	add	r7, sp, #0
 800313e:	60f8      	str	r0, [r7, #12]
 8003140:	60b9      	str	r1, [r7, #8]
 8003142:	4613      	mov	r3, r2
 8003144:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003146:	88fb      	ldrh	r3, [r7, #6]
 8003148:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800314c:	2b00      	cmp	r3, #0
 800314e:	f000 8132 	beq.w	80033b6 <HAL_PCD_EP_DB_Transmit+0x27e>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800315a:	b29b      	uxth	r3, r3
 800315c:	461a      	mov	r2, r3
 800315e:	68bb      	ldr	r3, [r7, #8]
 8003160:	781b      	ldrb	r3, [r3, #0]
 8003162:	00db      	lsls	r3, r3, #3
 8003164:	4413      	add	r3, r2
 8003166:	3302      	adds	r3, #2
 8003168:	005b      	lsls	r3, r3, #1
 800316a:	68fa      	ldr	r2, [r7, #12]
 800316c:	6812      	ldr	r2, [r2, #0]
 800316e:	4413      	add	r3, r2
 8003170:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003174:	881b      	ldrh	r3, [r3, #0]
 8003176:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800317a:	85fb      	strh	r3, [r7, #46]	; 0x2e

    if (ep->xfer_len > TxByteNbre)
 800317c:	68bb      	ldr	r3, [r7, #8]
 800317e:	699a      	ldr	r2, [r3, #24]
 8003180:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003182:	429a      	cmp	r2, r3
 8003184:	d906      	bls.n	8003194 <HAL_PCD_EP_DB_Transmit+0x5c>
    {
      ep->xfer_len -= TxByteNbre;
 8003186:	68bb      	ldr	r3, [r7, #8]
 8003188:	699a      	ldr	r2, [r3, #24]
 800318a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800318c:	1ad2      	subs	r2, r2, r3
 800318e:	68bb      	ldr	r3, [r7, #8]
 8003190:	619a      	str	r2, [r3, #24]
 8003192:	e002      	b.n	800319a <HAL_PCD_EP_DB_Transmit+0x62>
    }
    else
    {
      ep->xfer_len = 0U;
 8003194:	68bb      	ldr	r3, [r7, #8]
 8003196:	2200      	movs	r2, #0
 8003198:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800319a:	68bb      	ldr	r3, [r7, #8]
 800319c:	699b      	ldr	r3, [r3, #24]
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d12c      	bne.n	80031fc <HAL_PCD_EP_DB_Transmit+0xc4>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80031a2:	68bb      	ldr	r3, [r7, #8]
 80031a4:	781b      	ldrb	r3, [r3, #0]
 80031a6:	4619      	mov	r1, r3
 80031a8:	68f8      	ldr	r0, [r7, #12]
 80031aa:	f005 f8e8 	bl	800837e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80031ae:	88fb      	ldrh	r3, [r7, #6]
 80031b0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	f000 822f 	beq.w	8003618 <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	461a      	mov	r2, r3
 80031c0:	68bb      	ldr	r3, [r7, #8]
 80031c2:	781b      	ldrb	r3, [r3, #0]
 80031c4:	009b      	lsls	r3, r3, #2
 80031c6:	4413      	add	r3, r2
 80031c8:	881b      	ldrh	r3, [r3, #0]
 80031ca:	b29b      	uxth	r3, r3
 80031cc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80031d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031d4:	827b      	strh	r3, [r7, #18]
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	461a      	mov	r2, r3
 80031dc:	68bb      	ldr	r3, [r7, #8]
 80031de:	781b      	ldrb	r3, [r3, #0]
 80031e0:	009b      	lsls	r3, r3, #2
 80031e2:	441a      	add	r2, r3
 80031e4:	8a7b      	ldrh	r3, [r7, #18]
 80031e6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80031ea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80031ee:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80031f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80031f6:	b29b      	uxth	r3, r3
 80031f8:	8013      	strh	r3, [r2, #0]
 80031fa:	e20d      	b.n	8003618 <HAL_PCD_EP_DB_Transmit+0x4e0>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80031fc:	88fb      	ldrh	r3, [r7, #6]
 80031fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003202:	2b00      	cmp	r3, #0
 8003204:	d01f      	beq.n	8003246 <HAL_PCD_EP_DB_Transmit+0x10e>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	461a      	mov	r2, r3
 800320c:	68bb      	ldr	r3, [r7, #8]
 800320e:	781b      	ldrb	r3, [r3, #0]
 8003210:	009b      	lsls	r3, r3, #2
 8003212:	4413      	add	r3, r2
 8003214:	881b      	ldrh	r3, [r3, #0]
 8003216:	b29b      	uxth	r3, r3
 8003218:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800321c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003220:	84bb      	strh	r3, [r7, #36]	; 0x24
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	461a      	mov	r2, r3
 8003228:	68bb      	ldr	r3, [r7, #8]
 800322a:	781b      	ldrb	r3, [r3, #0]
 800322c:	009b      	lsls	r3, r3, #2
 800322e:	441a      	add	r2, r3
 8003230:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003232:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003236:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800323a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800323e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003242:	b29b      	uxth	r3, r3
 8003244:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003246:	68bb      	ldr	r3, [r7, #8]
 8003248:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800324c:	2b01      	cmp	r3, #1
 800324e:	f040 81e3 	bne.w	8003618 <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        ep->xfer_buff += TxByteNbre;
 8003252:	68bb      	ldr	r3, [r7, #8]
 8003254:	695a      	ldr	r2, [r3, #20]
 8003256:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003258:	441a      	add	r2, r3
 800325a:	68bb      	ldr	r3, [r7, #8]
 800325c:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 800325e:	68bb      	ldr	r3, [r7, #8]
 8003260:	69da      	ldr	r2, [r3, #28]
 8003262:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003264:	441a      	add	r2, r3
 8003266:	68bb      	ldr	r3, [r7, #8]
 8003268:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800326a:	68bb      	ldr	r3, [r7, #8]
 800326c:	6a1a      	ldr	r2, [r3, #32]
 800326e:	68bb      	ldr	r3, [r7, #8]
 8003270:	691b      	ldr	r3, [r3, #16]
 8003272:	429a      	cmp	r2, r3
 8003274:	d309      	bcc.n	800328a <HAL_PCD_EP_DB_Transmit+0x152>
        {
          len = ep->maxpacket;
 8003276:	68bb      	ldr	r3, [r7, #8]
 8003278:	691b      	ldr	r3, [r3, #16]
 800327a:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db -= len;
 800327c:	68bb      	ldr	r3, [r7, #8]
 800327e:	6a1a      	ldr	r2, [r3, #32]
 8003280:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003282:	1ad2      	subs	r2, r2, r3
 8003284:	68bb      	ldr	r3, [r7, #8]
 8003286:	621a      	str	r2, [r3, #32]
 8003288:	e014      	b.n	80032b4 <HAL_PCD_EP_DB_Transmit+0x17c>
        }
        else if (ep->xfer_len_db == 0U)
 800328a:	68bb      	ldr	r3, [r7, #8]
 800328c:	6a1b      	ldr	r3, [r3, #32]
 800328e:	2b00      	cmp	r3, #0
 8003290:	d106      	bne.n	80032a0 <HAL_PCD_EP_DB_Transmit+0x168>
        {
          len = TxByteNbre;
 8003292:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003294:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_fill_db = 0U;
 8003296:	68bb      	ldr	r3, [r7, #8]
 8003298:	2200      	movs	r2, #0
 800329a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800329e:	e009      	b.n	80032b4 <HAL_PCD_EP_DB_Transmit+0x17c>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80032a0:	68bb      	ldr	r3, [r7, #8]
 80032a2:	2200      	movs	r2, #0
 80032a4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 80032a8:	68bb      	ldr	r3, [r7, #8]
 80032aa:	6a1b      	ldr	r3, [r3, #32]
 80032ac:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db = 0U;
 80032ae:	68bb      	ldr	r3, [r7, #8]
 80032b0:	2200      	movs	r2, #0
 80032b2:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80032b4:	68bb      	ldr	r3, [r7, #8]
 80032b6:	785b      	ldrb	r3, [r3, #1]
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d155      	bne.n	8003368 <HAL_PCD_EP_DB_Transmit+0x230>
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	61bb      	str	r3, [r7, #24]
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80032ca:	b29b      	uxth	r3, r3
 80032cc:	461a      	mov	r2, r3
 80032ce:	69bb      	ldr	r3, [r7, #24]
 80032d0:	4413      	add	r3, r2
 80032d2:	61bb      	str	r3, [r7, #24]
 80032d4:	68bb      	ldr	r3, [r7, #8]
 80032d6:	781b      	ldrb	r3, [r3, #0]
 80032d8:	011a      	lsls	r2, r3, #4
 80032da:	69bb      	ldr	r3, [r7, #24]
 80032dc:	4413      	add	r3, r2
 80032de:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80032e2:	617b      	str	r3, [r7, #20]
 80032e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d112      	bne.n	8003310 <HAL_PCD_EP_DB_Transmit+0x1d8>
 80032ea:	697b      	ldr	r3, [r7, #20]
 80032ec:	881b      	ldrh	r3, [r3, #0]
 80032ee:	b29b      	uxth	r3, r3
 80032f0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80032f4:	b29a      	uxth	r2, r3
 80032f6:	697b      	ldr	r3, [r7, #20]
 80032f8:	801a      	strh	r2, [r3, #0]
 80032fa:	697b      	ldr	r3, [r7, #20]
 80032fc:	881b      	ldrh	r3, [r3, #0]
 80032fe:	b29b      	uxth	r3, r3
 8003300:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003304:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003308:	b29a      	uxth	r2, r3
 800330a:	697b      	ldr	r3, [r7, #20]
 800330c:	801a      	strh	r2, [r3, #0]
 800330e:	e047      	b.n	80033a0 <HAL_PCD_EP_DB_Transmit+0x268>
 8003310:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003312:	2b3e      	cmp	r3, #62	; 0x3e
 8003314:	d811      	bhi.n	800333a <HAL_PCD_EP_DB_Transmit+0x202>
 8003316:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003318:	085b      	lsrs	r3, r3, #1
 800331a:	62bb      	str	r3, [r7, #40]	; 0x28
 800331c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800331e:	f003 0301 	and.w	r3, r3, #1
 8003322:	2b00      	cmp	r3, #0
 8003324:	d002      	beq.n	800332c <HAL_PCD_EP_DB_Transmit+0x1f4>
 8003326:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003328:	3301      	adds	r3, #1
 800332a:	62bb      	str	r3, [r7, #40]	; 0x28
 800332c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800332e:	b29b      	uxth	r3, r3
 8003330:	029b      	lsls	r3, r3, #10
 8003332:	b29a      	uxth	r2, r3
 8003334:	697b      	ldr	r3, [r7, #20]
 8003336:	801a      	strh	r2, [r3, #0]
 8003338:	e032      	b.n	80033a0 <HAL_PCD_EP_DB_Transmit+0x268>
 800333a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800333c:	095b      	lsrs	r3, r3, #5
 800333e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003340:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003342:	f003 031f 	and.w	r3, r3, #31
 8003346:	2b00      	cmp	r3, #0
 8003348:	d102      	bne.n	8003350 <HAL_PCD_EP_DB_Transmit+0x218>
 800334a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800334c:	3b01      	subs	r3, #1
 800334e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003350:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003352:	b29b      	uxth	r3, r3
 8003354:	029b      	lsls	r3, r3, #10
 8003356:	b29b      	uxth	r3, r3
 8003358:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800335c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003360:	b29a      	uxth	r2, r3
 8003362:	697b      	ldr	r3, [r7, #20]
 8003364:	801a      	strh	r2, [r3, #0]
 8003366:	e01b      	b.n	80033a0 <HAL_PCD_EP_DB_Transmit+0x268>
 8003368:	68bb      	ldr	r3, [r7, #8]
 800336a:	785b      	ldrb	r3, [r3, #1]
 800336c:	2b01      	cmp	r3, #1
 800336e:	d117      	bne.n	80033a0 <HAL_PCD_EP_DB_Transmit+0x268>
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	623b      	str	r3, [r7, #32]
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800337e:	b29b      	uxth	r3, r3
 8003380:	461a      	mov	r2, r3
 8003382:	6a3b      	ldr	r3, [r7, #32]
 8003384:	4413      	add	r3, r2
 8003386:	623b      	str	r3, [r7, #32]
 8003388:	68bb      	ldr	r3, [r7, #8]
 800338a:	781b      	ldrb	r3, [r3, #0]
 800338c:	011a      	lsls	r2, r3, #4
 800338e:	6a3b      	ldr	r3, [r7, #32]
 8003390:	4413      	add	r3, r2
 8003392:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003396:	61fb      	str	r3, [r7, #28]
 8003398:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800339a:	b29a      	uxth	r2, r3
 800339c:	69fb      	ldr	r3, [r7, #28]
 800339e:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	6818      	ldr	r0, [r3, #0]
 80033a4:	68bb      	ldr	r3, [r7, #8]
 80033a6:	6959      	ldr	r1, [r3, #20]
 80033a8:	68bb      	ldr	r3, [r7, #8]
 80033aa:	891a      	ldrh	r2, [r3, #8]
 80033ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033ae:	b29b      	uxth	r3, r3
 80033b0:	f003 f9a2 	bl	80066f8 <USB_WritePMA>
 80033b4:	e130      	b.n	8003618 <HAL_PCD_EP_DB_Transmit+0x4e0>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80033be:	b29b      	uxth	r3, r3
 80033c0:	461a      	mov	r2, r3
 80033c2:	68bb      	ldr	r3, [r7, #8]
 80033c4:	781b      	ldrb	r3, [r3, #0]
 80033c6:	00db      	lsls	r3, r3, #3
 80033c8:	4413      	add	r3, r2
 80033ca:	3306      	adds	r3, #6
 80033cc:	005b      	lsls	r3, r3, #1
 80033ce:	68fa      	ldr	r2, [r7, #12]
 80033d0:	6812      	ldr	r2, [r2, #0]
 80033d2:	4413      	add	r3, r2
 80033d4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80033d8:	881b      	ldrh	r3, [r3, #0]
 80033da:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80033de:	85fb      	strh	r3, [r7, #46]	; 0x2e

    if (ep->xfer_len >= TxByteNbre)
 80033e0:	68bb      	ldr	r3, [r7, #8]
 80033e2:	699a      	ldr	r2, [r3, #24]
 80033e4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80033e6:	429a      	cmp	r2, r3
 80033e8:	d306      	bcc.n	80033f8 <HAL_PCD_EP_DB_Transmit+0x2c0>
    {
      ep->xfer_len -= TxByteNbre;
 80033ea:	68bb      	ldr	r3, [r7, #8]
 80033ec:	699a      	ldr	r2, [r3, #24]
 80033ee:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80033f0:	1ad2      	subs	r2, r2, r3
 80033f2:	68bb      	ldr	r3, [r7, #8]
 80033f4:	619a      	str	r2, [r3, #24]
 80033f6:	e002      	b.n	80033fe <HAL_PCD_EP_DB_Transmit+0x2c6>
    }
    else
    {
      ep->xfer_len = 0U;
 80033f8:	68bb      	ldr	r3, [r7, #8]
 80033fa:	2200      	movs	r2, #0
 80033fc:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80033fe:	68bb      	ldr	r3, [r7, #8]
 8003400:	699b      	ldr	r3, [r3, #24]
 8003402:	2b00      	cmp	r3, #0
 8003404:	d12c      	bne.n	8003460 <HAL_PCD_EP_DB_Transmit+0x328>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003406:	68bb      	ldr	r3, [r7, #8]
 8003408:	781b      	ldrb	r3, [r3, #0]
 800340a:	4619      	mov	r1, r3
 800340c:	68f8      	ldr	r0, [r7, #12]
 800340e:	f004 ffb6 	bl	800837e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /*need to Free USB Buff*/
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003412:	88fb      	ldrh	r3, [r7, #6]
 8003414:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003418:	2b00      	cmp	r3, #0
 800341a:	f040 80fd 	bne.w	8003618 <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	461a      	mov	r2, r3
 8003424:	68bb      	ldr	r3, [r7, #8]
 8003426:	781b      	ldrb	r3, [r3, #0]
 8003428:	009b      	lsls	r3, r3, #2
 800342a:	4413      	add	r3, r2
 800342c:	881b      	ldrh	r3, [r3, #0]
 800342e:	b29b      	uxth	r3, r3
 8003430:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003434:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003438:	84fb      	strh	r3, [r7, #38]	; 0x26
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	461a      	mov	r2, r3
 8003440:	68bb      	ldr	r3, [r7, #8]
 8003442:	781b      	ldrb	r3, [r3, #0]
 8003444:	009b      	lsls	r3, r3, #2
 8003446:	441a      	add	r2, r3
 8003448:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800344a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800344e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003452:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003456:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800345a:	b29b      	uxth	r3, r3
 800345c:	8013      	strh	r3, [r2, #0]
 800345e:	e0db      	b.n	8003618 <HAL_PCD_EP_DB_Transmit+0x4e0>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003460:	88fb      	ldrh	r3, [r7, #6]
 8003462:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003466:	2b00      	cmp	r3, #0
 8003468:	d11f      	bne.n	80034aa <HAL_PCD_EP_DB_Transmit+0x372>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	461a      	mov	r2, r3
 8003470:	68bb      	ldr	r3, [r7, #8]
 8003472:	781b      	ldrb	r3, [r3, #0]
 8003474:	009b      	lsls	r3, r3, #2
 8003476:	4413      	add	r3, r2
 8003478:	881b      	ldrh	r3, [r3, #0]
 800347a:	b29b      	uxth	r3, r3
 800347c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003480:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003484:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	461a      	mov	r2, r3
 800348c:	68bb      	ldr	r3, [r7, #8]
 800348e:	781b      	ldrb	r3, [r3, #0]
 8003490:	009b      	lsls	r3, r3, #2
 8003492:	441a      	add	r2, r3
 8003494:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8003496:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800349a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800349e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80034a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80034a6:	b29b      	uxth	r3, r3
 80034a8:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80034aa:	68bb      	ldr	r3, [r7, #8]
 80034ac:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80034b0:	2b01      	cmp	r3, #1
 80034b2:	f040 80b1 	bne.w	8003618 <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        ep->xfer_buff += TxByteNbre;
 80034b6:	68bb      	ldr	r3, [r7, #8]
 80034b8:	695a      	ldr	r2, [r3, #20]
 80034ba:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80034bc:	441a      	add	r2, r3
 80034be:	68bb      	ldr	r3, [r7, #8]
 80034c0:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 80034c2:	68bb      	ldr	r3, [r7, #8]
 80034c4:	69da      	ldr	r2, [r3, #28]
 80034c6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80034c8:	441a      	add	r2, r3
 80034ca:	68bb      	ldr	r3, [r7, #8]
 80034cc:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80034ce:	68bb      	ldr	r3, [r7, #8]
 80034d0:	6a1a      	ldr	r2, [r3, #32]
 80034d2:	68bb      	ldr	r3, [r7, #8]
 80034d4:	691b      	ldr	r3, [r3, #16]
 80034d6:	429a      	cmp	r2, r3
 80034d8:	d309      	bcc.n	80034ee <HAL_PCD_EP_DB_Transmit+0x3b6>
        {
          len = ep->maxpacket;
 80034da:	68bb      	ldr	r3, [r7, #8]
 80034dc:	691b      	ldr	r3, [r3, #16]
 80034de:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db -= len;
 80034e0:	68bb      	ldr	r3, [r7, #8]
 80034e2:	6a1a      	ldr	r2, [r3, #32]
 80034e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034e6:	1ad2      	subs	r2, r2, r3
 80034e8:	68bb      	ldr	r3, [r7, #8]
 80034ea:	621a      	str	r2, [r3, #32]
 80034ec:	e014      	b.n	8003518 <HAL_PCD_EP_DB_Transmit+0x3e0>
        }
        else if (ep->xfer_len_db == 0U)
 80034ee:	68bb      	ldr	r3, [r7, #8]
 80034f0:	6a1b      	ldr	r3, [r3, #32]
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d106      	bne.n	8003504 <HAL_PCD_EP_DB_Transmit+0x3cc>
        {
          len = TxByteNbre;
 80034f6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80034f8:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_fill_db = 0U;
 80034fa:	68bb      	ldr	r3, [r7, #8]
 80034fc:	2200      	movs	r2, #0
 80034fe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003502:	e009      	b.n	8003518 <HAL_PCD_EP_DB_Transmit+0x3e0>
        }
        else
        {
          len = ep->xfer_len_db;
 8003504:	68bb      	ldr	r3, [r7, #8]
 8003506:	6a1b      	ldr	r3, [r3, #32]
 8003508:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db = 0U;
 800350a:	68bb      	ldr	r3, [r7, #8]
 800350c:	2200      	movs	r2, #0
 800350e:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8003510:	68bb      	ldr	r3, [r7, #8]
 8003512:	2200      	movs	r2, #0
 8003514:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	637b      	str	r3, [r7, #52]	; 0x34
 800351e:	68bb      	ldr	r3, [r7, #8]
 8003520:	785b      	ldrb	r3, [r3, #1]
 8003522:	2b00      	cmp	r3, #0
 8003524:	d155      	bne.n	80035d2 <HAL_PCD_EP_DB_Transmit+0x49a>
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	647b      	str	r3, [r7, #68]	; 0x44
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003534:	b29b      	uxth	r3, r3
 8003536:	461a      	mov	r2, r3
 8003538:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800353a:	4413      	add	r3, r2
 800353c:	647b      	str	r3, [r7, #68]	; 0x44
 800353e:	68bb      	ldr	r3, [r7, #8]
 8003540:	781b      	ldrb	r3, [r3, #0]
 8003542:	011a      	lsls	r2, r3, #4
 8003544:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003546:	4413      	add	r3, r2
 8003548:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800354c:	643b      	str	r3, [r7, #64]	; 0x40
 800354e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003550:	2b00      	cmp	r3, #0
 8003552:	d112      	bne.n	800357a <HAL_PCD_EP_DB_Transmit+0x442>
 8003554:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003556:	881b      	ldrh	r3, [r3, #0]
 8003558:	b29b      	uxth	r3, r3
 800355a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800355e:	b29a      	uxth	r2, r3
 8003560:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003562:	801a      	strh	r2, [r3, #0]
 8003564:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003566:	881b      	ldrh	r3, [r3, #0]
 8003568:	b29b      	uxth	r3, r3
 800356a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800356e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003572:	b29a      	uxth	r2, r3
 8003574:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003576:	801a      	strh	r2, [r3, #0]
 8003578:	e044      	b.n	8003604 <HAL_PCD_EP_DB_Transmit+0x4cc>
 800357a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800357c:	2b3e      	cmp	r3, #62	; 0x3e
 800357e:	d811      	bhi.n	80035a4 <HAL_PCD_EP_DB_Transmit+0x46c>
 8003580:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003582:	085b      	lsrs	r3, r3, #1
 8003584:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003586:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003588:	f003 0301 	and.w	r3, r3, #1
 800358c:	2b00      	cmp	r3, #0
 800358e:	d002      	beq.n	8003596 <HAL_PCD_EP_DB_Transmit+0x45e>
 8003590:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003592:	3301      	adds	r3, #1
 8003594:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003596:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003598:	b29b      	uxth	r3, r3
 800359a:	029b      	lsls	r3, r3, #10
 800359c:	b29a      	uxth	r2, r3
 800359e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80035a0:	801a      	strh	r2, [r3, #0]
 80035a2:	e02f      	b.n	8003604 <HAL_PCD_EP_DB_Transmit+0x4cc>
 80035a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035a6:	095b      	lsrs	r3, r3, #5
 80035a8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80035aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035ac:	f003 031f 	and.w	r3, r3, #31
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d102      	bne.n	80035ba <HAL_PCD_EP_DB_Transmit+0x482>
 80035b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80035b6:	3b01      	subs	r3, #1
 80035b8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80035ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80035bc:	b29b      	uxth	r3, r3
 80035be:	029b      	lsls	r3, r3, #10
 80035c0:	b29b      	uxth	r3, r3
 80035c2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80035c6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80035ca:	b29a      	uxth	r2, r3
 80035cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80035ce:	801a      	strh	r2, [r3, #0]
 80035d0:	e018      	b.n	8003604 <HAL_PCD_EP_DB_Transmit+0x4cc>
 80035d2:	68bb      	ldr	r3, [r7, #8]
 80035d4:	785b      	ldrb	r3, [r3, #1]
 80035d6:	2b01      	cmp	r3, #1
 80035d8:	d114      	bne.n	8003604 <HAL_PCD_EP_DB_Transmit+0x4cc>
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80035e2:	b29b      	uxth	r3, r3
 80035e4:	461a      	mov	r2, r3
 80035e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035e8:	4413      	add	r3, r2
 80035ea:	637b      	str	r3, [r7, #52]	; 0x34
 80035ec:	68bb      	ldr	r3, [r7, #8]
 80035ee:	781b      	ldrb	r3, [r3, #0]
 80035f0:	011a      	lsls	r2, r3, #4
 80035f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035f4:	4413      	add	r3, r2
 80035f6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80035fa:	633b      	str	r3, [r7, #48]	; 0x30
 80035fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035fe:	b29a      	uxth	r2, r3
 8003600:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003602:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	6818      	ldr	r0, [r3, #0]
 8003608:	68bb      	ldr	r3, [r7, #8]
 800360a:	6959      	ldr	r1, [r3, #20]
 800360c:	68bb      	ldr	r3, [r7, #8]
 800360e:	895a      	ldrh	r2, [r3, #10]
 8003610:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003612:	b29b      	uxth	r3, r3
 8003614:	f003 f870 	bl	80066f8 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	461a      	mov	r2, r3
 800361e:	68bb      	ldr	r3, [r7, #8]
 8003620:	781b      	ldrb	r3, [r3, #0]
 8003622:	009b      	lsls	r3, r3, #2
 8003624:	4413      	add	r3, r2
 8003626:	881b      	ldrh	r3, [r3, #0]
 8003628:	b29b      	uxth	r3, r3
 800362a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800362e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003632:	823b      	strh	r3, [r7, #16]
 8003634:	8a3b      	ldrh	r3, [r7, #16]
 8003636:	f083 0310 	eor.w	r3, r3, #16
 800363a:	823b      	strh	r3, [r7, #16]
 800363c:	8a3b      	ldrh	r3, [r7, #16]
 800363e:	f083 0320 	eor.w	r3, r3, #32
 8003642:	823b      	strh	r3, [r7, #16]
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	461a      	mov	r2, r3
 800364a:	68bb      	ldr	r3, [r7, #8]
 800364c:	781b      	ldrb	r3, [r3, #0]
 800364e:	009b      	lsls	r3, r3, #2
 8003650:	441a      	add	r2, r3
 8003652:	8a3b      	ldrh	r3, [r7, #16]
 8003654:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003658:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800365c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003660:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003664:	b29b      	uxth	r3, r3
 8003666:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8003668:	2300      	movs	r3, #0
}
 800366a:	4618      	mov	r0, r3
 800366c:	3748      	adds	r7, #72	; 0x48
 800366e:	46bd      	mov	sp, r7
 8003670:	bd80      	pop	{r7, pc}

08003672 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8003672:	b480      	push	{r7}
 8003674:	b087      	sub	sp, #28
 8003676:	af00      	add	r7, sp, #0
 8003678:	60f8      	str	r0, [r7, #12]
 800367a:	607b      	str	r3, [r7, #4]
 800367c:	460b      	mov	r3, r1
 800367e:	817b      	strh	r3, [r7, #10]
 8003680:	4613      	mov	r3, r2
 8003682:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8003684:	897b      	ldrh	r3, [r7, #10]
 8003686:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800368a:	b29b      	uxth	r3, r3
 800368c:	2b00      	cmp	r3, #0
 800368e:	d00b      	beq.n	80036a8 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003690:	897b      	ldrh	r3, [r7, #10]
 8003692:	f003 0307 	and.w	r3, r3, #7
 8003696:	1c5a      	adds	r2, r3, #1
 8003698:	4613      	mov	r3, r2
 800369a:	009b      	lsls	r3, r3, #2
 800369c:	4413      	add	r3, r2
 800369e:	00db      	lsls	r3, r3, #3
 80036a0:	68fa      	ldr	r2, [r7, #12]
 80036a2:	4413      	add	r3, r2
 80036a4:	617b      	str	r3, [r7, #20]
 80036a6:	e009      	b.n	80036bc <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80036a8:	897a      	ldrh	r2, [r7, #10]
 80036aa:	4613      	mov	r3, r2
 80036ac:	009b      	lsls	r3, r3, #2
 80036ae:	4413      	add	r3, r2
 80036b0:	00db      	lsls	r3, r3, #3
 80036b2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80036b6:	68fa      	ldr	r2, [r7, #12]
 80036b8:	4413      	add	r3, r2
 80036ba:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80036bc:	893b      	ldrh	r3, [r7, #8]
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d107      	bne.n	80036d2 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80036c2:	697b      	ldr	r3, [r7, #20]
 80036c4:	2200      	movs	r2, #0
 80036c6:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	b29a      	uxth	r2, r3
 80036cc:	697b      	ldr	r3, [r7, #20]
 80036ce:	80da      	strh	r2, [r3, #6]
 80036d0:	e00b      	b.n	80036ea <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80036d2:	697b      	ldr	r3, [r7, #20]
 80036d4:	2201      	movs	r2, #1
 80036d6:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	b29a      	uxth	r2, r3
 80036dc:	697b      	ldr	r3, [r7, #20]
 80036de:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	0c1b      	lsrs	r3, r3, #16
 80036e4:	b29a      	uxth	r2, r3
 80036e6:	697b      	ldr	r3, [r7, #20]
 80036e8:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 80036ea:	2300      	movs	r3, #0
}
 80036ec:	4618      	mov	r0, r3
 80036ee:	371c      	adds	r7, #28
 80036f0:	46bd      	mov	sp, r7
 80036f2:	bc80      	pop	{r7}
 80036f4:	4770      	bx	lr
	...

080036f8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b086      	sub	sp, #24
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2b00      	cmp	r3, #0
 8003704:	d101      	bne.n	800370a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003706:	2301      	movs	r3, #1
 8003708:	e26c      	b.n	8003be4 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f003 0301 	and.w	r3, r3, #1
 8003712:	2b00      	cmp	r3, #0
 8003714:	f000 8087 	beq.w	8003826 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003718:	4b92      	ldr	r3, [pc, #584]	; (8003964 <HAL_RCC_OscConfig+0x26c>)
 800371a:	685b      	ldr	r3, [r3, #4]
 800371c:	f003 030c 	and.w	r3, r3, #12
 8003720:	2b04      	cmp	r3, #4
 8003722:	d00c      	beq.n	800373e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003724:	4b8f      	ldr	r3, [pc, #572]	; (8003964 <HAL_RCC_OscConfig+0x26c>)
 8003726:	685b      	ldr	r3, [r3, #4]
 8003728:	f003 030c 	and.w	r3, r3, #12
 800372c:	2b08      	cmp	r3, #8
 800372e:	d112      	bne.n	8003756 <HAL_RCC_OscConfig+0x5e>
 8003730:	4b8c      	ldr	r3, [pc, #560]	; (8003964 <HAL_RCC_OscConfig+0x26c>)
 8003732:	685b      	ldr	r3, [r3, #4]
 8003734:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003738:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800373c:	d10b      	bne.n	8003756 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800373e:	4b89      	ldr	r3, [pc, #548]	; (8003964 <HAL_RCC_OscConfig+0x26c>)
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003746:	2b00      	cmp	r3, #0
 8003748:	d06c      	beq.n	8003824 <HAL_RCC_OscConfig+0x12c>
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	685b      	ldr	r3, [r3, #4]
 800374e:	2b00      	cmp	r3, #0
 8003750:	d168      	bne.n	8003824 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003752:	2301      	movs	r3, #1
 8003754:	e246      	b.n	8003be4 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	685b      	ldr	r3, [r3, #4]
 800375a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800375e:	d106      	bne.n	800376e <HAL_RCC_OscConfig+0x76>
 8003760:	4b80      	ldr	r3, [pc, #512]	; (8003964 <HAL_RCC_OscConfig+0x26c>)
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	4a7f      	ldr	r2, [pc, #508]	; (8003964 <HAL_RCC_OscConfig+0x26c>)
 8003766:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800376a:	6013      	str	r3, [r2, #0]
 800376c:	e02e      	b.n	80037cc <HAL_RCC_OscConfig+0xd4>
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	685b      	ldr	r3, [r3, #4]
 8003772:	2b00      	cmp	r3, #0
 8003774:	d10c      	bne.n	8003790 <HAL_RCC_OscConfig+0x98>
 8003776:	4b7b      	ldr	r3, [pc, #492]	; (8003964 <HAL_RCC_OscConfig+0x26c>)
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	4a7a      	ldr	r2, [pc, #488]	; (8003964 <HAL_RCC_OscConfig+0x26c>)
 800377c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003780:	6013      	str	r3, [r2, #0]
 8003782:	4b78      	ldr	r3, [pc, #480]	; (8003964 <HAL_RCC_OscConfig+0x26c>)
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	4a77      	ldr	r2, [pc, #476]	; (8003964 <HAL_RCC_OscConfig+0x26c>)
 8003788:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800378c:	6013      	str	r3, [r2, #0]
 800378e:	e01d      	b.n	80037cc <HAL_RCC_OscConfig+0xd4>
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	685b      	ldr	r3, [r3, #4]
 8003794:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003798:	d10c      	bne.n	80037b4 <HAL_RCC_OscConfig+0xbc>
 800379a:	4b72      	ldr	r3, [pc, #456]	; (8003964 <HAL_RCC_OscConfig+0x26c>)
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	4a71      	ldr	r2, [pc, #452]	; (8003964 <HAL_RCC_OscConfig+0x26c>)
 80037a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80037a4:	6013      	str	r3, [r2, #0]
 80037a6:	4b6f      	ldr	r3, [pc, #444]	; (8003964 <HAL_RCC_OscConfig+0x26c>)
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	4a6e      	ldr	r2, [pc, #440]	; (8003964 <HAL_RCC_OscConfig+0x26c>)
 80037ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037b0:	6013      	str	r3, [r2, #0]
 80037b2:	e00b      	b.n	80037cc <HAL_RCC_OscConfig+0xd4>
 80037b4:	4b6b      	ldr	r3, [pc, #428]	; (8003964 <HAL_RCC_OscConfig+0x26c>)
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	4a6a      	ldr	r2, [pc, #424]	; (8003964 <HAL_RCC_OscConfig+0x26c>)
 80037ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80037be:	6013      	str	r3, [r2, #0]
 80037c0:	4b68      	ldr	r3, [pc, #416]	; (8003964 <HAL_RCC_OscConfig+0x26c>)
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	4a67      	ldr	r2, [pc, #412]	; (8003964 <HAL_RCC_OscConfig+0x26c>)
 80037c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80037ca:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	685b      	ldr	r3, [r3, #4]
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d013      	beq.n	80037fc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037d4:	f7fd f9f8 	bl	8000bc8 <HAL_GetTick>
 80037d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037da:	e008      	b.n	80037ee <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80037dc:	f7fd f9f4 	bl	8000bc8 <HAL_GetTick>
 80037e0:	4602      	mov	r2, r0
 80037e2:	693b      	ldr	r3, [r7, #16]
 80037e4:	1ad3      	subs	r3, r2, r3
 80037e6:	2b64      	cmp	r3, #100	; 0x64
 80037e8:	d901      	bls.n	80037ee <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80037ea:	2303      	movs	r3, #3
 80037ec:	e1fa      	b.n	8003be4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037ee:	4b5d      	ldr	r3, [pc, #372]	; (8003964 <HAL_RCC_OscConfig+0x26c>)
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d0f0      	beq.n	80037dc <HAL_RCC_OscConfig+0xe4>
 80037fa:	e014      	b.n	8003826 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037fc:	f7fd f9e4 	bl	8000bc8 <HAL_GetTick>
 8003800:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003802:	e008      	b.n	8003816 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003804:	f7fd f9e0 	bl	8000bc8 <HAL_GetTick>
 8003808:	4602      	mov	r2, r0
 800380a:	693b      	ldr	r3, [r7, #16]
 800380c:	1ad3      	subs	r3, r2, r3
 800380e:	2b64      	cmp	r3, #100	; 0x64
 8003810:	d901      	bls.n	8003816 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003812:	2303      	movs	r3, #3
 8003814:	e1e6      	b.n	8003be4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003816:	4b53      	ldr	r3, [pc, #332]	; (8003964 <HAL_RCC_OscConfig+0x26c>)
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800381e:	2b00      	cmp	r3, #0
 8003820:	d1f0      	bne.n	8003804 <HAL_RCC_OscConfig+0x10c>
 8003822:	e000      	b.n	8003826 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003824:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f003 0302 	and.w	r3, r3, #2
 800382e:	2b00      	cmp	r3, #0
 8003830:	d063      	beq.n	80038fa <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003832:	4b4c      	ldr	r3, [pc, #304]	; (8003964 <HAL_RCC_OscConfig+0x26c>)
 8003834:	685b      	ldr	r3, [r3, #4]
 8003836:	f003 030c 	and.w	r3, r3, #12
 800383a:	2b00      	cmp	r3, #0
 800383c:	d00b      	beq.n	8003856 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800383e:	4b49      	ldr	r3, [pc, #292]	; (8003964 <HAL_RCC_OscConfig+0x26c>)
 8003840:	685b      	ldr	r3, [r3, #4]
 8003842:	f003 030c 	and.w	r3, r3, #12
 8003846:	2b08      	cmp	r3, #8
 8003848:	d11c      	bne.n	8003884 <HAL_RCC_OscConfig+0x18c>
 800384a:	4b46      	ldr	r3, [pc, #280]	; (8003964 <HAL_RCC_OscConfig+0x26c>)
 800384c:	685b      	ldr	r3, [r3, #4]
 800384e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003852:	2b00      	cmp	r3, #0
 8003854:	d116      	bne.n	8003884 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003856:	4b43      	ldr	r3, [pc, #268]	; (8003964 <HAL_RCC_OscConfig+0x26c>)
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f003 0302 	and.w	r3, r3, #2
 800385e:	2b00      	cmp	r3, #0
 8003860:	d005      	beq.n	800386e <HAL_RCC_OscConfig+0x176>
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	691b      	ldr	r3, [r3, #16]
 8003866:	2b01      	cmp	r3, #1
 8003868:	d001      	beq.n	800386e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800386a:	2301      	movs	r3, #1
 800386c:	e1ba      	b.n	8003be4 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800386e:	4b3d      	ldr	r3, [pc, #244]	; (8003964 <HAL_RCC_OscConfig+0x26c>)
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	695b      	ldr	r3, [r3, #20]
 800387a:	00db      	lsls	r3, r3, #3
 800387c:	4939      	ldr	r1, [pc, #228]	; (8003964 <HAL_RCC_OscConfig+0x26c>)
 800387e:	4313      	orrs	r3, r2
 8003880:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003882:	e03a      	b.n	80038fa <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	691b      	ldr	r3, [r3, #16]
 8003888:	2b00      	cmp	r3, #0
 800388a:	d020      	beq.n	80038ce <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800388c:	4b36      	ldr	r3, [pc, #216]	; (8003968 <HAL_RCC_OscConfig+0x270>)
 800388e:	2201      	movs	r2, #1
 8003890:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003892:	f7fd f999 	bl	8000bc8 <HAL_GetTick>
 8003896:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003898:	e008      	b.n	80038ac <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800389a:	f7fd f995 	bl	8000bc8 <HAL_GetTick>
 800389e:	4602      	mov	r2, r0
 80038a0:	693b      	ldr	r3, [r7, #16]
 80038a2:	1ad3      	subs	r3, r2, r3
 80038a4:	2b02      	cmp	r3, #2
 80038a6:	d901      	bls.n	80038ac <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80038a8:	2303      	movs	r3, #3
 80038aa:	e19b      	b.n	8003be4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038ac:	4b2d      	ldr	r3, [pc, #180]	; (8003964 <HAL_RCC_OscConfig+0x26c>)
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f003 0302 	and.w	r3, r3, #2
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d0f0      	beq.n	800389a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038b8:	4b2a      	ldr	r3, [pc, #168]	; (8003964 <HAL_RCC_OscConfig+0x26c>)
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	695b      	ldr	r3, [r3, #20]
 80038c4:	00db      	lsls	r3, r3, #3
 80038c6:	4927      	ldr	r1, [pc, #156]	; (8003964 <HAL_RCC_OscConfig+0x26c>)
 80038c8:	4313      	orrs	r3, r2
 80038ca:	600b      	str	r3, [r1, #0]
 80038cc:	e015      	b.n	80038fa <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80038ce:	4b26      	ldr	r3, [pc, #152]	; (8003968 <HAL_RCC_OscConfig+0x270>)
 80038d0:	2200      	movs	r2, #0
 80038d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038d4:	f7fd f978 	bl	8000bc8 <HAL_GetTick>
 80038d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80038da:	e008      	b.n	80038ee <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80038dc:	f7fd f974 	bl	8000bc8 <HAL_GetTick>
 80038e0:	4602      	mov	r2, r0
 80038e2:	693b      	ldr	r3, [r7, #16]
 80038e4:	1ad3      	subs	r3, r2, r3
 80038e6:	2b02      	cmp	r3, #2
 80038e8:	d901      	bls.n	80038ee <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80038ea:	2303      	movs	r3, #3
 80038ec:	e17a      	b.n	8003be4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80038ee:	4b1d      	ldr	r3, [pc, #116]	; (8003964 <HAL_RCC_OscConfig+0x26c>)
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f003 0302 	and.w	r3, r3, #2
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d1f0      	bne.n	80038dc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f003 0308 	and.w	r3, r3, #8
 8003902:	2b00      	cmp	r3, #0
 8003904:	d03a      	beq.n	800397c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	699b      	ldr	r3, [r3, #24]
 800390a:	2b00      	cmp	r3, #0
 800390c:	d019      	beq.n	8003942 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800390e:	4b17      	ldr	r3, [pc, #92]	; (800396c <HAL_RCC_OscConfig+0x274>)
 8003910:	2201      	movs	r2, #1
 8003912:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003914:	f7fd f958 	bl	8000bc8 <HAL_GetTick>
 8003918:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800391a:	e008      	b.n	800392e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800391c:	f7fd f954 	bl	8000bc8 <HAL_GetTick>
 8003920:	4602      	mov	r2, r0
 8003922:	693b      	ldr	r3, [r7, #16]
 8003924:	1ad3      	subs	r3, r2, r3
 8003926:	2b02      	cmp	r3, #2
 8003928:	d901      	bls.n	800392e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800392a:	2303      	movs	r3, #3
 800392c:	e15a      	b.n	8003be4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800392e:	4b0d      	ldr	r3, [pc, #52]	; (8003964 <HAL_RCC_OscConfig+0x26c>)
 8003930:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003932:	f003 0302 	and.w	r3, r3, #2
 8003936:	2b00      	cmp	r3, #0
 8003938:	d0f0      	beq.n	800391c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800393a:	2001      	movs	r0, #1
 800393c:	f000 fac6 	bl	8003ecc <RCC_Delay>
 8003940:	e01c      	b.n	800397c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003942:	4b0a      	ldr	r3, [pc, #40]	; (800396c <HAL_RCC_OscConfig+0x274>)
 8003944:	2200      	movs	r2, #0
 8003946:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003948:	f7fd f93e 	bl	8000bc8 <HAL_GetTick>
 800394c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800394e:	e00f      	b.n	8003970 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003950:	f7fd f93a 	bl	8000bc8 <HAL_GetTick>
 8003954:	4602      	mov	r2, r0
 8003956:	693b      	ldr	r3, [r7, #16]
 8003958:	1ad3      	subs	r3, r2, r3
 800395a:	2b02      	cmp	r3, #2
 800395c:	d908      	bls.n	8003970 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800395e:	2303      	movs	r3, #3
 8003960:	e140      	b.n	8003be4 <HAL_RCC_OscConfig+0x4ec>
 8003962:	bf00      	nop
 8003964:	40021000 	.word	0x40021000
 8003968:	42420000 	.word	0x42420000
 800396c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003970:	4b9e      	ldr	r3, [pc, #632]	; (8003bec <HAL_RCC_OscConfig+0x4f4>)
 8003972:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003974:	f003 0302 	and.w	r3, r3, #2
 8003978:	2b00      	cmp	r3, #0
 800397a:	d1e9      	bne.n	8003950 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f003 0304 	and.w	r3, r3, #4
 8003984:	2b00      	cmp	r3, #0
 8003986:	f000 80a6 	beq.w	8003ad6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800398a:	2300      	movs	r3, #0
 800398c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800398e:	4b97      	ldr	r3, [pc, #604]	; (8003bec <HAL_RCC_OscConfig+0x4f4>)
 8003990:	69db      	ldr	r3, [r3, #28]
 8003992:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003996:	2b00      	cmp	r3, #0
 8003998:	d10d      	bne.n	80039b6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800399a:	4b94      	ldr	r3, [pc, #592]	; (8003bec <HAL_RCC_OscConfig+0x4f4>)
 800399c:	69db      	ldr	r3, [r3, #28]
 800399e:	4a93      	ldr	r2, [pc, #588]	; (8003bec <HAL_RCC_OscConfig+0x4f4>)
 80039a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039a4:	61d3      	str	r3, [r2, #28]
 80039a6:	4b91      	ldr	r3, [pc, #580]	; (8003bec <HAL_RCC_OscConfig+0x4f4>)
 80039a8:	69db      	ldr	r3, [r3, #28]
 80039aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039ae:	60bb      	str	r3, [r7, #8]
 80039b0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80039b2:	2301      	movs	r3, #1
 80039b4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039b6:	4b8e      	ldr	r3, [pc, #568]	; (8003bf0 <HAL_RCC_OscConfig+0x4f8>)
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d118      	bne.n	80039f4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80039c2:	4b8b      	ldr	r3, [pc, #556]	; (8003bf0 <HAL_RCC_OscConfig+0x4f8>)
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	4a8a      	ldr	r2, [pc, #552]	; (8003bf0 <HAL_RCC_OscConfig+0x4f8>)
 80039c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039cc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80039ce:	f7fd f8fb 	bl	8000bc8 <HAL_GetTick>
 80039d2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039d4:	e008      	b.n	80039e8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80039d6:	f7fd f8f7 	bl	8000bc8 <HAL_GetTick>
 80039da:	4602      	mov	r2, r0
 80039dc:	693b      	ldr	r3, [r7, #16]
 80039de:	1ad3      	subs	r3, r2, r3
 80039e0:	2b64      	cmp	r3, #100	; 0x64
 80039e2:	d901      	bls.n	80039e8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80039e4:	2303      	movs	r3, #3
 80039e6:	e0fd      	b.n	8003be4 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039e8:	4b81      	ldr	r3, [pc, #516]	; (8003bf0 <HAL_RCC_OscConfig+0x4f8>)
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d0f0      	beq.n	80039d6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	68db      	ldr	r3, [r3, #12]
 80039f8:	2b01      	cmp	r3, #1
 80039fa:	d106      	bne.n	8003a0a <HAL_RCC_OscConfig+0x312>
 80039fc:	4b7b      	ldr	r3, [pc, #492]	; (8003bec <HAL_RCC_OscConfig+0x4f4>)
 80039fe:	6a1b      	ldr	r3, [r3, #32]
 8003a00:	4a7a      	ldr	r2, [pc, #488]	; (8003bec <HAL_RCC_OscConfig+0x4f4>)
 8003a02:	f043 0301 	orr.w	r3, r3, #1
 8003a06:	6213      	str	r3, [r2, #32]
 8003a08:	e02d      	b.n	8003a66 <HAL_RCC_OscConfig+0x36e>
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	68db      	ldr	r3, [r3, #12]
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d10c      	bne.n	8003a2c <HAL_RCC_OscConfig+0x334>
 8003a12:	4b76      	ldr	r3, [pc, #472]	; (8003bec <HAL_RCC_OscConfig+0x4f4>)
 8003a14:	6a1b      	ldr	r3, [r3, #32]
 8003a16:	4a75      	ldr	r2, [pc, #468]	; (8003bec <HAL_RCC_OscConfig+0x4f4>)
 8003a18:	f023 0301 	bic.w	r3, r3, #1
 8003a1c:	6213      	str	r3, [r2, #32]
 8003a1e:	4b73      	ldr	r3, [pc, #460]	; (8003bec <HAL_RCC_OscConfig+0x4f4>)
 8003a20:	6a1b      	ldr	r3, [r3, #32]
 8003a22:	4a72      	ldr	r2, [pc, #456]	; (8003bec <HAL_RCC_OscConfig+0x4f4>)
 8003a24:	f023 0304 	bic.w	r3, r3, #4
 8003a28:	6213      	str	r3, [r2, #32]
 8003a2a:	e01c      	b.n	8003a66 <HAL_RCC_OscConfig+0x36e>
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	68db      	ldr	r3, [r3, #12]
 8003a30:	2b05      	cmp	r3, #5
 8003a32:	d10c      	bne.n	8003a4e <HAL_RCC_OscConfig+0x356>
 8003a34:	4b6d      	ldr	r3, [pc, #436]	; (8003bec <HAL_RCC_OscConfig+0x4f4>)
 8003a36:	6a1b      	ldr	r3, [r3, #32]
 8003a38:	4a6c      	ldr	r2, [pc, #432]	; (8003bec <HAL_RCC_OscConfig+0x4f4>)
 8003a3a:	f043 0304 	orr.w	r3, r3, #4
 8003a3e:	6213      	str	r3, [r2, #32]
 8003a40:	4b6a      	ldr	r3, [pc, #424]	; (8003bec <HAL_RCC_OscConfig+0x4f4>)
 8003a42:	6a1b      	ldr	r3, [r3, #32]
 8003a44:	4a69      	ldr	r2, [pc, #420]	; (8003bec <HAL_RCC_OscConfig+0x4f4>)
 8003a46:	f043 0301 	orr.w	r3, r3, #1
 8003a4a:	6213      	str	r3, [r2, #32]
 8003a4c:	e00b      	b.n	8003a66 <HAL_RCC_OscConfig+0x36e>
 8003a4e:	4b67      	ldr	r3, [pc, #412]	; (8003bec <HAL_RCC_OscConfig+0x4f4>)
 8003a50:	6a1b      	ldr	r3, [r3, #32]
 8003a52:	4a66      	ldr	r2, [pc, #408]	; (8003bec <HAL_RCC_OscConfig+0x4f4>)
 8003a54:	f023 0301 	bic.w	r3, r3, #1
 8003a58:	6213      	str	r3, [r2, #32]
 8003a5a:	4b64      	ldr	r3, [pc, #400]	; (8003bec <HAL_RCC_OscConfig+0x4f4>)
 8003a5c:	6a1b      	ldr	r3, [r3, #32]
 8003a5e:	4a63      	ldr	r2, [pc, #396]	; (8003bec <HAL_RCC_OscConfig+0x4f4>)
 8003a60:	f023 0304 	bic.w	r3, r3, #4
 8003a64:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	68db      	ldr	r3, [r3, #12]
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d015      	beq.n	8003a9a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a6e:	f7fd f8ab 	bl	8000bc8 <HAL_GetTick>
 8003a72:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a74:	e00a      	b.n	8003a8c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a76:	f7fd f8a7 	bl	8000bc8 <HAL_GetTick>
 8003a7a:	4602      	mov	r2, r0
 8003a7c:	693b      	ldr	r3, [r7, #16]
 8003a7e:	1ad3      	subs	r3, r2, r3
 8003a80:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a84:	4293      	cmp	r3, r2
 8003a86:	d901      	bls.n	8003a8c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003a88:	2303      	movs	r3, #3
 8003a8a:	e0ab      	b.n	8003be4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a8c:	4b57      	ldr	r3, [pc, #348]	; (8003bec <HAL_RCC_OscConfig+0x4f4>)
 8003a8e:	6a1b      	ldr	r3, [r3, #32]
 8003a90:	f003 0302 	and.w	r3, r3, #2
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d0ee      	beq.n	8003a76 <HAL_RCC_OscConfig+0x37e>
 8003a98:	e014      	b.n	8003ac4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a9a:	f7fd f895 	bl	8000bc8 <HAL_GetTick>
 8003a9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003aa0:	e00a      	b.n	8003ab8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003aa2:	f7fd f891 	bl	8000bc8 <HAL_GetTick>
 8003aa6:	4602      	mov	r2, r0
 8003aa8:	693b      	ldr	r3, [r7, #16]
 8003aaa:	1ad3      	subs	r3, r2, r3
 8003aac:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ab0:	4293      	cmp	r3, r2
 8003ab2:	d901      	bls.n	8003ab8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003ab4:	2303      	movs	r3, #3
 8003ab6:	e095      	b.n	8003be4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ab8:	4b4c      	ldr	r3, [pc, #304]	; (8003bec <HAL_RCC_OscConfig+0x4f4>)
 8003aba:	6a1b      	ldr	r3, [r3, #32]
 8003abc:	f003 0302 	and.w	r3, r3, #2
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d1ee      	bne.n	8003aa2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003ac4:	7dfb      	ldrb	r3, [r7, #23]
 8003ac6:	2b01      	cmp	r3, #1
 8003ac8:	d105      	bne.n	8003ad6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003aca:	4b48      	ldr	r3, [pc, #288]	; (8003bec <HAL_RCC_OscConfig+0x4f4>)
 8003acc:	69db      	ldr	r3, [r3, #28]
 8003ace:	4a47      	ldr	r2, [pc, #284]	; (8003bec <HAL_RCC_OscConfig+0x4f4>)
 8003ad0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ad4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	69db      	ldr	r3, [r3, #28]
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	f000 8081 	beq.w	8003be2 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003ae0:	4b42      	ldr	r3, [pc, #264]	; (8003bec <HAL_RCC_OscConfig+0x4f4>)
 8003ae2:	685b      	ldr	r3, [r3, #4]
 8003ae4:	f003 030c 	and.w	r3, r3, #12
 8003ae8:	2b08      	cmp	r3, #8
 8003aea:	d061      	beq.n	8003bb0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	69db      	ldr	r3, [r3, #28]
 8003af0:	2b02      	cmp	r3, #2
 8003af2:	d146      	bne.n	8003b82 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003af4:	4b3f      	ldr	r3, [pc, #252]	; (8003bf4 <HAL_RCC_OscConfig+0x4fc>)
 8003af6:	2200      	movs	r2, #0
 8003af8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003afa:	f7fd f865 	bl	8000bc8 <HAL_GetTick>
 8003afe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003b00:	e008      	b.n	8003b14 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b02:	f7fd f861 	bl	8000bc8 <HAL_GetTick>
 8003b06:	4602      	mov	r2, r0
 8003b08:	693b      	ldr	r3, [r7, #16]
 8003b0a:	1ad3      	subs	r3, r2, r3
 8003b0c:	2b02      	cmp	r3, #2
 8003b0e:	d901      	bls.n	8003b14 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003b10:	2303      	movs	r3, #3
 8003b12:	e067      	b.n	8003be4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003b14:	4b35      	ldr	r3, [pc, #212]	; (8003bec <HAL_RCC_OscConfig+0x4f4>)
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d1f0      	bne.n	8003b02 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	6a1b      	ldr	r3, [r3, #32]
 8003b24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b28:	d108      	bne.n	8003b3c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003b2a:	4b30      	ldr	r3, [pc, #192]	; (8003bec <HAL_RCC_OscConfig+0x4f4>)
 8003b2c:	685b      	ldr	r3, [r3, #4]
 8003b2e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	689b      	ldr	r3, [r3, #8]
 8003b36:	492d      	ldr	r1, [pc, #180]	; (8003bec <HAL_RCC_OscConfig+0x4f4>)
 8003b38:	4313      	orrs	r3, r2
 8003b3a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003b3c:	4b2b      	ldr	r3, [pc, #172]	; (8003bec <HAL_RCC_OscConfig+0x4f4>)
 8003b3e:	685b      	ldr	r3, [r3, #4]
 8003b40:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	6a19      	ldr	r1, [r3, #32]
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b4c:	430b      	orrs	r3, r1
 8003b4e:	4927      	ldr	r1, [pc, #156]	; (8003bec <HAL_RCC_OscConfig+0x4f4>)
 8003b50:	4313      	orrs	r3, r2
 8003b52:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003b54:	4b27      	ldr	r3, [pc, #156]	; (8003bf4 <HAL_RCC_OscConfig+0x4fc>)
 8003b56:	2201      	movs	r2, #1
 8003b58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b5a:	f7fd f835 	bl	8000bc8 <HAL_GetTick>
 8003b5e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003b60:	e008      	b.n	8003b74 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b62:	f7fd f831 	bl	8000bc8 <HAL_GetTick>
 8003b66:	4602      	mov	r2, r0
 8003b68:	693b      	ldr	r3, [r7, #16]
 8003b6a:	1ad3      	subs	r3, r2, r3
 8003b6c:	2b02      	cmp	r3, #2
 8003b6e:	d901      	bls.n	8003b74 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003b70:	2303      	movs	r3, #3
 8003b72:	e037      	b.n	8003be4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003b74:	4b1d      	ldr	r3, [pc, #116]	; (8003bec <HAL_RCC_OscConfig+0x4f4>)
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d0f0      	beq.n	8003b62 <HAL_RCC_OscConfig+0x46a>
 8003b80:	e02f      	b.n	8003be2 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b82:	4b1c      	ldr	r3, [pc, #112]	; (8003bf4 <HAL_RCC_OscConfig+0x4fc>)
 8003b84:	2200      	movs	r2, #0
 8003b86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b88:	f7fd f81e 	bl	8000bc8 <HAL_GetTick>
 8003b8c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003b8e:	e008      	b.n	8003ba2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b90:	f7fd f81a 	bl	8000bc8 <HAL_GetTick>
 8003b94:	4602      	mov	r2, r0
 8003b96:	693b      	ldr	r3, [r7, #16]
 8003b98:	1ad3      	subs	r3, r2, r3
 8003b9a:	2b02      	cmp	r3, #2
 8003b9c:	d901      	bls.n	8003ba2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003b9e:	2303      	movs	r3, #3
 8003ba0:	e020      	b.n	8003be4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003ba2:	4b12      	ldr	r3, [pc, #72]	; (8003bec <HAL_RCC_OscConfig+0x4f4>)
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d1f0      	bne.n	8003b90 <HAL_RCC_OscConfig+0x498>
 8003bae:	e018      	b.n	8003be2 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	69db      	ldr	r3, [r3, #28]
 8003bb4:	2b01      	cmp	r3, #1
 8003bb6:	d101      	bne.n	8003bbc <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8003bb8:	2301      	movs	r3, #1
 8003bba:	e013      	b.n	8003be4 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003bbc:	4b0b      	ldr	r3, [pc, #44]	; (8003bec <HAL_RCC_OscConfig+0x4f4>)
 8003bbe:	685b      	ldr	r3, [r3, #4]
 8003bc0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	6a1b      	ldr	r3, [r3, #32]
 8003bcc:	429a      	cmp	r2, r3
 8003bce:	d106      	bne.n	8003bde <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003bda:	429a      	cmp	r2, r3
 8003bdc:	d001      	beq.n	8003be2 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8003bde:	2301      	movs	r3, #1
 8003be0:	e000      	b.n	8003be4 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8003be2:	2300      	movs	r3, #0
}
 8003be4:	4618      	mov	r0, r3
 8003be6:	3718      	adds	r7, #24
 8003be8:	46bd      	mov	sp, r7
 8003bea:	bd80      	pop	{r7, pc}
 8003bec:	40021000 	.word	0x40021000
 8003bf0:	40007000 	.word	0x40007000
 8003bf4:	42420060 	.word	0x42420060

08003bf8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	b084      	sub	sp, #16
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	6078      	str	r0, [r7, #4]
 8003c00:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d101      	bne.n	8003c0c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003c08:	2301      	movs	r3, #1
 8003c0a:	e0d0      	b.n	8003dae <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003c0c:	4b6a      	ldr	r3, [pc, #424]	; (8003db8 <HAL_RCC_ClockConfig+0x1c0>)
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f003 0307 	and.w	r3, r3, #7
 8003c14:	683a      	ldr	r2, [r7, #0]
 8003c16:	429a      	cmp	r2, r3
 8003c18:	d910      	bls.n	8003c3c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c1a:	4b67      	ldr	r3, [pc, #412]	; (8003db8 <HAL_RCC_ClockConfig+0x1c0>)
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f023 0207 	bic.w	r2, r3, #7
 8003c22:	4965      	ldr	r1, [pc, #404]	; (8003db8 <HAL_RCC_ClockConfig+0x1c0>)
 8003c24:	683b      	ldr	r3, [r7, #0]
 8003c26:	4313      	orrs	r3, r2
 8003c28:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c2a:	4b63      	ldr	r3, [pc, #396]	; (8003db8 <HAL_RCC_ClockConfig+0x1c0>)
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f003 0307 	and.w	r3, r3, #7
 8003c32:	683a      	ldr	r2, [r7, #0]
 8003c34:	429a      	cmp	r2, r3
 8003c36:	d001      	beq.n	8003c3c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003c38:	2301      	movs	r3, #1
 8003c3a:	e0b8      	b.n	8003dae <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f003 0302 	and.w	r3, r3, #2
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d020      	beq.n	8003c8a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f003 0304 	and.w	r3, r3, #4
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d005      	beq.n	8003c60 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003c54:	4b59      	ldr	r3, [pc, #356]	; (8003dbc <HAL_RCC_ClockConfig+0x1c4>)
 8003c56:	685b      	ldr	r3, [r3, #4]
 8003c58:	4a58      	ldr	r2, [pc, #352]	; (8003dbc <HAL_RCC_ClockConfig+0x1c4>)
 8003c5a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003c5e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f003 0308 	and.w	r3, r3, #8
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d005      	beq.n	8003c78 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003c6c:	4b53      	ldr	r3, [pc, #332]	; (8003dbc <HAL_RCC_ClockConfig+0x1c4>)
 8003c6e:	685b      	ldr	r3, [r3, #4]
 8003c70:	4a52      	ldr	r2, [pc, #328]	; (8003dbc <HAL_RCC_ClockConfig+0x1c4>)
 8003c72:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003c76:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c78:	4b50      	ldr	r3, [pc, #320]	; (8003dbc <HAL_RCC_ClockConfig+0x1c4>)
 8003c7a:	685b      	ldr	r3, [r3, #4]
 8003c7c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	689b      	ldr	r3, [r3, #8]
 8003c84:	494d      	ldr	r1, [pc, #308]	; (8003dbc <HAL_RCC_ClockConfig+0x1c4>)
 8003c86:	4313      	orrs	r3, r2
 8003c88:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f003 0301 	and.w	r3, r3, #1
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d040      	beq.n	8003d18 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	685b      	ldr	r3, [r3, #4]
 8003c9a:	2b01      	cmp	r3, #1
 8003c9c:	d107      	bne.n	8003cae <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c9e:	4b47      	ldr	r3, [pc, #284]	; (8003dbc <HAL_RCC_ClockConfig+0x1c4>)
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d115      	bne.n	8003cd6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003caa:	2301      	movs	r3, #1
 8003cac:	e07f      	b.n	8003dae <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	685b      	ldr	r3, [r3, #4]
 8003cb2:	2b02      	cmp	r3, #2
 8003cb4:	d107      	bne.n	8003cc6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003cb6:	4b41      	ldr	r3, [pc, #260]	; (8003dbc <HAL_RCC_ClockConfig+0x1c4>)
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d109      	bne.n	8003cd6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003cc2:	2301      	movs	r3, #1
 8003cc4:	e073      	b.n	8003dae <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003cc6:	4b3d      	ldr	r3, [pc, #244]	; (8003dbc <HAL_RCC_ClockConfig+0x1c4>)
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f003 0302 	and.w	r3, r3, #2
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d101      	bne.n	8003cd6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003cd2:	2301      	movs	r3, #1
 8003cd4:	e06b      	b.n	8003dae <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003cd6:	4b39      	ldr	r3, [pc, #228]	; (8003dbc <HAL_RCC_ClockConfig+0x1c4>)
 8003cd8:	685b      	ldr	r3, [r3, #4]
 8003cda:	f023 0203 	bic.w	r2, r3, #3
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	685b      	ldr	r3, [r3, #4]
 8003ce2:	4936      	ldr	r1, [pc, #216]	; (8003dbc <HAL_RCC_ClockConfig+0x1c4>)
 8003ce4:	4313      	orrs	r3, r2
 8003ce6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003ce8:	f7fc ff6e 	bl	8000bc8 <HAL_GetTick>
 8003cec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003cee:	e00a      	b.n	8003d06 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003cf0:	f7fc ff6a 	bl	8000bc8 <HAL_GetTick>
 8003cf4:	4602      	mov	r2, r0
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	1ad3      	subs	r3, r2, r3
 8003cfa:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cfe:	4293      	cmp	r3, r2
 8003d00:	d901      	bls.n	8003d06 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003d02:	2303      	movs	r3, #3
 8003d04:	e053      	b.n	8003dae <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d06:	4b2d      	ldr	r3, [pc, #180]	; (8003dbc <HAL_RCC_ClockConfig+0x1c4>)
 8003d08:	685b      	ldr	r3, [r3, #4]
 8003d0a:	f003 020c 	and.w	r2, r3, #12
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	685b      	ldr	r3, [r3, #4]
 8003d12:	009b      	lsls	r3, r3, #2
 8003d14:	429a      	cmp	r2, r3
 8003d16:	d1eb      	bne.n	8003cf0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003d18:	4b27      	ldr	r3, [pc, #156]	; (8003db8 <HAL_RCC_ClockConfig+0x1c0>)
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f003 0307 	and.w	r3, r3, #7
 8003d20:	683a      	ldr	r2, [r7, #0]
 8003d22:	429a      	cmp	r2, r3
 8003d24:	d210      	bcs.n	8003d48 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d26:	4b24      	ldr	r3, [pc, #144]	; (8003db8 <HAL_RCC_ClockConfig+0x1c0>)
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f023 0207 	bic.w	r2, r3, #7
 8003d2e:	4922      	ldr	r1, [pc, #136]	; (8003db8 <HAL_RCC_ClockConfig+0x1c0>)
 8003d30:	683b      	ldr	r3, [r7, #0]
 8003d32:	4313      	orrs	r3, r2
 8003d34:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d36:	4b20      	ldr	r3, [pc, #128]	; (8003db8 <HAL_RCC_ClockConfig+0x1c0>)
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f003 0307 	and.w	r3, r3, #7
 8003d3e:	683a      	ldr	r2, [r7, #0]
 8003d40:	429a      	cmp	r2, r3
 8003d42:	d001      	beq.n	8003d48 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003d44:	2301      	movs	r3, #1
 8003d46:	e032      	b.n	8003dae <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f003 0304 	and.w	r3, r3, #4
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d008      	beq.n	8003d66 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003d54:	4b19      	ldr	r3, [pc, #100]	; (8003dbc <HAL_RCC_ClockConfig+0x1c4>)
 8003d56:	685b      	ldr	r3, [r3, #4]
 8003d58:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	68db      	ldr	r3, [r3, #12]
 8003d60:	4916      	ldr	r1, [pc, #88]	; (8003dbc <HAL_RCC_ClockConfig+0x1c4>)
 8003d62:	4313      	orrs	r3, r2
 8003d64:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f003 0308 	and.w	r3, r3, #8
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d009      	beq.n	8003d86 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003d72:	4b12      	ldr	r3, [pc, #72]	; (8003dbc <HAL_RCC_ClockConfig+0x1c4>)
 8003d74:	685b      	ldr	r3, [r3, #4]
 8003d76:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	691b      	ldr	r3, [r3, #16]
 8003d7e:	00db      	lsls	r3, r3, #3
 8003d80:	490e      	ldr	r1, [pc, #56]	; (8003dbc <HAL_RCC_ClockConfig+0x1c4>)
 8003d82:	4313      	orrs	r3, r2
 8003d84:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003d86:	f000 f821 	bl	8003dcc <HAL_RCC_GetSysClockFreq>
 8003d8a:	4601      	mov	r1, r0
 8003d8c:	4b0b      	ldr	r3, [pc, #44]	; (8003dbc <HAL_RCC_ClockConfig+0x1c4>)
 8003d8e:	685b      	ldr	r3, [r3, #4]
 8003d90:	091b      	lsrs	r3, r3, #4
 8003d92:	f003 030f 	and.w	r3, r3, #15
 8003d96:	4a0a      	ldr	r2, [pc, #40]	; (8003dc0 <HAL_RCC_ClockConfig+0x1c8>)
 8003d98:	5cd3      	ldrb	r3, [r2, r3]
 8003d9a:	fa21 f303 	lsr.w	r3, r1, r3
 8003d9e:	4a09      	ldr	r2, [pc, #36]	; (8003dc4 <HAL_RCC_ClockConfig+0x1cc>)
 8003da0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003da2:	4b09      	ldr	r3, [pc, #36]	; (8003dc8 <HAL_RCC_ClockConfig+0x1d0>)
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	4618      	mov	r0, r3
 8003da8:	f7fc fecc 	bl	8000b44 <HAL_InitTick>

  return HAL_OK;
 8003dac:	2300      	movs	r3, #0
}
 8003dae:	4618      	mov	r0, r3
 8003db0:	3710      	adds	r7, #16
 8003db2:	46bd      	mov	sp, r7
 8003db4:	bd80      	pop	{r7, pc}
 8003db6:	bf00      	nop
 8003db8:	40022000 	.word	0x40022000
 8003dbc:	40021000 	.word	0x40021000
 8003dc0:	08008a90 	.word	0x08008a90
 8003dc4:	20000004 	.word	0x20000004
 8003dc8:	20000008 	.word	0x20000008

08003dcc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003dcc:	b490      	push	{r4, r7}
 8003dce:	b08a      	sub	sp, #40	; 0x28
 8003dd0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003dd2:	4b2a      	ldr	r3, [pc, #168]	; (8003e7c <HAL_RCC_GetSysClockFreq+0xb0>)
 8003dd4:	1d3c      	adds	r4, r7, #4
 8003dd6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003dd8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003ddc:	4b28      	ldr	r3, [pc, #160]	; (8003e80 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003dde:	881b      	ldrh	r3, [r3, #0]
 8003de0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003de2:	2300      	movs	r3, #0
 8003de4:	61fb      	str	r3, [r7, #28]
 8003de6:	2300      	movs	r3, #0
 8003de8:	61bb      	str	r3, [r7, #24]
 8003dea:	2300      	movs	r3, #0
 8003dec:	627b      	str	r3, [r7, #36]	; 0x24
 8003dee:	2300      	movs	r3, #0
 8003df0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003df2:	2300      	movs	r3, #0
 8003df4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003df6:	4b23      	ldr	r3, [pc, #140]	; (8003e84 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003df8:	685b      	ldr	r3, [r3, #4]
 8003dfa:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003dfc:	69fb      	ldr	r3, [r7, #28]
 8003dfe:	f003 030c 	and.w	r3, r3, #12
 8003e02:	2b04      	cmp	r3, #4
 8003e04:	d002      	beq.n	8003e0c <HAL_RCC_GetSysClockFreq+0x40>
 8003e06:	2b08      	cmp	r3, #8
 8003e08:	d003      	beq.n	8003e12 <HAL_RCC_GetSysClockFreq+0x46>
 8003e0a:	e02d      	b.n	8003e68 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003e0c:	4b1e      	ldr	r3, [pc, #120]	; (8003e88 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003e0e:	623b      	str	r3, [r7, #32]
      break;
 8003e10:	e02d      	b.n	8003e6e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003e12:	69fb      	ldr	r3, [r7, #28]
 8003e14:	0c9b      	lsrs	r3, r3, #18
 8003e16:	f003 030f 	and.w	r3, r3, #15
 8003e1a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003e1e:	4413      	add	r3, r2
 8003e20:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003e24:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003e26:	69fb      	ldr	r3, [r7, #28]
 8003e28:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d013      	beq.n	8003e58 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003e30:	4b14      	ldr	r3, [pc, #80]	; (8003e84 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003e32:	685b      	ldr	r3, [r3, #4]
 8003e34:	0c5b      	lsrs	r3, r3, #17
 8003e36:	f003 0301 	and.w	r3, r3, #1
 8003e3a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003e3e:	4413      	add	r3, r2
 8003e40:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003e44:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003e46:	697b      	ldr	r3, [r7, #20]
 8003e48:	4a0f      	ldr	r2, [pc, #60]	; (8003e88 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003e4a:	fb02 f203 	mul.w	r2, r2, r3
 8003e4e:	69bb      	ldr	r3, [r7, #24]
 8003e50:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e54:	627b      	str	r3, [r7, #36]	; 0x24
 8003e56:	e004      	b.n	8003e62 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003e58:	697b      	ldr	r3, [r7, #20]
 8003e5a:	4a0c      	ldr	r2, [pc, #48]	; (8003e8c <HAL_RCC_GetSysClockFreq+0xc0>)
 8003e5c:	fb02 f303 	mul.w	r3, r2, r3
 8003e60:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003e62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e64:	623b      	str	r3, [r7, #32]
      break;
 8003e66:	e002      	b.n	8003e6e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003e68:	4b07      	ldr	r3, [pc, #28]	; (8003e88 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003e6a:	623b      	str	r3, [r7, #32]
      break;
 8003e6c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003e6e:	6a3b      	ldr	r3, [r7, #32]
}
 8003e70:	4618      	mov	r0, r3
 8003e72:	3728      	adds	r7, #40	; 0x28
 8003e74:	46bd      	mov	sp, r7
 8003e76:	bc90      	pop	{r4, r7}
 8003e78:	4770      	bx	lr
 8003e7a:	bf00      	nop
 8003e7c:	08008a20 	.word	0x08008a20
 8003e80:	08008a30 	.word	0x08008a30
 8003e84:	40021000 	.word	0x40021000
 8003e88:	007a1200 	.word	0x007a1200
 8003e8c:	003d0900 	.word	0x003d0900

08003e90 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003e90:	b480      	push	{r7}
 8003e92:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003e94:	4b02      	ldr	r3, [pc, #8]	; (8003ea0 <HAL_RCC_GetHCLKFreq+0x10>)
 8003e96:	681b      	ldr	r3, [r3, #0]
}
 8003e98:	4618      	mov	r0, r3
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	bc80      	pop	{r7}
 8003e9e:	4770      	bx	lr
 8003ea0:	20000004 	.word	0x20000004

08003ea4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003ea4:	b580      	push	{r7, lr}
 8003ea6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003ea8:	f7ff fff2 	bl	8003e90 <HAL_RCC_GetHCLKFreq>
 8003eac:	4601      	mov	r1, r0
 8003eae:	4b05      	ldr	r3, [pc, #20]	; (8003ec4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003eb0:	685b      	ldr	r3, [r3, #4]
 8003eb2:	0adb      	lsrs	r3, r3, #11
 8003eb4:	f003 0307 	and.w	r3, r3, #7
 8003eb8:	4a03      	ldr	r2, [pc, #12]	; (8003ec8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003eba:	5cd3      	ldrb	r3, [r2, r3]
 8003ebc:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003ec0:	4618      	mov	r0, r3
 8003ec2:	bd80      	pop	{r7, pc}
 8003ec4:	40021000 	.word	0x40021000
 8003ec8:	08008aa0 	.word	0x08008aa0

08003ecc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003ecc:	b480      	push	{r7}
 8003ece:	b085      	sub	sp, #20
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003ed4:	4b0a      	ldr	r3, [pc, #40]	; (8003f00 <RCC_Delay+0x34>)
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	4a0a      	ldr	r2, [pc, #40]	; (8003f04 <RCC_Delay+0x38>)
 8003eda:	fba2 2303 	umull	r2, r3, r2, r3
 8003ede:	0a5b      	lsrs	r3, r3, #9
 8003ee0:	687a      	ldr	r2, [r7, #4]
 8003ee2:	fb02 f303 	mul.w	r3, r2, r3
 8003ee6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003ee8:	bf00      	nop
  }
  while (Delay --);
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	1e5a      	subs	r2, r3, #1
 8003eee:	60fa      	str	r2, [r7, #12]
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d1f9      	bne.n	8003ee8 <RCC_Delay+0x1c>
}
 8003ef4:	bf00      	nop
 8003ef6:	3714      	adds	r7, #20
 8003ef8:	46bd      	mov	sp, r7
 8003efa:	bc80      	pop	{r7}
 8003efc:	4770      	bx	lr
 8003efe:	bf00      	nop
 8003f00:	20000004 	.word	0x20000004
 8003f04:	10624dd3 	.word	0x10624dd3

08003f08 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003f08:	b580      	push	{r7, lr}
 8003f0a:	b086      	sub	sp, #24
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003f10:	2300      	movs	r3, #0
 8003f12:	613b      	str	r3, [r7, #16]
 8003f14:	2300      	movs	r3, #0
 8003f16:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f003 0301 	and.w	r3, r3, #1
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d07d      	beq.n	8004020 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8003f24:	2300      	movs	r3, #0
 8003f26:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003f28:	4b4f      	ldr	r3, [pc, #316]	; (8004068 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f2a:	69db      	ldr	r3, [r3, #28]
 8003f2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d10d      	bne.n	8003f50 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f34:	4b4c      	ldr	r3, [pc, #304]	; (8004068 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f36:	69db      	ldr	r3, [r3, #28]
 8003f38:	4a4b      	ldr	r2, [pc, #300]	; (8004068 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f3a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f3e:	61d3      	str	r3, [r2, #28]
 8003f40:	4b49      	ldr	r3, [pc, #292]	; (8004068 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f42:	69db      	ldr	r3, [r3, #28]
 8003f44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f48:	60bb      	str	r3, [r7, #8]
 8003f4a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003f4c:	2301      	movs	r3, #1
 8003f4e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f50:	4b46      	ldr	r3, [pc, #280]	; (800406c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d118      	bne.n	8003f8e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003f5c:	4b43      	ldr	r3, [pc, #268]	; (800406c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	4a42      	ldr	r2, [pc, #264]	; (800406c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003f62:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f66:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003f68:	f7fc fe2e 	bl	8000bc8 <HAL_GetTick>
 8003f6c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f6e:	e008      	b.n	8003f82 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f70:	f7fc fe2a 	bl	8000bc8 <HAL_GetTick>
 8003f74:	4602      	mov	r2, r0
 8003f76:	693b      	ldr	r3, [r7, #16]
 8003f78:	1ad3      	subs	r3, r2, r3
 8003f7a:	2b64      	cmp	r3, #100	; 0x64
 8003f7c:	d901      	bls.n	8003f82 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003f7e:	2303      	movs	r3, #3
 8003f80:	e06d      	b.n	800405e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f82:	4b3a      	ldr	r3, [pc, #232]	; (800406c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d0f0      	beq.n	8003f70 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003f8e:	4b36      	ldr	r3, [pc, #216]	; (8004068 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f90:	6a1b      	ldr	r3, [r3, #32]
 8003f92:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f96:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d02e      	beq.n	8003ffc <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	685b      	ldr	r3, [r3, #4]
 8003fa2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003fa6:	68fa      	ldr	r2, [r7, #12]
 8003fa8:	429a      	cmp	r2, r3
 8003faa:	d027      	beq.n	8003ffc <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003fac:	4b2e      	ldr	r3, [pc, #184]	; (8004068 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003fae:	6a1b      	ldr	r3, [r3, #32]
 8003fb0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003fb4:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003fb6:	4b2e      	ldr	r3, [pc, #184]	; (8004070 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003fb8:	2201      	movs	r2, #1
 8003fba:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003fbc:	4b2c      	ldr	r3, [pc, #176]	; (8004070 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003fbe:	2200      	movs	r2, #0
 8003fc0:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003fc2:	4a29      	ldr	r2, [pc, #164]	; (8004068 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	f003 0301 	and.w	r3, r3, #1
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d014      	beq.n	8003ffc <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fd2:	f7fc fdf9 	bl	8000bc8 <HAL_GetTick>
 8003fd6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003fd8:	e00a      	b.n	8003ff0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003fda:	f7fc fdf5 	bl	8000bc8 <HAL_GetTick>
 8003fde:	4602      	mov	r2, r0
 8003fe0:	693b      	ldr	r3, [r7, #16]
 8003fe2:	1ad3      	subs	r3, r2, r3
 8003fe4:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fe8:	4293      	cmp	r3, r2
 8003fea:	d901      	bls.n	8003ff0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003fec:	2303      	movs	r3, #3
 8003fee:	e036      	b.n	800405e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ff0:	4b1d      	ldr	r3, [pc, #116]	; (8004068 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ff2:	6a1b      	ldr	r3, [r3, #32]
 8003ff4:	f003 0302 	and.w	r3, r3, #2
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d0ee      	beq.n	8003fda <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003ffc:	4b1a      	ldr	r3, [pc, #104]	; (8004068 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ffe:	6a1b      	ldr	r3, [r3, #32]
 8004000:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	685b      	ldr	r3, [r3, #4]
 8004008:	4917      	ldr	r1, [pc, #92]	; (8004068 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800400a:	4313      	orrs	r3, r2
 800400c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800400e:	7dfb      	ldrb	r3, [r7, #23]
 8004010:	2b01      	cmp	r3, #1
 8004012:	d105      	bne.n	8004020 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004014:	4b14      	ldr	r3, [pc, #80]	; (8004068 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004016:	69db      	ldr	r3, [r3, #28]
 8004018:	4a13      	ldr	r2, [pc, #76]	; (8004068 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800401a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800401e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f003 0302 	and.w	r3, r3, #2
 8004028:	2b00      	cmp	r3, #0
 800402a:	d008      	beq.n	800403e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800402c:	4b0e      	ldr	r3, [pc, #56]	; (8004068 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800402e:	685b      	ldr	r3, [r3, #4]
 8004030:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	689b      	ldr	r3, [r3, #8]
 8004038:	490b      	ldr	r1, [pc, #44]	; (8004068 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800403a:	4313      	orrs	r3, r2
 800403c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f003 0310 	and.w	r3, r3, #16
 8004046:	2b00      	cmp	r3, #0
 8004048:	d008      	beq.n	800405c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800404a:	4b07      	ldr	r3, [pc, #28]	; (8004068 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800404c:	685b      	ldr	r3, [r3, #4]
 800404e:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	68db      	ldr	r3, [r3, #12]
 8004056:	4904      	ldr	r1, [pc, #16]	; (8004068 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004058:	4313      	orrs	r3, r2
 800405a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800405c:	2300      	movs	r3, #0
}
 800405e:	4618      	mov	r0, r3
 8004060:	3718      	adds	r7, #24
 8004062:	46bd      	mov	sp, r7
 8004064:	bd80      	pop	{r7, pc}
 8004066:	bf00      	nop
 8004068:	40021000 	.word	0x40021000
 800406c:	40007000 	.word	0x40007000
 8004070:	42420440 	.word	0x42420440

08004074 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004074:	b590      	push	{r4, r7, lr}
 8004076:	b08d      	sub	sp, #52	; 0x34
 8004078:	af00      	add	r7, sp, #0
 800407a:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800407c:	4b55      	ldr	r3, [pc, #340]	; (80041d4 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 800407e:	f107 040c 	add.w	r4, r7, #12
 8004082:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004084:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004088:	4b53      	ldr	r3, [pc, #332]	; (80041d8 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 800408a:	881b      	ldrh	r3, [r3, #0]
 800408c:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 800408e:	2300      	movs	r3, #0
 8004090:	627b      	str	r3, [r7, #36]	; 0x24
 8004092:	2300      	movs	r3, #0
 8004094:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004096:	2300      	movs	r3, #0
 8004098:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 800409a:	2300      	movs	r3, #0
 800409c:	61fb      	str	r3, [r7, #28]
 800409e:	2300      	movs	r3, #0
 80040a0:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	2b02      	cmp	r3, #2
 80040a6:	d07f      	beq.n	80041a8 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 80040a8:	2b10      	cmp	r3, #16
 80040aa:	d002      	beq.n	80040b2 <HAL_RCCEx_GetPeriphCLKFreq+0x3e>
 80040ac:	2b01      	cmp	r3, #1
 80040ae:	d048      	beq.n	8004142 <HAL_RCCEx_GetPeriphCLKFreq+0xce>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 80040b0:	e08b      	b.n	80041ca <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      temp_reg = RCC->CFGR;
 80040b2:	4b4a      	ldr	r3, [pc, #296]	; (80041dc <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80040b4:	685b      	ldr	r3, [r3, #4]
 80040b6:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 80040b8:	4b48      	ldr	r3, [pc, #288]	; (80041dc <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d07f      	beq.n	80041c4 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80040c4:	69fb      	ldr	r3, [r7, #28]
 80040c6:	0c9b      	lsrs	r3, r3, #18
 80040c8:	f003 030f 	and.w	r3, r3, #15
 80040cc:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80040d0:	4413      	add	r3, r2
 80040d2:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80040d6:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80040d8:	69fb      	ldr	r3, [r7, #28]
 80040da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d018      	beq.n	8004114 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80040e2:	4b3e      	ldr	r3, [pc, #248]	; (80041dc <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80040e4:	685b      	ldr	r3, [r3, #4]
 80040e6:	0c5b      	lsrs	r3, r3, #17
 80040e8:	f003 0301 	and.w	r3, r3, #1
 80040ec:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80040f0:	4413      	add	r3, r2
 80040f2:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80040f6:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80040f8:	69fb      	ldr	r3, [r7, #28]
 80040fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d00d      	beq.n	800411e <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8004102:	4a37      	ldr	r2, [pc, #220]	; (80041e0 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>)
 8004104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004106:	fbb2 f2f3 	udiv	r2, r2, r3
 800410a:	6a3b      	ldr	r3, [r7, #32]
 800410c:	fb02 f303 	mul.w	r3, r2, r3
 8004110:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004112:	e004      	b.n	800411e <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004114:	6a3b      	ldr	r3, [r7, #32]
 8004116:	4a33      	ldr	r2, [pc, #204]	; (80041e4 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8004118:	fb02 f303 	mul.w	r3, r2, r3
 800411c:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 800411e:	4b2f      	ldr	r3, [pc, #188]	; (80041dc <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8004120:	685b      	ldr	r3, [r3, #4]
 8004122:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004126:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800412a:	d102      	bne.n	8004132 <HAL_RCCEx_GetPeriphCLKFreq+0xbe>
          frequency = pllclk;
 800412c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800412e:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8004130:	e048      	b.n	80041c4 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
          frequency = (pllclk * 2) / 3;
 8004132:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004134:	005b      	lsls	r3, r3, #1
 8004136:	4a2c      	ldr	r2, [pc, #176]	; (80041e8 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 8004138:	fba2 2303 	umull	r2, r3, r2, r3
 800413c:	085b      	lsrs	r3, r3, #1
 800413e:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8004140:	e040      	b.n	80041c4 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
      temp_reg = RCC->BDCR;
 8004142:	4b26      	ldr	r3, [pc, #152]	; (80041dc <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8004144:	6a1b      	ldr	r3, [r3, #32]
 8004146:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8004148:	69fb      	ldr	r3, [r7, #28]
 800414a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800414e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004152:	d108      	bne.n	8004166 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
 8004154:	69fb      	ldr	r3, [r7, #28]
 8004156:	f003 0302 	and.w	r3, r3, #2
 800415a:	2b00      	cmp	r3, #0
 800415c:	d003      	beq.n	8004166 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
        frequency = LSE_VALUE;
 800415e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004162:	62bb      	str	r3, [r7, #40]	; 0x28
 8004164:	e01f      	b.n	80041a6 <HAL_RCCEx_GetPeriphCLKFreq+0x132>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8004166:	69fb      	ldr	r3, [r7, #28]
 8004168:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800416c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004170:	d109      	bne.n	8004186 <HAL_RCCEx_GetPeriphCLKFreq+0x112>
 8004172:	4b1a      	ldr	r3, [pc, #104]	; (80041dc <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8004174:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004176:	f003 0302 	and.w	r3, r3, #2
 800417a:	2b00      	cmp	r3, #0
 800417c:	d003      	beq.n	8004186 <HAL_RCCEx_GetPeriphCLKFreq+0x112>
        frequency = LSI_VALUE;
 800417e:	f649 4340 	movw	r3, #40000	; 0x9c40
 8004182:	62bb      	str	r3, [r7, #40]	; 0x28
 8004184:	e00f      	b.n	80041a6 <HAL_RCCEx_GetPeriphCLKFreq+0x132>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8004186:	69fb      	ldr	r3, [r7, #28]
 8004188:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800418c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004190:	d11a      	bne.n	80041c8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 8004192:	4b12      	ldr	r3, [pc, #72]	; (80041dc <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800419a:	2b00      	cmp	r3, #0
 800419c:	d014      	beq.n	80041c8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
        frequency = HSE_VALUE / 128U;
 800419e:	f24f 4324 	movw	r3, #62500	; 0xf424
 80041a2:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80041a4:	e010      	b.n	80041c8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 80041a6:	e00f      	b.n	80041c8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 80041a8:	f7ff fe7c 	bl	8003ea4 <HAL_RCC_GetPCLK2Freq>
 80041ac:	4602      	mov	r2, r0
 80041ae:	4b0b      	ldr	r3, [pc, #44]	; (80041dc <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80041b0:	685b      	ldr	r3, [r3, #4]
 80041b2:	0b9b      	lsrs	r3, r3, #14
 80041b4:	f003 0303 	and.w	r3, r3, #3
 80041b8:	3301      	adds	r3, #1
 80041ba:	005b      	lsls	r3, r3, #1
 80041bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80041c0:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80041c2:	e002      	b.n	80041ca <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      break;
 80041c4:	bf00      	nop
 80041c6:	e000      	b.n	80041ca <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      break;
 80041c8:	bf00      	nop
    }
  }
  return (frequency);
 80041ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 80041cc:	4618      	mov	r0, r3
 80041ce:	3734      	adds	r7, #52	; 0x34
 80041d0:	46bd      	mov	sp, r7
 80041d2:	bd90      	pop	{r4, r7, pc}
 80041d4:	08008a34 	.word	0x08008a34
 80041d8:	08008a44 	.word	0x08008a44
 80041dc:	40021000 	.word	0x40021000
 80041e0:	007a1200 	.word	0x007a1200
 80041e4:	003d0900 	.word	0x003d0900
 80041e8:	aaaaaaab 	.word	0xaaaaaaab

080041ec <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80041ec:	b580      	push	{r7, lr}
 80041ee:	b082      	sub	sp, #8
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d101      	bne.n	80041fe <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80041fa:	2301      	movs	r3, #1
 80041fc:	e076      	b.n	80042ec <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004202:	2b00      	cmp	r3, #0
 8004204:	d108      	bne.n	8004218 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	685b      	ldr	r3, [r3, #4]
 800420a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800420e:	d009      	beq.n	8004224 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	2200      	movs	r2, #0
 8004214:	61da      	str	r2, [r3, #28]
 8004216:	e005      	b.n	8004224 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	2200      	movs	r2, #0
 800421c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	2200      	movs	r2, #0
 8004222:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	2200      	movs	r2, #0
 8004228:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004230:	b2db      	uxtb	r3, r3
 8004232:	2b00      	cmp	r3, #0
 8004234:	d106      	bne.n	8004244 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	2200      	movs	r2, #0
 800423a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800423e:	6878      	ldr	r0, [r7, #4]
 8004240:	f7fc fb94 	bl	800096c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2202      	movs	r2, #2
 8004248:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	681a      	ldr	r2, [r3, #0]
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800425a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	685b      	ldr	r3, [r3, #4]
 8004260:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	689b      	ldr	r3, [r3, #8]
 8004268:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800426c:	431a      	orrs	r2, r3
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	68db      	ldr	r3, [r3, #12]
 8004272:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004276:	431a      	orrs	r2, r3
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	691b      	ldr	r3, [r3, #16]
 800427c:	f003 0302 	and.w	r3, r3, #2
 8004280:	431a      	orrs	r2, r3
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	695b      	ldr	r3, [r3, #20]
 8004286:	f003 0301 	and.w	r3, r3, #1
 800428a:	431a      	orrs	r2, r3
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	699b      	ldr	r3, [r3, #24]
 8004290:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004294:	431a      	orrs	r2, r3
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	69db      	ldr	r3, [r3, #28]
 800429a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800429e:	431a      	orrs	r2, r3
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	6a1b      	ldr	r3, [r3, #32]
 80042a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042a8:	ea42 0103 	orr.w	r1, r2, r3
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042b0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	430a      	orrs	r2, r1
 80042ba:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	699b      	ldr	r3, [r3, #24]
 80042c0:	0c1a      	lsrs	r2, r3, #16
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f002 0204 	and.w	r2, r2, #4
 80042ca:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	69da      	ldr	r2, [r3, #28]
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80042da:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	2200      	movs	r2, #0
 80042e0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	2201      	movs	r2, #1
 80042e6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80042ea:	2300      	movs	r3, #0
}
 80042ec:	4618      	mov	r0, r3
 80042ee:	3708      	adds	r7, #8
 80042f0:	46bd      	mov	sp, r7
 80042f2:	bd80      	pop	{r7, pc}

080042f4 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80042f4:	b580      	push	{r7, lr}
 80042f6:	b088      	sub	sp, #32
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	60f8      	str	r0, [r7, #12]
 80042fc:	60b9      	str	r1, [r7, #8]
 80042fe:	603b      	str	r3, [r7, #0]
 8004300:	4613      	mov	r3, r2
 8004302:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004304:	2300      	movs	r3, #0
 8004306:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800430e:	2b01      	cmp	r3, #1
 8004310:	d101      	bne.n	8004316 <HAL_SPI_Transmit+0x22>
 8004312:	2302      	movs	r3, #2
 8004314:	e126      	b.n	8004564 <HAL_SPI_Transmit+0x270>
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	2201      	movs	r2, #1
 800431a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800431e:	f7fc fc53 	bl	8000bc8 <HAL_GetTick>
 8004322:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004324:	88fb      	ldrh	r3, [r7, #6]
 8004326:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800432e:	b2db      	uxtb	r3, r3
 8004330:	2b01      	cmp	r3, #1
 8004332:	d002      	beq.n	800433a <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004334:	2302      	movs	r3, #2
 8004336:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004338:	e10b      	b.n	8004552 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800433a:	68bb      	ldr	r3, [r7, #8]
 800433c:	2b00      	cmp	r3, #0
 800433e:	d002      	beq.n	8004346 <HAL_SPI_Transmit+0x52>
 8004340:	88fb      	ldrh	r3, [r7, #6]
 8004342:	2b00      	cmp	r3, #0
 8004344:	d102      	bne.n	800434c <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004346:	2301      	movs	r3, #1
 8004348:	77fb      	strb	r3, [r7, #31]
    goto error;
 800434a:	e102      	b.n	8004552 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	2203      	movs	r2, #3
 8004350:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	2200      	movs	r2, #0
 8004358:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	68ba      	ldr	r2, [r7, #8]
 800435e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	88fa      	ldrh	r2, [r7, #6]
 8004364:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	88fa      	ldrh	r2, [r7, #6]
 800436a:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	2200      	movs	r2, #0
 8004370:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	2200      	movs	r2, #0
 8004376:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	2200      	movs	r2, #0
 800437c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	2200      	movs	r2, #0
 8004382:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	2200      	movs	r2, #0
 8004388:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	689b      	ldr	r3, [r3, #8]
 800438e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004392:	d10f      	bne.n	80043b4 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	681a      	ldr	r2, [r3, #0]
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80043a2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	681a      	ldr	r2, [r3, #0]
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80043b2:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043be:	2b40      	cmp	r3, #64	; 0x40
 80043c0:	d007      	beq.n	80043d2 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	681a      	ldr	r2, [r3, #0]
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80043d0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	68db      	ldr	r3, [r3, #12]
 80043d6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80043da:	d14b      	bne.n	8004474 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	685b      	ldr	r3, [r3, #4]
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d002      	beq.n	80043ea <HAL_SPI_Transmit+0xf6>
 80043e4:	8afb      	ldrh	r3, [r7, #22]
 80043e6:	2b01      	cmp	r3, #1
 80043e8:	d13e      	bne.n	8004468 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043ee:	881a      	ldrh	r2, [r3, #0]
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043fa:	1c9a      	adds	r2, r3, #2
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004404:	b29b      	uxth	r3, r3
 8004406:	3b01      	subs	r3, #1
 8004408:	b29a      	uxth	r2, r3
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800440e:	e02b      	b.n	8004468 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	689b      	ldr	r3, [r3, #8]
 8004416:	f003 0302 	and.w	r3, r3, #2
 800441a:	2b02      	cmp	r3, #2
 800441c:	d112      	bne.n	8004444 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004422:	881a      	ldrh	r2, [r3, #0]
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800442e:	1c9a      	adds	r2, r3, #2
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004438:	b29b      	uxth	r3, r3
 800443a:	3b01      	subs	r3, #1
 800443c:	b29a      	uxth	r2, r3
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	86da      	strh	r2, [r3, #54]	; 0x36
 8004442:	e011      	b.n	8004468 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004444:	f7fc fbc0 	bl	8000bc8 <HAL_GetTick>
 8004448:	4602      	mov	r2, r0
 800444a:	69bb      	ldr	r3, [r7, #24]
 800444c:	1ad3      	subs	r3, r2, r3
 800444e:	683a      	ldr	r2, [r7, #0]
 8004450:	429a      	cmp	r2, r3
 8004452:	d803      	bhi.n	800445c <HAL_SPI_Transmit+0x168>
 8004454:	683b      	ldr	r3, [r7, #0]
 8004456:	f1b3 3fff 	cmp.w	r3, #4294967295
 800445a:	d102      	bne.n	8004462 <HAL_SPI_Transmit+0x16e>
 800445c:	683b      	ldr	r3, [r7, #0]
 800445e:	2b00      	cmp	r3, #0
 8004460:	d102      	bne.n	8004468 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8004462:	2303      	movs	r3, #3
 8004464:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004466:	e074      	b.n	8004552 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800446c:	b29b      	uxth	r3, r3
 800446e:	2b00      	cmp	r3, #0
 8004470:	d1ce      	bne.n	8004410 <HAL_SPI_Transmit+0x11c>
 8004472:	e04c      	b.n	800450e <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	685b      	ldr	r3, [r3, #4]
 8004478:	2b00      	cmp	r3, #0
 800447a:	d002      	beq.n	8004482 <HAL_SPI_Transmit+0x18e>
 800447c:	8afb      	ldrh	r3, [r7, #22]
 800447e:	2b01      	cmp	r3, #1
 8004480:	d140      	bne.n	8004504 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	330c      	adds	r3, #12
 800448c:	7812      	ldrb	r2, [r2, #0]
 800448e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004494:	1c5a      	adds	r2, r3, #1
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800449e:	b29b      	uxth	r3, r3
 80044a0:	3b01      	subs	r3, #1
 80044a2:	b29a      	uxth	r2, r3
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80044a8:	e02c      	b.n	8004504 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	689b      	ldr	r3, [r3, #8]
 80044b0:	f003 0302 	and.w	r3, r3, #2
 80044b4:	2b02      	cmp	r3, #2
 80044b6:	d113      	bne.n	80044e0 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	330c      	adds	r3, #12
 80044c2:	7812      	ldrb	r2, [r2, #0]
 80044c4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044ca:	1c5a      	adds	r2, r3, #1
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80044d4:	b29b      	uxth	r3, r3
 80044d6:	3b01      	subs	r3, #1
 80044d8:	b29a      	uxth	r2, r3
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	86da      	strh	r2, [r3, #54]	; 0x36
 80044de:	e011      	b.n	8004504 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80044e0:	f7fc fb72 	bl	8000bc8 <HAL_GetTick>
 80044e4:	4602      	mov	r2, r0
 80044e6:	69bb      	ldr	r3, [r7, #24]
 80044e8:	1ad3      	subs	r3, r2, r3
 80044ea:	683a      	ldr	r2, [r7, #0]
 80044ec:	429a      	cmp	r2, r3
 80044ee:	d803      	bhi.n	80044f8 <HAL_SPI_Transmit+0x204>
 80044f0:	683b      	ldr	r3, [r7, #0]
 80044f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044f6:	d102      	bne.n	80044fe <HAL_SPI_Transmit+0x20a>
 80044f8:	683b      	ldr	r3, [r7, #0]
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d102      	bne.n	8004504 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80044fe:	2303      	movs	r3, #3
 8004500:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004502:	e026      	b.n	8004552 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004508:	b29b      	uxth	r3, r3
 800450a:	2b00      	cmp	r3, #0
 800450c:	d1cd      	bne.n	80044aa <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800450e:	69ba      	ldr	r2, [r7, #24]
 8004510:	6839      	ldr	r1, [r7, #0]
 8004512:	68f8      	ldr	r0, [r7, #12]
 8004514:	f000 f8b2 	bl	800467c <SPI_EndRxTxTransaction>
 8004518:	4603      	mov	r3, r0
 800451a:	2b00      	cmp	r3, #0
 800451c:	d002      	beq.n	8004524 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	2220      	movs	r2, #32
 8004522:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	689b      	ldr	r3, [r3, #8]
 8004528:	2b00      	cmp	r3, #0
 800452a:	d10a      	bne.n	8004542 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800452c:	2300      	movs	r3, #0
 800452e:	613b      	str	r3, [r7, #16]
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	68db      	ldr	r3, [r3, #12]
 8004536:	613b      	str	r3, [r7, #16]
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	689b      	ldr	r3, [r3, #8]
 800453e:	613b      	str	r3, [r7, #16]
 8004540:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004546:	2b00      	cmp	r3, #0
 8004548:	d002      	beq.n	8004550 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800454a:	2301      	movs	r3, #1
 800454c:	77fb      	strb	r3, [r7, #31]
 800454e:	e000      	b.n	8004552 <HAL_SPI_Transmit+0x25e>
  }

error:
 8004550:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	2201      	movs	r2, #1
 8004556:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	2200      	movs	r2, #0
 800455e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004562:	7ffb      	ldrb	r3, [r7, #31]
}
 8004564:	4618      	mov	r0, r3
 8004566:	3720      	adds	r7, #32
 8004568:	46bd      	mov	sp, r7
 800456a:	bd80      	pop	{r7, pc}

0800456c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800456c:	b580      	push	{r7, lr}
 800456e:	b088      	sub	sp, #32
 8004570:	af00      	add	r7, sp, #0
 8004572:	60f8      	str	r0, [r7, #12]
 8004574:	60b9      	str	r1, [r7, #8]
 8004576:	603b      	str	r3, [r7, #0]
 8004578:	4613      	mov	r3, r2
 800457a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800457c:	f7fc fb24 	bl	8000bc8 <HAL_GetTick>
 8004580:	4602      	mov	r2, r0
 8004582:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004584:	1a9b      	subs	r3, r3, r2
 8004586:	683a      	ldr	r2, [r7, #0]
 8004588:	4413      	add	r3, r2
 800458a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800458c:	f7fc fb1c 	bl	8000bc8 <HAL_GetTick>
 8004590:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004592:	4b39      	ldr	r3, [pc, #228]	; (8004678 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	015b      	lsls	r3, r3, #5
 8004598:	0d1b      	lsrs	r3, r3, #20
 800459a:	69fa      	ldr	r2, [r7, #28]
 800459c:	fb02 f303 	mul.w	r3, r2, r3
 80045a0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80045a2:	e054      	b.n	800464e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80045a4:	683b      	ldr	r3, [r7, #0]
 80045a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045aa:	d050      	beq.n	800464e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80045ac:	f7fc fb0c 	bl	8000bc8 <HAL_GetTick>
 80045b0:	4602      	mov	r2, r0
 80045b2:	69bb      	ldr	r3, [r7, #24]
 80045b4:	1ad3      	subs	r3, r2, r3
 80045b6:	69fa      	ldr	r2, [r7, #28]
 80045b8:	429a      	cmp	r2, r3
 80045ba:	d902      	bls.n	80045c2 <SPI_WaitFlagStateUntilTimeout+0x56>
 80045bc:	69fb      	ldr	r3, [r7, #28]
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d13d      	bne.n	800463e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	685a      	ldr	r2, [r3, #4]
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80045d0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	685b      	ldr	r3, [r3, #4]
 80045d6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80045da:	d111      	bne.n	8004600 <SPI_WaitFlagStateUntilTimeout+0x94>
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	689b      	ldr	r3, [r3, #8]
 80045e0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80045e4:	d004      	beq.n	80045f0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	689b      	ldr	r3, [r3, #8]
 80045ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80045ee:	d107      	bne.n	8004600 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	681a      	ldr	r2, [r3, #0]
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80045fe:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004604:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004608:	d10f      	bne.n	800462a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	681a      	ldr	r2, [r3, #0]
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004618:	601a      	str	r2, [r3, #0]
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	681a      	ldr	r2, [r3, #0]
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004628:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	2201      	movs	r2, #1
 800462e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	2200      	movs	r2, #0
 8004636:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800463a:	2303      	movs	r3, #3
 800463c:	e017      	b.n	800466e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800463e:	697b      	ldr	r3, [r7, #20]
 8004640:	2b00      	cmp	r3, #0
 8004642:	d101      	bne.n	8004648 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004644:	2300      	movs	r3, #0
 8004646:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004648:	697b      	ldr	r3, [r7, #20]
 800464a:	3b01      	subs	r3, #1
 800464c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	689a      	ldr	r2, [r3, #8]
 8004654:	68bb      	ldr	r3, [r7, #8]
 8004656:	4013      	ands	r3, r2
 8004658:	68ba      	ldr	r2, [r7, #8]
 800465a:	429a      	cmp	r2, r3
 800465c:	bf0c      	ite	eq
 800465e:	2301      	moveq	r3, #1
 8004660:	2300      	movne	r3, #0
 8004662:	b2db      	uxtb	r3, r3
 8004664:	461a      	mov	r2, r3
 8004666:	79fb      	ldrb	r3, [r7, #7]
 8004668:	429a      	cmp	r2, r3
 800466a:	d19b      	bne.n	80045a4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800466c:	2300      	movs	r3, #0
}
 800466e:	4618      	mov	r0, r3
 8004670:	3720      	adds	r7, #32
 8004672:	46bd      	mov	sp, r7
 8004674:	bd80      	pop	{r7, pc}
 8004676:	bf00      	nop
 8004678:	20000004 	.word	0x20000004

0800467c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800467c:	b580      	push	{r7, lr}
 800467e:	b086      	sub	sp, #24
 8004680:	af02      	add	r7, sp, #8
 8004682:	60f8      	str	r0, [r7, #12]
 8004684:	60b9      	str	r1, [r7, #8]
 8004686:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	9300      	str	r3, [sp, #0]
 800468c:	68bb      	ldr	r3, [r7, #8]
 800468e:	2200      	movs	r2, #0
 8004690:	2180      	movs	r1, #128	; 0x80
 8004692:	68f8      	ldr	r0, [r7, #12]
 8004694:	f7ff ff6a 	bl	800456c <SPI_WaitFlagStateUntilTimeout>
 8004698:	4603      	mov	r3, r0
 800469a:	2b00      	cmp	r3, #0
 800469c:	d007      	beq.n	80046ae <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046a2:	f043 0220 	orr.w	r2, r3, #32
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 80046aa:	2303      	movs	r3, #3
 80046ac:	e000      	b.n	80046b0 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 80046ae:	2300      	movs	r3, #0
}
 80046b0:	4618      	mov	r0, r3
 80046b2:	3710      	adds	r7, #16
 80046b4:	46bd      	mov	sp, r7
 80046b6:	bd80      	pop	{r7, pc}

080046b8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80046b8:	b084      	sub	sp, #16
 80046ba:	b480      	push	{r7}
 80046bc:	b083      	sub	sp, #12
 80046be:	af00      	add	r7, sp, #0
 80046c0:	6078      	str	r0, [r7, #4]
 80046c2:	f107 0014 	add.w	r0, r7, #20
 80046c6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80046ca:	2300      	movs	r3, #0
}
 80046cc:	4618      	mov	r0, r3
 80046ce:	370c      	adds	r7, #12
 80046d0:	46bd      	mov	sp, r7
 80046d2:	bc80      	pop	{r7}
 80046d4:	b004      	add	sp, #16
 80046d6:	4770      	bx	lr

080046d8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80046d8:	b480      	push	{r7}
 80046da:	b085      	sub	sp, #20
 80046dc:	af00      	add	r7, sp, #0
 80046de:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	2200      	movs	r2, #0
 80046e4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80046e8:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80046ec:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	b29a      	uxth	r2, r3
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80046f8:	2300      	movs	r3, #0
}
 80046fa:	4618      	mov	r0, r3
 80046fc:	3714      	adds	r7, #20
 80046fe:	46bd      	mov	sp, r7
 8004700:	bc80      	pop	{r7}
 8004702:	4770      	bx	lr

08004704 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8004704:	b480      	push	{r7}
 8004706:	b085      	sub	sp, #20
 8004708:	af00      	add	r7, sp, #0
 800470a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800470c:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8004710:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004718:	b29a      	uxth	r2, r3
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	b29b      	uxth	r3, r3
 800471e:	43db      	mvns	r3, r3
 8004720:	b29b      	uxth	r3, r3
 8004722:	4013      	ands	r3, r2
 8004724:	b29a      	uxth	r2, r3
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800472c:	2300      	movs	r3, #0
}
 800472e:	4618      	mov	r0, r3
 8004730:	3714      	adds	r7, #20
 8004732:	46bd      	mov	sp, r7
 8004734:	bc80      	pop	{r7}
 8004736:	4770      	bx	lr

08004738 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8004738:	b480      	push	{r7}
 800473a:	b083      	sub	sp, #12
 800473c:	af00      	add	r7, sp, #0
 800473e:	6078      	str	r0, [r7, #4]
 8004740:	460b      	mov	r3, r1
 8004742:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8004744:	2300      	movs	r3, #0
}
 8004746:	4618      	mov	r0, r3
 8004748:	370c      	adds	r7, #12
 800474a:	46bd      	mov	sp, r7
 800474c:	bc80      	pop	{r7}
 800474e:	4770      	bx	lr

08004750 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004750:	b084      	sub	sp, #16
 8004752:	b480      	push	{r7}
 8004754:	b083      	sub	sp, #12
 8004756:	af00      	add	r7, sp, #0
 8004758:	6078      	str	r0, [r7, #4]
 800475a:	f107 0014 	add.w	r0, r7, #20
 800475e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	2201      	movs	r2, #1
 8004766:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	2200      	movs	r2, #0
 800476e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	2200      	movs	r2, #0
 8004776:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	2200      	movs	r2, #0
 800477e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8004782:	2300      	movs	r3, #0
}
 8004784:	4618      	mov	r0, r3
 8004786:	370c      	adds	r7, #12
 8004788:	46bd      	mov	sp, r7
 800478a:	bc80      	pop	{r7}
 800478c:	b004      	add	sp, #16
 800478e:	4770      	bx	lr

08004790 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004790:	b480      	push	{r7}
 8004792:	b09b      	sub	sp, #108	; 0x6c
 8004794:	af00      	add	r7, sp, #0
 8004796:	6078      	str	r0, [r7, #4]
 8004798:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800479a:	2300      	movs	r3, #0
 800479c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80047a0:	687a      	ldr	r2, [r7, #4]
 80047a2:	683b      	ldr	r3, [r7, #0]
 80047a4:	781b      	ldrb	r3, [r3, #0]
 80047a6:	009b      	lsls	r3, r3, #2
 80047a8:	4413      	add	r3, r2
 80047aa:	881b      	ldrh	r3, [r3, #0]
 80047ac:	b29b      	uxth	r3, r3
 80047ae:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 80047b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047b6:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 80047ba:	683b      	ldr	r3, [r7, #0]
 80047bc:	78db      	ldrb	r3, [r3, #3]
 80047be:	2b03      	cmp	r3, #3
 80047c0:	d81f      	bhi.n	8004802 <USB_ActivateEndpoint+0x72>
 80047c2:	a201      	add	r2, pc, #4	; (adr r2, 80047c8 <USB_ActivateEndpoint+0x38>)
 80047c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047c8:	080047d9 	.word	0x080047d9
 80047cc:	080047f5 	.word	0x080047f5
 80047d0:	0800480b 	.word	0x0800480b
 80047d4:	080047e7 	.word	0x080047e7
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80047d8:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80047dc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80047e0:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80047e4:	e012      	b.n	800480c <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80047e6:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80047ea:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 80047ee:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80047f2:	e00b      	b.n	800480c <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80047f4:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80047f8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80047fc:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8004800:	e004      	b.n	800480c <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8004802:	2301      	movs	r3, #1
 8004804:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8004808:	e000      	b.n	800480c <USB_ActivateEndpoint+0x7c>
      break;
 800480a:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800480c:	687a      	ldr	r2, [r7, #4]
 800480e:	683b      	ldr	r3, [r7, #0]
 8004810:	781b      	ldrb	r3, [r3, #0]
 8004812:	009b      	lsls	r3, r3, #2
 8004814:	441a      	add	r2, r3
 8004816:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800481a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800481e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004822:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004826:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800482a:	b29b      	uxth	r3, r3
 800482c:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800482e:	687a      	ldr	r2, [r7, #4]
 8004830:	683b      	ldr	r3, [r7, #0]
 8004832:	781b      	ldrb	r3, [r3, #0]
 8004834:	009b      	lsls	r3, r3, #2
 8004836:	4413      	add	r3, r2
 8004838:	881b      	ldrh	r3, [r3, #0]
 800483a:	b29b      	uxth	r3, r3
 800483c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004840:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004844:	b29a      	uxth	r2, r3
 8004846:	683b      	ldr	r3, [r7, #0]
 8004848:	781b      	ldrb	r3, [r3, #0]
 800484a:	b29b      	uxth	r3, r3
 800484c:	4313      	orrs	r3, r2
 800484e:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8004852:	687a      	ldr	r2, [r7, #4]
 8004854:	683b      	ldr	r3, [r7, #0]
 8004856:	781b      	ldrb	r3, [r3, #0]
 8004858:	009b      	lsls	r3, r3, #2
 800485a:	441a      	add	r2, r3
 800485c:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8004860:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004864:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004868:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800486c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004870:	b29b      	uxth	r3, r3
 8004872:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8004874:	683b      	ldr	r3, [r7, #0]
 8004876:	7b1b      	ldrb	r3, [r3, #12]
 8004878:	2b00      	cmp	r3, #0
 800487a:	f040 8149 	bne.w	8004b10 <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 800487e:	683b      	ldr	r3, [r7, #0]
 8004880:	785b      	ldrb	r3, [r3, #1]
 8004882:	2b00      	cmp	r3, #0
 8004884:	f000 8084 	beq.w	8004990 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	617b      	str	r3, [r7, #20]
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004892:	b29b      	uxth	r3, r3
 8004894:	461a      	mov	r2, r3
 8004896:	697b      	ldr	r3, [r7, #20]
 8004898:	4413      	add	r3, r2
 800489a:	617b      	str	r3, [r7, #20]
 800489c:	683b      	ldr	r3, [r7, #0]
 800489e:	781b      	ldrb	r3, [r3, #0]
 80048a0:	011a      	lsls	r2, r3, #4
 80048a2:	697b      	ldr	r3, [r7, #20]
 80048a4:	4413      	add	r3, r2
 80048a6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80048aa:	613b      	str	r3, [r7, #16]
 80048ac:	683b      	ldr	r3, [r7, #0]
 80048ae:	88db      	ldrh	r3, [r3, #6]
 80048b0:	085b      	lsrs	r3, r3, #1
 80048b2:	b29b      	uxth	r3, r3
 80048b4:	005b      	lsls	r3, r3, #1
 80048b6:	b29a      	uxth	r2, r3
 80048b8:	693b      	ldr	r3, [r7, #16]
 80048ba:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80048bc:	687a      	ldr	r2, [r7, #4]
 80048be:	683b      	ldr	r3, [r7, #0]
 80048c0:	781b      	ldrb	r3, [r3, #0]
 80048c2:	009b      	lsls	r3, r3, #2
 80048c4:	4413      	add	r3, r2
 80048c6:	881b      	ldrh	r3, [r3, #0]
 80048c8:	81fb      	strh	r3, [r7, #14]
 80048ca:	89fb      	ldrh	r3, [r7, #14]
 80048cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d01b      	beq.n	800490c <USB_ActivateEndpoint+0x17c>
 80048d4:	687a      	ldr	r2, [r7, #4]
 80048d6:	683b      	ldr	r3, [r7, #0]
 80048d8:	781b      	ldrb	r3, [r3, #0]
 80048da:	009b      	lsls	r3, r3, #2
 80048dc:	4413      	add	r3, r2
 80048de:	881b      	ldrh	r3, [r3, #0]
 80048e0:	b29b      	uxth	r3, r3
 80048e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80048e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048ea:	81bb      	strh	r3, [r7, #12]
 80048ec:	687a      	ldr	r2, [r7, #4]
 80048ee:	683b      	ldr	r3, [r7, #0]
 80048f0:	781b      	ldrb	r3, [r3, #0]
 80048f2:	009b      	lsls	r3, r3, #2
 80048f4:	441a      	add	r2, r3
 80048f6:	89bb      	ldrh	r3, [r7, #12]
 80048f8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80048fc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004900:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004904:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004908:	b29b      	uxth	r3, r3
 800490a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800490c:	683b      	ldr	r3, [r7, #0]
 800490e:	78db      	ldrb	r3, [r3, #3]
 8004910:	2b01      	cmp	r3, #1
 8004912:	d020      	beq.n	8004956 <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004914:	687a      	ldr	r2, [r7, #4]
 8004916:	683b      	ldr	r3, [r7, #0]
 8004918:	781b      	ldrb	r3, [r3, #0]
 800491a:	009b      	lsls	r3, r3, #2
 800491c:	4413      	add	r3, r2
 800491e:	881b      	ldrh	r3, [r3, #0]
 8004920:	b29b      	uxth	r3, r3
 8004922:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004926:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800492a:	813b      	strh	r3, [r7, #8]
 800492c:	893b      	ldrh	r3, [r7, #8]
 800492e:	f083 0320 	eor.w	r3, r3, #32
 8004932:	813b      	strh	r3, [r7, #8]
 8004934:	687a      	ldr	r2, [r7, #4]
 8004936:	683b      	ldr	r3, [r7, #0]
 8004938:	781b      	ldrb	r3, [r3, #0]
 800493a:	009b      	lsls	r3, r3, #2
 800493c:	441a      	add	r2, r3
 800493e:	893b      	ldrh	r3, [r7, #8]
 8004940:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004944:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004948:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800494c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004950:	b29b      	uxth	r3, r3
 8004952:	8013      	strh	r3, [r2, #0]
 8004954:	e27f      	b.n	8004e56 <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004956:	687a      	ldr	r2, [r7, #4]
 8004958:	683b      	ldr	r3, [r7, #0]
 800495a:	781b      	ldrb	r3, [r3, #0]
 800495c:	009b      	lsls	r3, r3, #2
 800495e:	4413      	add	r3, r2
 8004960:	881b      	ldrh	r3, [r3, #0]
 8004962:	b29b      	uxth	r3, r3
 8004964:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004968:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800496c:	817b      	strh	r3, [r7, #10]
 800496e:	687a      	ldr	r2, [r7, #4]
 8004970:	683b      	ldr	r3, [r7, #0]
 8004972:	781b      	ldrb	r3, [r3, #0]
 8004974:	009b      	lsls	r3, r3, #2
 8004976:	441a      	add	r2, r3
 8004978:	897b      	ldrh	r3, [r7, #10]
 800497a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800497e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004982:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004986:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800498a:	b29b      	uxth	r3, r3
 800498c:	8013      	strh	r3, [r2, #0]
 800498e:	e262      	b.n	8004e56 <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800499a:	b29b      	uxth	r3, r3
 800499c:	461a      	mov	r2, r3
 800499e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049a0:	4413      	add	r3, r2
 80049a2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80049a4:	683b      	ldr	r3, [r7, #0]
 80049a6:	781b      	ldrb	r3, [r3, #0]
 80049a8:	011a      	lsls	r2, r3, #4
 80049aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049ac:	4413      	add	r3, r2
 80049ae:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80049b2:	62bb      	str	r3, [r7, #40]	; 0x28
 80049b4:	683b      	ldr	r3, [r7, #0]
 80049b6:	88db      	ldrh	r3, [r3, #6]
 80049b8:	085b      	lsrs	r3, r3, #1
 80049ba:	b29b      	uxth	r3, r3
 80049bc:	005b      	lsls	r3, r3, #1
 80049be:	b29a      	uxth	r2, r3
 80049c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049c2:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	627b      	str	r3, [r7, #36]	; 0x24
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80049ce:	b29b      	uxth	r3, r3
 80049d0:	461a      	mov	r2, r3
 80049d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049d4:	4413      	add	r3, r2
 80049d6:	627b      	str	r3, [r7, #36]	; 0x24
 80049d8:	683b      	ldr	r3, [r7, #0]
 80049da:	781b      	ldrb	r3, [r3, #0]
 80049dc:	011a      	lsls	r2, r3, #4
 80049de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049e0:	4413      	add	r3, r2
 80049e2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80049e6:	623b      	str	r3, [r7, #32]
 80049e8:	683b      	ldr	r3, [r7, #0]
 80049ea:	691b      	ldr	r3, [r3, #16]
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d112      	bne.n	8004a16 <USB_ActivateEndpoint+0x286>
 80049f0:	6a3b      	ldr	r3, [r7, #32]
 80049f2:	881b      	ldrh	r3, [r3, #0]
 80049f4:	b29b      	uxth	r3, r3
 80049f6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80049fa:	b29a      	uxth	r2, r3
 80049fc:	6a3b      	ldr	r3, [r7, #32]
 80049fe:	801a      	strh	r2, [r3, #0]
 8004a00:	6a3b      	ldr	r3, [r7, #32]
 8004a02:	881b      	ldrh	r3, [r3, #0]
 8004a04:	b29b      	uxth	r3, r3
 8004a06:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004a0a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004a0e:	b29a      	uxth	r2, r3
 8004a10:	6a3b      	ldr	r3, [r7, #32]
 8004a12:	801a      	strh	r2, [r3, #0]
 8004a14:	e02f      	b.n	8004a76 <USB_ActivateEndpoint+0x2e6>
 8004a16:	683b      	ldr	r3, [r7, #0]
 8004a18:	691b      	ldr	r3, [r3, #16]
 8004a1a:	2b3e      	cmp	r3, #62	; 0x3e
 8004a1c:	d813      	bhi.n	8004a46 <USB_ActivateEndpoint+0x2b6>
 8004a1e:	683b      	ldr	r3, [r7, #0]
 8004a20:	691b      	ldr	r3, [r3, #16]
 8004a22:	085b      	lsrs	r3, r3, #1
 8004a24:	663b      	str	r3, [r7, #96]	; 0x60
 8004a26:	683b      	ldr	r3, [r7, #0]
 8004a28:	691b      	ldr	r3, [r3, #16]
 8004a2a:	f003 0301 	and.w	r3, r3, #1
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d002      	beq.n	8004a38 <USB_ActivateEndpoint+0x2a8>
 8004a32:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004a34:	3301      	adds	r3, #1
 8004a36:	663b      	str	r3, [r7, #96]	; 0x60
 8004a38:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004a3a:	b29b      	uxth	r3, r3
 8004a3c:	029b      	lsls	r3, r3, #10
 8004a3e:	b29a      	uxth	r2, r3
 8004a40:	6a3b      	ldr	r3, [r7, #32]
 8004a42:	801a      	strh	r2, [r3, #0]
 8004a44:	e017      	b.n	8004a76 <USB_ActivateEndpoint+0x2e6>
 8004a46:	683b      	ldr	r3, [r7, #0]
 8004a48:	691b      	ldr	r3, [r3, #16]
 8004a4a:	095b      	lsrs	r3, r3, #5
 8004a4c:	663b      	str	r3, [r7, #96]	; 0x60
 8004a4e:	683b      	ldr	r3, [r7, #0]
 8004a50:	691b      	ldr	r3, [r3, #16]
 8004a52:	f003 031f 	and.w	r3, r3, #31
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d102      	bne.n	8004a60 <USB_ActivateEndpoint+0x2d0>
 8004a5a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004a5c:	3b01      	subs	r3, #1
 8004a5e:	663b      	str	r3, [r7, #96]	; 0x60
 8004a60:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004a62:	b29b      	uxth	r3, r3
 8004a64:	029b      	lsls	r3, r3, #10
 8004a66:	b29b      	uxth	r3, r3
 8004a68:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004a6c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004a70:	b29a      	uxth	r2, r3
 8004a72:	6a3b      	ldr	r3, [r7, #32]
 8004a74:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004a76:	687a      	ldr	r2, [r7, #4]
 8004a78:	683b      	ldr	r3, [r7, #0]
 8004a7a:	781b      	ldrb	r3, [r3, #0]
 8004a7c:	009b      	lsls	r3, r3, #2
 8004a7e:	4413      	add	r3, r2
 8004a80:	881b      	ldrh	r3, [r3, #0]
 8004a82:	83fb      	strh	r3, [r7, #30]
 8004a84:	8bfb      	ldrh	r3, [r7, #30]
 8004a86:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d01b      	beq.n	8004ac6 <USB_ActivateEndpoint+0x336>
 8004a8e:	687a      	ldr	r2, [r7, #4]
 8004a90:	683b      	ldr	r3, [r7, #0]
 8004a92:	781b      	ldrb	r3, [r3, #0]
 8004a94:	009b      	lsls	r3, r3, #2
 8004a96:	4413      	add	r3, r2
 8004a98:	881b      	ldrh	r3, [r3, #0]
 8004a9a:	b29b      	uxth	r3, r3
 8004a9c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004aa0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004aa4:	83bb      	strh	r3, [r7, #28]
 8004aa6:	687a      	ldr	r2, [r7, #4]
 8004aa8:	683b      	ldr	r3, [r7, #0]
 8004aaa:	781b      	ldrb	r3, [r3, #0]
 8004aac:	009b      	lsls	r3, r3, #2
 8004aae:	441a      	add	r2, r3
 8004ab0:	8bbb      	ldrh	r3, [r7, #28]
 8004ab2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ab6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004aba:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004abe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ac2:	b29b      	uxth	r3, r3
 8004ac4:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004ac6:	687a      	ldr	r2, [r7, #4]
 8004ac8:	683b      	ldr	r3, [r7, #0]
 8004aca:	781b      	ldrb	r3, [r3, #0]
 8004acc:	009b      	lsls	r3, r3, #2
 8004ace:	4413      	add	r3, r2
 8004ad0:	881b      	ldrh	r3, [r3, #0]
 8004ad2:	b29b      	uxth	r3, r3
 8004ad4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004ad8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004adc:	837b      	strh	r3, [r7, #26]
 8004ade:	8b7b      	ldrh	r3, [r7, #26]
 8004ae0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004ae4:	837b      	strh	r3, [r7, #26]
 8004ae6:	8b7b      	ldrh	r3, [r7, #26]
 8004ae8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004aec:	837b      	strh	r3, [r7, #26]
 8004aee:	687a      	ldr	r2, [r7, #4]
 8004af0:	683b      	ldr	r3, [r7, #0]
 8004af2:	781b      	ldrb	r3, [r3, #0]
 8004af4:	009b      	lsls	r3, r3, #2
 8004af6:	441a      	add	r2, r3
 8004af8:	8b7b      	ldrh	r3, [r7, #26]
 8004afa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004afe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b02:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b06:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b0a:	b29b      	uxth	r3, r3
 8004b0c:	8013      	strh	r3, [r2, #0]
 8004b0e:	e1a2      	b.n	8004e56 <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8004b10:	687a      	ldr	r2, [r7, #4]
 8004b12:	683b      	ldr	r3, [r7, #0]
 8004b14:	781b      	ldrb	r3, [r3, #0]
 8004b16:	009b      	lsls	r3, r3, #2
 8004b18:	4413      	add	r3, r2
 8004b1a:	881b      	ldrh	r3, [r3, #0]
 8004b1c:	b29b      	uxth	r3, r3
 8004b1e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b26:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8004b2a:	687a      	ldr	r2, [r7, #4]
 8004b2c:	683b      	ldr	r3, [r7, #0]
 8004b2e:	781b      	ldrb	r3, [r3, #0]
 8004b30:	009b      	lsls	r3, r3, #2
 8004b32:	441a      	add	r2, r3
 8004b34:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8004b38:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b3c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b40:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8004b44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b48:	b29b      	uxth	r3, r3
 8004b4a:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	65bb      	str	r3, [r7, #88]	; 0x58
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004b56:	b29b      	uxth	r3, r3
 8004b58:	461a      	mov	r2, r3
 8004b5a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004b5c:	4413      	add	r3, r2
 8004b5e:	65bb      	str	r3, [r7, #88]	; 0x58
 8004b60:	683b      	ldr	r3, [r7, #0]
 8004b62:	781b      	ldrb	r3, [r3, #0]
 8004b64:	011a      	lsls	r2, r3, #4
 8004b66:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004b68:	4413      	add	r3, r2
 8004b6a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004b6e:	657b      	str	r3, [r7, #84]	; 0x54
 8004b70:	683b      	ldr	r3, [r7, #0]
 8004b72:	891b      	ldrh	r3, [r3, #8]
 8004b74:	085b      	lsrs	r3, r3, #1
 8004b76:	b29b      	uxth	r3, r3
 8004b78:	005b      	lsls	r3, r3, #1
 8004b7a:	b29a      	uxth	r2, r3
 8004b7c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004b7e:	801a      	strh	r2, [r3, #0]
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	653b      	str	r3, [r7, #80]	; 0x50
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004b8a:	b29b      	uxth	r3, r3
 8004b8c:	461a      	mov	r2, r3
 8004b8e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004b90:	4413      	add	r3, r2
 8004b92:	653b      	str	r3, [r7, #80]	; 0x50
 8004b94:	683b      	ldr	r3, [r7, #0]
 8004b96:	781b      	ldrb	r3, [r3, #0]
 8004b98:	011a      	lsls	r2, r3, #4
 8004b9a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004b9c:	4413      	add	r3, r2
 8004b9e:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8004ba2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004ba4:	683b      	ldr	r3, [r7, #0]
 8004ba6:	895b      	ldrh	r3, [r3, #10]
 8004ba8:	085b      	lsrs	r3, r3, #1
 8004baa:	b29b      	uxth	r3, r3
 8004bac:	005b      	lsls	r3, r3, #1
 8004bae:	b29a      	uxth	r2, r3
 8004bb0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004bb2:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8004bb4:	683b      	ldr	r3, [r7, #0]
 8004bb6:	785b      	ldrb	r3, [r3, #1]
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	f040 8091 	bne.w	8004ce0 <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004bbe:	687a      	ldr	r2, [r7, #4]
 8004bc0:	683b      	ldr	r3, [r7, #0]
 8004bc2:	781b      	ldrb	r3, [r3, #0]
 8004bc4:	009b      	lsls	r3, r3, #2
 8004bc6:	4413      	add	r3, r2
 8004bc8:	881b      	ldrh	r3, [r3, #0]
 8004bca:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8004bcc:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8004bce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d01b      	beq.n	8004c0e <USB_ActivateEndpoint+0x47e>
 8004bd6:	687a      	ldr	r2, [r7, #4]
 8004bd8:	683b      	ldr	r3, [r7, #0]
 8004bda:	781b      	ldrb	r3, [r3, #0]
 8004bdc:	009b      	lsls	r3, r3, #2
 8004bde:	4413      	add	r3, r2
 8004be0:	881b      	ldrh	r3, [r3, #0]
 8004be2:	b29b      	uxth	r3, r3
 8004be4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004be8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bec:	877b      	strh	r3, [r7, #58]	; 0x3a
 8004bee:	687a      	ldr	r2, [r7, #4]
 8004bf0:	683b      	ldr	r3, [r7, #0]
 8004bf2:	781b      	ldrb	r3, [r3, #0]
 8004bf4:	009b      	lsls	r3, r3, #2
 8004bf6:	441a      	add	r2, r3
 8004bf8:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8004bfa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004bfe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c02:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004c06:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c0a:	b29b      	uxth	r3, r3
 8004c0c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004c0e:	687a      	ldr	r2, [r7, #4]
 8004c10:	683b      	ldr	r3, [r7, #0]
 8004c12:	781b      	ldrb	r3, [r3, #0]
 8004c14:	009b      	lsls	r3, r3, #2
 8004c16:	4413      	add	r3, r2
 8004c18:	881b      	ldrh	r3, [r3, #0]
 8004c1a:	873b      	strh	r3, [r7, #56]	; 0x38
 8004c1c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8004c1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d01b      	beq.n	8004c5e <USB_ActivateEndpoint+0x4ce>
 8004c26:	687a      	ldr	r2, [r7, #4]
 8004c28:	683b      	ldr	r3, [r7, #0]
 8004c2a:	781b      	ldrb	r3, [r3, #0]
 8004c2c:	009b      	lsls	r3, r3, #2
 8004c2e:	4413      	add	r3, r2
 8004c30:	881b      	ldrh	r3, [r3, #0]
 8004c32:	b29b      	uxth	r3, r3
 8004c34:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c38:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c3c:	86fb      	strh	r3, [r7, #54]	; 0x36
 8004c3e:	687a      	ldr	r2, [r7, #4]
 8004c40:	683b      	ldr	r3, [r7, #0]
 8004c42:	781b      	ldrb	r3, [r3, #0]
 8004c44:	009b      	lsls	r3, r3, #2
 8004c46:	441a      	add	r2, r3
 8004c48:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004c4a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c4e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c52:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c56:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004c5a:	b29b      	uxth	r3, r3
 8004c5c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004c5e:	687a      	ldr	r2, [r7, #4]
 8004c60:	683b      	ldr	r3, [r7, #0]
 8004c62:	781b      	ldrb	r3, [r3, #0]
 8004c64:	009b      	lsls	r3, r3, #2
 8004c66:	4413      	add	r3, r2
 8004c68:	881b      	ldrh	r3, [r3, #0]
 8004c6a:	b29b      	uxth	r3, r3
 8004c6c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004c70:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c74:	86bb      	strh	r3, [r7, #52]	; 0x34
 8004c76:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004c78:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004c7c:	86bb      	strh	r3, [r7, #52]	; 0x34
 8004c7e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004c80:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004c84:	86bb      	strh	r3, [r7, #52]	; 0x34
 8004c86:	687a      	ldr	r2, [r7, #4]
 8004c88:	683b      	ldr	r3, [r7, #0]
 8004c8a:	781b      	ldrb	r3, [r3, #0]
 8004c8c:	009b      	lsls	r3, r3, #2
 8004c8e:	441a      	add	r2, r3
 8004c90:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004c92:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c96:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c9a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ca2:	b29b      	uxth	r3, r3
 8004ca4:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004ca6:	687a      	ldr	r2, [r7, #4]
 8004ca8:	683b      	ldr	r3, [r7, #0]
 8004caa:	781b      	ldrb	r3, [r3, #0]
 8004cac:	009b      	lsls	r3, r3, #2
 8004cae:	4413      	add	r3, r2
 8004cb0:	881b      	ldrh	r3, [r3, #0]
 8004cb2:	b29b      	uxth	r3, r3
 8004cb4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004cb8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004cbc:	867b      	strh	r3, [r7, #50]	; 0x32
 8004cbe:	687a      	ldr	r2, [r7, #4]
 8004cc0:	683b      	ldr	r3, [r7, #0]
 8004cc2:	781b      	ldrb	r3, [r3, #0]
 8004cc4:	009b      	lsls	r3, r3, #2
 8004cc6:	441a      	add	r2, r3
 8004cc8:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8004cca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004cce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004cd2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004cd6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004cda:	b29b      	uxth	r3, r3
 8004cdc:	8013      	strh	r3, [r2, #0]
 8004cde:	e0ba      	b.n	8004e56 <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004ce0:	687a      	ldr	r2, [r7, #4]
 8004ce2:	683b      	ldr	r3, [r7, #0]
 8004ce4:	781b      	ldrb	r3, [r3, #0]
 8004ce6:	009b      	lsls	r3, r3, #2
 8004ce8:	4413      	add	r3, r2
 8004cea:	881b      	ldrh	r3, [r3, #0]
 8004cec:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8004cf0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004cf4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d01d      	beq.n	8004d38 <USB_ActivateEndpoint+0x5a8>
 8004cfc:	687a      	ldr	r2, [r7, #4]
 8004cfe:	683b      	ldr	r3, [r7, #0]
 8004d00:	781b      	ldrb	r3, [r3, #0]
 8004d02:	009b      	lsls	r3, r3, #2
 8004d04:	4413      	add	r3, r2
 8004d06:	881b      	ldrh	r3, [r3, #0]
 8004d08:	b29b      	uxth	r3, r3
 8004d0a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d12:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8004d16:	687a      	ldr	r2, [r7, #4]
 8004d18:	683b      	ldr	r3, [r7, #0]
 8004d1a:	781b      	ldrb	r3, [r3, #0]
 8004d1c:	009b      	lsls	r3, r3, #2
 8004d1e:	441a      	add	r2, r3
 8004d20:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8004d24:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d28:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d2c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004d30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d34:	b29b      	uxth	r3, r3
 8004d36:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004d38:	687a      	ldr	r2, [r7, #4]
 8004d3a:	683b      	ldr	r3, [r7, #0]
 8004d3c:	781b      	ldrb	r3, [r3, #0]
 8004d3e:	009b      	lsls	r3, r3, #2
 8004d40:	4413      	add	r3, r2
 8004d42:	881b      	ldrh	r3, [r3, #0]
 8004d44:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8004d48:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8004d4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d01d      	beq.n	8004d90 <USB_ActivateEndpoint+0x600>
 8004d54:	687a      	ldr	r2, [r7, #4]
 8004d56:	683b      	ldr	r3, [r7, #0]
 8004d58:	781b      	ldrb	r3, [r3, #0]
 8004d5a:	009b      	lsls	r3, r3, #2
 8004d5c:	4413      	add	r3, r2
 8004d5e:	881b      	ldrh	r3, [r3, #0]
 8004d60:	b29b      	uxth	r3, r3
 8004d62:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d6a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8004d6e:	687a      	ldr	r2, [r7, #4]
 8004d70:	683b      	ldr	r3, [r7, #0]
 8004d72:	781b      	ldrb	r3, [r3, #0]
 8004d74:	009b      	lsls	r3, r3, #2
 8004d76:	441a      	add	r2, r3
 8004d78:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8004d7c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d80:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d84:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d88:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004d8c:	b29b      	uxth	r3, r3
 8004d8e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004d90:	683b      	ldr	r3, [r7, #0]
 8004d92:	78db      	ldrb	r3, [r3, #3]
 8004d94:	2b01      	cmp	r3, #1
 8004d96:	d024      	beq.n	8004de2 <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004d98:	687a      	ldr	r2, [r7, #4]
 8004d9a:	683b      	ldr	r3, [r7, #0]
 8004d9c:	781b      	ldrb	r3, [r3, #0]
 8004d9e:	009b      	lsls	r3, r3, #2
 8004da0:	4413      	add	r3, r2
 8004da2:	881b      	ldrh	r3, [r3, #0]
 8004da4:	b29b      	uxth	r3, r3
 8004da6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004daa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004dae:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8004db2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004db6:	f083 0320 	eor.w	r3, r3, #32
 8004dba:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8004dbe:	687a      	ldr	r2, [r7, #4]
 8004dc0:	683b      	ldr	r3, [r7, #0]
 8004dc2:	781b      	ldrb	r3, [r3, #0]
 8004dc4:	009b      	lsls	r3, r3, #2
 8004dc6:	441a      	add	r2, r3
 8004dc8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004dcc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004dd0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004dd4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004dd8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ddc:	b29b      	uxth	r3, r3
 8004dde:	8013      	strh	r3, [r2, #0]
 8004de0:	e01d      	b.n	8004e1e <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004de2:	687a      	ldr	r2, [r7, #4]
 8004de4:	683b      	ldr	r3, [r7, #0]
 8004de6:	781b      	ldrb	r3, [r3, #0]
 8004de8:	009b      	lsls	r3, r3, #2
 8004dea:	4413      	add	r3, r2
 8004dec:	881b      	ldrh	r3, [r3, #0]
 8004dee:	b29b      	uxth	r3, r3
 8004df0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004df4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004df8:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8004dfc:	687a      	ldr	r2, [r7, #4]
 8004dfe:	683b      	ldr	r3, [r7, #0]
 8004e00:	781b      	ldrb	r3, [r3, #0]
 8004e02:	009b      	lsls	r3, r3, #2
 8004e04:	441a      	add	r2, r3
 8004e06:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8004e0a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e0e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e12:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e16:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e1a:	b29b      	uxth	r3, r3
 8004e1c:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004e1e:	687a      	ldr	r2, [r7, #4]
 8004e20:	683b      	ldr	r3, [r7, #0]
 8004e22:	781b      	ldrb	r3, [r3, #0]
 8004e24:	009b      	lsls	r3, r3, #2
 8004e26:	4413      	add	r3, r2
 8004e28:	881b      	ldrh	r3, [r3, #0]
 8004e2a:	b29b      	uxth	r3, r3
 8004e2c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004e30:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e34:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8004e36:	687a      	ldr	r2, [r7, #4]
 8004e38:	683b      	ldr	r3, [r7, #0]
 8004e3a:	781b      	ldrb	r3, [r3, #0]
 8004e3c:	009b      	lsls	r3, r3, #2
 8004e3e:	441a      	add	r2, r3
 8004e40:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8004e42:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e46:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e4a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e4e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e52:	b29b      	uxth	r3, r3
 8004e54:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8004e56:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8004e5a:	4618      	mov	r0, r3
 8004e5c:	376c      	adds	r7, #108	; 0x6c
 8004e5e:	46bd      	mov	sp, r7
 8004e60:	bc80      	pop	{r7}
 8004e62:	4770      	bx	lr

08004e64 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004e64:	b480      	push	{r7}
 8004e66:	b08d      	sub	sp, #52	; 0x34
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	6078      	str	r0, [r7, #4]
 8004e6c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8004e6e:	683b      	ldr	r3, [r7, #0]
 8004e70:	7b1b      	ldrb	r3, [r3, #12]
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	f040 808e 	bne.w	8004f94 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8004e78:	683b      	ldr	r3, [r7, #0]
 8004e7a:	785b      	ldrb	r3, [r3, #1]
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d044      	beq.n	8004f0a <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004e80:	687a      	ldr	r2, [r7, #4]
 8004e82:	683b      	ldr	r3, [r7, #0]
 8004e84:	781b      	ldrb	r3, [r3, #0]
 8004e86:	009b      	lsls	r3, r3, #2
 8004e88:	4413      	add	r3, r2
 8004e8a:	881b      	ldrh	r3, [r3, #0]
 8004e8c:	81bb      	strh	r3, [r7, #12]
 8004e8e:	89bb      	ldrh	r3, [r7, #12]
 8004e90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d01b      	beq.n	8004ed0 <USB_DeactivateEndpoint+0x6c>
 8004e98:	687a      	ldr	r2, [r7, #4]
 8004e9a:	683b      	ldr	r3, [r7, #0]
 8004e9c:	781b      	ldrb	r3, [r3, #0]
 8004e9e:	009b      	lsls	r3, r3, #2
 8004ea0:	4413      	add	r3, r2
 8004ea2:	881b      	ldrh	r3, [r3, #0]
 8004ea4:	b29b      	uxth	r3, r3
 8004ea6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004eaa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004eae:	817b      	strh	r3, [r7, #10]
 8004eb0:	687a      	ldr	r2, [r7, #4]
 8004eb2:	683b      	ldr	r3, [r7, #0]
 8004eb4:	781b      	ldrb	r3, [r3, #0]
 8004eb6:	009b      	lsls	r3, r3, #2
 8004eb8:	441a      	add	r2, r3
 8004eba:	897b      	ldrh	r3, [r7, #10]
 8004ebc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ec0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ec4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ec8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004ecc:	b29b      	uxth	r3, r3
 8004ece:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004ed0:	687a      	ldr	r2, [r7, #4]
 8004ed2:	683b      	ldr	r3, [r7, #0]
 8004ed4:	781b      	ldrb	r3, [r3, #0]
 8004ed6:	009b      	lsls	r3, r3, #2
 8004ed8:	4413      	add	r3, r2
 8004eda:	881b      	ldrh	r3, [r3, #0]
 8004edc:	b29b      	uxth	r3, r3
 8004ede:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ee2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004ee6:	813b      	strh	r3, [r7, #8]
 8004ee8:	687a      	ldr	r2, [r7, #4]
 8004eea:	683b      	ldr	r3, [r7, #0]
 8004eec:	781b      	ldrb	r3, [r3, #0]
 8004eee:	009b      	lsls	r3, r3, #2
 8004ef0:	441a      	add	r2, r3
 8004ef2:	893b      	ldrh	r3, [r7, #8]
 8004ef4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ef8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004efc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f04:	b29b      	uxth	r3, r3
 8004f06:	8013      	strh	r3, [r2, #0]
 8004f08:	e192      	b.n	8005230 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004f0a:	687a      	ldr	r2, [r7, #4]
 8004f0c:	683b      	ldr	r3, [r7, #0]
 8004f0e:	781b      	ldrb	r3, [r3, #0]
 8004f10:	009b      	lsls	r3, r3, #2
 8004f12:	4413      	add	r3, r2
 8004f14:	881b      	ldrh	r3, [r3, #0]
 8004f16:	827b      	strh	r3, [r7, #18]
 8004f18:	8a7b      	ldrh	r3, [r7, #18]
 8004f1a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d01b      	beq.n	8004f5a <USB_DeactivateEndpoint+0xf6>
 8004f22:	687a      	ldr	r2, [r7, #4]
 8004f24:	683b      	ldr	r3, [r7, #0]
 8004f26:	781b      	ldrb	r3, [r3, #0]
 8004f28:	009b      	lsls	r3, r3, #2
 8004f2a:	4413      	add	r3, r2
 8004f2c:	881b      	ldrh	r3, [r3, #0]
 8004f2e:	b29b      	uxth	r3, r3
 8004f30:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f34:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f38:	823b      	strh	r3, [r7, #16]
 8004f3a:	687a      	ldr	r2, [r7, #4]
 8004f3c:	683b      	ldr	r3, [r7, #0]
 8004f3e:	781b      	ldrb	r3, [r3, #0]
 8004f40:	009b      	lsls	r3, r3, #2
 8004f42:	441a      	add	r2, r3
 8004f44:	8a3b      	ldrh	r3, [r7, #16]
 8004f46:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f4a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f4e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004f52:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f56:	b29b      	uxth	r3, r3
 8004f58:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004f5a:	687a      	ldr	r2, [r7, #4]
 8004f5c:	683b      	ldr	r3, [r7, #0]
 8004f5e:	781b      	ldrb	r3, [r3, #0]
 8004f60:	009b      	lsls	r3, r3, #2
 8004f62:	4413      	add	r3, r2
 8004f64:	881b      	ldrh	r3, [r3, #0]
 8004f66:	b29b      	uxth	r3, r3
 8004f68:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004f6c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f70:	81fb      	strh	r3, [r7, #14]
 8004f72:	687a      	ldr	r2, [r7, #4]
 8004f74:	683b      	ldr	r3, [r7, #0]
 8004f76:	781b      	ldrb	r3, [r3, #0]
 8004f78:	009b      	lsls	r3, r3, #2
 8004f7a:	441a      	add	r2, r3
 8004f7c:	89fb      	ldrh	r3, [r7, #14]
 8004f7e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f82:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f86:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f8a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f8e:	b29b      	uxth	r3, r3
 8004f90:	8013      	strh	r3, [r2, #0]
 8004f92:	e14d      	b.n	8005230 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8004f94:	683b      	ldr	r3, [r7, #0]
 8004f96:	785b      	ldrb	r3, [r3, #1]
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	f040 80a5 	bne.w	80050e8 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004f9e:	687a      	ldr	r2, [r7, #4]
 8004fa0:	683b      	ldr	r3, [r7, #0]
 8004fa2:	781b      	ldrb	r3, [r3, #0]
 8004fa4:	009b      	lsls	r3, r3, #2
 8004fa6:	4413      	add	r3, r2
 8004fa8:	881b      	ldrh	r3, [r3, #0]
 8004faa:	843b      	strh	r3, [r7, #32]
 8004fac:	8c3b      	ldrh	r3, [r7, #32]
 8004fae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d01b      	beq.n	8004fee <USB_DeactivateEndpoint+0x18a>
 8004fb6:	687a      	ldr	r2, [r7, #4]
 8004fb8:	683b      	ldr	r3, [r7, #0]
 8004fba:	781b      	ldrb	r3, [r3, #0]
 8004fbc:	009b      	lsls	r3, r3, #2
 8004fbe:	4413      	add	r3, r2
 8004fc0:	881b      	ldrh	r3, [r3, #0]
 8004fc2:	b29b      	uxth	r3, r3
 8004fc4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004fc8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fcc:	83fb      	strh	r3, [r7, #30]
 8004fce:	687a      	ldr	r2, [r7, #4]
 8004fd0:	683b      	ldr	r3, [r7, #0]
 8004fd2:	781b      	ldrb	r3, [r3, #0]
 8004fd4:	009b      	lsls	r3, r3, #2
 8004fd6:	441a      	add	r2, r3
 8004fd8:	8bfb      	ldrh	r3, [r7, #30]
 8004fda:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004fde:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004fe2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004fe6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004fea:	b29b      	uxth	r3, r3
 8004fec:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004fee:	687a      	ldr	r2, [r7, #4]
 8004ff0:	683b      	ldr	r3, [r7, #0]
 8004ff2:	781b      	ldrb	r3, [r3, #0]
 8004ff4:	009b      	lsls	r3, r3, #2
 8004ff6:	4413      	add	r3, r2
 8004ff8:	881b      	ldrh	r3, [r3, #0]
 8004ffa:	83bb      	strh	r3, [r7, #28]
 8004ffc:	8bbb      	ldrh	r3, [r7, #28]
 8004ffe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005002:	2b00      	cmp	r3, #0
 8005004:	d01b      	beq.n	800503e <USB_DeactivateEndpoint+0x1da>
 8005006:	687a      	ldr	r2, [r7, #4]
 8005008:	683b      	ldr	r3, [r7, #0]
 800500a:	781b      	ldrb	r3, [r3, #0]
 800500c:	009b      	lsls	r3, r3, #2
 800500e:	4413      	add	r3, r2
 8005010:	881b      	ldrh	r3, [r3, #0]
 8005012:	b29b      	uxth	r3, r3
 8005014:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005018:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800501c:	837b      	strh	r3, [r7, #26]
 800501e:	687a      	ldr	r2, [r7, #4]
 8005020:	683b      	ldr	r3, [r7, #0]
 8005022:	781b      	ldrb	r3, [r3, #0]
 8005024:	009b      	lsls	r3, r3, #2
 8005026:	441a      	add	r2, r3
 8005028:	8b7b      	ldrh	r3, [r7, #26]
 800502a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800502e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005032:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005036:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800503a:	b29b      	uxth	r3, r3
 800503c:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800503e:	687a      	ldr	r2, [r7, #4]
 8005040:	683b      	ldr	r3, [r7, #0]
 8005042:	781b      	ldrb	r3, [r3, #0]
 8005044:	009b      	lsls	r3, r3, #2
 8005046:	4413      	add	r3, r2
 8005048:	881b      	ldrh	r3, [r3, #0]
 800504a:	b29b      	uxth	r3, r3
 800504c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005050:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005054:	833b      	strh	r3, [r7, #24]
 8005056:	687a      	ldr	r2, [r7, #4]
 8005058:	683b      	ldr	r3, [r7, #0]
 800505a:	781b      	ldrb	r3, [r3, #0]
 800505c:	009b      	lsls	r3, r3, #2
 800505e:	441a      	add	r2, r3
 8005060:	8b3b      	ldrh	r3, [r7, #24]
 8005062:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005066:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800506a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800506e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005072:	b29b      	uxth	r3, r3
 8005074:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005076:	687a      	ldr	r2, [r7, #4]
 8005078:	683b      	ldr	r3, [r7, #0]
 800507a:	781b      	ldrb	r3, [r3, #0]
 800507c:	009b      	lsls	r3, r3, #2
 800507e:	4413      	add	r3, r2
 8005080:	881b      	ldrh	r3, [r3, #0]
 8005082:	b29b      	uxth	r3, r3
 8005084:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005088:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800508c:	82fb      	strh	r3, [r7, #22]
 800508e:	687a      	ldr	r2, [r7, #4]
 8005090:	683b      	ldr	r3, [r7, #0]
 8005092:	781b      	ldrb	r3, [r3, #0]
 8005094:	009b      	lsls	r3, r3, #2
 8005096:	441a      	add	r2, r3
 8005098:	8afb      	ldrh	r3, [r7, #22]
 800509a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800509e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80050a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80050a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80050aa:	b29b      	uxth	r3, r3
 80050ac:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80050ae:	687a      	ldr	r2, [r7, #4]
 80050b0:	683b      	ldr	r3, [r7, #0]
 80050b2:	781b      	ldrb	r3, [r3, #0]
 80050b4:	009b      	lsls	r3, r3, #2
 80050b6:	4413      	add	r3, r2
 80050b8:	881b      	ldrh	r3, [r3, #0]
 80050ba:	b29b      	uxth	r3, r3
 80050bc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80050c0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80050c4:	82bb      	strh	r3, [r7, #20]
 80050c6:	687a      	ldr	r2, [r7, #4]
 80050c8:	683b      	ldr	r3, [r7, #0]
 80050ca:	781b      	ldrb	r3, [r3, #0]
 80050cc:	009b      	lsls	r3, r3, #2
 80050ce:	441a      	add	r2, r3
 80050d0:	8abb      	ldrh	r3, [r7, #20]
 80050d2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80050d6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80050da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80050de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80050e2:	b29b      	uxth	r3, r3
 80050e4:	8013      	strh	r3, [r2, #0]
 80050e6:	e0a3      	b.n	8005230 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80050e8:	687a      	ldr	r2, [r7, #4]
 80050ea:	683b      	ldr	r3, [r7, #0]
 80050ec:	781b      	ldrb	r3, [r3, #0]
 80050ee:	009b      	lsls	r3, r3, #2
 80050f0:	4413      	add	r3, r2
 80050f2:	881b      	ldrh	r3, [r3, #0]
 80050f4:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80050f6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80050f8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d01b      	beq.n	8005138 <USB_DeactivateEndpoint+0x2d4>
 8005100:	687a      	ldr	r2, [r7, #4]
 8005102:	683b      	ldr	r3, [r7, #0]
 8005104:	781b      	ldrb	r3, [r3, #0]
 8005106:	009b      	lsls	r3, r3, #2
 8005108:	4413      	add	r3, r2
 800510a:	881b      	ldrh	r3, [r3, #0]
 800510c:	b29b      	uxth	r3, r3
 800510e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005112:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005116:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8005118:	687a      	ldr	r2, [r7, #4]
 800511a:	683b      	ldr	r3, [r7, #0]
 800511c:	781b      	ldrb	r3, [r3, #0]
 800511e:	009b      	lsls	r3, r3, #2
 8005120:	441a      	add	r2, r3
 8005122:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8005124:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005128:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800512c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005130:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005134:	b29b      	uxth	r3, r3
 8005136:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005138:	687a      	ldr	r2, [r7, #4]
 800513a:	683b      	ldr	r3, [r7, #0]
 800513c:	781b      	ldrb	r3, [r3, #0]
 800513e:	009b      	lsls	r3, r3, #2
 8005140:	4413      	add	r3, r2
 8005142:	881b      	ldrh	r3, [r3, #0]
 8005144:	857b      	strh	r3, [r7, #42]	; 0x2a
 8005146:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8005148:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800514c:	2b00      	cmp	r3, #0
 800514e:	d01b      	beq.n	8005188 <USB_DeactivateEndpoint+0x324>
 8005150:	687a      	ldr	r2, [r7, #4]
 8005152:	683b      	ldr	r3, [r7, #0]
 8005154:	781b      	ldrb	r3, [r3, #0]
 8005156:	009b      	lsls	r3, r3, #2
 8005158:	4413      	add	r3, r2
 800515a:	881b      	ldrh	r3, [r3, #0]
 800515c:	b29b      	uxth	r3, r3
 800515e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005162:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005166:	853b      	strh	r3, [r7, #40]	; 0x28
 8005168:	687a      	ldr	r2, [r7, #4]
 800516a:	683b      	ldr	r3, [r7, #0]
 800516c:	781b      	ldrb	r3, [r3, #0]
 800516e:	009b      	lsls	r3, r3, #2
 8005170:	441a      	add	r2, r3
 8005172:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005174:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005178:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800517c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005180:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005184:	b29b      	uxth	r3, r3
 8005186:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8005188:	687a      	ldr	r2, [r7, #4]
 800518a:	683b      	ldr	r3, [r7, #0]
 800518c:	781b      	ldrb	r3, [r3, #0]
 800518e:	009b      	lsls	r3, r3, #2
 8005190:	4413      	add	r3, r2
 8005192:	881b      	ldrh	r3, [r3, #0]
 8005194:	b29b      	uxth	r3, r3
 8005196:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800519a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800519e:	84fb      	strh	r3, [r7, #38]	; 0x26
 80051a0:	687a      	ldr	r2, [r7, #4]
 80051a2:	683b      	ldr	r3, [r7, #0]
 80051a4:	781b      	ldrb	r3, [r3, #0]
 80051a6:	009b      	lsls	r3, r3, #2
 80051a8:	441a      	add	r2, r3
 80051aa:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80051ac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80051b0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80051b4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80051b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80051bc:	b29b      	uxth	r3, r3
 80051be:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80051c0:	687a      	ldr	r2, [r7, #4]
 80051c2:	683b      	ldr	r3, [r7, #0]
 80051c4:	781b      	ldrb	r3, [r3, #0]
 80051c6:	009b      	lsls	r3, r3, #2
 80051c8:	4413      	add	r3, r2
 80051ca:	881b      	ldrh	r3, [r3, #0]
 80051cc:	b29b      	uxth	r3, r3
 80051ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80051d2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80051d6:	84bb      	strh	r3, [r7, #36]	; 0x24
 80051d8:	687a      	ldr	r2, [r7, #4]
 80051da:	683b      	ldr	r3, [r7, #0]
 80051dc:	781b      	ldrb	r3, [r3, #0]
 80051de:	009b      	lsls	r3, r3, #2
 80051e0:	441a      	add	r2, r3
 80051e2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80051e4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80051e8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80051ec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80051f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80051f4:	b29b      	uxth	r3, r3
 80051f6:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80051f8:	687a      	ldr	r2, [r7, #4]
 80051fa:	683b      	ldr	r3, [r7, #0]
 80051fc:	781b      	ldrb	r3, [r3, #0]
 80051fe:	009b      	lsls	r3, r3, #2
 8005200:	4413      	add	r3, r2
 8005202:	881b      	ldrh	r3, [r3, #0]
 8005204:	b29b      	uxth	r3, r3
 8005206:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800520a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800520e:	847b      	strh	r3, [r7, #34]	; 0x22
 8005210:	687a      	ldr	r2, [r7, #4]
 8005212:	683b      	ldr	r3, [r7, #0]
 8005214:	781b      	ldrb	r3, [r3, #0]
 8005216:	009b      	lsls	r3, r3, #2
 8005218:	441a      	add	r2, r3
 800521a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800521c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005220:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005224:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005228:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800522c:	b29b      	uxth	r3, r3
 800522e:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8005230:	2300      	movs	r3, #0
}
 8005232:	4618      	mov	r0, r3
 8005234:	3734      	adds	r7, #52	; 0x34
 8005236:	46bd      	mov	sp, r7
 8005238:	bc80      	pop	{r7}
 800523a:	4770      	bx	lr

0800523c <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800523c:	b580      	push	{r7, lr}
 800523e:	b0c4      	sub	sp, #272	; 0x110
 8005240:	af00      	add	r7, sp, #0
 8005242:	1d3b      	adds	r3, r7, #4
 8005244:	6018      	str	r0, [r3, #0]
 8005246:	463b      	mov	r3, r7
 8005248:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800524a:	463b      	mov	r3, r7
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	785b      	ldrb	r3, [r3, #1]
 8005250:	2b01      	cmp	r3, #1
 8005252:	f040 8557 	bne.w	8005d04 <USB_EPStartXfer+0xac8>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8005256:	463b      	mov	r3, r7
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	699a      	ldr	r2, [r3, #24]
 800525c:	463b      	mov	r3, r7
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	691b      	ldr	r3, [r3, #16]
 8005262:	429a      	cmp	r2, r3
 8005264:	d905      	bls.n	8005272 <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 8005266:	463b      	mov	r3, r7
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	691b      	ldr	r3, [r3, #16]
 800526c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8005270:	e004      	b.n	800527c <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 8005272:	463b      	mov	r3, r7
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	699b      	ldr	r3, [r3, #24]
 8005278:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800527c:	463b      	mov	r3, r7
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	7b1b      	ldrb	r3, [r3, #12]
 8005282:	2b00      	cmp	r3, #0
 8005284:	d12c      	bne.n	80052e0 <USB_EPStartXfer+0xa4>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8005286:	463b      	mov	r3, r7
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	6959      	ldr	r1, [r3, #20]
 800528c:	463b      	mov	r3, r7
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	88da      	ldrh	r2, [r3, #6]
 8005292:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005296:	b29b      	uxth	r3, r3
 8005298:	1d38      	adds	r0, r7, #4
 800529a:	6800      	ldr	r0, [r0, #0]
 800529c:	f001 fa2c 	bl	80066f8 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80052a0:	1d3b      	adds	r3, r7, #4
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	617b      	str	r3, [r7, #20]
 80052a6:	1d3b      	adds	r3, r7, #4
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80052ae:	b29b      	uxth	r3, r3
 80052b0:	461a      	mov	r2, r3
 80052b2:	697b      	ldr	r3, [r7, #20]
 80052b4:	4413      	add	r3, r2
 80052b6:	617b      	str	r3, [r7, #20]
 80052b8:	463b      	mov	r3, r7
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	781b      	ldrb	r3, [r3, #0]
 80052be:	011a      	lsls	r2, r3, #4
 80052c0:	697b      	ldr	r3, [r7, #20]
 80052c2:	4413      	add	r3, r2
 80052c4:	f203 4204 	addw	r2, r3, #1028	; 0x404
 80052c8:	f107 0310 	add.w	r3, r7, #16
 80052cc:	601a      	str	r2, [r3, #0]
 80052ce:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80052d2:	b29a      	uxth	r2, r3
 80052d4:	f107 0310 	add.w	r3, r7, #16
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	801a      	strh	r2, [r3, #0]
 80052dc:	f000 bcdd 	b.w	8005c9a <USB_EPStartXfer+0xa5e>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 80052e0:	463b      	mov	r3, r7
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	78db      	ldrb	r3, [r3, #3]
 80052e6:	2b02      	cmp	r3, #2
 80052e8:	f040 8347 	bne.w	800597a <USB_EPStartXfer+0x73e>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80052ec:	463b      	mov	r3, r7
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	6a1a      	ldr	r2, [r3, #32]
 80052f2:	463b      	mov	r3, r7
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	691b      	ldr	r3, [r3, #16]
 80052f8:	429a      	cmp	r2, r3
 80052fa:	f240 82eb 	bls.w	80058d4 <USB_EPStartXfer+0x698>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 80052fe:	1d3b      	adds	r3, r7, #4
 8005300:	681a      	ldr	r2, [r3, #0]
 8005302:	463b      	mov	r3, r7
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	781b      	ldrb	r3, [r3, #0]
 8005308:	009b      	lsls	r3, r3, #2
 800530a:	4413      	add	r3, r2
 800530c:	881b      	ldrh	r3, [r3, #0]
 800530e:	b29b      	uxth	r3, r3
 8005310:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005314:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005318:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
 800531c:	1d3b      	adds	r3, r7, #4
 800531e:	681a      	ldr	r2, [r3, #0]
 8005320:	463b      	mov	r3, r7
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	781b      	ldrb	r3, [r3, #0]
 8005326:	009b      	lsls	r3, r3, #2
 8005328:	441a      	add	r2, r3
 800532a:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 800532e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005332:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005336:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800533a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800533e:	b29b      	uxth	r3, r3
 8005340:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8005342:	463b      	mov	r3, r7
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	6a1a      	ldr	r2, [r3, #32]
 8005348:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800534c:	1ad2      	subs	r2, r2, r3
 800534e:	463b      	mov	r3, r7
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005354:	1d3b      	adds	r3, r7, #4
 8005356:	681a      	ldr	r2, [r3, #0]
 8005358:	463b      	mov	r3, r7
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	781b      	ldrb	r3, [r3, #0]
 800535e:	009b      	lsls	r3, r3, #2
 8005360:	4413      	add	r3, r2
 8005362:	881b      	ldrh	r3, [r3, #0]
 8005364:	b29b      	uxth	r3, r3
 8005366:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800536a:	2b00      	cmp	r3, #0
 800536c:	f000 8159 	beq.w	8005622 <USB_EPStartXfer+0x3e6>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005370:	1d3b      	adds	r3, r7, #4
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	637b      	str	r3, [r7, #52]	; 0x34
 8005376:	463b      	mov	r3, r7
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	785b      	ldrb	r3, [r3, #1]
 800537c:	2b00      	cmp	r3, #0
 800537e:	d164      	bne.n	800544a <USB_EPStartXfer+0x20e>
 8005380:	1d3b      	adds	r3, r7, #4
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005386:	1d3b      	adds	r3, r7, #4
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800538e:	b29b      	uxth	r3, r3
 8005390:	461a      	mov	r2, r3
 8005392:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005394:	4413      	add	r3, r2
 8005396:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005398:	463b      	mov	r3, r7
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	781b      	ldrb	r3, [r3, #0]
 800539e:	011a      	lsls	r2, r3, #4
 80053a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053a2:	4413      	add	r3, r2
 80053a4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80053a8:	62bb      	str	r3, [r7, #40]	; 0x28
 80053aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d112      	bne.n	80053d8 <USB_EPStartXfer+0x19c>
 80053b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053b4:	881b      	ldrh	r3, [r3, #0]
 80053b6:	b29b      	uxth	r3, r3
 80053b8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80053bc:	b29a      	uxth	r2, r3
 80053be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053c0:	801a      	strh	r2, [r3, #0]
 80053c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053c4:	881b      	ldrh	r3, [r3, #0]
 80053c6:	b29b      	uxth	r3, r3
 80053c8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80053cc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80053d0:	b29a      	uxth	r2, r3
 80053d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053d4:	801a      	strh	r2, [r3, #0]
 80053d6:	e054      	b.n	8005482 <USB_EPStartXfer+0x246>
 80053d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80053dc:	2b3e      	cmp	r3, #62	; 0x3e
 80053de:	d817      	bhi.n	8005410 <USB_EPStartXfer+0x1d4>
 80053e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80053e4:	085b      	lsrs	r3, r3, #1
 80053e6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80053ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80053ee:	f003 0301 	and.w	r3, r3, #1
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d004      	beq.n	8005400 <USB_EPStartXfer+0x1c4>
 80053f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80053fa:	3301      	adds	r3, #1
 80053fc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005400:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005404:	b29b      	uxth	r3, r3
 8005406:	029b      	lsls	r3, r3, #10
 8005408:	b29a      	uxth	r2, r3
 800540a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800540c:	801a      	strh	r2, [r3, #0]
 800540e:	e038      	b.n	8005482 <USB_EPStartXfer+0x246>
 8005410:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005414:	095b      	lsrs	r3, r3, #5
 8005416:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800541a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800541e:	f003 031f 	and.w	r3, r3, #31
 8005422:	2b00      	cmp	r3, #0
 8005424:	d104      	bne.n	8005430 <USB_EPStartXfer+0x1f4>
 8005426:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800542a:	3b01      	subs	r3, #1
 800542c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005430:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005434:	b29b      	uxth	r3, r3
 8005436:	029b      	lsls	r3, r3, #10
 8005438:	b29b      	uxth	r3, r3
 800543a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800543e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005442:	b29a      	uxth	r2, r3
 8005444:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005446:	801a      	strh	r2, [r3, #0]
 8005448:	e01b      	b.n	8005482 <USB_EPStartXfer+0x246>
 800544a:	463b      	mov	r3, r7
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	785b      	ldrb	r3, [r3, #1]
 8005450:	2b01      	cmp	r3, #1
 8005452:	d116      	bne.n	8005482 <USB_EPStartXfer+0x246>
 8005454:	1d3b      	adds	r3, r7, #4
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800545c:	b29b      	uxth	r3, r3
 800545e:	461a      	mov	r2, r3
 8005460:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005462:	4413      	add	r3, r2
 8005464:	637b      	str	r3, [r7, #52]	; 0x34
 8005466:	463b      	mov	r3, r7
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	781b      	ldrb	r3, [r3, #0]
 800546c:	011a      	lsls	r2, r3, #4
 800546e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005470:	4413      	add	r3, r2
 8005472:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005476:	633b      	str	r3, [r7, #48]	; 0x30
 8005478:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800547c:	b29a      	uxth	r2, r3
 800547e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005480:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005482:	463b      	mov	r3, r7
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	895b      	ldrh	r3, [r3, #10]
 8005488:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800548c:	463b      	mov	r3, r7
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	6959      	ldr	r1, [r3, #20]
 8005492:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005496:	b29b      	uxth	r3, r3
 8005498:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 800549c:	1d38      	adds	r0, r7, #4
 800549e:	6800      	ldr	r0, [r0, #0]
 80054a0:	f001 f92a 	bl	80066f8 <USB_WritePMA>
            ep->xfer_buff += len;
 80054a4:	463b      	mov	r3, r7
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	695a      	ldr	r2, [r3, #20]
 80054aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80054ae:	441a      	add	r2, r3
 80054b0:	463b      	mov	r3, r7
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80054b6:	463b      	mov	r3, r7
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	6a1a      	ldr	r2, [r3, #32]
 80054bc:	463b      	mov	r3, r7
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	691b      	ldr	r3, [r3, #16]
 80054c2:	429a      	cmp	r2, r3
 80054c4:	d909      	bls.n	80054da <USB_EPStartXfer+0x29e>
            {
              ep->xfer_len_db -= len;
 80054c6:	463b      	mov	r3, r7
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	6a1a      	ldr	r2, [r3, #32]
 80054cc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80054d0:	1ad2      	subs	r2, r2, r3
 80054d2:	463b      	mov	r3, r7
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	621a      	str	r2, [r3, #32]
 80054d8:	e008      	b.n	80054ec <USB_EPStartXfer+0x2b0>
            }
            else
            {
              len = ep->xfer_len_db;
 80054da:	463b      	mov	r3, r7
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	6a1b      	ldr	r3, [r3, #32]
 80054e0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
              ep->xfer_len_db = 0U;
 80054e4:	463b      	mov	r3, r7
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	2200      	movs	r2, #0
 80054ea:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80054ec:	463b      	mov	r3, r7
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	785b      	ldrb	r3, [r3, #1]
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d164      	bne.n	80055c0 <USB_EPStartXfer+0x384>
 80054f6:	1d3b      	adds	r3, r7, #4
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	61fb      	str	r3, [r7, #28]
 80054fc:	1d3b      	adds	r3, r7, #4
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005504:	b29b      	uxth	r3, r3
 8005506:	461a      	mov	r2, r3
 8005508:	69fb      	ldr	r3, [r7, #28]
 800550a:	4413      	add	r3, r2
 800550c:	61fb      	str	r3, [r7, #28]
 800550e:	463b      	mov	r3, r7
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	781b      	ldrb	r3, [r3, #0]
 8005514:	011a      	lsls	r2, r3, #4
 8005516:	69fb      	ldr	r3, [r7, #28]
 8005518:	4413      	add	r3, r2
 800551a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800551e:	61bb      	str	r3, [r7, #24]
 8005520:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005524:	2b00      	cmp	r3, #0
 8005526:	d112      	bne.n	800554e <USB_EPStartXfer+0x312>
 8005528:	69bb      	ldr	r3, [r7, #24]
 800552a:	881b      	ldrh	r3, [r3, #0]
 800552c:	b29b      	uxth	r3, r3
 800552e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005532:	b29a      	uxth	r2, r3
 8005534:	69bb      	ldr	r3, [r7, #24]
 8005536:	801a      	strh	r2, [r3, #0]
 8005538:	69bb      	ldr	r3, [r7, #24]
 800553a:	881b      	ldrh	r3, [r3, #0]
 800553c:	b29b      	uxth	r3, r3
 800553e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005542:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005546:	b29a      	uxth	r2, r3
 8005548:	69bb      	ldr	r3, [r7, #24]
 800554a:	801a      	strh	r2, [r3, #0]
 800554c:	e057      	b.n	80055fe <USB_EPStartXfer+0x3c2>
 800554e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005552:	2b3e      	cmp	r3, #62	; 0x3e
 8005554:	d817      	bhi.n	8005586 <USB_EPStartXfer+0x34a>
 8005556:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800555a:	085b      	lsrs	r3, r3, #1
 800555c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005560:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005564:	f003 0301 	and.w	r3, r3, #1
 8005568:	2b00      	cmp	r3, #0
 800556a:	d004      	beq.n	8005576 <USB_EPStartXfer+0x33a>
 800556c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005570:	3301      	adds	r3, #1
 8005572:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005576:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800557a:	b29b      	uxth	r3, r3
 800557c:	029b      	lsls	r3, r3, #10
 800557e:	b29a      	uxth	r2, r3
 8005580:	69bb      	ldr	r3, [r7, #24]
 8005582:	801a      	strh	r2, [r3, #0]
 8005584:	e03b      	b.n	80055fe <USB_EPStartXfer+0x3c2>
 8005586:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800558a:	095b      	lsrs	r3, r3, #5
 800558c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005590:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005594:	f003 031f 	and.w	r3, r3, #31
 8005598:	2b00      	cmp	r3, #0
 800559a:	d104      	bne.n	80055a6 <USB_EPStartXfer+0x36a>
 800559c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80055a0:	3b01      	subs	r3, #1
 80055a2:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80055a6:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80055aa:	b29b      	uxth	r3, r3
 80055ac:	029b      	lsls	r3, r3, #10
 80055ae:	b29b      	uxth	r3, r3
 80055b0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80055b4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80055b8:	b29a      	uxth	r2, r3
 80055ba:	69bb      	ldr	r3, [r7, #24]
 80055bc:	801a      	strh	r2, [r3, #0]
 80055be:	e01e      	b.n	80055fe <USB_EPStartXfer+0x3c2>
 80055c0:	463b      	mov	r3, r7
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	785b      	ldrb	r3, [r3, #1]
 80055c6:	2b01      	cmp	r3, #1
 80055c8:	d119      	bne.n	80055fe <USB_EPStartXfer+0x3c2>
 80055ca:	1d3b      	adds	r3, r7, #4
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	627b      	str	r3, [r7, #36]	; 0x24
 80055d0:	1d3b      	adds	r3, r7, #4
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80055d8:	b29b      	uxth	r3, r3
 80055da:	461a      	mov	r2, r3
 80055dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055de:	4413      	add	r3, r2
 80055e0:	627b      	str	r3, [r7, #36]	; 0x24
 80055e2:	463b      	mov	r3, r7
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	781b      	ldrb	r3, [r3, #0]
 80055e8:	011a      	lsls	r2, r3, #4
 80055ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055ec:	4413      	add	r3, r2
 80055ee:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80055f2:	623b      	str	r3, [r7, #32]
 80055f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80055f8:	b29a      	uxth	r2, r3
 80055fa:	6a3b      	ldr	r3, [r7, #32]
 80055fc:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80055fe:	463b      	mov	r3, r7
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	891b      	ldrh	r3, [r3, #8]
 8005604:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005608:	463b      	mov	r3, r7
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	6959      	ldr	r1, [r3, #20]
 800560e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005612:	b29b      	uxth	r3, r3
 8005614:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8005618:	1d38      	adds	r0, r7, #4
 800561a:	6800      	ldr	r0, [r0, #0]
 800561c:	f001 f86c 	bl	80066f8 <USB_WritePMA>
 8005620:	e33b      	b.n	8005c9a <USB_EPStartXfer+0xa5e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005622:	463b      	mov	r3, r7
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	785b      	ldrb	r3, [r3, #1]
 8005628:	2b00      	cmp	r3, #0
 800562a:	d164      	bne.n	80056f6 <USB_EPStartXfer+0x4ba>
 800562c:	1d3b      	adds	r3, r7, #4
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005632:	1d3b      	adds	r3, r7, #4
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800563a:	b29b      	uxth	r3, r3
 800563c:	461a      	mov	r2, r3
 800563e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005640:	4413      	add	r3, r2
 8005642:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005644:	463b      	mov	r3, r7
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	781b      	ldrb	r3, [r3, #0]
 800564a:	011a      	lsls	r2, r3, #4
 800564c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800564e:	4413      	add	r3, r2
 8005650:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005654:	64bb      	str	r3, [r7, #72]	; 0x48
 8005656:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800565a:	2b00      	cmp	r3, #0
 800565c:	d112      	bne.n	8005684 <USB_EPStartXfer+0x448>
 800565e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005660:	881b      	ldrh	r3, [r3, #0]
 8005662:	b29b      	uxth	r3, r3
 8005664:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005668:	b29a      	uxth	r2, r3
 800566a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800566c:	801a      	strh	r2, [r3, #0]
 800566e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005670:	881b      	ldrh	r3, [r3, #0]
 8005672:	b29b      	uxth	r3, r3
 8005674:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005678:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800567c:	b29a      	uxth	r2, r3
 800567e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005680:	801a      	strh	r2, [r3, #0]
 8005682:	e057      	b.n	8005734 <USB_EPStartXfer+0x4f8>
 8005684:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005688:	2b3e      	cmp	r3, #62	; 0x3e
 800568a:	d817      	bhi.n	80056bc <USB_EPStartXfer+0x480>
 800568c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005690:	085b      	lsrs	r3, r3, #1
 8005692:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005696:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800569a:	f003 0301 	and.w	r3, r3, #1
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d004      	beq.n	80056ac <USB_EPStartXfer+0x470>
 80056a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80056a6:	3301      	adds	r3, #1
 80056a8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80056ac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80056b0:	b29b      	uxth	r3, r3
 80056b2:	029b      	lsls	r3, r3, #10
 80056b4:	b29a      	uxth	r2, r3
 80056b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80056b8:	801a      	strh	r2, [r3, #0]
 80056ba:	e03b      	b.n	8005734 <USB_EPStartXfer+0x4f8>
 80056bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80056c0:	095b      	lsrs	r3, r3, #5
 80056c2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80056c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80056ca:	f003 031f 	and.w	r3, r3, #31
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d104      	bne.n	80056dc <USB_EPStartXfer+0x4a0>
 80056d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80056d6:	3b01      	subs	r3, #1
 80056d8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80056dc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80056e0:	b29b      	uxth	r3, r3
 80056e2:	029b      	lsls	r3, r3, #10
 80056e4:	b29b      	uxth	r3, r3
 80056e6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80056ea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80056ee:	b29a      	uxth	r2, r3
 80056f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80056f2:	801a      	strh	r2, [r3, #0]
 80056f4:	e01e      	b.n	8005734 <USB_EPStartXfer+0x4f8>
 80056f6:	463b      	mov	r3, r7
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	785b      	ldrb	r3, [r3, #1]
 80056fc:	2b01      	cmp	r3, #1
 80056fe:	d119      	bne.n	8005734 <USB_EPStartXfer+0x4f8>
 8005700:	1d3b      	adds	r3, r7, #4
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	657b      	str	r3, [r7, #84]	; 0x54
 8005706:	1d3b      	adds	r3, r7, #4
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800570e:	b29b      	uxth	r3, r3
 8005710:	461a      	mov	r2, r3
 8005712:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005714:	4413      	add	r3, r2
 8005716:	657b      	str	r3, [r7, #84]	; 0x54
 8005718:	463b      	mov	r3, r7
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	781b      	ldrb	r3, [r3, #0]
 800571e:	011a      	lsls	r2, r3, #4
 8005720:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005722:	4413      	add	r3, r2
 8005724:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005728:	653b      	str	r3, [r7, #80]	; 0x50
 800572a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800572e:	b29a      	uxth	r2, r3
 8005730:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005732:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005734:	463b      	mov	r3, r7
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	891b      	ldrh	r3, [r3, #8]
 800573a:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800573e:	463b      	mov	r3, r7
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	6959      	ldr	r1, [r3, #20]
 8005744:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005748:	b29b      	uxth	r3, r3
 800574a:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 800574e:	1d38      	adds	r0, r7, #4
 8005750:	6800      	ldr	r0, [r0, #0]
 8005752:	f000 ffd1 	bl	80066f8 <USB_WritePMA>
            ep->xfer_buff += len;
 8005756:	463b      	mov	r3, r7
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	695a      	ldr	r2, [r3, #20]
 800575c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005760:	441a      	add	r2, r3
 8005762:	463b      	mov	r3, r7
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005768:	463b      	mov	r3, r7
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	6a1a      	ldr	r2, [r3, #32]
 800576e:	463b      	mov	r3, r7
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	691b      	ldr	r3, [r3, #16]
 8005774:	429a      	cmp	r2, r3
 8005776:	d909      	bls.n	800578c <USB_EPStartXfer+0x550>
            {
              ep->xfer_len_db -= len;
 8005778:	463b      	mov	r3, r7
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	6a1a      	ldr	r2, [r3, #32]
 800577e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005782:	1ad2      	subs	r2, r2, r3
 8005784:	463b      	mov	r3, r7
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	621a      	str	r2, [r3, #32]
 800578a:	e008      	b.n	800579e <USB_EPStartXfer+0x562>
            }
            else
            {
              len = ep->xfer_len_db;
 800578c:	463b      	mov	r3, r7
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	6a1b      	ldr	r3, [r3, #32]
 8005792:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
              ep->xfer_len_db = 0U;
 8005796:	463b      	mov	r3, r7
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	2200      	movs	r2, #0
 800579c:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800579e:	1d3b      	adds	r3, r7, #4
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	647b      	str	r3, [r7, #68]	; 0x44
 80057a4:	463b      	mov	r3, r7
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	785b      	ldrb	r3, [r3, #1]
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d164      	bne.n	8005878 <USB_EPStartXfer+0x63c>
 80057ae:	1d3b      	adds	r3, r7, #4
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80057b4:	1d3b      	adds	r3, r7, #4
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80057bc:	b29b      	uxth	r3, r3
 80057be:	461a      	mov	r2, r3
 80057c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80057c2:	4413      	add	r3, r2
 80057c4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80057c6:	463b      	mov	r3, r7
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	781b      	ldrb	r3, [r3, #0]
 80057cc:	011a      	lsls	r2, r3, #4
 80057ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80057d0:	4413      	add	r3, r2
 80057d2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80057d6:	63bb      	str	r3, [r7, #56]	; 0x38
 80057d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d112      	bne.n	8005806 <USB_EPStartXfer+0x5ca>
 80057e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057e2:	881b      	ldrh	r3, [r3, #0]
 80057e4:	b29b      	uxth	r3, r3
 80057e6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80057ea:	b29a      	uxth	r2, r3
 80057ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057ee:	801a      	strh	r2, [r3, #0]
 80057f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057f2:	881b      	ldrh	r3, [r3, #0]
 80057f4:	b29b      	uxth	r3, r3
 80057f6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80057fa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80057fe:	b29a      	uxth	r2, r3
 8005800:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005802:	801a      	strh	r2, [r3, #0]
 8005804:	e054      	b.n	80058b0 <USB_EPStartXfer+0x674>
 8005806:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800580a:	2b3e      	cmp	r3, #62	; 0x3e
 800580c:	d817      	bhi.n	800583e <USB_EPStartXfer+0x602>
 800580e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005812:	085b      	lsrs	r3, r3, #1
 8005814:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005818:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800581c:	f003 0301 	and.w	r3, r3, #1
 8005820:	2b00      	cmp	r3, #0
 8005822:	d004      	beq.n	800582e <USB_EPStartXfer+0x5f2>
 8005824:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005828:	3301      	adds	r3, #1
 800582a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800582e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005832:	b29b      	uxth	r3, r3
 8005834:	029b      	lsls	r3, r3, #10
 8005836:	b29a      	uxth	r2, r3
 8005838:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800583a:	801a      	strh	r2, [r3, #0]
 800583c:	e038      	b.n	80058b0 <USB_EPStartXfer+0x674>
 800583e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005842:	095b      	lsrs	r3, r3, #5
 8005844:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005848:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800584c:	f003 031f 	and.w	r3, r3, #31
 8005850:	2b00      	cmp	r3, #0
 8005852:	d104      	bne.n	800585e <USB_EPStartXfer+0x622>
 8005854:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005858:	3b01      	subs	r3, #1
 800585a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800585e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005862:	b29b      	uxth	r3, r3
 8005864:	029b      	lsls	r3, r3, #10
 8005866:	b29b      	uxth	r3, r3
 8005868:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800586c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005870:	b29a      	uxth	r2, r3
 8005872:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005874:	801a      	strh	r2, [r3, #0]
 8005876:	e01b      	b.n	80058b0 <USB_EPStartXfer+0x674>
 8005878:	463b      	mov	r3, r7
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	785b      	ldrb	r3, [r3, #1]
 800587e:	2b01      	cmp	r3, #1
 8005880:	d116      	bne.n	80058b0 <USB_EPStartXfer+0x674>
 8005882:	1d3b      	adds	r3, r7, #4
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800588a:	b29b      	uxth	r3, r3
 800588c:	461a      	mov	r2, r3
 800588e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005890:	4413      	add	r3, r2
 8005892:	647b      	str	r3, [r7, #68]	; 0x44
 8005894:	463b      	mov	r3, r7
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	781b      	ldrb	r3, [r3, #0]
 800589a:	011a      	lsls	r2, r3, #4
 800589c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800589e:	4413      	add	r3, r2
 80058a0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80058a4:	643b      	str	r3, [r7, #64]	; 0x40
 80058a6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80058aa:	b29a      	uxth	r2, r3
 80058ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80058ae:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80058b0:	463b      	mov	r3, r7
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	895b      	ldrh	r3, [r3, #10]
 80058b6:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80058ba:	463b      	mov	r3, r7
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	6959      	ldr	r1, [r3, #20]
 80058c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80058c4:	b29b      	uxth	r3, r3
 80058c6:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 80058ca:	1d38      	adds	r0, r7, #4
 80058cc:	6800      	ldr	r0, [r0, #0]
 80058ce:	f000 ff13 	bl	80066f8 <USB_WritePMA>
 80058d2:	e1e2      	b.n	8005c9a <USB_EPStartXfer+0xa5e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 80058d4:	463b      	mov	r3, r7
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	6a1b      	ldr	r3, [r3, #32]
 80058da:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 80058de:	1d3b      	adds	r3, r7, #4
 80058e0:	681a      	ldr	r2, [r3, #0]
 80058e2:	463b      	mov	r3, r7
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	781b      	ldrb	r3, [r3, #0]
 80058e8:	009b      	lsls	r3, r3, #2
 80058ea:	4413      	add	r3, r2
 80058ec:	881b      	ldrh	r3, [r3, #0]
 80058ee:	b29b      	uxth	r3, r3
 80058f0:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 80058f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058f8:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 80058fc:	1d3b      	adds	r3, r7, #4
 80058fe:	681a      	ldr	r2, [r3, #0]
 8005900:	463b      	mov	r3, r7
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	781b      	ldrb	r3, [r3, #0]
 8005906:	009b      	lsls	r3, r3, #2
 8005908:	441a      	add	r2, r3
 800590a:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 800590e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005912:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005916:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800591a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800591e:	b29b      	uxth	r3, r3
 8005920:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005922:	1d3b      	adds	r3, r7, #4
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	663b      	str	r3, [r7, #96]	; 0x60
 8005928:	1d3b      	adds	r3, r7, #4
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005930:	b29b      	uxth	r3, r3
 8005932:	461a      	mov	r2, r3
 8005934:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005936:	4413      	add	r3, r2
 8005938:	663b      	str	r3, [r7, #96]	; 0x60
 800593a:	463b      	mov	r3, r7
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	781b      	ldrb	r3, [r3, #0]
 8005940:	011a      	lsls	r2, r3, #4
 8005942:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005944:	4413      	add	r3, r2
 8005946:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800594a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800594c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005950:	b29a      	uxth	r2, r3
 8005952:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005954:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005956:	463b      	mov	r3, r7
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	891b      	ldrh	r3, [r3, #8]
 800595c:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005960:	463b      	mov	r3, r7
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	6959      	ldr	r1, [r3, #20]
 8005966:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800596a:	b29b      	uxth	r3, r3
 800596c:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8005970:	1d38      	adds	r0, r7, #4
 8005972:	6800      	ldr	r0, [r0, #0]
 8005974:	f000 fec0 	bl	80066f8 <USB_WritePMA>
 8005978:	e18f      	b.n	8005c9a <USB_EPStartXfer+0xa5e>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* Write the data to the USB endpoint */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800597a:	1d3b      	adds	r3, r7, #4
 800597c:	681a      	ldr	r2, [r3, #0]
 800597e:	463b      	mov	r3, r7
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	781b      	ldrb	r3, [r3, #0]
 8005984:	009b      	lsls	r3, r3, #2
 8005986:	4413      	add	r3, r2
 8005988:	881b      	ldrh	r3, [r3, #0]
 800598a:	b29b      	uxth	r3, r3
 800598c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005990:	2b00      	cmp	r3, #0
 8005992:	f000 808f 	beq.w	8005ab4 <USB_EPStartXfer+0x878>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005996:	1d3b      	adds	r3, r7, #4
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	67bb      	str	r3, [r7, #120]	; 0x78
 800599c:	463b      	mov	r3, r7
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	785b      	ldrb	r3, [r3, #1]
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d164      	bne.n	8005a70 <USB_EPStartXfer+0x834>
 80059a6:	1d3b      	adds	r3, r7, #4
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	673b      	str	r3, [r7, #112]	; 0x70
 80059ac:	1d3b      	adds	r3, r7, #4
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80059b4:	b29b      	uxth	r3, r3
 80059b6:	461a      	mov	r2, r3
 80059b8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80059ba:	4413      	add	r3, r2
 80059bc:	673b      	str	r3, [r7, #112]	; 0x70
 80059be:	463b      	mov	r3, r7
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	781b      	ldrb	r3, [r3, #0]
 80059c4:	011a      	lsls	r2, r3, #4
 80059c6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80059c8:	4413      	add	r3, r2
 80059ca:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80059ce:	66fb      	str	r3, [r7, #108]	; 0x6c
 80059d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d112      	bne.n	80059fe <USB_EPStartXfer+0x7c2>
 80059d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80059da:	881b      	ldrh	r3, [r3, #0]
 80059dc:	b29b      	uxth	r3, r3
 80059de:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80059e2:	b29a      	uxth	r2, r3
 80059e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80059e6:	801a      	strh	r2, [r3, #0]
 80059e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80059ea:	881b      	ldrh	r3, [r3, #0]
 80059ec:	b29b      	uxth	r3, r3
 80059ee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80059f2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80059f6:	b29a      	uxth	r2, r3
 80059f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80059fa:	801a      	strh	r2, [r3, #0]
 80059fc:	e054      	b.n	8005aa8 <USB_EPStartXfer+0x86c>
 80059fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005a02:	2b3e      	cmp	r3, #62	; 0x3e
 8005a04:	d817      	bhi.n	8005a36 <USB_EPStartXfer+0x7fa>
 8005a06:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005a0a:	085b      	lsrs	r3, r3, #1
 8005a0c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005a10:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005a14:	f003 0301 	and.w	r3, r3, #1
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d004      	beq.n	8005a26 <USB_EPStartXfer+0x7ea>
 8005a1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a20:	3301      	adds	r3, #1
 8005a22:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005a26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a2a:	b29b      	uxth	r3, r3
 8005a2c:	029b      	lsls	r3, r3, #10
 8005a2e:	b29a      	uxth	r2, r3
 8005a30:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a32:	801a      	strh	r2, [r3, #0]
 8005a34:	e038      	b.n	8005aa8 <USB_EPStartXfer+0x86c>
 8005a36:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005a3a:	095b      	lsrs	r3, r3, #5
 8005a3c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005a40:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005a44:	f003 031f 	and.w	r3, r3, #31
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d104      	bne.n	8005a56 <USB_EPStartXfer+0x81a>
 8005a4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a50:	3b01      	subs	r3, #1
 8005a52:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005a56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a5a:	b29b      	uxth	r3, r3
 8005a5c:	029b      	lsls	r3, r3, #10
 8005a5e:	b29b      	uxth	r3, r3
 8005a60:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a64:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a68:	b29a      	uxth	r2, r3
 8005a6a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a6c:	801a      	strh	r2, [r3, #0]
 8005a6e:	e01b      	b.n	8005aa8 <USB_EPStartXfer+0x86c>
 8005a70:	463b      	mov	r3, r7
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	785b      	ldrb	r3, [r3, #1]
 8005a76:	2b01      	cmp	r3, #1
 8005a78:	d116      	bne.n	8005aa8 <USB_EPStartXfer+0x86c>
 8005a7a:	1d3b      	adds	r3, r7, #4
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a82:	b29b      	uxth	r3, r3
 8005a84:	461a      	mov	r2, r3
 8005a86:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005a88:	4413      	add	r3, r2
 8005a8a:	67bb      	str	r3, [r7, #120]	; 0x78
 8005a8c:	463b      	mov	r3, r7
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	781b      	ldrb	r3, [r3, #0]
 8005a92:	011a      	lsls	r2, r3, #4
 8005a94:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005a96:	4413      	add	r3, r2
 8005a98:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005a9c:	677b      	str	r3, [r7, #116]	; 0x74
 8005a9e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005aa2:	b29a      	uxth	r2, r3
 8005aa4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005aa6:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8005aa8:	463b      	mov	r3, r7
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	895b      	ldrh	r3, [r3, #10]
 8005aae:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
 8005ab2:	e097      	b.n	8005be4 <USB_EPStartXfer+0x9a8>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005ab4:	463b      	mov	r3, r7
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	785b      	ldrb	r3, [r3, #1]
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d168      	bne.n	8005b90 <USB_EPStartXfer+0x954>
 8005abe:	1d3b      	adds	r3, r7, #4
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005ac6:	1d3b      	adds	r3, r7, #4
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005ace:	b29b      	uxth	r3, r3
 8005ad0:	461a      	mov	r2, r3
 8005ad2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005ad6:	4413      	add	r3, r2
 8005ad8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005adc:	463b      	mov	r3, r7
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	781b      	ldrb	r3, [r3, #0]
 8005ae2:	011a      	lsls	r2, r3, #4
 8005ae4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005ae8:	4413      	add	r3, r2
 8005aea:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005aee:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005af0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d112      	bne.n	8005b1e <USB_EPStartXfer+0x8e2>
 8005af8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005afa:	881b      	ldrh	r3, [r3, #0]
 8005afc:	b29b      	uxth	r3, r3
 8005afe:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005b02:	b29a      	uxth	r2, r3
 8005b04:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005b06:	801a      	strh	r2, [r3, #0]
 8005b08:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005b0a:	881b      	ldrh	r3, [r3, #0]
 8005b0c:	b29b      	uxth	r3, r3
 8005b0e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b12:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b16:	b29a      	uxth	r2, r3
 8005b18:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005b1a:	801a      	strh	r2, [r3, #0]
 8005b1c:	e05d      	b.n	8005bda <USB_EPStartXfer+0x99e>
 8005b1e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005b22:	2b3e      	cmp	r3, #62	; 0x3e
 8005b24:	d817      	bhi.n	8005b56 <USB_EPStartXfer+0x91a>
 8005b26:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005b2a:	085b      	lsrs	r3, r3, #1
 8005b2c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005b30:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005b34:	f003 0301 	and.w	r3, r3, #1
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d004      	beq.n	8005b46 <USB_EPStartXfer+0x90a>
 8005b3c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005b40:	3301      	adds	r3, #1
 8005b42:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005b46:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005b4a:	b29b      	uxth	r3, r3
 8005b4c:	029b      	lsls	r3, r3, #10
 8005b4e:	b29a      	uxth	r2, r3
 8005b50:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005b52:	801a      	strh	r2, [r3, #0]
 8005b54:	e041      	b.n	8005bda <USB_EPStartXfer+0x99e>
 8005b56:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005b5a:	095b      	lsrs	r3, r3, #5
 8005b5c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005b60:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005b64:	f003 031f 	and.w	r3, r3, #31
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d104      	bne.n	8005b76 <USB_EPStartXfer+0x93a>
 8005b6c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005b70:	3b01      	subs	r3, #1
 8005b72:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005b76:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005b7a:	b29b      	uxth	r3, r3
 8005b7c:	029b      	lsls	r3, r3, #10
 8005b7e:	b29b      	uxth	r3, r3
 8005b80:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b84:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b88:	b29a      	uxth	r2, r3
 8005b8a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005b8c:	801a      	strh	r2, [r3, #0]
 8005b8e:	e024      	b.n	8005bda <USB_EPStartXfer+0x99e>
 8005b90:	463b      	mov	r3, r7
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	785b      	ldrb	r3, [r3, #1]
 8005b96:	2b01      	cmp	r3, #1
 8005b98:	d11f      	bne.n	8005bda <USB_EPStartXfer+0x99e>
 8005b9a:	1d3b      	adds	r3, r7, #4
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005ba2:	1d3b      	adds	r3, r7, #4
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005baa:	b29b      	uxth	r3, r3
 8005bac:	461a      	mov	r2, r3
 8005bae:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005bb2:	4413      	add	r3, r2
 8005bb4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005bb8:	463b      	mov	r3, r7
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	781b      	ldrb	r3, [r3, #0]
 8005bbe:	011a      	lsls	r2, r3, #4
 8005bc0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005bc4:	4413      	add	r3, r2
 8005bc6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005bca:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005bce:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005bd2:	b29a      	uxth	r2, r3
 8005bd4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005bd8:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005bda:	463b      	mov	r3, r7
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	891b      	ldrh	r3, [r3, #8]
 8005be0:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
        }

        USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005be4:	463b      	mov	r3, r7
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	6959      	ldr	r1, [r3, #20]
 8005bea:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005bee:	b29b      	uxth	r3, r3
 8005bf0:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8005bf4:	1d38      	adds	r0, r7, #4
 8005bf6:	6800      	ldr	r0, [r0, #0]
 8005bf8:	f000 fd7e 	bl	80066f8 <USB_WritePMA>
        PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8005bfc:	463b      	mov	r3, r7
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	785b      	ldrb	r3, [r3, #1]
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d122      	bne.n	8005c4c <USB_EPStartXfer+0xa10>
 8005c06:	1d3b      	adds	r3, r7, #4
 8005c08:	681a      	ldr	r2, [r3, #0]
 8005c0a:	463b      	mov	r3, r7
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	781b      	ldrb	r3, [r3, #0]
 8005c10:	009b      	lsls	r3, r3, #2
 8005c12:	4413      	add	r3, r2
 8005c14:	881b      	ldrh	r3, [r3, #0]
 8005c16:	b29b      	uxth	r3, r3
 8005c18:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c1c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c20:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 8005c24:	1d3b      	adds	r3, r7, #4
 8005c26:	681a      	ldr	r2, [r3, #0]
 8005c28:	463b      	mov	r3, r7
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	781b      	ldrb	r3, [r3, #0]
 8005c2e:	009b      	lsls	r3, r3, #2
 8005c30:	441a      	add	r2, r3
 8005c32:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8005c36:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005c3a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005c3e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005c42:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005c46:	b29b      	uxth	r3, r3
 8005c48:	8013      	strh	r3, [r2, #0]
 8005c4a:	e026      	b.n	8005c9a <USB_EPStartXfer+0xa5e>
 8005c4c:	463b      	mov	r3, r7
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	785b      	ldrb	r3, [r3, #1]
 8005c52:	2b01      	cmp	r3, #1
 8005c54:	d121      	bne.n	8005c9a <USB_EPStartXfer+0xa5e>
 8005c56:	1d3b      	adds	r3, r7, #4
 8005c58:	681a      	ldr	r2, [r3, #0]
 8005c5a:	463b      	mov	r3, r7
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	781b      	ldrb	r3, [r3, #0]
 8005c60:	009b      	lsls	r3, r3, #2
 8005c62:	4413      	add	r3, r2
 8005c64:	881b      	ldrh	r3, [r3, #0]
 8005c66:	b29b      	uxth	r3, r3
 8005c68:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c6c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c70:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
 8005c74:	1d3b      	adds	r3, r7, #4
 8005c76:	681a      	ldr	r2, [r3, #0]
 8005c78:	463b      	mov	r3, r7
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	781b      	ldrb	r3, [r3, #0]
 8005c7e:	009b      	lsls	r3, r3, #2
 8005c80:	441a      	add	r2, r3
 8005c82:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 8005c86:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005c8a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005c8e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005c92:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c96:	b29b      	uxth	r3, r3
 8005c98:	8013      	strh	r3, [r2, #0]
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8005c9a:	1d3b      	adds	r3, r7, #4
 8005c9c:	681a      	ldr	r2, [r3, #0]
 8005c9e:	463b      	mov	r3, r7
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	781b      	ldrb	r3, [r3, #0]
 8005ca4:	009b      	lsls	r3, r3, #2
 8005ca6:	4413      	add	r3, r2
 8005ca8:	881b      	ldrh	r3, [r3, #0]
 8005caa:	b29b      	uxth	r3, r3
 8005cac:	f107 020e 	add.w	r2, r7, #14
 8005cb0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005cb4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005cb8:	8013      	strh	r3, [r2, #0]
 8005cba:	f107 030e 	add.w	r3, r7, #14
 8005cbe:	f107 020e 	add.w	r2, r7, #14
 8005cc2:	8812      	ldrh	r2, [r2, #0]
 8005cc4:	f082 0210 	eor.w	r2, r2, #16
 8005cc8:	801a      	strh	r2, [r3, #0]
 8005cca:	f107 030e 	add.w	r3, r7, #14
 8005cce:	f107 020e 	add.w	r2, r7, #14
 8005cd2:	8812      	ldrh	r2, [r2, #0]
 8005cd4:	f082 0220 	eor.w	r2, r2, #32
 8005cd8:	801a      	strh	r2, [r3, #0]
 8005cda:	1d3b      	adds	r3, r7, #4
 8005cdc:	681a      	ldr	r2, [r3, #0]
 8005cde:	463b      	mov	r3, r7
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	781b      	ldrb	r3, [r3, #0]
 8005ce4:	009b      	lsls	r3, r3, #2
 8005ce6:	441a      	add	r2, r3
 8005ce8:	f107 030e 	add.w	r3, r7, #14
 8005cec:	881b      	ldrh	r3, [r3, #0]
 8005cee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005cf2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005cf6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005cfa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005cfe:	b29b      	uxth	r3, r3
 8005d00:	8013      	strh	r3, [r2, #0]
 8005d02:	e3b5      	b.n	8006470 <USB_EPStartXfer+0x1234>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8005d04:	463b      	mov	r3, r7
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	7b1b      	ldrb	r3, [r3, #12]
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	f040 8090 	bne.w	8005e30 <USB_EPStartXfer+0xbf4>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8005d10:	463b      	mov	r3, r7
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	699a      	ldr	r2, [r3, #24]
 8005d16:	463b      	mov	r3, r7
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	691b      	ldr	r3, [r3, #16]
 8005d1c:	429a      	cmp	r2, r3
 8005d1e:	d90e      	bls.n	8005d3e <USB_EPStartXfer+0xb02>
      {
        len = ep->maxpacket;
 8005d20:	463b      	mov	r3, r7
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	691b      	ldr	r3, [r3, #16]
 8005d26:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        ep->xfer_len -= len;
 8005d2a:	463b      	mov	r3, r7
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	699a      	ldr	r2, [r3, #24]
 8005d30:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005d34:	1ad2      	subs	r2, r2, r3
 8005d36:	463b      	mov	r3, r7
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	619a      	str	r2, [r3, #24]
 8005d3c:	e008      	b.n	8005d50 <USB_EPStartXfer+0xb14>
      }
      else
      {
        len = ep->xfer_len;
 8005d3e:	463b      	mov	r3, r7
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	699b      	ldr	r3, [r3, #24]
 8005d44:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        ep->xfer_len = 0U;
 8005d48:	463b      	mov	r3, r7
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	2200      	movs	r2, #0
 8005d4e:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8005d50:	1d3b      	adds	r3, r7, #4
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005d58:	1d3b      	adds	r3, r7, #4
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005d60:	b29b      	uxth	r3, r3
 8005d62:	461a      	mov	r2, r3
 8005d64:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005d68:	4413      	add	r3, r2
 8005d6a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005d6e:	463b      	mov	r3, r7
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	781b      	ldrb	r3, [r3, #0]
 8005d74:	011a      	lsls	r2, r3, #4
 8005d76:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005d7a:	4413      	add	r3, r2
 8005d7c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005d80:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005d84:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d116      	bne.n	8005dba <USB_EPStartXfer+0xb7e>
 8005d8c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005d90:	881b      	ldrh	r3, [r3, #0]
 8005d92:	b29b      	uxth	r3, r3
 8005d94:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005d98:	b29a      	uxth	r2, r3
 8005d9a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005d9e:	801a      	strh	r2, [r3, #0]
 8005da0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005da4:	881b      	ldrh	r3, [r3, #0]
 8005da6:	b29b      	uxth	r3, r3
 8005da8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005dac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005db0:	b29a      	uxth	r2, r3
 8005db2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005db6:	801a      	strh	r2, [r3, #0]
 8005db8:	e32c      	b.n	8006414 <USB_EPStartXfer+0x11d8>
 8005dba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005dbe:	2b3e      	cmp	r3, #62	; 0x3e
 8005dc0:	d818      	bhi.n	8005df4 <USB_EPStartXfer+0xbb8>
 8005dc2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005dc6:	085b      	lsrs	r3, r3, #1
 8005dc8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005dcc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005dd0:	f003 0301 	and.w	r3, r3, #1
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d004      	beq.n	8005de2 <USB_EPStartXfer+0xba6>
 8005dd8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005ddc:	3301      	adds	r3, #1
 8005dde:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005de2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005de6:	b29b      	uxth	r3, r3
 8005de8:	029b      	lsls	r3, r3, #10
 8005dea:	b29a      	uxth	r2, r3
 8005dec:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005df0:	801a      	strh	r2, [r3, #0]
 8005df2:	e30f      	b.n	8006414 <USB_EPStartXfer+0x11d8>
 8005df4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005df8:	095b      	lsrs	r3, r3, #5
 8005dfa:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005dfe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005e02:	f003 031f 	and.w	r3, r3, #31
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d104      	bne.n	8005e14 <USB_EPStartXfer+0xbd8>
 8005e0a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005e0e:	3b01      	subs	r3, #1
 8005e10:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005e14:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005e18:	b29b      	uxth	r3, r3
 8005e1a:	029b      	lsls	r3, r3, #10
 8005e1c:	b29b      	uxth	r3, r3
 8005e1e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e22:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005e26:	b29a      	uxth	r2, r3
 8005e28:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005e2c:	801a      	strh	r2, [r3, #0]
 8005e2e:	e2f1      	b.n	8006414 <USB_EPStartXfer+0x11d8>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8005e30:	463b      	mov	r3, r7
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	78db      	ldrb	r3, [r3, #3]
 8005e36:	2b02      	cmp	r3, #2
 8005e38:	f040 818f 	bne.w	800615a <USB_EPStartXfer+0xf1e>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8005e3c:	463b      	mov	r3, r7
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	785b      	ldrb	r3, [r3, #1]
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d175      	bne.n	8005f32 <USB_EPStartXfer+0xcf6>
 8005e46:	1d3b      	adds	r3, r7, #4
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005e4e:	1d3b      	adds	r3, r7, #4
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005e56:	b29b      	uxth	r3, r3
 8005e58:	461a      	mov	r2, r3
 8005e5a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8005e5e:	4413      	add	r3, r2
 8005e60:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005e64:	463b      	mov	r3, r7
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	781b      	ldrb	r3, [r3, #0]
 8005e6a:	011a      	lsls	r2, r3, #4
 8005e6c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8005e70:	4413      	add	r3, r2
 8005e72:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005e76:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005e7a:	463b      	mov	r3, r7
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	691b      	ldr	r3, [r3, #16]
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d116      	bne.n	8005eb2 <USB_EPStartXfer+0xc76>
 8005e84:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005e88:	881b      	ldrh	r3, [r3, #0]
 8005e8a:	b29b      	uxth	r3, r3
 8005e8c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005e90:	b29a      	uxth	r2, r3
 8005e92:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005e96:	801a      	strh	r2, [r3, #0]
 8005e98:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005e9c:	881b      	ldrh	r3, [r3, #0]
 8005e9e:	b29b      	uxth	r3, r3
 8005ea0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ea4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005ea8:	b29a      	uxth	r2, r3
 8005eaa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005eae:	801a      	strh	r2, [r3, #0]
 8005eb0:	e065      	b.n	8005f7e <USB_EPStartXfer+0xd42>
 8005eb2:	463b      	mov	r3, r7
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	691b      	ldr	r3, [r3, #16]
 8005eb8:	2b3e      	cmp	r3, #62	; 0x3e
 8005eba:	d81a      	bhi.n	8005ef2 <USB_EPStartXfer+0xcb6>
 8005ebc:	463b      	mov	r3, r7
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	691b      	ldr	r3, [r3, #16]
 8005ec2:	085b      	lsrs	r3, r3, #1
 8005ec4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005ec8:	463b      	mov	r3, r7
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	691b      	ldr	r3, [r3, #16]
 8005ece:	f003 0301 	and.w	r3, r3, #1
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d004      	beq.n	8005ee0 <USB_EPStartXfer+0xca4>
 8005ed6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005eda:	3301      	adds	r3, #1
 8005edc:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005ee0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005ee4:	b29b      	uxth	r3, r3
 8005ee6:	029b      	lsls	r3, r3, #10
 8005ee8:	b29a      	uxth	r2, r3
 8005eea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005eee:	801a      	strh	r2, [r3, #0]
 8005ef0:	e045      	b.n	8005f7e <USB_EPStartXfer+0xd42>
 8005ef2:	463b      	mov	r3, r7
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	691b      	ldr	r3, [r3, #16]
 8005ef8:	095b      	lsrs	r3, r3, #5
 8005efa:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005efe:	463b      	mov	r3, r7
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	691b      	ldr	r3, [r3, #16]
 8005f04:	f003 031f 	and.w	r3, r3, #31
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d104      	bne.n	8005f16 <USB_EPStartXfer+0xcda>
 8005f0c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005f10:	3b01      	subs	r3, #1
 8005f12:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005f16:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005f1a:	b29b      	uxth	r3, r3
 8005f1c:	029b      	lsls	r3, r3, #10
 8005f1e:	b29b      	uxth	r3, r3
 8005f20:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005f24:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005f28:	b29a      	uxth	r2, r3
 8005f2a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005f2e:	801a      	strh	r2, [r3, #0]
 8005f30:	e025      	b.n	8005f7e <USB_EPStartXfer+0xd42>
 8005f32:	463b      	mov	r3, r7
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	785b      	ldrb	r3, [r3, #1]
 8005f38:	2b01      	cmp	r3, #1
 8005f3a:	d120      	bne.n	8005f7e <USB_EPStartXfer+0xd42>
 8005f3c:	1d3b      	adds	r3, r7, #4
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005f44:	1d3b      	adds	r3, r7, #4
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005f4c:	b29b      	uxth	r3, r3
 8005f4e:	461a      	mov	r2, r3
 8005f50:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005f54:	4413      	add	r3, r2
 8005f56:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005f5a:	463b      	mov	r3, r7
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	781b      	ldrb	r3, [r3, #0]
 8005f60:	011a      	lsls	r2, r3, #4
 8005f62:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005f66:	4413      	add	r3, r2
 8005f68:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005f6c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005f70:	463b      	mov	r3, r7
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	691b      	ldr	r3, [r3, #16]
 8005f76:	b29a      	uxth	r2, r3
 8005f78:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005f7c:	801a      	strh	r2, [r3, #0]
 8005f7e:	1d3b      	adds	r3, r7, #4
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005f86:	463b      	mov	r3, r7
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	785b      	ldrb	r3, [r3, #1]
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d175      	bne.n	800607c <USB_EPStartXfer+0xe40>
 8005f90:	1d3b      	adds	r3, r7, #4
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005f98:	1d3b      	adds	r3, r7, #4
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005fa0:	b29b      	uxth	r3, r3
 8005fa2:	461a      	mov	r2, r3
 8005fa4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005fa8:	4413      	add	r3, r2
 8005faa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005fae:	463b      	mov	r3, r7
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	781b      	ldrb	r3, [r3, #0]
 8005fb4:	011a      	lsls	r2, r3, #4
 8005fb6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005fba:	4413      	add	r3, r2
 8005fbc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005fc0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005fc4:	463b      	mov	r3, r7
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	691b      	ldr	r3, [r3, #16]
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d116      	bne.n	8005ffc <USB_EPStartXfer+0xdc0>
 8005fce:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005fd2:	881b      	ldrh	r3, [r3, #0]
 8005fd4:	b29b      	uxth	r3, r3
 8005fd6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005fda:	b29a      	uxth	r2, r3
 8005fdc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005fe0:	801a      	strh	r2, [r3, #0]
 8005fe2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005fe6:	881b      	ldrh	r3, [r3, #0]
 8005fe8:	b29b      	uxth	r3, r3
 8005fea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005fee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005ff2:	b29a      	uxth	r2, r3
 8005ff4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005ff8:	801a      	strh	r2, [r3, #0]
 8005ffa:	e061      	b.n	80060c0 <USB_EPStartXfer+0xe84>
 8005ffc:	463b      	mov	r3, r7
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	691b      	ldr	r3, [r3, #16]
 8006002:	2b3e      	cmp	r3, #62	; 0x3e
 8006004:	d81a      	bhi.n	800603c <USB_EPStartXfer+0xe00>
 8006006:	463b      	mov	r3, r7
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	691b      	ldr	r3, [r3, #16]
 800600c:	085b      	lsrs	r3, r3, #1
 800600e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006012:	463b      	mov	r3, r7
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	691b      	ldr	r3, [r3, #16]
 8006018:	f003 0301 	and.w	r3, r3, #1
 800601c:	2b00      	cmp	r3, #0
 800601e:	d004      	beq.n	800602a <USB_EPStartXfer+0xdee>
 8006020:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006024:	3301      	adds	r3, #1
 8006026:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800602a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800602e:	b29b      	uxth	r3, r3
 8006030:	029b      	lsls	r3, r3, #10
 8006032:	b29a      	uxth	r2, r3
 8006034:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006038:	801a      	strh	r2, [r3, #0]
 800603a:	e041      	b.n	80060c0 <USB_EPStartXfer+0xe84>
 800603c:	463b      	mov	r3, r7
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	691b      	ldr	r3, [r3, #16]
 8006042:	095b      	lsrs	r3, r3, #5
 8006044:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006048:	463b      	mov	r3, r7
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	691b      	ldr	r3, [r3, #16]
 800604e:	f003 031f 	and.w	r3, r3, #31
 8006052:	2b00      	cmp	r3, #0
 8006054:	d104      	bne.n	8006060 <USB_EPStartXfer+0xe24>
 8006056:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800605a:	3b01      	subs	r3, #1
 800605c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006060:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006064:	b29b      	uxth	r3, r3
 8006066:	029b      	lsls	r3, r3, #10
 8006068:	b29b      	uxth	r3, r3
 800606a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800606e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006072:	b29a      	uxth	r2, r3
 8006074:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006078:	801a      	strh	r2, [r3, #0]
 800607a:	e021      	b.n	80060c0 <USB_EPStartXfer+0xe84>
 800607c:	463b      	mov	r3, r7
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	785b      	ldrb	r3, [r3, #1]
 8006082:	2b01      	cmp	r3, #1
 8006084:	d11c      	bne.n	80060c0 <USB_EPStartXfer+0xe84>
 8006086:	1d3b      	adds	r3, r7, #4
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800608e:	b29b      	uxth	r3, r3
 8006090:	461a      	mov	r2, r3
 8006092:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006096:	4413      	add	r3, r2
 8006098:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800609c:	463b      	mov	r3, r7
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	781b      	ldrb	r3, [r3, #0]
 80060a2:	011a      	lsls	r2, r3, #4
 80060a4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80060a8:	4413      	add	r3, r2
 80060aa:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80060ae:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80060b2:	463b      	mov	r3, r7
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	691b      	ldr	r3, [r3, #16]
 80060b8:	b29a      	uxth	r2, r3
 80060ba:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80060be:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 80060c0:	463b      	mov	r3, r7
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	69db      	ldr	r3, [r3, #28]
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	f000 81a4 	beq.w	8006414 <USB_EPStartXfer+0x11d8>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 80060cc:	1d3b      	adds	r3, r7, #4
 80060ce:	681a      	ldr	r2, [r3, #0]
 80060d0:	463b      	mov	r3, r7
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	781b      	ldrb	r3, [r3, #0]
 80060d6:	009b      	lsls	r3, r3, #2
 80060d8:	4413      	add	r3, r2
 80060da:	881b      	ldrh	r3, [r3, #0]
 80060dc:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80060e0:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 80060e4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d005      	beq.n	80060f8 <USB_EPStartXfer+0xebc>
 80060ec:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 80060f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d10d      	bne.n	8006114 <USB_EPStartXfer+0xed8>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80060f8:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 80060fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006100:	2b00      	cmp	r3, #0
 8006102:	f040 8187 	bne.w	8006414 <USB_EPStartXfer+0x11d8>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006106:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800610a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800610e:	2b00      	cmp	r3, #0
 8006110:	f040 8180 	bne.w	8006414 <USB_EPStartXfer+0x11d8>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8006114:	1d3b      	adds	r3, r7, #4
 8006116:	681a      	ldr	r2, [r3, #0]
 8006118:	463b      	mov	r3, r7
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	781b      	ldrb	r3, [r3, #0]
 800611e:	009b      	lsls	r3, r3, #2
 8006120:	4413      	add	r3, r2
 8006122:	881b      	ldrh	r3, [r3, #0]
 8006124:	b29b      	uxth	r3, r3
 8006126:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800612a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800612e:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
 8006132:	1d3b      	adds	r3, r7, #4
 8006134:	681a      	ldr	r2, [r3, #0]
 8006136:	463b      	mov	r3, r7
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	781b      	ldrb	r3, [r3, #0]
 800613c:	009b      	lsls	r3, r3, #2
 800613e:	441a      	add	r2, r3
 8006140:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 8006144:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006148:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800614c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006150:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006154:	b29b      	uxth	r3, r3
 8006156:	8013      	strh	r3, [r2, #0]
 8006158:	e15c      	b.n	8006414 <USB_EPStartXfer+0x11d8>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800615a:	463b      	mov	r3, r7
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	78db      	ldrb	r3, [r3, #3]
 8006160:	2b01      	cmp	r3, #1
 8006162:	f040 8155 	bne.w	8006410 <USB_EPStartXfer+0x11d4>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8006166:	463b      	mov	r3, r7
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	699a      	ldr	r2, [r3, #24]
 800616c:	463b      	mov	r3, r7
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	691b      	ldr	r3, [r3, #16]
 8006172:	429a      	cmp	r2, r3
 8006174:	d90e      	bls.n	8006194 <USB_EPStartXfer+0xf58>
        {
          len = ep->maxpacket;
 8006176:	463b      	mov	r3, r7
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	691b      	ldr	r3, [r3, #16]
 800617c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
          ep->xfer_len -= len;
 8006180:	463b      	mov	r3, r7
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	699a      	ldr	r2, [r3, #24]
 8006186:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800618a:	1ad2      	subs	r2, r2, r3
 800618c:	463b      	mov	r3, r7
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	619a      	str	r2, [r3, #24]
 8006192:	e008      	b.n	80061a6 <USB_EPStartXfer+0xf6a>
        }
        else
        {
          len = ep->xfer_len;
 8006194:	463b      	mov	r3, r7
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	699b      	ldr	r3, [r3, #24]
 800619a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
          ep->xfer_len = 0U;
 800619e:	463b      	mov	r3, r7
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	2200      	movs	r2, #0
 80061a4:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80061a6:	463b      	mov	r3, r7
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	785b      	ldrb	r3, [r3, #1]
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d16f      	bne.n	8006290 <USB_EPStartXfer+0x1054>
 80061b0:	1d3b      	adds	r3, r7, #4
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80061b8:	1d3b      	adds	r3, r7, #4
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80061c0:	b29b      	uxth	r3, r3
 80061c2:	461a      	mov	r2, r3
 80061c4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80061c8:	4413      	add	r3, r2
 80061ca:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80061ce:	463b      	mov	r3, r7
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	781b      	ldrb	r3, [r3, #0]
 80061d4:	011a      	lsls	r2, r3, #4
 80061d6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80061da:	4413      	add	r3, r2
 80061dc:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80061e0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80061e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d116      	bne.n	800621a <USB_EPStartXfer+0xfde>
 80061ec:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80061f0:	881b      	ldrh	r3, [r3, #0]
 80061f2:	b29b      	uxth	r3, r3
 80061f4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80061f8:	b29a      	uxth	r2, r3
 80061fa:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80061fe:	801a      	strh	r2, [r3, #0]
 8006200:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006204:	881b      	ldrh	r3, [r3, #0]
 8006206:	b29b      	uxth	r3, r3
 8006208:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800620c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006210:	b29a      	uxth	r2, r3
 8006212:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006216:	801a      	strh	r2, [r3, #0]
 8006218:	e05f      	b.n	80062da <USB_EPStartXfer+0x109e>
 800621a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800621e:	2b3e      	cmp	r3, #62	; 0x3e
 8006220:	d818      	bhi.n	8006254 <USB_EPStartXfer+0x1018>
 8006222:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006226:	085b      	lsrs	r3, r3, #1
 8006228:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800622c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006230:	f003 0301 	and.w	r3, r3, #1
 8006234:	2b00      	cmp	r3, #0
 8006236:	d004      	beq.n	8006242 <USB_EPStartXfer+0x1006>
 8006238:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800623c:	3301      	adds	r3, #1
 800623e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006242:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006246:	b29b      	uxth	r3, r3
 8006248:	029b      	lsls	r3, r3, #10
 800624a:	b29a      	uxth	r2, r3
 800624c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006250:	801a      	strh	r2, [r3, #0]
 8006252:	e042      	b.n	80062da <USB_EPStartXfer+0x109e>
 8006254:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006258:	095b      	lsrs	r3, r3, #5
 800625a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800625e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006262:	f003 031f 	and.w	r3, r3, #31
 8006266:	2b00      	cmp	r3, #0
 8006268:	d104      	bne.n	8006274 <USB_EPStartXfer+0x1038>
 800626a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800626e:	3b01      	subs	r3, #1
 8006270:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006274:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006278:	b29b      	uxth	r3, r3
 800627a:	029b      	lsls	r3, r3, #10
 800627c:	b29b      	uxth	r3, r3
 800627e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006282:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006286:	b29a      	uxth	r2, r3
 8006288:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800628c:	801a      	strh	r2, [r3, #0]
 800628e:	e024      	b.n	80062da <USB_EPStartXfer+0x109e>
 8006290:	463b      	mov	r3, r7
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	785b      	ldrb	r3, [r3, #1]
 8006296:	2b01      	cmp	r3, #1
 8006298:	d11f      	bne.n	80062da <USB_EPStartXfer+0x109e>
 800629a:	1d3b      	adds	r3, r7, #4
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80062a2:	1d3b      	adds	r3, r7, #4
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80062aa:	b29b      	uxth	r3, r3
 80062ac:	461a      	mov	r2, r3
 80062ae:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80062b2:	4413      	add	r3, r2
 80062b4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80062b8:	463b      	mov	r3, r7
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	781b      	ldrb	r3, [r3, #0]
 80062be:	011a      	lsls	r2, r3, #4
 80062c0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80062c4:	4413      	add	r3, r2
 80062c6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80062ca:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80062ce:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80062d2:	b29a      	uxth	r2, r3
 80062d4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80062d8:	801a      	strh	r2, [r3, #0]
 80062da:	1d3b      	adds	r3, r7, #4
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80062e2:	463b      	mov	r3, r7
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	785b      	ldrb	r3, [r3, #1]
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d16f      	bne.n	80063cc <USB_EPStartXfer+0x1190>
 80062ec:	1d3b      	adds	r3, r7, #4
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80062f4:	1d3b      	adds	r3, r7, #4
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80062fc:	b29b      	uxth	r3, r3
 80062fe:	461a      	mov	r2, r3
 8006300:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006304:	4413      	add	r3, r2
 8006306:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800630a:	463b      	mov	r3, r7
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	781b      	ldrb	r3, [r3, #0]
 8006310:	011a      	lsls	r2, r3, #4
 8006312:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006316:	4413      	add	r3, r2
 8006318:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800631c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8006320:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006324:	2b00      	cmp	r3, #0
 8006326:	d116      	bne.n	8006356 <USB_EPStartXfer+0x111a>
 8006328:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800632c:	881b      	ldrh	r3, [r3, #0]
 800632e:	b29b      	uxth	r3, r3
 8006330:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006334:	b29a      	uxth	r2, r3
 8006336:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800633a:	801a      	strh	r2, [r3, #0]
 800633c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006340:	881b      	ldrh	r3, [r3, #0]
 8006342:	b29b      	uxth	r3, r3
 8006344:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006348:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800634c:	b29a      	uxth	r2, r3
 800634e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006352:	801a      	strh	r2, [r3, #0]
 8006354:	e05e      	b.n	8006414 <USB_EPStartXfer+0x11d8>
 8006356:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800635a:	2b3e      	cmp	r3, #62	; 0x3e
 800635c:	d818      	bhi.n	8006390 <USB_EPStartXfer+0x1154>
 800635e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006362:	085b      	lsrs	r3, r3, #1
 8006364:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006368:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800636c:	f003 0301 	and.w	r3, r3, #1
 8006370:	2b00      	cmp	r3, #0
 8006372:	d004      	beq.n	800637e <USB_EPStartXfer+0x1142>
 8006374:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006378:	3301      	adds	r3, #1
 800637a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800637e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006382:	b29b      	uxth	r3, r3
 8006384:	029b      	lsls	r3, r3, #10
 8006386:	b29a      	uxth	r2, r3
 8006388:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800638c:	801a      	strh	r2, [r3, #0]
 800638e:	e041      	b.n	8006414 <USB_EPStartXfer+0x11d8>
 8006390:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006394:	095b      	lsrs	r3, r3, #5
 8006396:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800639a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800639e:	f003 031f 	and.w	r3, r3, #31
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d104      	bne.n	80063b0 <USB_EPStartXfer+0x1174>
 80063a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80063aa:	3b01      	subs	r3, #1
 80063ac:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80063b0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80063b4:	b29b      	uxth	r3, r3
 80063b6:	029b      	lsls	r3, r3, #10
 80063b8:	b29b      	uxth	r3, r3
 80063ba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80063be:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80063c2:	b29a      	uxth	r2, r3
 80063c4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80063c8:	801a      	strh	r2, [r3, #0]
 80063ca:	e023      	b.n	8006414 <USB_EPStartXfer+0x11d8>
 80063cc:	463b      	mov	r3, r7
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	785b      	ldrb	r3, [r3, #1]
 80063d2:	2b01      	cmp	r3, #1
 80063d4:	d11e      	bne.n	8006414 <USB_EPStartXfer+0x11d8>
 80063d6:	1d3b      	adds	r3, r7, #4
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80063de:	b29b      	uxth	r3, r3
 80063e0:	461a      	mov	r2, r3
 80063e2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80063e6:	4413      	add	r3, r2
 80063e8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80063ec:	463b      	mov	r3, r7
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	781b      	ldrb	r3, [r3, #0]
 80063f2:	011a      	lsls	r2, r3, #4
 80063f4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80063f8:	4413      	add	r3, r2
 80063fa:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80063fe:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006402:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006406:	b29a      	uxth	r2, r3
 8006408:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800640c:	801a      	strh	r2, [r3, #0]
 800640e:	e001      	b.n	8006414 <USB_EPStartXfer+0x11d8>
      }
      else
      {
        return HAL_ERROR;
 8006410:	2301      	movs	r3, #1
 8006412:	e02e      	b.n	8006472 <USB_EPStartXfer+0x1236>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006414:	1d3b      	adds	r3, r7, #4
 8006416:	681a      	ldr	r2, [r3, #0]
 8006418:	463b      	mov	r3, r7
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	781b      	ldrb	r3, [r3, #0]
 800641e:	009b      	lsls	r3, r3, #2
 8006420:	4413      	add	r3, r2
 8006422:	881b      	ldrh	r3, [r3, #0]
 8006424:	b29b      	uxth	r3, r3
 8006426:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800642a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800642e:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8006432:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8006436:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800643a:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 800643e:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8006442:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006446:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 800644a:	1d3b      	adds	r3, r7, #4
 800644c:	681a      	ldr	r2, [r3, #0]
 800644e:	463b      	mov	r3, r7
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	781b      	ldrb	r3, [r3, #0]
 8006454:	009b      	lsls	r3, r3, #2
 8006456:	441a      	add	r2, r3
 8006458:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800645c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006460:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006464:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006468:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800646c:	b29b      	uxth	r3, r3
 800646e:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006470:	2300      	movs	r3, #0
}
 8006472:	4618      	mov	r0, r3
 8006474:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8006478:	46bd      	mov	sp, r7
 800647a:	bd80      	pop	{r7, pc}

0800647c <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800647c:	b480      	push	{r7}
 800647e:	b085      	sub	sp, #20
 8006480:	af00      	add	r7, sp, #0
 8006482:	6078      	str	r0, [r7, #4]
 8006484:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8006486:	683b      	ldr	r3, [r7, #0]
 8006488:	785b      	ldrb	r3, [r3, #1]
 800648a:	2b00      	cmp	r3, #0
 800648c:	d020      	beq.n	80064d0 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800648e:	687a      	ldr	r2, [r7, #4]
 8006490:	683b      	ldr	r3, [r7, #0]
 8006492:	781b      	ldrb	r3, [r3, #0]
 8006494:	009b      	lsls	r3, r3, #2
 8006496:	4413      	add	r3, r2
 8006498:	881b      	ldrh	r3, [r3, #0]
 800649a:	b29b      	uxth	r3, r3
 800649c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80064a0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80064a4:	81bb      	strh	r3, [r7, #12]
 80064a6:	89bb      	ldrh	r3, [r7, #12]
 80064a8:	f083 0310 	eor.w	r3, r3, #16
 80064ac:	81bb      	strh	r3, [r7, #12]
 80064ae:	687a      	ldr	r2, [r7, #4]
 80064b0:	683b      	ldr	r3, [r7, #0]
 80064b2:	781b      	ldrb	r3, [r3, #0]
 80064b4:	009b      	lsls	r3, r3, #2
 80064b6:	441a      	add	r2, r3
 80064b8:	89bb      	ldrh	r3, [r7, #12]
 80064ba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80064be:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80064c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80064c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80064ca:	b29b      	uxth	r3, r3
 80064cc:	8013      	strh	r3, [r2, #0]
 80064ce:	e01f      	b.n	8006510 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80064d0:	687a      	ldr	r2, [r7, #4]
 80064d2:	683b      	ldr	r3, [r7, #0]
 80064d4:	781b      	ldrb	r3, [r3, #0]
 80064d6:	009b      	lsls	r3, r3, #2
 80064d8:	4413      	add	r3, r2
 80064da:	881b      	ldrh	r3, [r3, #0]
 80064dc:	b29b      	uxth	r3, r3
 80064de:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80064e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80064e6:	81fb      	strh	r3, [r7, #14]
 80064e8:	89fb      	ldrh	r3, [r7, #14]
 80064ea:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80064ee:	81fb      	strh	r3, [r7, #14]
 80064f0:	687a      	ldr	r2, [r7, #4]
 80064f2:	683b      	ldr	r3, [r7, #0]
 80064f4:	781b      	ldrb	r3, [r3, #0]
 80064f6:	009b      	lsls	r3, r3, #2
 80064f8:	441a      	add	r2, r3
 80064fa:	89fb      	ldrh	r3, [r7, #14]
 80064fc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006500:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006504:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006508:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800650c:	b29b      	uxth	r3, r3
 800650e:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006510:	2300      	movs	r3, #0
}
 8006512:	4618      	mov	r0, r3
 8006514:	3714      	adds	r7, #20
 8006516:	46bd      	mov	sp, r7
 8006518:	bc80      	pop	{r7}
 800651a:	4770      	bx	lr

0800651c <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800651c:	b480      	push	{r7}
 800651e:	b087      	sub	sp, #28
 8006520:	af00      	add	r7, sp, #0
 8006522:	6078      	str	r0, [r7, #4]
 8006524:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8006526:	683b      	ldr	r3, [r7, #0]
 8006528:	7b1b      	ldrb	r3, [r3, #12]
 800652a:	2b00      	cmp	r3, #0
 800652c:	f040 809d 	bne.w	800666a <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8006530:	683b      	ldr	r3, [r7, #0]
 8006532:	785b      	ldrb	r3, [r3, #1]
 8006534:	2b00      	cmp	r3, #0
 8006536:	d04c      	beq.n	80065d2 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006538:	687a      	ldr	r2, [r7, #4]
 800653a:	683b      	ldr	r3, [r7, #0]
 800653c:	781b      	ldrb	r3, [r3, #0]
 800653e:	009b      	lsls	r3, r3, #2
 8006540:	4413      	add	r3, r2
 8006542:	881b      	ldrh	r3, [r3, #0]
 8006544:	823b      	strh	r3, [r7, #16]
 8006546:	8a3b      	ldrh	r3, [r7, #16]
 8006548:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800654c:	2b00      	cmp	r3, #0
 800654e:	d01b      	beq.n	8006588 <USB_EPClearStall+0x6c>
 8006550:	687a      	ldr	r2, [r7, #4]
 8006552:	683b      	ldr	r3, [r7, #0]
 8006554:	781b      	ldrb	r3, [r3, #0]
 8006556:	009b      	lsls	r3, r3, #2
 8006558:	4413      	add	r3, r2
 800655a:	881b      	ldrh	r3, [r3, #0]
 800655c:	b29b      	uxth	r3, r3
 800655e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006562:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006566:	81fb      	strh	r3, [r7, #14]
 8006568:	687a      	ldr	r2, [r7, #4]
 800656a:	683b      	ldr	r3, [r7, #0]
 800656c:	781b      	ldrb	r3, [r3, #0]
 800656e:	009b      	lsls	r3, r3, #2
 8006570:	441a      	add	r2, r3
 8006572:	89fb      	ldrh	r3, [r7, #14]
 8006574:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006578:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800657c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006580:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006584:	b29b      	uxth	r3, r3
 8006586:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006588:	683b      	ldr	r3, [r7, #0]
 800658a:	78db      	ldrb	r3, [r3, #3]
 800658c:	2b01      	cmp	r3, #1
 800658e:	d06c      	beq.n	800666a <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006590:	687a      	ldr	r2, [r7, #4]
 8006592:	683b      	ldr	r3, [r7, #0]
 8006594:	781b      	ldrb	r3, [r3, #0]
 8006596:	009b      	lsls	r3, r3, #2
 8006598:	4413      	add	r3, r2
 800659a:	881b      	ldrh	r3, [r3, #0]
 800659c:	b29b      	uxth	r3, r3
 800659e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80065a2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80065a6:	81bb      	strh	r3, [r7, #12]
 80065a8:	89bb      	ldrh	r3, [r7, #12]
 80065aa:	f083 0320 	eor.w	r3, r3, #32
 80065ae:	81bb      	strh	r3, [r7, #12]
 80065b0:	687a      	ldr	r2, [r7, #4]
 80065b2:	683b      	ldr	r3, [r7, #0]
 80065b4:	781b      	ldrb	r3, [r3, #0]
 80065b6:	009b      	lsls	r3, r3, #2
 80065b8:	441a      	add	r2, r3
 80065ba:	89bb      	ldrh	r3, [r7, #12]
 80065bc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80065c0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80065c4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80065c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80065cc:	b29b      	uxth	r3, r3
 80065ce:	8013      	strh	r3, [r2, #0]
 80065d0:	e04b      	b.n	800666a <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80065d2:	687a      	ldr	r2, [r7, #4]
 80065d4:	683b      	ldr	r3, [r7, #0]
 80065d6:	781b      	ldrb	r3, [r3, #0]
 80065d8:	009b      	lsls	r3, r3, #2
 80065da:	4413      	add	r3, r2
 80065dc:	881b      	ldrh	r3, [r3, #0]
 80065de:	82fb      	strh	r3, [r7, #22]
 80065e0:	8afb      	ldrh	r3, [r7, #22]
 80065e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d01b      	beq.n	8006622 <USB_EPClearStall+0x106>
 80065ea:	687a      	ldr	r2, [r7, #4]
 80065ec:	683b      	ldr	r3, [r7, #0]
 80065ee:	781b      	ldrb	r3, [r3, #0]
 80065f0:	009b      	lsls	r3, r3, #2
 80065f2:	4413      	add	r3, r2
 80065f4:	881b      	ldrh	r3, [r3, #0]
 80065f6:	b29b      	uxth	r3, r3
 80065f8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80065fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006600:	82bb      	strh	r3, [r7, #20]
 8006602:	687a      	ldr	r2, [r7, #4]
 8006604:	683b      	ldr	r3, [r7, #0]
 8006606:	781b      	ldrb	r3, [r3, #0]
 8006608:	009b      	lsls	r3, r3, #2
 800660a:	441a      	add	r2, r3
 800660c:	8abb      	ldrh	r3, [r7, #20]
 800660e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006612:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006616:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800661a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800661e:	b29b      	uxth	r3, r3
 8006620:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006622:	687a      	ldr	r2, [r7, #4]
 8006624:	683b      	ldr	r3, [r7, #0]
 8006626:	781b      	ldrb	r3, [r3, #0]
 8006628:	009b      	lsls	r3, r3, #2
 800662a:	4413      	add	r3, r2
 800662c:	881b      	ldrh	r3, [r3, #0]
 800662e:	b29b      	uxth	r3, r3
 8006630:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006634:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006638:	827b      	strh	r3, [r7, #18]
 800663a:	8a7b      	ldrh	r3, [r7, #18]
 800663c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006640:	827b      	strh	r3, [r7, #18]
 8006642:	8a7b      	ldrh	r3, [r7, #18]
 8006644:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006648:	827b      	strh	r3, [r7, #18]
 800664a:	687a      	ldr	r2, [r7, #4]
 800664c:	683b      	ldr	r3, [r7, #0]
 800664e:	781b      	ldrb	r3, [r3, #0]
 8006650:	009b      	lsls	r3, r3, #2
 8006652:	441a      	add	r2, r3
 8006654:	8a7b      	ldrh	r3, [r7, #18]
 8006656:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800665a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800665e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006662:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006666:	b29b      	uxth	r3, r3
 8006668:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800666a:	2300      	movs	r3, #0
}
 800666c:	4618      	mov	r0, r3
 800666e:	371c      	adds	r7, #28
 8006670:	46bd      	mov	sp, r7
 8006672:	bc80      	pop	{r7}
 8006674:	4770      	bx	lr

08006676 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8006676:	b480      	push	{r7}
 8006678:	b083      	sub	sp, #12
 800667a:	af00      	add	r7, sp, #0
 800667c:	6078      	str	r0, [r7, #4]
 800667e:	460b      	mov	r3, r1
 8006680:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8006682:	78fb      	ldrb	r3, [r7, #3]
 8006684:	2b00      	cmp	r3, #0
 8006686:	d103      	bne.n	8006690 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	2280      	movs	r2, #128	; 0x80
 800668c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8006690:	2300      	movs	r3, #0
}
 8006692:	4618      	mov	r0, r3
 8006694:	370c      	adds	r7, #12
 8006696:	46bd      	mov	sp, r7
 8006698:	bc80      	pop	{r7}
 800669a:	4770      	bx	lr

0800669c <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800669c:	b480      	push	{r7}
 800669e:	b083      	sub	sp, #12
 80066a0:	af00      	add	r7, sp, #0
 80066a2:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80066a4:	2300      	movs	r3, #0
}
 80066a6:	4618      	mov	r0, r3
 80066a8:	370c      	adds	r7, #12
 80066aa:	46bd      	mov	sp, r7
 80066ac:	bc80      	pop	{r7}
 80066ae:	4770      	bx	lr

080066b0 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 80066b0:	b480      	push	{r7}
 80066b2:	b083      	sub	sp, #12
 80066b4:	af00      	add	r7, sp, #0
 80066b6:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80066b8:	2300      	movs	r3, #0
}
 80066ba:	4618      	mov	r0, r3
 80066bc:	370c      	adds	r7, #12
 80066be:	46bd      	mov	sp, r7
 80066c0:	bc80      	pop	{r7}
 80066c2:	4770      	bx	lr

080066c4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 80066c4:	b480      	push	{r7}
 80066c6:	b085      	sub	sp, #20
 80066c8:	af00      	add	r7, sp, #0
 80066ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80066d2:	b29b      	uxth	r3, r3
 80066d4:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 80066d6:	68fb      	ldr	r3, [r7, #12]
}
 80066d8:	4618      	mov	r0, r3
 80066da:	3714      	adds	r7, #20
 80066dc:	46bd      	mov	sp, r7
 80066de:	bc80      	pop	{r7}
 80066e0:	4770      	bx	lr

080066e2 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 80066e2:	b480      	push	{r7}
 80066e4:	b083      	sub	sp, #12
 80066e6:	af00      	add	r7, sp, #0
 80066e8:	6078      	str	r0, [r7, #4]
 80066ea:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80066ec:	2300      	movs	r3, #0
}
 80066ee:	4618      	mov	r0, r3
 80066f0:	370c      	adds	r7, #12
 80066f2:	46bd      	mov	sp, r7
 80066f4:	bc80      	pop	{r7}
 80066f6:	4770      	bx	lr

080066f8 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80066f8:	b480      	push	{r7}
 80066fa:	b08d      	sub	sp, #52	; 0x34
 80066fc:	af00      	add	r7, sp, #0
 80066fe:	60f8      	str	r0, [r7, #12]
 8006700:	60b9      	str	r1, [r7, #8]
 8006702:	4611      	mov	r1, r2
 8006704:	461a      	mov	r2, r3
 8006706:	460b      	mov	r3, r1
 8006708:	80fb      	strh	r3, [r7, #6]
 800670a:	4613      	mov	r3, r2
 800670c:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800670e:	88bb      	ldrh	r3, [r7, #4]
 8006710:	3301      	adds	r3, #1
 8006712:	085b      	lsrs	r3, r3, #1
 8006714:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800671a:	68bb      	ldr	r3, [r7, #8]
 800671c:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800671e:	88fb      	ldrh	r3, [r7, #6]
 8006720:	005a      	lsls	r2, r3, #1
 8006722:	69fb      	ldr	r3, [r7, #28]
 8006724:	4413      	add	r3, r2
 8006726:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800672a:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 800672c:	6a3b      	ldr	r3, [r7, #32]
 800672e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006730:	e01e      	b.n	8006770 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8006732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006734:	781b      	ldrb	r3, [r3, #0]
 8006736:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8006738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800673a:	3301      	adds	r3, #1
 800673c:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 800673e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006740:	781b      	ldrb	r3, [r3, #0]
 8006742:	b29b      	uxth	r3, r3
 8006744:	021b      	lsls	r3, r3, #8
 8006746:	b29b      	uxth	r3, r3
 8006748:	461a      	mov	r2, r3
 800674a:	69bb      	ldr	r3, [r7, #24]
 800674c:	4313      	orrs	r3, r2
 800674e:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8006750:	697b      	ldr	r3, [r7, #20]
 8006752:	b29a      	uxth	r2, r3
 8006754:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006756:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8006758:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800675a:	3302      	adds	r3, #2
 800675c:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 800675e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006760:	3302      	adds	r3, #2
 8006762:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 8006764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006766:	3301      	adds	r3, #1
 8006768:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 800676a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800676c:	3b01      	subs	r3, #1
 800676e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006770:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006772:	2b00      	cmp	r3, #0
 8006774:	d1dd      	bne.n	8006732 <USB_WritePMA+0x3a>
  }
}
 8006776:	bf00      	nop
 8006778:	3734      	adds	r7, #52	; 0x34
 800677a:	46bd      	mov	sp, r7
 800677c:	bc80      	pop	{r7}
 800677e:	4770      	bx	lr

08006780 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006780:	b480      	push	{r7}
 8006782:	b08b      	sub	sp, #44	; 0x2c
 8006784:	af00      	add	r7, sp, #0
 8006786:	60f8      	str	r0, [r7, #12]
 8006788:	60b9      	str	r1, [r7, #8]
 800678a:	4611      	mov	r1, r2
 800678c:	461a      	mov	r2, r3
 800678e:	460b      	mov	r3, r1
 8006790:	80fb      	strh	r3, [r7, #6]
 8006792:	4613      	mov	r3, r2
 8006794:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8006796:	88bb      	ldrh	r3, [r7, #4]
 8006798:	085b      	lsrs	r3, r3, #1
 800679a:	b29b      	uxth	r3, r3
 800679c:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80067a2:	68bb      	ldr	r3, [r7, #8]
 80067a4:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80067a6:	88fb      	ldrh	r3, [r7, #6]
 80067a8:	005a      	lsls	r2, r3, #1
 80067aa:	697b      	ldr	r3, [r7, #20]
 80067ac:	4413      	add	r3, r2
 80067ae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80067b2:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 80067b4:	69bb      	ldr	r3, [r7, #24]
 80067b6:	627b      	str	r3, [r7, #36]	; 0x24
 80067b8:	e01b      	b.n	80067f2 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 80067ba:	6a3b      	ldr	r3, [r7, #32]
 80067bc:	881b      	ldrh	r3, [r3, #0]
 80067be:	b29b      	uxth	r3, r3
 80067c0:	613b      	str	r3, [r7, #16]
    pdwVal++;
 80067c2:	6a3b      	ldr	r3, [r7, #32]
 80067c4:	3302      	adds	r3, #2
 80067c6:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80067c8:	693b      	ldr	r3, [r7, #16]
 80067ca:	b2da      	uxtb	r2, r3
 80067cc:	69fb      	ldr	r3, [r7, #28]
 80067ce:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80067d0:	69fb      	ldr	r3, [r7, #28]
 80067d2:	3301      	adds	r3, #1
 80067d4:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 80067d6:	693b      	ldr	r3, [r7, #16]
 80067d8:	0a1b      	lsrs	r3, r3, #8
 80067da:	b2da      	uxtb	r2, r3
 80067dc:	69fb      	ldr	r3, [r7, #28]
 80067de:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80067e0:	69fb      	ldr	r3, [r7, #28]
 80067e2:	3301      	adds	r3, #1
 80067e4:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 80067e6:	6a3b      	ldr	r3, [r7, #32]
 80067e8:	3302      	adds	r3, #2
 80067ea:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 80067ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067ee:	3b01      	subs	r3, #1
 80067f0:	627b      	str	r3, [r7, #36]	; 0x24
 80067f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d1e0      	bne.n	80067ba <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 80067f8:	88bb      	ldrh	r3, [r7, #4]
 80067fa:	f003 0301 	and.w	r3, r3, #1
 80067fe:	b29b      	uxth	r3, r3
 8006800:	2b00      	cmp	r3, #0
 8006802:	d007      	beq.n	8006814 <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 8006804:	6a3b      	ldr	r3, [r7, #32]
 8006806:	881b      	ldrh	r3, [r3, #0]
 8006808:	b29b      	uxth	r3, r3
 800680a:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800680c:	693b      	ldr	r3, [r7, #16]
 800680e:	b2da      	uxtb	r2, r3
 8006810:	69fb      	ldr	r3, [r7, #28]
 8006812:	701a      	strb	r2, [r3, #0]
  }
}
 8006814:	bf00      	nop
 8006816:	372c      	adds	r7, #44	; 0x2c
 8006818:	46bd      	mov	sp, r7
 800681a:	bc80      	pop	{r7}
 800681c:	4770      	bx	lr

0800681e <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800681e:	b580      	push	{r7, lr}
 8006820:	b084      	sub	sp, #16
 8006822:	af00      	add	r7, sp, #0
 8006824:	6078      	str	r0, [r7, #4]
 8006826:	460b      	mov	r3, r1
 8006828:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800682a:	2300      	movs	r3, #0
 800682c:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	7c1b      	ldrb	r3, [r3, #16]
 8006832:	2b00      	cmp	r3, #0
 8006834:	d115      	bne.n	8006862 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006836:	f44f 7300 	mov.w	r3, #512	; 0x200
 800683a:	2202      	movs	r2, #2
 800683c:	2181      	movs	r1, #129	; 0x81
 800683e:	6878      	ldr	r0, [r7, #4]
 8006840:	f001 fe81 	bl	8008546 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	2201      	movs	r2, #1
 8006848:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800684a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800684e:	2202      	movs	r2, #2
 8006850:	2101      	movs	r1, #1
 8006852:	6878      	ldr	r0, [r7, #4]
 8006854:	f001 fe77 	bl	8008546 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	2201      	movs	r2, #1
 800685c:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8006860:	e012      	b.n	8006888 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006862:	2340      	movs	r3, #64	; 0x40
 8006864:	2202      	movs	r2, #2
 8006866:	2181      	movs	r1, #129	; 0x81
 8006868:	6878      	ldr	r0, [r7, #4]
 800686a:	f001 fe6c 	bl	8008546 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	2201      	movs	r2, #1
 8006872:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006874:	2340      	movs	r3, #64	; 0x40
 8006876:	2202      	movs	r2, #2
 8006878:	2101      	movs	r1, #1
 800687a:	6878      	ldr	r0, [r7, #4]
 800687c:	f001 fe63 	bl	8008546 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	2201      	movs	r2, #1
 8006884:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006888:	2308      	movs	r3, #8
 800688a:	2203      	movs	r2, #3
 800688c:	2182      	movs	r1, #130	; 0x82
 800688e:	6878      	ldr	r0, [r7, #4]
 8006890:	f001 fe59 	bl	8008546 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	2201      	movs	r2, #1
 8006898:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800689a:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800689e:	f001 ff79 	bl	8008794 <USBD_static_malloc>
 80068a2:	4602      	mov	r2, r0
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d102      	bne.n	80068ba <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 80068b4:	2301      	movs	r3, #1
 80068b6:	73fb      	strb	r3, [r7, #15]
 80068b8:	e026      	b.n	8006908 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80068c0:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 80068cc:	68bb      	ldr	r3, [r7, #8]
 80068ce:	2200      	movs	r2, #0
 80068d0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 80068d4:	68bb      	ldr	r3, [r7, #8]
 80068d6:	2200      	movs	r2, #0
 80068d8:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	7c1b      	ldrb	r3, [r3, #16]
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d109      	bne.n	80068f8 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80068e4:	68bb      	ldr	r3, [r7, #8]
 80068e6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80068ea:	f44f 7300 	mov.w	r3, #512	; 0x200
 80068ee:	2101      	movs	r1, #1
 80068f0:	6878      	ldr	r0, [r7, #4]
 80068f2:	f001 ff19 	bl	8008728 <USBD_LL_PrepareReceive>
 80068f6:	e007      	b.n	8006908 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80068f8:	68bb      	ldr	r3, [r7, #8]
 80068fa:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80068fe:	2340      	movs	r3, #64	; 0x40
 8006900:	2101      	movs	r1, #1
 8006902:	6878      	ldr	r0, [r7, #4]
 8006904:	f001 ff10 	bl	8008728 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8006908:	7bfb      	ldrb	r3, [r7, #15]
}
 800690a:	4618      	mov	r0, r3
 800690c:	3710      	adds	r7, #16
 800690e:	46bd      	mov	sp, r7
 8006910:	bd80      	pop	{r7, pc}

08006912 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006912:	b580      	push	{r7, lr}
 8006914:	b084      	sub	sp, #16
 8006916:	af00      	add	r7, sp, #0
 8006918:	6078      	str	r0, [r7, #4]
 800691a:	460b      	mov	r3, r1
 800691c:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800691e:	2300      	movs	r3, #0
 8006920:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8006922:	2181      	movs	r1, #129	; 0x81
 8006924:	6878      	ldr	r0, [r7, #4]
 8006926:	f001 fe34 	bl	8008592 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	2200      	movs	r2, #0
 800692e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8006930:	2101      	movs	r1, #1
 8006932:	6878      	ldr	r0, [r7, #4]
 8006934:	f001 fe2d 	bl	8008592 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	2200      	movs	r2, #0
 800693c:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8006940:	2182      	movs	r1, #130	; 0x82
 8006942:	6878      	ldr	r0, [r7, #4]
 8006944:	f001 fe25 	bl	8008592 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	2200      	movs	r2, #0
 800694c:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006954:	2b00      	cmp	r3, #0
 8006956:	d00e      	beq.n	8006976 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800695e:	685b      	ldr	r3, [r3, #4]
 8006960:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006968:	4618      	mov	r0, r3
 800696a:	f001 ff1f 	bl	80087ac <USBD_static_free>
    pdev->pClassData = NULL;
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	2200      	movs	r2, #0
 8006972:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8006976:	7bfb      	ldrb	r3, [r7, #15]
}
 8006978:	4618      	mov	r0, r3
 800697a:	3710      	adds	r7, #16
 800697c:	46bd      	mov	sp, r7
 800697e:	bd80      	pop	{r7, pc}

08006980 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8006980:	b580      	push	{r7, lr}
 8006982:	b086      	sub	sp, #24
 8006984:	af00      	add	r7, sp, #0
 8006986:	6078      	str	r0, [r7, #4]
 8006988:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006990:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8006992:	2300      	movs	r3, #0
 8006994:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8006996:	2300      	movs	r3, #0
 8006998:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 800699a:	2300      	movs	r3, #0
 800699c:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800699e:	683b      	ldr	r3, [r7, #0]
 80069a0:	781b      	ldrb	r3, [r3, #0]
 80069a2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d039      	beq.n	8006a1e <USBD_CDC_Setup+0x9e>
 80069aa:	2b20      	cmp	r3, #32
 80069ac:	d17c      	bne.n	8006aa8 <USBD_CDC_Setup+0x128>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 80069ae:	683b      	ldr	r3, [r7, #0]
 80069b0:	88db      	ldrh	r3, [r3, #6]
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d029      	beq.n	8006a0a <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 80069b6:	683b      	ldr	r3, [r7, #0]
 80069b8:	781b      	ldrb	r3, [r3, #0]
 80069ba:	b25b      	sxtb	r3, r3
 80069bc:	2b00      	cmp	r3, #0
 80069be:	da11      	bge.n	80069e4 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80069c6:	689b      	ldr	r3, [r3, #8]
 80069c8:	683a      	ldr	r2, [r7, #0]
 80069ca:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 80069cc:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80069ce:	683a      	ldr	r2, [r7, #0]
 80069d0:	88d2      	ldrh	r2, [r2, #6]
 80069d2:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80069d4:	6939      	ldr	r1, [r7, #16]
 80069d6:	683b      	ldr	r3, [r7, #0]
 80069d8:	88db      	ldrh	r3, [r3, #6]
 80069da:	461a      	mov	r2, r3
 80069dc:	6878      	ldr	r0, [r7, #4]
 80069de:	f001 f9f9 	bl	8007dd4 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 80069e2:	e068      	b.n	8006ab6 <USBD_CDC_Setup+0x136>
          hcdc->CmdOpCode = req->bRequest;
 80069e4:	683b      	ldr	r3, [r7, #0]
 80069e6:	785a      	ldrb	r2, [r3, #1]
 80069e8:	693b      	ldr	r3, [r7, #16]
 80069ea:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 80069ee:	683b      	ldr	r3, [r7, #0]
 80069f0:	88db      	ldrh	r3, [r3, #6]
 80069f2:	b2da      	uxtb	r2, r3
 80069f4:	693b      	ldr	r3, [r7, #16]
 80069f6:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80069fa:	6939      	ldr	r1, [r7, #16]
 80069fc:	683b      	ldr	r3, [r7, #0]
 80069fe:	88db      	ldrh	r3, [r3, #6]
 8006a00:	461a      	mov	r2, r3
 8006a02:	6878      	ldr	r0, [r7, #4]
 8006a04:	f001 fa14 	bl	8007e30 <USBD_CtlPrepareRx>
      break;
 8006a08:	e055      	b.n	8006ab6 <USBD_CDC_Setup+0x136>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006a10:	689b      	ldr	r3, [r3, #8]
 8006a12:	683a      	ldr	r2, [r7, #0]
 8006a14:	7850      	ldrb	r0, [r2, #1]
 8006a16:	2200      	movs	r2, #0
 8006a18:	6839      	ldr	r1, [r7, #0]
 8006a1a:	4798      	blx	r3
      break;
 8006a1c:	e04b      	b.n	8006ab6 <USBD_CDC_Setup+0x136>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006a1e:	683b      	ldr	r3, [r7, #0]
 8006a20:	785b      	ldrb	r3, [r3, #1]
 8006a22:	2b0a      	cmp	r3, #10
 8006a24:	d017      	beq.n	8006a56 <USBD_CDC_Setup+0xd6>
 8006a26:	2b0b      	cmp	r3, #11
 8006a28:	d029      	beq.n	8006a7e <USBD_CDC_Setup+0xfe>
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d133      	bne.n	8006a96 <USBD_CDC_Setup+0x116>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a34:	2b03      	cmp	r3, #3
 8006a36:	d107      	bne.n	8006a48 <USBD_CDC_Setup+0xc8>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8006a38:	f107 030c 	add.w	r3, r7, #12
 8006a3c:	2202      	movs	r2, #2
 8006a3e:	4619      	mov	r1, r3
 8006a40:	6878      	ldr	r0, [r7, #4]
 8006a42:	f001 f9c7 	bl	8007dd4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006a46:	e02e      	b.n	8006aa6 <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 8006a48:	6839      	ldr	r1, [r7, #0]
 8006a4a:	6878      	ldr	r0, [r7, #4]
 8006a4c:	f001 f958 	bl	8007d00 <USBD_CtlError>
            ret = USBD_FAIL;
 8006a50:	2302      	movs	r3, #2
 8006a52:	75fb      	strb	r3, [r7, #23]
          break;
 8006a54:	e027      	b.n	8006aa6 <USBD_CDC_Setup+0x126>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a5c:	2b03      	cmp	r3, #3
 8006a5e:	d107      	bne.n	8006a70 <USBD_CDC_Setup+0xf0>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8006a60:	f107 030f 	add.w	r3, r7, #15
 8006a64:	2201      	movs	r2, #1
 8006a66:	4619      	mov	r1, r3
 8006a68:	6878      	ldr	r0, [r7, #4]
 8006a6a:	f001 f9b3 	bl	8007dd4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006a6e:	e01a      	b.n	8006aa6 <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 8006a70:	6839      	ldr	r1, [r7, #0]
 8006a72:	6878      	ldr	r0, [r7, #4]
 8006a74:	f001 f944 	bl	8007d00 <USBD_CtlError>
            ret = USBD_FAIL;
 8006a78:	2302      	movs	r3, #2
 8006a7a:	75fb      	strb	r3, [r7, #23]
          break;
 8006a7c:	e013      	b.n	8006aa6 <USBD_CDC_Setup+0x126>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a84:	2b03      	cmp	r3, #3
 8006a86:	d00d      	beq.n	8006aa4 <USBD_CDC_Setup+0x124>
          {
            USBD_CtlError(pdev, req);
 8006a88:	6839      	ldr	r1, [r7, #0]
 8006a8a:	6878      	ldr	r0, [r7, #4]
 8006a8c:	f001 f938 	bl	8007d00 <USBD_CtlError>
            ret = USBD_FAIL;
 8006a90:	2302      	movs	r3, #2
 8006a92:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8006a94:	e006      	b.n	8006aa4 <USBD_CDC_Setup+0x124>

        default:
          USBD_CtlError(pdev, req);
 8006a96:	6839      	ldr	r1, [r7, #0]
 8006a98:	6878      	ldr	r0, [r7, #4]
 8006a9a:	f001 f931 	bl	8007d00 <USBD_CtlError>
          ret = USBD_FAIL;
 8006a9e:	2302      	movs	r3, #2
 8006aa0:	75fb      	strb	r3, [r7, #23]
          break;
 8006aa2:	e000      	b.n	8006aa6 <USBD_CDC_Setup+0x126>
          break;
 8006aa4:	bf00      	nop
      }
      break;
 8006aa6:	e006      	b.n	8006ab6 <USBD_CDC_Setup+0x136>

    default:
      USBD_CtlError(pdev, req);
 8006aa8:	6839      	ldr	r1, [r7, #0]
 8006aaa:	6878      	ldr	r0, [r7, #4]
 8006aac:	f001 f928 	bl	8007d00 <USBD_CtlError>
      ret = USBD_FAIL;
 8006ab0:	2302      	movs	r3, #2
 8006ab2:	75fb      	strb	r3, [r7, #23]
      break;
 8006ab4:	bf00      	nop
  }

  return ret;
 8006ab6:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ab8:	4618      	mov	r0, r3
 8006aba:	3718      	adds	r7, #24
 8006abc:	46bd      	mov	sp, r7
 8006abe:	bd80      	pop	{r7, pc}

08006ac0 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006ac0:	b580      	push	{r7, lr}
 8006ac2:	b084      	sub	sp, #16
 8006ac4:	af00      	add	r7, sp, #0
 8006ac6:	6078      	str	r0, [r7, #4]
 8006ac8:	460b      	mov	r3, r1
 8006aca:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ad2:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006ada:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d03a      	beq.n	8006b5c <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8006ae6:	78fa      	ldrb	r2, [r7, #3]
 8006ae8:	6879      	ldr	r1, [r7, #4]
 8006aea:	4613      	mov	r3, r2
 8006aec:	009b      	lsls	r3, r3, #2
 8006aee:	4413      	add	r3, r2
 8006af0:	009b      	lsls	r3, r3, #2
 8006af2:	440b      	add	r3, r1
 8006af4:	331c      	adds	r3, #28
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d029      	beq.n	8006b50 <USBD_CDC_DataIn+0x90>
 8006afc:	78fa      	ldrb	r2, [r7, #3]
 8006afe:	6879      	ldr	r1, [r7, #4]
 8006b00:	4613      	mov	r3, r2
 8006b02:	009b      	lsls	r3, r3, #2
 8006b04:	4413      	add	r3, r2
 8006b06:	009b      	lsls	r3, r3, #2
 8006b08:	440b      	add	r3, r1
 8006b0a:	331c      	adds	r3, #28
 8006b0c:	681a      	ldr	r2, [r3, #0]
 8006b0e:	78f9      	ldrb	r1, [r7, #3]
 8006b10:	68b8      	ldr	r0, [r7, #8]
 8006b12:	460b      	mov	r3, r1
 8006b14:	009b      	lsls	r3, r3, #2
 8006b16:	440b      	add	r3, r1
 8006b18:	00db      	lsls	r3, r3, #3
 8006b1a:	4403      	add	r3, r0
 8006b1c:	3338      	adds	r3, #56	; 0x38
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	fbb2 f1f3 	udiv	r1, r2, r3
 8006b24:	fb03 f301 	mul.w	r3, r3, r1
 8006b28:	1ad3      	subs	r3, r2, r3
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d110      	bne.n	8006b50 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8006b2e:	78fa      	ldrb	r2, [r7, #3]
 8006b30:	6879      	ldr	r1, [r7, #4]
 8006b32:	4613      	mov	r3, r2
 8006b34:	009b      	lsls	r3, r3, #2
 8006b36:	4413      	add	r3, r2
 8006b38:	009b      	lsls	r3, r3, #2
 8006b3a:	440b      	add	r3, r1
 8006b3c:	331c      	adds	r3, #28
 8006b3e:	2200      	movs	r2, #0
 8006b40:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006b42:	78f9      	ldrb	r1, [r7, #3]
 8006b44:	2300      	movs	r3, #0
 8006b46:	2200      	movs	r2, #0
 8006b48:	6878      	ldr	r0, [r7, #4]
 8006b4a:	f001 fdca 	bl	80086e2 <USBD_LL_Transmit>
 8006b4e:	e003      	b.n	8006b58 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	2200      	movs	r2, #0
 8006b54:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8006b58:	2300      	movs	r3, #0
 8006b5a:	e000      	b.n	8006b5e <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8006b5c:	2302      	movs	r3, #2
  }
}
 8006b5e:	4618      	mov	r0, r3
 8006b60:	3710      	adds	r7, #16
 8006b62:	46bd      	mov	sp, r7
 8006b64:	bd80      	pop	{r7, pc}

08006b66 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006b66:	b580      	push	{r7, lr}
 8006b68:	b084      	sub	sp, #16
 8006b6a:	af00      	add	r7, sp, #0
 8006b6c:	6078      	str	r0, [r7, #4]
 8006b6e:	460b      	mov	r3, r1
 8006b70:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b78:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006b7a:	78fb      	ldrb	r3, [r7, #3]
 8006b7c:	4619      	mov	r1, r3
 8006b7e:	6878      	ldr	r0, [r7, #4]
 8006b80:	f001 fdf5 	bl	800876e <USBD_LL_GetRxDataSize>
 8006b84:	4602      	mov	r2, r0
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d00d      	beq.n	8006bb2 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006b9c:	68db      	ldr	r3, [r3, #12]
 8006b9e:	68fa      	ldr	r2, [r7, #12]
 8006ba0:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8006ba4:	68fa      	ldr	r2, [r7, #12]
 8006ba6:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8006baa:	4611      	mov	r1, r2
 8006bac:	4798      	blx	r3

    return USBD_OK;
 8006bae:	2300      	movs	r3, #0
 8006bb0:	e000      	b.n	8006bb4 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8006bb2:	2302      	movs	r3, #2
  }
}
 8006bb4:	4618      	mov	r0, r3
 8006bb6:	3710      	adds	r7, #16
 8006bb8:	46bd      	mov	sp, r7
 8006bba:	bd80      	pop	{r7, pc}

08006bbc <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006bbc:	b580      	push	{r7, lr}
 8006bbe:	b084      	sub	sp, #16
 8006bc0:	af00      	add	r7, sp, #0
 8006bc2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006bca:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d015      	beq.n	8006c02 <USBD_CDC_EP0_RxReady+0x46>
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8006bdc:	2bff      	cmp	r3, #255	; 0xff
 8006bde:	d010      	beq.n	8006c02 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006be6:	689b      	ldr	r3, [r3, #8]
 8006be8:	68fa      	ldr	r2, [r7, #12]
 8006bea:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8006bee:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8006bf0:	68fa      	ldr	r2, [r7, #12]
 8006bf2:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006bf6:	b292      	uxth	r2, r2
 8006bf8:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	22ff      	movs	r2, #255	; 0xff
 8006bfe:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8006c02:	2300      	movs	r3, #0
}
 8006c04:	4618      	mov	r0, r3
 8006c06:	3710      	adds	r7, #16
 8006c08:	46bd      	mov	sp, r7
 8006c0a:	bd80      	pop	{r7, pc}

08006c0c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006c0c:	b480      	push	{r7}
 8006c0e:	b083      	sub	sp, #12
 8006c10:	af00      	add	r7, sp, #0
 8006c12:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	2243      	movs	r2, #67	; 0x43
 8006c18:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8006c1a:	4b03      	ldr	r3, [pc, #12]	; (8006c28 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8006c1c:	4618      	mov	r0, r3
 8006c1e:	370c      	adds	r7, #12
 8006c20:	46bd      	mov	sp, r7
 8006c22:	bc80      	pop	{r7}
 8006c24:	4770      	bx	lr
 8006c26:	bf00      	nop
 8006c28:	20000098 	.word	0x20000098

08006c2c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006c2c:	b480      	push	{r7}
 8006c2e:	b083      	sub	sp, #12
 8006c30:	af00      	add	r7, sp, #0
 8006c32:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	2243      	movs	r2, #67	; 0x43
 8006c38:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8006c3a:	4b03      	ldr	r3, [pc, #12]	; (8006c48 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8006c3c:	4618      	mov	r0, r3
 8006c3e:	370c      	adds	r7, #12
 8006c40:	46bd      	mov	sp, r7
 8006c42:	bc80      	pop	{r7}
 8006c44:	4770      	bx	lr
 8006c46:	bf00      	nop
 8006c48:	20000054 	.word	0x20000054

08006c4c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006c4c:	b480      	push	{r7}
 8006c4e:	b083      	sub	sp, #12
 8006c50:	af00      	add	r7, sp, #0
 8006c52:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	2243      	movs	r2, #67	; 0x43
 8006c58:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8006c5a:	4b03      	ldr	r3, [pc, #12]	; (8006c68 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8006c5c:	4618      	mov	r0, r3
 8006c5e:	370c      	adds	r7, #12
 8006c60:	46bd      	mov	sp, r7
 8006c62:	bc80      	pop	{r7}
 8006c64:	4770      	bx	lr
 8006c66:	bf00      	nop
 8006c68:	200000dc 	.word	0x200000dc

08006c6c <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006c6c:	b480      	push	{r7}
 8006c6e:	b083      	sub	sp, #12
 8006c70:	af00      	add	r7, sp, #0
 8006c72:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	220a      	movs	r2, #10
 8006c78:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8006c7a:	4b03      	ldr	r3, [pc, #12]	; (8006c88 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006c7c:	4618      	mov	r0, r3
 8006c7e:	370c      	adds	r7, #12
 8006c80:	46bd      	mov	sp, r7
 8006c82:	bc80      	pop	{r7}
 8006c84:	4770      	bx	lr
 8006c86:	bf00      	nop
 8006c88:	20000010 	.word	0x20000010

08006c8c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8006c8c:	b480      	push	{r7}
 8006c8e:	b085      	sub	sp, #20
 8006c90:	af00      	add	r7, sp, #0
 8006c92:	6078      	str	r0, [r7, #4]
 8006c94:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8006c96:	2302      	movs	r3, #2
 8006c98:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8006c9a:	683b      	ldr	r3, [r7, #0]
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d005      	beq.n	8006cac <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	683a      	ldr	r2, [r7, #0]
 8006ca4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8006ca8:	2300      	movs	r3, #0
 8006caa:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8006cac:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cae:	4618      	mov	r0, r3
 8006cb0:	3714      	adds	r7, #20
 8006cb2:	46bd      	mov	sp, r7
 8006cb4:	bc80      	pop	{r7}
 8006cb6:	4770      	bx	lr

08006cb8 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8006cb8:	b480      	push	{r7}
 8006cba:	b087      	sub	sp, #28
 8006cbc:	af00      	add	r7, sp, #0
 8006cbe:	60f8      	str	r0, [r7, #12]
 8006cc0:	60b9      	str	r1, [r7, #8]
 8006cc2:	4613      	mov	r3, r2
 8006cc4:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ccc:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8006cce:	697b      	ldr	r3, [r7, #20]
 8006cd0:	68ba      	ldr	r2, [r7, #8]
 8006cd2:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8006cd6:	88fa      	ldrh	r2, [r7, #6]
 8006cd8:	697b      	ldr	r3, [r7, #20]
 8006cda:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8006cde:	2300      	movs	r3, #0
}
 8006ce0:	4618      	mov	r0, r3
 8006ce2:	371c      	adds	r7, #28
 8006ce4:	46bd      	mov	sp, r7
 8006ce6:	bc80      	pop	{r7}
 8006ce8:	4770      	bx	lr

08006cea <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8006cea:	b480      	push	{r7}
 8006cec:	b085      	sub	sp, #20
 8006cee:	af00      	add	r7, sp, #0
 8006cf0:	6078      	str	r0, [r7, #4]
 8006cf2:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006cfa:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	683a      	ldr	r2, [r7, #0]
 8006d00:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8006d04:	2300      	movs	r3, #0
}
 8006d06:	4618      	mov	r0, r3
 8006d08:	3714      	adds	r7, #20
 8006d0a:	46bd      	mov	sp, r7
 8006d0c:	bc80      	pop	{r7}
 8006d0e:	4770      	bx	lr

08006d10 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8006d10:	b580      	push	{r7, lr}
 8006d12:	b084      	sub	sp, #16
 8006d14:	af00      	add	r7, sp, #0
 8006d16:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d1e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d01c      	beq.n	8006d64 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d115      	bne.n	8006d60 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	2201      	movs	r2, #1
 8006d38:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8006d52:	b29b      	uxth	r3, r3
 8006d54:	2181      	movs	r1, #129	; 0x81
 8006d56:	6878      	ldr	r0, [r7, #4]
 8006d58:	f001 fcc3 	bl	80086e2 <USBD_LL_Transmit>

      return USBD_OK;
 8006d5c:	2300      	movs	r3, #0
 8006d5e:	e002      	b.n	8006d66 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8006d60:	2301      	movs	r3, #1
 8006d62:	e000      	b.n	8006d66 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8006d64:	2302      	movs	r3, #2
  }
}
 8006d66:	4618      	mov	r0, r3
 8006d68:	3710      	adds	r7, #16
 8006d6a:	46bd      	mov	sp, r7
 8006d6c:	bd80      	pop	{r7, pc}

08006d6e <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006d6e:	b580      	push	{r7, lr}
 8006d70:	b084      	sub	sp, #16
 8006d72:	af00      	add	r7, sp, #0
 8006d74:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d7c:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d017      	beq.n	8006db8 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	7c1b      	ldrb	r3, [r3, #16]
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d109      	bne.n	8006da4 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006d96:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006d9a:	2101      	movs	r1, #1
 8006d9c:	6878      	ldr	r0, [r7, #4]
 8006d9e:	f001 fcc3 	bl	8008728 <USBD_LL_PrepareReceive>
 8006da2:	e007      	b.n	8006db4 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006daa:	2340      	movs	r3, #64	; 0x40
 8006dac:	2101      	movs	r1, #1
 8006dae:	6878      	ldr	r0, [r7, #4]
 8006db0:	f001 fcba 	bl	8008728 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8006db4:	2300      	movs	r3, #0
 8006db6:	e000      	b.n	8006dba <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8006db8:	2302      	movs	r3, #2
  }
}
 8006dba:	4618      	mov	r0, r3
 8006dbc:	3710      	adds	r7, #16
 8006dbe:	46bd      	mov	sp, r7
 8006dc0:	bd80      	pop	{r7, pc}

08006dc2 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006dc2:	b580      	push	{r7, lr}
 8006dc4:	b084      	sub	sp, #16
 8006dc6:	af00      	add	r7, sp, #0
 8006dc8:	60f8      	str	r0, [r7, #12]
 8006dca:	60b9      	str	r1, [r7, #8]
 8006dcc:	4613      	mov	r3, r2
 8006dce:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d101      	bne.n	8006dda <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8006dd6:	2302      	movs	r3, #2
 8006dd8:	e01a      	b.n	8006e10 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d003      	beq.n	8006dec <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	2200      	movs	r2, #0
 8006de8:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006dec:	68bb      	ldr	r3, [r7, #8]
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d003      	beq.n	8006dfa <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	68ba      	ldr	r2, [r7, #8]
 8006df6:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	2201      	movs	r2, #1
 8006dfe:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	79fa      	ldrb	r2, [r7, #7]
 8006e06:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8006e08:	68f8      	ldr	r0, [r7, #12]
 8006e0a:	f001 fb27 	bl	800845c <USBD_LL_Init>

  return USBD_OK;
 8006e0e:	2300      	movs	r3, #0
}
 8006e10:	4618      	mov	r0, r3
 8006e12:	3710      	adds	r7, #16
 8006e14:	46bd      	mov	sp, r7
 8006e16:	bd80      	pop	{r7, pc}

08006e18 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006e18:	b480      	push	{r7}
 8006e1a:	b085      	sub	sp, #20
 8006e1c:	af00      	add	r7, sp, #0
 8006e1e:	6078      	str	r0, [r7, #4]
 8006e20:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8006e22:	2300      	movs	r3, #0
 8006e24:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8006e26:	683b      	ldr	r3, [r7, #0]
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d006      	beq.n	8006e3a <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	683a      	ldr	r2, [r7, #0]
 8006e30:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8006e34:	2300      	movs	r3, #0
 8006e36:	73fb      	strb	r3, [r7, #15]
 8006e38:	e001      	b.n	8006e3e <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8006e3a:	2302      	movs	r3, #2
 8006e3c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006e3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e40:	4618      	mov	r0, r3
 8006e42:	3714      	adds	r7, #20
 8006e44:	46bd      	mov	sp, r7
 8006e46:	bc80      	pop	{r7}
 8006e48:	4770      	bx	lr

08006e4a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006e4a:	b580      	push	{r7, lr}
 8006e4c:	b082      	sub	sp, #8
 8006e4e:	af00      	add	r7, sp, #0
 8006e50:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8006e52:	6878      	ldr	r0, [r7, #4]
 8006e54:	f001 fb5c 	bl	8008510 <USBD_LL_Start>

  return USBD_OK;
 8006e58:	2300      	movs	r3, #0
}
 8006e5a:	4618      	mov	r0, r3
 8006e5c:	3708      	adds	r7, #8
 8006e5e:	46bd      	mov	sp, r7
 8006e60:	bd80      	pop	{r7, pc}

08006e62 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8006e62:	b480      	push	{r7}
 8006e64:	b083      	sub	sp, #12
 8006e66:	af00      	add	r7, sp, #0
 8006e68:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006e6a:	2300      	movs	r3, #0
}
 8006e6c:	4618      	mov	r0, r3
 8006e6e:	370c      	adds	r7, #12
 8006e70:	46bd      	mov	sp, r7
 8006e72:	bc80      	pop	{r7}
 8006e74:	4770      	bx	lr

08006e76 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8006e76:	b580      	push	{r7, lr}
 8006e78:	b084      	sub	sp, #16
 8006e7a:	af00      	add	r7, sp, #0
 8006e7c:	6078      	str	r0, [r7, #4]
 8006e7e:	460b      	mov	r3, r1
 8006e80:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8006e82:	2302      	movs	r3, #2
 8006e84:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d00c      	beq.n	8006eaa <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	78fa      	ldrb	r2, [r7, #3]
 8006e9a:	4611      	mov	r1, r2
 8006e9c:	6878      	ldr	r0, [r7, #4]
 8006e9e:	4798      	blx	r3
 8006ea0:	4603      	mov	r3, r0
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d101      	bne.n	8006eaa <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8006ea6:	2300      	movs	r3, #0
 8006ea8:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8006eaa:	7bfb      	ldrb	r3, [r7, #15]
}
 8006eac:	4618      	mov	r0, r3
 8006eae:	3710      	adds	r7, #16
 8006eb0:	46bd      	mov	sp, r7
 8006eb2:	bd80      	pop	{r7, pc}

08006eb4 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8006eb4:	b580      	push	{r7, lr}
 8006eb6:	b082      	sub	sp, #8
 8006eb8:	af00      	add	r7, sp, #0
 8006eba:	6078      	str	r0, [r7, #4]
 8006ebc:	460b      	mov	r3, r1
 8006ebe:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006ec6:	685b      	ldr	r3, [r3, #4]
 8006ec8:	78fa      	ldrb	r2, [r7, #3]
 8006eca:	4611      	mov	r1, r2
 8006ecc:	6878      	ldr	r0, [r7, #4]
 8006ece:	4798      	blx	r3

  return USBD_OK;
 8006ed0:	2300      	movs	r3, #0
}
 8006ed2:	4618      	mov	r0, r3
 8006ed4:	3708      	adds	r7, #8
 8006ed6:	46bd      	mov	sp, r7
 8006ed8:	bd80      	pop	{r7, pc}

08006eda <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006eda:	b580      	push	{r7, lr}
 8006edc:	b082      	sub	sp, #8
 8006ede:	af00      	add	r7, sp, #0
 8006ee0:	6078      	str	r0, [r7, #4]
 8006ee2:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006eea:	6839      	ldr	r1, [r7, #0]
 8006eec:	4618      	mov	r0, r3
 8006eee:	f000 fecb 	bl	8007c88 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	2201      	movs	r2, #1
 8006ef6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8006f00:	461a      	mov	r2, r3
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8006f0e:	f003 031f 	and.w	r3, r3, #31
 8006f12:	2b01      	cmp	r3, #1
 8006f14:	d00c      	beq.n	8006f30 <USBD_LL_SetupStage+0x56>
 8006f16:	2b01      	cmp	r3, #1
 8006f18:	d302      	bcc.n	8006f20 <USBD_LL_SetupStage+0x46>
 8006f1a:	2b02      	cmp	r3, #2
 8006f1c:	d010      	beq.n	8006f40 <USBD_LL_SetupStage+0x66>
 8006f1e:	e017      	b.n	8006f50 <USBD_LL_SetupStage+0x76>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006f26:	4619      	mov	r1, r3
 8006f28:	6878      	ldr	r0, [r7, #4]
 8006f2a:	f000 f9cb 	bl	80072c4 <USBD_StdDevReq>
      break;
 8006f2e:	e01a      	b.n	8006f66 <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006f36:	4619      	mov	r1, r3
 8006f38:	6878      	ldr	r0, [r7, #4]
 8006f3a:	f000 fa2d 	bl	8007398 <USBD_StdItfReq>
      break;
 8006f3e:	e012      	b.n	8006f66 <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006f46:	4619      	mov	r1, r3
 8006f48:	6878      	ldr	r0, [r7, #4]
 8006f4a:	f000 fa6b 	bl	8007424 <USBD_StdEPReq>
      break;
 8006f4e:	e00a      	b.n	8006f66 <USBD_LL_SetupStage+0x8c>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8006f56:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006f5a:	b2db      	uxtb	r3, r3
 8006f5c:	4619      	mov	r1, r3
 8006f5e:	6878      	ldr	r0, [r7, #4]
 8006f60:	f001 fb36 	bl	80085d0 <USBD_LL_StallEP>
      break;
 8006f64:	bf00      	nop
  }

  return USBD_OK;
 8006f66:	2300      	movs	r3, #0
}
 8006f68:	4618      	mov	r0, r3
 8006f6a:	3708      	adds	r7, #8
 8006f6c:	46bd      	mov	sp, r7
 8006f6e:	bd80      	pop	{r7, pc}

08006f70 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006f70:	b580      	push	{r7, lr}
 8006f72:	b086      	sub	sp, #24
 8006f74:	af00      	add	r7, sp, #0
 8006f76:	60f8      	str	r0, [r7, #12]
 8006f78:	460b      	mov	r3, r1
 8006f7a:	607a      	str	r2, [r7, #4]
 8006f7c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8006f7e:	7afb      	ldrb	r3, [r7, #11]
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d14b      	bne.n	800701c <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8006f8a:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006f92:	2b03      	cmp	r3, #3
 8006f94:	d134      	bne.n	8007000 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8006f96:	697b      	ldr	r3, [r7, #20]
 8006f98:	68da      	ldr	r2, [r3, #12]
 8006f9a:	697b      	ldr	r3, [r7, #20]
 8006f9c:	691b      	ldr	r3, [r3, #16]
 8006f9e:	429a      	cmp	r2, r3
 8006fa0:	d919      	bls.n	8006fd6 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8006fa2:	697b      	ldr	r3, [r7, #20]
 8006fa4:	68da      	ldr	r2, [r3, #12]
 8006fa6:	697b      	ldr	r3, [r7, #20]
 8006fa8:	691b      	ldr	r3, [r3, #16]
 8006faa:	1ad2      	subs	r2, r2, r3
 8006fac:	697b      	ldr	r3, [r7, #20]
 8006fae:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006fb0:	697b      	ldr	r3, [r7, #20]
 8006fb2:	68da      	ldr	r2, [r3, #12]
 8006fb4:	697b      	ldr	r3, [r7, #20]
 8006fb6:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8006fb8:	429a      	cmp	r2, r3
 8006fba:	d203      	bcs.n	8006fc4 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006fbc:	697b      	ldr	r3, [r7, #20]
 8006fbe:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8006fc0:	b29b      	uxth	r3, r3
 8006fc2:	e002      	b.n	8006fca <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006fc4:	697b      	ldr	r3, [r7, #20]
 8006fc6:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8006fc8:	b29b      	uxth	r3, r3
 8006fca:	461a      	mov	r2, r3
 8006fcc:	6879      	ldr	r1, [r7, #4]
 8006fce:	68f8      	ldr	r0, [r7, #12]
 8006fd0:	f000 ff4c 	bl	8007e6c <USBD_CtlContinueRx>
 8006fd4:	e038      	b.n	8007048 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006fdc:	691b      	ldr	r3, [r3, #16]
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d00a      	beq.n	8006ff8 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8006fe8:	2b03      	cmp	r3, #3
 8006fea:	d105      	bne.n	8006ff8 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006ff2:	691b      	ldr	r3, [r3, #16]
 8006ff4:	68f8      	ldr	r0, [r7, #12]
 8006ff6:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8006ff8:	68f8      	ldr	r0, [r7, #12]
 8006ffa:	f000 ff49 	bl	8007e90 <USBD_CtlSendStatus>
 8006ffe:	e023      	b.n	8007048 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007006:	2b05      	cmp	r3, #5
 8007008:	d11e      	bne.n	8007048 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	2200      	movs	r2, #0
 800700e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8007012:	2100      	movs	r1, #0
 8007014:	68f8      	ldr	r0, [r7, #12]
 8007016:	f001 fadb 	bl	80085d0 <USBD_LL_StallEP>
 800701a:	e015      	b.n	8007048 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007022:	699b      	ldr	r3, [r3, #24]
 8007024:	2b00      	cmp	r3, #0
 8007026:	d00d      	beq.n	8007044 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800702e:	2b03      	cmp	r3, #3
 8007030:	d108      	bne.n	8007044 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007038:	699b      	ldr	r3, [r3, #24]
 800703a:	7afa      	ldrb	r2, [r7, #11]
 800703c:	4611      	mov	r1, r2
 800703e:	68f8      	ldr	r0, [r7, #12]
 8007040:	4798      	blx	r3
 8007042:	e001      	b.n	8007048 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007044:	2302      	movs	r3, #2
 8007046:	e000      	b.n	800704a <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8007048:	2300      	movs	r3, #0
}
 800704a:	4618      	mov	r0, r3
 800704c:	3718      	adds	r7, #24
 800704e:	46bd      	mov	sp, r7
 8007050:	bd80      	pop	{r7, pc}

08007052 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007052:	b580      	push	{r7, lr}
 8007054:	b086      	sub	sp, #24
 8007056:	af00      	add	r7, sp, #0
 8007058:	60f8      	str	r0, [r7, #12]
 800705a:	460b      	mov	r3, r1
 800705c:	607a      	str	r2, [r7, #4]
 800705e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8007060:	7afb      	ldrb	r3, [r7, #11]
 8007062:	2b00      	cmp	r3, #0
 8007064:	d17f      	bne.n	8007166 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	3314      	adds	r3, #20
 800706a:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007072:	2b02      	cmp	r3, #2
 8007074:	d15c      	bne.n	8007130 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8007076:	697b      	ldr	r3, [r7, #20]
 8007078:	68da      	ldr	r2, [r3, #12]
 800707a:	697b      	ldr	r3, [r7, #20]
 800707c:	691b      	ldr	r3, [r3, #16]
 800707e:	429a      	cmp	r2, r3
 8007080:	d915      	bls.n	80070ae <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8007082:	697b      	ldr	r3, [r7, #20]
 8007084:	68da      	ldr	r2, [r3, #12]
 8007086:	697b      	ldr	r3, [r7, #20]
 8007088:	691b      	ldr	r3, [r3, #16]
 800708a:	1ad2      	subs	r2, r2, r3
 800708c:	697b      	ldr	r3, [r7, #20]
 800708e:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8007090:	697b      	ldr	r3, [r7, #20]
 8007092:	68db      	ldr	r3, [r3, #12]
 8007094:	b29b      	uxth	r3, r3
 8007096:	461a      	mov	r2, r3
 8007098:	6879      	ldr	r1, [r7, #4]
 800709a:	68f8      	ldr	r0, [r7, #12]
 800709c:	f000 feb6 	bl	8007e0c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80070a0:	2300      	movs	r3, #0
 80070a2:	2200      	movs	r2, #0
 80070a4:	2100      	movs	r1, #0
 80070a6:	68f8      	ldr	r0, [r7, #12]
 80070a8:	f001 fb3e 	bl	8008728 <USBD_LL_PrepareReceive>
 80070ac:	e04e      	b.n	800714c <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80070ae:	697b      	ldr	r3, [r7, #20]
 80070b0:	689b      	ldr	r3, [r3, #8]
 80070b2:	697a      	ldr	r2, [r7, #20]
 80070b4:	6912      	ldr	r2, [r2, #16]
 80070b6:	fbb3 f1f2 	udiv	r1, r3, r2
 80070ba:	fb02 f201 	mul.w	r2, r2, r1
 80070be:	1a9b      	subs	r3, r3, r2
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d11c      	bne.n	80070fe <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 80070c4:	697b      	ldr	r3, [r7, #20]
 80070c6:	689a      	ldr	r2, [r3, #8]
 80070c8:	697b      	ldr	r3, [r7, #20]
 80070ca:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80070cc:	429a      	cmp	r2, r3
 80070ce:	d316      	bcc.n	80070fe <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 80070d0:	697b      	ldr	r3, [r7, #20]
 80070d2:	689a      	ldr	r2, [r3, #8]
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80070da:	429a      	cmp	r2, r3
 80070dc:	d20f      	bcs.n	80070fe <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 80070de:	2200      	movs	r2, #0
 80070e0:	2100      	movs	r1, #0
 80070e2:	68f8      	ldr	r0, [r7, #12]
 80070e4:	f000 fe92 	bl	8007e0c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	2200      	movs	r2, #0
 80070ec:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80070f0:	2300      	movs	r3, #0
 80070f2:	2200      	movs	r2, #0
 80070f4:	2100      	movs	r1, #0
 80070f6:	68f8      	ldr	r0, [r7, #12]
 80070f8:	f001 fb16 	bl	8008728 <USBD_LL_PrepareReceive>
 80070fc:	e026      	b.n	800714c <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007104:	68db      	ldr	r3, [r3, #12]
 8007106:	2b00      	cmp	r3, #0
 8007108:	d00a      	beq.n	8007120 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8007110:	2b03      	cmp	r3, #3
 8007112:	d105      	bne.n	8007120 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800711a:	68db      	ldr	r3, [r3, #12]
 800711c:	68f8      	ldr	r0, [r7, #12]
 800711e:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8007120:	2180      	movs	r1, #128	; 0x80
 8007122:	68f8      	ldr	r0, [r7, #12]
 8007124:	f001 fa54 	bl	80085d0 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8007128:	68f8      	ldr	r0, [r7, #12]
 800712a:	f000 fec4 	bl	8007eb6 <USBD_CtlReceiveStatus>
 800712e:	e00d      	b.n	800714c <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007136:	2b04      	cmp	r3, #4
 8007138:	d004      	beq.n	8007144 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8007140:	2b00      	cmp	r3, #0
 8007142:	d103      	bne.n	800714c <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8007144:	2180      	movs	r1, #128	; 0x80
 8007146:	68f8      	ldr	r0, [r7, #12]
 8007148:	f001 fa42 	bl	80085d0 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8007152:	2b01      	cmp	r3, #1
 8007154:	d11d      	bne.n	8007192 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8007156:	68f8      	ldr	r0, [r7, #12]
 8007158:	f7ff fe83 	bl	8006e62 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	2200      	movs	r2, #0
 8007160:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8007164:	e015      	b.n	8007192 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800716c:	695b      	ldr	r3, [r3, #20]
 800716e:	2b00      	cmp	r3, #0
 8007170:	d00d      	beq.n	800718e <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8007178:	2b03      	cmp	r3, #3
 800717a:	d108      	bne.n	800718e <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007182:	695b      	ldr	r3, [r3, #20]
 8007184:	7afa      	ldrb	r2, [r7, #11]
 8007186:	4611      	mov	r1, r2
 8007188:	68f8      	ldr	r0, [r7, #12]
 800718a:	4798      	blx	r3
 800718c:	e001      	b.n	8007192 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800718e:	2302      	movs	r3, #2
 8007190:	e000      	b.n	8007194 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8007192:	2300      	movs	r3, #0
}
 8007194:	4618      	mov	r0, r3
 8007196:	3718      	adds	r7, #24
 8007198:	46bd      	mov	sp, r7
 800719a:	bd80      	pop	{r7, pc}

0800719c <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800719c:	b580      	push	{r7, lr}
 800719e:	b082      	sub	sp, #8
 80071a0:	af00      	add	r7, sp, #0
 80071a2:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80071a4:	2340      	movs	r3, #64	; 0x40
 80071a6:	2200      	movs	r2, #0
 80071a8:	2100      	movs	r1, #0
 80071aa:	6878      	ldr	r0, [r7, #4]
 80071ac:	f001 f9cb 	bl	8008546 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	2201      	movs	r2, #1
 80071b4:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	2240      	movs	r2, #64	; 0x40
 80071bc:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80071c0:	2340      	movs	r3, #64	; 0x40
 80071c2:	2200      	movs	r2, #0
 80071c4:	2180      	movs	r1, #128	; 0x80
 80071c6:	6878      	ldr	r0, [r7, #4]
 80071c8:	f001 f9bd 	bl	8008546 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	2201      	movs	r2, #1
 80071d0:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	2240      	movs	r2, #64	; 0x40
 80071d6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	2201      	movs	r2, #1
 80071dc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	2200      	movs	r2, #0
 80071e4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	2200      	movs	r2, #0
 80071ec:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	2200      	movs	r2, #0
 80071f2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d009      	beq.n	8007214 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007206:	685b      	ldr	r3, [r3, #4]
 8007208:	687a      	ldr	r2, [r7, #4]
 800720a:	6852      	ldr	r2, [r2, #4]
 800720c:	b2d2      	uxtb	r2, r2
 800720e:	4611      	mov	r1, r2
 8007210:	6878      	ldr	r0, [r7, #4]
 8007212:	4798      	blx	r3
  }

  return USBD_OK;
 8007214:	2300      	movs	r3, #0
}
 8007216:	4618      	mov	r0, r3
 8007218:	3708      	adds	r7, #8
 800721a:	46bd      	mov	sp, r7
 800721c:	bd80      	pop	{r7, pc}

0800721e <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800721e:	b480      	push	{r7}
 8007220:	b083      	sub	sp, #12
 8007222:	af00      	add	r7, sp, #0
 8007224:	6078      	str	r0, [r7, #4]
 8007226:	460b      	mov	r3, r1
 8007228:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	78fa      	ldrb	r2, [r7, #3]
 800722e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007230:	2300      	movs	r3, #0
}
 8007232:	4618      	mov	r0, r3
 8007234:	370c      	adds	r7, #12
 8007236:	46bd      	mov	sp, r7
 8007238:	bc80      	pop	{r7}
 800723a:	4770      	bx	lr

0800723c <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800723c:	b480      	push	{r7}
 800723e:	b083      	sub	sp, #12
 8007240:	af00      	add	r7, sp, #0
 8007242:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	2204      	movs	r2, #4
 8007254:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8007258:	2300      	movs	r3, #0
}
 800725a:	4618      	mov	r0, r3
 800725c:	370c      	adds	r7, #12
 800725e:	46bd      	mov	sp, r7
 8007260:	bc80      	pop	{r7}
 8007262:	4770      	bx	lr

08007264 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007264:	b480      	push	{r7}
 8007266:	b083      	sub	sp, #12
 8007268:	af00      	add	r7, sp, #0
 800726a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007272:	2b04      	cmp	r3, #4
 8007274:	d105      	bne.n	8007282 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8007282:	2300      	movs	r3, #0
}
 8007284:	4618      	mov	r0, r3
 8007286:	370c      	adds	r7, #12
 8007288:	46bd      	mov	sp, r7
 800728a:	bc80      	pop	{r7}
 800728c:	4770      	bx	lr

0800728e <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800728e:	b580      	push	{r7, lr}
 8007290:	b082      	sub	sp, #8
 8007292:	af00      	add	r7, sp, #0
 8007294:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800729c:	2b03      	cmp	r3, #3
 800729e:	d10b      	bne.n	80072b8 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80072a6:	69db      	ldr	r3, [r3, #28]
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d005      	beq.n	80072b8 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80072b2:	69db      	ldr	r3, [r3, #28]
 80072b4:	6878      	ldr	r0, [r7, #4]
 80072b6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80072b8:	2300      	movs	r3, #0
}
 80072ba:	4618      	mov	r0, r3
 80072bc:	3708      	adds	r7, #8
 80072be:	46bd      	mov	sp, r7
 80072c0:	bd80      	pop	{r7, pc}
	...

080072c4 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 80072c4:	b580      	push	{r7, lr}
 80072c6:	b084      	sub	sp, #16
 80072c8:	af00      	add	r7, sp, #0
 80072ca:	6078      	str	r0, [r7, #4]
 80072cc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80072ce:	2300      	movs	r3, #0
 80072d0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80072d2:	683b      	ldr	r3, [r7, #0]
 80072d4:	781b      	ldrb	r3, [r3, #0]
 80072d6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80072da:	2b20      	cmp	r3, #32
 80072dc:	d004      	beq.n	80072e8 <USBD_StdDevReq+0x24>
 80072de:	2b40      	cmp	r3, #64	; 0x40
 80072e0:	d002      	beq.n	80072e8 <USBD_StdDevReq+0x24>
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d008      	beq.n	80072f8 <USBD_StdDevReq+0x34>
 80072e6:	e04c      	b.n	8007382 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80072ee:	689b      	ldr	r3, [r3, #8]
 80072f0:	6839      	ldr	r1, [r7, #0]
 80072f2:	6878      	ldr	r0, [r7, #4]
 80072f4:	4798      	blx	r3
      break;
 80072f6:	e049      	b.n	800738c <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80072f8:	683b      	ldr	r3, [r7, #0]
 80072fa:	785b      	ldrb	r3, [r3, #1]
 80072fc:	2b09      	cmp	r3, #9
 80072fe:	d83a      	bhi.n	8007376 <USBD_StdDevReq+0xb2>
 8007300:	a201      	add	r2, pc, #4	; (adr r2, 8007308 <USBD_StdDevReq+0x44>)
 8007302:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007306:	bf00      	nop
 8007308:	08007359 	.word	0x08007359
 800730c:	0800736d 	.word	0x0800736d
 8007310:	08007377 	.word	0x08007377
 8007314:	08007363 	.word	0x08007363
 8007318:	08007377 	.word	0x08007377
 800731c:	0800733b 	.word	0x0800733b
 8007320:	08007331 	.word	0x08007331
 8007324:	08007377 	.word	0x08007377
 8007328:	0800734f 	.word	0x0800734f
 800732c:	08007345 	.word	0x08007345
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007330:	6839      	ldr	r1, [r7, #0]
 8007332:	6878      	ldr	r0, [r7, #4]
 8007334:	f000 f9d4 	bl	80076e0 <USBD_GetDescriptor>
          break;
 8007338:	e022      	b.n	8007380 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800733a:	6839      	ldr	r1, [r7, #0]
 800733c:	6878      	ldr	r0, [r7, #4]
 800733e:	f000 fb37 	bl	80079b0 <USBD_SetAddress>
          break;
 8007342:	e01d      	b.n	8007380 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8007344:	6839      	ldr	r1, [r7, #0]
 8007346:	6878      	ldr	r0, [r7, #4]
 8007348:	f000 fb74 	bl	8007a34 <USBD_SetConfig>
          break;
 800734c:	e018      	b.n	8007380 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800734e:	6839      	ldr	r1, [r7, #0]
 8007350:	6878      	ldr	r0, [r7, #4]
 8007352:	f000 fbfd 	bl	8007b50 <USBD_GetConfig>
          break;
 8007356:	e013      	b.n	8007380 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007358:	6839      	ldr	r1, [r7, #0]
 800735a:	6878      	ldr	r0, [r7, #4]
 800735c:	f000 fc2c 	bl	8007bb8 <USBD_GetStatus>
          break;
 8007360:	e00e      	b.n	8007380 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007362:	6839      	ldr	r1, [r7, #0]
 8007364:	6878      	ldr	r0, [r7, #4]
 8007366:	f000 fc5a 	bl	8007c1e <USBD_SetFeature>
          break;
 800736a:	e009      	b.n	8007380 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800736c:	6839      	ldr	r1, [r7, #0]
 800736e:	6878      	ldr	r0, [r7, #4]
 8007370:	f000 fc69 	bl	8007c46 <USBD_ClrFeature>
          break;
 8007374:	e004      	b.n	8007380 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8007376:	6839      	ldr	r1, [r7, #0]
 8007378:	6878      	ldr	r0, [r7, #4]
 800737a:	f000 fcc1 	bl	8007d00 <USBD_CtlError>
          break;
 800737e:	bf00      	nop
      }
      break;
 8007380:	e004      	b.n	800738c <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8007382:	6839      	ldr	r1, [r7, #0]
 8007384:	6878      	ldr	r0, [r7, #4]
 8007386:	f000 fcbb 	bl	8007d00 <USBD_CtlError>
      break;
 800738a:	bf00      	nop
  }

  return ret;
 800738c:	7bfb      	ldrb	r3, [r7, #15]
}
 800738e:	4618      	mov	r0, r3
 8007390:	3710      	adds	r7, #16
 8007392:	46bd      	mov	sp, r7
 8007394:	bd80      	pop	{r7, pc}
 8007396:	bf00      	nop

08007398 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8007398:	b580      	push	{r7, lr}
 800739a:	b084      	sub	sp, #16
 800739c:	af00      	add	r7, sp, #0
 800739e:	6078      	str	r0, [r7, #4]
 80073a0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80073a2:	2300      	movs	r3, #0
 80073a4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80073a6:	683b      	ldr	r3, [r7, #0]
 80073a8:	781b      	ldrb	r3, [r3, #0]
 80073aa:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80073ae:	2b20      	cmp	r3, #32
 80073b0:	d003      	beq.n	80073ba <USBD_StdItfReq+0x22>
 80073b2:	2b40      	cmp	r3, #64	; 0x40
 80073b4:	d001      	beq.n	80073ba <USBD_StdItfReq+0x22>
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d12a      	bne.n	8007410 <USBD_StdItfReq+0x78>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80073c0:	3b01      	subs	r3, #1
 80073c2:	2b02      	cmp	r3, #2
 80073c4:	d81d      	bhi.n	8007402 <USBD_StdItfReq+0x6a>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80073c6:	683b      	ldr	r3, [r7, #0]
 80073c8:	889b      	ldrh	r3, [r3, #4]
 80073ca:	b2db      	uxtb	r3, r3
 80073cc:	2b01      	cmp	r3, #1
 80073ce:	d813      	bhi.n	80073f8 <USBD_StdItfReq+0x60>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80073d6:	689b      	ldr	r3, [r3, #8]
 80073d8:	6839      	ldr	r1, [r7, #0]
 80073da:	6878      	ldr	r0, [r7, #4]
 80073dc:	4798      	blx	r3
 80073de:	4603      	mov	r3, r0
 80073e0:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80073e2:	683b      	ldr	r3, [r7, #0]
 80073e4:	88db      	ldrh	r3, [r3, #6]
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d110      	bne.n	800740c <USBD_StdItfReq+0x74>
 80073ea:	7bfb      	ldrb	r3, [r7, #15]
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d10d      	bne.n	800740c <USBD_StdItfReq+0x74>
            {
              USBD_CtlSendStatus(pdev);
 80073f0:	6878      	ldr	r0, [r7, #4]
 80073f2:	f000 fd4d 	bl	8007e90 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80073f6:	e009      	b.n	800740c <USBD_StdItfReq+0x74>
            USBD_CtlError(pdev, req);
 80073f8:	6839      	ldr	r1, [r7, #0]
 80073fa:	6878      	ldr	r0, [r7, #4]
 80073fc:	f000 fc80 	bl	8007d00 <USBD_CtlError>
          break;
 8007400:	e004      	b.n	800740c <USBD_StdItfReq+0x74>

        default:
          USBD_CtlError(pdev, req);
 8007402:	6839      	ldr	r1, [r7, #0]
 8007404:	6878      	ldr	r0, [r7, #4]
 8007406:	f000 fc7b 	bl	8007d00 <USBD_CtlError>
          break;
 800740a:	e000      	b.n	800740e <USBD_StdItfReq+0x76>
          break;
 800740c:	bf00      	nop
      }
      break;
 800740e:	e004      	b.n	800741a <USBD_StdItfReq+0x82>

    default:
      USBD_CtlError(pdev, req);
 8007410:	6839      	ldr	r1, [r7, #0]
 8007412:	6878      	ldr	r0, [r7, #4]
 8007414:	f000 fc74 	bl	8007d00 <USBD_CtlError>
      break;
 8007418:	bf00      	nop
  }

  return USBD_OK;
 800741a:	2300      	movs	r3, #0
}
 800741c:	4618      	mov	r0, r3
 800741e:	3710      	adds	r7, #16
 8007420:	46bd      	mov	sp, r7
 8007422:	bd80      	pop	{r7, pc}

08007424 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8007424:	b580      	push	{r7, lr}
 8007426:	b084      	sub	sp, #16
 8007428:	af00      	add	r7, sp, #0
 800742a:	6078      	str	r0, [r7, #4]
 800742c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800742e:	2300      	movs	r3, #0
 8007430:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8007432:	683b      	ldr	r3, [r7, #0]
 8007434:	889b      	ldrh	r3, [r3, #4]
 8007436:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007438:	683b      	ldr	r3, [r7, #0]
 800743a:	781b      	ldrb	r3, [r3, #0]
 800743c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007440:	2b20      	cmp	r3, #32
 8007442:	d004      	beq.n	800744e <USBD_StdEPReq+0x2a>
 8007444:	2b40      	cmp	r3, #64	; 0x40
 8007446:	d002      	beq.n	800744e <USBD_StdEPReq+0x2a>
 8007448:	2b00      	cmp	r3, #0
 800744a:	d008      	beq.n	800745e <USBD_StdEPReq+0x3a>
 800744c:	e13d      	b.n	80076ca <USBD_StdEPReq+0x2a6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007454:	689b      	ldr	r3, [r3, #8]
 8007456:	6839      	ldr	r1, [r7, #0]
 8007458:	6878      	ldr	r0, [r7, #4]
 800745a:	4798      	blx	r3
      break;
 800745c:	e13a      	b.n	80076d4 <USBD_StdEPReq+0x2b0>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800745e:	683b      	ldr	r3, [r7, #0]
 8007460:	781b      	ldrb	r3, [r3, #0]
 8007462:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007466:	2b20      	cmp	r3, #32
 8007468:	d10a      	bne.n	8007480 <USBD_StdEPReq+0x5c>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007470:	689b      	ldr	r3, [r3, #8]
 8007472:	6839      	ldr	r1, [r7, #0]
 8007474:	6878      	ldr	r0, [r7, #4]
 8007476:	4798      	blx	r3
 8007478:	4603      	mov	r3, r0
 800747a:	73fb      	strb	r3, [r7, #15]

        return ret;
 800747c:	7bfb      	ldrb	r3, [r7, #15]
 800747e:	e12a      	b.n	80076d6 <USBD_StdEPReq+0x2b2>
      }

      switch (req->bRequest)
 8007480:	683b      	ldr	r3, [r7, #0]
 8007482:	785b      	ldrb	r3, [r3, #1]
 8007484:	2b01      	cmp	r3, #1
 8007486:	d03e      	beq.n	8007506 <USBD_StdEPReq+0xe2>
 8007488:	2b03      	cmp	r3, #3
 800748a:	d002      	beq.n	8007492 <USBD_StdEPReq+0x6e>
 800748c:	2b00      	cmp	r3, #0
 800748e:	d070      	beq.n	8007572 <USBD_StdEPReq+0x14e>
 8007490:	e115      	b.n	80076be <USBD_StdEPReq+0x29a>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007498:	2b02      	cmp	r3, #2
 800749a:	d002      	beq.n	80074a2 <USBD_StdEPReq+0x7e>
 800749c:	2b03      	cmp	r3, #3
 800749e:	d015      	beq.n	80074cc <USBD_StdEPReq+0xa8>
 80074a0:	e02b      	b.n	80074fa <USBD_StdEPReq+0xd6>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80074a2:	7bbb      	ldrb	r3, [r7, #14]
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d00c      	beq.n	80074c2 <USBD_StdEPReq+0x9e>
 80074a8:	7bbb      	ldrb	r3, [r7, #14]
 80074aa:	2b80      	cmp	r3, #128	; 0x80
 80074ac:	d009      	beq.n	80074c2 <USBD_StdEPReq+0x9e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80074ae:	7bbb      	ldrb	r3, [r7, #14]
 80074b0:	4619      	mov	r1, r3
 80074b2:	6878      	ldr	r0, [r7, #4]
 80074b4:	f001 f88c 	bl	80085d0 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80074b8:	2180      	movs	r1, #128	; 0x80
 80074ba:	6878      	ldr	r0, [r7, #4]
 80074bc:	f001 f888 	bl	80085d0 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80074c0:	e020      	b.n	8007504 <USBD_StdEPReq+0xe0>
                USBD_CtlError(pdev, req);
 80074c2:	6839      	ldr	r1, [r7, #0]
 80074c4:	6878      	ldr	r0, [r7, #4]
 80074c6:	f000 fc1b 	bl	8007d00 <USBD_CtlError>
              break;
 80074ca:	e01b      	b.n	8007504 <USBD_StdEPReq+0xe0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80074cc:	683b      	ldr	r3, [r7, #0]
 80074ce:	885b      	ldrh	r3, [r3, #2]
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d10e      	bne.n	80074f2 <USBD_StdEPReq+0xce>
              {
                if ((ep_addr != 0x00U) &&
 80074d4:	7bbb      	ldrb	r3, [r7, #14]
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d00b      	beq.n	80074f2 <USBD_StdEPReq+0xce>
 80074da:	7bbb      	ldrb	r3, [r7, #14]
 80074dc:	2b80      	cmp	r3, #128	; 0x80
 80074de:	d008      	beq.n	80074f2 <USBD_StdEPReq+0xce>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80074e0:	683b      	ldr	r3, [r7, #0]
 80074e2:	88db      	ldrh	r3, [r3, #6]
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d104      	bne.n	80074f2 <USBD_StdEPReq+0xce>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 80074e8:	7bbb      	ldrb	r3, [r7, #14]
 80074ea:	4619      	mov	r1, r3
 80074ec:	6878      	ldr	r0, [r7, #4]
 80074ee:	f001 f86f 	bl	80085d0 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 80074f2:	6878      	ldr	r0, [r7, #4]
 80074f4:	f000 fccc 	bl	8007e90 <USBD_CtlSendStatus>

              break;
 80074f8:	e004      	b.n	8007504 <USBD_StdEPReq+0xe0>

            default:
              USBD_CtlError(pdev, req);
 80074fa:	6839      	ldr	r1, [r7, #0]
 80074fc:	6878      	ldr	r0, [r7, #4]
 80074fe:	f000 fbff 	bl	8007d00 <USBD_CtlError>
              break;
 8007502:	bf00      	nop
          }
          break;
 8007504:	e0e0      	b.n	80076c8 <USBD_StdEPReq+0x2a4>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800750c:	2b02      	cmp	r3, #2
 800750e:	d002      	beq.n	8007516 <USBD_StdEPReq+0xf2>
 8007510:	2b03      	cmp	r3, #3
 8007512:	d015      	beq.n	8007540 <USBD_StdEPReq+0x11c>
 8007514:	e026      	b.n	8007564 <USBD_StdEPReq+0x140>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007516:	7bbb      	ldrb	r3, [r7, #14]
 8007518:	2b00      	cmp	r3, #0
 800751a:	d00c      	beq.n	8007536 <USBD_StdEPReq+0x112>
 800751c:	7bbb      	ldrb	r3, [r7, #14]
 800751e:	2b80      	cmp	r3, #128	; 0x80
 8007520:	d009      	beq.n	8007536 <USBD_StdEPReq+0x112>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8007522:	7bbb      	ldrb	r3, [r7, #14]
 8007524:	4619      	mov	r1, r3
 8007526:	6878      	ldr	r0, [r7, #4]
 8007528:	f001 f852 	bl	80085d0 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800752c:	2180      	movs	r1, #128	; 0x80
 800752e:	6878      	ldr	r0, [r7, #4]
 8007530:	f001 f84e 	bl	80085d0 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007534:	e01c      	b.n	8007570 <USBD_StdEPReq+0x14c>
                USBD_CtlError(pdev, req);
 8007536:	6839      	ldr	r1, [r7, #0]
 8007538:	6878      	ldr	r0, [r7, #4]
 800753a:	f000 fbe1 	bl	8007d00 <USBD_CtlError>
              break;
 800753e:	e017      	b.n	8007570 <USBD_StdEPReq+0x14c>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007540:	683b      	ldr	r3, [r7, #0]
 8007542:	885b      	ldrh	r3, [r3, #2]
 8007544:	2b00      	cmp	r3, #0
 8007546:	d112      	bne.n	800756e <USBD_StdEPReq+0x14a>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007548:	7bbb      	ldrb	r3, [r7, #14]
 800754a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800754e:	2b00      	cmp	r3, #0
 8007550:	d004      	beq.n	800755c <USBD_StdEPReq+0x138>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8007552:	7bbb      	ldrb	r3, [r7, #14]
 8007554:	4619      	mov	r1, r3
 8007556:	6878      	ldr	r0, [r7, #4]
 8007558:	f001 f859 	bl	800860e <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 800755c:	6878      	ldr	r0, [r7, #4]
 800755e:	f000 fc97 	bl	8007e90 <USBD_CtlSendStatus>
              }
              break;
 8007562:	e004      	b.n	800756e <USBD_StdEPReq+0x14a>

            default:
              USBD_CtlError(pdev, req);
 8007564:	6839      	ldr	r1, [r7, #0]
 8007566:	6878      	ldr	r0, [r7, #4]
 8007568:	f000 fbca 	bl	8007d00 <USBD_CtlError>
              break;
 800756c:	e000      	b.n	8007570 <USBD_StdEPReq+0x14c>
              break;
 800756e:	bf00      	nop
          }
          break;
 8007570:	e0aa      	b.n	80076c8 <USBD_StdEPReq+0x2a4>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007578:	2b02      	cmp	r3, #2
 800757a:	d002      	beq.n	8007582 <USBD_StdEPReq+0x15e>
 800757c:	2b03      	cmp	r3, #3
 800757e:	d032      	beq.n	80075e6 <USBD_StdEPReq+0x1c2>
 8007580:	e097      	b.n	80076b2 <USBD_StdEPReq+0x28e>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007582:	7bbb      	ldrb	r3, [r7, #14]
 8007584:	2b00      	cmp	r3, #0
 8007586:	d007      	beq.n	8007598 <USBD_StdEPReq+0x174>
 8007588:	7bbb      	ldrb	r3, [r7, #14]
 800758a:	2b80      	cmp	r3, #128	; 0x80
 800758c:	d004      	beq.n	8007598 <USBD_StdEPReq+0x174>
              {
                USBD_CtlError(pdev, req);
 800758e:	6839      	ldr	r1, [r7, #0]
 8007590:	6878      	ldr	r0, [r7, #4]
 8007592:	f000 fbb5 	bl	8007d00 <USBD_CtlError>
                break;
 8007596:	e091      	b.n	80076bc <USBD_StdEPReq+0x298>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007598:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800759c:	2b00      	cmp	r3, #0
 800759e:	da0b      	bge.n	80075b8 <USBD_StdEPReq+0x194>
 80075a0:	7bbb      	ldrb	r3, [r7, #14]
 80075a2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80075a6:	4613      	mov	r3, r2
 80075a8:	009b      	lsls	r3, r3, #2
 80075aa:	4413      	add	r3, r2
 80075ac:	009b      	lsls	r3, r3, #2
 80075ae:	3310      	adds	r3, #16
 80075b0:	687a      	ldr	r2, [r7, #4]
 80075b2:	4413      	add	r3, r2
 80075b4:	3304      	adds	r3, #4
 80075b6:	e00b      	b.n	80075d0 <USBD_StdEPReq+0x1ac>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80075b8:	7bbb      	ldrb	r3, [r7, #14]
 80075ba:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80075be:	4613      	mov	r3, r2
 80075c0:	009b      	lsls	r3, r3, #2
 80075c2:	4413      	add	r3, r2
 80075c4:	009b      	lsls	r3, r3, #2
 80075c6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80075ca:	687a      	ldr	r2, [r7, #4]
 80075cc:	4413      	add	r3, r2
 80075ce:	3304      	adds	r3, #4
 80075d0:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80075d2:	68bb      	ldr	r3, [r7, #8]
 80075d4:	2200      	movs	r2, #0
 80075d6:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80075d8:	68bb      	ldr	r3, [r7, #8]
 80075da:	2202      	movs	r2, #2
 80075dc:	4619      	mov	r1, r3
 80075de:	6878      	ldr	r0, [r7, #4]
 80075e0:	f000 fbf8 	bl	8007dd4 <USBD_CtlSendData>
              break;
 80075e4:	e06a      	b.n	80076bc <USBD_StdEPReq+0x298>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80075e6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	da11      	bge.n	8007612 <USBD_StdEPReq+0x1ee>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80075ee:	7bbb      	ldrb	r3, [r7, #14]
 80075f0:	f003 020f 	and.w	r2, r3, #15
 80075f4:	6879      	ldr	r1, [r7, #4]
 80075f6:	4613      	mov	r3, r2
 80075f8:	009b      	lsls	r3, r3, #2
 80075fa:	4413      	add	r3, r2
 80075fc:	009b      	lsls	r3, r3, #2
 80075fe:	440b      	add	r3, r1
 8007600:	3318      	adds	r3, #24
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	2b00      	cmp	r3, #0
 8007606:	d117      	bne.n	8007638 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 8007608:	6839      	ldr	r1, [r7, #0]
 800760a:	6878      	ldr	r0, [r7, #4]
 800760c:	f000 fb78 	bl	8007d00 <USBD_CtlError>
                  break;
 8007610:	e054      	b.n	80076bc <USBD_StdEPReq+0x298>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007612:	7bbb      	ldrb	r3, [r7, #14]
 8007614:	f003 020f 	and.w	r2, r3, #15
 8007618:	6879      	ldr	r1, [r7, #4]
 800761a:	4613      	mov	r3, r2
 800761c:	009b      	lsls	r3, r3, #2
 800761e:	4413      	add	r3, r2
 8007620:	009b      	lsls	r3, r3, #2
 8007622:	440b      	add	r3, r1
 8007624:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	2b00      	cmp	r3, #0
 800762c:	d104      	bne.n	8007638 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 800762e:	6839      	ldr	r1, [r7, #0]
 8007630:	6878      	ldr	r0, [r7, #4]
 8007632:	f000 fb65 	bl	8007d00 <USBD_CtlError>
                  break;
 8007636:	e041      	b.n	80076bc <USBD_StdEPReq+0x298>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007638:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800763c:	2b00      	cmp	r3, #0
 800763e:	da0b      	bge.n	8007658 <USBD_StdEPReq+0x234>
 8007640:	7bbb      	ldrb	r3, [r7, #14]
 8007642:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007646:	4613      	mov	r3, r2
 8007648:	009b      	lsls	r3, r3, #2
 800764a:	4413      	add	r3, r2
 800764c:	009b      	lsls	r3, r3, #2
 800764e:	3310      	adds	r3, #16
 8007650:	687a      	ldr	r2, [r7, #4]
 8007652:	4413      	add	r3, r2
 8007654:	3304      	adds	r3, #4
 8007656:	e00b      	b.n	8007670 <USBD_StdEPReq+0x24c>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007658:	7bbb      	ldrb	r3, [r7, #14]
 800765a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800765e:	4613      	mov	r3, r2
 8007660:	009b      	lsls	r3, r3, #2
 8007662:	4413      	add	r3, r2
 8007664:	009b      	lsls	r3, r3, #2
 8007666:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800766a:	687a      	ldr	r2, [r7, #4]
 800766c:	4413      	add	r3, r2
 800766e:	3304      	adds	r3, #4
 8007670:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007672:	7bbb      	ldrb	r3, [r7, #14]
 8007674:	2b00      	cmp	r3, #0
 8007676:	d002      	beq.n	800767e <USBD_StdEPReq+0x25a>
 8007678:	7bbb      	ldrb	r3, [r7, #14]
 800767a:	2b80      	cmp	r3, #128	; 0x80
 800767c:	d103      	bne.n	8007686 <USBD_StdEPReq+0x262>
              {
                pep->status = 0x0000U;
 800767e:	68bb      	ldr	r3, [r7, #8]
 8007680:	2200      	movs	r2, #0
 8007682:	601a      	str	r2, [r3, #0]
 8007684:	e00e      	b.n	80076a4 <USBD_StdEPReq+0x280>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8007686:	7bbb      	ldrb	r3, [r7, #14]
 8007688:	4619      	mov	r1, r3
 800768a:	6878      	ldr	r0, [r7, #4]
 800768c:	f000 ffde 	bl	800864c <USBD_LL_IsStallEP>
 8007690:	4603      	mov	r3, r0
 8007692:	2b00      	cmp	r3, #0
 8007694:	d003      	beq.n	800769e <USBD_StdEPReq+0x27a>
              {
                pep->status = 0x0001U;
 8007696:	68bb      	ldr	r3, [r7, #8]
 8007698:	2201      	movs	r2, #1
 800769a:	601a      	str	r2, [r3, #0]
 800769c:	e002      	b.n	80076a4 <USBD_StdEPReq+0x280>
              }
              else
              {
                pep->status = 0x0000U;
 800769e:	68bb      	ldr	r3, [r7, #8]
 80076a0:	2200      	movs	r2, #0
 80076a2:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80076a4:	68bb      	ldr	r3, [r7, #8]
 80076a6:	2202      	movs	r2, #2
 80076a8:	4619      	mov	r1, r3
 80076aa:	6878      	ldr	r0, [r7, #4]
 80076ac:	f000 fb92 	bl	8007dd4 <USBD_CtlSendData>
              break;
 80076b0:	e004      	b.n	80076bc <USBD_StdEPReq+0x298>

            default:
              USBD_CtlError(pdev, req);
 80076b2:	6839      	ldr	r1, [r7, #0]
 80076b4:	6878      	ldr	r0, [r7, #4]
 80076b6:	f000 fb23 	bl	8007d00 <USBD_CtlError>
              break;
 80076ba:	bf00      	nop
          }
          break;
 80076bc:	e004      	b.n	80076c8 <USBD_StdEPReq+0x2a4>

        default:
          USBD_CtlError(pdev, req);
 80076be:	6839      	ldr	r1, [r7, #0]
 80076c0:	6878      	ldr	r0, [r7, #4]
 80076c2:	f000 fb1d 	bl	8007d00 <USBD_CtlError>
          break;
 80076c6:	bf00      	nop
      }
      break;
 80076c8:	e004      	b.n	80076d4 <USBD_StdEPReq+0x2b0>

    default:
      USBD_CtlError(pdev, req);
 80076ca:	6839      	ldr	r1, [r7, #0]
 80076cc:	6878      	ldr	r0, [r7, #4]
 80076ce:	f000 fb17 	bl	8007d00 <USBD_CtlError>
      break;
 80076d2:	bf00      	nop
  }

  return ret;
 80076d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80076d6:	4618      	mov	r0, r3
 80076d8:	3710      	adds	r7, #16
 80076da:	46bd      	mov	sp, r7
 80076dc:	bd80      	pop	{r7, pc}
	...

080076e0 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80076e0:	b580      	push	{r7, lr}
 80076e2:	b084      	sub	sp, #16
 80076e4:	af00      	add	r7, sp, #0
 80076e6:	6078      	str	r0, [r7, #4]
 80076e8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80076ea:	2300      	movs	r3, #0
 80076ec:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80076ee:	2300      	movs	r3, #0
 80076f0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80076f2:	2300      	movs	r3, #0
 80076f4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80076f6:	683b      	ldr	r3, [r7, #0]
 80076f8:	885b      	ldrh	r3, [r3, #2]
 80076fa:	0a1b      	lsrs	r3, r3, #8
 80076fc:	b29b      	uxth	r3, r3
 80076fe:	3b01      	subs	r3, #1
 8007700:	2b06      	cmp	r3, #6
 8007702:	f200 8128 	bhi.w	8007956 <USBD_GetDescriptor+0x276>
 8007706:	a201      	add	r2, pc, #4	; (adr r2, 800770c <USBD_GetDescriptor+0x2c>)
 8007708:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800770c:	08007729 	.word	0x08007729
 8007710:	08007741 	.word	0x08007741
 8007714:	08007781 	.word	0x08007781
 8007718:	08007957 	.word	0x08007957
 800771c:	08007957 	.word	0x08007957
 8007720:	080078f7 	.word	0x080078f7
 8007724:	08007923 	.word	0x08007923
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	687a      	ldr	r2, [r7, #4]
 8007732:	7c12      	ldrb	r2, [r2, #16]
 8007734:	f107 0108 	add.w	r1, r7, #8
 8007738:	4610      	mov	r0, r2
 800773a:	4798      	blx	r3
 800773c:	60f8      	str	r0, [r7, #12]
      break;
 800773e:	e112      	b.n	8007966 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	7c1b      	ldrb	r3, [r3, #16]
 8007744:	2b00      	cmp	r3, #0
 8007746:	d10d      	bne.n	8007764 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800774e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007750:	f107 0208 	add.w	r2, r7, #8
 8007754:	4610      	mov	r0, r2
 8007756:	4798      	blx	r3
 8007758:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	3301      	adds	r3, #1
 800775e:	2202      	movs	r2, #2
 8007760:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007762:	e100      	b.n	8007966 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800776a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800776c:	f107 0208 	add.w	r2, r7, #8
 8007770:	4610      	mov	r0, r2
 8007772:	4798      	blx	r3
 8007774:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	3301      	adds	r3, #1
 800777a:	2202      	movs	r2, #2
 800777c:	701a      	strb	r2, [r3, #0]
      break;
 800777e:	e0f2      	b.n	8007966 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007780:	683b      	ldr	r3, [r7, #0]
 8007782:	885b      	ldrh	r3, [r3, #2]
 8007784:	b2db      	uxtb	r3, r3
 8007786:	2b05      	cmp	r3, #5
 8007788:	f200 80ac 	bhi.w	80078e4 <USBD_GetDescriptor+0x204>
 800778c:	a201      	add	r2, pc, #4	; (adr r2, 8007794 <USBD_GetDescriptor+0xb4>)
 800778e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007792:	bf00      	nop
 8007794:	080077ad 	.word	0x080077ad
 8007798:	080077e1 	.word	0x080077e1
 800779c:	08007815 	.word	0x08007815
 80077a0:	08007849 	.word	0x08007849
 80077a4:	0800787d 	.word	0x0800787d
 80077a8:	080078b1 	.word	0x080078b1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80077b2:	685b      	ldr	r3, [r3, #4]
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d00b      	beq.n	80077d0 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80077be:	685b      	ldr	r3, [r3, #4]
 80077c0:	687a      	ldr	r2, [r7, #4]
 80077c2:	7c12      	ldrb	r2, [r2, #16]
 80077c4:	f107 0108 	add.w	r1, r7, #8
 80077c8:	4610      	mov	r0, r2
 80077ca:	4798      	blx	r3
 80077cc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80077ce:	e091      	b.n	80078f4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80077d0:	6839      	ldr	r1, [r7, #0]
 80077d2:	6878      	ldr	r0, [r7, #4]
 80077d4:	f000 fa94 	bl	8007d00 <USBD_CtlError>
            err++;
 80077d8:	7afb      	ldrb	r3, [r7, #11]
 80077da:	3301      	adds	r3, #1
 80077dc:	72fb      	strb	r3, [r7, #11]
          break;
 80077de:	e089      	b.n	80078f4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80077e6:	689b      	ldr	r3, [r3, #8]
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d00b      	beq.n	8007804 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80077f2:	689b      	ldr	r3, [r3, #8]
 80077f4:	687a      	ldr	r2, [r7, #4]
 80077f6:	7c12      	ldrb	r2, [r2, #16]
 80077f8:	f107 0108 	add.w	r1, r7, #8
 80077fc:	4610      	mov	r0, r2
 80077fe:	4798      	blx	r3
 8007800:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007802:	e077      	b.n	80078f4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007804:	6839      	ldr	r1, [r7, #0]
 8007806:	6878      	ldr	r0, [r7, #4]
 8007808:	f000 fa7a 	bl	8007d00 <USBD_CtlError>
            err++;
 800780c:	7afb      	ldrb	r3, [r7, #11]
 800780e:	3301      	adds	r3, #1
 8007810:	72fb      	strb	r3, [r7, #11]
          break;
 8007812:	e06f      	b.n	80078f4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800781a:	68db      	ldr	r3, [r3, #12]
 800781c:	2b00      	cmp	r3, #0
 800781e:	d00b      	beq.n	8007838 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007826:	68db      	ldr	r3, [r3, #12]
 8007828:	687a      	ldr	r2, [r7, #4]
 800782a:	7c12      	ldrb	r2, [r2, #16]
 800782c:	f107 0108 	add.w	r1, r7, #8
 8007830:	4610      	mov	r0, r2
 8007832:	4798      	blx	r3
 8007834:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007836:	e05d      	b.n	80078f4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007838:	6839      	ldr	r1, [r7, #0]
 800783a:	6878      	ldr	r0, [r7, #4]
 800783c:	f000 fa60 	bl	8007d00 <USBD_CtlError>
            err++;
 8007840:	7afb      	ldrb	r3, [r7, #11]
 8007842:	3301      	adds	r3, #1
 8007844:	72fb      	strb	r3, [r7, #11]
          break;
 8007846:	e055      	b.n	80078f4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800784e:	691b      	ldr	r3, [r3, #16]
 8007850:	2b00      	cmp	r3, #0
 8007852:	d00b      	beq.n	800786c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800785a:	691b      	ldr	r3, [r3, #16]
 800785c:	687a      	ldr	r2, [r7, #4]
 800785e:	7c12      	ldrb	r2, [r2, #16]
 8007860:	f107 0108 	add.w	r1, r7, #8
 8007864:	4610      	mov	r0, r2
 8007866:	4798      	blx	r3
 8007868:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800786a:	e043      	b.n	80078f4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800786c:	6839      	ldr	r1, [r7, #0]
 800786e:	6878      	ldr	r0, [r7, #4]
 8007870:	f000 fa46 	bl	8007d00 <USBD_CtlError>
            err++;
 8007874:	7afb      	ldrb	r3, [r7, #11]
 8007876:	3301      	adds	r3, #1
 8007878:	72fb      	strb	r3, [r7, #11]
          break;
 800787a:	e03b      	b.n	80078f4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007882:	695b      	ldr	r3, [r3, #20]
 8007884:	2b00      	cmp	r3, #0
 8007886:	d00b      	beq.n	80078a0 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800788e:	695b      	ldr	r3, [r3, #20]
 8007890:	687a      	ldr	r2, [r7, #4]
 8007892:	7c12      	ldrb	r2, [r2, #16]
 8007894:	f107 0108 	add.w	r1, r7, #8
 8007898:	4610      	mov	r0, r2
 800789a:	4798      	blx	r3
 800789c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800789e:	e029      	b.n	80078f4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80078a0:	6839      	ldr	r1, [r7, #0]
 80078a2:	6878      	ldr	r0, [r7, #4]
 80078a4:	f000 fa2c 	bl	8007d00 <USBD_CtlError>
            err++;
 80078a8:	7afb      	ldrb	r3, [r7, #11]
 80078aa:	3301      	adds	r3, #1
 80078ac:	72fb      	strb	r3, [r7, #11]
          break;
 80078ae:	e021      	b.n	80078f4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80078b6:	699b      	ldr	r3, [r3, #24]
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d00b      	beq.n	80078d4 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80078c2:	699b      	ldr	r3, [r3, #24]
 80078c4:	687a      	ldr	r2, [r7, #4]
 80078c6:	7c12      	ldrb	r2, [r2, #16]
 80078c8:	f107 0108 	add.w	r1, r7, #8
 80078cc:	4610      	mov	r0, r2
 80078ce:	4798      	blx	r3
 80078d0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80078d2:	e00f      	b.n	80078f4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80078d4:	6839      	ldr	r1, [r7, #0]
 80078d6:	6878      	ldr	r0, [r7, #4]
 80078d8:	f000 fa12 	bl	8007d00 <USBD_CtlError>
            err++;
 80078dc:	7afb      	ldrb	r3, [r7, #11]
 80078de:	3301      	adds	r3, #1
 80078e0:	72fb      	strb	r3, [r7, #11]
          break;
 80078e2:	e007      	b.n	80078f4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 80078e4:	6839      	ldr	r1, [r7, #0]
 80078e6:	6878      	ldr	r0, [r7, #4]
 80078e8:	f000 fa0a 	bl	8007d00 <USBD_CtlError>
          err++;
 80078ec:	7afb      	ldrb	r3, [r7, #11]
 80078ee:	3301      	adds	r3, #1
 80078f0:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 80078f2:	e038      	b.n	8007966 <USBD_GetDescriptor+0x286>
 80078f4:	e037      	b.n	8007966 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	7c1b      	ldrb	r3, [r3, #16]
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d109      	bne.n	8007912 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007904:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007906:	f107 0208 	add.w	r2, r7, #8
 800790a:	4610      	mov	r0, r2
 800790c:	4798      	blx	r3
 800790e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007910:	e029      	b.n	8007966 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007912:	6839      	ldr	r1, [r7, #0]
 8007914:	6878      	ldr	r0, [r7, #4]
 8007916:	f000 f9f3 	bl	8007d00 <USBD_CtlError>
        err++;
 800791a:	7afb      	ldrb	r3, [r7, #11]
 800791c:	3301      	adds	r3, #1
 800791e:	72fb      	strb	r3, [r7, #11]
      break;
 8007920:	e021      	b.n	8007966 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	7c1b      	ldrb	r3, [r3, #16]
 8007926:	2b00      	cmp	r3, #0
 8007928:	d10d      	bne.n	8007946 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007932:	f107 0208 	add.w	r2, r7, #8
 8007936:	4610      	mov	r0, r2
 8007938:	4798      	blx	r3
 800793a:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	3301      	adds	r3, #1
 8007940:	2207      	movs	r2, #7
 8007942:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007944:	e00f      	b.n	8007966 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007946:	6839      	ldr	r1, [r7, #0]
 8007948:	6878      	ldr	r0, [r7, #4]
 800794a:	f000 f9d9 	bl	8007d00 <USBD_CtlError>
        err++;
 800794e:	7afb      	ldrb	r3, [r7, #11]
 8007950:	3301      	adds	r3, #1
 8007952:	72fb      	strb	r3, [r7, #11]
      break;
 8007954:	e007      	b.n	8007966 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8007956:	6839      	ldr	r1, [r7, #0]
 8007958:	6878      	ldr	r0, [r7, #4]
 800795a:	f000 f9d1 	bl	8007d00 <USBD_CtlError>
      err++;
 800795e:	7afb      	ldrb	r3, [r7, #11]
 8007960:	3301      	adds	r3, #1
 8007962:	72fb      	strb	r3, [r7, #11]
      break;
 8007964:	bf00      	nop
  }

  if (err != 0U)
 8007966:	7afb      	ldrb	r3, [r7, #11]
 8007968:	2b00      	cmp	r3, #0
 800796a:	d11c      	bne.n	80079a6 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800796c:	893b      	ldrh	r3, [r7, #8]
 800796e:	2b00      	cmp	r3, #0
 8007970:	d011      	beq.n	8007996 <USBD_GetDescriptor+0x2b6>
 8007972:	683b      	ldr	r3, [r7, #0]
 8007974:	88db      	ldrh	r3, [r3, #6]
 8007976:	2b00      	cmp	r3, #0
 8007978:	d00d      	beq.n	8007996 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800797a:	683b      	ldr	r3, [r7, #0]
 800797c:	88da      	ldrh	r2, [r3, #6]
 800797e:	893b      	ldrh	r3, [r7, #8]
 8007980:	4293      	cmp	r3, r2
 8007982:	bf28      	it	cs
 8007984:	4613      	movcs	r3, r2
 8007986:	b29b      	uxth	r3, r3
 8007988:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800798a:	893b      	ldrh	r3, [r7, #8]
 800798c:	461a      	mov	r2, r3
 800798e:	68f9      	ldr	r1, [r7, #12]
 8007990:	6878      	ldr	r0, [r7, #4]
 8007992:	f000 fa1f 	bl	8007dd4 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8007996:	683b      	ldr	r3, [r7, #0]
 8007998:	88db      	ldrh	r3, [r3, #6]
 800799a:	2b00      	cmp	r3, #0
 800799c:	d104      	bne.n	80079a8 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800799e:	6878      	ldr	r0, [r7, #4]
 80079a0:	f000 fa76 	bl	8007e90 <USBD_CtlSendStatus>
 80079a4:	e000      	b.n	80079a8 <USBD_GetDescriptor+0x2c8>
    return;
 80079a6:	bf00      	nop
    }
  }
}
 80079a8:	3710      	adds	r7, #16
 80079aa:	46bd      	mov	sp, r7
 80079ac:	bd80      	pop	{r7, pc}
 80079ae:	bf00      	nop

080079b0 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80079b0:	b580      	push	{r7, lr}
 80079b2:	b084      	sub	sp, #16
 80079b4:	af00      	add	r7, sp, #0
 80079b6:	6078      	str	r0, [r7, #4]
 80079b8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80079ba:	683b      	ldr	r3, [r7, #0]
 80079bc:	889b      	ldrh	r3, [r3, #4]
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d130      	bne.n	8007a24 <USBD_SetAddress+0x74>
 80079c2:	683b      	ldr	r3, [r7, #0]
 80079c4:	88db      	ldrh	r3, [r3, #6]
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d12c      	bne.n	8007a24 <USBD_SetAddress+0x74>
 80079ca:	683b      	ldr	r3, [r7, #0]
 80079cc:	885b      	ldrh	r3, [r3, #2]
 80079ce:	2b7f      	cmp	r3, #127	; 0x7f
 80079d0:	d828      	bhi.n	8007a24 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80079d2:	683b      	ldr	r3, [r7, #0]
 80079d4:	885b      	ldrh	r3, [r3, #2]
 80079d6:	b2db      	uxtb	r3, r3
 80079d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80079dc:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80079e4:	2b03      	cmp	r3, #3
 80079e6:	d104      	bne.n	80079f2 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 80079e8:	6839      	ldr	r1, [r7, #0]
 80079ea:	6878      	ldr	r0, [r7, #4]
 80079ec:	f000 f988 	bl	8007d00 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80079f0:	e01c      	b.n	8007a2c <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	7bfa      	ldrb	r2, [r7, #15]
 80079f6:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 80079fa:	7bfb      	ldrb	r3, [r7, #15]
 80079fc:	4619      	mov	r1, r3
 80079fe:	6878      	ldr	r0, [r7, #4]
 8007a00:	f000 fe50 	bl	80086a4 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8007a04:	6878      	ldr	r0, [r7, #4]
 8007a06:	f000 fa43 	bl	8007e90 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007a0a:	7bfb      	ldrb	r3, [r7, #15]
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d004      	beq.n	8007a1a <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	2202      	movs	r2, #2
 8007a14:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007a18:	e008      	b.n	8007a2c <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	2201      	movs	r2, #1
 8007a1e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007a22:	e003      	b.n	8007a2c <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007a24:	6839      	ldr	r1, [r7, #0]
 8007a26:	6878      	ldr	r0, [r7, #4]
 8007a28:	f000 f96a 	bl	8007d00 <USBD_CtlError>
  }
}
 8007a2c:	bf00      	nop
 8007a2e:	3710      	adds	r7, #16
 8007a30:	46bd      	mov	sp, r7
 8007a32:	bd80      	pop	{r7, pc}

08007a34 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007a34:	b580      	push	{r7, lr}
 8007a36:	b082      	sub	sp, #8
 8007a38:	af00      	add	r7, sp, #0
 8007a3a:	6078      	str	r0, [r7, #4]
 8007a3c:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007a3e:	683b      	ldr	r3, [r7, #0]
 8007a40:	885b      	ldrh	r3, [r3, #2]
 8007a42:	b2da      	uxtb	r2, r3
 8007a44:	4b41      	ldr	r3, [pc, #260]	; (8007b4c <USBD_SetConfig+0x118>)
 8007a46:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007a48:	4b40      	ldr	r3, [pc, #256]	; (8007b4c <USBD_SetConfig+0x118>)
 8007a4a:	781b      	ldrb	r3, [r3, #0]
 8007a4c:	2b01      	cmp	r3, #1
 8007a4e:	d904      	bls.n	8007a5a <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8007a50:	6839      	ldr	r1, [r7, #0]
 8007a52:	6878      	ldr	r0, [r7, #4]
 8007a54:	f000 f954 	bl	8007d00 <USBD_CtlError>
 8007a58:	e075      	b.n	8007b46 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a60:	2b02      	cmp	r3, #2
 8007a62:	d002      	beq.n	8007a6a <USBD_SetConfig+0x36>
 8007a64:	2b03      	cmp	r3, #3
 8007a66:	d023      	beq.n	8007ab0 <USBD_SetConfig+0x7c>
 8007a68:	e062      	b.n	8007b30 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8007a6a:	4b38      	ldr	r3, [pc, #224]	; (8007b4c <USBD_SetConfig+0x118>)
 8007a6c:	781b      	ldrb	r3, [r3, #0]
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d01a      	beq.n	8007aa8 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8007a72:	4b36      	ldr	r3, [pc, #216]	; (8007b4c <USBD_SetConfig+0x118>)
 8007a74:	781b      	ldrb	r3, [r3, #0]
 8007a76:	461a      	mov	r2, r3
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	2203      	movs	r2, #3
 8007a80:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007a84:	4b31      	ldr	r3, [pc, #196]	; (8007b4c <USBD_SetConfig+0x118>)
 8007a86:	781b      	ldrb	r3, [r3, #0]
 8007a88:	4619      	mov	r1, r3
 8007a8a:	6878      	ldr	r0, [r7, #4]
 8007a8c:	f7ff f9f3 	bl	8006e76 <USBD_SetClassConfig>
 8007a90:	4603      	mov	r3, r0
 8007a92:	2b02      	cmp	r3, #2
 8007a94:	d104      	bne.n	8007aa0 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8007a96:	6839      	ldr	r1, [r7, #0]
 8007a98:	6878      	ldr	r0, [r7, #4]
 8007a9a:	f000 f931 	bl	8007d00 <USBD_CtlError>
            return;
 8007a9e:	e052      	b.n	8007b46 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8007aa0:	6878      	ldr	r0, [r7, #4]
 8007aa2:	f000 f9f5 	bl	8007e90 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8007aa6:	e04e      	b.n	8007b46 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007aa8:	6878      	ldr	r0, [r7, #4]
 8007aaa:	f000 f9f1 	bl	8007e90 <USBD_CtlSendStatus>
        break;
 8007aae:	e04a      	b.n	8007b46 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8007ab0:	4b26      	ldr	r3, [pc, #152]	; (8007b4c <USBD_SetConfig+0x118>)
 8007ab2:	781b      	ldrb	r3, [r3, #0]
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d112      	bne.n	8007ade <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	2202      	movs	r2, #2
 8007abc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8007ac0:	4b22      	ldr	r3, [pc, #136]	; (8007b4c <USBD_SetConfig+0x118>)
 8007ac2:	781b      	ldrb	r3, [r3, #0]
 8007ac4:	461a      	mov	r2, r3
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8007aca:	4b20      	ldr	r3, [pc, #128]	; (8007b4c <USBD_SetConfig+0x118>)
 8007acc:	781b      	ldrb	r3, [r3, #0]
 8007ace:	4619      	mov	r1, r3
 8007ad0:	6878      	ldr	r0, [r7, #4]
 8007ad2:	f7ff f9ef 	bl	8006eb4 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8007ad6:	6878      	ldr	r0, [r7, #4]
 8007ad8:	f000 f9da 	bl	8007e90 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8007adc:	e033      	b.n	8007b46 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8007ade:	4b1b      	ldr	r3, [pc, #108]	; (8007b4c <USBD_SetConfig+0x118>)
 8007ae0:	781b      	ldrb	r3, [r3, #0]
 8007ae2:	461a      	mov	r2, r3
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	685b      	ldr	r3, [r3, #4]
 8007ae8:	429a      	cmp	r2, r3
 8007aea:	d01d      	beq.n	8007b28 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	685b      	ldr	r3, [r3, #4]
 8007af0:	b2db      	uxtb	r3, r3
 8007af2:	4619      	mov	r1, r3
 8007af4:	6878      	ldr	r0, [r7, #4]
 8007af6:	f7ff f9dd 	bl	8006eb4 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8007afa:	4b14      	ldr	r3, [pc, #80]	; (8007b4c <USBD_SetConfig+0x118>)
 8007afc:	781b      	ldrb	r3, [r3, #0]
 8007afe:	461a      	mov	r2, r3
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007b04:	4b11      	ldr	r3, [pc, #68]	; (8007b4c <USBD_SetConfig+0x118>)
 8007b06:	781b      	ldrb	r3, [r3, #0]
 8007b08:	4619      	mov	r1, r3
 8007b0a:	6878      	ldr	r0, [r7, #4]
 8007b0c:	f7ff f9b3 	bl	8006e76 <USBD_SetClassConfig>
 8007b10:	4603      	mov	r3, r0
 8007b12:	2b02      	cmp	r3, #2
 8007b14:	d104      	bne.n	8007b20 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8007b16:	6839      	ldr	r1, [r7, #0]
 8007b18:	6878      	ldr	r0, [r7, #4]
 8007b1a:	f000 f8f1 	bl	8007d00 <USBD_CtlError>
            return;
 8007b1e:	e012      	b.n	8007b46 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007b20:	6878      	ldr	r0, [r7, #4]
 8007b22:	f000 f9b5 	bl	8007e90 <USBD_CtlSendStatus>
        break;
 8007b26:	e00e      	b.n	8007b46 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007b28:	6878      	ldr	r0, [r7, #4]
 8007b2a:	f000 f9b1 	bl	8007e90 <USBD_CtlSendStatus>
        break;
 8007b2e:	e00a      	b.n	8007b46 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8007b30:	6839      	ldr	r1, [r7, #0]
 8007b32:	6878      	ldr	r0, [r7, #4]
 8007b34:	f000 f8e4 	bl	8007d00 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8007b38:	4b04      	ldr	r3, [pc, #16]	; (8007b4c <USBD_SetConfig+0x118>)
 8007b3a:	781b      	ldrb	r3, [r3, #0]
 8007b3c:	4619      	mov	r1, r3
 8007b3e:	6878      	ldr	r0, [r7, #4]
 8007b40:	f7ff f9b8 	bl	8006eb4 <USBD_ClrClassConfig>
        break;
 8007b44:	bf00      	nop
    }
  }
}
 8007b46:	3708      	adds	r7, #8
 8007b48:	46bd      	mov	sp, r7
 8007b4a:	bd80      	pop	{r7, pc}
 8007b4c:	2000037a 	.word	0x2000037a

08007b50 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007b50:	b580      	push	{r7, lr}
 8007b52:	b082      	sub	sp, #8
 8007b54:	af00      	add	r7, sp, #0
 8007b56:	6078      	str	r0, [r7, #4]
 8007b58:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007b5a:	683b      	ldr	r3, [r7, #0]
 8007b5c:	88db      	ldrh	r3, [r3, #6]
 8007b5e:	2b01      	cmp	r3, #1
 8007b60:	d004      	beq.n	8007b6c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007b62:	6839      	ldr	r1, [r7, #0]
 8007b64:	6878      	ldr	r0, [r7, #4]
 8007b66:	f000 f8cb 	bl	8007d00 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007b6a:	e021      	b.n	8007bb0 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b72:	2b01      	cmp	r3, #1
 8007b74:	db17      	blt.n	8007ba6 <USBD_GetConfig+0x56>
 8007b76:	2b02      	cmp	r3, #2
 8007b78:	dd02      	ble.n	8007b80 <USBD_GetConfig+0x30>
 8007b7a:	2b03      	cmp	r3, #3
 8007b7c:	d00b      	beq.n	8007b96 <USBD_GetConfig+0x46>
 8007b7e:	e012      	b.n	8007ba6 <USBD_GetConfig+0x56>
        pdev->dev_default_config = 0U;
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	2200      	movs	r2, #0
 8007b84:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	3308      	adds	r3, #8
 8007b8a:	2201      	movs	r2, #1
 8007b8c:	4619      	mov	r1, r3
 8007b8e:	6878      	ldr	r0, [r7, #4]
 8007b90:	f000 f920 	bl	8007dd4 <USBD_CtlSendData>
        break;
 8007b94:	e00c      	b.n	8007bb0 <USBD_GetConfig+0x60>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	3304      	adds	r3, #4
 8007b9a:	2201      	movs	r2, #1
 8007b9c:	4619      	mov	r1, r3
 8007b9e:	6878      	ldr	r0, [r7, #4]
 8007ba0:	f000 f918 	bl	8007dd4 <USBD_CtlSendData>
        break;
 8007ba4:	e004      	b.n	8007bb0 <USBD_GetConfig+0x60>
        USBD_CtlError(pdev, req);
 8007ba6:	6839      	ldr	r1, [r7, #0]
 8007ba8:	6878      	ldr	r0, [r7, #4]
 8007baa:	f000 f8a9 	bl	8007d00 <USBD_CtlError>
        break;
 8007bae:	bf00      	nop
}
 8007bb0:	bf00      	nop
 8007bb2:	3708      	adds	r7, #8
 8007bb4:	46bd      	mov	sp, r7
 8007bb6:	bd80      	pop	{r7, pc}

08007bb8 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007bb8:	b580      	push	{r7, lr}
 8007bba:	b082      	sub	sp, #8
 8007bbc:	af00      	add	r7, sp, #0
 8007bbe:	6078      	str	r0, [r7, #4]
 8007bc0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007bc8:	3b01      	subs	r3, #1
 8007bca:	2b02      	cmp	r3, #2
 8007bcc:	d81e      	bhi.n	8007c0c <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007bce:	683b      	ldr	r3, [r7, #0]
 8007bd0:	88db      	ldrh	r3, [r3, #6]
 8007bd2:	2b02      	cmp	r3, #2
 8007bd4:	d004      	beq.n	8007be0 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8007bd6:	6839      	ldr	r1, [r7, #0]
 8007bd8:	6878      	ldr	r0, [r7, #4]
 8007bda:	f000 f891 	bl	8007d00 <USBD_CtlError>
        break;
 8007bde:	e01a      	b.n	8007c16 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	2201      	movs	r2, #1
 8007be4:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d005      	beq.n	8007bfc <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	68db      	ldr	r3, [r3, #12]
 8007bf4:	f043 0202 	orr.w	r2, r3, #2
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	330c      	adds	r3, #12
 8007c00:	2202      	movs	r2, #2
 8007c02:	4619      	mov	r1, r3
 8007c04:	6878      	ldr	r0, [r7, #4]
 8007c06:	f000 f8e5 	bl	8007dd4 <USBD_CtlSendData>
      break;
 8007c0a:	e004      	b.n	8007c16 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8007c0c:	6839      	ldr	r1, [r7, #0]
 8007c0e:	6878      	ldr	r0, [r7, #4]
 8007c10:	f000 f876 	bl	8007d00 <USBD_CtlError>
      break;
 8007c14:	bf00      	nop
  }
}
 8007c16:	bf00      	nop
 8007c18:	3708      	adds	r7, #8
 8007c1a:	46bd      	mov	sp, r7
 8007c1c:	bd80      	pop	{r7, pc}

08007c1e <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007c1e:	b580      	push	{r7, lr}
 8007c20:	b082      	sub	sp, #8
 8007c22:	af00      	add	r7, sp, #0
 8007c24:	6078      	str	r0, [r7, #4]
 8007c26:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007c28:	683b      	ldr	r3, [r7, #0]
 8007c2a:	885b      	ldrh	r3, [r3, #2]
 8007c2c:	2b01      	cmp	r3, #1
 8007c2e:	d106      	bne.n	8007c3e <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	2201      	movs	r2, #1
 8007c34:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8007c38:	6878      	ldr	r0, [r7, #4]
 8007c3a:	f000 f929 	bl	8007e90 <USBD_CtlSendStatus>
  }
}
 8007c3e:	bf00      	nop
 8007c40:	3708      	adds	r7, #8
 8007c42:	46bd      	mov	sp, r7
 8007c44:	bd80      	pop	{r7, pc}

08007c46 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007c46:	b580      	push	{r7, lr}
 8007c48:	b082      	sub	sp, #8
 8007c4a:	af00      	add	r7, sp, #0
 8007c4c:	6078      	str	r0, [r7, #4]
 8007c4e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007c56:	3b01      	subs	r3, #1
 8007c58:	2b02      	cmp	r3, #2
 8007c5a:	d80b      	bhi.n	8007c74 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007c5c:	683b      	ldr	r3, [r7, #0]
 8007c5e:	885b      	ldrh	r3, [r3, #2]
 8007c60:	2b01      	cmp	r3, #1
 8007c62:	d10c      	bne.n	8007c7e <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	2200      	movs	r2, #0
 8007c68:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8007c6c:	6878      	ldr	r0, [r7, #4]
 8007c6e:	f000 f90f 	bl	8007e90 <USBD_CtlSendStatus>
      }
      break;
 8007c72:	e004      	b.n	8007c7e <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8007c74:	6839      	ldr	r1, [r7, #0]
 8007c76:	6878      	ldr	r0, [r7, #4]
 8007c78:	f000 f842 	bl	8007d00 <USBD_CtlError>
      break;
 8007c7c:	e000      	b.n	8007c80 <USBD_ClrFeature+0x3a>
      break;
 8007c7e:	bf00      	nop
  }
}
 8007c80:	bf00      	nop
 8007c82:	3708      	adds	r7, #8
 8007c84:	46bd      	mov	sp, r7
 8007c86:	bd80      	pop	{r7, pc}

08007c88 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007c88:	b480      	push	{r7}
 8007c8a:	b083      	sub	sp, #12
 8007c8c:	af00      	add	r7, sp, #0
 8007c8e:	6078      	str	r0, [r7, #4]
 8007c90:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8007c92:	683b      	ldr	r3, [r7, #0]
 8007c94:	781a      	ldrb	r2, [r3, #0]
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8007c9a:	683b      	ldr	r3, [r7, #0]
 8007c9c:	785a      	ldrb	r2, [r3, #1]
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8007ca2:	683b      	ldr	r3, [r7, #0]
 8007ca4:	3302      	adds	r3, #2
 8007ca6:	781b      	ldrb	r3, [r3, #0]
 8007ca8:	b29a      	uxth	r2, r3
 8007caa:	683b      	ldr	r3, [r7, #0]
 8007cac:	3303      	adds	r3, #3
 8007cae:	781b      	ldrb	r3, [r3, #0]
 8007cb0:	b29b      	uxth	r3, r3
 8007cb2:	021b      	lsls	r3, r3, #8
 8007cb4:	b29b      	uxth	r3, r3
 8007cb6:	4413      	add	r3, r2
 8007cb8:	b29a      	uxth	r2, r3
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8007cbe:	683b      	ldr	r3, [r7, #0]
 8007cc0:	3304      	adds	r3, #4
 8007cc2:	781b      	ldrb	r3, [r3, #0]
 8007cc4:	b29a      	uxth	r2, r3
 8007cc6:	683b      	ldr	r3, [r7, #0]
 8007cc8:	3305      	adds	r3, #5
 8007cca:	781b      	ldrb	r3, [r3, #0]
 8007ccc:	b29b      	uxth	r3, r3
 8007cce:	021b      	lsls	r3, r3, #8
 8007cd0:	b29b      	uxth	r3, r3
 8007cd2:	4413      	add	r3, r2
 8007cd4:	b29a      	uxth	r2, r3
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8007cda:	683b      	ldr	r3, [r7, #0]
 8007cdc:	3306      	adds	r3, #6
 8007cde:	781b      	ldrb	r3, [r3, #0]
 8007ce0:	b29a      	uxth	r2, r3
 8007ce2:	683b      	ldr	r3, [r7, #0]
 8007ce4:	3307      	adds	r3, #7
 8007ce6:	781b      	ldrb	r3, [r3, #0]
 8007ce8:	b29b      	uxth	r3, r3
 8007cea:	021b      	lsls	r3, r3, #8
 8007cec:	b29b      	uxth	r3, r3
 8007cee:	4413      	add	r3, r2
 8007cf0:	b29a      	uxth	r2, r3
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	80da      	strh	r2, [r3, #6]

}
 8007cf6:	bf00      	nop
 8007cf8:	370c      	adds	r7, #12
 8007cfa:	46bd      	mov	sp, r7
 8007cfc:	bc80      	pop	{r7}
 8007cfe:	4770      	bx	lr

08007d00 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8007d00:	b580      	push	{r7, lr}
 8007d02:	b082      	sub	sp, #8
 8007d04:	af00      	add	r7, sp, #0
 8007d06:	6078      	str	r0, [r7, #4]
 8007d08:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8007d0a:	2180      	movs	r1, #128	; 0x80
 8007d0c:	6878      	ldr	r0, [r7, #4]
 8007d0e:	f000 fc5f 	bl	80085d0 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8007d12:	2100      	movs	r1, #0
 8007d14:	6878      	ldr	r0, [r7, #4]
 8007d16:	f000 fc5b 	bl	80085d0 <USBD_LL_StallEP>
}
 8007d1a:	bf00      	nop
 8007d1c:	3708      	adds	r7, #8
 8007d1e:	46bd      	mov	sp, r7
 8007d20:	bd80      	pop	{r7, pc}

08007d22 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007d22:	b580      	push	{r7, lr}
 8007d24:	b086      	sub	sp, #24
 8007d26:	af00      	add	r7, sp, #0
 8007d28:	60f8      	str	r0, [r7, #12]
 8007d2a:	60b9      	str	r1, [r7, #8]
 8007d2c:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007d2e:	2300      	movs	r3, #0
 8007d30:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d032      	beq.n	8007d9e <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8007d38:	68f8      	ldr	r0, [r7, #12]
 8007d3a:	f000 f834 	bl	8007da6 <USBD_GetLen>
 8007d3e:	4603      	mov	r3, r0
 8007d40:	3301      	adds	r3, #1
 8007d42:	b29b      	uxth	r3, r3
 8007d44:	005b      	lsls	r3, r3, #1
 8007d46:	b29a      	uxth	r2, r3
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8007d4c:	7dfb      	ldrb	r3, [r7, #23]
 8007d4e:	1c5a      	adds	r2, r3, #1
 8007d50:	75fa      	strb	r2, [r7, #23]
 8007d52:	461a      	mov	r2, r3
 8007d54:	68bb      	ldr	r3, [r7, #8]
 8007d56:	4413      	add	r3, r2
 8007d58:	687a      	ldr	r2, [r7, #4]
 8007d5a:	7812      	ldrb	r2, [r2, #0]
 8007d5c:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8007d5e:	7dfb      	ldrb	r3, [r7, #23]
 8007d60:	1c5a      	adds	r2, r3, #1
 8007d62:	75fa      	strb	r2, [r7, #23]
 8007d64:	461a      	mov	r2, r3
 8007d66:	68bb      	ldr	r3, [r7, #8]
 8007d68:	4413      	add	r3, r2
 8007d6a:	2203      	movs	r2, #3
 8007d6c:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8007d6e:	e012      	b.n	8007d96 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	1c5a      	adds	r2, r3, #1
 8007d74:	60fa      	str	r2, [r7, #12]
 8007d76:	7dfa      	ldrb	r2, [r7, #23]
 8007d78:	1c51      	adds	r1, r2, #1
 8007d7a:	75f9      	strb	r1, [r7, #23]
 8007d7c:	4611      	mov	r1, r2
 8007d7e:	68ba      	ldr	r2, [r7, #8]
 8007d80:	440a      	add	r2, r1
 8007d82:	781b      	ldrb	r3, [r3, #0]
 8007d84:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8007d86:	7dfb      	ldrb	r3, [r7, #23]
 8007d88:	1c5a      	adds	r2, r3, #1
 8007d8a:	75fa      	strb	r2, [r7, #23]
 8007d8c:	461a      	mov	r2, r3
 8007d8e:	68bb      	ldr	r3, [r7, #8]
 8007d90:	4413      	add	r3, r2
 8007d92:	2200      	movs	r2, #0
 8007d94:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	781b      	ldrb	r3, [r3, #0]
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d1e8      	bne.n	8007d70 <USBD_GetString+0x4e>
    }
  }
}
 8007d9e:	bf00      	nop
 8007da0:	3718      	adds	r7, #24
 8007da2:	46bd      	mov	sp, r7
 8007da4:	bd80      	pop	{r7, pc}

08007da6 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007da6:	b480      	push	{r7}
 8007da8:	b085      	sub	sp, #20
 8007daa:	af00      	add	r7, sp, #0
 8007dac:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007dae:	2300      	movs	r3, #0
 8007db0:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8007db2:	e005      	b.n	8007dc0 <USBD_GetLen+0x1a>
  {
    len++;
 8007db4:	7bfb      	ldrb	r3, [r7, #15]
 8007db6:	3301      	adds	r3, #1
 8007db8:	73fb      	strb	r3, [r7, #15]
    buf++;
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	3301      	adds	r3, #1
 8007dbe:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	781b      	ldrb	r3, [r3, #0]
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d1f5      	bne.n	8007db4 <USBD_GetLen+0xe>
  }

  return len;
 8007dc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8007dca:	4618      	mov	r0, r3
 8007dcc:	3714      	adds	r7, #20
 8007dce:	46bd      	mov	sp, r7
 8007dd0:	bc80      	pop	{r7}
 8007dd2:	4770      	bx	lr

08007dd4 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8007dd4:	b580      	push	{r7, lr}
 8007dd6:	b084      	sub	sp, #16
 8007dd8:	af00      	add	r7, sp, #0
 8007dda:	60f8      	str	r0, [r7, #12]
 8007ddc:	60b9      	str	r1, [r7, #8]
 8007dde:	4613      	mov	r3, r2
 8007de0:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	2202      	movs	r2, #2
 8007de6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8007dea:	88fa      	ldrh	r2, [r7, #6]
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8007df0:	88fa      	ldrh	r2, [r7, #6]
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007df6:	88fb      	ldrh	r3, [r7, #6]
 8007df8:	68ba      	ldr	r2, [r7, #8]
 8007dfa:	2100      	movs	r1, #0
 8007dfc:	68f8      	ldr	r0, [r7, #12]
 8007dfe:	f000 fc70 	bl	80086e2 <USBD_LL_Transmit>

  return USBD_OK;
 8007e02:	2300      	movs	r3, #0
}
 8007e04:	4618      	mov	r0, r3
 8007e06:	3710      	adds	r7, #16
 8007e08:	46bd      	mov	sp, r7
 8007e0a:	bd80      	pop	{r7, pc}

08007e0c <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8007e0c:	b580      	push	{r7, lr}
 8007e0e:	b084      	sub	sp, #16
 8007e10:	af00      	add	r7, sp, #0
 8007e12:	60f8      	str	r0, [r7, #12]
 8007e14:	60b9      	str	r1, [r7, #8]
 8007e16:	4613      	mov	r3, r2
 8007e18:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007e1a:	88fb      	ldrh	r3, [r7, #6]
 8007e1c:	68ba      	ldr	r2, [r7, #8]
 8007e1e:	2100      	movs	r1, #0
 8007e20:	68f8      	ldr	r0, [r7, #12]
 8007e22:	f000 fc5e 	bl	80086e2 <USBD_LL_Transmit>

  return USBD_OK;
 8007e26:	2300      	movs	r3, #0
}
 8007e28:	4618      	mov	r0, r3
 8007e2a:	3710      	adds	r7, #16
 8007e2c:	46bd      	mov	sp, r7
 8007e2e:	bd80      	pop	{r7, pc}

08007e30 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8007e30:	b580      	push	{r7, lr}
 8007e32:	b084      	sub	sp, #16
 8007e34:	af00      	add	r7, sp, #0
 8007e36:	60f8      	str	r0, [r7, #12]
 8007e38:	60b9      	str	r1, [r7, #8]
 8007e3a:	4613      	mov	r3, r2
 8007e3c:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	2203      	movs	r2, #3
 8007e42:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8007e46:	88fa      	ldrh	r2, [r7, #6]
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 8007e4e:	88fa      	ldrh	r2, [r7, #6]
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007e56:	88fb      	ldrh	r3, [r7, #6]
 8007e58:	68ba      	ldr	r2, [r7, #8]
 8007e5a:	2100      	movs	r1, #0
 8007e5c:	68f8      	ldr	r0, [r7, #12]
 8007e5e:	f000 fc63 	bl	8008728 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007e62:	2300      	movs	r3, #0
}
 8007e64:	4618      	mov	r0, r3
 8007e66:	3710      	adds	r7, #16
 8007e68:	46bd      	mov	sp, r7
 8007e6a:	bd80      	pop	{r7, pc}

08007e6c <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8007e6c:	b580      	push	{r7, lr}
 8007e6e:	b084      	sub	sp, #16
 8007e70:	af00      	add	r7, sp, #0
 8007e72:	60f8      	str	r0, [r7, #12]
 8007e74:	60b9      	str	r1, [r7, #8]
 8007e76:	4613      	mov	r3, r2
 8007e78:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007e7a:	88fb      	ldrh	r3, [r7, #6]
 8007e7c:	68ba      	ldr	r2, [r7, #8]
 8007e7e:	2100      	movs	r1, #0
 8007e80:	68f8      	ldr	r0, [r7, #12]
 8007e82:	f000 fc51 	bl	8008728 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007e86:	2300      	movs	r3, #0
}
 8007e88:	4618      	mov	r0, r3
 8007e8a:	3710      	adds	r7, #16
 8007e8c:	46bd      	mov	sp, r7
 8007e8e:	bd80      	pop	{r7, pc}

08007e90 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007e90:	b580      	push	{r7, lr}
 8007e92:	b082      	sub	sp, #8
 8007e94:	af00      	add	r7, sp, #0
 8007e96:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	2204      	movs	r2, #4
 8007e9c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007ea0:	2300      	movs	r3, #0
 8007ea2:	2200      	movs	r2, #0
 8007ea4:	2100      	movs	r1, #0
 8007ea6:	6878      	ldr	r0, [r7, #4]
 8007ea8:	f000 fc1b 	bl	80086e2 <USBD_LL_Transmit>

  return USBD_OK;
 8007eac:	2300      	movs	r3, #0
}
 8007eae:	4618      	mov	r0, r3
 8007eb0:	3708      	adds	r7, #8
 8007eb2:	46bd      	mov	sp, r7
 8007eb4:	bd80      	pop	{r7, pc}

08007eb6 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007eb6:	b580      	push	{r7, lr}
 8007eb8:	b082      	sub	sp, #8
 8007eba:	af00      	add	r7, sp, #0
 8007ebc:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	2205      	movs	r2, #5
 8007ec2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007ec6:	2300      	movs	r3, #0
 8007ec8:	2200      	movs	r2, #0
 8007eca:	2100      	movs	r1, #0
 8007ecc:	6878      	ldr	r0, [r7, #4]
 8007ece:	f000 fc2b 	bl	8008728 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007ed2:	2300      	movs	r3, #0
}
 8007ed4:	4618      	mov	r0, r3
 8007ed6:	3708      	adds	r7, #8
 8007ed8:	46bd      	mov	sp, r7
 8007eda:	bd80      	pop	{r7, pc}

08007edc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007edc:	b580      	push	{r7, lr}
 8007ede:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007ee0:	2200      	movs	r2, #0
 8007ee2:	4912      	ldr	r1, [pc, #72]	; (8007f2c <MX_USB_DEVICE_Init+0x50>)
 8007ee4:	4812      	ldr	r0, [pc, #72]	; (8007f30 <MX_USB_DEVICE_Init+0x54>)
 8007ee6:	f7fe ff6c 	bl	8006dc2 <USBD_Init>
 8007eea:	4603      	mov	r3, r0
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d001      	beq.n	8007ef4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007ef0:	f7f8 fc9a 	bl	8000828 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8007ef4:	490f      	ldr	r1, [pc, #60]	; (8007f34 <MX_USB_DEVICE_Init+0x58>)
 8007ef6:	480e      	ldr	r0, [pc, #56]	; (8007f30 <MX_USB_DEVICE_Init+0x54>)
 8007ef8:	f7fe ff8e 	bl	8006e18 <USBD_RegisterClass>
 8007efc:	4603      	mov	r3, r0
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d001      	beq.n	8007f06 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8007f02:	f7f8 fc91 	bl	8000828 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8007f06:	490c      	ldr	r1, [pc, #48]	; (8007f38 <MX_USB_DEVICE_Init+0x5c>)
 8007f08:	4809      	ldr	r0, [pc, #36]	; (8007f30 <MX_USB_DEVICE_Init+0x54>)
 8007f0a:	f7fe febf 	bl	8006c8c <USBD_CDC_RegisterInterface>
 8007f0e:	4603      	mov	r3, r0
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d001      	beq.n	8007f18 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8007f14:	f7f8 fc88 	bl	8000828 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007f18:	4805      	ldr	r0, [pc, #20]	; (8007f30 <MX_USB_DEVICE_Init+0x54>)
 8007f1a:	f7fe ff96 	bl	8006e4a <USBD_Start>
 8007f1e:	4603      	mov	r3, r0
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d001      	beq.n	8007f28 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8007f24:	f7f8 fc80 	bl	8000828 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007f28:	bf00      	nop
 8007f2a:	bd80      	pop	{r7, pc}
 8007f2c:	20000130 	.word	0x20000130
 8007f30:	2000165c 	.word	0x2000165c
 8007f34:	2000001c 	.word	0x2000001c
 8007f38:	20000120 	.word	0x20000120

08007f3c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8007f3c:	b580      	push	{r7, lr}
 8007f3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8007f40:	2200      	movs	r2, #0
 8007f42:	4905      	ldr	r1, [pc, #20]	; (8007f58 <CDC_Init_FS+0x1c>)
 8007f44:	4805      	ldr	r0, [pc, #20]	; (8007f5c <CDC_Init_FS+0x20>)
 8007f46:	f7fe feb7 	bl	8006cb8 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8007f4a:	4905      	ldr	r1, [pc, #20]	; (8007f60 <CDC_Init_FS+0x24>)
 8007f4c:	4803      	ldr	r0, [pc, #12]	; (8007f5c <CDC_Init_FS+0x20>)
 8007f4e:	f7fe fecc 	bl	8006cea <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8007f52:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8007f54:	4618      	mov	r0, r3
 8007f56:	bd80      	pop	{r7, pc}
 8007f58:	20001930 	.word	0x20001930
 8007f5c:	2000165c 	.word	0x2000165c
 8007f60:	20001920 	.word	0x20001920

08007f64 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8007f64:	b480      	push	{r7}
 8007f66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8007f68:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8007f6a:	4618      	mov	r0, r3
 8007f6c:	46bd      	mov	sp, r7
 8007f6e:	bc80      	pop	{r7}
 8007f70:	4770      	bx	lr
	...

08007f74 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8007f74:	b480      	push	{r7}
 8007f76:	b083      	sub	sp, #12
 8007f78:	af00      	add	r7, sp, #0
 8007f7a:	4603      	mov	r3, r0
 8007f7c:	6039      	str	r1, [r7, #0]
 8007f7e:	71fb      	strb	r3, [r7, #7]
 8007f80:	4613      	mov	r3, r2
 8007f82:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8007f84:	79fb      	ldrb	r3, [r7, #7]
 8007f86:	2b23      	cmp	r3, #35	; 0x23
 8007f88:	d84a      	bhi.n	8008020 <CDC_Control_FS+0xac>
 8007f8a:	a201      	add	r2, pc, #4	; (adr r2, 8007f90 <CDC_Control_FS+0x1c>)
 8007f8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f90:	08008021 	.word	0x08008021
 8007f94:	08008021 	.word	0x08008021
 8007f98:	08008021 	.word	0x08008021
 8007f9c:	08008021 	.word	0x08008021
 8007fa0:	08008021 	.word	0x08008021
 8007fa4:	08008021 	.word	0x08008021
 8007fa8:	08008021 	.word	0x08008021
 8007fac:	08008021 	.word	0x08008021
 8007fb0:	08008021 	.word	0x08008021
 8007fb4:	08008021 	.word	0x08008021
 8007fb8:	08008021 	.word	0x08008021
 8007fbc:	08008021 	.word	0x08008021
 8007fc0:	08008021 	.word	0x08008021
 8007fc4:	08008021 	.word	0x08008021
 8007fc8:	08008021 	.word	0x08008021
 8007fcc:	08008021 	.word	0x08008021
 8007fd0:	08008021 	.word	0x08008021
 8007fd4:	08008021 	.word	0x08008021
 8007fd8:	08008021 	.word	0x08008021
 8007fdc:	08008021 	.word	0x08008021
 8007fe0:	08008021 	.word	0x08008021
 8007fe4:	08008021 	.word	0x08008021
 8007fe8:	08008021 	.word	0x08008021
 8007fec:	08008021 	.word	0x08008021
 8007ff0:	08008021 	.word	0x08008021
 8007ff4:	08008021 	.word	0x08008021
 8007ff8:	08008021 	.word	0x08008021
 8007ffc:	08008021 	.word	0x08008021
 8008000:	08008021 	.word	0x08008021
 8008004:	08008021 	.word	0x08008021
 8008008:	08008021 	.word	0x08008021
 800800c:	08008021 	.word	0x08008021
 8008010:	08008021 	.word	0x08008021
 8008014:	08008021 	.word	0x08008021
 8008018:	08008021 	.word	0x08008021
 800801c:	08008021 	.word	0x08008021
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008020:	bf00      	nop
  }

  return (USBD_OK);
 8008022:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008024:	4618      	mov	r0, r3
 8008026:	370c      	adds	r7, #12
 8008028:	46bd      	mov	sp, r7
 800802a:	bc80      	pop	{r7}
 800802c:	4770      	bx	lr
 800802e:	bf00      	nop

08008030 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008030:	b580      	push	{r7, lr}
 8008032:	b082      	sub	sp, #8
 8008034:	af00      	add	r7, sp, #0
 8008036:	6078      	str	r0, [r7, #4]
 8008038:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800803a:	6879      	ldr	r1, [r7, #4]
 800803c:	4807      	ldr	r0, [pc, #28]	; (800805c <CDC_Receive_FS+0x2c>)
 800803e:	f7fe fe54 	bl	8006cea <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8008042:	4806      	ldr	r0, [pc, #24]	; (800805c <CDC_Receive_FS+0x2c>)
 8008044:	f7fe fe93 	bl	8006d6e <USBD_CDC_ReceivePacket>
  CDC_ReciveCallBack(Buf, Len);
 8008048:	6839      	ldr	r1, [r7, #0]
 800804a:	6878      	ldr	r0, [r7, #4]
 800804c:	f7f8 faac 	bl	80005a8 <CDC_ReciveCallBack>
  return (USBD_OK);
 8008050:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8008052:	4618      	mov	r0, r3
 8008054:	3708      	adds	r7, #8
 8008056:	46bd      	mov	sp, r7
 8008058:	bd80      	pop	{r7, pc}
 800805a:	bf00      	nop
 800805c:	2000165c 	.word	0x2000165c

08008060 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8008060:	b580      	push	{r7, lr}
 8008062:	b084      	sub	sp, #16
 8008064:	af00      	add	r7, sp, #0
 8008066:	6078      	str	r0, [r7, #4]
 8008068:	460b      	mov	r3, r1
 800806a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800806c:	2300      	movs	r3, #0
 800806e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8008070:	4b0d      	ldr	r3, [pc, #52]	; (80080a8 <CDC_Transmit_FS+0x48>)
 8008072:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008076:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8008078:	68bb      	ldr	r3, [r7, #8]
 800807a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800807e:	2b00      	cmp	r3, #0
 8008080:	d001      	beq.n	8008086 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8008082:	2301      	movs	r3, #1
 8008084:	e00b      	b.n	800809e <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8008086:	887b      	ldrh	r3, [r7, #2]
 8008088:	461a      	mov	r2, r3
 800808a:	6879      	ldr	r1, [r7, #4]
 800808c:	4806      	ldr	r0, [pc, #24]	; (80080a8 <CDC_Transmit_FS+0x48>)
 800808e:	f7fe fe13 	bl	8006cb8 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8008092:	4805      	ldr	r0, [pc, #20]	; (80080a8 <CDC_Transmit_FS+0x48>)
 8008094:	f7fe fe3c 	bl	8006d10 <USBD_CDC_TransmitPacket>
 8008098:	4603      	mov	r3, r0
 800809a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800809c:	7bfb      	ldrb	r3, [r7, #15]
}
 800809e:	4618      	mov	r0, r3
 80080a0:	3710      	adds	r7, #16
 80080a2:	46bd      	mov	sp, r7
 80080a4:	bd80      	pop	{r7, pc}
 80080a6:	bf00      	nop
 80080a8:	2000165c 	.word	0x2000165c

080080ac <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80080ac:	b480      	push	{r7}
 80080ae:	b083      	sub	sp, #12
 80080b0:	af00      	add	r7, sp, #0
 80080b2:	4603      	mov	r3, r0
 80080b4:	6039      	str	r1, [r7, #0]
 80080b6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80080b8:	683b      	ldr	r3, [r7, #0]
 80080ba:	2212      	movs	r2, #18
 80080bc:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80080be:	4b03      	ldr	r3, [pc, #12]	; (80080cc <USBD_FS_DeviceDescriptor+0x20>)
}
 80080c0:	4618      	mov	r0, r3
 80080c2:	370c      	adds	r7, #12
 80080c4:	46bd      	mov	sp, r7
 80080c6:	bc80      	pop	{r7}
 80080c8:	4770      	bx	lr
 80080ca:	bf00      	nop
 80080cc:	2000014c 	.word	0x2000014c

080080d0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80080d0:	b480      	push	{r7}
 80080d2:	b083      	sub	sp, #12
 80080d4:	af00      	add	r7, sp, #0
 80080d6:	4603      	mov	r3, r0
 80080d8:	6039      	str	r1, [r7, #0]
 80080da:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80080dc:	683b      	ldr	r3, [r7, #0]
 80080de:	2204      	movs	r2, #4
 80080e0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80080e2:	4b03      	ldr	r3, [pc, #12]	; (80080f0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80080e4:	4618      	mov	r0, r3
 80080e6:	370c      	adds	r7, #12
 80080e8:	46bd      	mov	sp, r7
 80080ea:	bc80      	pop	{r7}
 80080ec:	4770      	bx	lr
 80080ee:	bf00      	nop
 80080f0:	20000160 	.word	0x20000160

080080f4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80080f4:	b580      	push	{r7, lr}
 80080f6:	b082      	sub	sp, #8
 80080f8:	af00      	add	r7, sp, #0
 80080fa:	4603      	mov	r3, r0
 80080fc:	6039      	str	r1, [r7, #0]
 80080fe:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008100:	79fb      	ldrb	r3, [r7, #7]
 8008102:	2b00      	cmp	r3, #0
 8008104:	d105      	bne.n	8008112 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008106:	683a      	ldr	r2, [r7, #0]
 8008108:	4907      	ldr	r1, [pc, #28]	; (8008128 <USBD_FS_ProductStrDescriptor+0x34>)
 800810a:	4808      	ldr	r0, [pc, #32]	; (800812c <USBD_FS_ProductStrDescriptor+0x38>)
 800810c:	f7ff fe09 	bl	8007d22 <USBD_GetString>
 8008110:	e004      	b.n	800811c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008112:	683a      	ldr	r2, [r7, #0]
 8008114:	4904      	ldr	r1, [pc, #16]	; (8008128 <USBD_FS_ProductStrDescriptor+0x34>)
 8008116:	4805      	ldr	r0, [pc, #20]	; (800812c <USBD_FS_ProductStrDescriptor+0x38>)
 8008118:	f7ff fe03 	bl	8007d22 <USBD_GetString>
  }
  return USBD_StrDesc;
 800811c:	4b02      	ldr	r3, [pc, #8]	; (8008128 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800811e:	4618      	mov	r0, r3
 8008120:	3708      	adds	r7, #8
 8008122:	46bd      	mov	sp, r7
 8008124:	bd80      	pop	{r7, pc}
 8008126:	bf00      	nop
 8008128:	20001940 	.word	0x20001940
 800812c:	08008a48 	.word	0x08008a48

08008130 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008130:	b580      	push	{r7, lr}
 8008132:	b082      	sub	sp, #8
 8008134:	af00      	add	r7, sp, #0
 8008136:	4603      	mov	r3, r0
 8008138:	6039      	str	r1, [r7, #0]
 800813a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800813c:	683a      	ldr	r2, [r7, #0]
 800813e:	4904      	ldr	r1, [pc, #16]	; (8008150 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008140:	4804      	ldr	r0, [pc, #16]	; (8008154 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008142:	f7ff fdee 	bl	8007d22 <USBD_GetString>
  return USBD_StrDesc;
 8008146:	4b02      	ldr	r3, [pc, #8]	; (8008150 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008148:	4618      	mov	r0, r3
 800814a:	3708      	adds	r7, #8
 800814c:	46bd      	mov	sp, r7
 800814e:	bd80      	pop	{r7, pc}
 8008150:	20001940 	.word	0x20001940
 8008154:	08008a60 	.word	0x08008a60

08008158 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008158:	b580      	push	{r7, lr}
 800815a:	b082      	sub	sp, #8
 800815c:	af00      	add	r7, sp, #0
 800815e:	4603      	mov	r3, r0
 8008160:	6039      	str	r1, [r7, #0]
 8008162:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008164:	683b      	ldr	r3, [r7, #0]
 8008166:	221a      	movs	r2, #26
 8008168:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800816a:	f000 f843 	bl	80081f4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800816e:	4b02      	ldr	r3, [pc, #8]	; (8008178 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008170:	4618      	mov	r0, r3
 8008172:	3708      	adds	r7, #8
 8008174:	46bd      	mov	sp, r7
 8008176:	bd80      	pop	{r7, pc}
 8008178:	20000164 	.word	0x20000164

0800817c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800817c:	b580      	push	{r7, lr}
 800817e:	b082      	sub	sp, #8
 8008180:	af00      	add	r7, sp, #0
 8008182:	4603      	mov	r3, r0
 8008184:	6039      	str	r1, [r7, #0]
 8008186:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008188:	79fb      	ldrb	r3, [r7, #7]
 800818a:	2b00      	cmp	r3, #0
 800818c:	d105      	bne.n	800819a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800818e:	683a      	ldr	r2, [r7, #0]
 8008190:	4907      	ldr	r1, [pc, #28]	; (80081b0 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008192:	4808      	ldr	r0, [pc, #32]	; (80081b4 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008194:	f7ff fdc5 	bl	8007d22 <USBD_GetString>
 8008198:	e004      	b.n	80081a4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800819a:	683a      	ldr	r2, [r7, #0]
 800819c:	4904      	ldr	r1, [pc, #16]	; (80081b0 <USBD_FS_ConfigStrDescriptor+0x34>)
 800819e:	4805      	ldr	r0, [pc, #20]	; (80081b4 <USBD_FS_ConfigStrDescriptor+0x38>)
 80081a0:	f7ff fdbf 	bl	8007d22 <USBD_GetString>
  }
  return USBD_StrDesc;
 80081a4:	4b02      	ldr	r3, [pc, #8]	; (80081b0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80081a6:	4618      	mov	r0, r3
 80081a8:	3708      	adds	r7, #8
 80081aa:	46bd      	mov	sp, r7
 80081ac:	bd80      	pop	{r7, pc}
 80081ae:	bf00      	nop
 80081b0:	20001940 	.word	0x20001940
 80081b4:	08008a74 	.word	0x08008a74

080081b8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80081b8:	b580      	push	{r7, lr}
 80081ba:	b082      	sub	sp, #8
 80081bc:	af00      	add	r7, sp, #0
 80081be:	4603      	mov	r3, r0
 80081c0:	6039      	str	r1, [r7, #0]
 80081c2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80081c4:	79fb      	ldrb	r3, [r7, #7]
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d105      	bne.n	80081d6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80081ca:	683a      	ldr	r2, [r7, #0]
 80081cc:	4907      	ldr	r1, [pc, #28]	; (80081ec <USBD_FS_InterfaceStrDescriptor+0x34>)
 80081ce:	4808      	ldr	r0, [pc, #32]	; (80081f0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80081d0:	f7ff fda7 	bl	8007d22 <USBD_GetString>
 80081d4:	e004      	b.n	80081e0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80081d6:	683a      	ldr	r2, [r7, #0]
 80081d8:	4904      	ldr	r1, [pc, #16]	; (80081ec <USBD_FS_InterfaceStrDescriptor+0x34>)
 80081da:	4805      	ldr	r0, [pc, #20]	; (80081f0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80081dc:	f7ff fda1 	bl	8007d22 <USBD_GetString>
  }
  return USBD_StrDesc;
 80081e0:	4b02      	ldr	r3, [pc, #8]	; (80081ec <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80081e2:	4618      	mov	r0, r3
 80081e4:	3708      	adds	r7, #8
 80081e6:	46bd      	mov	sp, r7
 80081e8:	bd80      	pop	{r7, pc}
 80081ea:	bf00      	nop
 80081ec:	20001940 	.word	0x20001940
 80081f0:	08008a80 	.word	0x08008a80

080081f4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80081f4:	b580      	push	{r7, lr}
 80081f6:	b084      	sub	sp, #16
 80081f8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80081fa:	4b0f      	ldr	r3, [pc, #60]	; (8008238 <Get_SerialNum+0x44>)
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008200:	4b0e      	ldr	r3, [pc, #56]	; (800823c <Get_SerialNum+0x48>)
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008206:	4b0e      	ldr	r3, [pc, #56]	; (8008240 <Get_SerialNum+0x4c>)
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800820c:	68fa      	ldr	r2, [r7, #12]
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	4413      	add	r3, r2
 8008212:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	2b00      	cmp	r3, #0
 8008218:	d009      	beq.n	800822e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800821a:	2208      	movs	r2, #8
 800821c:	4909      	ldr	r1, [pc, #36]	; (8008244 <Get_SerialNum+0x50>)
 800821e:	68f8      	ldr	r0, [r7, #12]
 8008220:	f000 f814 	bl	800824c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008224:	2204      	movs	r2, #4
 8008226:	4908      	ldr	r1, [pc, #32]	; (8008248 <Get_SerialNum+0x54>)
 8008228:	68b8      	ldr	r0, [r7, #8]
 800822a:	f000 f80f 	bl	800824c <IntToUnicode>
  }
}
 800822e:	bf00      	nop
 8008230:	3710      	adds	r7, #16
 8008232:	46bd      	mov	sp, r7
 8008234:	bd80      	pop	{r7, pc}
 8008236:	bf00      	nop
 8008238:	1ffff7e8 	.word	0x1ffff7e8
 800823c:	1ffff7ec 	.word	0x1ffff7ec
 8008240:	1ffff7f0 	.word	0x1ffff7f0
 8008244:	20000166 	.word	0x20000166
 8008248:	20000176 	.word	0x20000176

0800824c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800824c:	b480      	push	{r7}
 800824e:	b087      	sub	sp, #28
 8008250:	af00      	add	r7, sp, #0
 8008252:	60f8      	str	r0, [r7, #12]
 8008254:	60b9      	str	r1, [r7, #8]
 8008256:	4613      	mov	r3, r2
 8008258:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800825a:	2300      	movs	r3, #0
 800825c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800825e:	2300      	movs	r3, #0
 8008260:	75fb      	strb	r3, [r7, #23]
 8008262:	e027      	b.n	80082b4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	0f1b      	lsrs	r3, r3, #28
 8008268:	2b09      	cmp	r3, #9
 800826a:	d80b      	bhi.n	8008284 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	0f1b      	lsrs	r3, r3, #28
 8008270:	b2da      	uxtb	r2, r3
 8008272:	7dfb      	ldrb	r3, [r7, #23]
 8008274:	005b      	lsls	r3, r3, #1
 8008276:	4619      	mov	r1, r3
 8008278:	68bb      	ldr	r3, [r7, #8]
 800827a:	440b      	add	r3, r1
 800827c:	3230      	adds	r2, #48	; 0x30
 800827e:	b2d2      	uxtb	r2, r2
 8008280:	701a      	strb	r2, [r3, #0]
 8008282:	e00a      	b.n	800829a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	0f1b      	lsrs	r3, r3, #28
 8008288:	b2da      	uxtb	r2, r3
 800828a:	7dfb      	ldrb	r3, [r7, #23]
 800828c:	005b      	lsls	r3, r3, #1
 800828e:	4619      	mov	r1, r3
 8008290:	68bb      	ldr	r3, [r7, #8]
 8008292:	440b      	add	r3, r1
 8008294:	3237      	adds	r2, #55	; 0x37
 8008296:	b2d2      	uxtb	r2, r2
 8008298:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	011b      	lsls	r3, r3, #4
 800829e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80082a0:	7dfb      	ldrb	r3, [r7, #23]
 80082a2:	005b      	lsls	r3, r3, #1
 80082a4:	3301      	adds	r3, #1
 80082a6:	68ba      	ldr	r2, [r7, #8]
 80082a8:	4413      	add	r3, r2
 80082aa:	2200      	movs	r2, #0
 80082ac:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80082ae:	7dfb      	ldrb	r3, [r7, #23]
 80082b0:	3301      	adds	r3, #1
 80082b2:	75fb      	strb	r3, [r7, #23]
 80082b4:	7dfa      	ldrb	r2, [r7, #23]
 80082b6:	79fb      	ldrb	r3, [r7, #7]
 80082b8:	429a      	cmp	r2, r3
 80082ba:	d3d3      	bcc.n	8008264 <IntToUnicode+0x18>
  }
}
 80082bc:	bf00      	nop
 80082be:	371c      	adds	r7, #28
 80082c0:	46bd      	mov	sp, r7
 80082c2:	bc80      	pop	{r7}
 80082c4:	4770      	bx	lr
	...

080082c8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80082c8:	b580      	push	{r7, lr}
 80082ca:	b084      	sub	sp, #16
 80082cc:	af00      	add	r7, sp, #0
 80082ce:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	4a11      	ldr	r2, [pc, #68]	; (800831c <HAL_PCD_MspInit+0x54>)
 80082d6:	4293      	cmp	r3, r2
 80082d8:	d11b      	bne.n	8008312 <HAL_PCD_MspInit+0x4a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80082da:	4b11      	ldr	r3, [pc, #68]	; (8008320 <HAL_PCD_MspInit+0x58>)
 80082dc:	69db      	ldr	r3, [r3, #28]
 80082de:	4a10      	ldr	r2, [pc, #64]	; (8008320 <HAL_PCD_MspInit+0x58>)
 80082e0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80082e4:	61d3      	str	r3, [r2, #28]
 80082e6:	4b0e      	ldr	r3, [pc, #56]	; (8008320 <HAL_PCD_MspInit+0x58>)
 80082e8:	69db      	ldr	r3, [r3, #28]
 80082ea:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80082ee:	60fb      	str	r3, [r7, #12]
 80082f0:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_HP_CAN1_TX_IRQn, 0, 0);
 80082f2:	2200      	movs	r2, #0
 80082f4:	2100      	movs	r1, #0
 80082f6:	2013      	movs	r0, #19
 80082f8:	f7f9 fa91 	bl	800181e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_HP_CAN1_TX_IRQn);
 80082fc:	2013      	movs	r0, #19
 80082fe:	f7f9 faaa 	bl	8001856 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8008302:	2200      	movs	r2, #0
 8008304:	2100      	movs	r1, #0
 8008306:	2014      	movs	r0, #20
 8008308:	f7f9 fa89 	bl	800181e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800830c:	2014      	movs	r0, #20
 800830e:	f7f9 faa2 	bl	8001856 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8008312:	bf00      	nop
 8008314:	3710      	adds	r7, #16
 8008316:	46bd      	mov	sp, r7
 8008318:	bd80      	pop	{r7, pc}
 800831a:	bf00      	nop
 800831c:	40005c00 	.word	0x40005c00
 8008320:	40021000 	.word	0x40021000

08008324 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008324:	b580      	push	{r7, lr}
 8008326:	b082      	sub	sp, #8
 8008328:	af00      	add	r7, sp, #0
 800832a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8008338:	4619      	mov	r1, r3
 800833a:	4610      	mov	r0, r2
 800833c:	f7fe fdcd 	bl	8006eda <USBD_LL_SetupStage>
}
 8008340:	bf00      	nop
 8008342:	3708      	adds	r7, #8
 8008344:	46bd      	mov	sp, r7
 8008346:	bd80      	pop	{r7, pc}

08008348 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008348:	b580      	push	{r7, lr}
 800834a:	b082      	sub	sp, #8
 800834c:	af00      	add	r7, sp, #0
 800834e:	6078      	str	r0, [r7, #4]
 8008350:	460b      	mov	r3, r1
 8008352:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800835a:	78fa      	ldrb	r2, [r7, #3]
 800835c:	6879      	ldr	r1, [r7, #4]
 800835e:	4613      	mov	r3, r2
 8008360:	009b      	lsls	r3, r3, #2
 8008362:	4413      	add	r3, r2
 8008364:	00db      	lsls	r3, r3, #3
 8008366:	440b      	add	r3, r1
 8008368:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800836c:	681a      	ldr	r2, [r3, #0]
 800836e:	78fb      	ldrb	r3, [r7, #3]
 8008370:	4619      	mov	r1, r3
 8008372:	f7fe fdfd 	bl	8006f70 <USBD_LL_DataOutStage>
}
 8008376:	bf00      	nop
 8008378:	3708      	adds	r7, #8
 800837a:	46bd      	mov	sp, r7
 800837c:	bd80      	pop	{r7, pc}

0800837e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800837e:	b580      	push	{r7, lr}
 8008380:	b082      	sub	sp, #8
 8008382:	af00      	add	r7, sp, #0
 8008384:	6078      	str	r0, [r7, #4]
 8008386:	460b      	mov	r3, r1
 8008388:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8008390:	78fa      	ldrb	r2, [r7, #3]
 8008392:	6879      	ldr	r1, [r7, #4]
 8008394:	4613      	mov	r3, r2
 8008396:	009b      	lsls	r3, r3, #2
 8008398:	4413      	add	r3, r2
 800839a:	00db      	lsls	r3, r3, #3
 800839c:	440b      	add	r3, r1
 800839e:	333c      	adds	r3, #60	; 0x3c
 80083a0:	681a      	ldr	r2, [r3, #0]
 80083a2:	78fb      	ldrb	r3, [r7, #3]
 80083a4:	4619      	mov	r1, r3
 80083a6:	f7fe fe54 	bl	8007052 <USBD_LL_DataInStage>
}
 80083aa:	bf00      	nop
 80083ac:	3708      	adds	r7, #8
 80083ae:	46bd      	mov	sp, r7
 80083b0:	bd80      	pop	{r7, pc}

080083b2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80083b2:	b580      	push	{r7, lr}
 80083b4:	b082      	sub	sp, #8
 80083b6:	af00      	add	r7, sp, #0
 80083b8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 80083c0:	4618      	mov	r0, r3
 80083c2:	f7fe ff64 	bl	800728e <USBD_LL_SOF>
}
 80083c6:	bf00      	nop
 80083c8:	3708      	adds	r7, #8
 80083ca:	46bd      	mov	sp, r7
 80083cc:	bd80      	pop	{r7, pc}

080083ce <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80083ce:	b580      	push	{r7, lr}
 80083d0:	b084      	sub	sp, #16
 80083d2:	af00      	add	r7, sp, #0
 80083d4:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80083d6:	2301      	movs	r3, #1
 80083d8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	689b      	ldr	r3, [r3, #8]
 80083de:	2b02      	cmp	r3, #2
 80083e0:	d001      	beq.n	80083e6 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80083e2:	f7f8 fa21 	bl	8000828 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 80083ec:	7bfa      	ldrb	r2, [r7, #15]
 80083ee:	4611      	mov	r1, r2
 80083f0:	4618      	mov	r0, r3
 80083f2:	f7fe ff14 	bl	800721e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 80083fc:	4618      	mov	r0, r3
 80083fe:	f7fe fecd 	bl	800719c <USBD_LL_Reset>
}
 8008402:	bf00      	nop
 8008404:	3710      	adds	r7, #16
 8008406:	46bd      	mov	sp, r7
 8008408:	bd80      	pop	{r7, pc}
	...

0800840c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800840c:	b580      	push	{r7, lr}
 800840e:	b082      	sub	sp, #8
 8008410:	af00      	add	r7, sp, #0
 8008412:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800841a:	4618      	mov	r0, r3
 800841c:	f7fe ff0e 	bl	800723c <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	699b      	ldr	r3, [r3, #24]
 8008424:	2b00      	cmp	r3, #0
 8008426:	d005      	beq.n	8008434 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008428:	4b04      	ldr	r3, [pc, #16]	; (800843c <HAL_PCD_SuspendCallback+0x30>)
 800842a:	691b      	ldr	r3, [r3, #16]
 800842c:	4a03      	ldr	r2, [pc, #12]	; (800843c <HAL_PCD_SuspendCallback+0x30>)
 800842e:	f043 0306 	orr.w	r3, r3, #6
 8008432:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008434:	bf00      	nop
 8008436:	3708      	adds	r7, #8
 8008438:	46bd      	mov	sp, r7
 800843a:	bd80      	pop	{r7, pc}
 800843c:	e000ed00 	.word	0xe000ed00

08008440 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008440:	b580      	push	{r7, lr}
 8008442:	b082      	sub	sp, #8
 8008444:	af00      	add	r7, sp, #0
 8008446:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800844e:	4618      	mov	r0, r3
 8008450:	f7fe ff08 	bl	8007264 <USBD_LL_Resume>
}
 8008454:	bf00      	nop
 8008456:	3708      	adds	r7, #8
 8008458:	46bd      	mov	sp, r7
 800845a:	bd80      	pop	{r7, pc}

0800845c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800845c:	b580      	push	{r7, lr}
 800845e:	b082      	sub	sp, #8
 8008460:	af00      	add	r7, sp, #0
 8008462:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8008464:	4a28      	ldr	r2, [pc, #160]	; (8008508 <USBD_LL_Init+0xac>)
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	4a26      	ldr	r2, [pc, #152]	; (8008508 <USBD_LL_Init+0xac>)
 8008470:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 8008474:	4b24      	ldr	r3, [pc, #144]	; (8008508 <USBD_LL_Init+0xac>)
 8008476:	4a25      	ldr	r2, [pc, #148]	; (800850c <USBD_LL_Init+0xb0>)
 8008478:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800847a:	4b23      	ldr	r3, [pc, #140]	; (8008508 <USBD_LL_Init+0xac>)
 800847c:	2208      	movs	r2, #8
 800847e:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8008480:	4b21      	ldr	r3, [pc, #132]	; (8008508 <USBD_LL_Init+0xac>)
 8008482:	2202      	movs	r2, #2
 8008484:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8008486:	4b20      	ldr	r3, [pc, #128]	; (8008508 <USBD_LL_Init+0xac>)
 8008488:	2200      	movs	r2, #0
 800848a:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800848c:	4b1e      	ldr	r3, [pc, #120]	; (8008508 <USBD_LL_Init+0xac>)
 800848e:	2200      	movs	r2, #0
 8008490:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8008492:	4b1d      	ldr	r3, [pc, #116]	; (8008508 <USBD_LL_Init+0xac>)
 8008494:	2200      	movs	r2, #0
 8008496:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8008498:	481b      	ldr	r0, [pc, #108]	; (8008508 <USBD_LL_Init+0xac>)
 800849a:	f7f9 fda9 	bl	8001ff0 <HAL_PCD_Init>
 800849e:	4603      	mov	r3, r0
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d001      	beq.n	80084a8 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 80084a4:	f7f8 f9c0 	bl	8000828 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80084ae:	2318      	movs	r3, #24
 80084b0:	2200      	movs	r2, #0
 80084b2:	2100      	movs	r1, #0
 80084b4:	f7fb f8dd 	bl	8003672 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80084be:	2358      	movs	r3, #88	; 0x58
 80084c0:	2200      	movs	r2, #0
 80084c2:	2180      	movs	r1, #128	; 0x80
 80084c4:	f7fb f8d5 	bl	8003672 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80084ce:	23c0      	movs	r3, #192	; 0xc0
 80084d0:	2200      	movs	r2, #0
 80084d2:	2181      	movs	r1, #129	; 0x81
 80084d4:	f7fb f8cd 	bl	8003672 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80084de:	f44f 7388 	mov.w	r3, #272	; 0x110
 80084e2:	2200      	movs	r2, #0
 80084e4:	2101      	movs	r1, #1
 80084e6:	f7fb f8c4 	bl	8003672 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80084f0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80084f4:	2200      	movs	r2, #0
 80084f6:	2182      	movs	r1, #130	; 0x82
 80084f8:	f7fb f8bb 	bl	8003672 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 80084fc:	2300      	movs	r3, #0
}
 80084fe:	4618      	mov	r0, r3
 8008500:	3708      	adds	r7, #8
 8008502:	46bd      	mov	sp, r7
 8008504:	bd80      	pop	{r7, pc}
 8008506:	bf00      	nop
 8008508:	20001a40 	.word	0x20001a40
 800850c:	40005c00 	.word	0x40005c00

08008510 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008510:	b580      	push	{r7, lr}
 8008512:	b084      	sub	sp, #16
 8008514:	af00      	add	r7, sp, #0
 8008516:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008518:	2300      	movs	r3, #0
 800851a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800851c:	2300      	movs	r3, #0
 800851e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008526:	4618      	mov	r0, r3
 8008528:	f7f9 fe6d 	bl	8002206 <HAL_PCD_Start>
 800852c:	4603      	mov	r3, r0
 800852e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008530:	7bfb      	ldrb	r3, [r7, #15]
 8008532:	4618      	mov	r0, r3
 8008534:	f000 f94e 	bl	80087d4 <USBD_Get_USB_Status>
 8008538:	4603      	mov	r3, r0
 800853a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800853c:	7bbb      	ldrb	r3, [r7, #14]
}
 800853e:	4618      	mov	r0, r3
 8008540:	3710      	adds	r7, #16
 8008542:	46bd      	mov	sp, r7
 8008544:	bd80      	pop	{r7, pc}

08008546 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008546:	b580      	push	{r7, lr}
 8008548:	b084      	sub	sp, #16
 800854a:	af00      	add	r7, sp, #0
 800854c:	6078      	str	r0, [r7, #4]
 800854e:	4608      	mov	r0, r1
 8008550:	4611      	mov	r1, r2
 8008552:	461a      	mov	r2, r3
 8008554:	4603      	mov	r3, r0
 8008556:	70fb      	strb	r3, [r7, #3]
 8008558:	460b      	mov	r3, r1
 800855a:	70bb      	strb	r3, [r7, #2]
 800855c:	4613      	mov	r3, r2
 800855e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008560:	2300      	movs	r3, #0
 8008562:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008564:	2300      	movs	r3, #0
 8008566:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800856e:	78bb      	ldrb	r3, [r7, #2]
 8008570:	883a      	ldrh	r2, [r7, #0]
 8008572:	78f9      	ldrb	r1, [r7, #3]
 8008574:	f7f9 ffe7 	bl	8002546 <HAL_PCD_EP_Open>
 8008578:	4603      	mov	r3, r0
 800857a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800857c:	7bfb      	ldrb	r3, [r7, #15]
 800857e:	4618      	mov	r0, r3
 8008580:	f000 f928 	bl	80087d4 <USBD_Get_USB_Status>
 8008584:	4603      	mov	r3, r0
 8008586:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008588:	7bbb      	ldrb	r3, [r7, #14]
}
 800858a:	4618      	mov	r0, r3
 800858c:	3710      	adds	r7, #16
 800858e:	46bd      	mov	sp, r7
 8008590:	bd80      	pop	{r7, pc}

08008592 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008592:	b580      	push	{r7, lr}
 8008594:	b084      	sub	sp, #16
 8008596:	af00      	add	r7, sp, #0
 8008598:	6078      	str	r0, [r7, #4]
 800859a:	460b      	mov	r3, r1
 800859c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800859e:	2300      	movs	r3, #0
 80085a0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80085a2:	2300      	movs	r3, #0
 80085a4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80085ac:	78fa      	ldrb	r2, [r7, #3]
 80085ae:	4611      	mov	r1, r2
 80085b0:	4618      	mov	r0, r3
 80085b2:	f7fa f82e 	bl	8002612 <HAL_PCD_EP_Close>
 80085b6:	4603      	mov	r3, r0
 80085b8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80085ba:	7bfb      	ldrb	r3, [r7, #15]
 80085bc:	4618      	mov	r0, r3
 80085be:	f000 f909 	bl	80087d4 <USBD_Get_USB_Status>
 80085c2:	4603      	mov	r3, r0
 80085c4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80085c6:	7bbb      	ldrb	r3, [r7, #14]
}
 80085c8:	4618      	mov	r0, r3
 80085ca:	3710      	adds	r7, #16
 80085cc:	46bd      	mov	sp, r7
 80085ce:	bd80      	pop	{r7, pc}

080085d0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80085d0:	b580      	push	{r7, lr}
 80085d2:	b084      	sub	sp, #16
 80085d4:	af00      	add	r7, sp, #0
 80085d6:	6078      	str	r0, [r7, #4]
 80085d8:	460b      	mov	r3, r1
 80085da:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80085dc:	2300      	movs	r3, #0
 80085de:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80085e0:	2300      	movs	r3, #0
 80085e2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80085ea:	78fa      	ldrb	r2, [r7, #3]
 80085ec:	4611      	mov	r1, r2
 80085ee:	4618      	mov	r0, r3
 80085f0:	f7fa f8ee 	bl	80027d0 <HAL_PCD_EP_SetStall>
 80085f4:	4603      	mov	r3, r0
 80085f6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80085f8:	7bfb      	ldrb	r3, [r7, #15]
 80085fa:	4618      	mov	r0, r3
 80085fc:	f000 f8ea 	bl	80087d4 <USBD_Get_USB_Status>
 8008600:	4603      	mov	r3, r0
 8008602:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008604:	7bbb      	ldrb	r3, [r7, #14]
}
 8008606:	4618      	mov	r0, r3
 8008608:	3710      	adds	r7, #16
 800860a:	46bd      	mov	sp, r7
 800860c:	bd80      	pop	{r7, pc}

0800860e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800860e:	b580      	push	{r7, lr}
 8008610:	b084      	sub	sp, #16
 8008612:	af00      	add	r7, sp, #0
 8008614:	6078      	str	r0, [r7, #4]
 8008616:	460b      	mov	r3, r1
 8008618:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800861a:	2300      	movs	r3, #0
 800861c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800861e:	2300      	movs	r3, #0
 8008620:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008628:	78fa      	ldrb	r2, [r7, #3]
 800862a:	4611      	mov	r1, r2
 800862c:	4618      	mov	r0, r3
 800862e:	f7fa f92f 	bl	8002890 <HAL_PCD_EP_ClrStall>
 8008632:	4603      	mov	r3, r0
 8008634:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008636:	7bfb      	ldrb	r3, [r7, #15]
 8008638:	4618      	mov	r0, r3
 800863a:	f000 f8cb 	bl	80087d4 <USBD_Get_USB_Status>
 800863e:	4603      	mov	r3, r0
 8008640:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008642:	7bbb      	ldrb	r3, [r7, #14]
}
 8008644:	4618      	mov	r0, r3
 8008646:	3710      	adds	r7, #16
 8008648:	46bd      	mov	sp, r7
 800864a:	bd80      	pop	{r7, pc}

0800864c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800864c:	b480      	push	{r7}
 800864e:	b085      	sub	sp, #20
 8008650:	af00      	add	r7, sp, #0
 8008652:	6078      	str	r0, [r7, #4]
 8008654:	460b      	mov	r3, r1
 8008656:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800865e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008660:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008664:	2b00      	cmp	r3, #0
 8008666:	da0c      	bge.n	8008682 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008668:	78fb      	ldrb	r3, [r7, #3]
 800866a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800866e:	68f9      	ldr	r1, [r7, #12]
 8008670:	1c5a      	adds	r2, r3, #1
 8008672:	4613      	mov	r3, r2
 8008674:	009b      	lsls	r3, r3, #2
 8008676:	4413      	add	r3, r2
 8008678:	00db      	lsls	r3, r3, #3
 800867a:	440b      	add	r3, r1
 800867c:	3302      	adds	r3, #2
 800867e:	781b      	ldrb	r3, [r3, #0]
 8008680:	e00b      	b.n	800869a <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008682:	78fb      	ldrb	r3, [r7, #3]
 8008684:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008688:	68f9      	ldr	r1, [r7, #12]
 800868a:	4613      	mov	r3, r2
 800868c:	009b      	lsls	r3, r3, #2
 800868e:	4413      	add	r3, r2
 8008690:	00db      	lsls	r3, r3, #3
 8008692:	440b      	add	r3, r1
 8008694:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 8008698:	781b      	ldrb	r3, [r3, #0]
  }
}
 800869a:	4618      	mov	r0, r3
 800869c:	3714      	adds	r7, #20
 800869e:	46bd      	mov	sp, r7
 80086a0:	bc80      	pop	{r7}
 80086a2:	4770      	bx	lr

080086a4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80086a4:	b580      	push	{r7, lr}
 80086a6:	b084      	sub	sp, #16
 80086a8:	af00      	add	r7, sp, #0
 80086aa:	6078      	str	r0, [r7, #4]
 80086ac:	460b      	mov	r3, r1
 80086ae:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80086b0:	2300      	movs	r3, #0
 80086b2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80086b4:	2300      	movs	r3, #0
 80086b6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80086be:	78fa      	ldrb	r2, [r7, #3]
 80086c0:	4611      	mov	r1, r2
 80086c2:	4618      	mov	r0, r3
 80086c4:	f7f9 ff1a 	bl	80024fc <HAL_PCD_SetAddress>
 80086c8:	4603      	mov	r3, r0
 80086ca:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80086cc:	7bfb      	ldrb	r3, [r7, #15]
 80086ce:	4618      	mov	r0, r3
 80086d0:	f000 f880 	bl	80087d4 <USBD_Get_USB_Status>
 80086d4:	4603      	mov	r3, r0
 80086d6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80086d8:	7bbb      	ldrb	r3, [r7, #14]
}
 80086da:	4618      	mov	r0, r3
 80086dc:	3710      	adds	r7, #16
 80086de:	46bd      	mov	sp, r7
 80086e0:	bd80      	pop	{r7, pc}

080086e2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80086e2:	b580      	push	{r7, lr}
 80086e4:	b086      	sub	sp, #24
 80086e6:	af00      	add	r7, sp, #0
 80086e8:	60f8      	str	r0, [r7, #12]
 80086ea:	607a      	str	r2, [r7, #4]
 80086ec:	461a      	mov	r2, r3
 80086ee:	460b      	mov	r3, r1
 80086f0:	72fb      	strb	r3, [r7, #11]
 80086f2:	4613      	mov	r3, r2
 80086f4:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80086f6:	2300      	movs	r3, #0
 80086f8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80086fa:	2300      	movs	r3, #0
 80086fc:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008704:	893b      	ldrh	r3, [r7, #8]
 8008706:	7af9      	ldrb	r1, [r7, #11]
 8008708:	687a      	ldr	r2, [r7, #4]
 800870a:	f7fa f81e 	bl	800274a <HAL_PCD_EP_Transmit>
 800870e:	4603      	mov	r3, r0
 8008710:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008712:	7dfb      	ldrb	r3, [r7, #23]
 8008714:	4618      	mov	r0, r3
 8008716:	f000 f85d 	bl	80087d4 <USBD_Get_USB_Status>
 800871a:	4603      	mov	r3, r0
 800871c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800871e:	7dbb      	ldrb	r3, [r7, #22]
}
 8008720:	4618      	mov	r0, r3
 8008722:	3718      	adds	r7, #24
 8008724:	46bd      	mov	sp, r7
 8008726:	bd80      	pop	{r7, pc}

08008728 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8008728:	b580      	push	{r7, lr}
 800872a:	b086      	sub	sp, #24
 800872c:	af00      	add	r7, sp, #0
 800872e:	60f8      	str	r0, [r7, #12]
 8008730:	607a      	str	r2, [r7, #4]
 8008732:	461a      	mov	r2, r3
 8008734:	460b      	mov	r3, r1
 8008736:	72fb      	strb	r3, [r7, #11]
 8008738:	4613      	mov	r3, r2
 800873a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800873c:	2300      	movs	r3, #0
 800873e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008740:	2300      	movs	r3, #0
 8008742:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800874a:	893b      	ldrh	r3, [r7, #8]
 800874c:	7af9      	ldrb	r1, [r7, #11]
 800874e:	687a      	ldr	r2, [r7, #4]
 8008750:	f7f9 ffa7 	bl	80026a2 <HAL_PCD_EP_Receive>
 8008754:	4603      	mov	r3, r0
 8008756:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008758:	7dfb      	ldrb	r3, [r7, #23]
 800875a:	4618      	mov	r0, r3
 800875c:	f000 f83a 	bl	80087d4 <USBD_Get_USB_Status>
 8008760:	4603      	mov	r3, r0
 8008762:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008764:	7dbb      	ldrb	r3, [r7, #22]
}
 8008766:	4618      	mov	r0, r3
 8008768:	3718      	adds	r7, #24
 800876a:	46bd      	mov	sp, r7
 800876c:	bd80      	pop	{r7, pc}

0800876e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800876e:	b580      	push	{r7, lr}
 8008770:	b082      	sub	sp, #8
 8008772:	af00      	add	r7, sp, #0
 8008774:	6078      	str	r0, [r7, #4]
 8008776:	460b      	mov	r3, r1
 8008778:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008780:	78fa      	ldrb	r2, [r7, #3]
 8008782:	4611      	mov	r1, r2
 8008784:	4618      	mov	r0, r3
 8008786:	f7f9 ffc9 	bl	800271c <HAL_PCD_EP_GetRxCount>
 800878a:	4603      	mov	r3, r0
}
 800878c:	4618      	mov	r0, r3
 800878e:	3708      	adds	r7, #8
 8008790:	46bd      	mov	sp, r7
 8008792:	bd80      	pop	{r7, pc}

08008794 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008794:	b480      	push	{r7}
 8008796:	b083      	sub	sp, #12
 8008798:	af00      	add	r7, sp, #0
 800879a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800879c:	4b02      	ldr	r3, [pc, #8]	; (80087a8 <USBD_static_malloc+0x14>)
}
 800879e:	4618      	mov	r0, r3
 80087a0:	370c      	adds	r7, #12
 80087a2:	46bd      	mov	sp, r7
 80087a4:	bc80      	pop	{r7}
 80087a6:	4770      	bx	lr
 80087a8:	2000037c 	.word	0x2000037c

080087ac <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80087ac:	b480      	push	{r7}
 80087ae:	b083      	sub	sp, #12
 80087b0:	af00      	add	r7, sp, #0
 80087b2:	6078      	str	r0, [r7, #4]

}
 80087b4:	bf00      	nop
 80087b6:	370c      	adds	r7, #12
 80087b8:	46bd      	mov	sp, r7
 80087ba:	bc80      	pop	{r7}
 80087bc:	4770      	bx	lr

080087be <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80087be:	b480      	push	{r7}
 80087c0:	b083      	sub	sp, #12
 80087c2:	af00      	add	r7, sp, #0
 80087c4:	6078      	str	r0, [r7, #4]
 80087c6:	460b      	mov	r3, r1
 80087c8:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 80087ca:	bf00      	nop
 80087cc:	370c      	adds	r7, #12
 80087ce:	46bd      	mov	sp, r7
 80087d0:	bc80      	pop	{r7}
 80087d2:	4770      	bx	lr

080087d4 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80087d4:	b480      	push	{r7}
 80087d6:	b085      	sub	sp, #20
 80087d8:	af00      	add	r7, sp, #0
 80087da:	4603      	mov	r3, r0
 80087dc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80087de:	2300      	movs	r3, #0
 80087e0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80087e2:	79fb      	ldrb	r3, [r7, #7]
 80087e4:	2b03      	cmp	r3, #3
 80087e6:	d817      	bhi.n	8008818 <USBD_Get_USB_Status+0x44>
 80087e8:	a201      	add	r2, pc, #4	; (adr r2, 80087f0 <USBD_Get_USB_Status+0x1c>)
 80087ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087ee:	bf00      	nop
 80087f0:	08008801 	.word	0x08008801
 80087f4:	08008807 	.word	0x08008807
 80087f8:	0800880d 	.word	0x0800880d
 80087fc:	08008813 	.word	0x08008813
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008800:	2300      	movs	r3, #0
 8008802:	73fb      	strb	r3, [r7, #15]
    break;
 8008804:	e00b      	b.n	800881e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008806:	2302      	movs	r3, #2
 8008808:	73fb      	strb	r3, [r7, #15]
    break;
 800880a:	e008      	b.n	800881e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800880c:	2301      	movs	r3, #1
 800880e:	73fb      	strb	r3, [r7, #15]
    break;
 8008810:	e005      	b.n	800881e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008812:	2302      	movs	r3, #2
 8008814:	73fb      	strb	r3, [r7, #15]
    break;
 8008816:	e002      	b.n	800881e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008818:	2302      	movs	r3, #2
 800881a:	73fb      	strb	r3, [r7, #15]
    break;
 800881c:	bf00      	nop
  }
  return usb_status;
 800881e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008820:	4618      	mov	r0, r3
 8008822:	3714      	adds	r7, #20
 8008824:	46bd      	mov	sp, r7
 8008826:	bc80      	pop	{r7}
 8008828:	4770      	bx	lr
 800882a:	bf00      	nop

0800882c <atoi>:
 800882c:	220a      	movs	r2, #10
 800882e:	2100      	movs	r1, #0
 8008830:	f000 b8b2 	b.w	8008998 <strtol>

08008834 <__libc_init_array>:
 8008834:	b570      	push	{r4, r5, r6, lr}
 8008836:	2500      	movs	r5, #0
 8008838:	4e0c      	ldr	r6, [pc, #48]	; (800886c <__libc_init_array+0x38>)
 800883a:	4c0d      	ldr	r4, [pc, #52]	; (8008870 <__libc_init_array+0x3c>)
 800883c:	1ba4      	subs	r4, r4, r6
 800883e:	10a4      	asrs	r4, r4, #2
 8008840:	42a5      	cmp	r5, r4
 8008842:	d109      	bne.n	8008858 <__libc_init_array+0x24>
 8008844:	f000 f8e0 	bl	8008a08 <_init>
 8008848:	2500      	movs	r5, #0
 800884a:	4e0a      	ldr	r6, [pc, #40]	; (8008874 <__libc_init_array+0x40>)
 800884c:	4c0a      	ldr	r4, [pc, #40]	; (8008878 <__libc_init_array+0x44>)
 800884e:	1ba4      	subs	r4, r4, r6
 8008850:	10a4      	asrs	r4, r4, #2
 8008852:	42a5      	cmp	r5, r4
 8008854:	d105      	bne.n	8008862 <__libc_init_array+0x2e>
 8008856:	bd70      	pop	{r4, r5, r6, pc}
 8008858:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800885c:	4798      	blx	r3
 800885e:	3501      	adds	r5, #1
 8008860:	e7ee      	b.n	8008840 <__libc_init_array+0xc>
 8008862:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008866:	4798      	blx	r3
 8008868:	3501      	adds	r5, #1
 800886a:	e7f2      	b.n	8008852 <__libc_init_array+0x1e>
 800886c:	08008bb4 	.word	0x08008bb4
 8008870:	08008bb4 	.word	0x08008bb4
 8008874:	08008bb4 	.word	0x08008bb4
 8008878:	08008bb8 	.word	0x08008bb8

0800887c <memcpy>:
 800887c:	b510      	push	{r4, lr}
 800887e:	1e43      	subs	r3, r0, #1
 8008880:	440a      	add	r2, r1
 8008882:	4291      	cmp	r1, r2
 8008884:	d100      	bne.n	8008888 <memcpy+0xc>
 8008886:	bd10      	pop	{r4, pc}
 8008888:	f811 4b01 	ldrb.w	r4, [r1], #1
 800888c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008890:	e7f7      	b.n	8008882 <memcpy+0x6>

08008892 <memset>:
 8008892:	4603      	mov	r3, r0
 8008894:	4402      	add	r2, r0
 8008896:	4293      	cmp	r3, r2
 8008898:	d100      	bne.n	800889c <memset+0xa>
 800889a:	4770      	bx	lr
 800889c:	f803 1b01 	strb.w	r1, [r3], #1
 80088a0:	e7f9      	b.n	8008896 <memset+0x4>

080088a2 <_strtol_l.isra.0>:
 80088a2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80088a6:	4680      	mov	r8, r0
 80088a8:	4689      	mov	r9, r1
 80088aa:	4692      	mov	sl, r2
 80088ac:	461e      	mov	r6, r3
 80088ae:	460f      	mov	r7, r1
 80088b0:	463d      	mov	r5, r7
 80088b2:	9808      	ldr	r0, [sp, #32]
 80088b4:	f815 4b01 	ldrb.w	r4, [r5], #1
 80088b8:	f000 f884 	bl	80089c4 <__locale_ctype_ptr_l>
 80088bc:	4420      	add	r0, r4
 80088be:	7843      	ldrb	r3, [r0, #1]
 80088c0:	f013 0308 	ands.w	r3, r3, #8
 80088c4:	d132      	bne.n	800892c <_strtol_l.isra.0+0x8a>
 80088c6:	2c2d      	cmp	r4, #45	; 0x2d
 80088c8:	d132      	bne.n	8008930 <_strtol_l.isra.0+0x8e>
 80088ca:	2201      	movs	r2, #1
 80088cc:	787c      	ldrb	r4, [r7, #1]
 80088ce:	1cbd      	adds	r5, r7, #2
 80088d0:	2e00      	cmp	r6, #0
 80088d2:	d05d      	beq.n	8008990 <_strtol_l.isra.0+0xee>
 80088d4:	2e10      	cmp	r6, #16
 80088d6:	d109      	bne.n	80088ec <_strtol_l.isra.0+0x4a>
 80088d8:	2c30      	cmp	r4, #48	; 0x30
 80088da:	d107      	bne.n	80088ec <_strtol_l.isra.0+0x4a>
 80088dc:	782b      	ldrb	r3, [r5, #0]
 80088de:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80088e2:	2b58      	cmp	r3, #88	; 0x58
 80088e4:	d14f      	bne.n	8008986 <_strtol_l.isra.0+0xe4>
 80088e6:	2610      	movs	r6, #16
 80088e8:	786c      	ldrb	r4, [r5, #1]
 80088ea:	3502      	adds	r5, #2
 80088ec:	2a00      	cmp	r2, #0
 80088ee:	bf14      	ite	ne
 80088f0:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 80088f4:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 80088f8:	2700      	movs	r7, #0
 80088fa:	fbb1 fcf6 	udiv	ip, r1, r6
 80088fe:	4638      	mov	r0, r7
 8008900:	fb06 1e1c 	mls	lr, r6, ip, r1
 8008904:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8008908:	2b09      	cmp	r3, #9
 800890a:	d817      	bhi.n	800893c <_strtol_l.isra.0+0x9a>
 800890c:	461c      	mov	r4, r3
 800890e:	42a6      	cmp	r6, r4
 8008910:	dd23      	ble.n	800895a <_strtol_l.isra.0+0xb8>
 8008912:	1c7b      	adds	r3, r7, #1
 8008914:	d007      	beq.n	8008926 <_strtol_l.isra.0+0x84>
 8008916:	4584      	cmp	ip, r0
 8008918:	d31c      	bcc.n	8008954 <_strtol_l.isra.0+0xb2>
 800891a:	d101      	bne.n	8008920 <_strtol_l.isra.0+0x7e>
 800891c:	45a6      	cmp	lr, r4
 800891e:	db19      	blt.n	8008954 <_strtol_l.isra.0+0xb2>
 8008920:	2701      	movs	r7, #1
 8008922:	fb00 4006 	mla	r0, r0, r6, r4
 8008926:	f815 4b01 	ldrb.w	r4, [r5], #1
 800892a:	e7eb      	b.n	8008904 <_strtol_l.isra.0+0x62>
 800892c:	462f      	mov	r7, r5
 800892e:	e7bf      	b.n	80088b0 <_strtol_l.isra.0+0xe>
 8008930:	2c2b      	cmp	r4, #43	; 0x2b
 8008932:	bf04      	itt	eq
 8008934:	1cbd      	addeq	r5, r7, #2
 8008936:	787c      	ldrbeq	r4, [r7, #1]
 8008938:	461a      	mov	r2, r3
 800893a:	e7c9      	b.n	80088d0 <_strtol_l.isra.0+0x2e>
 800893c:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8008940:	2b19      	cmp	r3, #25
 8008942:	d801      	bhi.n	8008948 <_strtol_l.isra.0+0xa6>
 8008944:	3c37      	subs	r4, #55	; 0x37
 8008946:	e7e2      	b.n	800890e <_strtol_l.isra.0+0x6c>
 8008948:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 800894c:	2b19      	cmp	r3, #25
 800894e:	d804      	bhi.n	800895a <_strtol_l.isra.0+0xb8>
 8008950:	3c57      	subs	r4, #87	; 0x57
 8008952:	e7dc      	b.n	800890e <_strtol_l.isra.0+0x6c>
 8008954:	f04f 37ff 	mov.w	r7, #4294967295
 8008958:	e7e5      	b.n	8008926 <_strtol_l.isra.0+0x84>
 800895a:	1c7b      	adds	r3, r7, #1
 800895c:	d108      	bne.n	8008970 <_strtol_l.isra.0+0xce>
 800895e:	2322      	movs	r3, #34	; 0x22
 8008960:	4608      	mov	r0, r1
 8008962:	f8c8 3000 	str.w	r3, [r8]
 8008966:	f1ba 0f00 	cmp.w	sl, #0
 800896a:	d107      	bne.n	800897c <_strtol_l.isra.0+0xda>
 800896c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008970:	b102      	cbz	r2, 8008974 <_strtol_l.isra.0+0xd2>
 8008972:	4240      	negs	r0, r0
 8008974:	f1ba 0f00 	cmp.w	sl, #0
 8008978:	d0f8      	beq.n	800896c <_strtol_l.isra.0+0xca>
 800897a:	b10f      	cbz	r7, 8008980 <_strtol_l.isra.0+0xde>
 800897c:	f105 39ff 	add.w	r9, r5, #4294967295
 8008980:	f8ca 9000 	str.w	r9, [sl]
 8008984:	e7f2      	b.n	800896c <_strtol_l.isra.0+0xca>
 8008986:	2430      	movs	r4, #48	; 0x30
 8008988:	2e00      	cmp	r6, #0
 800898a:	d1af      	bne.n	80088ec <_strtol_l.isra.0+0x4a>
 800898c:	2608      	movs	r6, #8
 800898e:	e7ad      	b.n	80088ec <_strtol_l.isra.0+0x4a>
 8008990:	2c30      	cmp	r4, #48	; 0x30
 8008992:	d0a3      	beq.n	80088dc <_strtol_l.isra.0+0x3a>
 8008994:	260a      	movs	r6, #10
 8008996:	e7a9      	b.n	80088ec <_strtol_l.isra.0+0x4a>

08008998 <strtol>:
 8008998:	4b08      	ldr	r3, [pc, #32]	; (80089bc <strtol+0x24>)
 800899a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800899c:	681c      	ldr	r4, [r3, #0]
 800899e:	4d08      	ldr	r5, [pc, #32]	; (80089c0 <strtol+0x28>)
 80089a0:	6a23      	ldr	r3, [r4, #32]
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	bf08      	it	eq
 80089a6:	462b      	moveq	r3, r5
 80089a8:	9300      	str	r3, [sp, #0]
 80089aa:	4613      	mov	r3, r2
 80089ac:	460a      	mov	r2, r1
 80089ae:	4601      	mov	r1, r0
 80089b0:	4620      	mov	r0, r4
 80089b2:	f7ff ff76 	bl	80088a2 <_strtol_l.isra.0>
 80089b6:	b003      	add	sp, #12
 80089b8:	bd30      	pop	{r4, r5, pc}
 80089ba:	bf00      	nop
 80089bc:	20000180 	.word	0x20000180
 80089c0:	200001e4 	.word	0x200001e4

080089c4 <__locale_ctype_ptr_l>:
 80089c4:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 80089c8:	4770      	bx	lr

080089ca <__ascii_mbtowc>:
 80089ca:	b082      	sub	sp, #8
 80089cc:	b901      	cbnz	r1, 80089d0 <__ascii_mbtowc+0x6>
 80089ce:	a901      	add	r1, sp, #4
 80089d0:	b142      	cbz	r2, 80089e4 <__ascii_mbtowc+0x1a>
 80089d2:	b14b      	cbz	r3, 80089e8 <__ascii_mbtowc+0x1e>
 80089d4:	7813      	ldrb	r3, [r2, #0]
 80089d6:	600b      	str	r3, [r1, #0]
 80089d8:	7812      	ldrb	r2, [r2, #0]
 80089da:	1c10      	adds	r0, r2, #0
 80089dc:	bf18      	it	ne
 80089de:	2001      	movne	r0, #1
 80089e0:	b002      	add	sp, #8
 80089e2:	4770      	bx	lr
 80089e4:	4610      	mov	r0, r2
 80089e6:	e7fb      	b.n	80089e0 <__ascii_mbtowc+0x16>
 80089e8:	f06f 0001 	mvn.w	r0, #1
 80089ec:	e7f8      	b.n	80089e0 <__ascii_mbtowc+0x16>

080089ee <__ascii_wctomb>:
 80089ee:	b149      	cbz	r1, 8008a04 <__ascii_wctomb+0x16>
 80089f0:	2aff      	cmp	r2, #255	; 0xff
 80089f2:	bf8b      	itete	hi
 80089f4:	238a      	movhi	r3, #138	; 0x8a
 80089f6:	700a      	strbls	r2, [r1, #0]
 80089f8:	6003      	strhi	r3, [r0, #0]
 80089fa:	2001      	movls	r0, #1
 80089fc:	bf88      	it	hi
 80089fe:	f04f 30ff 	movhi.w	r0, #4294967295
 8008a02:	4770      	bx	lr
 8008a04:	4608      	mov	r0, r1
 8008a06:	4770      	bx	lr

08008a08 <_init>:
 8008a08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a0a:	bf00      	nop
 8008a0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008a0e:	bc08      	pop	{r3}
 8008a10:	469e      	mov	lr, r3
 8008a12:	4770      	bx	lr

08008a14 <_fini>:
 8008a14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a16:	bf00      	nop
 8008a18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008a1a:	bc08      	pop	{r3}
 8008a1c:	469e      	mov	lr, r3
 8008a1e:	4770      	bx	lr
