
UNITED_BLOCK_04_09_2020_Clear.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000072a0  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000194  080073ac  080073ac  000173ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007540  08007540  00020350  2**0
                  CONTENTS
  4 .ARM          00000000  08007540  08007540  00020350  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007540  08007540  00020350  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007540  08007540  00017540  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007544  08007544  00017544  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000350  20000000  08007548  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000032e8  20000350  08007898  00020350  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20003638  08007898  00023638  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020350  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001483e  00000000  00000000  00020379  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000329c  00000000  00000000  00034bb7  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000ed8  00000000  00000000  00037e58  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000d50  00000000  00000000  00038d30  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001724c  00000000  00000000  00039a80  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000ef34  00000000  00000000  00050ccc  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00074190  00000000  00000000  0005fc00  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000d3d90  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003cd0  00000000  00000000  000d3e0c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000350 	.word	0x20000350
 8000128:	00000000 	.word	0x00000000
 800012c:	08007394 	.word	0x08007394

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000354 	.word	0x20000354
 8000148:	08007394 	.word	0x08007394

0800014c <Start_Symbol>:
	char mess[] = "Done!\n";
	CDC_Transmit_FS(&mess, strlen(mess));
}

void Start_Symbol()
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
	uint16_t mess = 0xFFFF;
 8000152:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000156:	80fb      	strh	r3, [r7, #6]
	while(CDC_Transmit_FS(&mess, sizeof(mess)) == USBD_BUSY);
 8000158:	bf00      	nop
 800015a:	1dbb      	adds	r3, r7, #6
 800015c:	2102      	movs	r1, #2
 800015e:	4618      	mov	r0, r3
 8000160:	f006 fc50 	bl	8006a04 <CDC_Transmit_FS>
 8000164:	4603      	mov	r3, r0
 8000166:	2b01      	cmp	r3, #1
 8000168:	d0f7      	beq.n	800015a <Start_Symbol+0xe>
}
 800016a:	bf00      	nop
 800016c:	3708      	adds	r7, #8
 800016e:	46bd      	mov	sp, r7
 8000170:	bd80      	pop	{r7, pc}

08000172 <Stop_Symbol>:

void Stop_Symbol()
{
 8000172:	b580      	push	{r7, lr}
 8000174:	b082      	sub	sp, #8
 8000176:	af00      	add	r7, sp, #0
	uint16_t mess = 0xFFFE;
 8000178:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 800017c:	80fb      	strh	r3, [r7, #6]
	while(CDC_Transmit_FS(&mess, sizeof(mess)) == USBD_BUSY);
 800017e:	bf00      	nop
 8000180:	1dbb      	adds	r3, r7, #6
 8000182:	2102      	movs	r1, #2
 8000184:	4618      	mov	r0, r3
 8000186:	f006 fc3d 	bl	8006a04 <CDC_Transmit_FS>
 800018a:	4603      	mov	r3, r0
 800018c:	2b01      	cmp	r3, #1
 800018e:	d0f7      	beq.n	8000180 <Stop_Symbol+0xe>
}
 8000190:	bf00      	nop
 8000192:	3708      	adds	r7, #8
 8000194:	46bd      	mov	sp, r7
 8000196:	bd80      	pop	{r7, pc}

08000198 <ADC_Trigger_Mod>:

void ADC_Trigger_Mod()
{
 8000198:	b580      	push	{r7, lr}
 800019a:	af00      	add	r7, sp, #0
	DMA_Triggered_Part_Flag = 1;
 800019c:	4b1b      	ldr	r3, [pc, #108]	; (800020c <ADC_Trigger_Mod+0x74>)
 800019e:	2201      	movs	r2, #1
 80001a0:	801a      	strh	r2, [r3, #0]
	//DMA_Triggered_I_Part_Cplt = 0;
		if((HAL_ADC_GetValue(&hadc1)>Trigger_Level)&&(DMA_Triggered_I_Part_Cplt == 1))
 80001a2:	481b      	ldr	r0, [pc, #108]	; (8000210 <ADC_Trigger_Mod+0x78>)
 80001a4:	f001 f8e1 	bl	800136a <HAL_ADC_GetValue>
 80001a8:	4602      	mov	r2, r0
 80001aa:	4b1a      	ldr	r3, [pc, #104]	; (8000214 <ADC_Trigger_Mod+0x7c>)
 80001ac:	881b      	ldrh	r3, [r3, #0]
 80001ae:	429a      	cmp	r2, r3
 80001b0:	d92a      	bls.n	8000208 <ADC_Trigger_Mod+0x70>
 80001b2:	4b19      	ldr	r3, [pc, #100]	; (8000218 <ADC_Trigger_Mod+0x80>)
 80001b4:	881b      	ldrh	r3, [r3, #0]
 80001b6:	b29b      	uxth	r3, r3
 80001b8:	2b01      	cmp	r3, #1
 80001ba:	d125      	bne.n	8000208 <ADC_Trigger_Mod+0x70>
		{
			DMA_Triggered_Part_Flag = 2;
 80001bc:	4b13      	ldr	r3, [pc, #76]	; (800020c <ADC_Trigger_Mod+0x74>)
 80001be:	2202      	movs	r2, #2
 80001c0:	801a      	strh	r2, [r3, #0]
			while(DMA_Triggered_Part_Flag != 0){}
 80001c2:	bf00      	nop
 80001c4:	4b11      	ldr	r3, [pc, #68]	; (800020c <ADC_Trigger_Mod+0x74>)
 80001c6:	881b      	ldrh	r3, [r3, #0]
 80001c8:	b29b      	uxth	r3, r3
 80001ca:	2b00      	cmp	r3, #0
 80001cc:	d1fa      	bne.n	80001c4 <ADC_Trigger_Mod+0x2c>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_SET);
 80001ce:	2201      	movs	r2, #1
 80001d0:	2104      	movs	r1, #4
 80001d2:	4812      	ldr	r0, [pc, #72]	; (800021c <ADC_Trigger_Mod+0x84>)
 80001d4:	f001 fff4 	bl	80021c0 <HAL_GPIO_WritePin>
			HAL_Delay(1);
 80001d8:	2001      	movs	r0, #1
 80001da:	f000 fdfb 	bl	8000dd4 <HAL_Delay>
			Start_Symbol();
 80001de:	f7ff ffb5 	bl	800014c <Start_Symbol>
			while(CDC_Transmit_FS((uint8_t*)&ADC_CDC_Transmit_Buf, sizeof(uint16_t)*ADC_DMA_Half_Len*3) == USBD_BUSY);
 80001e2:	bf00      	nop
 80001e4:	f44f 7196 	mov.w	r1, #300	; 0x12c
 80001e8:	480d      	ldr	r0, [pc, #52]	; (8000220 <ADC_Trigger_Mod+0x88>)
 80001ea:	f006 fc0b 	bl	8006a04 <CDC_Transmit_FS>
 80001ee:	4603      	mov	r3, r0
 80001f0:	2b01      	cmp	r3, #1
 80001f2:	d0f7      	beq.n	80001e4 <ADC_Trigger_Mod+0x4c>
			//DMA_Triggered_Part_Flag = 0;
			DMA_Triggered_I_Part_Cplt = 0;
 80001f4:	4b08      	ldr	r3, [pc, #32]	; (8000218 <ADC_Trigger_Mod+0x80>)
 80001f6:	2200      	movs	r2, #0
 80001f8:	801a      	strh	r2, [r3, #0]
			Stop_Symbol();
 80001fa:	f7ff ffba 	bl	8000172 <Stop_Symbol>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_RESET);
 80001fe:	2200      	movs	r2, #0
 8000200:	2104      	movs	r1, #4
 8000202:	4806      	ldr	r0, [pc, #24]	; (800021c <ADC_Trigger_Mod+0x84>)
 8000204:	f001 ffdc 	bl	80021c0 <HAL_GPIO_WritePin>
		}
}
 8000208:	bf00      	nop
 800020a:	bd80      	pop	{r7, pc}
 800020c:	20000370 	.word	0x20000370
 8000210:	200006a8 	.word	0x200006a8
 8000214:	20000000 	.word	0x20000000
 8000218:	20000372 	.word	0x20000372
 800021c:	40010800 	.word	0x40010800
 8000220:	20000774 	.word	0x20000774

08000224 <ADC_Stream_Mod>:

void ADC_Stream_Mod()
{
 8000224:	b580      	push	{r7, lr}
 8000226:	af00      	add	r7, sp, #0
	DMA_Stream_Part_Flag = 1;
 8000228:	4b0d      	ldr	r3, [pc, #52]	; (8000260 <ADC_Stream_Mod+0x3c>)
 800022a:	2201      	movs	r2, #1
 800022c:	801a      	strh	r2, [r3, #0]
	while(DMA_Stream_Part_Flag != 0){}
 800022e:	bf00      	nop
 8000230:	4b0b      	ldr	r3, [pc, #44]	; (8000260 <ADC_Stream_Mod+0x3c>)
 8000232:	881b      	ldrh	r3, [r3, #0]
 8000234:	b29b      	uxth	r3, r3
 8000236:	2b00      	cmp	r3, #0
 8000238:	d1fa      	bne.n	8000230 <ADC_Stream_Mod+0xc>
	Start_Symbol();
 800023a:	f7ff ff87 	bl	800014c <Start_Symbol>
	while(CDC_Transmit_FS((uint8_t*)&ADC_CDC_Transmit_Buf, sizeof(uint16_t)*ADC_CDC_Transmit_Len) == USBD_BUSY);
 800023e:	bf00      	nop
 8000240:	f242 7110 	movw	r1, #10000	; 0x2710
 8000244:	4807      	ldr	r0, [pc, #28]	; (8000264 <ADC_Stream_Mod+0x40>)
 8000246:	f006 fbdd 	bl	8006a04 <CDC_Transmit_FS>
 800024a:	4603      	mov	r3, r0
 800024c:	2b01      	cmp	r3, #1
 800024e:	d0f7      	beq.n	8000240 <ADC_Stream_Mod+0x1c>
	Stop_Symbol();
 8000250:	f7ff ff8f 	bl	8000172 <Stop_Symbol>
	DMA_Stream_Part_Flag = 0;
 8000254:	4b02      	ldr	r3, [pc, #8]	; (8000260 <ADC_Stream_Mod+0x3c>)
 8000256:	2200      	movs	r2, #0
 8000258:	801a      	strh	r2, [r3, #0]
}
 800025a:	bf00      	nop
 800025c:	bd80      	pop	{r7, pc}
 800025e:	bf00      	nop
 8000260:	20000374 	.word	0x20000374
 8000264:	20000774 	.word	0x20000774

08000268 <ADC_Trace_Mod>:

void ADC_Trace_Mod()
{
 8000268:	b580      	push	{r7, lr}
 800026a:	af00      	add	r7, sp, #0
	if(DMA_Tracer_Part_Flag == 1)
 800026c:	4b13      	ldr	r3, [pc, #76]	; (80002bc <ADC_Trace_Mod+0x54>)
 800026e:	881b      	ldrh	r3, [r3, #0]
 8000270:	b29b      	uxth	r3, r3
 8000272:	2b01      	cmp	r3, #1
 8000274:	d120      	bne.n	80002b8 <ADC_Trace_Mod+0x50>
	{
		Tracer_Lock = 1;
 8000276:	4b12      	ldr	r3, [pc, #72]	; (80002c0 <ADC_Trace_Mod+0x58>)
 8000278:	2201      	movs	r2, #1
 800027a:	801a      	strh	r2, [r3, #0]
		HAL_ADC_Stop_DMA(&hadc1);
 800027c:	4811      	ldr	r0, [pc, #68]	; (80002c4 <ADC_Trace_Mod+0x5c>)
 800027e:	f001 f82f 	bl	80012e0 <HAL_ADC_Stop_DMA>
		HAL_ADC_Start_DMA(&hadc1, (uint32_t*)&ADC_DMA_Buf, sizeof(uint16_t)*ADC_DMA_Half_Len);
 8000282:	2264      	movs	r2, #100	; 0x64
 8000284:	4910      	ldr	r1, [pc, #64]	; (80002c8 <ADC_Trace_Mod+0x60>)
 8000286:	480f      	ldr	r0, [pc, #60]	; (80002c4 <ADC_Trace_Mod+0x5c>)
 8000288:	f000 ff4c 	bl	8001124 <HAL_ADC_Start_DMA>

		//Trace_Triggered = 1;
		while(DMA_Tracer_Part_Flag != 0){}
 800028c:	bf00      	nop
 800028e:	4b0b      	ldr	r3, [pc, #44]	; (80002bc <ADC_Trace_Mod+0x54>)
 8000290:	881b      	ldrh	r3, [r3, #0]
 8000292:	b29b      	uxth	r3, r3
 8000294:	2b00      	cmp	r3, #0
 8000296:	d1fa      	bne.n	800028e <ADC_Trace_Mod+0x26>
		Start_Symbol();
 8000298:	f7ff ff58 	bl	800014c <Start_Symbol>
		while(CDC_Transmit_FS((uint8_t*)&ADC_CDC_Transmit_Buf, sizeof(uint16_t)*ADC_CDC_Transmit_Len) == USBD_BUSY);
 800029c:	bf00      	nop
 800029e:	f242 7110 	movw	r1, #10000	; 0x2710
 80002a2:	480a      	ldr	r0, [pc, #40]	; (80002cc <ADC_Trace_Mod+0x64>)
 80002a4:	f006 fbae 	bl	8006a04 <CDC_Transmit_FS>
 80002a8:	4603      	mov	r3, r0
 80002aa:	2b01      	cmp	r3, #1
 80002ac:	d0f7      	beq.n	800029e <ADC_Trace_Mod+0x36>
		Stop_Symbol();
 80002ae:	f7ff ff60 	bl	8000172 <Stop_Symbol>

		Tracer_Lock = 0;
 80002b2:	4b03      	ldr	r3, [pc, #12]	; (80002c0 <ADC_Trace_Mod+0x58>)
 80002b4:	2200      	movs	r2, #0
 80002b6:	801a      	strh	r2, [r3, #0]


		//HAL_ADC_Start_DMA(&hadc1, (uint32_t*)&ADC_DMA_Buf, sizeof(uint16_t)*ADC_DMA_Half_Len);
	}

}
 80002b8:	bf00      	nop
 80002ba:	bd80      	pop	{r7, pc}
 80002bc:	20000376 	.word	0x20000376
 80002c0:	20000378 	.word	0x20000378
 80002c4:	200006a8 	.word	0x200006a8
 80002c8:	200005a0 	.word	0x200005a0
 80002cc:	20000774 	.word	0x20000774

080002d0 <DAC_Write>:
	mess = 0xFFFE;
	while(CDC_Transmit_FS(&mess, sizeof(mess)) == USBD_BUSY);
}

void DAC_Write(uint16_t val)
{
 80002d0:	b580      	push	{r7, lr}
 80002d2:	b084      	sub	sp, #16
 80002d4:	af00      	add	r7, sp, #0
 80002d6:	4603      	mov	r3, r0
 80002d8:	80fb      	strh	r3, [r7, #6]
  uint16_t dac_data = 0x7000 | (val&0x0FFF);
 80002da:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80002de:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80002e2:	b21b      	sxth	r3, r3
 80002e4:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 80002e8:	b21b      	sxth	r3, r3
 80002ea:	b29b      	uxth	r3, r3
 80002ec:	81fb      	strh	r3, [r7, #14]
  uint8_t data[2];
  memcpy(&data, &dac_data, sizeof(data));
 80002ee:	89fb      	ldrh	r3, [r7, #14]
 80002f0:	81bb      	strh	r3, [r7, #12]
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 80002f2:	2200      	movs	r2, #0
 80002f4:	2180      	movs	r1, #128	; 0x80
 80002f6:	4809      	ldr	r0, [pc, #36]	; (800031c <DAC_Write+0x4c>)
 80002f8:	f001 ff62 	bl	80021c0 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi1, data, sizeof(data), 0);
 80002fc:	f107 010c 	add.w	r1, r7, #12
 8000300:	2300      	movs	r3, #0
 8000302:	2202      	movs	r2, #2
 8000304:	4806      	ldr	r0, [pc, #24]	; (8000320 <DAC_Write+0x50>)
 8000306:	f003 fc48 	bl	8003b9a <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 800030a:	2201      	movs	r2, #1
 800030c:	2180      	movs	r1, #128	; 0x80
 800030e:	4803      	ldr	r0, [pc, #12]	; (800031c <DAC_Write+0x4c>)
 8000310:	f001 ff56 	bl	80021c0 <HAL_GPIO_WritePin>
}
 8000314:	bf00      	nop
 8000316:	3710      	adds	r7, #16
 8000318:	46bd      	mov	sp, r7
 800031a:	bd80      	pop	{r7, pc}
 800031c:	40010c00 	.word	0x40010c00
 8000320:	2000071c 	.word	0x2000071c

08000324 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000324:	b580      	push	{r7, lr}
 8000326:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000328:	f000 fcf2 	bl	8000d10 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800032c:	f000 f852 	bl	80003d4 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000330:	f000 f942 	bl	80005b8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000334:	f000 f922 	bl	800057c <MX_DMA_Init>
  MX_ADC1_Init();
 8000338:	f000 f8aa 	bl	8000490 <MX_ADC1_Init>
  MX_SPI1_Init();
 800033c:	f000 f8e6 	bl	800050c <MX_SPI1_Init>
  MX_USB_DEVICE_Init();
 8000340:	f006 fa9c 	bl	800687c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  RX_Str[0] = 3;
 8000344:	4b1d      	ldr	r3, [pc, #116]	; (80003bc <main+0x98>)
 8000346:	2203      	movs	r2, #3
 8000348:	701a      	strb	r2, [r3, #0]

  HAL_ADCEx_Calibration_Start(&hadc1);
 800034a:	481d      	ldr	r0, [pc, #116]	; (80003c0 <main+0x9c>)
 800034c:	f001 fa0c 	bl	8001768 <HAL_ADCEx_Calibration_Start>
  HAL_ADC_Start(&hadc1);
 8000350:	481b      	ldr	r0, [pc, #108]	; (80003c0 <main+0x9c>)
 8000352:	f000 fe39 	bl	8000fc8 <HAL_ADC_Start>
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)&ADC_DMA_Buf, sizeof(uint16_t)*ADC_DMA_Half_Len);
 8000356:	2264      	movs	r2, #100	; 0x64
 8000358:	491a      	ldr	r1, [pc, #104]	; (80003c4 <main+0xa0>)
 800035a:	4819      	ldr	r0, [pc, #100]	; (80003c0 <main+0x9c>)
 800035c:	f000 fee2 	bl	8001124 <HAL_ADC_Start_DMA>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	switch(Mode)
 8000360:	4b19      	ldr	r3, [pc, #100]	; (80003c8 <main+0xa4>)
 8000362:	781b      	ldrb	r3, [r3, #0]
 8000364:	b2db      	uxtb	r3, r3
 8000366:	3b01      	subs	r3, #1
 8000368:	2b05      	cmp	r3, #5
 800036a:	d8f9      	bhi.n	8000360 <main+0x3c>
 800036c:	a201      	add	r2, pc, #4	; (adr r2, 8000374 <main+0x50>)
 800036e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000372:	bf00      	nop
 8000374:	0800038d 	.word	0x0800038d
 8000378:	0800039b 	.word	0x0800039b
 800037c:	080003a7 	.word	0x080003a7
 8000380:	080003ad 	.word	0x080003ad
 8000384:	080003b3 	.word	0x080003b3
 8000388:	08000361 	.word	0x08000361
	{
		case Gain:
			DAC_Write(Value);
 800038c:	4b0f      	ldr	r3, [pc, #60]	; (80003cc <main+0xa8>)
 800038e:	881b      	ldrh	r3, [r3, #0]
 8000390:	b29b      	uxth	r3, r3
 8000392:	4618      	mov	r0, r3
 8000394:	f7ff ff9c 	bl	80002d0 <DAC_Write>
			break;
 8000398:	e00e      	b.n	80003b8 <main+0x94>

		case Trigger_Level_Set:
			Trigger_Level = Value;
 800039a:	4b0c      	ldr	r3, [pc, #48]	; (80003cc <main+0xa8>)
 800039c:	881b      	ldrh	r3, [r3, #0]
 800039e:	b29a      	uxth	r2, r3
 80003a0:	4b0b      	ldr	r3, [pc, #44]	; (80003d0 <main+0xac>)
 80003a2:	801a      	strh	r2, [r3, #0]
			break;
 80003a4:	e008      	b.n	80003b8 <main+0x94>

		case Start_Stream:
			ADC_Stream_Mod();
 80003a6:	f7ff ff3d 	bl	8000224 <ADC_Stream_Mod>
			break;
 80003aa:	e005      	b.n	80003b8 <main+0x94>

		case Start_Trace:
			ADC_Trace_Mod();
 80003ac:	f7ff ff5c 	bl	8000268 <ADC_Trace_Mod>
			break;
 80003b0:	e002      	b.n	80003b8 <main+0x94>

		case Start_Trigger:
			ADC_Trigger_Mod();
 80003b2:	f7ff fef1 	bl	8000198 <ADC_Trigger_Mod>
			break;
 80003b6:	bf00      	nop
	switch(Mode)
 80003b8:	e7d2      	b.n	8000360 <main+0x3c>
 80003ba:	bf00      	nop
 80003bc:	20000668 	.word	0x20000668
 80003c0:	200006a8 	.word	0x200006a8
 80003c4:	200005a0 	.word	0x200005a0
 80003c8:	2000036c 	.word	0x2000036c
 80003cc:	2000036e 	.word	0x2000036e
 80003d0:	20000000 	.word	0x20000000

080003d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003d4:	b580      	push	{r7, lr}
 80003d6:	b094      	sub	sp, #80	; 0x50
 80003d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003da:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80003de:	2228      	movs	r2, #40	; 0x28
 80003e0:	2100      	movs	r1, #0
 80003e2:	4618      	mov	r0, r3
 80003e4:	f006 ff1b 	bl	800721e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003e8:	f107 0314 	add.w	r3, r7, #20
 80003ec:	2200      	movs	r2, #0
 80003ee:	601a      	str	r2, [r3, #0]
 80003f0:	605a      	str	r2, [r3, #4]
 80003f2:	609a      	str	r2, [r3, #8]
 80003f4:	60da      	str	r2, [r3, #12]
 80003f6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80003f8:	1d3b      	adds	r3, r7, #4
 80003fa:	2200      	movs	r2, #0
 80003fc:	601a      	str	r2, [r3, #0]
 80003fe:	605a      	str	r2, [r3, #4]
 8000400:	609a      	str	r2, [r3, #8]
 8000402:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000404:	2301      	movs	r3, #1
 8000406:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000408:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800040c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800040e:	2300      	movs	r3, #0
 8000410:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000412:	2301      	movs	r3, #1
 8000414:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000416:	2302      	movs	r3, #2
 8000418:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800041a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800041e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000420:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000424:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000426:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800042a:	4618      	mov	r0, r3
 800042c:	f002 fdda 	bl	8002fe4 <HAL_RCC_OscConfig>
 8000430:	4603      	mov	r3, r0
 8000432:	2b00      	cmp	r3, #0
 8000434:	d001      	beq.n	800043a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000436:	f000 fac5 	bl	80009c4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800043a:	230f      	movs	r3, #15
 800043c:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800043e:	2302      	movs	r3, #2
 8000440:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000442:	2300      	movs	r3, #0
 8000444:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000446:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800044a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800044c:	2300      	movs	r3, #0
 800044e:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000450:	f107 0314 	add.w	r3, r7, #20
 8000454:	2102      	movs	r1, #2
 8000456:	4618      	mov	r0, r3
 8000458:	f003 f844 	bl	80034e4 <HAL_RCC_ClockConfig>
 800045c:	4603      	mov	r3, r0
 800045e:	2b00      	cmp	r3, #0
 8000460:	d001      	beq.n	8000466 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000462:	f000 faaf 	bl	80009c4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_USB;
 8000466:	2312      	movs	r3, #18
 8000468:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 800046a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800046e:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8000470:	2300      	movs	r3, #0
 8000472:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000474:	1d3b      	adds	r3, r7, #4
 8000476:	4618      	mov	r0, r3
 8000478:	f003 f9bc 	bl	80037f4 <HAL_RCCEx_PeriphCLKConfig>
 800047c:	4603      	mov	r3, r0
 800047e:	2b00      	cmp	r3, #0
 8000480:	d001      	beq.n	8000486 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8000482:	f000 fa9f 	bl	80009c4 <Error_Handler>
  }
}
 8000486:	bf00      	nop
 8000488:	3750      	adds	r7, #80	; 0x50
 800048a:	46bd      	mov	sp, r7
 800048c:	bd80      	pop	{r7, pc}
	...

08000490 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000490:	b580      	push	{r7, lr}
 8000492:	b084      	sub	sp, #16
 8000494:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000496:	1d3b      	adds	r3, r7, #4
 8000498:	2200      	movs	r2, #0
 800049a:	601a      	str	r2, [r3, #0]
 800049c:	605a      	str	r2, [r3, #4]
 800049e:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 80004a0:	4b18      	ldr	r3, [pc, #96]	; (8000504 <MX_ADC1_Init+0x74>)
 80004a2:	4a19      	ldr	r2, [pc, #100]	; (8000508 <MX_ADC1_Init+0x78>)
 80004a4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80004a6:	4b17      	ldr	r3, [pc, #92]	; (8000504 <MX_ADC1_Init+0x74>)
 80004a8:	2200      	movs	r2, #0
 80004aa:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80004ac:	4b15      	ldr	r3, [pc, #84]	; (8000504 <MX_ADC1_Init+0x74>)
 80004ae:	2201      	movs	r2, #1
 80004b0:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80004b2:	4b14      	ldr	r3, [pc, #80]	; (8000504 <MX_ADC1_Init+0x74>)
 80004b4:	2200      	movs	r2, #0
 80004b6:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80004b8:	4b12      	ldr	r3, [pc, #72]	; (8000504 <MX_ADC1_Init+0x74>)
 80004ba:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80004be:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80004c0:	4b10      	ldr	r3, [pc, #64]	; (8000504 <MX_ADC1_Init+0x74>)
 80004c2:	2200      	movs	r2, #0
 80004c4:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 80004c6:	4b0f      	ldr	r3, [pc, #60]	; (8000504 <MX_ADC1_Init+0x74>)
 80004c8:	2201      	movs	r2, #1
 80004ca:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80004cc:	480d      	ldr	r0, [pc, #52]	; (8000504 <MX_ADC1_Init+0x74>)
 80004ce:	f000 fca3 	bl	8000e18 <HAL_ADC_Init>
 80004d2:	4603      	mov	r3, r0
 80004d4:	2b00      	cmp	r3, #0
 80004d6:	d001      	beq.n	80004dc <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 80004d8:	f000 fa74 	bl	80009c4 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80004dc:	2300      	movs	r3, #0
 80004de:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80004e0:	2301      	movs	r3, #1
 80004e2:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80004e4:	2300      	movs	r3, #0
 80004e6:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80004e8:	1d3b      	adds	r3, r7, #4
 80004ea:	4619      	mov	r1, r3
 80004ec:	4805      	ldr	r0, [pc, #20]	; (8000504 <MX_ADC1_Init+0x74>)
 80004ee:	f000 ff51 	bl	8001394 <HAL_ADC_ConfigChannel>
 80004f2:	4603      	mov	r3, r0
 80004f4:	2b00      	cmp	r3, #0
 80004f6:	d001      	beq.n	80004fc <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 80004f8:	f000 fa64 	bl	80009c4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80004fc:	bf00      	nop
 80004fe:	3710      	adds	r7, #16
 8000500:	46bd      	mov	sp, r7
 8000502:	bd80      	pop	{r7, pc}
 8000504:	200006a8 	.word	0x200006a8
 8000508:	40012400 	.word	0x40012400

0800050c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000510:	4b18      	ldr	r3, [pc, #96]	; (8000574 <MX_SPI1_Init+0x68>)
 8000512:	4a19      	ldr	r2, [pc, #100]	; (8000578 <MX_SPI1_Init+0x6c>)
 8000514:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000516:	4b17      	ldr	r3, [pc, #92]	; (8000574 <MX_SPI1_Init+0x68>)
 8000518:	f44f 7282 	mov.w	r2, #260	; 0x104
 800051c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800051e:	4b15      	ldr	r3, [pc, #84]	; (8000574 <MX_SPI1_Init+0x68>)
 8000520:	2200      	movs	r2, #0
 8000522:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8000524:	4b13      	ldr	r3, [pc, #76]	; (8000574 <MX_SPI1_Init+0x68>)
 8000526:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800052a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800052c:	4b11      	ldr	r3, [pc, #68]	; (8000574 <MX_SPI1_Init+0x68>)
 800052e:	2200      	movs	r2, #0
 8000530:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000532:	4b10      	ldr	r3, [pc, #64]	; (8000574 <MX_SPI1_Init+0x68>)
 8000534:	2200      	movs	r2, #0
 8000536:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000538:	4b0e      	ldr	r3, [pc, #56]	; (8000574 <MX_SPI1_Init+0x68>)
 800053a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800053e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000540:	4b0c      	ldr	r3, [pc, #48]	; (8000574 <MX_SPI1_Init+0x68>)
 8000542:	2208      	movs	r2, #8
 8000544:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000546:	4b0b      	ldr	r3, [pc, #44]	; (8000574 <MX_SPI1_Init+0x68>)
 8000548:	2200      	movs	r2, #0
 800054a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800054c:	4b09      	ldr	r3, [pc, #36]	; (8000574 <MX_SPI1_Init+0x68>)
 800054e:	2200      	movs	r2, #0
 8000550:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000552:	4b08      	ldr	r3, [pc, #32]	; (8000574 <MX_SPI1_Init+0x68>)
 8000554:	2200      	movs	r2, #0
 8000556:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000558:	4b06      	ldr	r3, [pc, #24]	; (8000574 <MX_SPI1_Init+0x68>)
 800055a:	220a      	movs	r2, #10
 800055c:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800055e:	4805      	ldr	r0, [pc, #20]	; (8000574 <MX_SPI1_Init+0x68>)
 8000560:	f003 faba 	bl	8003ad8 <HAL_SPI_Init>
 8000564:	4603      	mov	r3, r0
 8000566:	2b00      	cmp	r3, #0
 8000568:	d001      	beq.n	800056e <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 800056a:	f000 fa2b 	bl	80009c4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800056e:	bf00      	nop
 8000570:	bd80      	pop	{r7, pc}
 8000572:	bf00      	nop
 8000574:	2000071c 	.word	0x2000071c
 8000578:	40013000 	.word	0x40013000

0800057c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b082      	sub	sp, #8
 8000580:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000582:	4b0c      	ldr	r3, [pc, #48]	; (80005b4 <MX_DMA_Init+0x38>)
 8000584:	695b      	ldr	r3, [r3, #20]
 8000586:	4a0b      	ldr	r2, [pc, #44]	; (80005b4 <MX_DMA_Init+0x38>)
 8000588:	f043 0301 	orr.w	r3, r3, #1
 800058c:	6153      	str	r3, [r2, #20]
 800058e:	4b09      	ldr	r3, [pc, #36]	; (80005b4 <MX_DMA_Init+0x38>)
 8000590:	695b      	ldr	r3, [r3, #20]
 8000592:	f003 0301 	and.w	r3, r3, #1
 8000596:	607b      	str	r3, [r7, #4]
 8000598:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 1, 0);
 800059a:	2200      	movs	r2, #0
 800059c:	2101      	movs	r1, #1
 800059e:	200b      	movs	r0, #11
 80005a0:	f001 fa55 	bl	8001a4e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80005a4:	200b      	movs	r0, #11
 80005a6:	f001 fa6e 	bl	8001a86 <HAL_NVIC_EnableIRQ>

}
 80005aa:	bf00      	nop
 80005ac:	3708      	adds	r7, #8
 80005ae:	46bd      	mov	sp, r7
 80005b0:	bd80      	pop	{r7, pc}
 80005b2:	bf00      	nop
 80005b4:	40021000 	.word	0x40021000

080005b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b088      	sub	sp, #32
 80005bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005be:	f107 0310 	add.w	r3, r7, #16
 80005c2:	2200      	movs	r2, #0
 80005c4:	601a      	str	r2, [r3, #0]
 80005c6:	605a      	str	r2, [r3, #4]
 80005c8:	609a      	str	r2, [r3, #8]
 80005ca:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005cc:	4b41      	ldr	r3, [pc, #260]	; (80006d4 <MX_GPIO_Init+0x11c>)
 80005ce:	699b      	ldr	r3, [r3, #24]
 80005d0:	4a40      	ldr	r2, [pc, #256]	; (80006d4 <MX_GPIO_Init+0x11c>)
 80005d2:	f043 0310 	orr.w	r3, r3, #16
 80005d6:	6193      	str	r3, [r2, #24]
 80005d8:	4b3e      	ldr	r3, [pc, #248]	; (80006d4 <MX_GPIO_Init+0x11c>)
 80005da:	699b      	ldr	r3, [r3, #24]
 80005dc:	f003 0310 	and.w	r3, r3, #16
 80005e0:	60fb      	str	r3, [r7, #12]
 80005e2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80005e4:	4b3b      	ldr	r3, [pc, #236]	; (80006d4 <MX_GPIO_Init+0x11c>)
 80005e6:	699b      	ldr	r3, [r3, #24]
 80005e8:	4a3a      	ldr	r2, [pc, #232]	; (80006d4 <MX_GPIO_Init+0x11c>)
 80005ea:	f043 0320 	orr.w	r3, r3, #32
 80005ee:	6193      	str	r3, [r2, #24]
 80005f0:	4b38      	ldr	r3, [pc, #224]	; (80006d4 <MX_GPIO_Init+0x11c>)
 80005f2:	699b      	ldr	r3, [r3, #24]
 80005f4:	f003 0320 	and.w	r3, r3, #32
 80005f8:	60bb      	str	r3, [r7, #8]
 80005fa:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005fc:	4b35      	ldr	r3, [pc, #212]	; (80006d4 <MX_GPIO_Init+0x11c>)
 80005fe:	699b      	ldr	r3, [r3, #24]
 8000600:	4a34      	ldr	r2, [pc, #208]	; (80006d4 <MX_GPIO_Init+0x11c>)
 8000602:	f043 0304 	orr.w	r3, r3, #4
 8000606:	6193      	str	r3, [r2, #24]
 8000608:	4b32      	ldr	r3, [pc, #200]	; (80006d4 <MX_GPIO_Init+0x11c>)
 800060a:	699b      	ldr	r3, [r3, #24]
 800060c:	f003 0304 	and.w	r3, r3, #4
 8000610:	607b      	str	r3, [r7, #4]
 8000612:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000614:	4b2f      	ldr	r3, [pc, #188]	; (80006d4 <MX_GPIO_Init+0x11c>)
 8000616:	699b      	ldr	r3, [r3, #24]
 8000618:	4a2e      	ldr	r2, [pc, #184]	; (80006d4 <MX_GPIO_Init+0x11c>)
 800061a:	f043 0308 	orr.w	r3, r3, #8
 800061e:	6193      	str	r3, [r2, #24]
 8000620:	4b2c      	ldr	r3, [pc, #176]	; (80006d4 <MX_GPIO_Init+0x11c>)
 8000622:	699b      	ldr	r3, [r3, #24]
 8000624:	f003 0308 	and.w	r3, r3, #8
 8000628:	603b      	str	r3, [r7, #0]
 800062a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800062c:	2200      	movs	r2, #0
 800062e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000632:	4829      	ldr	r0, [pc, #164]	; (80006d8 <MX_GPIO_Init+0x120>)
 8000634:	f001 fdc4 	bl	80021c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_RESET);
 8000638:	2200      	movs	r2, #0
 800063a:	2104      	movs	r1, #4
 800063c:	4827      	ldr	r0, [pc, #156]	; (80006dc <MX_GPIO_Init+0x124>)
 800063e:	f001 fdbf 	bl	80021c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_SET);
 8000642:	2201      	movs	r2, #1
 8000644:	21c0      	movs	r1, #192	; 0xc0
 8000646:	4826      	ldr	r0, [pc, #152]	; (80006e0 <MX_GPIO_Init+0x128>)
 8000648:	f001 fdba 	bl	80021c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800064c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000650:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000652:	2301      	movs	r3, #1
 8000654:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000656:	2300      	movs	r3, #0
 8000658:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800065a:	2302      	movs	r3, #2
 800065c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800065e:	f107 0310 	add.w	r3, r7, #16
 8000662:	4619      	mov	r1, r3
 8000664:	481c      	ldr	r0, [pc, #112]	; (80006d8 <MX_GPIO_Init+0x120>)
 8000666:	f001 fc51 	bl	8001f0c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 800066a:	2302      	movs	r3, #2
 800066c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800066e:	4b1d      	ldr	r3, [pc, #116]	; (80006e4 <MX_GPIO_Init+0x12c>)
 8000670:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000672:	2300      	movs	r3, #0
 8000674:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000676:	f107 0310 	add.w	r3, r7, #16
 800067a:	4619      	mov	r1, r3
 800067c:	4817      	ldr	r0, [pc, #92]	; (80006dc <MX_GPIO_Init+0x124>)
 800067e:	f001 fc45 	bl	8001f0c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000682:	2304      	movs	r3, #4
 8000684:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000686:	2301      	movs	r3, #1
 8000688:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800068a:	2300      	movs	r3, #0
 800068c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800068e:	2302      	movs	r3, #2
 8000690:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000692:	f107 0310 	add.w	r3, r7, #16
 8000696:	4619      	mov	r1, r3
 8000698:	4810      	ldr	r0, [pc, #64]	; (80006dc <MX_GPIO_Init+0x124>)
 800069a:	f001 fc37 	bl	8001f0c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800069e:	23c0      	movs	r3, #192	; 0xc0
 80006a0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006a2:	2301      	movs	r3, #1
 80006a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006a6:	2300      	movs	r3, #0
 80006a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006aa:	2302      	movs	r3, #2
 80006ac:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006ae:	f107 0310 	add.w	r3, r7, #16
 80006b2:	4619      	mov	r1, r3
 80006b4:	480a      	ldr	r0, [pc, #40]	; (80006e0 <MX_GPIO_Init+0x128>)
 80006b6:	f001 fc29 	bl	8001f0c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 80006ba:	2200      	movs	r2, #0
 80006bc:	2100      	movs	r1, #0
 80006be:	2007      	movs	r0, #7
 80006c0:	f001 f9c5 	bl	8001a4e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80006c4:	2007      	movs	r0, #7
 80006c6:	f001 f9de 	bl	8001a86 <HAL_NVIC_EnableIRQ>

}
 80006ca:	bf00      	nop
 80006cc:	3720      	adds	r7, #32
 80006ce:	46bd      	mov	sp, r7
 80006d0:	bd80      	pop	{r7, pc}
 80006d2:	bf00      	nop
 80006d4:	40021000 	.word	0x40021000
 80006d8:	40011000 	.word	0x40011000
 80006dc:	40010800 	.word	0x40010800
 80006e0:	40010c00 	.word	0x40010c00
 80006e4:	10110000 	.word	0x10110000

080006e8 <CDC_ReciveCallBack>:

/* USER CODE BEGIN 4 */
void CDC_ReciveCallBack(uint8_t *Buf, uint32_t *Len)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b084      	sub	sp, #16
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	6078      	str	r0, [r7, #4]
 80006f0:	6039      	str	r1, [r7, #0]
	//CDC_Transmit_FS(Buf, Len);// debug
	for(int i = 0; i < 64; i++)
 80006f2:	2300      	movs	r3, #0
 80006f4:	60fb      	str	r3, [r7, #12]
 80006f6:	e007      	b.n	8000708 <CDC_ReciveCallBack+0x20>
		RX_Str[i] = 0;
 80006f8:	4a11      	ldr	r2, [pc, #68]	; (8000740 <CDC_ReciveCallBack+0x58>)
 80006fa:	68fb      	ldr	r3, [r7, #12]
 80006fc:	4413      	add	r3, r2
 80006fe:	2200      	movs	r2, #0
 8000700:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < 64; i++)
 8000702:	68fb      	ldr	r3, [r7, #12]
 8000704:	3301      	adds	r3, #1
 8000706:	60fb      	str	r3, [r7, #12]
 8000708:	68fb      	ldr	r3, [r7, #12]
 800070a:	2b3f      	cmp	r3, #63	; 0x3f
 800070c:	ddf4      	ble.n	80006f8 <CDC_ReciveCallBack+0x10>

	memcpy(RX_Str, Buf, Len);
 800070e:	683b      	ldr	r3, [r7, #0]
 8000710:	461a      	mov	r2, r3
 8000712:	6879      	ldr	r1, [r7, #4]
 8000714:	480a      	ldr	r0, [pc, #40]	; (8000740 <CDC_ReciveCallBack+0x58>)
 8000716:	f006 fd77 	bl	8007208 <memcpy>
	CDC_RX_Len = Len;
 800071a:	683b      	ldr	r3, [r7, #0]
 800071c:	b29a      	uxth	r2, r3
 800071e:	4b09      	ldr	r3, [pc, #36]	; (8000744 <CDC_ReciveCallBack+0x5c>)
 8000720:	801a      	strh	r2, [r3, #0]
	Mode = RX_Str[0];
 8000722:	4b07      	ldr	r3, [pc, #28]	; (8000740 <CDC_ReciveCallBack+0x58>)
 8000724:	781a      	ldrb	r2, [r3, #0]
 8000726:	4b08      	ldr	r3, [pc, #32]	; (8000748 <CDC_ReciveCallBack+0x60>)
 8000728:	701a      	strb	r2, [r3, #0]

	Value = atoi(&RX_Str[1]);
 800072a:	4808      	ldr	r0, [pc, #32]	; (800074c <CDC_ReciveCallBack+0x64>)
 800072c:	f006 fd44 	bl	80071b8 <atoi>
 8000730:	4603      	mov	r3, r0
 8000732:	b29a      	uxth	r2, r3
 8000734:	4b06      	ldr	r3, [pc, #24]	; (8000750 <CDC_ReciveCallBack+0x68>)
 8000736:	801a      	strh	r2, [r3, #0]

	//DAC_Write(atoi(RX_Str));
	//RX_Str[CDC_RX_Len] = '\n';
}
 8000738:	bf00      	nop
 800073a:	3710      	adds	r7, #16
 800073c:	46bd      	mov	sp, r7
 800073e:	bd80      	pop	{r7, pc}
 8000740:	20000668 	.word	0x20000668
 8000744:	2000037a 	.word	0x2000037a
 8000748:	2000036c 	.word	0x2000036c
 800074c:	20000669 	.word	0x20000669
 8000750:	2000036e 	.word	0x2000036e

08000754 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000754:	b480      	push	{r7}
 8000756:	b083      	sub	sp, #12
 8000758:	af00      	add	r7, sp, #0
 800075a:	4603      	mov	r3, r0
 800075c:	80fb      	strh	r3, [r7, #6]
	if((GPIO_Pin == GPIO_PIN_1)&&(Tracer_Lock == 0))
 800075e:	88fb      	ldrh	r3, [r7, #6]
 8000760:	2b02      	cmp	r3, #2
 8000762:	d108      	bne.n	8000776 <HAL_GPIO_EXTI_Callback+0x22>
 8000764:	4b07      	ldr	r3, [pc, #28]	; (8000784 <HAL_GPIO_EXTI_Callback+0x30>)
 8000766:	881b      	ldrh	r3, [r3, #0]
 8000768:	b29b      	uxth	r3, r3
 800076a:	2b00      	cmp	r3, #0
 800076c:	d103      	bne.n	8000776 <HAL_GPIO_EXTI_Callback+0x22>
	{
		DMA_Tracer_Part_Flag = 1;
 800076e:	4b06      	ldr	r3, [pc, #24]	; (8000788 <HAL_GPIO_EXTI_Callback+0x34>)
 8000770:	2201      	movs	r2, #1
 8000772:	801a      	strh	r2, [r3, #0]
 8000774:	e000      	b.n	8000778 <HAL_GPIO_EXTI_Callback+0x24>
	}
	else
	{
		__NOP();
 8000776:	bf00      	nop
	}
}
 8000778:	bf00      	nop
 800077a:	370c      	adds	r7, #12
 800077c:	46bd      	mov	sp, r7
 800077e:	bc80      	pop	{r7}
 8000780:	4770      	bx	lr
 8000782:	bf00      	nop
 8000784:	20000378 	.word	0x20000378
 8000788:	20000376 	.word	0x20000376

0800078c <HAL_ADC_ConvCpltCallback>:


 void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b082      	sub	sp, #8
 8000790:	af00      	add	r7, sp, #0
 8000792:	6078      	str	r0, [r7, #4]
	 if(DMA_Triggered_Part_Flag == 1)
 8000794:	4b3e      	ldr	r3, [pc, #248]	; (8000890 <HAL_ADC_ConvCpltCallback+0x104>)
 8000796:	881b      	ldrh	r3, [r3, #0]
 8000798:	b29b      	uxth	r3, r3
 800079a:	2b01      	cmp	r3, #1
 800079c:	d107      	bne.n	80007ae <HAL_ADC_ConvCpltCallback+0x22>
	 {
		 memcpy(&ADC_CDC_Transmit_Buf[0], &ADC_DMA_Buf[ADC_DMA_Half_Len], sizeof(uint16_t)*ADC_DMA_Half_Len);
 800079e:	2264      	movs	r2, #100	; 0x64
 80007a0:	493c      	ldr	r1, [pc, #240]	; (8000894 <HAL_ADC_ConvCpltCallback+0x108>)
 80007a2:	483d      	ldr	r0, [pc, #244]	; (8000898 <HAL_ADC_ConvCpltCallback+0x10c>)
 80007a4:	f006 fd30 	bl	8007208 <memcpy>
		 DMA_Triggered_I_Part_Cplt = 1;
 80007a8:	4b3c      	ldr	r3, [pc, #240]	; (800089c <HAL_ADC_ConvCpltCallback+0x110>)
 80007aa:	2201      	movs	r2, #1
 80007ac:	801a      	strh	r2, [r3, #0]
	 }

	if(DMA_Triggered_Part_Flag > 1)
 80007ae:	4b38      	ldr	r3, [pc, #224]	; (8000890 <HAL_ADC_ConvCpltCallback+0x104>)
 80007b0:	881b      	ldrh	r3, [r3, #0]
 80007b2:	b29b      	uxth	r3, r3
 80007b4:	2b01      	cmp	r3, #1
 80007b6:	d91e      	bls.n	80007f6 <HAL_ADC_ConvCpltCallback+0x6a>
	{
		memcpy(&ADC_CDC_Transmit_Buf[ADC_DMA_Half_Len*(DMA_Triggered_Part_Flag-1)], &ADC_DMA_Buf[ADC_DMA_Half_Len], sizeof(uint16_t)*ADC_DMA_Half_Len);
 80007b8:	4b35      	ldr	r3, [pc, #212]	; (8000890 <HAL_ADC_ConvCpltCallback+0x104>)
 80007ba:	881b      	ldrh	r3, [r3, #0]
 80007bc:	b29b      	uxth	r3, r3
 80007be:	3b01      	subs	r3, #1
 80007c0:	2232      	movs	r2, #50	; 0x32
 80007c2:	fb02 f303 	mul.w	r3, r2, r3
 80007c6:	005b      	lsls	r3, r3, #1
 80007c8:	4a33      	ldr	r2, [pc, #204]	; (8000898 <HAL_ADC_ConvCpltCallback+0x10c>)
 80007ca:	4413      	add	r3, r2
 80007cc:	2264      	movs	r2, #100	; 0x64
 80007ce:	4931      	ldr	r1, [pc, #196]	; (8000894 <HAL_ADC_ConvCpltCallback+0x108>)
 80007d0:	4618      	mov	r0, r3
 80007d2:	f006 fd19 	bl	8007208 <memcpy>
		if((DMA_Triggered_Part_Flag < 3))
 80007d6:	4b2e      	ldr	r3, [pc, #184]	; (8000890 <HAL_ADC_ConvCpltCallback+0x104>)
 80007d8:	881b      	ldrh	r3, [r3, #0]
 80007da:	b29b      	uxth	r3, r3
 80007dc:	2b02      	cmp	r3, #2
 80007de:	d807      	bhi.n	80007f0 <HAL_ADC_ConvCpltCallback+0x64>
		{DMA_Triggered_Part_Flag++;}
 80007e0:	4b2b      	ldr	r3, [pc, #172]	; (8000890 <HAL_ADC_ConvCpltCallback+0x104>)
 80007e2:	881b      	ldrh	r3, [r3, #0]
 80007e4:	b29b      	uxth	r3, r3
 80007e6:	3301      	adds	r3, #1
 80007e8:	b29a      	uxth	r2, r3
 80007ea:	4b29      	ldr	r3, [pc, #164]	; (8000890 <HAL_ADC_ConvCpltCallback+0x104>)
 80007ec:	801a      	strh	r2, [r3, #0]
 80007ee:	e002      	b.n	80007f6 <HAL_ADC_ConvCpltCallback+0x6a>
		else
		{DMA_Triggered_Part_Flag = 0;}
 80007f0:	4b27      	ldr	r3, [pc, #156]	; (8000890 <HAL_ADC_ConvCpltCallback+0x104>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	801a      	strh	r2, [r3, #0]
	}

	if(DMA_Stream_Part_Flag > 0)
 80007f6:	4b2a      	ldr	r3, [pc, #168]	; (80008a0 <HAL_ADC_ConvCpltCallback+0x114>)
 80007f8:	881b      	ldrh	r3, [r3, #0]
 80007fa:	b29b      	uxth	r3, r3
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d01e      	beq.n	800083e <HAL_ADC_ConvCpltCallback+0xb2>
	{
		memcpy(&ADC_CDC_Transmit_Buf[ADC_DMA_Half_Len*(DMA_Stream_Part_Flag-1)], &ADC_DMA_Buf[ADC_DMA_Half_Len], sizeof(uint16_t)*ADC_DMA_Half_Len);
 8000800:	4b27      	ldr	r3, [pc, #156]	; (80008a0 <HAL_ADC_ConvCpltCallback+0x114>)
 8000802:	881b      	ldrh	r3, [r3, #0]
 8000804:	b29b      	uxth	r3, r3
 8000806:	3b01      	subs	r3, #1
 8000808:	2232      	movs	r2, #50	; 0x32
 800080a:	fb02 f303 	mul.w	r3, r2, r3
 800080e:	005b      	lsls	r3, r3, #1
 8000810:	4a21      	ldr	r2, [pc, #132]	; (8000898 <HAL_ADC_ConvCpltCallback+0x10c>)
 8000812:	4413      	add	r3, r2
 8000814:	2264      	movs	r2, #100	; 0x64
 8000816:	491f      	ldr	r1, [pc, #124]	; (8000894 <HAL_ADC_ConvCpltCallback+0x108>)
 8000818:	4618      	mov	r0, r3
 800081a:	f006 fcf5 	bl	8007208 <memcpy>
		if(DMA_Stream_Part_Flag < (int)(ADC_CDC_Transmit_Len/ADC_DMA_Half_Len))
 800081e:	4b20      	ldr	r3, [pc, #128]	; (80008a0 <HAL_ADC_ConvCpltCallback+0x114>)
 8000820:	881b      	ldrh	r3, [r3, #0]
 8000822:	b29b      	uxth	r3, r3
 8000824:	2b63      	cmp	r3, #99	; 0x63
 8000826:	d807      	bhi.n	8000838 <HAL_ADC_ConvCpltCallback+0xac>
		{DMA_Stream_Part_Flag++;}
 8000828:	4b1d      	ldr	r3, [pc, #116]	; (80008a0 <HAL_ADC_ConvCpltCallback+0x114>)
 800082a:	881b      	ldrh	r3, [r3, #0]
 800082c:	b29b      	uxth	r3, r3
 800082e:	3301      	adds	r3, #1
 8000830:	b29a      	uxth	r2, r3
 8000832:	4b1b      	ldr	r3, [pc, #108]	; (80008a0 <HAL_ADC_ConvCpltCallback+0x114>)
 8000834:	801a      	strh	r2, [r3, #0]
 8000836:	e002      	b.n	800083e <HAL_ADC_ConvCpltCallback+0xb2>
		else
		{DMA_Stream_Part_Flag = 0;}
 8000838:	4b19      	ldr	r3, [pc, #100]	; (80008a0 <HAL_ADC_ConvCpltCallback+0x114>)
 800083a:	2200      	movs	r2, #0
 800083c:	801a      	strh	r2, [r3, #0]
	}

	if(DMA_Tracer_Part_Flag > 0)
 800083e:	4b19      	ldr	r3, [pc, #100]	; (80008a4 <HAL_ADC_ConvCpltCallback+0x118>)
 8000840:	881b      	ldrh	r3, [r3, #0]
 8000842:	b29b      	uxth	r3, r3
 8000844:	2b00      	cmp	r3, #0
 8000846:	d01e      	beq.n	8000886 <HAL_ADC_ConvCpltCallback+0xfa>
		{
			memcpy(&ADC_CDC_Transmit_Buf[ADC_DMA_Half_Len*(DMA_Tracer_Part_Flag-1)], &ADC_DMA_Buf[ADC_DMA_Half_Len], sizeof(uint16_t)*ADC_DMA_Half_Len);
 8000848:	4b16      	ldr	r3, [pc, #88]	; (80008a4 <HAL_ADC_ConvCpltCallback+0x118>)
 800084a:	881b      	ldrh	r3, [r3, #0]
 800084c:	b29b      	uxth	r3, r3
 800084e:	3b01      	subs	r3, #1
 8000850:	2232      	movs	r2, #50	; 0x32
 8000852:	fb02 f303 	mul.w	r3, r2, r3
 8000856:	005b      	lsls	r3, r3, #1
 8000858:	4a0f      	ldr	r2, [pc, #60]	; (8000898 <HAL_ADC_ConvCpltCallback+0x10c>)
 800085a:	4413      	add	r3, r2
 800085c:	2264      	movs	r2, #100	; 0x64
 800085e:	490d      	ldr	r1, [pc, #52]	; (8000894 <HAL_ADC_ConvCpltCallback+0x108>)
 8000860:	4618      	mov	r0, r3
 8000862:	f006 fcd1 	bl	8007208 <memcpy>
			if(DMA_Tracer_Part_Flag < (int)(ADC_CDC_Transmit_Len/ADC_DMA_Half_Len))
 8000866:	4b0f      	ldr	r3, [pc, #60]	; (80008a4 <HAL_ADC_ConvCpltCallback+0x118>)
 8000868:	881b      	ldrh	r3, [r3, #0]
 800086a:	b29b      	uxth	r3, r3
 800086c:	2b63      	cmp	r3, #99	; 0x63
 800086e:	d807      	bhi.n	8000880 <HAL_ADC_ConvCpltCallback+0xf4>
			{DMA_Tracer_Part_Flag++;}
 8000870:	4b0c      	ldr	r3, [pc, #48]	; (80008a4 <HAL_ADC_ConvCpltCallback+0x118>)
 8000872:	881b      	ldrh	r3, [r3, #0]
 8000874:	b29b      	uxth	r3, r3
 8000876:	3301      	adds	r3, #1
 8000878:	b29a      	uxth	r2, r3
 800087a:	4b0a      	ldr	r3, [pc, #40]	; (80008a4 <HAL_ADC_ConvCpltCallback+0x118>)
 800087c:	801a      	strh	r2, [r3, #0]
			else
			{DMA_Tracer_Part_Flag = 0;}
		}


}
 800087e:	e002      	b.n	8000886 <HAL_ADC_ConvCpltCallback+0xfa>
			{DMA_Tracer_Part_Flag = 0;}
 8000880:	4b08      	ldr	r3, [pc, #32]	; (80008a4 <HAL_ADC_ConvCpltCallback+0x118>)
 8000882:	2200      	movs	r2, #0
 8000884:	801a      	strh	r2, [r3, #0]
}
 8000886:	bf00      	nop
 8000888:	3708      	adds	r7, #8
 800088a:	46bd      	mov	sp, r7
 800088c:	bd80      	pop	{r7, pc}
 800088e:	bf00      	nop
 8000890:	20000370 	.word	0x20000370
 8000894:	20000604 	.word	0x20000604
 8000898:	20000774 	.word	0x20000774
 800089c:	20000372 	.word	0x20000372
 80008a0:	20000374 	.word	0x20000374
 80008a4:	20000376 	.word	0x20000376

080008a8 <HAL_ADC_ConvHalfCpltCallback>:

void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b082      	sub	sp, #8
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	6078      	str	r0, [r7, #4]
	if(DMA_Triggered_Part_Flag == 1)
 80008b0:	4b3e      	ldr	r3, [pc, #248]	; (80009ac <HAL_ADC_ConvHalfCpltCallback+0x104>)
 80008b2:	881b      	ldrh	r3, [r3, #0]
 80008b4:	b29b      	uxth	r3, r3
 80008b6:	2b01      	cmp	r3, #1
 80008b8:	d107      	bne.n	80008ca <HAL_ADC_ConvHalfCpltCallback+0x22>
	{
		memcpy(&ADC_CDC_Transmit_Buf[0], &ADC_DMA_Buf[0], sizeof(uint16_t)*ADC_DMA_Half_Len);
 80008ba:	2264      	movs	r2, #100	; 0x64
 80008bc:	493c      	ldr	r1, [pc, #240]	; (80009b0 <HAL_ADC_ConvHalfCpltCallback+0x108>)
 80008be:	483d      	ldr	r0, [pc, #244]	; (80009b4 <HAL_ADC_ConvHalfCpltCallback+0x10c>)
 80008c0:	f006 fca2 	bl	8007208 <memcpy>
		DMA_Triggered_I_Part_Cplt = 1;
 80008c4:	4b3c      	ldr	r3, [pc, #240]	; (80009b8 <HAL_ADC_ConvHalfCpltCallback+0x110>)
 80008c6:	2201      	movs	r2, #1
 80008c8:	801a      	strh	r2, [r3, #0]
	}

	if(DMA_Triggered_Part_Flag > 1)
 80008ca:	4b38      	ldr	r3, [pc, #224]	; (80009ac <HAL_ADC_ConvHalfCpltCallback+0x104>)
 80008cc:	881b      	ldrh	r3, [r3, #0]
 80008ce:	b29b      	uxth	r3, r3
 80008d0:	2b01      	cmp	r3, #1
 80008d2:	d91e      	bls.n	8000912 <HAL_ADC_ConvHalfCpltCallback+0x6a>
	{
		memcpy(&ADC_CDC_Transmit_Buf[ADC_DMA_Half_Len*(DMA_Triggered_Part_Flag-1)], &ADC_DMA_Buf[0], sizeof(uint16_t)*ADC_DMA_Half_Len);
 80008d4:	4b35      	ldr	r3, [pc, #212]	; (80009ac <HAL_ADC_ConvHalfCpltCallback+0x104>)
 80008d6:	881b      	ldrh	r3, [r3, #0]
 80008d8:	b29b      	uxth	r3, r3
 80008da:	3b01      	subs	r3, #1
 80008dc:	2232      	movs	r2, #50	; 0x32
 80008de:	fb02 f303 	mul.w	r3, r2, r3
 80008e2:	005b      	lsls	r3, r3, #1
 80008e4:	4a33      	ldr	r2, [pc, #204]	; (80009b4 <HAL_ADC_ConvHalfCpltCallback+0x10c>)
 80008e6:	4413      	add	r3, r2
 80008e8:	2264      	movs	r2, #100	; 0x64
 80008ea:	4931      	ldr	r1, [pc, #196]	; (80009b0 <HAL_ADC_ConvHalfCpltCallback+0x108>)
 80008ec:	4618      	mov	r0, r3
 80008ee:	f006 fc8b 	bl	8007208 <memcpy>
		if((DMA_Triggered_Part_Flag < 3))
 80008f2:	4b2e      	ldr	r3, [pc, #184]	; (80009ac <HAL_ADC_ConvHalfCpltCallback+0x104>)
 80008f4:	881b      	ldrh	r3, [r3, #0]
 80008f6:	b29b      	uxth	r3, r3
 80008f8:	2b02      	cmp	r3, #2
 80008fa:	d807      	bhi.n	800090c <HAL_ADC_ConvHalfCpltCallback+0x64>
		{DMA_Triggered_Part_Flag++;}
 80008fc:	4b2b      	ldr	r3, [pc, #172]	; (80009ac <HAL_ADC_ConvHalfCpltCallback+0x104>)
 80008fe:	881b      	ldrh	r3, [r3, #0]
 8000900:	b29b      	uxth	r3, r3
 8000902:	3301      	adds	r3, #1
 8000904:	b29a      	uxth	r2, r3
 8000906:	4b29      	ldr	r3, [pc, #164]	; (80009ac <HAL_ADC_ConvHalfCpltCallback+0x104>)
 8000908:	801a      	strh	r2, [r3, #0]
 800090a:	e002      	b.n	8000912 <HAL_ADC_ConvHalfCpltCallback+0x6a>
		else
		{DMA_Triggered_Part_Flag = 0;}
 800090c:	4b27      	ldr	r3, [pc, #156]	; (80009ac <HAL_ADC_ConvHalfCpltCallback+0x104>)
 800090e:	2200      	movs	r2, #0
 8000910:	801a      	strh	r2, [r3, #0]
	}

	if(DMA_Stream_Part_Flag > 0)
 8000912:	4b2a      	ldr	r3, [pc, #168]	; (80009bc <HAL_ADC_ConvHalfCpltCallback+0x114>)
 8000914:	881b      	ldrh	r3, [r3, #0]
 8000916:	b29b      	uxth	r3, r3
 8000918:	2b00      	cmp	r3, #0
 800091a:	d01e      	beq.n	800095a <HAL_ADC_ConvHalfCpltCallback+0xb2>
	{
		memcpy(&ADC_CDC_Transmit_Buf[ADC_DMA_Half_Len*(DMA_Stream_Part_Flag-1)], &ADC_DMA_Buf[0], sizeof(uint16_t)*ADC_DMA_Half_Len);
 800091c:	4b27      	ldr	r3, [pc, #156]	; (80009bc <HAL_ADC_ConvHalfCpltCallback+0x114>)
 800091e:	881b      	ldrh	r3, [r3, #0]
 8000920:	b29b      	uxth	r3, r3
 8000922:	3b01      	subs	r3, #1
 8000924:	2232      	movs	r2, #50	; 0x32
 8000926:	fb02 f303 	mul.w	r3, r2, r3
 800092a:	005b      	lsls	r3, r3, #1
 800092c:	4a21      	ldr	r2, [pc, #132]	; (80009b4 <HAL_ADC_ConvHalfCpltCallback+0x10c>)
 800092e:	4413      	add	r3, r2
 8000930:	2264      	movs	r2, #100	; 0x64
 8000932:	491f      	ldr	r1, [pc, #124]	; (80009b0 <HAL_ADC_ConvHalfCpltCallback+0x108>)
 8000934:	4618      	mov	r0, r3
 8000936:	f006 fc67 	bl	8007208 <memcpy>
		if(DMA_Stream_Part_Flag < (int)(ADC_CDC_Transmit_Len/ADC_DMA_Half_Len))
 800093a:	4b20      	ldr	r3, [pc, #128]	; (80009bc <HAL_ADC_ConvHalfCpltCallback+0x114>)
 800093c:	881b      	ldrh	r3, [r3, #0]
 800093e:	b29b      	uxth	r3, r3
 8000940:	2b63      	cmp	r3, #99	; 0x63
 8000942:	d807      	bhi.n	8000954 <HAL_ADC_ConvHalfCpltCallback+0xac>
		{DMA_Stream_Part_Flag++;}
 8000944:	4b1d      	ldr	r3, [pc, #116]	; (80009bc <HAL_ADC_ConvHalfCpltCallback+0x114>)
 8000946:	881b      	ldrh	r3, [r3, #0]
 8000948:	b29b      	uxth	r3, r3
 800094a:	3301      	adds	r3, #1
 800094c:	b29a      	uxth	r2, r3
 800094e:	4b1b      	ldr	r3, [pc, #108]	; (80009bc <HAL_ADC_ConvHalfCpltCallback+0x114>)
 8000950:	801a      	strh	r2, [r3, #0]
 8000952:	e002      	b.n	800095a <HAL_ADC_ConvHalfCpltCallback+0xb2>
		else
		{DMA_Stream_Part_Flag = 0;}
 8000954:	4b19      	ldr	r3, [pc, #100]	; (80009bc <HAL_ADC_ConvHalfCpltCallback+0x114>)
 8000956:	2200      	movs	r2, #0
 8000958:	801a      	strh	r2, [r3, #0]
	}

	if(DMA_Tracer_Part_Flag > 0)
 800095a:	4b19      	ldr	r3, [pc, #100]	; (80009c0 <HAL_ADC_ConvHalfCpltCallback+0x118>)
 800095c:	881b      	ldrh	r3, [r3, #0]
 800095e:	b29b      	uxth	r3, r3
 8000960:	2b00      	cmp	r3, #0
 8000962:	d01e      	beq.n	80009a2 <HAL_ADC_ConvHalfCpltCallback+0xfa>
	{
		memcpy(&ADC_CDC_Transmit_Buf[ADC_DMA_Half_Len*(DMA_Tracer_Part_Flag-1)], &ADC_DMA_Buf[0], sizeof(uint16_t)*ADC_DMA_Half_Len);
 8000964:	4b16      	ldr	r3, [pc, #88]	; (80009c0 <HAL_ADC_ConvHalfCpltCallback+0x118>)
 8000966:	881b      	ldrh	r3, [r3, #0]
 8000968:	b29b      	uxth	r3, r3
 800096a:	3b01      	subs	r3, #1
 800096c:	2232      	movs	r2, #50	; 0x32
 800096e:	fb02 f303 	mul.w	r3, r2, r3
 8000972:	005b      	lsls	r3, r3, #1
 8000974:	4a0f      	ldr	r2, [pc, #60]	; (80009b4 <HAL_ADC_ConvHalfCpltCallback+0x10c>)
 8000976:	4413      	add	r3, r2
 8000978:	2264      	movs	r2, #100	; 0x64
 800097a:	490d      	ldr	r1, [pc, #52]	; (80009b0 <HAL_ADC_ConvHalfCpltCallback+0x108>)
 800097c:	4618      	mov	r0, r3
 800097e:	f006 fc43 	bl	8007208 <memcpy>
		if(DMA_Tracer_Part_Flag < (int)(ADC_CDC_Transmit_Len/ADC_DMA_Half_Len))
 8000982:	4b0f      	ldr	r3, [pc, #60]	; (80009c0 <HAL_ADC_ConvHalfCpltCallback+0x118>)
 8000984:	881b      	ldrh	r3, [r3, #0]
 8000986:	b29b      	uxth	r3, r3
 8000988:	2b63      	cmp	r3, #99	; 0x63
 800098a:	d807      	bhi.n	800099c <HAL_ADC_ConvHalfCpltCallback+0xf4>
		{DMA_Tracer_Part_Flag++;}
 800098c:	4b0c      	ldr	r3, [pc, #48]	; (80009c0 <HAL_ADC_ConvHalfCpltCallback+0x118>)
 800098e:	881b      	ldrh	r3, [r3, #0]
 8000990:	b29b      	uxth	r3, r3
 8000992:	3301      	adds	r3, #1
 8000994:	b29a      	uxth	r2, r3
 8000996:	4b0a      	ldr	r3, [pc, #40]	; (80009c0 <HAL_ADC_ConvHalfCpltCallback+0x118>)
 8000998:	801a      	strh	r2, [r3, #0]
		else
		{DMA_Tracer_Part_Flag = 0;}
	}
}
 800099a:	e002      	b.n	80009a2 <HAL_ADC_ConvHalfCpltCallback+0xfa>
		{DMA_Tracer_Part_Flag = 0;}
 800099c:	4b08      	ldr	r3, [pc, #32]	; (80009c0 <HAL_ADC_ConvHalfCpltCallback+0x118>)
 800099e:	2200      	movs	r2, #0
 80009a0:	801a      	strh	r2, [r3, #0]
}
 80009a2:	bf00      	nop
 80009a4:	3708      	adds	r7, #8
 80009a6:	46bd      	mov	sp, r7
 80009a8:	bd80      	pop	{r7, pc}
 80009aa:	bf00      	nop
 80009ac:	20000370 	.word	0x20000370
 80009b0:	200005a0 	.word	0x200005a0
 80009b4:	20000774 	.word	0x20000774
 80009b8:	20000372 	.word	0x20000372
 80009bc:	20000374 	.word	0x20000374
 80009c0:	20000376 	.word	0x20000376

080009c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009c4:	b480      	push	{r7}
 80009c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80009c8:	bf00      	nop
 80009ca:	46bd      	mov	sp, r7
 80009cc:	bc80      	pop	{r7}
 80009ce:	4770      	bx	lr

080009d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009d0:	b480      	push	{r7}
 80009d2:	b085      	sub	sp, #20
 80009d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80009d6:	4b15      	ldr	r3, [pc, #84]	; (8000a2c <HAL_MspInit+0x5c>)
 80009d8:	699b      	ldr	r3, [r3, #24]
 80009da:	4a14      	ldr	r2, [pc, #80]	; (8000a2c <HAL_MspInit+0x5c>)
 80009dc:	f043 0301 	orr.w	r3, r3, #1
 80009e0:	6193      	str	r3, [r2, #24]
 80009e2:	4b12      	ldr	r3, [pc, #72]	; (8000a2c <HAL_MspInit+0x5c>)
 80009e4:	699b      	ldr	r3, [r3, #24]
 80009e6:	f003 0301 	and.w	r3, r3, #1
 80009ea:	60bb      	str	r3, [r7, #8]
 80009ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009ee:	4b0f      	ldr	r3, [pc, #60]	; (8000a2c <HAL_MspInit+0x5c>)
 80009f0:	69db      	ldr	r3, [r3, #28]
 80009f2:	4a0e      	ldr	r2, [pc, #56]	; (8000a2c <HAL_MspInit+0x5c>)
 80009f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009f8:	61d3      	str	r3, [r2, #28]
 80009fa:	4b0c      	ldr	r3, [pc, #48]	; (8000a2c <HAL_MspInit+0x5c>)
 80009fc:	69db      	ldr	r3, [r3, #28]
 80009fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a02:	607b      	str	r3, [r7, #4]
 8000a04:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000a06:	4b0a      	ldr	r3, [pc, #40]	; (8000a30 <HAL_MspInit+0x60>)
 8000a08:	685b      	ldr	r3, [r3, #4]
 8000a0a:	60fb      	str	r3, [r7, #12]
 8000a0c:	68fb      	ldr	r3, [r7, #12]
 8000a0e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000a12:	60fb      	str	r3, [r7, #12]
 8000a14:	68fb      	ldr	r3, [r7, #12]
 8000a16:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000a1a:	60fb      	str	r3, [r7, #12]
 8000a1c:	4a04      	ldr	r2, [pc, #16]	; (8000a30 <HAL_MspInit+0x60>)
 8000a1e:	68fb      	ldr	r3, [r7, #12]
 8000a20:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a22:	bf00      	nop
 8000a24:	3714      	adds	r7, #20
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bc80      	pop	{r7}
 8000a2a:	4770      	bx	lr
 8000a2c:	40021000 	.word	0x40021000
 8000a30:	40010000 	.word	0x40010000

08000a34 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b088      	sub	sp, #32
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a3c:	f107 0310 	add.w	r3, r7, #16
 8000a40:	2200      	movs	r2, #0
 8000a42:	601a      	str	r2, [r3, #0]
 8000a44:	605a      	str	r2, [r3, #4]
 8000a46:	609a      	str	r2, [r3, #8]
 8000a48:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	4a29      	ldr	r2, [pc, #164]	; (8000af4 <HAL_ADC_MspInit+0xc0>)
 8000a50:	4293      	cmp	r3, r2
 8000a52:	d14a      	bne.n	8000aea <HAL_ADC_MspInit+0xb6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000a54:	4b28      	ldr	r3, [pc, #160]	; (8000af8 <HAL_ADC_MspInit+0xc4>)
 8000a56:	699b      	ldr	r3, [r3, #24]
 8000a58:	4a27      	ldr	r2, [pc, #156]	; (8000af8 <HAL_ADC_MspInit+0xc4>)
 8000a5a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000a5e:	6193      	str	r3, [r2, #24]
 8000a60:	4b25      	ldr	r3, [pc, #148]	; (8000af8 <HAL_ADC_MspInit+0xc4>)
 8000a62:	699b      	ldr	r3, [r3, #24]
 8000a64:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000a68:	60fb      	str	r3, [r7, #12]
 8000a6a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a6c:	4b22      	ldr	r3, [pc, #136]	; (8000af8 <HAL_ADC_MspInit+0xc4>)
 8000a6e:	699b      	ldr	r3, [r3, #24]
 8000a70:	4a21      	ldr	r2, [pc, #132]	; (8000af8 <HAL_ADC_MspInit+0xc4>)
 8000a72:	f043 0304 	orr.w	r3, r3, #4
 8000a76:	6193      	str	r3, [r2, #24]
 8000a78:	4b1f      	ldr	r3, [pc, #124]	; (8000af8 <HAL_ADC_MspInit+0xc4>)
 8000a7a:	699b      	ldr	r3, [r3, #24]
 8000a7c:	f003 0304 	and.w	r3, r3, #4
 8000a80:	60bb      	str	r3, [r7, #8]
 8000a82:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000a84:	2301      	movs	r3, #1
 8000a86:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a88:	2303      	movs	r3, #3
 8000a8a:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a8c:	f107 0310 	add.w	r3, r7, #16
 8000a90:	4619      	mov	r1, r3
 8000a92:	481a      	ldr	r0, [pc, #104]	; (8000afc <HAL_ADC_MspInit+0xc8>)
 8000a94:	f001 fa3a 	bl	8001f0c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000a98:	4b19      	ldr	r3, [pc, #100]	; (8000b00 <HAL_ADC_MspInit+0xcc>)
 8000a9a:	4a1a      	ldr	r2, [pc, #104]	; (8000b04 <HAL_ADC_MspInit+0xd0>)
 8000a9c:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000a9e:	4b18      	ldr	r3, [pc, #96]	; (8000b00 <HAL_ADC_MspInit+0xcc>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000aa4:	4b16      	ldr	r3, [pc, #88]	; (8000b00 <HAL_ADC_MspInit+0xcc>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000aaa:	4b15      	ldr	r3, [pc, #84]	; (8000b00 <HAL_ADC_MspInit+0xcc>)
 8000aac:	2280      	movs	r2, #128	; 0x80
 8000aae:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000ab0:	4b13      	ldr	r3, [pc, #76]	; (8000b00 <HAL_ADC_MspInit+0xcc>)
 8000ab2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000ab6:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000ab8:	4b11      	ldr	r3, [pc, #68]	; (8000b00 <HAL_ADC_MspInit+0xcc>)
 8000aba:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000abe:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000ac0:	4b0f      	ldr	r3, [pc, #60]	; (8000b00 <HAL_ADC_MspInit+0xcc>)
 8000ac2:	2220      	movs	r2, #32
 8000ac4:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8000ac6:	4b0e      	ldr	r3, [pc, #56]	; (8000b00 <HAL_ADC_MspInit+0xcc>)
 8000ac8:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8000acc:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000ace:	480c      	ldr	r0, [pc, #48]	; (8000b00 <HAL_ADC_MspInit+0xcc>)
 8000ad0:	f000 fff4 	bl	8001abc <HAL_DMA_Init>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d001      	beq.n	8000ade <HAL_ADC_MspInit+0xaa>
    {
      Error_Handler();
 8000ada:	f7ff ff73 	bl	80009c4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	4a07      	ldr	r2, [pc, #28]	; (8000b00 <HAL_ADC_MspInit+0xcc>)
 8000ae2:	621a      	str	r2, [r3, #32]
 8000ae4:	4a06      	ldr	r2, [pc, #24]	; (8000b00 <HAL_ADC_MspInit+0xcc>)
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000aea:	bf00      	nop
 8000aec:	3720      	adds	r7, #32
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bd80      	pop	{r7, pc}
 8000af2:	bf00      	nop
 8000af4:	40012400 	.word	0x40012400
 8000af8:	40021000 	.word	0x40021000
 8000afc:	40010800 	.word	0x40010800
 8000b00:	200006d8 	.word	0x200006d8
 8000b04:	40020008 	.word	0x40020008

08000b08 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b08a      	sub	sp, #40	; 0x28
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b10:	f107 0314 	add.w	r3, r7, #20
 8000b14:	2200      	movs	r2, #0
 8000b16:	601a      	str	r2, [r3, #0]
 8000b18:	605a      	str	r2, [r3, #4]
 8000b1a:	609a      	str	r2, [r3, #8]
 8000b1c:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	4a22      	ldr	r2, [pc, #136]	; (8000bac <HAL_SPI_MspInit+0xa4>)
 8000b24:	4293      	cmp	r3, r2
 8000b26:	d13d      	bne.n	8000ba4 <HAL_SPI_MspInit+0x9c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000b28:	4b21      	ldr	r3, [pc, #132]	; (8000bb0 <HAL_SPI_MspInit+0xa8>)
 8000b2a:	699b      	ldr	r3, [r3, #24]
 8000b2c:	4a20      	ldr	r2, [pc, #128]	; (8000bb0 <HAL_SPI_MspInit+0xa8>)
 8000b2e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000b32:	6193      	str	r3, [r2, #24]
 8000b34:	4b1e      	ldr	r3, [pc, #120]	; (8000bb0 <HAL_SPI_MspInit+0xa8>)
 8000b36:	699b      	ldr	r3, [r3, #24]
 8000b38:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000b3c:	613b      	str	r3, [r7, #16]
 8000b3e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b40:	4b1b      	ldr	r3, [pc, #108]	; (8000bb0 <HAL_SPI_MspInit+0xa8>)
 8000b42:	699b      	ldr	r3, [r3, #24]
 8000b44:	4a1a      	ldr	r2, [pc, #104]	; (8000bb0 <HAL_SPI_MspInit+0xa8>)
 8000b46:	f043 0308 	orr.w	r3, r3, #8
 8000b4a:	6193      	str	r3, [r2, #24]
 8000b4c:	4b18      	ldr	r3, [pc, #96]	; (8000bb0 <HAL_SPI_MspInit+0xa8>)
 8000b4e:	699b      	ldr	r3, [r3, #24]
 8000b50:	f003 0308 	and.w	r3, r3, #8
 8000b54:	60fb      	str	r3, [r7, #12]
 8000b56:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 8000b58:	2328      	movs	r3, #40	; 0x28
 8000b5a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b5c:	2302      	movs	r3, #2
 8000b5e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b60:	2303      	movs	r3, #3
 8000b62:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b64:	f107 0314 	add.w	r3, r7, #20
 8000b68:	4619      	mov	r1, r3
 8000b6a:	4812      	ldr	r0, [pc, #72]	; (8000bb4 <HAL_SPI_MspInit+0xac>)
 8000b6c:	f001 f9ce 	bl	8001f0c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000b70:	2310      	movs	r3, #16
 8000b72:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b74:	2300      	movs	r3, #0
 8000b76:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b7c:	f107 0314 	add.w	r3, r7, #20
 8000b80:	4619      	mov	r1, r3
 8000b82:	480c      	ldr	r0, [pc, #48]	; (8000bb4 <HAL_SPI_MspInit+0xac>)
 8000b84:	f001 f9c2 	bl	8001f0c <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_SPI1_ENABLE();
 8000b88:	4b0b      	ldr	r3, [pc, #44]	; (8000bb8 <HAL_SPI_MspInit+0xb0>)
 8000b8a:	685b      	ldr	r3, [r3, #4]
 8000b8c:	627b      	str	r3, [r7, #36]	; 0x24
 8000b8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b90:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8000b94:	627b      	str	r3, [r7, #36]	; 0x24
 8000b96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b98:	f043 0301 	orr.w	r3, r3, #1
 8000b9c:	627b      	str	r3, [r7, #36]	; 0x24
 8000b9e:	4a06      	ldr	r2, [pc, #24]	; (8000bb8 <HAL_SPI_MspInit+0xb0>)
 8000ba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ba2:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000ba4:	bf00      	nop
 8000ba6:	3728      	adds	r7, #40	; 0x28
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	bd80      	pop	{r7, pc}
 8000bac:	40013000 	.word	0x40013000
 8000bb0:	40021000 	.word	0x40021000
 8000bb4:	40010c00 	.word	0x40010c00
 8000bb8:	40010000 	.word	0x40010000

08000bbc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000bc0:	bf00      	nop
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bc80      	pop	{r7}
 8000bc6:	4770      	bx	lr

08000bc8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bcc:	e7fe      	b.n	8000bcc <HardFault_Handler+0x4>

08000bce <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bce:	b480      	push	{r7}
 8000bd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bd2:	e7fe      	b.n	8000bd2 <MemManage_Handler+0x4>

08000bd4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bd8:	e7fe      	b.n	8000bd8 <BusFault_Handler+0x4>

08000bda <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bda:	b480      	push	{r7}
 8000bdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bde:	e7fe      	b.n	8000bde <UsageFault_Handler+0x4>

08000be0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000be0:	b480      	push	{r7}
 8000be2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000be4:	bf00      	nop
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bc80      	pop	{r7}
 8000bea:	4770      	bx	lr

08000bec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bec:	b480      	push	{r7}
 8000bee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bf0:	bf00      	nop
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bc80      	pop	{r7}
 8000bf6:	4770      	bx	lr

08000bf8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bfc:	bf00      	nop
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bc80      	pop	{r7}
 8000c02:	4770      	bx	lr

08000c04 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c08:	f000 f8c8 	bl	8000d9c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c0c:	bf00      	nop
 8000c0e:	bd80      	pop	{r7, pc}

08000c10 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8000c14:	2002      	movs	r0, #2
 8000c16:	f001 faeb 	bl	80021f0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8000c1a:	bf00      	nop
 8000c1c:	bd80      	pop	{r7, pc}
	...

08000c20 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000c24:	4802      	ldr	r0, [pc, #8]	; (8000c30 <DMA1_Channel1_IRQHandler+0x10>)
 8000c26:	f001 f83d 	bl	8001ca4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000c2a:	bf00      	nop
 8000c2c:	bd80      	pop	{r7, pc}
 8000c2e:	bf00      	nop
 8000c30:	200006d8 	.word	0x200006d8

08000c34 <USB_HP_CAN1_TX_IRQHandler>:

/**
  * @brief This function handles USB high priority or CAN TX interrupts.
  */
void USB_HP_CAN1_TX_IRQHandler(void)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 0 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000c38:	4802      	ldr	r0, [pc, #8]	; (8000c44 <USB_HP_CAN1_TX_IRQHandler+0x10>)
 8000c3a:	f001 fbf8 	bl	800242e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 1 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 1 */
}
 8000c3e:	bf00      	nop
 8000c40:	bd80      	pop	{r7, pc}
 8000c42:	bf00      	nop
 8000c44:	200033cc 	.word	0x200033cc

08000c48 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000c4c:	4802      	ldr	r0, [pc, #8]	; (8000c58 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8000c4e:	f001 fbee 	bl	800242e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8000c52:	bf00      	nop
 8000c54:	bd80      	pop	{r7, pc}
 8000c56:	bf00      	nop
 8000c58:	200033cc 	.word	0x200033cc

08000c5c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8000c60:	4b15      	ldr	r3, [pc, #84]	; (8000cb8 <SystemInit+0x5c>)
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	4a14      	ldr	r2, [pc, #80]	; (8000cb8 <SystemInit+0x5c>)
 8000c66:	f043 0301 	orr.w	r3, r3, #1
 8000c6a:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8000c6c:	4b12      	ldr	r3, [pc, #72]	; (8000cb8 <SystemInit+0x5c>)
 8000c6e:	685a      	ldr	r2, [r3, #4]
 8000c70:	4911      	ldr	r1, [pc, #68]	; (8000cb8 <SystemInit+0x5c>)
 8000c72:	4b12      	ldr	r3, [pc, #72]	; (8000cbc <SystemInit+0x60>)
 8000c74:	4013      	ands	r3, r2
 8000c76:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8000c78:	4b0f      	ldr	r3, [pc, #60]	; (8000cb8 <SystemInit+0x5c>)
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	4a0e      	ldr	r2, [pc, #56]	; (8000cb8 <SystemInit+0x5c>)
 8000c7e:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000c82:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000c86:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000c88:	4b0b      	ldr	r3, [pc, #44]	; (8000cb8 <SystemInit+0x5c>)
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	4a0a      	ldr	r2, [pc, #40]	; (8000cb8 <SystemInit+0x5c>)
 8000c8e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c92:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8000c94:	4b08      	ldr	r3, [pc, #32]	; (8000cb8 <SystemInit+0x5c>)
 8000c96:	685b      	ldr	r3, [r3, #4]
 8000c98:	4a07      	ldr	r2, [pc, #28]	; (8000cb8 <SystemInit+0x5c>)
 8000c9a:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8000c9e:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8000ca0:	4b05      	ldr	r3, [pc, #20]	; (8000cb8 <SystemInit+0x5c>)
 8000ca2:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8000ca6:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8000ca8:	4b05      	ldr	r3, [pc, #20]	; (8000cc0 <SystemInit+0x64>)
 8000caa:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000cae:	609a      	str	r2, [r3, #8]
#endif 
}
 8000cb0:	bf00      	nop
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bc80      	pop	{r7}
 8000cb6:	4770      	bx	lr
 8000cb8:	40021000 	.word	0x40021000
 8000cbc:	f8ff0000 	.word	0xf8ff0000
 8000cc0:	e000ed00 	.word	0xe000ed00

08000cc4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000cc4:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000cc6:	e003      	b.n	8000cd0 <LoopCopyDataInit>

08000cc8 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000cc8:	4b0b      	ldr	r3, [pc, #44]	; (8000cf8 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000cca:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000ccc:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000cce:	3104      	adds	r1, #4

08000cd0 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000cd0:	480a      	ldr	r0, [pc, #40]	; (8000cfc <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000cd2:	4b0b      	ldr	r3, [pc, #44]	; (8000d00 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000cd4:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000cd6:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000cd8:	d3f6      	bcc.n	8000cc8 <CopyDataInit>
  ldr r2, =_sbss
 8000cda:	4a0a      	ldr	r2, [pc, #40]	; (8000d04 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000cdc:	e002      	b.n	8000ce4 <LoopFillZerobss>

08000cde <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000cde:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000ce0:	f842 3b04 	str.w	r3, [r2], #4

08000ce4 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000ce4:	4b08      	ldr	r3, [pc, #32]	; (8000d08 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000ce6:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000ce8:	d3f9      	bcc.n	8000cde <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000cea:	f7ff ffb7 	bl	8000c5c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000cee:	f006 fa67 	bl	80071c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000cf2:	f7ff fb17 	bl	8000324 <main>
  bx lr
 8000cf6:	4770      	bx	lr
  ldr r3, =_sidata
 8000cf8:	08007548 	.word	0x08007548
  ldr r0, =_sdata
 8000cfc:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000d00:	20000350 	.word	0x20000350
  ldr r2, =_sbss
 8000d04:	20000350 	.word	0x20000350
  ldr r3, = _ebss
 8000d08:	20003638 	.word	0x20003638

08000d0c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000d0c:	e7fe      	b.n	8000d0c <ADC1_2_IRQHandler>
	...

08000d10 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d14:	4b08      	ldr	r3, [pc, #32]	; (8000d38 <HAL_Init+0x28>)
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	4a07      	ldr	r2, [pc, #28]	; (8000d38 <HAL_Init+0x28>)
 8000d1a:	f043 0310 	orr.w	r3, r3, #16
 8000d1e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d20:	2003      	movs	r0, #3
 8000d22:	f000 fe89 	bl	8001a38 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d26:	2000      	movs	r0, #0
 8000d28:	f000 f808 	bl	8000d3c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d2c:	f7ff fe50 	bl	80009d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d30:	2300      	movs	r3, #0
}
 8000d32:	4618      	mov	r0, r3
 8000d34:	bd80      	pop	{r7, pc}
 8000d36:	bf00      	nop
 8000d38:	40022000 	.word	0x40022000

08000d3c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b082      	sub	sp, #8
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d44:	4b12      	ldr	r3, [pc, #72]	; (8000d90 <HAL_InitTick+0x54>)
 8000d46:	681a      	ldr	r2, [r3, #0]
 8000d48:	4b12      	ldr	r3, [pc, #72]	; (8000d94 <HAL_InitTick+0x58>)
 8000d4a:	781b      	ldrb	r3, [r3, #0]
 8000d4c:	4619      	mov	r1, r3
 8000d4e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d52:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d56:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	f000 fea1 	bl	8001aa2 <HAL_SYSTICK_Config>
 8000d60:	4603      	mov	r3, r0
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d001      	beq.n	8000d6a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d66:	2301      	movs	r3, #1
 8000d68:	e00e      	b.n	8000d88 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	2b0f      	cmp	r3, #15
 8000d6e:	d80a      	bhi.n	8000d86 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d70:	2200      	movs	r2, #0
 8000d72:	6879      	ldr	r1, [r7, #4]
 8000d74:	f04f 30ff 	mov.w	r0, #4294967295
 8000d78:	f000 fe69 	bl	8001a4e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d7c:	4a06      	ldr	r2, [pc, #24]	; (8000d98 <HAL_InitTick+0x5c>)
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d82:	2300      	movs	r3, #0
 8000d84:	e000      	b.n	8000d88 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d86:	2301      	movs	r3, #1
}
 8000d88:	4618      	mov	r0, r3
 8000d8a:	3708      	adds	r7, #8
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	bd80      	pop	{r7, pc}
 8000d90:	20000004 	.word	0x20000004
 8000d94:	2000000c 	.word	0x2000000c
 8000d98:	20000008 	.word	0x20000008

08000d9c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000da0:	4b05      	ldr	r3, [pc, #20]	; (8000db8 <HAL_IncTick+0x1c>)
 8000da2:	781b      	ldrb	r3, [r3, #0]
 8000da4:	461a      	mov	r2, r3
 8000da6:	4b05      	ldr	r3, [pc, #20]	; (8000dbc <HAL_IncTick+0x20>)
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	4413      	add	r3, r2
 8000dac:	4a03      	ldr	r2, [pc, #12]	; (8000dbc <HAL_IncTick+0x20>)
 8000dae:	6013      	str	r3, [r2, #0]
}
 8000db0:	bf00      	nop
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bc80      	pop	{r7}
 8000db6:	4770      	bx	lr
 8000db8:	2000000c 	.word	0x2000000c
 8000dbc:	20002e84 	.word	0x20002e84

08000dc0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	af00      	add	r7, sp, #0
  return uwTick;
 8000dc4:	4b02      	ldr	r3, [pc, #8]	; (8000dd0 <HAL_GetTick+0x10>)
 8000dc6:	681b      	ldr	r3, [r3, #0]
}
 8000dc8:	4618      	mov	r0, r3
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	bc80      	pop	{r7}
 8000dce:	4770      	bx	lr
 8000dd0:	20002e84 	.word	0x20002e84

08000dd4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b084      	sub	sp, #16
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ddc:	f7ff fff0 	bl	8000dc0 <HAL_GetTick>
 8000de0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000de6:	68fb      	ldr	r3, [r7, #12]
 8000de8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000dec:	d005      	beq.n	8000dfa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000dee:	4b09      	ldr	r3, [pc, #36]	; (8000e14 <HAL_Delay+0x40>)
 8000df0:	781b      	ldrb	r3, [r3, #0]
 8000df2:	461a      	mov	r2, r3
 8000df4:	68fb      	ldr	r3, [r7, #12]
 8000df6:	4413      	add	r3, r2
 8000df8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000dfa:	bf00      	nop
 8000dfc:	f7ff ffe0 	bl	8000dc0 <HAL_GetTick>
 8000e00:	4602      	mov	r2, r0
 8000e02:	68bb      	ldr	r3, [r7, #8]
 8000e04:	1ad3      	subs	r3, r2, r3
 8000e06:	68fa      	ldr	r2, [r7, #12]
 8000e08:	429a      	cmp	r2, r3
 8000e0a:	d8f7      	bhi.n	8000dfc <HAL_Delay+0x28>
  {
  }
}
 8000e0c:	bf00      	nop
 8000e0e:	3710      	adds	r7, #16
 8000e10:	46bd      	mov	sp, r7
 8000e12:	bd80      	pop	{r7, pc}
 8000e14:	2000000c 	.word	0x2000000c

08000e18 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b086      	sub	sp, #24
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000e20:	2300      	movs	r3, #0
 8000e22:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000e24:	2300      	movs	r3, #0
 8000e26:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d101      	bne.n	8000e3a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000e36:	2301      	movs	r3, #1
 8000e38:	e0be      	b.n	8000fb8 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	689b      	ldr	r3, [r3, #8]
 8000e3e:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d109      	bne.n	8000e5c <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	2200      	movs	r2, #0
 8000e52:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000e56:	6878      	ldr	r0, [r7, #4]
 8000e58:	f7ff fdec 	bl	8000a34 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000e5c:	6878      	ldr	r0, [r7, #4]
 8000e5e:	f000 fbe3 	bl	8001628 <ADC_ConversionStop_Disable>
 8000e62:	4603      	mov	r3, r0
 8000e64:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e6a:	f003 0310 	and.w	r3, r3, #16
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	f040 8099 	bne.w	8000fa6 <HAL_ADC_Init+0x18e>
 8000e74:	7dfb      	ldrb	r3, [r7, #23]
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	f040 8095 	bne.w	8000fa6 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e80:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000e84:	f023 0302 	bic.w	r3, r3, #2
 8000e88:	f043 0202 	orr.w	r2, r3, #2
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000e98:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	7b1b      	ldrb	r3, [r3, #12]
 8000e9e:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000ea0:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000ea2:	68ba      	ldr	r2, [r7, #8]
 8000ea4:	4313      	orrs	r3, r2
 8000ea6:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	689b      	ldr	r3, [r3, #8]
 8000eac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000eb0:	d003      	beq.n	8000eba <HAL_ADC_Init+0xa2>
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	689b      	ldr	r3, [r3, #8]
 8000eb6:	2b01      	cmp	r3, #1
 8000eb8:	d102      	bne.n	8000ec0 <HAL_ADC_Init+0xa8>
 8000eba:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ebe:	e000      	b.n	8000ec2 <HAL_ADC_Init+0xaa>
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	693a      	ldr	r2, [r7, #16]
 8000ec4:	4313      	orrs	r3, r2
 8000ec6:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	7d1b      	ldrb	r3, [r3, #20]
 8000ecc:	2b01      	cmp	r3, #1
 8000ece:	d119      	bne.n	8000f04 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	7b1b      	ldrb	r3, [r3, #12]
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d109      	bne.n	8000eec <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	699b      	ldr	r3, [r3, #24]
 8000edc:	3b01      	subs	r3, #1
 8000ede:	035a      	lsls	r2, r3, #13
 8000ee0:	693b      	ldr	r3, [r7, #16]
 8000ee2:	4313      	orrs	r3, r2
 8000ee4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000ee8:	613b      	str	r3, [r7, #16]
 8000eea:	e00b      	b.n	8000f04 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ef0:	f043 0220 	orr.w	r2, r3, #32
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000efc:	f043 0201 	orr.w	r2, r3, #1
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	685b      	ldr	r3, [r3, #4]
 8000f0a:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	693a      	ldr	r2, [r7, #16]
 8000f14:	430a      	orrs	r2, r1
 8000f16:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	689a      	ldr	r2, [r3, #8]
 8000f1e:	4b28      	ldr	r3, [pc, #160]	; (8000fc0 <HAL_ADC_Init+0x1a8>)
 8000f20:	4013      	ands	r3, r2
 8000f22:	687a      	ldr	r2, [r7, #4]
 8000f24:	6812      	ldr	r2, [r2, #0]
 8000f26:	68b9      	ldr	r1, [r7, #8]
 8000f28:	430b      	orrs	r3, r1
 8000f2a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	689b      	ldr	r3, [r3, #8]
 8000f30:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000f34:	d003      	beq.n	8000f3e <HAL_ADC_Init+0x126>
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	689b      	ldr	r3, [r3, #8]
 8000f3a:	2b01      	cmp	r3, #1
 8000f3c:	d104      	bne.n	8000f48 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	691b      	ldr	r3, [r3, #16]
 8000f42:	3b01      	subs	r3, #1
 8000f44:	051b      	lsls	r3, r3, #20
 8000f46:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f4e:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	68fa      	ldr	r2, [r7, #12]
 8000f58:	430a      	orrs	r2, r1
 8000f5a:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	689a      	ldr	r2, [r3, #8]
 8000f62:	4b18      	ldr	r3, [pc, #96]	; (8000fc4 <HAL_ADC_Init+0x1ac>)
 8000f64:	4013      	ands	r3, r2
 8000f66:	68ba      	ldr	r2, [r7, #8]
 8000f68:	429a      	cmp	r2, r3
 8000f6a:	d10b      	bne.n	8000f84 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	2200      	movs	r2, #0
 8000f70:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f76:	f023 0303 	bic.w	r3, r3, #3
 8000f7a:	f043 0201 	orr.w	r2, r3, #1
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000f82:	e018      	b.n	8000fb6 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f88:	f023 0312 	bic.w	r3, r3, #18
 8000f8c:	f043 0210 	orr.w	r2, r3, #16
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f98:	f043 0201 	orr.w	r2, r3, #1
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000fa0:	2301      	movs	r3, #1
 8000fa2:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000fa4:	e007      	b.n	8000fb6 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000faa:	f043 0210 	orr.w	r2, r3, #16
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8000fb2:	2301      	movs	r3, #1
 8000fb4:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000fb6:	7dfb      	ldrb	r3, [r7, #23]
}
 8000fb8:	4618      	mov	r0, r3
 8000fba:	3718      	adds	r7, #24
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	bd80      	pop	{r7, pc}
 8000fc0:	ffe1f7fd 	.word	0xffe1f7fd
 8000fc4:	ff1f0efe 	.word	0xff1f0efe

08000fc8 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b084      	sub	sp, #16
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000fda:	2b01      	cmp	r3, #1
 8000fdc:	d101      	bne.n	8000fe2 <HAL_ADC_Start+0x1a>
 8000fde:	2302      	movs	r3, #2
 8000fe0:	e098      	b.n	8001114 <HAL_ADC_Start+0x14c>
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	2201      	movs	r2, #1
 8000fe6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8000fea:	6878      	ldr	r0, [r7, #4]
 8000fec:	f000 faca 	bl	8001584 <ADC_Enable>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8000ff4:	7bfb      	ldrb	r3, [r7, #15]
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	f040 8087 	bne.w	800110a <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001000:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001004:	f023 0301 	bic.w	r3, r3, #1
 8001008:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	4a41      	ldr	r2, [pc, #260]	; (800111c <HAL_ADC_Start+0x154>)
 8001016:	4293      	cmp	r3, r2
 8001018:	d105      	bne.n	8001026 <HAL_ADC_Start+0x5e>
 800101a:	4b41      	ldr	r3, [pc, #260]	; (8001120 <HAL_ADC_Start+0x158>)
 800101c:	685b      	ldr	r3, [r3, #4]
 800101e:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001022:	2b00      	cmp	r3, #0
 8001024:	d115      	bne.n	8001052 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800102a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	685b      	ldr	r3, [r3, #4]
 8001038:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800103c:	2b00      	cmp	r3, #0
 800103e:	d026      	beq.n	800108e <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001044:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001048:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001050:	e01d      	b.n	800108e <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001056:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	4a2f      	ldr	r2, [pc, #188]	; (8001120 <HAL_ADC_Start+0x158>)
 8001064:	4293      	cmp	r3, r2
 8001066:	d004      	beq.n	8001072 <HAL_ADC_Start+0xaa>
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	4a2b      	ldr	r2, [pc, #172]	; (800111c <HAL_ADC_Start+0x154>)
 800106e:	4293      	cmp	r3, r2
 8001070:	d10d      	bne.n	800108e <HAL_ADC_Start+0xc6>
 8001072:	4b2b      	ldr	r3, [pc, #172]	; (8001120 <HAL_ADC_Start+0x158>)
 8001074:	685b      	ldr	r3, [r3, #4]
 8001076:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800107a:	2b00      	cmp	r3, #0
 800107c:	d007      	beq.n	800108e <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001082:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001086:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001092:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001096:	2b00      	cmp	r3, #0
 8001098:	d006      	beq.n	80010a8 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800109e:	f023 0206 	bic.w	r2, r3, #6
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	62da      	str	r2, [r3, #44]	; 0x2c
 80010a6:	e002      	b.n	80010ae <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	2200      	movs	r2, #0
 80010ac:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	2200      	movs	r2, #0
 80010b2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	f06f 0202 	mvn.w	r2, #2
 80010be:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	689b      	ldr	r3, [r3, #8]
 80010c6:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80010ca:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80010ce:	d113      	bne.n	80010f8 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80010d4:	4a11      	ldr	r2, [pc, #68]	; (800111c <HAL_ADC_Start+0x154>)
 80010d6:	4293      	cmp	r3, r2
 80010d8:	d105      	bne.n	80010e6 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80010da:	4b11      	ldr	r3, [pc, #68]	; (8001120 <HAL_ADC_Start+0x158>)
 80010dc:	685b      	ldr	r3, [r3, #4]
 80010de:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d108      	bne.n	80010f8 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	689a      	ldr	r2, [r3, #8]
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 80010f4:	609a      	str	r2, [r3, #8]
 80010f6:	e00c      	b.n	8001112 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	689a      	ldr	r2, [r3, #8]
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8001106:	609a      	str	r2, [r3, #8]
 8001108:	e003      	b.n	8001112 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	2200      	movs	r2, #0
 800110e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8001112:	7bfb      	ldrb	r3, [r7, #15]
}
 8001114:	4618      	mov	r0, r3
 8001116:	3710      	adds	r7, #16
 8001118:	46bd      	mov	sp, r7
 800111a:	bd80      	pop	{r7, pc}
 800111c:	40012800 	.word	0x40012800
 8001120:	40012400 	.word	0x40012400

08001124 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b086      	sub	sp, #24
 8001128:	af00      	add	r7, sp, #0
 800112a:	60f8      	str	r0, [r7, #12]
 800112c:	60b9      	str	r1, [r7, #8]
 800112e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001130:	2300      	movs	r3, #0
 8001132:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	4a64      	ldr	r2, [pc, #400]	; (80012cc <HAL_ADC_Start_DMA+0x1a8>)
 800113a:	4293      	cmp	r3, r2
 800113c:	d004      	beq.n	8001148 <HAL_ADC_Start_DMA+0x24>
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	4a63      	ldr	r2, [pc, #396]	; (80012d0 <HAL_ADC_Start_DMA+0x1ac>)
 8001144:	4293      	cmp	r3, r2
 8001146:	d106      	bne.n	8001156 <HAL_ADC_Start_DMA+0x32>
 8001148:	4b60      	ldr	r3, [pc, #384]	; (80012cc <HAL_ADC_Start_DMA+0x1a8>)
 800114a:	685b      	ldr	r3, [r3, #4]
 800114c:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001150:	2b00      	cmp	r3, #0
 8001152:	f040 80b3 	bne.w	80012bc <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001156:	68fb      	ldr	r3, [r7, #12]
 8001158:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800115c:	2b01      	cmp	r3, #1
 800115e:	d101      	bne.n	8001164 <HAL_ADC_Start_DMA+0x40>
 8001160:	2302      	movs	r3, #2
 8001162:	e0ae      	b.n	80012c2 <HAL_ADC_Start_DMA+0x19e>
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	2201      	movs	r2, #1
 8001168:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800116c:	68f8      	ldr	r0, [r7, #12]
 800116e:	f000 fa09 	bl	8001584 <ADC_Enable>
 8001172:	4603      	mov	r3, r0
 8001174:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001176:	7dfb      	ldrb	r3, [r7, #23]
 8001178:	2b00      	cmp	r3, #0
 800117a:	f040 809a 	bne.w	80012b2 <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800117e:	68fb      	ldr	r3, [r7, #12]
 8001180:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001182:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001186:	f023 0301 	bic.w	r3, r3, #1
 800118a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	4a4e      	ldr	r2, [pc, #312]	; (80012d0 <HAL_ADC_Start_DMA+0x1ac>)
 8001198:	4293      	cmp	r3, r2
 800119a:	d105      	bne.n	80011a8 <HAL_ADC_Start_DMA+0x84>
 800119c:	4b4b      	ldr	r3, [pc, #300]	; (80012cc <HAL_ADC_Start_DMA+0x1a8>)
 800119e:	685b      	ldr	r3, [r3, #4]
 80011a0:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d115      	bne.n	80011d4 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011ac:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	685b      	ldr	r3, [r3, #4]
 80011ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d026      	beq.n	8001210 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011c6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80011ca:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80011d2:	e01d      	b.n	8001210 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011d8:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	4a39      	ldr	r2, [pc, #228]	; (80012cc <HAL_ADC_Start_DMA+0x1a8>)
 80011e6:	4293      	cmp	r3, r2
 80011e8:	d004      	beq.n	80011f4 <HAL_ADC_Start_DMA+0xd0>
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	4a38      	ldr	r2, [pc, #224]	; (80012d0 <HAL_ADC_Start_DMA+0x1ac>)
 80011f0:	4293      	cmp	r3, r2
 80011f2:	d10d      	bne.n	8001210 <HAL_ADC_Start_DMA+0xec>
 80011f4:	4b35      	ldr	r3, [pc, #212]	; (80012cc <HAL_ADC_Start_DMA+0x1a8>)
 80011f6:	685b      	ldr	r3, [r3, #4]
 80011f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d007      	beq.n	8001210 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001204:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001208:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001214:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001218:	2b00      	cmp	r3, #0
 800121a:	d006      	beq.n	800122a <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001220:	f023 0206 	bic.w	r2, r3, #6
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	62da      	str	r2, [r3, #44]	; 0x2c
 8001228:	e002      	b.n	8001230 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	2200      	movs	r2, #0
 800122e:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	2200      	movs	r2, #0
 8001234:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	6a1b      	ldr	r3, [r3, #32]
 800123c:	4a25      	ldr	r2, [pc, #148]	; (80012d4 <HAL_ADC_Start_DMA+0x1b0>)
 800123e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	6a1b      	ldr	r3, [r3, #32]
 8001244:	4a24      	ldr	r2, [pc, #144]	; (80012d8 <HAL_ADC_Start_DMA+0x1b4>)
 8001246:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	6a1b      	ldr	r3, [r3, #32]
 800124c:	4a23      	ldr	r2, [pc, #140]	; (80012dc <HAL_ADC_Start_DMA+0x1b8>)
 800124e:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	f06f 0202 	mvn.w	r2, #2
 8001258:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	689a      	ldr	r2, [r3, #8]
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001268:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	6a18      	ldr	r0, [r3, #32]
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	334c      	adds	r3, #76	; 0x4c
 8001274:	4619      	mov	r1, r3
 8001276:	68ba      	ldr	r2, [r7, #8]
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	f000 fc79 	bl	8001b70 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 800127e:	68fb      	ldr	r3, [r7, #12]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	689b      	ldr	r3, [r3, #8]
 8001284:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001288:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800128c:	d108      	bne.n	80012a0 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	689a      	ldr	r2, [r3, #8]
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 800129c:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 800129e:	e00f      	b.n	80012c0 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	689a      	ldr	r2, [r3, #8]
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80012ae:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 80012b0:	e006      	b.n	80012c0 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	2200      	movs	r2, #0
 80012b6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 80012ba:	e001      	b.n	80012c0 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80012bc:	2301      	movs	r3, #1
 80012be:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80012c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80012c2:	4618      	mov	r0, r3
 80012c4:	3718      	adds	r7, #24
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bd80      	pop	{r7, pc}
 80012ca:	bf00      	nop
 80012cc:	40012400 	.word	0x40012400
 80012d0:	40012800 	.word	0x40012800
 80012d4:	0800169d 	.word	0x0800169d
 80012d8:	08001719 	.word	0x08001719
 80012dc:	08001735 	.word	0x08001735

080012e0 <HAL_ADC_Stop_DMA>:
  *         on devices) have DMA capability.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b084      	sub	sp, #16
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80012e8:	2300      	movs	r3, #0
 80012ea:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80012f2:	2b01      	cmp	r3, #1
 80012f4:	d101      	bne.n	80012fa <HAL_ADC_Stop_DMA+0x1a>
 80012f6:	2302      	movs	r3, #2
 80012f8:	e033      	b.n	8001362 <HAL_ADC_Stop_DMA+0x82>
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	2201      	movs	r2, #1
 80012fe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001302:	6878      	ldr	r0, [r7, #4]
 8001304:	f000 f990 	bl	8001628 <ADC_ConversionStop_Disable>
 8001308:	4603      	mov	r3, r0
 800130a:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 800130c:	7bfb      	ldrb	r3, [r7, #15]
 800130e:	2b00      	cmp	r3, #0
 8001310:	d122      	bne.n	8001358 <HAL_ADC_Stop_DMA+0x78>
  {
    /* Disable ADC DMA mode */
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	689a      	ldr	r2, [r3, #8]
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001320:	609a      	str	r2, [r3, #8]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	6a1b      	ldr	r3, [r3, #32]
 8001326:	4618      	mov	r0, r3
 8001328:	f000 fc81 	bl	8001c2e <HAL_DMA_Abort>
 800132c:	4603      	mov	r3, r0
 800132e:	73fb      	strb	r3, [r7, #15]
    
    /* Check if DMA channel effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8001330:	7bfb      	ldrb	r3, [r7, #15]
 8001332:	2b00      	cmp	r3, #0
 8001334:	d10a      	bne.n	800134c <HAL_ADC_Stop_DMA+0x6c>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800133a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800133e:	f023 0301 	bic.w	r3, r3, #1
 8001342:	f043 0201 	orr.w	r2, r3, #1
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	629a      	str	r2, [r3, #40]	; 0x28
 800134a:	e005      	b.n	8001358 <HAL_ADC_Stop_DMA+0x78>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001350:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	2200      	movs	r2, #0
 800135c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
  /* Return function status */
  return tmp_hal_status;
 8001360:	7bfb      	ldrb	r3, [r7, #15]
}
 8001362:	4618      	mov	r0, r3
 8001364:	3710      	adds	r7, #16
 8001366:	46bd      	mov	sp, r7
 8001368:	bd80      	pop	{r7, pc}

0800136a <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 800136a:	b480      	push	{r7}
 800136c:	b083      	sub	sp, #12
 800136e:	af00      	add	r7, sp, #0
 8001370:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001378:	4618      	mov	r0, r3
 800137a:	370c      	adds	r7, #12
 800137c:	46bd      	mov	sp, r7
 800137e:	bc80      	pop	{r7}
 8001380:	4770      	bx	lr

08001382 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001382:	b480      	push	{r7}
 8001384:	b083      	sub	sp, #12
 8001386:	af00      	add	r7, sp, #0
 8001388:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800138a:	bf00      	nop
 800138c:	370c      	adds	r7, #12
 800138e:	46bd      	mov	sp, r7
 8001390:	bc80      	pop	{r7}
 8001392:	4770      	bx	lr

08001394 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001394:	b480      	push	{r7}
 8001396:	b085      	sub	sp, #20
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
 800139c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800139e:	2300      	movs	r3, #0
 80013a0:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80013a2:	2300      	movs	r3, #0
 80013a4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80013ac:	2b01      	cmp	r3, #1
 80013ae:	d101      	bne.n	80013b4 <HAL_ADC_ConfigChannel+0x20>
 80013b0:	2302      	movs	r3, #2
 80013b2:	e0dc      	b.n	800156e <HAL_ADC_ConfigChannel+0x1da>
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	2201      	movs	r2, #1
 80013b8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80013bc:	683b      	ldr	r3, [r7, #0]
 80013be:	685b      	ldr	r3, [r3, #4]
 80013c0:	2b06      	cmp	r3, #6
 80013c2:	d81c      	bhi.n	80013fe <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80013ca:	683b      	ldr	r3, [r7, #0]
 80013cc:	685a      	ldr	r2, [r3, #4]
 80013ce:	4613      	mov	r3, r2
 80013d0:	009b      	lsls	r3, r3, #2
 80013d2:	4413      	add	r3, r2
 80013d4:	3b05      	subs	r3, #5
 80013d6:	221f      	movs	r2, #31
 80013d8:	fa02 f303 	lsl.w	r3, r2, r3
 80013dc:	43db      	mvns	r3, r3
 80013de:	4019      	ands	r1, r3
 80013e0:	683b      	ldr	r3, [r7, #0]
 80013e2:	6818      	ldr	r0, [r3, #0]
 80013e4:	683b      	ldr	r3, [r7, #0]
 80013e6:	685a      	ldr	r2, [r3, #4]
 80013e8:	4613      	mov	r3, r2
 80013ea:	009b      	lsls	r3, r3, #2
 80013ec:	4413      	add	r3, r2
 80013ee:	3b05      	subs	r3, #5
 80013f0:	fa00 f203 	lsl.w	r2, r0, r3
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	430a      	orrs	r2, r1
 80013fa:	635a      	str	r2, [r3, #52]	; 0x34
 80013fc:	e03c      	b.n	8001478 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80013fe:	683b      	ldr	r3, [r7, #0]
 8001400:	685b      	ldr	r3, [r3, #4]
 8001402:	2b0c      	cmp	r3, #12
 8001404:	d81c      	bhi.n	8001440 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800140c:	683b      	ldr	r3, [r7, #0]
 800140e:	685a      	ldr	r2, [r3, #4]
 8001410:	4613      	mov	r3, r2
 8001412:	009b      	lsls	r3, r3, #2
 8001414:	4413      	add	r3, r2
 8001416:	3b23      	subs	r3, #35	; 0x23
 8001418:	221f      	movs	r2, #31
 800141a:	fa02 f303 	lsl.w	r3, r2, r3
 800141e:	43db      	mvns	r3, r3
 8001420:	4019      	ands	r1, r3
 8001422:	683b      	ldr	r3, [r7, #0]
 8001424:	6818      	ldr	r0, [r3, #0]
 8001426:	683b      	ldr	r3, [r7, #0]
 8001428:	685a      	ldr	r2, [r3, #4]
 800142a:	4613      	mov	r3, r2
 800142c:	009b      	lsls	r3, r3, #2
 800142e:	4413      	add	r3, r2
 8001430:	3b23      	subs	r3, #35	; 0x23
 8001432:	fa00 f203 	lsl.w	r2, r0, r3
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	430a      	orrs	r2, r1
 800143c:	631a      	str	r2, [r3, #48]	; 0x30
 800143e:	e01b      	b.n	8001478 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001446:	683b      	ldr	r3, [r7, #0]
 8001448:	685a      	ldr	r2, [r3, #4]
 800144a:	4613      	mov	r3, r2
 800144c:	009b      	lsls	r3, r3, #2
 800144e:	4413      	add	r3, r2
 8001450:	3b41      	subs	r3, #65	; 0x41
 8001452:	221f      	movs	r2, #31
 8001454:	fa02 f303 	lsl.w	r3, r2, r3
 8001458:	43db      	mvns	r3, r3
 800145a:	4019      	ands	r1, r3
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	6818      	ldr	r0, [r3, #0]
 8001460:	683b      	ldr	r3, [r7, #0]
 8001462:	685a      	ldr	r2, [r3, #4]
 8001464:	4613      	mov	r3, r2
 8001466:	009b      	lsls	r3, r3, #2
 8001468:	4413      	add	r3, r2
 800146a:	3b41      	subs	r3, #65	; 0x41
 800146c:	fa00 f203 	lsl.w	r2, r0, r3
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	430a      	orrs	r2, r1
 8001476:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001478:	683b      	ldr	r3, [r7, #0]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	2b09      	cmp	r3, #9
 800147e:	d91c      	bls.n	80014ba <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	68d9      	ldr	r1, [r3, #12]
 8001486:	683b      	ldr	r3, [r7, #0]
 8001488:	681a      	ldr	r2, [r3, #0]
 800148a:	4613      	mov	r3, r2
 800148c:	005b      	lsls	r3, r3, #1
 800148e:	4413      	add	r3, r2
 8001490:	3b1e      	subs	r3, #30
 8001492:	2207      	movs	r2, #7
 8001494:	fa02 f303 	lsl.w	r3, r2, r3
 8001498:	43db      	mvns	r3, r3
 800149a:	4019      	ands	r1, r3
 800149c:	683b      	ldr	r3, [r7, #0]
 800149e:	6898      	ldr	r0, [r3, #8]
 80014a0:	683b      	ldr	r3, [r7, #0]
 80014a2:	681a      	ldr	r2, [r3, #0]
 80014a4:	4613      	mov	r3, r2
 80014a6:	005b      	lsls	r3, r3, #1
 80014a8:	4413      	add	r3, r2
 80014aa:	3b1e      	subs	r3, #30
 80014ac:	fa00 f203 	lsl.w	r2, r0, r3
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	430a      	orrs	r2, r1
 80014b6:	60da      	str	r2, [r3, #12]
 80014b8:	e019      	b.n	80014ee <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	6919      	ldr	r1, [r3, #16]
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	681a      	ldr	r2, [r3, #0]
 80014c4:	4613      	mov	r3, r2
 80014c6:	005b      	lsls	r3, r3, #1
 80014c8:	4413      	add	r3, r2
 80014ca:	2207      	movs	r2, #7
 80014cc:	fa02 f303 	lsl.w	r3, r2, r3
 80014d0:	43db      	mvns	r3, r3
 80014d2:	4019      	ands	r1, r3
 80014d4:	683b      	ldr	r3, [r7, #0]
 80014d6:	6898      	ldr	r0, [r3, #8]
 80014d8:	683b      	ldr	r3, [r7, #0]
 80014da:	681a      	ldr	r2, [r3, #0]
 80014dc:	4613      	mov	r3, r2
 80014de:	005b      	lsls	r3, r3, #1
 80014e0:	4413      	add	r3, r2
 80014e2:	fa00 f203 	lsl.w	r2, r0, r3
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	430a      	orrs	r2, r1
 80014ec:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80014ee:	683b      	ldr	r3, [r7, #0]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	2b10      	cmp	r3, #16
 80014f4:	d003      	beq.n	80014fe <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80014f6:	683b      	ldr	r3, [r7, #0]
 80014f8:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80014fa:	2b11      	cmp	r3, #17
 80014fc:	d132      	bne.n	8001564 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	4a1d      	ldr	r2, [pc, #116]	; (8001578 <HAL_ADC_ConfigChannel+0x1e4>)
 8001504:	4293      	cmp	r3, r2
 8001506:	d125      	bne.n	8001554 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	689b      	ldr	r3, [r3, #8]
 800150e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001512:	2b00      	cmp	r3, #0
 8001514:	d126      	bne.n	8001564 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	689a      	ldr	r2, [r3, #8]
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001524:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8001526:	683b      	ldr	r3, [r7, #0]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	2b10      	cmp	r3, #16
 800152c:	d11a      	bne.n	8001564 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800152e:	4b13      	ldr	r3, [pc, #76]	; (800157c <HAL_ADC_ConfigChannel+0x1e8>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	4a13      	ldr	r2, [pc, #76]	; (8001580 <HAL_ADC_ConfigChannel+0x1ec>)
 8001534:	fba2 2303 	umull	r2, r3, r2, r3
 8001538:	0c9a      	lsrs	r2, r3, #18
 800153a:	4613      	mov	r3, r2
 800153c:	009b      	lsls	r3, r3, #2
 800153e:	4413      	add	r3, r2
 8001540:	005b      	lsls	r3, r3, #1
 8001542:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001544:	e002      	b.n	800154c <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001546:	68bb      	ldr	r3, [r7, #8]
 8001548:	3b01      	subs	r3, #1
 800154a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800154c:	68bb      	ldr	r3, [r7, #8]
 800154e:	2b00      	cmp	r3, #0
 8001550:	d1f9      	bne.n	8001546 <HAL_ADC_ConfigChannel+0x1b2>
 8001552:	e007      	b.n	8001564 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001558:	f043 0220 	orr.w	r2, r3, #32
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001560:	2301      	movs	r3, #1
 8001562:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	2200      	movs	r2, #0
 8001568:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800156c:	7bfb      	ldrb	r3, [r7, #15]
}
 800156e:	4618      	mov	r0, r3
 8001570:	3714      	adds	r7, #20
 8001572:	46bd      	mov	sp, r7
 8001574:	bc80      	pop	{r7}
 8001576:	4770      	bx	lr
 8001578:	40012400 	.word	0x40012400
 800157c:	20000004 	.word	0x20000004
 8001580:	431bde83 	.word	0x431bde83

08001584 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b084      	sub	sp, #16
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800158c:	2300      	movs	r3, #0
 800158e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001590:	2300      	movs	r3, #0
 8001592:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	689b      	ldr	r3, [r3, #8]
 800159a:	f003 0301 	and.w	r3, r3, #1
 800159e:	2b01      	cmp	r3, #1
 80015a0:	d039      	beq.n	8001616 <ADC_Enable+0x92>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	689a      	ldr	r2, [r3, #8]
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	f042 0201 	orr.w	r2, r2, #1
 80015b0:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80015b2:	4b1b      	ldr	r3, [pc, #108]	; (8001620 <ADC_Enable+0x9c>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	4a1b      	ldr	r2, [pc, #108]	; (8001624 <ADC_Enable+0xa0>)
 80015b8:	fba2 2303 	umull	r2, r3, r2, r3
 80015bc:	0c9b      	lsrs	r3, r3, #18
 80015be:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80015c0:	e002      	b.n	80015c8 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80015c2:	68bb      	ldr	r3, [r7, #8]
 80015c4:	3b01      	subs	r3, #1
 80015c6:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80015c8:	68bb      	ldr	r3, [r7, #8]
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d1f9      	bne.n	80015c2 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80015ce:	f7ff fbf7 	bl	8000dc0 <HAL_GetTick>
 80015d2:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80015d4:	e018      	b.n	8001608 <ADC_Enable+0x84>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80015d6:	f7ff fbf3 	bl	8000dc0 <HAL_GetTick>
 80015da:	4602      	mov	r2, r0
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	1ad3      	subs	r3, r2, r3
 80015e0:	2b02      	cmp	r3, #2
 80015e2:	d911      	bls.n	8001608 <ADC_Enable+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015e8:	f043 0210 	orr.w	r2, r3, #16
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	629a      	str	r2, [r3, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015f4:	f043 0201 	orr.w	r2, r3, #1
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	2200      	movs	r2, #0
 8001600:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
        return HAL_ERROR;
 8001604:	2301      	movs	r3, #1
 8001606:	e007      	b.n	8001618 <ADC_Enable+0x94>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	689b      	ldr	r3, [r3, #8]
 800160e:	f003 0301 	and.w	r3, r3, #1
 8001612:	2b01      	cmp	r3, #1
 8001614:	d1df      	bne.n	80015d6 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001616:	2300      	movs	r3, #0
}
 8001618:	4618      	mov	r0, r3
 800161a:	3710      	adds	r7, #16
 800161c:	46bd      	mov	sp, r7
 800161e:	bd80      	pop	{r7, pc}
 8001620:	20000004 	.word	0x20000004
 8001624:	431bde83 	.word	0x431bde83

08001628 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b084      	sub	sp, #16
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001630:	2300      	movs	r3, #0
 8001632:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	689b      	ldr	r3, [r3, #8]
 800163a:	f003 0301 	and.w	r3, r3, #1
 800163e:	2b01      	cmp	r3, #1
 8001640:	d127      	bne.n	8001692 <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	689a      	ldr	r2, [r3, #8]
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	f022 0201 	bic.w	r2, r2, #1
 8001650:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001652:	f7ff fbb5 	bl	8000dc0 <HAL_GetTick>
 8001656:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001658:	e014      	b.n	8001684 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800165a:	f7ff fbb1 	bl	8000dc0 <HAL_GetTick>
 800165e:	4602      	mov	r2, r0
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	1ad3      	subs	r3, r2, r3
 8001664:	2b02      	cmp	r3, #2
 8001666:	d90d      	bls.n	8001684 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800166c:	f043 0210 	orr.w	r2, r3, #16
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001678:	f043 0201 	orr.w	r2, r3, #1
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 8001680:	2301      	movs	r3, #1
 8001682:	e007      	b.n	8001694 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	689b      	ldr	r3, [r3, #8]
 800168a:	f003 0301 	and.w	r3, r3, #1
 800168e:	2b01      	cmp	r3, #1
 8001690:	d0e3      	beq.n	800165a <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001692:	2300      	movs	r3, #0
}
 8001694:	4618      	mov	r0, r3
 8001696:	3710      	adds	r7, #16
 8001698:	46bd      	mov	sp, r7
 800169a:	bd80      	pop	{r7, pc}

0800169c <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b084      	sub	sp, #16
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016a8:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016ae:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d127      	bne.n	8001706 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016ba:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	689b      	ldr	r3, [r3, #8]
 80016c8:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80016cc:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80016d0:	d115      	bne.n	80016fe <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d111      	bne.n	80016fe <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016de:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016ea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d105      	bne.n	80016fe <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016f6:	f043 0201 	orr.w	r2, r3, #1
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80016fe:	68f8      	ldr	r0, [r7, #12]
 8001700:	f7ff f844 	bl	800078c <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8001704:	e004      	b.n	8001710 <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	6a1b      	ldr	r3, [r3, #32]
 800170a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800170c:	6878      	ldr	r0, [r7, #4]
 800170e:	4798      	blx	r3
}
 8001710:	bf00      	nop
 8001712:	3710      	adds	r7, #16
 8001714:	46bd      	mov	sp, r7
 8001716:	bd80      	pop	{r7, pc}

08001718 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b084      	sub	sp, #16
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001724:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001726:	68f8      	ldr	r0, [r7, #12]
 8001728:	f7ff f8be 	bl	80008a8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800172c:	bf00      	nop
 800172e:	3710      	adds	r7, #16
 8001730:	46bd      	mov	sp, r7
 8001732:	bd80      	pop	{r7, pc}

08001734 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b084      	sub	sp, #16
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001740:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001746:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001752:	f043 0204 	orr.w	r2, r3, #4
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800175a:	68f8      	ldr	r0, [r7, #12]
 800175c:	f7ff fe11 	bl	8001382 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001760:	bf00      	nop
 8001762:	3710      	adds	r7, #16
 8001764:	46bd      	mov	sp, r7
 8001766:	bd80      	pop	{r7, pc}

08001768 <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8001768:	b590      	push	{r4, r7, lr}
 800176a:	b087      	sub	sp, #28
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001770:	2300      	movs	r3, #0
 8001772:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 8001774:	2300      	movs	r3, #0
 8001776:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800177e:	2b01      	cmp	r3, #1
 8001780:	d101      	bne.n	8001786 <HAL_ADCEx_Calibration_Start+0x1e>
 8001782:	2302      	movs	r3, #2
 8001784:	e086      	b.n	8001894 <HAL_ADCEx_Calibration_Start+0x12c>
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	2201      	movs	r2, #1
 800178a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  /* 1. Calibration prerequisite:                                             */
  /*    - ADC must be disabled for at least two ADC clock cycles in disable   */
  /*      mode before ADC enable                                              */
  /* Stop potential conversion on going, on regular and injected groups       */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800178e:	6878      	ldr	r0, [r7, #4]
 8001790:	f7ff ff4a 	bl	8001628 <ADC_ConversionStop_Disable>
 8001794:	4603      	mov	r3, r0
 8001796:	75fb      	strb	r3, [r7, #23]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8001798:	7dfb      	ldrb	r3, [r7, #23]
 800179a:	2b00      	cmp	r3, #0
 800179c:	d175      	bne.n	800188a <HAL_ADCEx_Calibration_Start+0x122>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017a2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80017a6:	f023 0302 	bic.w	r3, r3, #2
 80017aa:	f043 0202 	orr.w	r2, r3, #2
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 80017b2:	4b3a      	ldr	r3, [pc, #232]	; (800189c <HAL_ADCEx_Calibration_Start+0x134>)
 80017b4:	681c      	ldr	r4, [r3, #0]
 80017b6:	2002      	movs	r0, #2
 80017b8:	f002 f8d2 	bl	8003960 <HAL_RCCEx_GetPeriphCLKFreq>
 80017bc:	4603      	mov	r3, r0
 80017be:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 80017c2:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 80017c4:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 80017c6:	e002      	b.n	80017ce <HAL_ADCEx_Calibration_Start+0x66>
    {
      wait_loop_index--;
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	3b01      	subs	r3, #1
 80017cc:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d1f9      	bne.n	80017c8 <HAL_ADCEx_Calibration_Start+0x60>
    }
    
    /* 2. Enable the ADC peripheral */
    ADC_Enable(hadc);
 80017d4:	6878      	ldr	r0, [r7, #4]
 80017d6:	f7ff fed5 	bl	8001584 <ADC_Enable>
    
    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	689a      	ldr	r2, [r3, #8]
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f042 0208 	orr.w	r2, r2, #8
 80017e8:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 80017ea:	f7ff fae9 	bl	8000dc0 <HAL_GetTick>
 80017ee:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 80017f0:	e014      	b.n	800181c <HAL_ADCEx_Calibration_Start+0xb4>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 80017f2:	f7ff fae5 	bl	8000dc0 <HAL_GetTick>
 80017f6:	4602      	mov	r2, r0
 80017f8:	693b      	ldr	r3, [r7, #16]
 80017fa:	1ad3      	subs	r3, r2, r3
 80017fc:	2b0a      	cmp	r3, #10
 80017fe:	d90d      	bls.n	800181c <HAL_ADCEx_Calibration_Start+0xb4>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001804:	f023 0312 	bic.w	r3, r3, #18
 8001808:	f043 0210 	orr.w	r2, r3, #16
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	629a      	str	r2, [r3, #40]	; 0x28
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	2200      	movs	r2, #0
 8001814:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        
        return HAL_ERROR;
 8001818:	2301      	movs	r3, #1
 800181a:	e03b      	b.n	8001894 <HAL_ADCEx_Calibration_Start+0x12c>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	689b      	ldr	r3, [r3, #8]
 8001822:	f003 0308 	and.w	r3, r3, #8
 8001826:	2b00      	cmp	r3, #0
 8001828:	d1e3      	bne.n	80017f2 <HAL_ADCEx_Calibration_Start+0x8a>
      }
    }
    
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	689a      	ldr	r2, [r3, #8]
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	f042 0204 	orr.w	r2, r2, #4
 8001838:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 800183a:	f7ff fac1 	bl	8000dc0 <HAL_GetTick>
 800183e:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8001840:	e014      	b.n	800186c <HAL_ADCEx_Calibration_Start+0x104>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8001842:	f7ff fabd 	bl	8000dc0 <HAL_GetTick>
 8001846:	4602      	mov	r2, r0
 8001848:	693b      	ldr	r3, [r7, #16]
 800184a:	1ad3      	subs	r3, r2, r3
 800184c:	2b0a      	cmp	r3, #10
 800184e:	d90d      	bls.n	800186c <HAL_ADCEx_Calibration_Start+0x104>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001854:	f023 0312 	bic.w	r3, r3, #18
 8001858:	f043 0210 	orr.w	r2, r3, #16
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	629a      	str	r2, [r3, #40]	; 0x28
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	2200      	movs	r2, #0
 8001864:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        
        return HAL_ERROR;
 8001868:	2301      	movs	r3, #1
 800186a:	e013      	b.n	8001894 <HAL_ADCEx_Calibration_Start+0x12c>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	689b      	ldr	r3, [r3, #8]
 8001872:	f003 0304 	and.w	r3, r3, #4
 8001876:	2b00      	cmp	r3, #0
 8001878:	d1e3      	bne.n	8001842 <HAL_ADCEx_Calibration_Start+0xda>
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800187e:	f023 0303 	bic.w	r3, r3, #3
 8001882:	f043 0201 	orr.w	r2, r3, #1
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	2200      	movs	r2, #0
 800188e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001892:	7dfb      	ldrb	r3, [r7, #23]
}
 8001894:	4618      	mov	r0, r3
 8001896:	371c      	adds	r7, #28
 8001898:	46bd      	mov	sp, r7
 800189a:	bd90      	pop	{r4, r7, pc}
 800189c:	20000004 	.word	0x20000004

080018a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018a0:	b480      	push	{r7}
 80018a2:	b085      	sub	sp, #20
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	f003 0307 	and.w	r3, r3, #7
 80018ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018b0:	4b0c      	ldr	r3, [pc, #48]	; (80018e4 <__NVIC_SetPriorityGrouping+0x44>)
 80018b2:	68db      	ldr	r3, [r3, #12]
 80018b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018b6:	68ba      	ldr	r2, [r7, #8]
 80018b8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80018bc:	4013      	ands	r3, r2
 80018be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018c4:	68bb      	ldr	r3, [r7, #8]
 80018c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80018c8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80018cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80018d2:	4a04      	ldr	r2, [pc, #16]	; (80018e4 <__NVIC_SetPriorityGrouping+0x44>)
 80018d4:	68bb      	ldr	r3, [r7, #8]
 80018d6:	60d3      	str	r3, [r2, #12]
}
 80018d8:	bf00      	nop
 80018da:	3714      	adds	r7, #20
 80018dc:	46bd      	mov	sp, r7
 80018de:	bc80      	pop	{r7}
 80018e0:	4770      	bx	lr
 80018e2:	bf00      	nop
 80018e4:	e000ed00 	.word	0xe000ed00

080018e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80018e8:	b480      	push	{r7}
 80018ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018ec:	4b04      	ldr	r3, [pc, #16]	; (8001900 <__NVIC_GetPriorityGrouping+0x18>)
 80018ee:	68db      	ldr	r3, [r3, #12]
 80018f0:	0a1b      	lsrs	r3, r3, #8
 80018f2:	f003 0307 	and.w	r3, r3, #7
}
 80018f6:	4618      	mov	r0, r3
 80018f8:	46bd      	mov	sp, r7
 80018fa:	bc80      	pop	{r7}
 80018fc:	4770      	bx	lr
 80018fe:	bf00      	nop
 8001900:	e000ed00 	.word	0xe000ed00

08001904 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001904:	b480      	push	{r7}
 8001906:	b083      	sub	sp, #12
 8001908:	af00      	add	r7, sp, #0
 800190a:	4603      	mov	r3, r0
 800190c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800190e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001912:	2b00      	cmp	r3, #0
 8001914:	db0b      	blt.n	800192e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001916:	79fb      	ldrb	r3, [r7, #7]
 8001918:	f003 021f 	and.w	r2, r3, #31
 800191c:	4906      	ldr	r1, [pc, #24]	; (8001938 <__NVIC_EnableIRQ+0x34>)
 800191e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001922:	095b      	lsrs	r3, r3, #5
 8001924:	2001      	movs	r0, #1
 8001926:	fa00 f202 	lsl.w	r2, r0, r2
 800192a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800192e:	bf00      	nop
 8001930:	370c      	adds	r7, #12
 8001932:	46bd      	mov	sp, r7
 8001934:	bc80      	pop	{r7}
 8001936:	4770      	bx	lr
 8001938:	e000e100 	.word	0xe000e100

0800193c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800193c:	b480      	push	{r7}
 800193e:	b083      	sub	sp, #12
 8001940:	af00      	add	r7, sp, #0
 8001942:	4603      	mov	r3, r0
 8001944:	6039      	str	r1, [r7, #0]
 8001946:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001948:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800194c:	2b00      	cmp	r3, #0
 800194e:	db0a      	blt.n	8001966 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001950:	683b      	ldr	r3, [r7, #0]
 8001952:	b2da      	uxtb	r2, r3
 8001954:	490c      	ldr	r1, [pc, #48]	; (8001988 <__NVIC_SetPriority+0x4c>)
 8001956:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800195a:	0112      	lsls	r2, r2, #4
 800195c:	b2d2      	uxtb	r2, r2
 800195e:	440b      	add	r3, r1
 8001960:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001964:	e00a      	b.n	800197c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001966:	683b      	ldr	r3, [r7, #0]
 8001968:	b2da      	uxtb	r2, r3
 800196a:	4908      	ldr	r1, [pc, #32]	; (800198c <__NVIC_SetPriority+0x50>)
 800196c:	79fb      	ldrb	r3, [r7, #7]
 800196e:	f003 030f 	and.w	r3, r3, #15
 8001972:	3b04      	subs	r3, #4
 8001974:	0112      	lsls	r2, r2, #4
 8001976:	b2d2      	uxtb	r2, r2
 8001978:	440b      	add	r3, r1
 800197a:	761a      	strb	r2, [r3, #24]
}
 800197c:	bf00      	nop
 800197e:	370c      	adds	r7, #12
 8001980:	46bd      	mov	sp, r7
 8001982:	bc80      	pop	{r7}
 8001984:	4770      	bx	lr
 8001986:	bf00      	nop
 8001988:	e000e100 	.word	0xe000e100
 800198c:	e000ed00 	.word	0xe000ed00

08001990 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001990:	b480      	push	{r7}
 8001992:	b089      	sub	sp, #36	; 0x24
 8001994:	af00      	add	r7, sp, #0
 8001996:	60f8      	str	r0, [r7, #12]
 8001998:	60b9      	str	r1, [r7, #8]
 800199a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	f003 0307 	and.w	r3, r3, #7
 80019a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019a4:	69fb      	ldr	r3, [r7, #28]
 80019a6:	f1c3 0307 	rsb	r3, r3, #7
 80019aa:	2b04      	cmp	r3, #4
 80019ac:	bf28      	it	cs
 80019ae:	2304      	movcs	r3, #4
 80019b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019b2:	69fb      	ldr	r3, [r7, #28]
 80019b4:	3304      	adds	r3, #4
 80019b6:	2b06      	cmp	r3, #6
 80019b8:	d902      	bls.n	80019c0 <NVIC_EncodePriority+0x30>
 80019ba:	69fb      	ldr	r3, [r7, #28]
 80019bc:	3b03      	subs	r3, #3
 80019be:	e000      	b.n	80019c2 <NVIC_EncodePriority+0x32>
 80019c0:	2300      	movs	r3, #0
 80019c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019c4:	f04f 32ff 	mov.w	r2, #4294967295
 80019c8:	69bb      	ldr	r3, [r7, #24]
 80019ca:	fa02 f303 	lsl.w	r3, r2, r3
 80019ce:	43da      	mvns	r2, r3
 80019d0:	68bb      	ldr	r3, [r7, #8]
 80019d2:	401a      	ands	r2, r3
 80019d4:	697b      	ldr	r3, [r7, #20]
 80019d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019d8:	f04f 31ff 	mov.w	r1, #4294967295
 80019dc:	697b      	ldr	r3, [r7, #20]
 80019de:	fa01 f303 	lsl.w	r3, r1, r3
 80019e2:	43d9      	mvns	r1, r3
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019e8:	4313      	orrs	r3, r2
         );
}
 80019ea:	4618      	mov	r0, r3
 80019ec:	3724      	adds	r7, #36	; 0x24
 80019ee:	46bd      	mov	sp, r7
 80019f0:	bc80      	pop	{r7}
 80019f2:	4770      	bx	lr

080019f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b082      	sub	sp, #8
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	3b01      	subs	r3, #1
 8001a00:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a04:	d301      	bcc.n	8001a0a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a06:	2301      	movs	r3, #1
 8001a08:	e00f      	b.n	8001a2a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a0a:	4a0a      	ldr	r2, [pc, #40]	; (8001a34 <SysTick_Config+0x40>)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	3b01      	subs	r3, #1
 8001a10:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a12:	210f      	movs	r1, #15
 8001a14:	f04f 30ff 	mov.w	r0, #4294967295
 8001a18:	f7ff ff90 	bl	800193c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a1c:	4b05      	ldr	r3, [pc, #20]	; (8001a34 <SysTick_Config+0x40>)
 8001a1e:	2200      	movs	r2, #0
 8001a20:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a22:	4b04      	ldr	r3, [pc, #16]	; (8001a34 <SysTick_Config+0x40>)
 8001a24:	2207      	movs	r2, #7
 8001a26:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a28:	2300      	movs	r3, #0
}
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	3708      	adds	r7, #8
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bd80      	pop	{r7, pc}
 8001a32:	bf00      	nop
 8001a34:	e000e010 	.word	0xe000e010

08001a38 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b082      	sub	sp, #8
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a40:	6878      	ldr	r0, [r7, #4]
 8001a42:	f7ff ff2d 	bl	80018a0 <__NVIC_SetPriorityGrouping>
}
 8001a46:	bf00      	nop
 8001a48:	3708      	adds	r7, #8
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bd80      	pop	{r7, pc}

08001a4e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a4e:	b580      	push	{r7, lr}
 8001a50:	b086      	sub	sp, #24
 8001a52:	af00      	add	r7, sp, #0
 8001a54:	4603      	mov	r3, r0
 8001a56:	60b9      	str	r1, [r7, #8]
 8001a58:	607a      	str	r2, [r7, #4]
 8001a5a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a60:	f7ff ff42 	bl	80018e8 <__NVIC_GetPriorityGrouping>
 8001a64:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a66:	687a      	ldr	r2, [r7, #4]
 8001a68:	68b9      	ldr	r1, [r7, #8]
 8001a6a:	6978      	ldr	r0, [r7, #20]
 8001a6c:	f7ff ff90 	bl	8001990 <NVIC_EncodePriority>
 8001a70:	4602      	mov	r2, r0
 8001a72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a76:	4611      	mov	r1, r2
 8001a78:	4618      	mov	r0, r3
 8001a7a:	f7ff ff5f 	bl	800193c <__NVIC_SetPriority>
}
 8001a7e:	bf00      	nop
 8001a80:	3718      	adds	r7, #24
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bd80      	pop	{r7, pc}

08001a86 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a86:	b580      	push	{r7, lr}
 8001a88:	b082      	sub	sp, #8
 8001a8a:	af00      	add	r7, sp, #0
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a94:	4618      	mov	r0, r3
 8001a96:	f7ff ff35 	bl	8001904 <__NVIC_EnableIRQ>
}
 8001a9a:	bf00      	nop
 8001a9c:	3708      	adds	r7, #8
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bd80      	pop	{r7, pc}

08001aa2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001aa2:	b580      	push	{r7, lr}
 8001aa4:	b082      	sub	sp, #8
 8001aa6:	af00      	add	r7, sp, #0
 8001aa8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001aaa:	6878      	ldr	r0, [r7, #4]
 8001aac:	f7ff ffa2 	bl	80019f4 <SysTick_Config>
 8001ab0:	4603      	mov	r3, r0
}
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	3708      	adds	r7, #8
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bd80      	pop	{r7, pc}
	...

08001abc <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001abc:	b480      	push	{r7}
 8001abe:	b085      	sub	sp, #20
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d101      	bne.n	8001ad2 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001ace:	2301      	movs	r3, #1
 8001ad0:	e043      	b.n	8001b5a <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	461a      	mov	r2, r3
 8001ad8:	4b22      	ldr	r3, [pc, #136]	; (8001b64 <HAL_DMA_Init+0xa8>)
 8001ada:	4413      	add	r3, r2
 8001adc:	4a22      	ldr	r2, [pc, #136]	; (8001b68 <HAL_DMA_Init+0xac>)
 8001ade:	fba2 2303 	umull	r2, r3, r2, r3
 8001ae2:	091b      	lsrs	r3, r3, #4
 8001ae4:	009a      	lsls	r2, r3, #2
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	4a1f      	ldr	r2, [pc, #124]	; (8001b6c <HAL_DMA_Init+0xb0>)
 8001aee:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	2202      	movs	r2, #2
 8001af4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001b06:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001b0a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001b14:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	68db      	ldr	r3, [r3, #12]
 8001b1a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b20:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	695b      	ldr	r3, [r3, #20]
 8001b26:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b2c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	69db      	ldr	r3, [r3, #28]
 8001b32:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001b34:	68fa      	ldr	r2, [r7, #12]
 8001b36:	4313      	orrs	r3, r2
 8001b38:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	68fa      	ldr	r2, [r7, #12]
 8001b40:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	2200      	movs	r2, #0
 8001b46:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	2201      	movs	r2, #1
 8001b4c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	2200      	movs	r2, #0
 8001b54:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001b58:	2300      	movs	r3, #0
}
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	3714      	adds	r7, #20
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bc80      	pop	{r7}
 8001b62:	4770      	bx	lr
 8001b64:	bffdfff8 	.word	0xbffdfff8
 8001b68:	cccccccd 	.word	0xcccccccd
 8001b6c:	40020000 	.word	0x40020000

08001b70 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b086      	sub	sp, #24
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	60f8      	str	r0, [r7, #12]
 8001b78:	60b9      	str	r1, [r7, #8]
 8001b7a:	607a      	str	r2, [r7, #4]
 8001b7c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001b88:	2b01      	cmp	r3, #1
 8001b8a:	d101      	bne.n	8001b90 <HAL_DMA_Start_IT+0x20>
 8001b8c:	2302      	movs	r3, #2
 8001b8e:	e04a      	b.n	8001c26 <HAL_DMA_Start_IT+0xb6>
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	2201      	movs	r2, #1
 8001b94:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001b9e:	2b01      	cmp	r3, #1
 8001ba0:	d13a      	bne.n	8001c18 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	2202      	movs	r2, #2
 8001ba6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	2200      	movs	r2, #0
 8001bae:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	681a      	ldr	r2, [r3, #0]
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f022 0201 	bic.w	r2, r2, #1
 8001bbe:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	687a      	ldr	r2, [r7, #4]
 8001bc4:	68b9      	ldr	r1, [r7, #8]
 8001bc6:	68f8      	ldr	r0, [r7, #12]
 8001bc8:	f000 f972 	bl	8001eb0 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d008      	beq.n	8001be6 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	681a      	ldr	r2, [r3, #0]
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f042 020e 	orr.w	r2, r2, #14
 8001be2:	601a      	str	r2, [r3, #0]
 8001be4:	e00f      	b.n	8001c06 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	681a      	ldr	r2, [r3, #0]
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f022 0204 	bic.w	r2, r2, #4
 8001bf4:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	681a      	ldr	r2, [r3, #0]
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f042 020a 	orr.w	r2, r2, #10
 8001c04:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	681a      	ldr	r2, [r3, #0]
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f042 0201 	orr.w	r2, r2, #1
 8001c14:	601a      	str	r2, [r3, #0]
 8001c16:	e005      	b.n	8001c24 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001c20:	2302      	movs	r3, #2
 8001c22:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8001c24:	7dfb      	ldrb	r3, [r7, #23]
}
 8001c26:	4618      	mov	r0, r3
 8001c28:	3718      	adds	r7, #24
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	bd80      	pop	{r7, pc}

08001c2e <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001c2e:	b480      	push	{r7}
 8001c30:	b085      	sub	sp, #20
 8001c32:	af00      	add	r7, sp, #0
 8001c34:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001c36:	2300      	movs	r3, #0
 8001c38:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001c40:	2b02      	cmp	r3, #2
 8001c42:	d008      	beq.n	8001c56 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	2204      	movs	r2, #4
 8001c48:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001c52:	2301      	movs	r3, #1
 8001c54:	e020      	b.n	8001c98 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	681a      	ldr	r2, [r3, #0]
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f022 020e 	bic.w	r2, r2, #14
 8001c64:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	681a      	ldr	r2, [r3, #0]
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f022 0201 	bic.w	r2, r2, #1
 8001c74:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c7e:	2101      	movs	r1, #1
 8001c80:	fa01 f202 	lsl.w	r2, r1, r2
 8001c84:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	2201      	movs	r2, #1
 8001c8a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	2200      	movs	r2, #0
 8001c92:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001c96:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c98:	4618      	mov	r0, r3
 8001c9a:	3714      	adds	r7, #20
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	bc80      	pop	{r7}
 8001ca0:	4770      	bx	lr
	...

08001ca4 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b084      	sub	sp, #16
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cc0:	2204      	movs	r2, #4
 8001cc2:	409a      	lsls	r2, r3
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	4013      	ands	r3, r2
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d04f      	beq.n	8001d6c <HAL_DMA_IRQHandler+0xc8>
 8001ccc:	68bb      	ldr	r3, [r7, #8]
 8001cce:	f003 0304 	and.w	r3, r3, #4
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d04a      	beq.n	8001d6c <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f003 0320 	and.w	r3, r3, #32
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d107      	bne.n	8001cf4 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	681a      	ldr	r2, [r3, #0]
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f022 0204 	bic.w	r2, r2, #4
 8001cf2:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	4a66      	ldr	r2, [pc, #408]	; (8001e94 <HAL_DMA_IRQHandler+0x1f0>)
 8001cfa:	4293      	cmp	r3, r2
 8001cfc:	d029      	beq.n	8001d52 <HAL_DMA_IRQHandler+0xae>
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	4a65      	ldr	r2, [pc, #404]	; (8001e98 <HAL_DMA_IRQHandler+0x1f4>)
 8001d04:	4293      	cmp	r3, r2
 8001d06:	d022      	beq.n	8001d4e <HAL_DMA_IRQHandler+0xaa>
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	4a63      	ldr	r2, [pc, #396]	; (8001e9c <HAL_DMA_IRQHandler+0x1f8>)
 8001d0e:	4293      	cmp	r3, r2
 8001d10:	d01a      	beq.n	8001d48 <HAL_DMA_IRQHandler+0xa4>
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	4a62      	ldr	r2, [pc, #392]	; (8001ea0 <HAL_DMA_IRQHandler+0x1fc>)
 8001d18:	4293      	cmp	r3, r2
 8001d1a:	d012      	beq.n	8001d42 <HAL_DMA_IRQHandler+0x9e>
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	4a60      	ldr	r2, [pc, #384]	; (8001ea4 <HAL_DMA_IRQHandler+0x200>)
 8001d22:	4293      	cmp	r3, r2
 8001d24:	d00a      	beq.n	8001d3c <HAL_DMA_IRQHandler+0x98>
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	4a5f      	ldr	r2, [pc, #380]	; (8001ea8 <HAL_DMA_IRQHandler+0x204>)
 8001d2c:	4293      	cmp	r3, r2
 8001d2e:	d102      	bne.n	8001d36 <HAL_DMA_IRQHandler+0x92>
 8001d30:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001d34:	e00e      	b.n	8001d54 <HAL_DMA_IRQHandler+0xb0>
 8001d36:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001d3a:	e00b      	b.n	8001d54 <HAL_DMA_IRQHandler+0xb0>
 8001d3c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001d40:	e008      	b.n	8001d54 <HAL_DMA_IRQHandler+0xb0>
 8001d42:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001d46:	e005      	b.n	8001d54 <HAL_DMA_IRQHandler+0xb0>
 8001d48:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001d4c:	e002      	b.n	8001d54 <HAL_DMA_IRQHandler+0xb0>
 8001d4e:	2340      	movs	r3, #64	; 0x40
 8001d50:	e000      	b.n	8001d54 <HAL_DMA_IRQHandler+0xb0>
 8001d52:	2304      	movs	r3, #4
 8001d54:	4a55      	ldr	r2, [pc, #340]	; (8001eac <HAL_DMA_IRQHandler+0x208>)
 8001d56:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	f000 8094 	beq.w	8001e8a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d66:	6878      	ldr	r0, [r7, #4]
 8001d68:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8001d6a:	e08e      	b.n	8001e8a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d70:	2202      	movs	r2, #2
 8001d72:	409a      	lsls	r2, r3
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	4013      	ands	r3, r2
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d056      	beq.n	8001e2a <HAL_DMA_IRQHandler+0x186>
 8001d7c:	68bb      	ldr	r3, [r7, #8]
 8001d7e:	f003 0302 	and.w	r3, r3, #2
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d051      	beq.n	8001e2a <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f003 0320 	and.w	r3, r3, #32
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d10b      	bne.n	8001dac <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	681a      	ldr	r2, [r3, #0]
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f022 020a 	bic.w	r2, r2, #10
 8001da2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	2201      	movs	r2, #1
 8001da8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	4a38      	ldr	r2, [pc, #224]	; (8001e94 <HAL_DMA_IRQHandler+0x1f0>)
 8001db2:	4293      	cmp	r3, r2
 8001db4:	d029      	beq.n	8001e0a <HAL_DMA_IRQHandler+0x166>
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	4a37      	ldr	r2, [pc, #220]	; (8001e98 <HAL_DMA_IRQHandler+0x1f4>)
 8001dbc:	4293      	cmp	r3, r2
 8001dbe:	d022      	beq.n	8001e06 <HAL_DMA_IRQHandler+0x162>
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	4a35      	ldr	r2, [pc, #212]	; (8001e9c <HAL_DMA_IRQHandler+0x1f8>)
 8001dc6:	4293      	cmp	r3, r2
 8001dc8:	d01a      	beq.n	8001e00 <HAL_DMA_IRQHandler+0x15c>
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	4a34      	ldr	r2, [pc, #208]	; (8001ea0 <HAL_DMA_IRQHandler+0x1fc>)
 8001dd0:	4293      	cmp	r3, r2
 8001dd2:	d012      	beq.n	8001dfa <HAL_DMA_IRQHandler+0x156>
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	4a32      	ldr	r2, [pc, #200]	; (8001ea4 <HAL_DMA_IRQHandler+0x200>)
 8001dda:	4293      	cmp	r3, r2
 8001ddc:	d00a      	beq.n	8001df4 <HAL_DMA_IRQHandler+0x150>
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	4a31      	ldr	r2, [pc, #196]	; (8001ea8 <HAL_DMA_IRQHandler+0x204>)
 8001de4:	4293      	cmp	r3, r2
 8001de6:	d102      	bne.n	8001dee <HAL_DMA_IRQHandler+0x14a>
 8001de8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001dec:	e00e      	b.n	8001e0c <HAL_DMA_IRQHandler+0x168>
 8001dee:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001df2:	e00b      	b.n	8001e0c <HAL_DMA_IRQHandler+0x168>
 8001df4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001df8:	e008      	b.n	8001e0c <HAL_DMA_IRQHandler+0x168>
 8001dfa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001dfe:	e005      	b.n	8001e0c <HAL_DMA_IRQHandler+0x168>
 8001e00:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001e04:	e002      	b.n	8001e0c <HAL_DMA_IRQHandler+0x168>
 8001e06:	2320      	movs	r3, #32
 8001e08:	e000      	b.n	8001e0c <HAL_DMA_IRQHandler+0x168>
 8001e0a:	2302      	movs	r3, #2
 8001e0c:	4a27      	ldr	r2, [pc, #156]	; (8001eac <HAL_DMA_IRQHandler+0x208>)
 8001e0e:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	2200      	movs	r2, #0
 8001e14:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d034      	beq.n	8001e8a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e24:	6878      	ldr	r0, [r7, #4]
 8001e26:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001e28:	e02f      	b.n	8001e8a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e2e:	2208      	movs	r2, #8
 8001e30:	409a      	lsls	r2, r3
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	4013      	ands	r3, r2
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d028      	beq.n	8001e8c <HAL_DMA_IRQHandler+0x1e8>
 8001e3a:	68bb      	ldr	r3, [r7, #8]
 8001e3c:	f003 0308 	and.w	r3, r3, #8
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d023      	beq.n	8001e8c <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	681a      	ldr	r2, [r3, #0]
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f022 020e 	bic.w	r2, r2, #14
 8001e52:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e5c:	2101      	movs	r1, #1
 8001e5e:	fa01 f202 	lsl.w	r2, r1, r2
 8001e62:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	2201      	movs	r2, #1
 8001e68:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	2201      	movs	r2, #1
 8001e6e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	2200      	movs	r2, #0
 8001e76:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d004      	beq.n	8001e8c <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e86:	6878      	ldr	r0, [r7, #4]
 8001e88:	4798      	blx	r3
    }
  }
  return;
 8001e8a:	bf00      	nop
 8001e8c:	bf00      	nop
}
 8001e8e:	3710      	adds	r7, #16
 8001e90:	46bd      	mov	sp, r7
 8001e92:	bd80      	pop	{r7, pc}
 8001e94:	40020008 	.word	0x40020008
 8001e98:	4002001c 	.word	0x4002001c
 8001e9c:	40020030 	.word	0x40020030
 8001ea0:	40020044 	.word	0x40020044
 8001ea4:	40020058 	.word	0x40020058
 8001ea8:	4002006c 	.word	0x4002006c
 8001eac:	40020000 	.word	0x40020000

08001eb0 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	b085      	sub	sp, #20
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	60f8      	str	r0, [r7, #12]
 8001eb8:	60b9      	str	r1, [r7, #8]
 8001eba:	607a      	str	r2, [r7, #4]
 8001ebc:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ec6:	2101      	movs	r1, #1
 8001ec8:	fa01 f202 	lsl.w	r2, r1, r2
 8001ecc:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	683a      	ldr	r2, [r7, #0]
 8001ed4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	685b      	ldr	r3, [r3, #4]
 8001eda:	2b10      	cmp	r3, #16
 8001edc:	d108      	bne.n	8001ef0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	687a      	ldr	r2, [r7, #4]
 8001ee4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	68ba      	ldr	r2, [r7, #8]
 8001eec:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001eee:	e007      	b.n	8001f00 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	68ba      	ldr	r2, [r7, #8]
 8001ef6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	687a      	ldr	r2, [r7, #4]
 8001efe:	60da      	str	r2, [r3, #12]
}
 8001f00:	bf00      	nop
 8001f02:	3714      	adds	r7, #20
 8001f04:	46bd      	mov	sp, r7
 8001f06:	bc80      	pop	{r7}
 8001f08:	4770      	bx	lr
	...

08001f0c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	b08b      	sub	sp, #44	; 0x2c
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
 8001f14:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001f16:	2300      	movs	r3, #0
 8001f18:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f1e:	e127      	b.n	8002170 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001f20:	2201      	movs	r2, #1
 8001f22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f24:	fa02 f303 	lsl.w	r3, r2, r3
 8001f28:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001f2a:	683b      	ldr	r3, [r7, #0]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	69fa      	ldr	r2, [r7, #28]
 8001f30:	4013      	ands	r3, r2
 8001f32:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001f34:	69ba      	ldr	r2, [r7, #24]
 8001f36:	69fb      	ldr	r3, [r7, #28]
 8001f38:	429a      	cmp	r2, r3
 8001f3a:	f040 8116 	bne.w	800216a <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	685b      	ldr	r3, [r3, #4]
 8001f42:	2b12      	cmp	r3, #18
 8001f44:	d034      	beq.n	8001fb0 <HAL_GPIO_Init+0xa4>
 8001f46:	2b12      	cmp	r3, #18
 8001f48:	d80d      	bhi.n	8001f66 <HAL_GPIO_Init+0x5a>
 8001f4a:	2b02      	cmp	r3, #2
 8001f4c:	d02b      	beq.n	8001fa6 <HAL_GPIO_Init+0x9a>
 8001f4e:	2b02      	cmp	r3, #2
 8001f50:	d804      	bhi.n	8001f5c <HAL_GPIO_Init+0x50>
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d031      	beq.n	8001fba <HAL_GPIO_Init+0xae>
 8001f56:	2b01      	cmp	r3, #1
 8001f58:	d01c      	beq.n	8001f94 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001f5a:	e048      	b.n	8001fee <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001f5c:	2b03      	cmp	r3, #3
 8001f5e:	d043      	beq.n	8001fe8 <HAL_GPIO_Init+0xdc>
 8001f60:	2b11      	cmp	r3, #17
 8001f62:	d01b      	beq.n	8001f9c <HAL_GPIO_Init+0x90>
          break;
 8001f64:	e043      	b.n	8001fee <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001f66:	4a89      	ldr	r2, [pc, #548]	; (800218c <HAL_GPIO_Init+0x280>)
 8001f68:	4293      	cmp	r3, r2
 8001f6a:	d026      	beq.n	8001fba <HAL_GPIO_Init+0xae>
 8001f6c:	4a87      	ldr	r2, [pc, #540]	; (800218c <HAL_GPIO_Init+0x280>)
 8001f6e:	4293      	cmp	r3, r2
 8001f70:	d806      	bhi.n	8001f80 <HAL_GPIO_Init+0x74>
 8001f72:	4a87      	ldr	r2, [pc, #540]	; (8002190 <HAL_GPIO_Init+0x284>)
 8001f74:	4293      	cmp	r3, r2
 8001f76:	d020      	beq.n	8001fba <HAL_GPIO_Init+0xae>
 8001f78:	4a86      	ldr	r2, [pc, #536]	; (8002194 <HAL_GPIO_Init+0x288>)
 8001f7a:	4293      	cmp	r3, r2
 8001f7c:	d01d      	beq.n	8001fba <HAL_GPIO_Init+0xae>
          break;
 8001f7e:	e036      	b.n	8001fee <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001f80:	4a85      	ldr	r2, [pc, #532]	; (8002198 <HAL_GPIO_Init+0x28c>)
 8001f82:	4293      	cmp	r3, r2
 8001f84:	d019      	beq.n	8001fba <HAL_GPIO_Init+0xae>
 8001f86:	4a85      	ldr	r2, [pc, #532]	; (800219c <HAL_GPIO_Init+0x290>)
 8001f88:	4293      	cmp	r3, r2
 8001f8a:	d016      	beq.n	8001fba <HAL_GPIO_Init+0xae>
 8001f8c:	4a84      	ldr	r2, [pc, #528]	; (80021a0 <HAL_GPIO_Init+0x294>)
 8001f8e:	4293      	cmp	r3, r2
 8001f90:	d013      	beq.n	8001fba <HAL_GPIO_Init+0xae>
          break;
 8001f92:	e02c      	b.n	8001fee <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	68db      	ldr	r3, [r3, #12]
 8001f98:	623b      	str	r3, [r7, #32]
          break;
 8001f9a:	e028      	b.n	8001fee <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	68db      	ldr	r3, [r3, #12]
 8001fa0:	3304      	adds	r3, #4
 8001fa2:	623b      	str	r3, [r7, #32]
          break;
 8001fa4:	e023      	b.n	8001fee <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001fa6:	683b      	ldr	r3, [r7, #0]
 8001fa8:	68db      	ldr	r3, [r3, #12]
 8001faa:	3308      	adds	r3, #8
 8001fac:	623b      	str	r3, [r7, #32]
          break;
 8001fae:	e01e      	b.n	8001fee <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	68db      	ldr	r3, [r3, #12]
 8001fb4:	330c      	adds	r3, #12
 8001fb6:	623b      	str	r3, [r7, #32]
          break;
 8001fb8:	e019      	b.n	8001fee <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001fba:	683b      	ldr	r3, [r7, #0]
 8001fbc:	689b      	ldr	r3, [r3, #8]
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d102      	bne.n	8001fc8 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001fc2:	2304      	movs	r3, #4
 8001fc4:	623b      	str	r3, [r7, #32]
          break;
 8001fc6:	e012      	b.n	8001fee <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	689b      	ldr	r3, [r3, #8]
 8001fcc:	2b01      	cmp	r3, #1
 8001fce:	d105      	bne.n	8001fdc <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001fd0:	2308      	movs	r3, #8
 8001fd2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	69fa      	ldr	r2, [r7, #28]
 8001fd8:	611a      	str	r2, [r3, #16]
          break;
 8001fda:	e008      	b.n	8001fee <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001fdc:	2308      	movs	r3, #8
 8001fde:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	69fa      	ldr	r2, [r7, #28]
 8001fe4:	615a      	str	r2, [r3, #20]
          break;
 8001fe6:	e002      	b.n	8001fee <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001fe8:	2300      	movs	r3, #0
 8001fea:	623b      	str	r3, [r7, #32]
          break;
 8001fec:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001fee:	69bb      	ldr	r3, [r7, #24]
 8001ff0:	2bff      	cmp	r3, #255	; 0xff
 8001ff2:	d801      	bhi.n	8001ff8 <HAL_GPIO_Init+0xec>
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	e001      	b.n	8001ffc <HAL_GPIO_Init+0xf0>
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	3304      	adds	r3, #4
 8001ffc:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001ffe:	69bb      	ldr	r3, [r7, #24]
 8002000:	2bff      	cmp	r3, #255	; 0xff
 8002002:	d802      	bhi.n	800200a <HAL_GPIO_Init+0xfe>
 8002004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002006:	009b      	lsls	r3, r3, #2
 8002008:	e002      	b.n	8002010 <HAL_GPIO_Init+0x104>
 800200a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800200c:	3b08      	subs	r3, #8
 800200e:	009b      	lsls	r3, r3, #2
 8002010:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002012:	697b      	ldr	r3, [r7, #20]
 8002014:	681a      	ldr	r2, [r3, #0]
 8002016:	210f      	movs	r1, #15
 8002018:	693b      	ldr	r3, [r7, #16]
 800201a:	fa01 f303 	lsl.w	r3, r1, r3
 800201e:	43db      	mvns	r3, r3
 8002020:	401a      	ands	r2, r3
 8002022:	6a39      	ldr	r1, [r7, #32]
 8002024:	693b      	ldr	r3, [r7, #16]
 8002026:	fa01 f303 	lsl.w	r3, r1, r3
 800202a:	431a      	orrs	r2, r3
 800202c:	697b      	ldr	r3, [r7, #20]
 800202e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	685b      	ldr	r3, [r3, #4]
 8002034:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002038:	2b00      	cmp	r3, #0
 800203a:	f000 8096 	beq.w	800216a <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800203e:	4b59      	ldr	r3, [pc, #356]	; (80021a4 <HAL_GPIO_Init+0x298>)
 8002040:	699b      	ldr	r3, [r3, #24]
 8002042:	4a58      	ldr	r2, [pc, #352]	; (80021a4 <HAL_GPIO_Init+0x298>)
 8002044:	f043 0301 	orr.w	r3, r3, #1
 8002048:	6193      	str	r3, [r2, #24]
 800204a:	4b56      	ldr	r3, [pc, #344]	; (80021a4 <HAL_GPIO_Init+0x298>)
 800204c:	699b      	ldr	r3, [r3, #24]
 800204e:	f003 0301 	and.w	r3, r3, #1
 8002052:	60bb      	str	r3, [r7, #8]
 8002054:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002056:	4a54      	ldr	r2, [pc, #336]	; (80021a8 <HAL_GPIO_Init+0x29c>)
 8002058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800205a:	089b      	lsrs	r3, r3, #2
 800205c:	3302      	adds	r3, #2
 800205e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002062:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002066:	f003 0303 	and.w	r3, r3, #3
 800206a:	009b      	lsls	r3, r3, #2
 800206c:	220f      	movs	r2, #15
 800206e:	fa02 f303 	lsl.w	r3, r2, r3
 8002072:	43db      	mvns	r3, r3
 8002074:	68fa      	ldr	r2, [r7, #12]
 8002076:	4013      	ands	r3, r2
 8002078:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	4a4b      	ldr	r2, [pc, #300]	; (80021ac <HAL_GPIO_Init+0x2a0>)
 800207e:	4293      	cmp	r3, r2
 8002080:	d013      	beq.n	80020aa <HAL_GPIO_Init+0x19e>
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	4a4a      	ldr	r2, [pc, #296]	; (80021b0 <HAL_GPIO_Init+0x2a4>)
 8002086:	4293      	cmp	r3, r2
 8002088:	d00d      	beq.n	80020a6 <HAL_GPIO_Init+0x19a>
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	4a49      	ldr	r2, [pc, #292]	; (80021b4 <HAL_GPIO_Init+0x2a8>)
 800208e:	4293      	cmp	r3, r2
 8002090:	d007      	beq.n	80020a2 <HAL_GPIO_Init+0x196>
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	4a48      	ldr	r2, [pc, #288]	; (80021b8 <HAL_GPIO_Init+0x2ac>)
 8002096:	4293      	cmp	r3, r2
 8002098:	d101      	bne.n	800209e <HAL_GPIO_Init+0x192>
 800209a:	2303      	movs	r3, #3
 800209c:	e006      	b.n	80020ac <HAL_GPIO_Init+0x1a0>
 800209e:	2304      	movs	r3, #4
 80020a0:	e004      	b.n	80020ac <HAL_GPIO_Init+0x1a0>
 80020a2:	2302      	movs	r3, #2
 80020a4:	e002      	b.n	80020ac <HAL_GPIO_Init+0x1a0>
 80020a6:	2301      	movs	r3, #1
 80020a8:	e000      	b.n	80020ac <HAL_GPIO_Init+0x1a0>
 80020aa:	2300      	movs	r3, #0
 80020ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020ae:	f002 0203 	and.w	r2, r2, #3
 80020b2:	0092      	lsls	r2, r2, #2
 80020b4:	4093      	lsls	r3, r2
 80020b6:	68fa      	ldr	r2, [r7, #12]
 80020b8:	4313      	orrs	r3, r2
 80020ba:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80020bc:	493a      	ldr	r1, [pc, #232]	; (80021a8 <HAL_GPIO_Init+0x29c>)
 80020be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020c0:	089b      	lsrs	r3, r3, #2
 80020c2:	3302      	adds	r3, #2
 80020c4:	68fa      	ldr	r2, [r7, #12]
 80020c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	685b      	ldr	r3, [r3, #4]
 80020ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d006      	beq.n	80020e4 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80020d6:	4b39      	ldr	r3, [pc, #228]	; (80021bc <HAL_GPIO_Init+0x2b0>)
 80020d8:	681a      	ldr	r2, [r3, #0]
 80020da:	4938      	ldr	r1, [pc, #224]	; (80021bc <HAL_GPIO_Init+0x2b0>)
 80020dc:	69bb      	ldr	r3, [r7, #24]
 80020de:	4313      	orrs	r3, r2
 80020e0:	600b      	str	r3, [r1, #0]
 80020e2:	e006      	b.n	80020f2 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80020e4:	4b35      	ldr	r3, [pc, #212]	; (80021bc <HAL_GPIO_Init+0x2b0>)
 80020e6:	681a      	ldr	r2, [r3, #0]
 80020e8:	69bb      	ldr	r3, [r7, #24]
 80020ea:	43db      	mvns	r3, r3
 80020ec:	4933      	ldr	r1, [pc, #204]	; (80021bc <HAL_GPIO_Init+0x2b0>)
 80020ee:	4013      	ands	r3, r2
 80020f0:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80020f2:	683b      	ldr	r3, [r7, #0]
 80020f4:	685b      	ldr	r3, [r3, #4]
 80020f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d006      	beq.n	800210c <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80020fe:	4b2f      	ldr	r3, [pc, #188]	; (80021bc <HAL_GPIO_Init+0x2b0>)
 8002100:	685a      	ldr	r2, [r3, #4]
 8002102:	492e      	ldr	r1, [pc, #184]	; (80021bc <HAL_GPIO_Init+0x2b0>)
 8002104:	69bb      	ldr	r3, [r7, #24]
 8002106:	4313      	orrs	r3, r2
 8002108:	604b      	str	r3, [r1, #4]
 800210a:	e006      	b.n	800211a <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800210c:	4b2b      	ldr	r3, [pc, #172]	; (80021bc <HAL_GPIO_Init+0x2b0>)
 800210e:	685a      	ldr	r2, [r3, #4]
 8002110:	69bb      	ldr	r3, [r7, #24]
 8002112:	43db      	mvns	r3, r3
 8002114:	4929      	ldr	r1, [pc, #164]	; (80021bc <HAL_GPIO_Init+0x2b0>)
 8002116:	4013      	ands	r3, r2
 8002118:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	685b      	ldr	r3, [r3, #4]
 800211e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002122:	2b00      	cmp	r3, #0
 8002124:	d006      	beq.n	8002134 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002126:	4b25      	ldr	r3, [pc, #148]	; (80021bc <HAL_GPIO_Init+0x2b0>)
 8002128:	689a      	ldr	r2, [r3, #8]
 800212a:	4924      	ldr	r1, [pc, #144]	; (80021bc <HAL_GPIO_Init+0x2b0>)
 800212c:	69bb      	ldr	r3, [r7, #24]
 800212e:	4313      	orrs	r3, r2
 8002130:	608b      	str	r3, [r1, #8]
 8002132:	e006      	b.n	8002142 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002134:	4b21      	ldr	r3, [pc, #132]	; (80021bc <HAL_GPIO_Init+0x2b0>)
 8002136:	689a      	ldr	r2, [r3, #8]
 8002138:	69bb      	ldr	r3, [r7, #24]
 800213a:	43db      	mvns	r3, r3
 800213c:	491f      	ldr	r1, [pc, #124]	; (80021bc <HAL_GPIO_Init+0x2b0>)
 800213e:	4013      	ands	r3, r2
 8002140:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	685b      	ldr	r3, [r3, #4]
 8002146:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800214a:	2b00      	cmp	r3, #0
 800214c:	d006      	beq.n	800215c <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800214e:	4b1b      	ldr	r3, [pc, #108]	; (80021bc <HAL_GPIO_Init+0x2b0>)
 8002150:	68da      	ldr	r2, [r3, #12]
 8002152:	491a      	ldr	r1, [pc, #104]	; (80021bc <HAL_GPIO_Init+0x2b0>)
 8002154:	69bb      	ldr	r3, [r7, #24]
 8002156:	4313      	orrs	r3, r2
 8002158:	60cb      	str	r3, [r1, #12]
 800215a:	e006      	b.n	800216a <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800215c:	4b17      	ldr	r3, [pc, #92]	; (80021bc <HAL_GPIO_Init+0x2b0>)
 800215e:	68da      	ldr	r2, [r3, #12]
 8002160:	69bb      	ldr	r3, [r7, #24]
 8002162:	43db      	mvns	r3, r3
 8002164:	4915      	ldr	r1, [pc, #84]	; (80021bc <HAL_GPIO_Init+0x2b0>)
 8002166:	4013      	ands	r3, r2
 8002168:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800216a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800216c:	3301      	adds	r3, #1
 800216e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	681a      	ldr	r2, [r3, #0]
 8002174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002176:	fa22 f303 	lsr.w	r3, r2, r3
 800217a:	2b00      	cmp	r3, #0
 800217c:	f47f aed0 	bne.w	8001f20 <HAL_GPIO_Init+0x14>
  }
}
 8002180:	bf00      	nop
 8002182:	372c      	adds	r7, #44	; 0x2c
 8002184:	46bd      	mov	sp, r7
 8002186:	bc80      	pop	{r7}
 8002188:	4770      	bx	lr
 800218a:	bf00      	nop
 800218c:	10210000 	.word	0x10210000
 8002190:	10110000 	.word	0x10110000
 8002194:	10120000 	.word	0x10120000
 8002198:	10310000 	.word	0x10310000
 800219c:	10320000 	.word	0x10320000
 80021a0:	10220000 	.word	0x10220000
 80021a4:	40021000 	.word	0x40021000
 80021a8:	40010000 	.word	0x40010000
 80021ac:	40010800 	.word	0x40010800
 80021b0:	40010c00 	.word	0x40010c00
 80021b4:	40011000 	.word	0x40011000
 80021b8:	40011400 	.word	0x40011400
 80021bc:	40010400 	.word	0x40010400

080021c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80021c0:	b480      	push	{r7}
 80021c2:	b083      	sub	sp, #12
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
 80021c8:	460b      	mov	r3, r1
 80021ca:	807b      	strh	r3, [r7, #2]
 80021cc:	4613      	mov	r3, r2
 80021ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80021d0:	787b      	ldrb	r3, [r7, #1]
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d003      	beq.n	80021de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80021d6:	887a      	ldrh	r2, [r7, #2]
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80021dc:	e003      	b.n	80021e6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80021de:	887b      	ldrh	r3, [r7, #2]
 80021e0:	041a      	lsls	r2, r3, #16
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	611a      	str	r2, [r3, #16]
}
 80021e6:	bf00      	nop
 80021e8:	370c      	adds	r7, #12
 80021ea:	46bd      	mov	sp, r7
 80021ec:	bc80      	pop	{r7}
 80021ee:	4770      	bx	lr

080021f0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b082      	sub	sp, #8
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	4603      	mov	r3, r0
 80021f8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80021fa:	4b08      	ldr	r3, [pc, #32]	; (800221c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80021fc:	695a      	ldr	r2, [r3, #20]
 80021fe:	88fb      	ldrh	r3, [r7, #6]
 8002200:	4013      	ands	r3, r2
 8002202:	2b00      	cmp	r3, #0
 8002204:	d006      	beq.n	8002214 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002206:	4a05      	ldr	r2, [pc, #20]	; (800221c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002208:	88fb      	ldrh	r3, [r7, #6]
 800220a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800220c:	88fb      	ldrh	r3, [r7, #6]
 800220e:	4618      	mov	r0, r3
 8002210:	f7fe faa0 	bl	8000754 <HAL_GPIO_EXTI_Callback>
  }
}
 8002214:	bf00      	nop
 8002216:	3708      	adds	r7, #8
 8002218:	46bd      	mov	sp, r7
 800221a:	bd80      	pop	{r7, pc}
 800221c:	40010400 	.word	0x40010400

08002220 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002220:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002222:	b08b      	sub	sp, #44	; 0x2c
 8002224:	af06      	add	r7, sp, #24
 8002226:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	2b00      	cmp	r3, #0
 800222c:	d101      	bne.n	8002232 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800222e:	2301      	movs	r3, #1
 8002230:	e0d3      	b.n	80023da <HAL_PCD_Init+0x1ba>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	f893 3229 	ldrb.w	r3, [r3, #553]	; 0x229
 8002238:	b2db      	uxtb	r3, r3
 800223a:	2b00      	cmp	r3, #0
 800223c:	d106      	bne.n	800224c <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	2200      	movs	r2, #0
 8002242:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002246:	6878      	ldr	r0, [r7, #4]
 8002248:	f004 fd10 	bl	8006c6c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	2203      	movs	r2, #3
 8002250:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	4618      	mov	r0, r3
 800225a:	f001 fe81 	bl	8003f60 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	603b      	str	r3, [r7, #0]
 8002264:	687e      	ldr	r6, [r7, #4]
 8002266:	466d      	mov	r5, sp
 8002268:	f106 0410 	add.w	r4, r6, #16
 800226c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800226e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002270:	6823      	ldr	r3, [r4, #0]
 8002272:	602b      	str	r3, [r5, #0]
 8002274:	1d33      	adds	r3, r6, #4
 8002276:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002278:	6838      	ldr	r0, [r7, #0]
 800227a:	f001 fe4a 	bl	8003f12 <USB_CoreInit>
 800227e:	4603      	mov	r3, r0
 8002280:	2b00      	cmp	r3, #0
 8002282:	d005      	beq.n	8002290 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	2202      	movs	r2, #2
 8002288:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    return HAL_ERROR;
 800228c:	2301      	movs	r3, #1
 800228e:	e0a4      	b.n	80023da <HAL_PCD_Init+0x1ba>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	2100      	movs	r1, #0
 8002296:	4618      	mov	r0, r3
 8002298:	f001 fe7e 	bl	8003f98 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800229c:	2300      	movs	r3, #0
 800229e:	73fb      	strb	r3, [r7, #15]
 80022a0:	e035      	b.n	800230e <HAL_PCD_Init+0xee>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80022a2:	7bfb      	ldrb	r3, [r7, #15]
 80022a4:	687a      	ldr	r2, [r7, #4]
 80022a6:	015b      	lsls	r3, r3, #5
 80022a8:	4413      	add	r3, r2
 80022aa:	3329      	adds	r3, #41	; 0x29
 80022ac:	2201      	movs	r2, #1
 80022ae:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80022b0:	7bfb      	ldrb	r3, [r7, #15]
 80022b2:	687a      	ldr	r2, [r7, #4]
 80022b4:	015b      	lsls	r3, r3, #5
 80022b6:	4413      	add	r3, r2
 80022b8:	3328      	adds	r3, #40	; 0x28
 80022ba:	7bfa      	ldrb	r2, [r7, #15]
 80022bc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80022be:	7bfb      	ldrb	r3, [r7, #15]
 80022c0:	7bfa      	ldrb	r2, [r7, #15]
 80022c2:	b291      	uxth	r1, r2
 80022c4:	687a      	ldr	r2, [r7, #4]
 80022c6:	015b      	lsls	r3, r3, #5
 80022c8:	4413      	add	r3, r2
 80022ca:	3336      	adds	r3, #54	; 0x36
 80022cc:	460a      	mov	r2, r1
 80022ce:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80022d0:	7bfb      	ldrb	r3, [r7, #15]
 80022d2:	687a      	ldr	r2, [r7, #4]
 80022d4:	015b      	lsls	r3, r3, #5
 80022d6:	4413      	add	r3, r2
 80022d8:	332b      	adds	r3, #43	; 0x2b
 80022da:	2200      	movs	r2, #0
 80022dc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80022de:	7bfb      	ldrb	r3, [r7, #15]
 80022e0:	687a      	ldr	r2, [r7, #4]
 80022e2:	015b      	lsls	r3, r3, #5
 80022e4:	4413      	add	r3, r2
 80022e6:	3338      	adds	r3, #56	; 0x38
 80022e8:	2200      	movs	r2, #0
 80022ea:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80022ec:	7bfb      	ldrb	r3, [r7, #15]
 80022ee:	687a      	ldr	r2, [r7, #4]
 80022f0:	015b      	lsls	r3, r3, #5
 80022f2:	4413      	add	r3, r2
 80022f4:	333c      	adds	r3, #60	; 0x3c
 80022f6:	2200      	movs	r2, #0
 80022f8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80022fa:	7bfb      	ldrb	r3, [r7, #15]
 80022fc:	687a      	ldr	r2, [r7, #4]
 80022fe:	3302      	adds	r3, #2
 8002300:	015b      	lsls	r3, r3, #5
 8002302:	4413      	add	r3, r2
 8002304:	2200      	movs	r2, #0
 8002306:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002308:	7bfb      	ldrb	r3, [r7, #15]
 800230a:	3301      	adds	r3, #1
 800230c:	73fb      	strb	r3, [r7, #15]
 800230e:	7bfa      	ldrb	r2, [r7, #15]
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	685b      	ldr	r3, [r3, #4]
 8002314:	429a      	cmp	r2, r3
 8002316:	d3c4      	bcc.n	80022a2 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002318:	2300      	movs	r3, #0
 800231a:	73fb      	strb	r3, [r7, #15]
 800231c:	e031      	b.n	8002382 <HAL_PCD_Init+0x162>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800231e:	7bfb      	ldrb	r3, [r7, #15]
 8002320:	687a      	ldr	r2, [r7, #4]
 8002322:	015b      	lsls	r3, r3, #5
 8002324:	4413      	add	r3, r2
 8002326:	f203 1329 	addw	r3, r3, #297	; 0x129
 800232a:	2200      	movs	r2, #0
 800232c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800232e:	7bfb      	ldrb	r3, [r7, #15]
 8002330:	687a      	ldr	r2, [r7, #4]
 8002332:	015b      	lsls	r3, r3, #5
 8002334:	4413      	add	r3, r2
 8002336:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800233a:	7bfa      	ldrb	r2, [r7, #15]
 800233c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800233e:	7bfb      	ldrb	r3, [r7, #15]
 8002340:	687a      	ldr	r2, [r7, #4]
 8002342:	015b      	lsls	r3, r3, #5
 8002344:	4413      	add	r3, r2
 8002346:	f203 132b 	addw	r3, r3, #299	; 0x12b
 800234a:	2200      	movs	r2, #0
 800234c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800234e:	7bfb      	ldrb	r3, [r7, #15]
 8002350:	687a      	ldr	r2, [r7, #4]
 8002352:	015b      	lsls	r3, r3, #5
 8002354:	4413      	add	r3, r2
 8002356:	f503 739c 	add.w	r3, r3, #312	; 0x138
 800235a:	2200      	movs	r2, #0
 800235c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800235e:	7bfb      	ldrb	r3, [r7, #15]
 8002360:	687a      	ldr	r2, [r7, #4]
 8002362:	015b      	lsls	r3, r3, #5
 8002364:	4413      	add	r3, r2
 8002366:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800236a:	2200      	movs	r2, #0
 800236c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800236e:	7bfb      	ldrb	r3, [r7, #15]
 8002370:	687a      	ldr	r2, [r7, #4]
 8002372:	330a      	adds	r3, #10
 8002374:	015b      	lsls	r3, r3, #5
 8002376:	4413      	add	r3, r2
 8002378:	2200      	movs	r2, #0
 800237a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800237c:	7bfb      	ldrb	r3, [r7, #15]
 800237e:	3301      	adds	r3, #1
 8002380:	73fb      	strb	r3, [r7, #15]
 8002382:	7bfa      	ldrb	r2, [r7, #15]
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	685b      	ldr	r3, [r3, #4]
 8002388:	429a      	cmp	r2, r3
 800238a:	d3c8      	bcc.n	800231e <HAL_PCD_Init+0xfe>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	603b      	str	r3, [r7, #0]
 8002392:	687e      	ldr	r6, [r7, #4]
 8002394:	466d      	mov	r5, sp
 8002396:	f106 0410 	add.w	r4, r6, #16
 800239a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800239c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800239e:	6823      	ldr	r3, [r4, #0]
 80023a0:	602b      	str	r3, [r5, #0]
 80023a2:	1d33      	adds	r3, r6, #4
 80023a4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80023a6:	6838      	ldr	r0, [r7, #0]
 80023a8:	f001 fe02 	bl	8003fb0 <USB_DevInit>
 80023ac:	4603      	mov	r3, r0
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d005      	beq.n	80023be <HAL_PCD_Init+0x19e>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	2202      	movs	r2, #2
 80023b6:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    return HAL_ERROR;
 80023ba:	2301      	movs	r3, #1
 80023bc:	e00d      	b.n	80023da <HAL_PCD_Init+0x1ba>
  }

  hpcd->USB_Address = 0U;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	2200      	movs	r2, #0
 80023c2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	2201      	movs	r2, #1
 80023ca:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
  (void)USB_DevDisconnect(hpcd->Instance);
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	4618      	mov	r0, r3
 80023d4:	f002 fe3f 	bl	8005056 <USB_DevDisconnect>

  return HAL_OK;
 80023d8:	2300      	movs	r3, #0
}
 80023da:	4618      	mov	r0, r3
 80023dc:	3714      	adds	r7, #20
 80023de:	46bd      	mov	sp, r7
 80023e0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080023e2 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80023e2:	b580      	push	{r7, lr}
 80023e4:	b082      	sub	sp, #8
 80023e6:	af00      	add	r7, sp, #0
 80023e8:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 80023f0:	2b01      	cmp	r3, #1
 80023f2:	d101      	bne.n	80023f8 <HAL_PCD_Start+0x16>
 80023f4:	2302      	movs	r3, #2
 80023f6:	e016      	b.n	8002426 <HAL_PCD_Start+0x44>
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	2201      	movs	r2, #1
 80023fc:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8002400:	2101      	movs	r1, #1
 8002402:	6878      	ldr	r0, [r7, #4]
 8002404:	f004 fea1 	bl	800714a <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */
  (void)USB_DevConnect(hpcd->Instance);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	4618      	mov	r0, r3
 800240e:	f002 fe18 	bl	8005042 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	4618      	mov	r0, r3
 8002418:	f001 fd8b 	bl	8003f32 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	2200      	movs	r2, #0
 8002420:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 8002424:	2300      	movs	r3, #0
}
 8002426:	4618      	mov	r0, r3
 8002428:	3708      	adds	r7, #8
 800242a:	46bd      	mov	sp, r7
 800242c:	bd80      	pop	{r7, pc}

0800242e <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800242e:	b580      	push	{r7, lr}
 8002430:	b082      	sub	sp, #8
 8002432:	af00      	add	r7, sp, #0
 8002434:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	4618      	mov	r0, r3
 800243c:	f002 fe15 	bl	800506a <USB_ReadInterrupts>
 8002440:	4603      	mov	r3, r0
 8002442:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002446:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800244a:	d102      	bne.n	8002452 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 800244c:	6878      	ldr	r0, [r7, #4]
 800244e:	f000 faf3 	bl	8002a38 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	4618      	mov	r0, r3
 8002458:	f002 fe07 	bl	800506a <USB_ReadInterrupts>
 800245c:	4603      	mov	r3, r0
 800245e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002462:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002466:	d112      	bne.n	800248e <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002470:	b29a      	uxth	r2, r3
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800247a:	b292      	uxth	r2, r2
 800247c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8002480:	6878      	ldr	r0, [r7, #4]
 8002482:	f004 fc70 	bl	8006d66 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8002486:	2100      	movs	r1, #0
 8002488:	6878      	ldr	r0, [r7, #4]
 800248a:	f000 f8de 	bl	800264a <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	4618      	mov	r0, r3
 8002494:	f002 fde9 	bl	800506a <USB_ReadInterrupts>
 8002498:	4603      	mov	r3, r0
 800249a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800249e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80024a2:	d10b      	bne.n	80024bc <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80024ac:	b29a      	uxth	r2, r3
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80024b6:	b292      	uxth	r2, r2
 80024b8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	4618      	mov	r0, r3
 80024c2:	f002 fdd2 	bl	800506a <USB_ReadInterrupts>
 80024c6:	4603      	mov	r3, r0
 80024c8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80024cc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80024d0:	d10b      	bne.n	80024ea <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80024da:	b29a      	uxth	r2, r3
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80024e4:	b292      	uxth	r2, r2
 80024e6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	4618      	mov	r0, r3
 80024f0:	f002 fdbb 	bl	800506a <USB_ReadInterrupts>
 80024f4:	4603      	mov	r3, r0
 80024f6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80024fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80024fe:	d126      	bne.n	800254e <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002508:	b29a      	uxth	r2, r3
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f022 0204 	bic.w	r2, r2, #4
 8002512:	b292      	uxth	r2, r2
 8002514:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002520:	b29a      	uxth	r2, r3
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f022 0208 	bic.w	r2, r2, #8
 800252a:	b292      	uxth	r2, r2
 800252c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8002530:	6878      	ldr	r0, [r7, #4]
 8002532:	f004 fc51 	bl	8006dd8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800253e:	b29a      	uxth	r2, r3
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002548:	b292      	uxth	r2, r2
 800254a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	4618      	mov	r0, r3
 8002554:	f002 fd89 	bl	800506a <USB_ReadInterrupts>
 8002558:	4603      	mov	r3, r0
 800255a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800255e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002562:	d13d      	bne.n	80025e0 <HAL_PCD_IRQHandler+0x1b2>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800256c:	b29a      	uxth	r2, r3
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f042 0208 	orr.w	r2, r2, #8
 8002576:	b292      	uxth	r2, r2
 8002578:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002584:	b29a      	uxth	r2, r3
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800258e:	b292      	uxth	r2, r2
 8002590:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= USB_CNTR_LP_MODE;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800259c:	b29a      	uxth	r2, r3
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f042 0204 	orr.w	r2, r2, #4
 80025a6:	b292      	uxth	r2, r2
 80025a8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* WA: Clear Wakeup flag if raised with suspend signal */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	4618      	mov	r0, r3
 80025b2:	f002 fd5a 	bl	800506a <USB_ReadInterrupts>
 80025b6:	4603      	mov	r3, r0
 80025b8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80025bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80025c0:	d10b      	bne.n	80025da <HAL_PCD_IRQHandler+0x1ac>
    {
       __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80025ca:	b29a      	uxth	r2, r3
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80025d4:	b292      	uxth	r2, r2
 80025d6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80025da:	6878      	ldr	r0, [r7, #4]
 80025dc:	f004 fbe2 	bl	8006da4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	4618      	mov	r0, r3
 80025e6:	f002 fd40 	bl	800506a <USB_ReadInterrupts>
 80025ea:	4603      	mov	r3, r0
 80025ec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80025f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80025f4:	d10e      	bne.n	8002614 <HAL_PCD_IRQHandler+0x1e6>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80025fe:	b29a      	uxth	r2, r3
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002608:	b292      	uxth	r2, r2
 800260a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 800260e:	6878      	ldr	r0, [r7, #4]
 8002610:	f004 fb9b 	bl	8006d4a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	4618      	mov	r0, r3
 800261a:	f002 fd26 	bl	800506a <USB_ReadInterrupts>
 800261e:	4603      	mov	r3, r0
 8002620:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002624:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002628:	d10b      	bne.n	8002642 <HAL_PCD_IRQHandler+0x214>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002632:	b29a      	uxth	r2, r3
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800263c:	b292      	uxth	r2, r2
 800263e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8002642:	bf00      	nop
 8002644:	3708      	adds	r7, #8
 8002646:	46bd      	mov	sp, r7
 8002648:	bd80      	pop	{r7, pc}

0800264a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800264a:	b580      	push	{r7, lr}
 800264c:	b082      	sub	sp, #8
 800264e:	af00      	add	r7, sp, #0
 8002650:	6078      	str	r0, [r7, #4]
 8002652:	460b      	mov	r3, r1
 8002654:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 800265c:	2b01      	cmp	r3, #1
 800265e:	d101      	bne.n	8002664 <HAL_PCD_SetAddress+0x1a>
 8002660:	2302      	movs	r3, #2
 8002662:	e013      	b.n	800268c <HAL_PCD_SetAddress+0x42>
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	2201      	movs	r2, #1
 8002668:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  hpcd->USB_Address = address;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	78fa      	ldrb	r2, [r7, #3]
 8002670:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	78fa      	ldrb	r2, [r7, #3]
 800267a:	4611      	mov	r1, r2
 800267c:	4618      	mov	r0, r3
 800267e:	f002 fccd 	bl	800501c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	2200      	movs	r2, #0
 8002686:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 800268a:	2300      	movs	r3, #0
}
 800268c:	4618      	mov	r0, r3
 800268e:	3708      	adds	r7, #8
 8002690:	46bd      	mov	sp, r7
 8002692:	bd80      	pop	{r7, pc}

08002694 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	b084      	sub	sp, #16
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
 800269c:	4608      	mov	r0, r1
 800269e:	4611      	mov	r1, r2
 80026a0:	461a      	mov	r2, r3
 80026a2:	4603      	mov	r3, r0
 80026a4:	70fb      	strb	r3, [r7, #3]
 80026a6:	460b      	mov	r3, r1
 80026a8:	803b      	strh	r3, [r7, #0]
 80026aa:	4613      	mov	r3, r2
 80026ac:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80026ae:	2300      	movs	r3, #0
 80026b0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80026b2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	da0b      	bge.n	80026d2 <HAL_PCD_EP_Open+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80026ba:	78fb      	ldrb	r3, [r7, #3]
 80026bc:	f003 0307 	and.w	r3, r3, #7
 80026c0:	015b      	lsls	r3, r3, #5
 80026c2:	3328      	adds	r3, #40	; 0x28
 80026c4:	687a      	ldr	r2, [r7, #4]
 80026c6:	4413      	add	r3, r2
 80026c8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	2201      	movs	r2, #1
 80026ce:	705a      	strb	r2, [r3, #1]
 80026d0:	e00b      	b.n	80026ea <HAL_PCD_EP_Open+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80026d2:	78fb      	ldrb	r3, [r7, #3]
 80026d4:	f003 0307 	and.w	r3, r3, #7
 80026d8:	015b      	lsls	r3, r3, #5
 80026da:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80026de:	687a      	ldr	r2, [r7, #4]
 80026e0:	4413      	add	r3, r2
 80026e2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	2200      	movs	r2, #0
 80026e8:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80026ea:	78fb      	ldrb	r3, [r7, #3]
 80026ec:	f003 0307 	and.w	r3, r3, #7
 80026f0:	b2da      	uxtb	r2, r3
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80026f6:	883a      	ldrh	r2, [r7, #0]
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	78ba      	ldrb	r2, [r7, #2]
 8002700:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	785b      	ldrb	r3, [r3, #1]
 8002706:	2b00      	cmp	r3, #0
 8002708:	d004      	beq.n	8002714 <HAL_PCD_EP_Open+0x80>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	781b      	ldrb	r3, [r3, #0]
 800270e:	b29a      	uxth	r2, r3
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002714:	78bb      	ldrb	r3, [r7, #2]
 8002716:	2b02      	cmp	r3, #2
 8002718:	d102      	bne.n	8002720 <HAL_PCD_EP_Open+0x8c>
  {
    ep->data_pid_start = 0U;
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	2200      	movs	r2, #0
 800271e:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8002726:	2b01      	cmp	r3, #1
 8002728:	d101      	bne.n	800272e <HAL_PCD_EP_Open+0x9a>
 800272a:	2302      	movs	r3, #2
 800272c:	e00e      	b.n	800274c <HAL_PCD_EP_Open+0xb8>
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	2201      	movs	r2, #1
 8002732:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	68f9      	ldr	r1, [r7, #12]
 800273c:	4618      	mov	r0, r3
 800273e:	f001 fc5b 	bl	8003ff8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	2200      	movs	r2, #0
 8002746:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return ret;
 800274a:	7afb      	ldrb	r3, [r7, #11]
}
 800274c:	4618      	mov	r0, r3
 800274e:	3710      	adds	r7, #16
 8002750:	46bd      	mov	sp, r7
 8002752:	bd80      	pop	{r7, pc}

08002754 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	b084      	sub	sp, #16
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
 800275c:	460b      	mov	r3, r1
 800275e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002760:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002764:	2b00      	cmp	r3, #0
 8002766:	da0b      	bge.n	8002780 <HAL_PCD_EP_Close+0x2c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002768:	78fb      	ldrb	r3, [r7, #3]
 800276a:	f003 0307 	and.w	r3, r3, #7
 800276e:	015b      	lsls	r3, r3, #5
 8002770:	3328      	adds	r3, #40	; 0x28
 8002772:	687a      	ldr	r2, [r7, #4]
 8002774:	4413      	add	r3, r2
 8002776:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	2201      	movs	r2, #1
 800277c:	705a      	strb	r2, [r3, #1]
 800277e:	e00b      	b.n	8002798 <HAL_PCD_EP_Close+0x44>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002780:	78fb      	ldrb	r3, [r7, #3]
 8002782:	f003 0307 	and.w	r3, r3, #7
 8002786:	015b      	lsls	r3, r3, #5
 8002788:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800278c:	687a      	ldr	r2, [r7, #4]
 800278e:	4413      	add	r3, r2
 8002790:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	2200      	movs	r2, #0
 8002796:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002798:	78fb      	ldrb	r3, [r7, #3]
 800279a:	f003 0307 	and.w	r3, r3, #7
 800279e:	b2da      	uxtb	r2, r3
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 80027aa:	2b01      	cmp	r3, #1
 80027ac:	d101      	bne.n	80027b2 <HAL_PCD_EP_Close+0x5e>
 80027ae:	2302      	movs	r3, #2
 80027b0:	e00e      	b.n	80027d0 <HAL_PCD_EP_Close+0x7c>
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	2201      	movs	r2, #1
 80027b6:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	68f9      	ldr	r1, [r7, #12]
 80027c0:	4618      	mov	r0, r3
 80027c2:	f001 ff07 	bl	80045d4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	2200      	movs	r2, #0
 80027ca:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 80027ce:	2300      	movs	r3, #0
}
 80027d0:	4618      	mov	r0, r3
 80027d2:	3710      	adds	r7, #16
 80027d4:	46bd      	mov	sp, r7
 80027d6:	bd80      	pop	{r7, pc}

080027d8 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	b086      	sub	sp, #24
 80027dc:	af00      	add	r7, sp, #0
 80027de:	60f8      	str	r0, [r7, #12]
 80027e0:	607a      	str	r2, [r7, #4]
 80027e2:	603b      	str	r3, [r7, #0]
 80027e4:	460b      	mov	r3, r1
 80027e6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80027e8:	7afb      	ldrb	r3, [r7, #11]
 80027ea:	f003 0307 	and.w	r3, r3, #7
 80027ee:	015b      	lsls	r3, r3, #5
 80027f0:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80027f4:	68fa      	ldr	r2, [r7, #12]
 80027f6:	4413      	add	r3, r2
 80027f8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80027fa:	697b      	ldr	r3, [r7, #20]
 80027fc:	687a      	ldr	r2, [r7, #4]
 80027fe:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002800:	697b      	ldr	r3, [r7, #20]
 8002802:	683a      	ldr	r2, [r7, #0]
 8002804:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002806:	697b      	ldr	r3, [r7, #20]
 8002808:	2200      	movs	r2, #0
 800280a:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 800280c:	697b      	ldr	r3, [r7, #20]
 800280e:	2200      	movs	r2, #0
 8002810:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002812:	7afb      	ldrb	r3, [r7, #11]
 8002814:	f003 0307 	and.w	r3, r3, #7
 8002818:	b2da      	uxtb	r2, r3
 800281a:	697b      	ldr	r3, [r7, #20]
 800281c:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800281e:	7afb      	ldrb	r3, [r7, #11]
 8002820:	f003 0307 	and.w	r3, r3, #7
 8002824:	2b00      	cmp	r3, #0
 8002826:	d106      	bne.n	8002836 <HAL_PCD_EP_Receive+0x5e>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	6979      	ldr	r1, [r7, #20]
 800282e:	4618      	mov	r0, r3
 8002830:	f002 f866 	bl	8004900 <USB_EPStartXfer>
 8002834:	e005      	b.n	8002842 <HAL_PCD_EP_Receive+0x6a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	6979      	ldr	r1, [r7, #20]
 800283c:	4618      	mov	r0, r3
 800283e:	f002 f85f 	bl	8004900 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002842:	2300      	movs	r3, #0
}
 8002844:	4618      	mov	r0, r3
 8002846:	3718      	adds	r7, #24
 8002848:	46bd      	mov	sp, r7
 800284a:	bd80      	pop	{r7, pc}

0800284c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800284c:	b480      	push	{r7}
 800284e:	b083      	sub	sp, #12
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
 8002854:	460b      	mov	r3, r1
 8002856:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002858:	78fb      	ldrb	r3, [r7, #3]
 800285a:	f003 0307 	and.w	r3, r3, #7
 800285e:	687a      	ldr	r2, [r7, #4]
 8002860:	330a      	adds	r3, #10
 8002862:	015b      	lsls	r3, r3, #5
 8002864:	4413      	add	r3, r2
 8002866:	3304      	adds	r3, #4
 8002868:	681b      	ldr	r3, [r3, #0]
}
 800286a:	4618      	mov	r0, r3
 800286c:	370c      	adds	r7, #12
 800286e:	46bd      	mov	sp, r7
 8002870:	bc80      	pop	{r7}
 8002872:	4770      	bx	lr

08002874 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	b086      	sub	sp, #24
 8002878:	af00      	add	r7, sp, #0
 800287a:	60f8      	str	r0, [r7, #12]
 800287c:	607a      	str	r2, [r7, #4]
 800287e:	603b      	str	r3, [r7, #0]
 8002880:	460b      	mov	r3, r1
 8002882:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002884:	7afb      	ldrb	r3, [r7, #11]
 8002886:	f003 0307 	and.w	r3, r3, #7
 800288a:	015b      	lsls	r3, r3, #5
 800288c:	3328      	adds	r3, #40	; 0x28
 800288e:	68fa      	ldr	r2, [r7, #12]
 8002890:	4413      	add	r3, r2
 8002892:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002894:	697b      	ldr	r3, [r7, #20]
 8002896:	687a      	ldr	r2, [r7, #4]
 8002898:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800289a:	697b      	ldr	r3, [r7, #20]
 800289c:	683a      	ldr	r2, [r7, #0]
 800289e:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80028a0:	697b      	ldr	r3, [r7, #20]
 80028a2:	2200      	movs	r2, #0
 80028a4:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80028a6:	697b      	ldr	r3, [r7, #20]
 80028a8:	2201      	movs	r2, #1
 80028aa:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80028ac:	7afb      	ldrb	r3, [r7, #11]
 80028ae:	f003 0307 	and.w	r3, r3, #7
 80028b2:	b2da      	uxtb	r2, r3
 80028b4:	697b      	ldr	r3, [r7, #20]
 80028b6:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80028b8:	7afb      	ldrb	r3, [r7, #11]
 80028ba:	f003 0307 	and.w	r3, r3, #7
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d106      	bne.n	80028d0 <HAL_PCD_EP_Transmit+0x5c>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	6979      	ldr	r1, [r7, #20]
 80028c8:	4618      	mov	r0, r3
 80028ca:	f002 f819 	bl	8004900 <USB_EPStartXfer>
 80028ce:	e005      	b.n	80028dc <HAL_PCD_EP_Transmit+0x68>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	6979      	ldr	r1, [r7, #20]
 80028d6:	4618      	mov	r0, r3
 80028d8:	f002 f812 	bl	8004900 <USB_EPStartXfer>
  }

  return HAL_OK;
 80028dc:	2300      	movs	r3, #0
}
 80028de:	4618      	mov	r0, r3
 80028e0:	3718      	adds	r7, #24
 80028e2:	46bd      	mov	sp, r7
 80028e4:	bd80      	pop	{r7, pc}

080028e6 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80028e6:	b580      	push	{r7, lr}
 80028e8:	b084      	sub	sp, #16
 80028ea:	af00      	add	r7, sp, #0
 80028ec:	6078      	str	r0, [r7, #4]
 80028ee:	460b      	mov	r3, r1
 80028f0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80028f2:	78fb      	ldrb	r3, [r7, #3]
 80028f4:	f003 0207 	and.w	r2, r3, #7
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	685b      	ldr	r3, [r3, #4]
 80028fc:	429a      	cmp	r2, r3
 80028fe:	d901      	bls.n	8002904 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002900:	2301      	movs	r3, #1
 8002902:	e046      	b.n	8002992 <HAL_PCD_EP_SetStall+0xac>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002904:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002908:	2b00      	cmp	r3, #0
 800290a:	da0b      	bge.n	8002924 <HAL_PCD_EP_SetStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800290c:	78fb      	ldrb	r3, [r7, #3]
 800290e:	f003 0307 	and.w	r3, r3, #7
 8002912:	015b      	lsls	r3, r3, #5
 8002914:	3328      	adds	r3, #40	; 0x28
 8002916:	687a      	ldr	r2, [r7, #4]
 8002918:	4413      	add	r3, r2
 800291a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	2201      	movs	r2, #1
 8002920:	705a      	strb	r2, [r3, #1]
 8002922:	e009      	b.n	8002938 <HAL_PCD_EP_SetStall+0x52>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002924:	78fb      	ldrb	r3, [r7, #3]
 8002926:	015b      	lsls	r3, r3, #5
 8002928:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800292c:	687a      	ldr	r2, [r7, #4]
 800292e:	4413      	add	r3, r2
 8002930:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	2200      	movs	r2, #0
 8002936:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	2201      	movs	r2, #1
 800293c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800293e:	78fb      	ldrb	r3, [r7, #3]
 8002940:	f003 0307 	and.w	r3, r3, #7
 8002944:	b2da      	uxtb	r2, r3
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8002950:	2b01      	cmp	r3, #1
 8002952:	d101      	bne.n	8002958 <HAL_PCD_EP_SetStall+0x72>
 8002954:	2302      	movs	r3, #2
 8002956:	e01c      	b.n	8002992 <HAL_PCD_EP_SetStall+0xac>
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2201      	movs	r2, #1
 800295c:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	68f9      	ldr	r1, [r7, #12]
 8002966:	4618      	mov	r0, r3
 8002968:	f002 fa82 	bl	8004e70 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800296c:	78fb      	ldrb	r3, [r7, #3]
 800296e:	f003 0307 	and.w	r3, r3, #7
 8002972:	2b00      	cmp	r3, #0
 8002974:	d108      	bne.n	8002988 <HAL_PCD_EP_SetStall+0xa2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681a      	ldr	r2, [r3, #0]
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8002980:	4619      	mov	r1, r3
 8002982:	4610      	mov	r0, r2
 8002984:	f002 fb80 	bl	8005088 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2200      	movs	r2, #0
 800298c:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return HAL_OK;
 8002990:	2300      	movs	r3, #0
}
 8002992:	4618      	mov	r0, r3
 8002994:	3710      	adds	r7, #16
 8002996:	46bd      	mov	sp, r7
 8002998:	bd80      	pop	{r7, pc}

0800299a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800299a:	b580      	push	{r7, lr}
 800299c:	b084      	sub	sp, #16
 800299e:	af00      	add	r7, sp, #0
 80029a0:	6078      	str	r0, [r7, #4]
 80029a2:	460b      	mov	r3, r1
 80029a4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80029a6:	78fb      	ldrb	r3, [r7, #3]
 80029a8:	f003 020f 	and.w	r2, r3, #15
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	685b      	ldr	r3, [r3, #4]
 80029b0:	429a      	cmp	r2, r3
 80029b2:	d901      	bls.n	80029b8 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80029b4:	2301      	movs	r3, #1
 80029b6:	e03a      	b.n	8002a2e <HAL_PCD_EP_ClrStall+0x94>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80029b8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80029bc:	2b00      	cmp	r3, #0
 80029be:	da0b      	bge.n	80029d8 <HAL_PCD_EP_ClrStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80029c0:	78fb      	ldrb	r3, [r7, #3]
 80029c2:	f003 0307 	and.w	r3, r3, #7
 80029c6:	015b      	lsls	r3, r3, #5
 80029c8:	3328      	adds	r3, #40	; 0x28
 80029ca:	687a      	ldr	r2, [r7, #4]
 80029cc:	4413      	add	r3, r2
 80029ce:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	2201      	movs	r2, #1
 80029d4:	705a      	strb	r2, [r3, #1]
 80029d6:	e00b      	b.n	80029f0 <HAL_PCD_EP_ClrStall+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80029d8:	78fb      	ldrb	r3, [r7, #3]
 80029da:	f003 0307 	and.w	r3, r3, #7
 80029de:	015b      	lsls	r3, r3, #5
 80029e0:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80029e4:	687a      	ldr	r2, [r7, #4]
 80029e6:	4413      	add	r3, r2
 80029e8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	2200      	movs	r2, #0
 80029ee:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	2200      	movs	r2, #0
 80029f4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80029f6:	78fb      	ldrb	r3, [r7, #3]
 80029f8:	f003 0307 	and.w	r3, r3, #7
 80029fc:	b2da      	uxtb	r2, r3
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8002a08:	2b01      	cmp	r3, #1
 8002a0a:	d101      	bne.n	8002a10 <HAL_PCD_EP_ClrStall+0x76>
 8002a0c:	2302      	movs	r3, #2
 8002a0e:	e00e      	b.n	8002a2e <HAL_PCD_EP_ClrStall+0x94>
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2201      	movs	r2, #1
 8002a14:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	68f9      	ldr	r1, [r7, #12]
 8002a1e:	4618      	mov	r0, r3
 8002a20:	f002 fa68 	bl	8004ef4 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2200      	movs	r2, #0
 8002a28:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return HAL_OK;
 8002a2c:	2300      	movs	r3, #0
}
 8002a2e:	4618      	mov	r0, r3
 8002a30:	3710      	adds	r7, #16
 8002a32:	46bd      	mov	sp, r7
 8002a34:	bd80      	pop	{r7, pc}
	...

08002a38 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8002a38:	b590      	push	{r4, r7, lr}
 8002a3a:	b089      	sub	sp, #36	; 0x24
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
  uint16_t wIstr;
  uint16_t wEPVal;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002a40:	e282      	b.n	8002f48 <PCD_EP_ISR_Handler+0x510>
  {
    wIstr = hpcd->Instance->ISTR;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002a4a:	82fb      	strh	r3, [r7, #22]
    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8002a4c:	8afb      	ldrh	r3, [r7, #22]
 8002a4e:	b2db      	uxtb	r3, r3
 8002a50:	f003 030f 	and.w	r3, r3, #15
 8002a54:	757b      	strb	r3, [r7, #21]

    if (epindex == 0U)
 8002a56:	7d7b      	ldrb	r3, [r7, #21]
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	f040 8142 	bne.w	8002ce2 <PCD_EP_ISR_Handler+0x2aa>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8002a5e:	8afb      	ldrh	r3, [r7, #22]
 8002a60:	f003 0310 	and.w	r3, r3, #16
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d151      	bne.n	8002b0c <PCD_EP_ISR_Handler+0xd4>
      {
        /* DIR = 0 */

        /* DIR = 0      => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always  */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	881b      	ldrh	r3, [r3, #0]
 8002a6e:	b29b      	uxth	r3, r3
 8002a70:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002a74:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a78:	b29c      	uxth	r4, r3
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681a      	ldr	r2, [r3, #0]
 8002a7e:	ea6f 4344 	mvn.w	r3, r4, lsl #17
 8002a82:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002a86:	b29b      	uxth	r3, r3
 8002a88:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	3328      	adds	r3, #40	; 0x28
 8002a8e:	60fb      	str	r3, [r7, #12]

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002a98:	b29b      	uxth	r3, r3
 8002a9a:	461a      	mov	r2, r3
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	781b      	ldrb	r3, [r3, #0]
 8002aa0:	00db      	lsls	r3, r3, #3
 8002aa2:	4413      	add	r3, r2
 8002aa4:	3302      	adds	r3, #2
 8002aa6:	005b      	lsls	r3, r3, #1
 8002aa8:	687a      	ldr	r2, [r7, #4]
 8002aaa:	6812      	ldr	r2, [r2, #0]
 8002aac:	4413      	add	r3, r2
 8002aae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002ab2:	881b      	ldrh	r3, [r3, #0]
 8002ab4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	695a      	ldr	r2, [r3, #20]
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	69db      	ldr	r3, [r3, #28]
 8002ac4:	441a      	add	r2, r3
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8002aca:	2100      	movs	r1, #0
 8002acc:	6878      	ldr	r0, [r7, #4]
 8002ace:	f004 f925 	bl	8006d1c <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002ad8:	b2db      	uxtb	r3, r3
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	f000 8234 	beq.w	8002f48 <PCD_EP_ISR_Handler+0x510>
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	699b      	ldr	r3, [r3, #24]
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	f040 822f 	bne.w	8002f48 <PCD_EP_ISR_Handler+0x510>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002af0:	b2db      	uxtb	r3, r3
 8002af2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002af6:	b2da      	uxtb	r2, r3
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	b292      	uxth	r2, r2
 8002afe:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	2200      	movs	r2, #0
 8002b06:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002b0a:	e21d      	b.n	8002f48 <PCD_EP_ISR_Handler+0x510>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX       => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002b12:	60fb      	str	r3, [r7, #12]
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	881b      	ldrh	r3, [r3, #0]
 8002b1a:	827b      	strh	r3, [r7, #18]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8002b1c:	8a7b      	ldrh	r3, [r7, #18]
 8002b1e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d033      	beq.n	8002b8e <PCD_EP_ISR_Handler+0x156>
        {
          /* Get SETUP Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002b2e:	b29b      	uxth	r3, r3
 8002b30:	461a      	mov	r2, r3
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	781b      	ldrb	r3, [r3, #0]
 8002b36:	00db      	lsls	r3, r3, #3
 8002b38:	4413      	add	r3, r2
 8002b3a:	3306      	adds	r3, #6
 8002b3c:	005b      	lsls	r3, r3, #1
 8002b3e:	687a      	ldr	r2, [r7, #4]
 8002b40:	6812      	ldr	r2, [r2, #0]
 8002b42:	4413      	add	r3, r2
 8002b44:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002b48:	881b      	ldrh	r3, [r3, #0]
 8002b4a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	6818      	ldr	r0, [r3, #0]
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	f503 710c 	add.w	r1, r3, #560	; 0x230
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002b64:	b29b      	uxth	r3, r3
 8002b66:	f002 fade 	bl	8005126 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1*/
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	881b      	ldrh	r3, [r3, #0]
 8002b70:	b29a      	uxth	r2, r3
 8002b72:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002b76:	4013      	ands	r3, r2
 8002b78:	b29c      	uxth	r4, r3
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 8002b82:	b292      	uxth	r2, r2
 8002b84:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8002b86:	6878      	ldr	r0, [r7, #4]
 8002b88:	f004 f89e 	bl	8006cc8 <HAL_PCD_SetupStageCallback>
 8002b8c:	e1dc      	b.n	8002f48 <PCD_EP_ISR_Handler+0x510>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }

        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002b8e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	f280 81d8 	bge.w	8002f48 <PCD_EP_ISR_Handler+0x510>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	881b      	ldrh	r3, [r3, #0]
 8002b9e:	b29a      	uxth	r2, r3
 8002ba0:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002ba4:	4013      	ands	r3, r2
 8002ba6:	b29c      	uxth	r4, r3
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 8002bb0:	b292      	uxth	r2, r2
 8002bb2:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002bbc:	b29b      	uxth	r3, r3
 8002bbe:	461a      	mov	r2, r3
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	781b      	ldrb	r3, [r3, #0]
 8002bc4:	00db      	lsls	r3, r3, #3
 8002bc6:	4413      	add	r3, r2
 8002bc8:	3306      	adds	r3, #6
 8002bca:	005b      	lsls	r3, r3, #1
 8002bcc:	687a      	ldr	r2, [r7, #4]
 8002bce:	6812      	ldr	r2, [r2, #0]
 8002bd0:	4413      	add	r3, r2
 8002bd2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002bd6:	881b      	ldrh	r3, [r3, #0]
 8002bd8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	69db      	ldr	r3, [r3, #28]
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d019      	beq.n	8002c1c <PCD_EP_ISR_Handler+0x1e4>
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	695b      	ldr	r3, [r3, #20]
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d015      	beq.n	8002c1c <PCD_EP_ISR_Handler+0x1e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	6818      	ldr	r0, [r3, #0]
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	6959      	ldr	r1, [r3, #20]
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002c00:	b29b      	uxth	r3, r3
 8002c02:	f002 fa90 	bl	8005126 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	695a      	ldr	r2, [r3, #20]
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	69db      	ldr	r3, [r3, #28]
 8002c0e:	441a      	add	r2, r3
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8002c14:	2100      	movs	r1, #0
 8002c16:	6878      	ldr	r0, [r7, #4]
 8002c18:	f004 f868 	bl	8006cec <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	461c      	mov	r4, r3
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002c2a:	b29b      	uxth	r3, r3
 8002c2c:	441c      	add	r4, r3
 8002c2e:	f204 430c 	addw	r3, r4, #1036	; 0x40c
 8002c32:	461c      	mov	r4, r3
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	691b      	ldr	r3, [r3, #16]
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d10e      	bne.n	8002c5a <PCD_EP_ISR_Handler+0x222>
 8002c3c:	8823      	ldrh	r3, [r4, #0]
 8002c3e:	b29b      	uxth	r3, r3
 8002c40:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002c44:	b29b      	uxth	r3, r3
 8002c46:	8023      	strh	r3, [r4, #0]
 8002c48:	8823      	ldrh	r3, [r4, #0]
 8002c4a:	b29b      	uxth	r3, r3
 8002c4c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002c50:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002c54:	b29b      	uxth	r3, r3
 8002c56:	8023      	strh	r3, [r4, #0]
 8002c58:	e02d      	b.n	8002cb6 <PCD_EP_ISR_Handler+0x27e>
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	691b      	ldr	r3, [r3, #16]
 8002c5e:	2b3e      	cmp	r3, #62	; 0x3e
 8002c60:	d812      	bhi.n	8002c88 <PCD_EP_ISR_Handler+0x250>
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	691b      	ldr	r3, [r3, #16]
 8002c66:	085b      	lsrs	r3, r3, #1
 8002c68:	61bb      	str	r3, [r7, #24]
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	691b      	ldr	r3, [r3, #16]
 8002c6e:	f003 0301 	and.w	r3, r3, #1
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d002      	beq.n	8002c7c <PCD_EP_ISR_Handler+0x244>
 8002c76:	69bb      	ldr	r3, [r7, #24]
 8002c78:	3301      	adds	r3, #1
 8002c7a:	61bb      	str	r3, [r7, #24]
 8002c7c:	69bb      	ldr	r3, [r7, #24]
 8002c7e:	b29b      	uxth	r3, r3
 8002c80:	029b      	lsls	r3, r3, #10
 8002c82:	b29b      	uxth	r3, r3
 8002c84:	8023      	strh	r3, [r4, #0]
 8002c86:	e016      	b.n	8002cb6 <PCD_EP_ISR_Handler+0x27e>
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	691b      	ldr	r3, [r3, #16]
 8002c8c:	095b      	lsrs	r3, r3, #5
 8002c8e:	61bb      	str	r3, [r7, #24]
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	691b      	ldr	r3, [r3, #16]
 8002c94:	f003 031f 	and.w	r3, r3, #31
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d102      	bne.n	8002ca2 <PCD_EP_ISR_Handler+0x26a>
 8002c9c:	69bb      	ldr	r3, [r7, #24]
 8002c9e:	3b01      	subs	r3, #1
 8002ca0:	61bb      	str	r3, [r7, #24]
 8002ca2:	69bb      	ldr	r3, [r7, #24]
 8002ca4:	b29b      	uxth	r3, r3
 8002ca6:	029b      	lsls	r3, r3, #10
 8002ca8:	b29b      	uxth	r3, r3
 8002caa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002cae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002cb2:	b29b      	uxth	r3, r3
 8002cb4:	8023      	strh	r3, [r4, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	881b      	ldrh	r3, [r3, #0]
 8002cbc:	b29b      	uxth	r3, r3
 8002cbe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002cc2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002cc6:	b29c      	uxth	r4, r3
 8002cc8:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8002ccc:	b29c      	uxth	r4, r3
 8002cce:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8002cd2:	b29c      	uxth	r4, r3
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681a      	ldr	r2, [r3, #0]
 8002cd8:	4ba2      	ldr	r3, [pc, #648]	; (8002f64 <PCD_EP_ISR_Handler+0x52c>)
 8002cda:	4323      	orrs	r3, r4
 8002cdc:	b29b      	uxth	r3, r3
 8002cde:	8013      	strh	r3, [r2, #0]
 8002ce0:	e132      	b.n	8002f48 <PCD_EP_ISR_Handler+0x510>
    else
    {
      /* Decode and service non control endpoints interrupt  */

      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	461a      	mov	r2, r3
 8002ce8:	7d7b      	ldrb	r3, [r7, #21]
 8002cea:	009b      	lsls	r3, r3, #2
 8002cec:	4413      	add	r3, r2
 8002cee:	881b      	ldrh	r3, [r3, #0]
 8002cf0:	827b      	strh	r3, [r7, #18]
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002cf2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	f280 80d1 	bge.w	8002e9e <PCD_EP_ISR_Handler+0x466>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	461a      	mov	r2, r3
 8002d02:	7d7b      	ldrb	r3, [r7, #21]
 8002d04:	009b      	lsls	r3, r3, #2
 8002d06:	4413      	add	r3, r2
 8002d08:	881b      	ldrh	r3, [r3, #0]
 8002d0a:	b29a      	uxth	r2, r3
 8002d0c:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002d10:	4013      	ands	r3, r2
 8002d12:	b29c      	uxth	r4, r3
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	461a      	mov	r2, r3
 8002d1a:	7d7b      	ldrb	r3, [r7, #21]
 8002d1c:	009b      	lsls	r3, r3, #2
 8002d1e:	4413      	add	r3, r2
 8002d20:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 8002d24:	b292      	uxth	r2, r2
 8002d26:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8002d28:	7d7b      	ldrb	r3, [r7, #21]
 8002d2a:	015b      	lsls	r3, r3, #5
 8002d2c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002d30:	687a      	ldr	r2, [r7, #4]
 8002d32:	4413      	add	r3, r2
 8002d34:	60fb      	str	r3, [r7, #12]

        /* OUT double Buffering*/
        if (ep->doublebuffer == 0U)
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	7b1b      	ldrb	r3, [r3, #12]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d121      	bne.n	8002d82 <PCD_EP_ISR_Handler+0x34a>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002d46:	b29b      	uxth	r3, r3
 8002d48:	461a      	mov	r2, r3
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	781b      	ldrb	r3, [r3, #0]
 8002d4e:	00db      	lsls	r3, r3, #3
 8002d50:	4413      	add	r3, r2
 8002d52:	3306      	adds	r3, #6
 8002d54:	005b      	lsls	r3, r3, #1
 8002d56:	687a      	ldr	r2, [r7, #4]
 8002d58:	6812      	ldr	r2, [r2, #0]
 8002d5a:	4413      	add	r3, r2
 8002d5c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002d60:	881b      	ldrh	r3, [r3, #0]
 8002d62:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002d66:	83fb      	strh	r3, [r7, #30]
          if (count != 0U)
 8002d68:	8bfb      	ldrh	r3, [r7, #30]
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d072      	beq.n	8002e54 <PCD_EP_ISR_Handler+0x41c>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	6818      	ldr	r0, [r3, #0]
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	6959      	ldr	r1, [r3, #20]
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	88da      	ldrh	r2, [r3, #6]
 8002d7a:	8bfb      	ldrh	r3, [r7, #30]
 8002d7c:	f002 f9d3 	bl	8005126 <USB_ReadPMA>
 8002d80:	e068      	b.n	8002e54 <PCD_EP_ISR_Handler+0x41c>
          }
        }
        else
        {
          if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	461a      	mov	r2, r3
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	781b      	ldrb	r3, [r3, #0]
 8002d8c:	009b      	lsls	r3, r3, #2
 8002d8e:	4413      	add	r3, r2
 8002d90:	881b      	ldrh	r3, [r3, #0]
 8002d92:	b29b      	uxth	r3, r3
 8002d94:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d021      	beq.n	8002de0 <PCD_EP_ISR_Handler+0x3a8>
          {
            /*read from endpoint BUF0Addr buffer*/
            count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002da4:	b29b      	uxth	r3, r3
 8002da6:	461a      	mov	r2, r3
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	781b      	ldrb	r3, [r3, #0]
 8002dac:	00db      	lsls	r3, r3, #3
 8002dae:	4413      	add	r3, r2
 8002db0:	3302      	adds	r3, #2
 8002db2:	005b      	lsls	r3, r3, #1
 8002db4:	687a      	ldr	r2, [r7, #4]
 8002db6:	6812      	ldr	r2, [r2, #0]
 8002db8:	4413      	add	r3, r2
 8002dba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002dbe:	881b      	ldrh	r3, [r3, #0]
 8002dc0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002dc4:	83fb      	strh	r3, [r7, #30]
            if (count != 0U)
 8002dc6:	8bfb      	ldrh	r3, [r7, #30]
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d02a      	beq.n	8002e22 <PCD_EP_ISR_Handler+0x3ea>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	6818      	ldr	r0, [r3, #0]
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	6959      	ldr	r1, [r3, #20]
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	891a      	ldrh	r2, [r3, #8]
 8002dd8:	8bfb      	ldrh	r3, [r7, #30]
 8002dda:	f002 f9a4 	bl	8005126 <USB_ReadPMA>
 8002dde:	e020      	b.n	8002e22 <PCD_EP_ISR_Handler+0x3ea>
            }
          }
          else
          {
            /*read from endpoint BUF1Addr buffer*/
            count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002de8:	b29b      	uxth	r3, r3
 8002dea:	461a      	mov	r2, r3
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	781b      	ldrb	r3, [r3, #0]
 8002df0:	00db      	lsls	r3, r3, #3
 8002df2:	4413      	add	r3, r2
 8002df4:	3306      	adds	r3, #6
 8002df6:	005b      	lsls	r3, r3, #1
 8002df8:	687a      	ldr	r2, [r7, #4]
 8002dfa:	6812      	ldr	r2, [r2, #0]
 8002dfc:	4413      	add	r3, r2
 8002dfe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002e02:	881b      	ldrh	r3, [r3, #0]
 8002e04:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002e08:	83fb      	strh	r3, [r7, #30]
            if (count != 0U)
 8002e0a:	8bfb      	ldrh	r3, [r7, #30]
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d008      	beq.n	8002e22 <PCD_EP_ISR_Handler+0x3ea>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	6818      	ldr	r0, [r3, #0]
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	6959      	ldr	r1, [r3, #20]
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	895a      	ldrh	r2, [r3, #10]
 8002e1c:	8bfb      	ldrh	r3, [r7, #30]
 8002e1e:	f002 f982 	bl	8005126 <USB_ReadPMA>
            }
          }
          /* free EP OUT Buffer */
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	461a      	mov	r2, r3
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	781b      	ldrb	r3, [r3, #0]
 8002e2c:	009b      	lsls	r3, r3, #2
 8002e2e:	4413      	add	r3, r2
 8002e30:	881b      	ldrh	r3, [r3, #0]
 8002e32:	b29b      	uxth	r3, r3
 8002e34:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002e38:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e3c:	b29c      	uxth	r4, r3
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	461a      	mov	r2, r3
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	781b      	ldrb	r3, [r3, #0]
 8002e48:	009b      	lsls	r3, r3, #2
 8002e4a:	441a      	add	r2, r3
 8002e4c:	4b46      	ldr	r3, [pc, #280]	; (8002f68 <PCD_EP_ISR_Handler+0x530>)
 8002e4e:	4323      	orrs	r3, r4
 8002e50:	b29b      	uxth	r3, r3
 8002e52:	8013      	strh	r3, [r2, #0]
        }
        /*multi-packet on the NON control OUT endpoint*/
        ep->xfer_count += count;
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	69da      	ldr	r2, [r3, #28]
 8002e58:	8bfb      	ldrh	r3, [r7, #30]
 8002e5a:	441a      	add	r2, r3
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	695a      	ldr	r2, [r3, #20]
 8002e64:	8bfb      	ldrh	r3, [r7, #30]
 8002e66:	441a      	add	r2, r3
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	699b      	ldr	r3, [r3, #24]
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d004      	beq.n	8002e7e <PCD_EP_ISR_Handler+0x446>
 8002e74:	8bfa      	ldrh	r2, [r7, #30]
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	691b      	ldr	r3, [r3, #16]
 8002e7a:	429a      	cmp	r2, r3
 8002e7c:	d206      	bcs.n	8002e8c <PCD_EP_ISR_Handler+0x454>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	781b      	ldrb	r3, [r3, #0]
 8002e82:	4619      	mov	r1, r3
 8002e84:	6878      	ldr	r0, [r7, #4]
 8002e86:	f003 ff31 	bl	8006cec <HAL_PCD_DataOutStageCallback>
 8002e8a:	e008      	b.n	8002e9e <PCD_EP_ISR_Handler+0x466>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	7819      	ldrb	r1, [r3, #0]
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	695a      	ldr	r2, [r3, #20]
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	699b      	ldr	r3, [r3, #24]
 8002e98:	6878      	ldr	r0, [r7, #4]
 8002e9a:	f7ff fc9d 	bl	80027d8 <HAL_PCD_EP_Receive>
        }

      } /* if((wEPVal & EP_CTR_RX) */

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8002e9e:	8a7b      	ldrh	r3, [r7, #18]
 8002ea0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d04f      	beq.n	8002f48 <PCD_EP_ISR_Handler+0x510>
      {
        ep = &hpcd->IN_ep[epindex];
 8002ea8:	7d7b      	ldrb	r3, [r7, #21]
 8002eaa:	015b      	lsls	r3, r3, #5
 8002eac:	3328      	adds	r3, #40	; 0x28
 8002eae:	687a      	ldr	r2, [r7, #4]
 8002eb0:	4413      	add	r3, r2
 8002eb2:	60fb      	str	r3, [r7, #12]

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	461a      	mov	r2, r3
 8002eba:	7d7b      	ldrb	r3, [r7, #21]
 8002ebc:	009b      	lsls	r3, r3, #2
 8002ebe:	4413      	add	r3, r2
 8002ec0:	881b      	ldrh	r3, [r3, #0]
 8002ec2:	b29b      	uxth	r3, r3
 8002ec4:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002ec8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ecc:	b29c      	uxth	r4, r3
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	461a      	mov	r2, r3
 8002ed4:	7d7b      	ldrb	r3, [r7, #21]
 8002ed6:	009b      	lsls	r3, r3, #2
 8002ed8:	441a      	add	r2, r3
 8002eda:	ea6f 4344 	mvn.w	r3, r4, lsl #17
 8002ede:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002ee2:	b29b      	uxth	r3, r3
 8002ee4:	8013      	strh	r3, [r2, #0]

        /*multi-packet on the NON control IN endpoint*/
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002eee:	b29b      	uxth	r3, r3
 8002ef0:	461a      	mov	r2, r3
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	781b      	ldrb	r3, [r3, #0]
 8002ef6:	00db      	lsls	r3, r3, #3
 8002ef8:	4413      	add	r3, r2
 8002efa:	3302      	adds	r3, #2
 8002efc:	005b      	lsls	r3, r3, #1
 8002efe:	687a      	ldr	r2, [r7, #4]
 8002f00:	6812      	ldr	r2, [r2, #0]
 8002f02:	4413      	add	r3, r2
 8002f04:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002f08:	881b      	ldrh	r3, [r3, #0]
 8002f0a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	695a      	ldr	r2, [r3, #20]
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	69db      	ldr	r3, [r3, #28]
 8002f1a:	441a      	add	r2, r3
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	615a      	str	r2, [r3, #20]

        /* Zero Length Packet? */
        if (ep->xfer_len == 0U)
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	699b      	ldr	r3, [r3, #24]
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d106      	bne.n	8002f36 <PCD_EP_ISR_Handler+0x4fe>
        {
          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	781b      	ldrb	r3, [r3, #0]
 8002f2c:	4619      	mov	r1, r3
 8002f2e:	6878      	ldr	r0, [r7, #4]
 8002f30:	f003 fef4 	bl	8006d1c <HAL_PCD_DataInStageCallback>
 8002f34:	e008      	b.n	8002f48 <PCD_EP_ISR_Handler+0x510>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Transmit(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	7819      	ldrb	r1, [r3, #0]
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	695a      	ldr	r2, [r3, #20]
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	699b      	ldr	r3, [r3, #24]
 8002f42:	6878      	ldr	r0, [r7, #4]
 8002f44:	f7ff fc96 	bl	8002874 <HAL_PCD_EP_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002f50:	b29b      	uxth	r3, r3
 8002f52:	b21b      	sxth	r3, r3
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	f6ff ad74 	blt.w	8002a42 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }
  return HAL_OK;
 8002f5a:	2300      	movs	r3, #0
}
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	3724      	adds	r7, #36	; 0x24
 8002f60:	46bd      	mov	sp, r7
 8002f62:	bd90      	pop	{r4, r7, pc}
 8002f64:	ffff8080 	.word	0xffff8080
 8002f68:	ffff80c0 	.word	0xffff80c0

08002f6c <HAL_PCDEx_PMAConfig>:

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd,
                                       uint16_t ep_addr,
                                       uint16_t ep_kind,
                                       uint32_t pmaadress)
{
 8002f6c:	b480      	push	{r7}
 8002f6e:	b087      	sub	sp, #28
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	60f8      	str	r0, [r7, #12]
 8002f74:	607b      	str	r3, [r7, #4]
 8002f76:	460b      	mov	r3, r1
 8002f78:	817b      	strh	r3, [r7, #10]
 8002f7a:	4613      	mov	r3, r2
 8002f7c:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8002f7e:	897b      	ldrh	r3, [r7, #10]
 8002f80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f84:	b29b      	uxth	r3, r3
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d008      	beq.n	8002f9c <HAL_PCDEx_PMAConfig+0x30>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002f8a:	897b      	ldrh	r3, [r7, #10]
 8002f8c:	f003 0307 	and.w	r3, r3, #7
 8002f90:	015b      	lsls	r3, r3, #5
 8002f92:	3328      	adds	r3, #40	; 0x28
 8002f94:	68fa      	ldr	r2, [r7, #12]
 8002f96:	4413      	add	r3, r2
 8002f98:	617b      	str	r3, [r7, #20]
 8002f9a:	e006      	b.n	8002faa <HAL_PCDEx_PMAConfig+0x3e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002f9c:	897b      	ldrh	r3, [r7, #10]
 8002f9e:	015b      	lsls	r3, r3, #5
 8002fa0:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002fa4:	68fa      	ldr	r2, [r7, #12]
 8002fa6:	4413      	add	r3, r2
 8002fa8:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8002faa:	893b      	ldrh	r3, [r7, #8]
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d107      	bne.n	8002fc0 <HAL_PCDEx_PMAConfig+0x54>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8002fb0:	697b      	ldr	r3, [r7, #20]
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	b29a      	uxth	r2, r3
 8002fba:	697b      	ldr	r3, [r7, #20]
 8002fbc:	80da      	strh	r2, [r3, #6]
 8002fbe:	e00b      	b.n	8002fd8 <HAL_PCDEx_PMAConfig+0x6c>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8002fc0:	697b      	ldr	r3, [r7, #20]
 8002fc2:	2201      	movs	r2, #1
 8002fc4:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	b29a      	uxth	r2, r3
 8002fca:	697b      	ldr	r3, [r7, #20]
 8002fcc:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	0c1b      	lsrs	r3, r3, #16
 8002fd2:	b29a      	uxth	r2, r3
 8002fd4:	697b      	ldr	r3, [r7, #20]
 8002fd6:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8002fd8:	2300      	movs	r3, #0
}
 8002fda:	4618      	mov	r0, r3
 8002fdc:	371c      	adds	r7, #28
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	bc80      	pop	{r7}
 8002fe2:	4770      	bx	lr

08002fe4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	b086      	sub	sp, #24
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d101      	bne.n	8002ff6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002ff2:	2301      	movs	r3, #1
 8002ff4:	e26c      	b.n	80034d0 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f003 0301 	and.w	r3, r3, #1
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	f000 8087 	beq.w	8003112 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003004:	4b92      	ldr	r3, [pc, #584]	; (8003250 <HAL_RCC_OscConfig+0x26c>)
 8003006:	685b      	ldr	r3, [r3, #4]
 8003008:	f003 030c 	and.w	r3, r3, #12
 800300c:	2b04      	cmp	r3, #4
 800300e:	d00c      	beq.n	800302a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003010:	4b8f      	ldr	r3, [pc, #572]	; (8003250 <HAL_RCC_OscConfig+0x26c>)
 8003012:	685b      	ldr	r3, [r3, #4]
 8003014:	f003 030c 	and.w	r3, r3, #12
 8003018:	2b08      	cmp	r3, #8
 800301a:	d112      	bne.n	8003042 <HAL_RCC_OscConfig+0x5e>
 800301c:	4b8c      	ldr	r3, [pc, #560]	; (8003250 <HAL_RCC_OscConfig+0x26c>)
 800301e:	685b      	ldr	r3, [r3, #4]
 8003020:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003024:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003028:	d10b      	bne.n	8003042 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800302a:	4b89      	ldr	r3, [pc, #548]	; (8003250 <HAL_RCC_OscConfig+0x26c>)
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003032:	2b00      	cmp	r3, #0
 8003034:	d06c      	beq.n	8003110 <HAL_RCC_OscConfig+0x12c>
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	685b      	ldr	r3, [r3, #4]
 800303a:	2b00      	cmp	r3, #0
 800303c:	d168      	bne.n	8003110 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800303e:	2301      	movs	r3, #1
 8003040:	e246      	b.n	80034d0 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	685b      	ldr	r3, [r3, #4]
 8003046:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800304a:	d106      	bne.n	800305a <HAL_RCC_OscConfig+0x76>
 800304c:	4b80      	ldr	r3, [pc, #512]	; (8003250 <HAL_RCC_OscConfig+0x26c>)
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	4a7f      	ldr	r2, [pc, #508]	; (8003250 <HAL_RCC_OscConfig+0x26c>)
 8003052:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003056:	6013      	str	r3, [r2, #0]
 8003058:	e02e      	b.n	80030b8 <HAL_RCC_OscConfig+0xd4>
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	685b      	ldr	r3, [r3, #4]
 800305e:	2b00      	cmp	r3, #0
 8003060:	d10c      	bne.n	800307c <HAL_RCC_OscConfig+0x98>
 8003062:	4b7b      	ldr	r3, [pc, #492]	; (8003250 <HAL_RCC_OscConfig+0x26c>)
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	4a7a      	ldr	r2, [pc, #488]	; (8003250 <HAL_RCC_OscConfig+0x26c>)
 8003068:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800306c:	6013      	str	r3, [r2, #0]
 800306e:	4b78      	ldr	r3, [pc, #480]	; (8003250 <HAL_RCC_OscConfig+0x26c>)
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	4a77      	ldr	r2, [pc, #476]	; (8003250 <HAL_RCC_OscConfig+0x26c>)
 8003074:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003078:	6013      	str	r3, [r2, #0]
 800307a:	e01d      	b.n	80030b8 <HAL_RCC_OscConfig+0xd4>
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	685b      	ldr	r3, [r3, #4]
 8003080:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003084:	d10c      	bne.n	80030a0 <HAL_RCC_OscConfig+0xbc>
 8003086:	4b72      	ldr	r3, [pc, #456]	; (8003250 <HAL_RCC_OscConfig+0x26c>)
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	4a71      	ldr	r2, [pc, #452]	; (8003250 <HAL_RCC_OscConfig+0x26c>)
 800308c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003090:	6013      	str	r3, [r2, #0]
 8003092:	4b6f      	ldr	r3, [pc, #444]	; (8003250 <HAL_RCC_OscConfig+0x26c>)
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	4a6e      	ldr	r2, [pc, #440]	; (8003250 <HAL_RCC_OscConfig+0x26c>)
 8003098:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800309c:	6013      	str	r3, [r2, #0]
 800309e:	e00b      	b.n	80030b8 <HAL_RCC_OscConfig+0xd4>
 80030a0:	4b6b      	ldr	r3, [pc, #428]	; (8003250 <HAL_RCC_OscConfig+0x26c>)
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	4a6a      	ldr	r2, [pc, #424]	; (8003250 <HAL_RCC_OscConfig+0x26c>)
 80030a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80030aa:	6013      	str	r3, [r2, #0]
 80030ac:	4b68      	ldr	r3, [pc, #416]	; (8003250 <HAL_RCC_OscConfig+0x26c>)
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	4a67      	ldr	r2, [pc, #412]	; (8003250 <HAL_RCC_OscConfig+0x26c>)
 80030b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80030b6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	685b      	ldr	r3, [r3, #4]
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d013      	beq.n	80030e8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030c0:	f7fd fe7e 	bl	8000dc0 <HAL_GetTick>
 80030c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030c6:	e008      	b.n	80030da <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80030c8:	f7fd fe7a 	bl	8000dc0 <HAL_GetTick>
 80030cc:	4602      	mov	r2, r0
 80030ce:	693b      	ldr	r3, [r7, #16]
 80030d0:	1ad3      	subs	r3, r2, r3
 80030d2:	2b64      	cmp	r3, #100	; 0x64
 80030d4:	d901      	bls.n	80030da <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80030d6:	2303      	movs	r3, #3
 80030d8:	e1fa      	b.n	80034d0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030da:	4b5d      	ldr	r3, [pc, #372]	; (8003250 <HAL_RCC_OscConfig+0x26c>)
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d0f0      	beq.n	80030c8 <HAL_RCC_OscConfig+0xe4>
 80030e6:	e014      	b.n	8003112 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030e8:	f7fd fe6a 	bl	8000dc0 <HAL_GetTick>
 80030ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80030ee:	e008      	b.n	8003102 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80030f0:	f7fd fe66 	bl	8000dc0 <HAL_GetTick>
 80030f4:	4602      	mov	r2, r0
 80030f6:	693b      	ldr	r3, [r7, #16]
 80030f8:	1ad3      	subs	r3, r2, r3
 80030fa:	2b64      	cmp	r3, #100	; 0x64
 80030fc:	d901      	bls.n	8003102 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80030fe:	2303      	movs	r3, #3
 8003100:	e1e6      	b.n	80034d0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003102:	4b53      	ldr	r3, [pc, #332]	; (8003250 <HAL_RCC_OscConfig+0x26c>)
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800310a:	2b00      	cmp	r3, #0
 800310c:	d1f0      	bne.n	80030f0 <HAL_RCC_OscConfig+0x10c>
 800310e:	e000      	b.n	8003112 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003110:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f003 0302 	and.w	r3, r3, #2
 800311a:	2b00      	cmp	r3, #0
 800311c:	d063      	beq.n	80031e6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800311e:	4b4c      	ldr	r3, [pc, #304]	; (8003250 <HAL_RCC_OscConfig+0x26c>)
 8003120:	685b      	ldr	r3, [r3, #4]
 8003122:	f003 030c 	and.w	r3, r3, #12
 8003126:	2b00      	cmp	r3, #0
 8003128:	d00b      	beq.n	8003142 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800312a:	4b49      	ldr	r3, [pc, #292]	; (8003250 <HAL_RCC_OscConfig+0x26c>)
 800312c:	685b      	ldr	r3, [r3, #4]
 800312e:	f003 030c 	and.w	r3, r3, #12
 8003132:	2b08      	cmp	r3, #8
 8003134:	d11c      	bne.n	8003170 <HAL_RCC_OscConfig+0x18c>
 8003136:	4b46      	ldr	r3, [pc, #280]	; (8003250 <HAL_RCC_OscConfig+0x26c>)
 8003138:	685b      	ldr	r3, [r3, #4]
 800313a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800313e:	2b00      	cmp	r3, #0
 8003140:	d116      	bne.n	8003170 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003142:	4b43      	ldr	r3, [pc, #268]	; (8003250 <HAL_RCC_OscConfig+0x26c>)
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f003 0302 	and.w	r3, r3, #2
 800314a:	2b00      	cmp	r3, #0
 800314c:	d005      	beq.n	800315a <HAL_RCC_OscConfig+0x176>
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	691b      	ldr	r3, [r3, #16]
 8003152:	2b01      	cmp	r3, #1
 8003154:	d001      	beq.n	800315a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003156:	2301      	movs	r3, #1
 8003158:	e1ba      	b.n	80034d0 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800315a:	4b3d      	ldr	r3, [pc, #244]	; (8003250 <HAL_RCC_OscConfig+0x26c>)
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	695b      	ldr	r3, [r3, #20]
 8003166:	00db      	lsls	r3, r3, #3
 8003168:	4939      	ldr	r1, [pc, #228]	; (8003250 <HAL_RCC_OscConfig+0x26c>)
 800316a:	4313      	orrs	r3, r2
 800316c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800316e:	e03a      	b.n	80031e6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	691b      	ldr	r3, [r3, #16]
 8003174:	2b00      	cmp	r3, #0
 8003176:	d020      	beq.n	80031ba <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003178:	4b36      	ldr	r3, [pc, #216]	; (8003254 <HAL_RCC_OscConfig+0x270>)
 800317a:	2201      	movs	r2, #1
 800317c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800317e:	f7fd fe1f 	bl	8000dc0 <HAL_GetTick>
 8003182:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003184:	e008      	b.n	8003198 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003186:	f7fd fe1b 	bl	8000dc0 <HAL_GetTick>
 800318a:	4602      	mov	r2, r0
 800318c:	693b      	ldr	r3, [r7, #16]
 800318e:	1ad3      	subs	r3, r2, r3
 8003190:	2b02      	cmp	r3, #2
 8003192:	d901      	bls.n	8003198 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003194:	2303      	movs	r3, #3
 8003196:	e19b      	b.n	80034d0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003198:	4b2d      	ldr	r3, [pc, #180]	; (8003250 <HAL_RCC_OscConfig+0x26c>)
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f003 0302 	and.w	r3, r3, #2
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d0f0      	beq.n	8003186 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031a4:	4b2a      	ldr	r3, [pc, #168]	; (8003250 <HAL_RCC_OscConfig+0x26c>)
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	695b      	ldr	r3, [r3, #20]
 80031b0:	00db      	lsls	r3, r3, #3
 80031b2:	4927      	ldr	r1, [pc, #156]	; (8003250 <HAL_RCC_OscConfig+0x26c>)
 80031b4:	4313      	orrs	r3, r2
 80031b6:	600b      	str	r3, [r1, #0]
 80031b8:	e015      	b.n	80031e6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80031ba:	4b26      	ldr	r3, [pc, #152]	; (8003254 <HAL_RCC_OscConfig+0x270>)
 80031bc:	2200      	movs	r2, #0
 80031be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031c0:	f7fd fdfe 	bl	8000dc0 <HAL_GetTick>
 80031c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80031c6:	e008      	b.n	80031da <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80031c8:	f7fd fdfa 	bl	8000dc0 <HAL_GetTick>
 80031cc:	4602      	mov	r2, r0
 80031ce:	693b      	ldr	r3, [r7, #16]
 80031d0:	1ad3      	subs	r3, r2, r3
 80031d2:	2b02      	cmp	r3, #2
 80031d4:	d901      	bls.n	80031da <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80031d6:	2303      	movs	r3, #3
 80031d8:	e17a      	b.n	80034d0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80031da:	4b1d      	ldr	r3, [pc, #116]	; (8003250 <HAL_RCC_OscConfig+0x26c>)
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f003 0302 	and.w	r3, r3, #2
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d1f0      	bne.n	80031c8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f003 0308 	and.w	r3, r3, #8
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d03a      	beq.n	8003268 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	699b      	ldr	r3, [r3, #24]
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d019      	beq.n	800322e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80031fa:	4b17      	ldr	r3, [pc, #92]	; (8003258 <HAL_RCC_OscConfig+0x274>)
 80031fc:	2201      	movs	r2, #1
 80031fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003200:	f7fd fdde 	bl	8000dc0 <HAL_GetTick>
 8003204:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003206:	e008      	b.n	800321a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003208:	f7fd fdda 	bl	8000dc0 <HAL_GetTick>
 800320c:	4602      	mov	r2, r0
 800320e:	693b      	ldr	r3, [r7, #16]
 8003210:	1ad3      	subs	r3, r2, r3
 8003212:	2b02      	cmp	r3, #2
 8003214:	d901      	bls.n	800321a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003216:	2303      	movs	r3, #3
 8003218:	e15a      	b.n	80034d0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800321a:	4b0d      	ldr	r3, [pc, #52]	; (8003250 <HAL_RCC_OscConfig+0x26c>)
 800321c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800321e:	f003 0302 	and.w	r3, r3, #2
 8003222:	2b00      	cmp	r3, #0
 8003224:	d0f0      	beq.n	8003208 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003226:	2001      	movs	r0, #1
 8003228:	f000 fac6 	bl	80037b8 <RCC_Delay>
 800322c:	e01c      	b.n	8003268 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800322e:	4b0a      	ldr	r3, [pc, #40]	; (8003258 <HAL_RCC_OscConfig+0x274>)
 8003230:	2200      	movs	r2, #0
 8003232:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003234:	f7fd fdc4 	bl	8000dc0 <HAL_GetTick>
 8003238:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800323a:	e00f      	b.n	800325c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800323c:	f7fd fdc0 	bl	8000dc0 <HAL_GetTick>
 8003240:	4602      	mov	r2, r0
 8003242:	693b      	ldr	r3, [r7, #16]
 8003244:	1ad3      	subs	r3, r2, r3
 8003246:	2b02      	cmp	r3, #2
 8003248:	d908      	bls.n	800325c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800324a:	2303      	movs	r3, #3
 800324c:	e140      	b.n	80034d0 <HAL_RCC_OscConfig+0x4ec>
 800324e:	bf00      	nop
 8003250:	40021000 	.word	0x40021000
 8003254:	42420000 	.word	0x42420000
 8003258:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800325c:	4b9e      	ldr	r3, [pc, #632]	; (80034d8 <HAL_RCC_OscConfig+0x4f4>)
 800325e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003260:	f003 0302 	and.w	r3, r3, #2
 8003264:	2b00      	cmp	r3, #0
 8003266:	d1e9      	bne.n	800323c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f003 0304 	and.w	r3, r3, #4
 8003270:	2b00      	cmp	r3, #0
 8003272:	f000 80a6 	beq.w	80033c2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003276:	2300      	movs	r3, #0
 8003278:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800327a:	4b97      	ldr	r3, [pc, #604]	; (80034d8 <HAL_RCC_OscConfig+0x4f4>)
 800327c:	69db      	ldr	r3, [r3, #28]
 800327e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003282:	2b00      	cmp	r3, #0
 8003284:	d10d      	bne.n	80032a2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003286:	4b94      	ldr	r3, [pc, #592]	; (80034d8 <HAL_RCC_OscConfig+0x4f4>)
 8003288:	69db      	ldr	r3, [r3, #28]
 800328a:	4a93      	ldr	r2, [pc, #588]	; (80034d8 <HAL_RCC_OscConfig+0x4f4>)
 800328c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003290:	61d3      	str	r3, [r2, #28]
 8003292:	4b91      	ldr	r3, [pc, #580]	; (80034d8 <HAL_RCC_OscConfig+0x4f4>)
 8003294:	69db      	ldr	r3, [r3, #28]
 8003296:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800329a:	60bb      	str	r3, [r7, #8]
 800329c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800329e:	2301      	movs	r3, #1
 80032a0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032a2:	4b8e      	ldr	r3, [pc, #568]	; (80034dc <HAL_RCC_OscConfig+0x4f8>)
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d118      	bne.n	80032e0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80032ae:	4b8b      	ldr	r3, [pc, #556]	; (80034dc <HAL_RCC_OscConfig+0x4f8>)
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	4a8a      	ldr	r2, [pc, #552]	; (80034dc <HAL_RCC_OscConfig+0x4f8>)
 80032b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80032ba:	f7fd fd81 	bl	8000dc0 <HAL_GetTick>
 80032be:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032c0:	e008      	b.n	80032d4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032c2:	f7fd fd7d 	bl	8000dc0 <HAL_GetTick>
 80032c6:	4602      	mov	r2, r0
 80032c8:	693b      	ldr	r3, [r7, #16]
 80032ca:	1ad3      	subs	r3, r2, r3
 80032cc:	2b64      	cmp	r3, #100	; 0x64
 80032ce:	d901      	bls.n	80032d4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80032d0:	2303      	movs	r3, #3
 80032d2:	e0fd      	b.n	80034d0 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032d4:	4b81      	ldr	r3, [pc, #516]	; (80034dc <HAL_RCC_OscConfig+0x4f8>)
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d0f0      	beq.n	80032c2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	68db      	ldr	r3, [r3, #12]
 80032e4:	2b01      	cmp	r3, #1
 80032e6:	d106      	bne.n	80032f6 <HAL_RCC_OscConfig+0x312>
 80032e8:	4b7b      	ldr	r3, [pc, #492]	; (80034d8 <HAL_RCC_OscConfig+0x4f4>)
 80032ea:	6a1b      	ldr	r3, [r3, #32]
 80032ec:	4a7a      	ldr	r2, [pc, #488]	; (80034d8 <HAL_RCC_OscConfig+0x4f4>)
 80032ee:	f043 0301 	orr.w	r3, r3, #1
 80032f2:	6213      	str	r3, [r2, #32]
 80032f4:	e02d      	b.n	8003352 <HAL_RCC_OscConfig+0x36e>
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	68db      	ldr	r3, [r3, #12]
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d10c      	bne.n	8003318 <HAL_RCC_OscConfig+0x334>
 80032fe:	4b76      	ldr	r3, [pc, #472]	; (80034d8 <HAL_RCC_OscConfig+0x4f4>)
 8003300:	6a1b      	ldr	r3, [r3, #32]
 8003302:	4a75      	ldr	r2, [pc, #468]	; (80034d8 <HAL_RCC_OscConfig+0x4f4>)
 8003304:	f023 0301 	bic.w	r3, r3, #1
 8003308:	6213      	str	r3, [r2, #32]
 800330a:	4b73      	ldr	r3, [pc, #460]	; (80034d8 <HAL_RCC_OscConfig+0x4f4>)
 800330c:	6a1b      	ldr	r3, [r3, #32]
 800330e:	4a72      	ldr	r2, [pc, #456]	; (80034d8 <HAL_RCC_OscConfig+0x4f4>)
 8003310:	f023 0304 	bic.w	r3, r3, #4
 8003314:	6213      	str	r3, [r2, #32]
 8003316:	e01c      	b.n	8003352 <HAL_RCC_OscConfig+0x36e>
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	68db      	ldr	r3, [r3, #12]
 800331c:	2b05      	cmp	r3, #5
 800331e:	d10c      	bne.n	800333a <HAL_RCC_OscConfig+0x356>
 8003320:	4b6d      	ldr	r3, [pc, #436]	; (80034d8 <HAL_RCC_OscConfig+0x4f4>)
 8003322:	6a1b      	ldr	r3, [r3, #32]
 8003324:	4a6c      	ldr	r2, [pc, #432]	; (80034d8 <HAL_RCC_OscConfig+0x4f4>)
 8003326:	f043 0304 	orr.w	r3, r3, #4
 800332a:	6213      	str	r3, [r2, #32]
 800332c:	4b6a      	ldr	r3, [pc, #424]	; (80034d8 <HAL_RCC_OscConfig+0x4f4>)
 800332e:	6a1b      	ldr	r3, [r3, #32]
 8003330:	4a69      	ldr	r2, [pc, #420]	; (80034d8 <HAL_RCC_OscConfig+0x4f4>)
 8003332:	f043 0301 	orr.w	r3, r3, #1
 8003336:	6213      	str	r3, [r2, #32]
 8003338:	e00b      	b.n	8003352 <HAL_RCC_OscConfig+0x36e>
 800333a:	4b67      	ldr	r3, [pc, #412]	; (80034d8 <HAL_RCC_OscConfig+0x4f4>)
 800333c:	6a1b      	ldr	r3, [r3, #32]
 800333e:	4a66      	ldr	r2, [pc, #408]	; (80034d8 <HAL_RCC_OscConfig+0x4f4>)
 8003340:	f023 0301 	bic.w	r3, r3, #1
 8003344:	6213      	str	r3, [r2, #32]
 8003346:	4b64      	ldr	r3, [pc, #400]	; (80034d8 <HAL_RCC_OscConfig+0x4f4>)
 8003348:	6a1b      	ldr	r3, [r3, #32]
 800334a:	4a63      	ldr	r2, [pc, #396]	; (80034d8 <HAL_RCC_OscConfig+0x4f4>)
 800334c:	f023 0304 	bic.w	r3, r3, #4
 8003350:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	68db      	ldr	r3, [r3, #12]
 8003356:	2b00      	cmp	r3, #0
 8003358:	d015      	beq.n	8003386 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800335a:	f7fd fd31 	bl	8000dc0 <HAL_GetTick>
 800335e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003360:	e00a      	b.n	8003378 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003362:	f7fd fd2d 	bl	8000dc0 <HAL_GetTick>
 8003366:	4602      	mov	r2, r0
 8003368:	693b      	ldr	r3, [r7, #16]
 800336a:	1ad3      	subs	r3, r2, r3
 800336c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003370:	4293      	cmp	r3, r2
 8003372:	d901      	bls.n	8003378 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003374:	2303      	movs	r3, #3
 8003376:	e0ab      	b.n	80034d0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003378:	4b57      	ldr	r3, [pc, #348]	; (80034d8 <HAL_RCC_OscConfig+0x4f4>)
 800337a:	6a1b      	ldr	r3, [r3, #32]
 800337c:	f003 0302 	and.w	r3, r3, #2
 8003380:	2b00      	cmp	r3, #0
 8003382:	d0ee      	beq.n	8003362 <HAL_RCC_OscConfig+0x37e>
 8003384:	e014      	b.n	80033b0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003386:	f7fd fd1b 	bl	8000dc0 <HAL_GetTick>
 800338a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800338c:	e00a      	b.n	80033a4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800338e:	f7fd fd17 	bl	8000dc0 <HAL_GetTick>
 8003392:	4602      	mov	r2, r0
 8003394:	693b      	ldr	r3, [r7, #16]
 8003396:	1ad3      	subs	r3, r2, r3
 8003398:	f241 3288 	movw	r2, #5000	; 0x1388
 800339c:	4293      	cmp	r3, r2
 800339e:	d901      	bls.n	80033a4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80033a0:	2303      	movs	r3, #3
 80033a2:	e095      	b.n	80034d0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80033a4:	4b4c      	ldr	r3, [pc, #304]	; (80034d8 <HAL_RCC_OscConfig+0x4f4>)
 80033a6:	6a1b      	ldr	r3, [r3, #32]
 80033a8:	f003 0302 	and.w	r3, r3, #2
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d1ee      	bne.n	800338e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80033b0:	7dfb      	ldrb	r3, [r7, #23]
 80033b2:	2b01      	cmp	r3, #1
 80033b4:	d105      	bne.n	80033c2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80033b6:	4b48      	ldr	r3, [pc, #288]	; (80034d8 <HAL_RCC_OscConfig+0x4f4>)
 80033b8:	69db      	ldr	r3, [r3, #28]
 80033ba:	4a47      	ldr	r2, [pc, #284]	; (80034d8 <HAL_RCC_OscConfig+0x4f4>)
 80033bc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80033c0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	69db      	ldr	r3, [r3, #28]
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	f000 8081 	beq.w	80034ce <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80033cc:	4b42      	ldr	r3, [pc, #264]	; (80034d8 <HAL_RCC_OscConfig+0x4f4>)
 80033ce:	685b      	ldr	r3, [r3, #4]
 80033d0:	f003 030c 	and.w	r3, r3, #12
 80033d4:	2b08      	cmp	r3, #8
 80033d6:	d061      	beq.n	800349c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	69db      	ldr	r3, [r3, #28]
 80033dc:	2b02      	cmp	r3, #2
 80033de:	d146      	bne.n	800346e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033e0:	4b3f      	ldr	r3, [pc, #252]	; (80034e0 <HAL_RCC_OscConfig+0x4fc>)
 80033e2:	2200      	movs	r2, #0
 80033e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033e6:	f7fd fceb 	bl	8000dc0 <HAL_GetTick>
 80033ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80033ec:	e008      	b.n	8003400 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033ee:	f7fd fce7 	bl	8000dc0 <HAL_GetTick>
 80033f2:	4602      	mov	r2, r0
 80033f4:	693b      	ldr	r3, [r7, #16]
 80033f6:	1ad3      	subs	r3, r2, r3
 80033f8:	2b02      	cmp	r3, #2
 80033fa:	d901      	bls.n	8003400 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80033fc:	2303      	movs	r3, #3
 80033fe:	e067      	b.n	80034d0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003400:	4b35      	ldr	r3, [pc, #212]	; (80034d8 <HAL_RCC_OscConfig+0x4f4>)
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003408:	2b00      	cmp	r3, #0
 800340a:	d1f0      	bne.n	80033ee <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	6a1b      	ldr	r3, [r3, #32]
 8003410:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003414:	d108      	bne.n	8003428 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003416:	4b30      	ldr	r3, [pc, #192]	; (80034d8 <HAL_RCC_OscConfig+0x4f4>)
 8003418:	685b      	ldr	r3, [r3, #4]
 800341a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	689b      	ldr	r3, [r3, #8]
 8003422:	492d      	ldr	r1, [pc, #180]	; (80034d8 <HAL_RCC_OscConfig+0x4f4>)
 8003424:	4313      	orrs	r3, r2
 8003426:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003428:	4b2b      	ldr	r3, [pc, #172]	; (80034d8 <HAL_RCC_OscConfig+0x4f4>)
 800342a:	685b      	ldr	r3, [r3, #4]
 800342c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6a19      	ldr	r1, [r3, #32]
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003438:	430b      	orrs	r3, r1
 800343a:	4927      	ldr	r1, [pc, #156]	; (80034d8 <HAL_RCC_OscConfig+0x4f4>)
 800343c:	4313      	orrs	r3, r2
 800343e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003440:	4b27      	ldr	r3, [pc, #156]	; (80034e0 <HAL_RCC_OscConfig+0x4fc>)
 8003442:	2201      	movs	r2, #1
 8003444:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003446:	f7fd fcbb 	bl	8000dc0 <HAL_GetTick>
 800344a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800344c:	e008      	b.n	8003460 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800344e:	f7fd fcb7 	bl	8000dc0 <HAL_GetTick>
 8003452:	4602      	mov	r2, r0
 8003454:	693b      	ldr	r3, [r7, #16]
 8003456:	1ad3      	subs	r3, r2, r3
 8003458:	2b02      	cmp	r3, #2
 800345a:	d901      	bls.n	8003460 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800345c:	2303      	movs	r3, #3
 800345e:	e037      	b.n	80034d0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003460:	4b1d      	ldr	r3, [pc, #116]	; (80034d8 <HAL_RCC_OscConfig+0x4f4>)
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003468:	2b00      	cmp	r3, #0
 800346a:	d0f0      	beq.n	800344e <HAL_RCC_OscConfig+0x46a>
 800346c:	e02f      	b.n	80034ce <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800346e:	4b1c      	ldr	r3, [pc, #112]	; (80034e0 <HAL_RCC_OscConfig+0x4fc>)
 8003470:	2200      	movs	r2, #0
 8003472:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003474:	f7fd fca4 	bl	8000dc0 <HAL_GetTick>
 8003478:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800347a:	e008      	b.n	800348e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800347c:	f7fd fca0 	bl	8000dc0 <HAL_GetTick>
 8003480:	4602      	mov	r2, r0
 8003482:	693b      	ldr	r3, [r7, #16]
 8003484:	1ad3      	subs	r3, r2, r3
 8003486:	2b02      	cmp	r3, #2
 8003488:	d901      	bls.n	800348e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800348a:	2303      	movs	r3, #3
 800348c:	e020      	b.n	80034d0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800348e:	4b12      	ldr	r3, [pc, #72]	; (80034d8 <HAL_RCC_OscConfig+0x4f4>)
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003496:	2b00      	cmp	r3, #0
 8003498:	d1f0      	bne.n	800347c <HAL_RCC_OscConfig+0x498>
 800349a:	e018      	b.n	80034ce <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	69db      	ldr	r3, [r3, #28]
 80034a0:	2b01      	cmp	r3, #1
 80034a2:	d101      	bne.n	80034a8 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80034a4:	2301      	movs	r3, #1
 80034a6:	e013      	b.n	80034d0 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80034a8:	4b0b      	ldr	r3, [pc, #44]	; (80034d8 <HAL_RCC_OscConfig+0x4f4>)
 80034aa:	685b      	ldr	r3, [r3, #4]
 80034ac:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	6a1b      	ldr	r3, [r3, #32]
 80034b8:	429a      	cmp	r2, r3
 80034ba:	d106      	bne.n	80034ca <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034c6:	429a      	cmp	r2, r3
 80034c8:	d001      	beq.n	80034ce <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80034ca:	2301      	movs	r3, #1
 80034cc:	e000      	b.n	80034d0 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80034ce:	2300      	movs	r3, #0
}
 80034d0:	4618      	mov	r0, r3
 80034d2:	3718      	adds	r7, #24
 80034d4:	46bd      	mov	sp, r7
 80034d6:	bd80      	pop	{r7, pc}
 80034d8:	40021000 	.word	0x40021000
 80034dc:	40007000 	.word	0x40007000
 80034e0:	42420060 	.word	0x42420060

080034e4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80034e4:	b580      	push	{r7, lr}
 80034e6:	b084      	sub	sp, #16
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
 80034ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d101      	bne.n	80034f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80034f4:	2301      	movs	r3, #1
 80034f6:	e0d0      	b.n	800369a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80034f8:	4b6a      	ldr	r3, [pc, #424]	; (80036a4 <HAL_RCC_ClockConfig+0x1c0>)
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f003 0307 	and.w	r3, r3, #7
 8003500:	683a      	ldr	r2, [r7, #0]
 8003502:	429a      	cmp	r2, r3
 8003504:	d910      	bls.n	8003528 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003506:	4b67      	ldr	r3, [pc, #412]	; (80036a4 <HAL_RCC_ClockConfig+0x1c0>)
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f023 0207 	bic.w	r2, r3, #7
 800350e:	4965      	ldr	r1, [pc, #404]	; (80036a4 <HAL_RCC_ClockConfig+0x1c0>)
 8003510:	683b      	ldr	r3, [r7, #0]
 8003512:	4313      	orrs	r3, r2
 8003514:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003516:	4b63      	ldr	r3, [pc, #396]	; (80036a4 <HAL_RCC_ClockConfig+0x1c0>)
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f003 0307 	and.w	r3, r3, #7
 800351e:	683a      	ldr	r2, [r7, #0]
 8003520:	429a      	cmp	r2, r3
 8003522:	d001      	beq.n	8003528 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003524:	2301      	movs	r3, #1
 8003526:	e0b8      	b.n	800369a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f003 0302 	and.w	r3, r3, #2
 8003530:	2b00      	cmp	r3, #0
 8003532:	d020      	beq.n	8003576 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f003 0304 	and.w	r3, r3, #4
 800353c:	2b00      	cmp	r3, #0
 800353e:	d005      	beq.n	800354c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003540:	4b59      	ldr	r3, [pc, #356]	; (80036a8 <HAL_RCC_ClockConfig+0x1c4>)
 8003542:	685b      	ldr	r3, [r3, #4]
 8003544:	4a58      	ldr	r2, [pc, #352]	; (80036a8 <HAL_RCC_ClockConfig+0x1c4>)
 8003546:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800354a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f003 0308 	and.w	r3, r3, #8
 8003554:	2b00      	cmp	r3, #0
 8003556:	d005      	beq.n	8003564 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003558:	4b53      	ldr	r3, [pc, #332]	; (80036a8 <HAL_RCC_ClockConfig+0x1c4>)
 800355a:	685b      	ldr	r3, [r3, #4]
 800355c:	4a52      	ldr	r2, [pc, #328]	; (80036a8 <HAL_RCC_ClockConfig+0x1c4>)
 800355e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003562:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003564:	4b50      	ldr	r3, [pc, #320]	; (80036a8 <HAL_RCC_ClockConfig+0x1c4>)
 8003566:	685b      	ldr	r3, [r3, #4]
 8003568:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	689b      	ldr	r3, [r3, #8]
 8003570:	494d      	ldr	r1, [pc, #308]	; (80036a8 <HAL_RCC_ClockConfig+0x1c4>)
 8003572:	4313      	orrs	r3, r2
 8003574:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f003 0301 	and.w	r3, r3, #1
 800357e:	2b00      	cmp	r3, #0
 8003580:	d040      	beq.n	8003604 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	685b      	ldr	r3, [r3, #4]
 8003586:	2b01      	cmp	r3, #1
 8003588:	d107      	bne.n	800359a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800358a:	4b47      	ldr	r3, [pc, #284]	; (80036a8 <HAL_RCC_ClockConfig+0x1c4>)
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003592:	2b00      	cmp	r3, #0
 8003594:	d115      	bne.n	80035c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003596:	2301      	movs	r3, #1
 8003598:	e07f      	b.n	800369a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	685b      	ldr	r3, [r3, #4]
 800359e:	2b02      	cmp	r3, #2
 80035a0:	d107      	bne.n	80035b2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035a2:	4b41      	ldr	r3, [pc, #260]	; (80036a8 <HAL_RCC_ClockConfig+0x1c4>)
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d109      	bne.n	80035c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035ae:	2301      	movs	r3, #1
 80035b0:	e073      	b.n	800369a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035b2:	4b3d      	ldr	r3, [pc, #244]	; (80036a8 <HAL_RCC_ClockConfig+0x1c4>)
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f003 0302 	and.w	r3, r3, #2
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d101      	bne.n	80035c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035be:	2301      	movs	r3, #1
 80035c0:	e06b      	b.n	800369a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80035c2:	4b39      	ldr	r3, [pc, #228]	; (80036a8 <HAL_RCC_ClockConfig+0x1c4>)
 80035c4:	685b      	ldr	r3, [r3, #4]
 80035c6:	f023 0203 	bic.w	r2, r3, #3
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	685b      	ldr	r3, [r3, #4]
 80035ce:	4936      	ldr	r1, [pc, #216]	; (80036a8 <HAL_RCC_ClockConfig+0x1c4>)
 80035d0:	4313      	orrs	r3, r2
 80035d2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80035d4:	f7fd fbf4 	bl	8000dc0 <HAL_GetTick>
 80035d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035da:	e00a      	b.n	80035f2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80035dc:	f7fd fbf0 	bl	8000dc0 <HAL_GetTick>
 80035e0:	4602      	mov	r2, r0
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	1ad3      	subs	r3, r2, r3
 80035e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80035ea:	4293      	cmp	r3, r2
 80035ec:	d901      	bls.n	80035f2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80035ee:	2303      	movs	r3, #3
 80035f0:	e053      	b.n	800369a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035f2:	4b2d      	ldr	r3, [pc, #180]	; (80036a8 <HAL_RCC_ClockConfig+0x1c4>)
 80035f4:	685b      	ldr	r3, [r3, #4]
 80035f6:	f003 020c 	and.w	r2, r3, #12
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	685b      	ldr	r3, [r3, #4]
 80035fe:	009b      	lsls	r3, r3, #2
 8003600:	429a      	cmp	r2, r3
 8003602:	d1eb      	bne.n	80035dc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003604:	4b27      	ldr	r3, [pc, #156]	; (80036a4 <HAL_RCC_ClockConfig+0x1c0>)
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f003 0307 	and.w	r3, r3, #7
 800360c:	683a      	ldr	r2, [r7, #0]
 800360e:	429a      	cmp	r2, r3
 8003610:	d210      	bcs.n	8003634 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003612:	4b24      	ldr	r3, [pc, #144]	; (80036a4 <HAL_RCC_ClockConfig+0x1c0>)
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f023 0207 	bic.w	r2, r3, #7
 800361a:	4922      	ldr	r1, [pc, #136]	; (80036a4 <HAL_RCC_ClockConfig+0x1c0>)
 800361c:	683b      	ldr	r3, [r7, #0]
 800361e:	4313      	orrs	r3, r2
 8003620:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003622:	4b20      	ldr	r3, [pc, #128]	; (80036a4 <HAL_RCC_ClockConfig+0x1c0>)
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f003 0307 	and.w	r3, r3, #7
 800362a:	683a      	ldr	r2, [r7, #0]
 800362c:	429a      	cmp	r2, r3
 800362e:	d001      	beq.n	8003634 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003630:	2301      	movs	r3, #1
 8003632:	e032      	b.n	800369a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f003 0304 	and.w	r3, r3, #4
 800363c:	2b00      	cmp	r3, #0
 800363e:	d008      	beq.n	8003652 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003640:	4b19      	ldr	r3, [pc, #100]	; (80036a8 <HAL_RCC_ClockConfig+0x1c4>)
 8003642:	685b      	ldr	r3, [r3, #4]
 8003644:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	68db      	ldr	r3, [r3, #12]
 800364c:	4916      	ldr	r1, [pc, #88]	; (80036a8 <HAL_RCC_ClockConfig+0x1c4>)
 800364e:	4313      	orrs	r3, r2
 8003650:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f003 0308 	and.w	r3, r3, #8
 800365a:	2b00      	cmp	r3, #0
 800365c:	d009      	beq.n	8003672 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800365e:	4b12      	ldr	r3, [pc, #72]	; (80036a8 <HAL_RCC_ClockConfig+0x1c4>)
 8003660:	685b      	ldr	r3, [r3, #4]
 8003662:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	691b      	ldr	r3, [r3, #16]
 800366a:	00db      	lsls	r3, r3, #3
 800366c:	490e      	ldr	r1, [pc, #56]	; (80036a8 <HAL_RCC_ClockConfig+0x1c4>)
 800366e:	4313      	orrs	r3, r2
 8003670:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003672:	f000 f821 	bl	80036b8 <HAL_RCC_GetSysClockFreq>
 8003676:	4601      	mov	r1, r0
 8003678:	4b0b      	ldr	r3, [pc, #44]	; (80036a8 <HAL_RCC_ClockConfig+0x1c4>)
 800367a:	685b      	ldr	r3, [r3, #4]
 800367c:	091b      	lsrs	r3, r3, #4
 800367e:	f003 030f 	and.w	r3, r3, #15
 8003682:	4a0a      	ldr	r2, [pc, #40]	; (80036ac <HAL_RCC_ClockConfig+0x1c8>)
 8003684:	5cd3      	ldrb	r3, [r2, r3]
 8003686:	fa21 f303 	lsr.w	r3, r1, r3
 800368a:	4a09      	ldr	r2, [pc, #36]	; (80036b0 <HAL_RCC_ClockConfig+0x1cc>)
 800368c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800368e:	4b09      	ldr	r3, [pc, #36]	; (80036b4 <HAL_RCC_ClockConfig+0x1d0>)
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	4618      	mov	r0, r3
 8003694:	f7fd fb52 	bl	8000d3c <HAL_InitTick>

  return HAL_OK;
 8003698:	2300      	movs	r3, #0
}
 800369a:	4618      	mov	r0, r3
 800369c:	3710      	adds	r7, #16
 800369e:	46bd      	mov	sp, r7
 80036a0:	bd80      	pop	{r7, pc}
 80036a2:	bf00      	nop
 80036a4:	40022000 	.word	0x40022000
 80036a8:	40021000 	.word	0x40021000
 80036ac:	0800741c 	.word	0x0800741c
 80036b0:	20000004 	.word	0x20000004
 80036b4:	20000008 	.word	0x20000008

080036b8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80036b8:	b490      	push	{r4, r7}
 80036ba:	b08a      	sub	sp, #40	; 0x28
 80036bc:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80036be:	4b2a      	ldr	r3, [pc, #168]	; (8003768 <HAL_RCC_GetSysClockFreq+0xb0>)
 80036c0:	1d3c      	adds	r4, r7, #4
 80036c2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80036c4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80036c8:	4b28      	ldr	r3, [pc, #160]	; (800376c <HAL_RCC_GetSysClockFreq+0xb4>)
 80036ca:	881b      	ldrh	r3, [r3, #0]
 80036cc:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80036ce:	2300      	movs	r3, #0
 80036d0:	61fb      	str	r3, [r7, #28]
 80036d2:	2300      	movs	r3, #0
 80036d4:	61bb      	str	r3, [r7, #24]
 80036d6:	2300      	movs	r3, #0
 80036d8:	627b      	str	r3, [r7, #36]	; 0x24
 80036da:	2300      	movs	r3, #0
 80036dc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80036de:	2300      	movs	r3, #0
 80036e0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80036e2:	4b23      	ldr	r3, [pc, #140]	; (8003770 <HAL_RCC_GetSysClockFreq+0xb8>)
 80036e4:	685b      	ldr	r3, [r3, #4]
 80036e6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80036e8:	69fb      	ldr	r3, [r7, #28]
 80036ea:	f003 030c 	and.w	r3, r3, #12
 80036ee:	2b04      	cmp	r3, #4
 80036f0:	d002      	beq.n	80036f8 <HAL_RCC_GetSysClockFreq+0x40>
 80036f2:	2b08      	cmp	r3, #8
 80036f4:	d003      	beq.n	80036fe <HAL_RCC_GetSysClockFreq+0x46>
 80036f6:	e02d      	b.n	8003754 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80036f8:	4b1e      	ldr	r3, [pc, #120]	; (8003774 <HAL_RCC_GetSysClockFreq+0xbc>)
 80036fa:	623b      	str	r3, [r7, #32]
      break;
 80036fc:	e02d      	b.n	800375a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80036fe:	69fb      	ldr	r3, [r7, #28]
 8003700:	0c9b      	lsrs	r3, r3, #18
 8003702:	f003 030f 	and.w	r3, r3, #15
 8003706:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800370a:	4413      	add	r3, r2
 800370c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003710:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003712:	69fb      	ldr	r3, [r7, #28]
 8003714:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003718:	2b00      	cmp	r3, #0
 800371a:	d013      	beq.n	8003744 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800371c:	4b14      	ldr	r3, [pc, #80]	; (8003770 <HAL_RCC_GetSysClockFreq+0xb8>)
 800371e:	685b      	ldr	r3, [r3, #4]
 8003720:	0c5b      	lsrs	r3, r3, #17
 8003722:	f003 0301 	and.w	r3, r3, #1
 8003726:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800372a:	4413      	add	r3, r2
 800372c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003730:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003732:	697b      	ldr	r3, [r7, #20]
 8003734:	4a0f      	ldr	r2, [pc, #60]	; (8003774 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003736:	fb02 f203 	mul.w	r2, r2, r3
 800373a:	69bb      	ldr	r3, [r7, #24]
 800373c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003740:	627b      	str	r3, [r7, #36]	; 0x24
 8003742:	e004      	b.n	800374e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003744:	697b      	ldr	r3, [r7, #20]
 8003746:	4a0c      	ldr	r2, [pc, #48]	; (8003778 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003748:	fb02 f303 	mul.w	r3, r2, r3
 800374c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800374e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003750:	623b      	str	r3, [r7, #32]
      break;
 8003752:	e002      	b.n	800375a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003754:	4b07      	ldr	r3, [pc, #28]	; (8003774 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003756:	623b      	str	r3, [r7, #32]
      break;
 8003758:	bf00      	nop
    }
  }
  return sysclockfreq;
 800375a:	6a3b      	ldr	r3, [r7, #32]
}
 800375c:	4618      	mov	r0, r3
 800375e:	3728      	adds	r7, #40	; 0x28
 8003760:	46bd      	mov	sp, r7
 8003762:	bc90      	pop	{r4, r7}
 8003764:	4770      	bx	lr
 8003766:	bf00      	nop
 8003768:	080073ac 	.word	0x080073ac
 800376c:	080073bc 	.word	0x080073bc
 8003770:	40021000 	.word	0x40021000
 8003774:	007a1200 	.word	0x007a1200
 8003778:	003d0900 	.word	0x003d0900

0800377c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800377c:	b480      	push	{r7}
 800377e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003780:	4b02      	ldr	r3, [pc, #8]	; (800378c <HAL_RCC_GetHCLKFreq+0x10>)
 8003782:	681b      	ldr	r3, [r3, #0]
}
 8003784:	4618      	mov	r0, r3
 8003786:	46bd      	mov	sp, r7
 8003788:	bc80      	pop	{r7}
 800378a:	4770      	bx	lr
 800378c:	20000004 	.word	0x20000004

08003790 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003790:	b580      	push	{r7, lr}
 8003792:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003794:	f7ff fff2 	bl	800377c <HAL_RCC_GetHCLKFreq>
 8003798:	4601      	mov	r1, r0
 800379a:	4b05      	ldr	r3, [pc, #20]	; (80037b0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800379c:	685b      	ldr	r3, [r3, #4]
 800379e:	0adb      	lsrs	r3, r3, #11
 80037a0:	f003 0307 	and.w	r3, r3, #7
 80037a4:	4a03      	ldr	r2, [pc, #12]	; (80037b4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80037a6:	5cd3      	ldrb	r3, [r2, r3]
 80037a8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80037ac:	4618      	mov	r0, r3
 80037ae:	bd80      	pop	{r7, pc}
 80037b0:	40021000 	.word	0x40021000
 80037b4:	0800742c 	.word	0x0800742c

080037b8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80037b8:	b480      	push	{r7}
 80037ba:	b085      	sub	sp, #20
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80037c0:	4b0a      	ldr	r3, [pc, #40]	; (80037ec <RCC_Delay+0x34>)
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	4a0a      	ldr	r2, [pc, #40]	; (80037f0 <RCC_Delay+0x38>)
 80037c6:	fba2 2303 	umull	r2, r3, r2, r3
 80037ca:	0a5b      	lsrs	r3, r3, #9
 80037cc:	687a      	ldr	r2, [r7, #4]
 80037ce:	fb02 f303 	mul.w	r3, r2, r3
 80037d2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80037d4:	bf00      	nop
  }
  while (Delay --);
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	1e5a      	subs	r2, r3, #1
 80037da:	60fa      	str	r2, [r7, #12]
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d1f9      	bne.n	80037d4 <RCC_Delay+0x1c>
}
 80037e0:	bf00      	nop
 80037e2:	3714      	adds	r7, #20
 80037e4:	46bd      	mov	sp, r7
 80037e6:	bc80      	pop	{r7}
 80037e8:	4770      	bx	lr
 80037ea:	bf00      	nop
 80037ec:	20000004 	.word	0x20000004
 80037f0:	10624dd3 	.word	0x10624dd3

080037f4 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80037f4:	b580      	push	{r7, lr}
 80037f6:	b086      	sub	sp, #24
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80037fc:	2300      	movs	r3, #0
 80037fe:	613b      	str	r3, [r7, #16]
 8003800:	2300      	movs	r3, #0
 8003802:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f003 0301 	and.w	r3, r3, #1
 800380c:	2b00      	cmp	r3, #0
 800380e:	d07d      	beq.n	800390c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8003810:	2300      	movs	r3, #0
 8003812:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003814:	4b4f      	ldr	r3, [pc, #316]	; (8003954 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003816:	69db      	ldr	r3, [r3, #28]
 8003818:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800381c:	2b00      	cmp	r3, #0
 800381e:	d10d      	bne.n	800383c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003820:	4b4c      	ldr	r3, [pc, #304]	; (8003954 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003822:	69db      	ldr	r3, [r3, #28]
 8003824:	4a4b      	ldr	r2, [pc, #300]	; (8003954 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003826:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800382a:	61d3      	str	r3, [r2, #28]
 800382c:	4b49      	ldr	r3, [pc, #292]	; (8003954 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800382e:	69db      	ldr	r3, [r3, #28]
 8003830:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003834:	60bb      	str	r3, [r7, #8]
 8003836:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003838:	2301      	movs	r3, #1
 800383a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800383c:	4b46      	ldr	r3, [pc, #280]	; (8003958 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003844:	2b00      	cmp	r3, #0
 8003846:	d118      	bne.n	800387a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003848:	4b43      	ldr	r3, [pc, #268]	; (8003958 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	4a42      	ldr	r2, [pc, #264]	; (8003958 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800384e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003852:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003854:	f7fd fab4 	bl	8000dc0 <HAL_GetTick>
 8003858:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800385a:	e008      	b.n	800386e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800385c:	f7fd fab0 	bl	8000dc0 <HAL_GetTick>
 8003860:	4602      	mov	r2, r0
 8003862:	693b      	ldr	r3, [r7, #16]
 8003864:	1ad3      	subs	r3, r2, r3
 8003866:	2b64      	cmp	r3, #100	; 0x64
 8003868:	d901      	bls.n	800386e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800386a:	2303      	movs	r3, #3
 800386c:	e06d      	b.n	800394a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800386e:	4b3a      	ldr	r3, [pc, #232]	; (8003958 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003876:	2b00      	cmp	r3, #0
 8003878:	d0f0      	beq.n	800385c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800387a:	4b36      	ldr	r3, [pc, #216]	; (8003954 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800387c:	6a1b      	ldr	r3, [r3, #32]
 800387e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003882:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	2b00      	cmp	r3, #0
 8003888:	d02e      	beq.n	80038e8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	685b      	ldr	r3, [r3, #4]
 800388e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003892:	68fa      	ldr	r2, [r7, #12]
 8003894:	429a      	cmp	r2, r3
 8003896:	d027      	beq.n	80038e8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003898:	4b2e      	ldr	r3, [pc, #184]	; (8003954 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800389a:	6a1b      	ldr	r3, [r3, #32]
 800389c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80038a0:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80038a2:	4b2e      	ldr	r3, [pc, #184]	; (800395c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80038a4:	2201      	movs	r2, #1
 80038a6:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80038a8:	4b2c      	ldr	r3, [pc, #176]	; (800395c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80038aa:	2200      	movs	r2, #0
 80038ac:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80038ae:	4a29      	ldr	r2, [pc, #164]	; (8003954 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	f003 0301 	and.w	r3, r3, #1
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d014      	beq.n	80038e8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038be:	f7fd fa7f 	bl	8000dc0 <HAL_GetTick>
 80038c2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038c4:	e00a      	b.n	80038dc <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038c6:	f7fd fa7b 	bl	8000dc0 <HAL_GetTick>
 80038ca:	4602      	mov	r2, r0
 80038cc:	693b      	ldr	r3, [r7, #16]
 80038ce:	1ad3      	subs	r3, r2, r3
 80038d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80038d4:	4293      	cmp	r3, r2
 80038d6:	d901      	bls.n	80038dc <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80038d8:	2303      	movs	r3, #3
 80038da:	e036      	b.n	800394a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038dc:	4b1d      	ldr	r3, [pc, #116]	; (8003954 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038de:	6a1b      	ldr	r3, [r3, #32]
 80038e0:	f003 0302 	and.w	r3, r3, #2
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d0ee      	beq.n	80038c6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80038e8:	4b1a      	ldr	r3, [pc, #104]	; (8003954 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038ea:	6a1b      	ldr	r3, [r3, #32]
 80038ec:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	685b      	ldr	r3, [r3, #4]
 80038f4:	4917      	ldr	r1, [pc, #92]	; (8003954 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038f6:	4313      	orrs	r3, r2
 80038f8:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80038fa:	7dfb      	ldrb	r3, [r7, #23]
 80038fc:	2b01      	cmp	r3, #1
 80038fe:	d105      	bne.n	800390c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003900:	4b14      	ldr	r3, [pc, #80]	; (8003954 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003902:	69db      	ldr	r3, [r3, #28]
 8003904:	4a13      	ldr	r2, [pc, #76]	; (8003954 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003906:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800390a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f003 0302 	and.w	r3, r3, #2
 8003914:	2b00      	cmp	r3, #0
 8003916:	d008      	beq.n	800392a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003918:	4b0e      	ldr	r3, [pc, #56]	; (8003954 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800391a:	685b      	ldr	r3, [r3, #4]
 800391c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	689b      	ldr	r3, [r3, #8]
 8003924:	490b      	ldr	r1, [pc, #44]	; (8003954 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003926:	4313      	orrs	r3, r2
 8003928:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f003 0310 	and.w	r3, r3, #16
 8003932:	2b00      	cmp	r3, #0
 8003934:	d008      	beq.n	8003948 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003936:	4b07      	ldr	r3, [pc, #28]	; (8003954 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003938:	685b      	ldr	r3, [r3, #4]
 800393a:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	68db      	ldr	r3, [r3, #12]
 8003942:	4904      	ldr	r1, [pc, #16]	; (8003954 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003944:	4313      	orrs	r3, r2
 8003946:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003948:	2300      	movs	r3, #0
}
 800394a:	4618      	mov	r0, r3
 800394c:	3718      	adds	r7, #24
 800394e:	46bd      	mov	sp, r7
 8003950:	bd80      	pop	{r7, pc}
 8003952:	bf00      	nop
 8003954:	40021000 	.word	0x40021000
 8003958:	40007000 	.word	0x40007000
 800395c:	42420440 	.word	0x42420440

08003960 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003960:	b590      	push	{r4, r7, lr}
 8003962:	b08d      	sub	sp, #52	; 0x34
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003968:	4b55      	ldr	r3, [pc, #340]	; (8003ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 800396a:	f107 040c 	add.w	r4, r7, #12
 800396e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003970:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003974:	4b53      	ldr	r3, [pc, #332]	; (8003ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8003976:	881b      	ldrh	r3, [r3, #0]
 8003978:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 800397a:	2300      	movs	r3, #0
 800397c:	627b      	str	r3, [r7, #36]	; 0x24
 800397e:	2300      	movs	r3, #0
 8003980:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003982:	2300      	movs	r3, #0
 8003984:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8003986:	2300      	movs	r3, #0
 8003988:	61fb      	str	r3, [r7, #28]
 800398a:	2300      	movs	r3, #0
 800398c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	2b02      	cmp	r3, #2
 8003992:	d07f      	beq.n	8003a94 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 8003994:	2b10      	cmp	r3, #16
 8003996:	d002      	beq.n	800399e <HAL_RCCEx_GetPeriphCLKFreq+0x3e>
 8003998:	2b01      	cmp	r3, #1
 800399a:	d048      	beq.n	8003a2e <HAL_RCCEx_GetPeriphCLKFreq+0xce>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 800399c:	e08b      	b.n	8003ab6 <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      temp_reg = RCC->CFGR;
 800399e:	4b4a      	ldr	r3, [pc, #296]	; (8003ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80039a0:	685b      	ldr	r3, [r3, #4]
 80039a2:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 80039a4:	4b48      	ldr	r3, [pc, #288]	; (8003ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d07f      	beq.n	8003ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80039b0:	69fb      	ldr	r3, [r7, #28]
 80039b2:	0c9b      	lsrs	r3, r3, #18
 80039b4:	f003 030f 	and.w	r3, r3, #15
 80039b8:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80039bc:	4413      	add	r3, r2
 80039be:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80039c2:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80039c4:	69fb      	ldr	r3, [r7, #28]
 80039c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d018      	beq.n	8003a00 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80039ce:	4b3e      	ldr	r3, [pc, #248]	; (8003ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80039d0:	685b      	ldr	r3, [r3, #4]
 80039d2:	0c5b      	lsrs	r3, r3, #17
 80039d4:	f003 0301 	and.w	r3, r3, #1
 80039d8:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80039dc:	4413      	add	r3, r2
 80039de:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80039e2:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80039e4:	69fb      	ldr	r3, [r7, #28]
 80039e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d00d      	beq.n	8003a0a <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 80039ee:	4a37      	ldr	r2, [pc, #220]	; (8003acc <HAL_RCCEx_GetPeriphCLKFreq+0x16c>)
 80039f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039f2:	fbb2 f2f3 	udiv	r2, r2, r3
 80039f6:	6a3b      	ldr	r3, [r7, #32]
 80039f8:	fb02 f303 	mul.w	r3, r2, r3
 80039fc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80039fe:	e004      	b.n	8003a0a <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003a00:	6a3b      	ldr	r3, [r7, #32]
 8003a02:	4a33      	ldr	r2, [pc, #204]	; (8003ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8003a04:	fb02 f303 	mul.w	r3, r2, r3
 8003a08:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8003a0a:	4b2f      	ldr	r3, [pc, #188]	; (8003ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8003a0c:	685b      	ldr	r3, [r3, #4]
 8003a0e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a12:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003a16:	d102      	bne.n	8003a1e <HAL_RCCEx_GetPeriphCLKFreq+0xbe>
          frequency = pllclk;
 8003a18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a1a:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8003a1c:	e048      	b.n	8003ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
          frequency = (pllclk * 2) / 3;
 8003a1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a20:	005b      	lsls	r3, r3, #1
 8003a22:	4a2c      	ldr	r2, [pc, #176]	; (8003ad4 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 8003a24:	fba2 2303 	umull	r2, r3, r2, r3
 8003a28:	085b      	lsrs	r3, r3, #1
 8003a2a:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8003a2c:	e040      	b.n	8003ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
      temp_reg = RCC->BDCR;
 8003a2e:	4b26      	ldr	r3, [pc, #152]	; (8003ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8003a30:	6a1b      	ldr	r3, [r3, #32]
 8003a32:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8003a34:	69fb      	ldr	r3, [r7, #28]
 8003a36:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a3a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003a3e:	d108      	bne.n	8003a52 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
 8003a40:	69fb      	ldr	r3, [r7, #28]
 8003a42:	f003 0302 	and.w	r3, r3, #2
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d003      	beq.n	8003a52 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
        frequency = LSE_VALUE;
 8003a4a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003a4e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003a50:	e01f      	b.n	8003a92 <HAL_RCCEx_GetPeriphCLKFreq+0x132>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8003a52:	69fb      	ldr	r3, [r7, #28]
 8003a54:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a58:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003a5c:	d109      	bne.n	8003a72 <HAL_RCCEx_GetPeriphCLKFreq+0x112>
 8003a5e:	4b1a      	ldr	r3, [pc, #104]	; (8003ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8003a60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a62:	f003 0302 	and.w	r3, r3, #2
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d003      	beq.n	8003a72 <HAL_RCCEx_GetPeriphCLKFreq+0x112>
        frequency = LSI_VALUE;
 8003a6a:	f649 4340 	movw	r3, #40000	; 0x9c40
 8003a6e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003a70:	e00f      	b.n	8003a92 <HAL_RCCEx_GetPeriphCLKFreq+0x132>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8003a72:	69fb      	ldr	r3, [r7, #28]
 8003a74:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a78:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003a7c:	d11a      	bne.n	8003ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 8003a7e:	4b12      	ldr	r3, [pc, #72]	; (8003ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d014      	beq.n	8003ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
        frequency = HSE_VALUE / 128U;
 8003a8a:	f24f 4324 	movw	r3, #62500	; 0xf424
 8003a8e:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8003a90:	e010      	b.n	8003ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 8003a92:	e00f      	b.n	8003ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8003a94:	f7ff fe7c 	bl	8003790 <HAL_RCC_GetPCLK2Freq>
 8003a98:	4602      	mov	r2, r0
 8003a9a:	4b0b      	ldr	r3, [pc, #44]	; (8003ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8003a9c:	685b      	ldr	r3, [r3, #4]
 8003a9e:	0b9b      	lsrs	r3, r3, #14
 8003aa0:	f003 0303 	and.w	r3, r3, #3
 8003aa4:	3301      	adds	r3, #1
 8003aa6:	005b      	lsls	r3, r3, #1
 8003aa8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003aac:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8003aae:	e002      	b.n	8003ab6 <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      break;
 8003ab0:	bf00      	nop
 8003ab2:	e000      	b.n	8003ab6 <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      break;
 8003ab4:	bf00      	nop
    }
  }
  return (frequency);
 8003ab6:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8003ab8:	4618      	mov	r0, r3
 8003aba:	3734      	adds	r7, #52	; 0x34
 8003abc:	46bd      	mov	sp, r7
 8003abe:	bd90      	pop	{r4, r7, pc}
 8003ac0:	080073c0 	.word	0x080073c0
 8003ac4:	080073d0 	.word	0x080073d0
 8003ac8:	40021000 	.word	0x40021000
 8003acc:	007a1200 	.word	0x007a1200
 8003ad0:	003d0900 	.word	0x003d0900
 8003ad4:	aaaaaaab 	.word	0xaaaaaaab

08003ad8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	b082      	sub	sp, #8
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d101      	bne.n	8003aea <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003ae6:	2301      	movs	r3, #1
 8003ae8:	e053      	b.n	8003b92 <HAL_SPI_Init+0xba>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	2200      	movs	r2, #0
 8003aee:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003af6:	b2db      	uxtb	r3, r3
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d106      	bne.n	8003b0a <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	2200      	movs	r2, #0
 8003b00:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003b04:	6878      	ldr	r0, [r7, #4]
 8003b06:	f7fc ffff 	bl	8000b08 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	2202      	movs	r2, #2
 8003b0e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	681a      	ldr	r2, [r3, #0]
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003b20:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	685a      	ldr	r2, [r3, #4]
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	689b      	ldr	r3, [r3, #8]
 8003b2a:	431a      	orrs	r2, r3
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	68db      	ldr	r3, [r3, #12]
 8003b30:	431a      	orrs	r2, r3
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	691b      	ldr	r3, [r3, #16]
 8003b36:	431a      	orrs	r2, r3
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	695b      	ldr	r3, [r3, #20]
 8003b3c:	431a      	orrs	r2, r3
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	699b      	ldr	r3, [r3, #24]
 8003b42:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003b46:	431a      	orrs	r2, r3
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	69db      	ldr	r3, [r3, #28]
 8003b4c:	431a      	orrs	r2, r3
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	6a1b      	ldr	r3, [r3, #32]
 8003b52:	ea42 0103 	orr.w	r1, r2, r3
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	430a      	orrs	r2, r1
 8003b60:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	699b      	ldr	r3, [r3, #24]
 8003b66:	0c1a      	lsrs	r2, r3, #16
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f002 0204 	and.w	r2, r2, #4
 8003b70:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	69da      	ldr	r2, [r3, #28]
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003b80:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	2200      	movs	r2, #0
 8003b86:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	2201      	movs	r2, #1
 8003b8c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003b90:	2300      	movs	r3, #0
}
 8003b92:	4618      	mov	r0, r3
 8003b94:	3708      	adds	r7, #8
 8003b96:	46bd      	mov	sp, r7
 8003b98:	bd80      	pop	{r7, pc}

08003b9a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b9a:	b580      	push	{r7, lr}
 8003b9c:	b088      	sub	sp, #32
 8003b9e:	af00      	add	r7, sp, #0
 8003ba0:	60f8      	str	r0, [r7, #12]
 8003ba2:	60b9      	str	r1, [r7, #8]
 8003ba4:	603b      	str	r3, [r7, #0]
 8003ba6:	4613      	mov	r3, r2
 8003ba8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003baa:	2300      	movs	r3, #0
 8003bac:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003bb4:	2b01      	cmp	r3, #1
 8003bb6:	d101      	bne.n	8003bbc <HAL_SPI_Transmit+0x22>
 8003bb8:	2302      	movs	r3, #2
 8003bba:	e11e      	b.n	8003dfa <HAL_SPI_Transmit+0x260>
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	2201      	movs	r2, #1
 8003bc0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003bc4:	f7fd f8fc 	bl	8000dc0 <HAL_GetTick>
 8003bc8:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003bca:	88fb      	ldrh	r3, [r7, #6]
 8003bcc:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003bd4:	b2db      	uxtb	r3, r3
 8003bd6:	2b01      	cmp	r3, #1
 8003bd8:	d002      	beq.n	8003be0 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003bda:	2302      	movs	r3, #2
 8003bdc:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003bde:	e103      	b.n	8003de8 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8003be0:	68bb      	ldr	r3, [r7, #8]
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d002      	beq.n	8003bec <HAL_SPI_Transmit+0x52>
 8003be6:	88fb      	ldrh	r3, [r7, #6]
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d102      	bne.n	8003bf2 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003bec:	2301      	movs	r3, #1
 8003bee:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003bf0:	e0fa      	b.n	8003de8 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	2203      	movs	r2, #3
 8003bf6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	68ba      	ldr	r2, [r7, #8]
 8003c04:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	88fa      	ldrh	r2, [r7, #6]
 8003c0a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	88fa      	ldrh	r2, [r7, #6]
 8003c10:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	2200      	movs	r2, #0
 8003c16:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	2200      	movs	r2, #0
 8003c22:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	2200      	movs	r2, #0
 8003c28:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	689b      	ldr	r3, [r3, #8]
 8003c34:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c38:	d107      	bne.n	8003c4a <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	681a      	ldr	r2, [r3, #0]
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003c48:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c54:	2b40      	cmp	r3, #64	; 0x40
 8003c56:	d007      	beq.n	8003c68 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	681a      	ldr	r2, [r3, #0]
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003c66:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	68db      	ldr	r3, [r3, #12]
 8003c6c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003c70:	d14b      	bne.n	8003d0a <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	685b      	ldr	r3, [r3, #4]
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d002      	beq.n	8003c80 <HAL_SPI_Transmit+0xe6>
 8003c7a:	8afb      	ldrh	r3, [r7, #22]
 8003c7c:	2b01      	cmp	r3, #1
 8003c7e:	d13e      	bne.n	8003cfe <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c84:	881a      	ldrh	r2, [r3, #0]
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c90:	1c9a      	adds	r2, r3, #2
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003c9a:	b29b      	uxth	r3, r3
 8003c9c:	3b01      	subs	r3, #1
 8003c9e:	b29a      	uxth	r2, r3
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003ca4:	e02b      	b.n	8003cfe <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	689b      	ldr	r3, [r3, #8]
 8003cac:	f003 0302 	and.w	r3, r3, #2
 8003cb0:	2b02      	cmp	r3, #2
 8003cb2:	d112      	bne.n	8003cda <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cb8:	881a      	ldrh	r2, [r3, #0]
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cc4:	1c9a      	adds	r2, r3, #2
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003cce:	b29b      	uxth	r3, r3
 8003cd0:	3b01      	subs	r3, #1
 8003cd2:	b29a      	uxth	r2, r3
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	86da      	strh	r2, [r3, #54]	; 0x36
 8003cd8:	e011      	b.n	8003cfe <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003cda:	f7fd f871 	bl	8000dc0 <HAL_GetTick>
 8003cde:	4602      	mov	r2, r0
 8003ce0:	69bb      	ldr	r3, [r7, #24]
 8003ce2:	1ad3      	subs	r3, r2, r3
 8003ce4:	683a      	ldr	r2, [r7, #0]
 8003ce6:	429a      	cmp	r2, r3
 8003ce8:	d803      	bhi.n	8003cf2 <HAL_SPI_Transmit+0x158>
 8003cea:	683b      	ldr	r3, [r7, #0]
 8003cec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cf0:	d102      	bne.n	8003cf8 <HAL_SPI_Transmit+0x15e>
 8003cf2:	683b      	ldr	r3, [r7, #0]
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d102      	bne.n	8003cfe <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8003cf8:	2303      	movs	r3, #3
 8003cfa:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003cfc:	e074      	b.n	8003de8 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003d02:	b29b      	uxth	r3, r3
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d1ce      	bne.n	8003ca6 <HAL_SPI_Transmit+0x10c>
 8003d08:	e04c      	b.n	8003da4 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	685b      	ldr	r3, [r3, #4]
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d002      	beq.n	8003d18 <HAL_SPI_Transmit+0x17e>
 8003d12:	8afb      	ldrh	r3, [r7, #22]
 8003d14:	2b01      	cmp	r3, #1
 8003d16:	d140      	bne.n	8003d9a <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	330c      	adds	r3, #12
 8003d22:	7812      	ldrb	r2, [r2, #0]
 8003d24:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d2a:	1c5a      	adds	r2, r3, #1
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003d34:	b29b      	uxth	r3, r3
 8003d36:	3b01      	subs	r3, #1
 8003d38:	b29a      	uxth	r2, r3
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003d3e:	e02c      	b.n	8003d9a <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	689b      	ldr	r3, [r3, #8]
 8003d46:	f003 0302 	and.w	r3, r3, #2
 8003d4a:	2b02      	cmp	r3, #2
 8003d4c:	d113      	bne.n	8003d76 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	330c      	adds	r3, #12
 8003d58:	7812      	ldrb	r2, [r2, #0]
 8003d5a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d60:	1c5a      	adds	r2, r3, #1
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003d6a:	b29b      	uxth	r3, r3
 8003d6c:	3b01      	subs	r3, #1
 8003d6e:	b29a      	uxth	r2, r3
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	86da      	strh	r2, [r3, #54]	; 0x36
 8003d74:	e011      	b.n	8003d9a <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003d76:	f7fd f823 	bl	8000dc0 <HAL_GetTick>
 8003d7a:	4602      	mov	r2, r0
 8003d7c:	69bb      	ldr	r3, [r7, #24]
 8003d7e:	1ad3      	subs	r3, r2, r3
 8003d80:	683a      	ldr	r2, [r7, #0]
 8003d82:	429a      	cmp	r2, r3
 8003d84:	d803      	bhi.n	8003d8e <HAL_SPI_Transmit+0x1f4>
 8003d86:	683b      	ldr	r3, [r7, #0]
 8003d88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d8c:	d102      	bne.n	8003d94 <HAL_SPI_Transmit+0x1fa>
 8003d8e:	683b      	ldr	r3, [r7, #0]
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d102      	bne.n	8003d9a <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8003d94:	2303      	movs	r3, #3
 8003d96:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003d98:	e026      	b.n	8003de8 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003d9e:	b29b      	uxth	r3, r3
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d1cd      	bne.n	8003d40 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003da4:	69ba      	ldr	r2, [r7, #24]
 8003da6:	6839      	ldr	r1, [r7, #0]
 8003da8:	68f8      	ldr	r0, [r7, #12]
 8003daa:	f000 f894 	bl	8003ed6 <SPI_EndRxTxTransaction>
 8003dae:	4603      	mov	r3, r0
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d002      	beq.n	8003dba <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	2220      	movs	r2, #32
 8003db8:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	689b      	ldr	r3, [r3, #8]
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d10a      	bne.n	8003dd8 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003dc2:	2300      	movs	r3, #0
 8003dc4:	613b      	str	r3, [r7, #16]
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	68db      	ldr	r3, [r3, #12]
 8003dcc:	613b      	str	r3, [r7, #16]
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	689b      	ldr	r3, [r3, #8]
 8003dd4:	613b      	str	r3, [r7, #16]
 8003dd6:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d002      	beq.n	8003de6 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8003de0:	2301      	movs	r3, #1
 8003de2:	77fb      	strb	r3, [r7, #31]
 8003de4:	e000      	b.n	8003de8 <HAL_SPI_Transmit+0x24e>
  }

error:
 8003de6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	2201      	movs	r2, #1
 8003dec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	2200      	movs	r2, #0
 8003df4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003df8:	7ffb      	ldrb	r3, [r7, #31]
}
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	3720      	adds	r7, #32
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	bd80      	pop	{r7, pc}

08003e02 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003e02:	b580      	push	{r7, lr}
 8003e04:	b084      	sub	sp, #16
 8003e06:	af00      	add	r7, sp, #0
 8003e08:	60f8      	str	r0, [r7, #12]
 8003e0a:	60b9      	str	r1, [r7, #8]
 8003e0c:	603b      	str	r3, [r7, #0]
 8003e0e:	4613      	mov	r3, r2
 8003e10:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003e12:	e04c      	b.n	8003eae <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003e14:	683b      	ldr	r3, [r7, #0]
 8003e16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e1a:	d048      	beq.n	8003eae <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8003e1c:	f7fc ffd0 	bl	8000dc0 <HAL_GetTick>
 8003e20:	4602      	mov	r2, r0
 8003e22:	69bb      	ldr	r3, [r7, #24]
 8003e24:	1ad3      	subs	r3, r2, r3
 8003e26:	683a      	ldr	r2, [r7, #0]
 8003e28:	429a      	cmp	r2, r3
 8003e2a:	d902      	bls.n	8003e32 <SPI_WaitFlagStateUntilTimeout+0x30>
 8003e2c:	683b      	ldr	r3, [r7, #0]
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d13d      	bne.n	8003eae <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	685a      	ldr	r2, [r3, #4]
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003e40:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	685b      	ldr	r3, [r3, #4]
 8003e46:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003e4a:	d111      	bne.n	8003e70 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	689b      	ldr	r3, [r3, #8]
 8003e50:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e54:	d004      	beq.n	8003e60 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	689b      	ldr	r3, [r3, #8]
 8003e5a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e5e:	d107      	bne.n	8003e70 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	681a      	ldr	r2, [r3, #0]
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003e6e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e74:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e78:	d10f      	bne.n	8003e9a <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	681a      	ldr	r2, [r3, #0]
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003e88:	601a      	str	r2, [r3, #0]
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	681a      	ldr	r2, [r3, #0]
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003e98:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	2201      	movs	r2, #1
 8003e9e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003eaa:	2303      	movs	r3, #3
 8003eac:	e00f      	b.n	8003ece <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	689a      	ldr	r2, [r3, #8]
 8003eb4:	68bb      	ldr	r3, [r7, #8]
 8003eb6:	4013      	ands	r3, r2
 8003eb8:	68ba      	ldr	r2, [r7, #8]
 8003eba:	429a      	cmp	r2, r3
 8003ebc:	bf0c      	ite	eq
 8003ebe:	2301      	moveq	r3, #1
 8003ec0:	2300      	movne	r3, #0
 8003ec2:	b2db      	uxtb	r3, r3
 8003ec4:	461a      	mov	r2, r3
 8003ec6:	79fb      	ldrb	r3, [r7, #7]
 8003ec8:	429a      	cmp	r2, r3
 8003eca:	d1a3      	bne.n	8003e14 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8003ecc:	2300      	movs	r3, #0
}
 8003ece:	4618      	mov	r0, r3
 8003ed0:	3710      	adds	r7, #16
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	bd80      	pop	{r7, pc}

08003ed6 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003ed6:	b580      	push	{r7, lr}
 8003ed8:	b086      	sub	sp, #24
 8003eda:	af02      	add	r7, sp, #8
 8003edc:	60f8      	str	r0, [r7, #12]
 8003ede:	60b9      	str	r1, [r7, #8]
 8003ee0:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	9300      	str	r3, [sp, #0]
 8003ee6:	68bb      	ldr	r3, [r7, #8]
 8003ee8:	2200      	movs	r2, #0
 8003eea:	2180      	movs	r1, #128	; 0x80
 8003eec:	68f8      	ldr	r0, [r7, #12]
 8003eee:	f7ff ff88 	bl	8003e02 <SPI_WaitFlagStateUntilTimeout>
 8003ef2:	4603      	mov	r3, r0
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d007      	beq.n	8003f08 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003efc:	f043 0220 	orr.w	r2, r3, #32
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8003f04:	2303      	movs	r3, #3
 8003f06:	e000      	b.n	8003f0a <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8003f08:	2300      	movs	r3, #0
}
 8003f0a:	4618      	mov	r0, r3
 8003f0c:	3710      	adds	r7, #16
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	bd80      	pop	{r7, pc}

08003f12 <USB_CoreInit>:
  * @param  cfg : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003f12:	b084      	sub	sp, #16
 8003f14:	b480      	push	{r7}
 8003f16:	b083      	sub	sp, #12
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6078      	str	r0, [r7, #4]
 8003f1c:	f107 0014 	add.w	r0, r7, #20
 8003f20:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8003f24:	2300      	movs	r3, #0
}
 8003f26:	4618      	mov	r0, r3
 8003f28:	370c      	adds	r7, #12
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	bc80      	pop	{r7}
 8003f2e:	b004      	add	sp, #16
 8003f30:	4770      	bx	lr

08003f32 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8003f32:	b480      	push	{r7}
 8003f34:	b085      	sub	sp, #20
 8003f36:	af00      	add	r7, sp, #0
 8003f38:	6078      	str	r0, [r7, #4]
  uint16_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003f3a:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8003f3e:	81fb      	strh	r3, [r7, #14]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR |= winterruptmask;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003f46:	b29a      	uxth	r2, r3
 8003f48:	89fb      	ldrh	r3, [r7, #14]
 8003f4a:	4313      	orrs	r3, r2
 8003f4c:	b29a      	uxth	r2, r3
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003f54:	2300      	movs	r3, #0
}
 8003f56:	4618      	mov	r0, r3
 8003f58:	3714      	adds	r7, #20
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	bc80      	pop	{r7}
 8003f5e:	4770      	bx	lr

08003f60 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8003f60:	b480      	push	{r7}
 8003f62:	b085      	sub	sp, #20
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	6078      	str	r0, [r7, #4]
  uint16_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003f68:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8003f6c:	81fb      	strh	r3, [r7, #14]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003f74:	b29b      	uxth	r3, r3
 8003f76:	b21a      	sxth	r2, r3
 8003f78:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003f7c:	43db      	mvns	r3, r3
 8003f7e:	b21b      	sxth	r3, r3
 8003f80:	4013      	ands	r3, r2
 8003f82:	b21b      	sxth	r3, r3
 8003f84:	b29a      	uxth	r2, r3
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003f8c:	2300      	movs	r3, #0
}
 8003f8e:	4618      	mov	r0, r3
 8003f90:	3714      	adds	r7, #20
 8003f92:	46bd      	mov	sp, r7
 8003f94:	bc80      	pop	{r7}
 8003f96:	4770      	bx	lr

08003f98 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE: Peripheral mode mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8003f98:	b480      	push	{r7}
 8003f9a:	b083      	sub	sp, #12
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]
 8003fa0:	460b      	mov	r3, r1
 8003fa2:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8003fa4:	2300      	movs	r3, #0
}
 8003fa6:	4618      	mov	r0, r3
 8003fa8:	370c      	adds	r7, #12
 8003faa:	46bd      	mov	sp, r7
 8003fac:	bc80      	pop	{r7}
 8003fae:	4770      	bx	lr

08003fb0 <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003fb0:	b084      	sub	sp, #16
 8003fb2:	b580      	push	{r7, lr}
 8003fb4:	b082      	sub	sp, #8
 8003fb6:	af00      	add	r7, sp, #0
 8003fb8:	6078      	str	r0, [r7, #4]
 8003fba:	f107 0014 	add.w	r0, r7, #20
 8003fbe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = USB_CNTR_FRES;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	2201      	movs	r2, #1
 8003fc6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*CNTR_FRES = 0*/
  USBx->CNTR = 0;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	2200      	movs	r2, #0
 8003fce:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*Clear pending interrupts*/
  USBx->ISTR = 0;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	2200      	movs	r2, #0
 8003fd6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	2200      	movs	r2, #0
 8003fde:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  /* Enable USB Device Interrupt mask */
  (void)USB_EnableGlobalInt(USBx);
 8003fe2:	6878      	ldr	r0, [r7, #4]
 8003fe4:	f7ff ffa5 	bl	8003f32 <USB_EnableGlobalInt>

  return HAL_OK;
 8003fe8:	2300      	movs	r3, #0
}
 8003fea:	4618      	mov	r0, r3
 8003fec:	3708      	adds	r7, #8
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003ff4:	b004      	add	sp, #16
 8003ff6:	4770      	bx	lr

08003ff8 <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003ff8:	b490      	push	{r4, r7}
 8003ffa:	b084      	sub	sp, #16
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	6078      	str	r0, [r7, #4]
 8004000:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8004002:	2300      	movs	r3, #0
 8004004:	73fb      	strb	r3, [r7, #15]
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8004006:	687a      	ldr	r2, [r7, #4]
 8004008:	683b      	ldr	r3, [r7, #0]
 800400a:	781b      	ldrb	r3, [r3, #0]
 800400c:	009b      	lsls	r3, r3, #2
 800400e:	4413      	add	r3, r2
 8004010:	881b      	ldrh	r3, [r3, #0]
 8004012:	b29b      	uxth	r3, r3
 8004014:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8004018:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800401c:	81bb      	strh	r3, [r7, #12]

  /* initialize Endpoint */
  switch (ep->type)
 800401e:	683b      	ldr	r3, [r7, #0]
 8004020:	78db      	ldrb	r3, [r3, #3]
 8004022:	2b03      	cmp	r3, #3
 8004024:	d819      	bhi.n	800405a <USB_ActivateEndpoint+0x62>
 8004026:	a201      	add	r2, pc, #4	; (adr r2, 800402c <USB_ActivateEndpoint+0x34>)
 8004028:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800402c:	0800403d 	.word	0x0800403d
 8004030:	08004051 	.word	0x08004051
 8004034:	08004061 	.word	0x08004061
 8004038:	08004047 	.word	0x08004047
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800403c:	89bb      	ldrh	r3, [r7, #12]
 800403e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004042:	81bb      	strh	r3, [r7, #12]
      break;
 8004044:	e00d      	b.n	8004062 <USB_ActivateEndpoint+0x6a>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8004046:	89bb      	ldrh	r3, [r7, #12]
 8004048:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 800404c:	81bb      	strh	r3, [r7, #12]
      break;
 800404e:	e008      	b.n	8004062 <USB_ActivateEndpoint+0x6a>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8004050:	89bb      	ldrh	r3, [r7, #12]
 8004052:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004056:	81bb      	strh	r3, [r7, #12]
      break;
 8004058:	e003      	b.n	8004062 <USB_ActivateEndpoint+0x6a>

    default:
      ret = HAL_ERROR;
 800405a:	2301      	movs	r3, #1
 800405c:	73fb      	strb	r3, [r7, #15]
      break;
 800405e:	e000      	b.n	8004062 <USB_ActivateEndpoint+0x6a>
      break;
 8004060:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX);
 8004062:	687a      	ldr	r2, [r7, #4]
 8004064:	683b      	ldr	r3, [r7, #0]
 8004066:	781b      	ldrb	r3, [r3, #0]
 8004068:	009b      	lsls	r3, r3, #2
 800406a:	441a      	add	r2, r3
 800406c:	89bb      	ldrh	r3, [r7, #12]
 800406e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004072:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004076:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800407a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800407e:	b29b      	uxth	r3, r3
 8004080:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8004082:	687a      	ldr	r2, [r7, #4]
 8004084:	683b      	ldr	r3, [r7, #0]
 8004086:	781b      	ldrb	r3, [r3, #0]
 8004088:	009b      	lsls	r3, r3, #2
 800408a:	4413      	add	r3, r2
 800408c:	881b      	ldrh	r3, [r3, #0]
 800408e:	b29b      	uxth	r3, r3
 8004090:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004094:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004098:	b29a      	uxth	r2, r3
 800409a:	683b      	ldr	r3, [r7, #0]
 800409c:	781b      	ldrb	r3, [r3, #0]
 800409e:	b29b      	uxth	r3, r3
 80040a0:	4313      	orrs	r3, r2
 80040a2:	b29c      	uxth	r4, r3
 80040a4:	687a      	ldr	r2, [r7, #4]
 80040a6:	683b      	ldr	r3, [r7, #0]
 80040a8:	781b      	ldrb	r3, [r3, #0]
 80040aa:	009b      	lsls	r3, r3, #2
 80040ac:	441a      	add	r2, r3
 80040ae:	4b8a      	ldr	r3, [pc, #552]	; (80042d8 <USB_ActivateEndpoint+0x2e0>)
 80040b0:	4323      	orrs	r3, r4
 80040b2:	b29b      	uxth	r3, r3
 80040b4:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 80040b6:	683b      	ldr	r3, [r7, #0]
 80040b8:	7b1b      	ldrb	r3, [r3, #12]
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	f040 8112 	bne.w	80042e4 <USB_ActivateEndpoint+0x2ec>
  {
    if (ep->is_in != 0U)
 80040c0:	683b      	ldr	r3, [r7, #0]
 80040c2:	785b      	ldrb	r3, [r3, #1]
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d067      	beq.n	8004198 <USB_ActivateEndpoint+0x1a0>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80040c8:	687c      	ldr	r4, [r7, #4]
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80040d0:	b29b      	uxth	r3, r3
 80040d2:	441c      	add	r4, r3
 80040d4:	683b      	ldr	r3, [r7, #0]
 80040d6:	781b      	ldrb	r3, [r3, #0]
 80040d8:	011b      	lsls	r3, r3, #4
 80040da:	4423      	add	r3, r4
 80040dc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80040e0:	461c      	mov	r4, r3
 80040e2:	683b      	ldr	r3, [r7, #0]
 80040e4:	88db      	ldrh	r3, [r3, #6]
 80040e6:	085b      	lsrs	r3, r3, #1
 80040e8:	b29b      	uxth	r3, r3
 80040ea:	005b      	lsls	r3, r3, #1
 80040ec:	b29b      	uxth	r3, r3
 80040ee:	8023      	strh	r3, [r4, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80040f0:	687a      	ldr	r2, [r7, #4]
 80040f2:	683b      	ldr	r3, [r7, #0]
 80040f4:	781b      	ldrb	r3, [r3, #0]
 80040f6:	009b      	lsls	r3, r3, #2
 80040f8:	4413      	add	r3, r2
 80040fa:	881b      	ldrh	r3, [r3, #0]
 80040fc:	b29c      	uxth	r4, r3
 80040fe:	4623      	mov	r3, r4
 8004100:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004104:	2b00      	cmp	r3, #0
 8004106:	d014      	beq.n	8004132 <USB_ActivateEndpoint+0x13a>
 8004108:	687a      	ldr	r2, [r7, #4]
 800410a:	683b      	ldr	r3, [r7, #0]
 800410c:	781b      	ldrb	r3, [r3, #0]
 800410e:	009b      	lsls	r3, r3, #2
 8004110:	4413      	add	r3, r2
 8004112:	881b      	ldrh	r3, [r3, #0]
 8004114:	b29b      	uxth	r3, r3
 8004116:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800411a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800411e:	b29c      	uxth	r4, r3
 8004120:	687a      	ldr	r2, [r7, #4]
 8004122:	683b      	ldr	r3, [r7, #0]
 8004124:	781b      	ldrb	r3, [r3, #0]
 8004126:	009b      	lsls	r3, r3, #2
 8004128:	441a      	add	r2, r3
 800412a:	4b6c      	ldr	r3, [pc, #432]	; (80042dc <USB_ActivateEndpoint+0x2e4>)
 800412c:	4323      	orrs	r3, r4
 800412e:	b29b      	uxth	r3, r3
 8004130:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004132:	683b      	ldr	r3, [r7, #0]
 8004134:	78db      	ldrb	r3, [r3, #3]
 8004136:	2b01      	cmp	r3, #1
 8004138:	d018      	beq.n	800416c <USB_ActivateEndpoint+0x174>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800413a:	687a      	ldr	r2, [r7, #4]
 800413c:	683b      	ldr	r3, [r7, #0]
 800413e:	781b      	ldrb	r3, [r3, #0]
 8004140:	009b      	lsls	r3, r3, #2
 8004142:	4413      	add	r3, r2
 8004144:	881b      	ldrh	r3, [r3, #0]
 8004146:	b29b      	uxth	r3, r3
 8004148:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800414c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004150:	b29c      	uxth	r4, r3
 8004152:	f084 0320 	eor.w	r3, r4, #32
 8004156:	b29c      	uxth	r4, r3
 8004158:	687a      	ldr	r2, [r7, #4]
 800415a:	683b      	ldr	r3, [r7, #0]
 800415c:	781b      	ldrb	r3, [r3, #0]
 800415e:	009b      	lsls	r3, r3, #2
 8004160:	441a      	add	r2, r3
 8004162:	4b5d      	ldr	r3, [pc, #372]	; (80042d8 <USB_ActivateEndpoint+0x2e0>)
 8004164:	4323      	orrs	r3, r4
 8004166:	b29b      	uxth	r3, r3
 8004168:	8013      	strh	r3, [r2, #0]
 800416a:	e22b      	b.n	80045c4 <USB_ActivateEndpoint+0x5cc>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800416c:	687a      	ldr	r2, [r7, #4]
 800416e:	683b      	ldr	r3, [r7, #0]
 8004170:	781b      	ldrb	r3, [r3, #0]
 8004172:	009b      	lsls	r3, r3, #2
 8004174:	4413      	add	r3, r2
 8004176:	881b      	ldrh	r3, [r3, #0]
 8004178:	b29b      	uxth	r3, r3
 800417a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800417e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004182:	b29c      	uxth	r4, r3
 8004184:	687a      	ldr	r2, [r7, #4]
 8004186:	683b      	ldr	r3, [r7, #0]
 8004188:	781b      	ldrb	r3, [r3, #0]
 800418a:	009b      	lsls	r3, r3, #2
 800418c:	441a      	add	r2, r3
 800418e:	4b52      	ldr	r3, [pc, #328]	; (80042d8 <USB_ActivateEndpoint+0x2e0>)
 8004190:	4323      	orrs	r3, r4
 8004192:	b29b      	uxth	r3, r3
 8004194:	8013      	strh	r3, [r2, #0]
 8004196:	e215      	b.n	80045c4 <USB_ActivateEndpoint+0x5cc>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004198:	687c      	ldr	r4, [r7, #4]
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80041a0:	b29b      	uxth	r3, r3
 80041a2:	441c      	add	r4, r3
 80041a4:	683b      	ldr	r3, [r7, #0]
 80041a6:	781b      	ldrb	r3, [r3, #0]
 80041a8:	011b      	lsls	r3, r3, #4
 80041aa:	4423      	add	r3, r4
 80041ac:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80041b0:	461c      	mov	r4, r3
 80041b2:	683b      	ldr	r3, [r7, #0]
 80041b4:	88db      	ldrh	r3, [r3, #6]
 80041b6:	085b      	lsrs	r3, r3, #1
 80041b8:	b29b      	uxth	r3, r3
 80041ba:	005b      	lsls	r3, r3, #1
 80041bc:	b29b      	uxth	r3, r3
 80041be:	8023      	strh	r3, [r4, #0]
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80041c0:	687c      	ldr	r4, [r7, #4]
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80041c8:	b29b      	uxth	r3, r3
 80041ca:	441c      	add	r4, r3
 80041cc:	683b      	ldr	r3, [r7, #0]
 80041ce:	781b      	ldrb	r3, [r3, #0]
 80041d0:	011b      	lsls	r3, r3, #4
 80041d2:	4423      	add	r3, r4
 80041d4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80041d8:	461c      	mov	r4, r3
 80041da:	683b      	ldr	r3, [r7, #0]
 80041dc:	691b      	ldr	r3, [r3, #16]
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d10e      	bne.n	8004200 <USB_ActivateEndpoint+0x208>
 80041e2:	8823      	ldrh	r3, [r4, #0]
 80041e4:	b29b      	uxth	r3, r3
 80041e6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80041ea:	b29b      	uxth	r3, r3
 80041ec:	8023      	strh	r3, [r4, #0]
 80041ee:	8823      	ldrh	r3, [r4, #0]
 80041f0:	b29b      	uxth	r3, r3
 80041f2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80041f6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80041fa:	b29b      	uxth	r3, r3
 80041fc:	8023      	strh	r3, [r4, #0]
 80041fe:	e02d      	b.n	800425c <USB_ActivateEndpoint+0x264>
 8004200:	683b      	ldr	r3, [r7, #0]
 8004202:	691b      	ldr	r3, [r3, #16]
 8004204:	2b3e      	cmp	r3, #62	; 0x3e
 8004206:	d812      	bhi.n	800422e <USB_ActivateEndpoint+0x236>
 8004208:	683b      	ldr	r3, [r7, #0]
 800420a:	691b      	ldr	r3, [r3, #16]
 800420c:	085b      	lsrs	r3, r3, #1
 800420e:	60bb      	str	r3, [r7, #8]
 8004210:	683b      	ldr	r3, [r7, #0]
 8004212:	691b      	ldr	r3, [r3, #16]
 8004214:	f003 0301 	and.w	r3, r3, #1
 8004218:	2b00      	cmp	r3, #0
 800421a:	d002      	beq.n	8004222 <USB_ActivateEndpoint+0x22a>
 800421c:	68bb      	ldr	r3, [r7, #8]
 800421e:	3301      	adds	r3, #1
 8004220:	60bb      	str	r3, [r7, #8]
 8004222:	68bb      	ldr	r3, [r7, #8]
 8004224:	b29b      	uxth	r3, r3
 8004226:	029b      	lsls	r3, r3, #10
 8004228:	b29b      	uxth	r3, r3
 800422a:	8023      	strh	r3, [r4, #0]
 800422c:	e016      	b.n	800425c <USB_ActivateEndpoint+0x264>
 800422e:	683b      	ldr	r3, [r7, #0]
 8004230:	691b      	ldr	r3, [r3, #16]
 8004232:	095b      	lsrs	r3, r3, #5
 8004234:	60bb      	str	r3, [r7, #8]
 8004236:	683b      	ldr	r3, [r7, #0]
 8004238:	691b      	ldr	r3, [r3, #16]
 800423a:	f003 031f 	and.w	r3, r3, #31
 800423e:	2b00      	cmp	r3, #0
 8004240:	d102      	bne.n	8004248 <USB_ActivateEndpoint+0x250>
 8004242:	68bb      	ldr	r3, [r7, #8]
 8004244:	3b01      	subs	r3, #1
 8004246:	60bb      	str	r3, [r7, #8]
 8004248:	68bb      	ldr	r3, [r7, #8]
 800424a:	b29b      	uxth	r3, r3
 800424c:	029b      	lsls	r3, r3, #10
 800424e:	b29b      	uxth	r3, r3
 8004250:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004254:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004258:	b29b      	uxth	r3, r3
 800425a:	8023      	strh	r3, [r4, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800425c:	687a      	ldr	r2, [r7, #4]
 800425e:	683b      	ldr	r3, [r7, #0]
 8004260:	781b      	ldrb	r3, [r3, #0]
 8004262:	009b      	lsls	r3, r3, #2
 8004264:	4413      	add	r3, r2
 8004266:	881b      	ldrh	r3, [r3, #0]
 8004268:	b29c      	uxth	r4, r3
 800426a:	4623      	mov	r3, r4
 800426c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004270:	2b00      	cmp	r3, #0
 8004272:	d014      	beq.n	800429e <USB_ActivateEndpoint+0x2a6>
 8004274:	687a      	ldr	r2, [r7, #4]
 8004276:	683b      	ldr	r3, [r7, #0]
 8004278:	781b      	ldrb	r3, [r3, #0]
 800427a:	009b      	lsls	r3, r3, #2
 800427c:	4413      	add	r3, r2
 800427e:	881b      	ldrh	r3, [r3, #0]
 8004280:	b29b      	uxth	r3, r3
 8004282:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004286:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800428a:	b29c      	uxth	r4, r3
 800428c:	687a      	ldr	r2, [r7, #4]
 800428e:	683b      	ldr	r3, [r7, #0]
 8004290:	781b      	ldrb	r3, [r3, #0]
 8004292:	009b      	lsls	r3, r3, #2
 8004294:	441a      	add	r2, r3
 8004296:	4b12      	ldr	r3, [pc, #72]	; (80042e0 <USB_ActivateEndpoint+0x2e8>)
 8004298:	4323      	orrs	r3, r4
 800429a:	b29b      	uxth	r3, r3
 800429c:	8013      	strh	r3, [r2, #0]
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800429e:	687a      	ldr	r2, [r7, #4]
 80042a0:	683b      	ldr	r3, [r7, #0]
 80042a2:	781b      	ldrb	r3, [r3, #0]
 80042a4:	009b      	lsls	r3, r3, #2
 80042a6:	4413      	add	r3, r2
 80042a8:	881b      	ldrh	r3, [r3, #0]
 80042aa:	b29b      	uxth	r3, r3
 80042ac:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80042b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042b4:	b29c      	uxth	r4, r3
 80042b6:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 80042ba:	b29c      	uxth	r4, r3
 80042bc:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 80042c0:	b29c      	uxth	r4, r3
 80042c2:	687a      	ldr	r2, [r7, #4]
 80042c4:	683b      	ldr	r3, [r7, #0]
 80042c6:	781b      	ldrb	r3, [r3, #0]
 80042c8:	009b      	lsls	r3, r3, #2
 80042ca:	441a      	add	r2, r3
 80042cc:	4b02      	ldr	r3, [pc, #8]	; (80042d8 <USB_ActivateEndpoint+0x2e0>)
 80042ce:	4323      	orrs	r3, r4
 80042d0:	b29b      	uxth	r3, r3
 80042d2:	8013      	strh	r3, [r2, #0]
 80042d4:	e176      	b.n	80045c4 <USB_ActivateEndpoint+0x5cc>
 80042d6:	bf00      	nop
 80042d8:	ffff8080 	.word	0xffff8080
 80042dc:	ffff80c0 	.word	0xffff80c0
 80042e0:	ffffc080 	.word	0xffffc080
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 80042e4:	687a      	ldr	r2, [r7, #4]
 80042e6:	683b      	ldr	r3, [r7, #0]
 80042e8:	781b      	ldrb	r3, [r3, #0]
 80042ea:	009b      	lsls	r3, r3, #2
 80042ec:	4413      	add	r3, r2
 80042ee:	881b      	ldrh	r3, [r3, #0]
 80042f0:	b29b      	uxth	r3, r3
 80042f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80042f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042fa:	b29c      	uxth	r4, r3
 80042fc:	687a      	ldr	r2, [r7, #4]
 80042fe:	683b      	ldr	r3, [r7, #0]
 8004300:	781b      	ldrb	r3, [r3, #0]
 8004302:	009b      	lsls	r3, r3, #2
 8004304:	441a      	add	r2, r3
 8004306:	4b96      	ldr	r3, [pc, #600]	; (8004560 <USB_ActivateEndpoint+0x568>)
 8004308:	4323      	orrs	r3, r4
 800430a:	b29b      	uxth	r3, r3
 800430c:	8013      	strh	r3, [r2, #0]
    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800430e:	687c      	ldr	r4, [r7, #4]
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004316:	b29b      	uxth	r3, r3
 8004318:	441c      	add	r4, r3
 800431a:	683b      	ldr	r3, [r7, #0]
 800431c:	781b      	ldrb	r3, [r3, #0]
 800431e:	011b      	lsls	r3, r3, #4
 8004320:	4423      	add	r3, r4
 8004322:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004326:	461c      	mov	r4, r3
 8004328:	683b      	ldr	r3, [r7, #0]
 800432a:	891b      	ldrh	r3, [r3, #8]
 800432c:	085b      	lsrs	r3, r3, #1
 800432e:	b29b      	uxth	r3, r3
 8004330:	005b      	lsls	r3, r3, #1
 8004332:	b29b      	uxth	r3, r3
 8004334:	8023      	strh	r3, [r4, #0]
 8004336:	687c      	ldr	r4, [r7, #4]
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800433e:	b29b      	uxth	r3, r3
 8004340:	441c      	add	r4, r3
 8004342:	683b      	ldr	r3, [r7, #0]
 8004344:	781b      	ldrb	r3, [r3, #0]
 8004346:	011b      	lsls	r3, r3, #4
 8004348:	4423      	add	r3, r4
 800434a:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800434e:	461c      	mov	r4, r3
 8004350:	683b      	ldr	r3, [r7, #0]
 8004352:	895b      	ldrh	r3, [r3, #10]
 8004354:	085b      	lsrs	r3, r3, #1
 8004356:	b29b      	uxth	r3, r3
 8004358:	005b      	lsls	r3, r3, #1
 800435a:	b29b      	uxth	r3, r3
 800435c:	8023      	strh	r3, [r4, #0]

    if (ep->is_in == 0U)
 800435e:	683b      	ldr	r3, [r7, #0]
 8004360:	785b      	ldrb	r3, [r3, #1]
 8004362:	2b00      	cmp	r3, #0
 8004364:	f040 8088 	bne.w	8004478 <USB_ActivateEndpoint+0x480>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004368:	687a      	ldr	r2, [r7, #4]
 800436a:	683b      	ldr	r3, [r7, #0]
 800436c:	781b      	ldrb	r3, [r3, #0]
 800436e:	009b      	lsls	r3, r3, #2
 8004370:	4413      	add	r3, r2
 8004372:	881b      	ldrh	r3, [r3, #0]
 8004374:	b29c      	uxth	r4, r3
 8004376:	4623      	mov	r3, r4
 8004378:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800437c:	2b00      	cmp	r3, #0
 800437e:	d014      	beq.n	80043aa <USB_ActivateEndpoint+0x3b2>
 8004380:	687a      	ldr	r2, [r7, #4]
 8004382:	683b      	ldr	r3, [r7, #0]
 8004384:	781b      	ldrb	r3, [r3, #0]
 8004386:	009b      	lsls	r3, r3, #2
 8004388:	4413      	add	r3, r2
 800438a:	881b      	ldrh	r3, [r3, #0]
 800438c:	b29b      	uxth	r3, r3
 800438e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004392:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004396:	b29c      	uxth	r4, r3
 8004398:	687a      	ldr	r2, [r7, #4]
 800439a:	683b      	ldr	r3, [r7, #0]
 800439c:	781b      	ldrb	r3, [r3, #0]
 800439e:	009b      	lsls	r3, r3, #2
 80043a0:	441a      	add	r2, r3
 80043a2:	4b70      	ldr	r3, [pc, #448]	; (8004564 <USB_ActivateEndpoint+0x56c>)
 80043a4:	4323      	orrs	r3, r4
 80043a6:	b29b      	uxth	r3, r3
 80043a8:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80043aa:	687a      	ldr	r2, [r7, #4]
 80043ac:	683b      	ldr	r3, [r7, #0]
 80043ae:	781b      	ldrb	r3, [r3, #0]
 80043b0:	009b      	lsls	r3, r3, #2
 80043b2:	4413      	add	r3, r2
 80043b4:	881b      	ldrh	r3, [r3, #0]
 80043b6:	b29c      	uxth	r4, r3
 80043b8:	4623      	mov	r3, r4
 80043ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d014      	beq.n	80043ec <USB_ActivateEndpoint+0x3f4>
 80043c2:	687a      	ldr	r2, [r7, #4]
 80043c4:	683b      	ldr	r3, [r7, #0]
 80043c6:	781b      	ldrb	r3, [r3, #0]
 80043c8:	009b      	lsls	r3, r3, #2
 80043ca:	4413      	add	r3, r2
 80043cc:	881b      	ldrh	r3, [r3, #0]
 80043ce:	b29b      	uxth	r3, r3
 80043d0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80043d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043d8:	b29c      	uxth	r4, r3
 80043da:	687a      	ldr	r2, [r7, #4]
 80043dc:	683b      	ldr	r3, [r7, #0]
 80043de:	781b      	ldrb	r3, [r3, #0]
 80043e0:	009b      	lsls	r3, r3, #2
 80043e2:	441a      	add	r2, r3
 80043e4:	4b60      	ldr	r3, [pc, #384]	; (8004568 <USB_ActivateEndpoint+0x570>)
 80043e6:	4323      	orrs	r3, r4
 80043e8:	b29b      	uxth	r3, r3
 80043ea:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out */
      PCD_TX_DTOG(USBx, ep->num);
 80043ec:	687a      	ldr	r2, [r7, #4]
 80043ee:	683b      	ldr	r3, [r7, #0]
 80043f0:	781b      	ldrb	r3, [r3, #0]
 80043f2:	009b      	lsls	r3, r3, #2
 80043f4:	4413      	add	r3, r2
 80043f6:	881b      	ldrh	r3, [r3, #0]
 80043f8:	b29b      	uxth	r3, r3
 80043fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80043fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004402:	b29c      	uxth	r4, r3
 8004404:	687a      	ldr	r2, [r7, #4]
 8004406:	683b      	ldr	r3, [r7, #0]
 8004408:	781b      	ldrb	r3, [r3, #0]
 800440a:	009b      	lsls	r3, r3, #2
 800440c:	441a      	add	r2, r3
 800440e:	4b56      	ldr	r3, [pc, #344]	; (8004568 <USB_ActivateEndpoint+0x570>)
 8004410:	4323      	orrs	r3, r4
 8004412:	b29b      	uxth	r3, r3
 8004414:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004416:	687a      	ldr	r2, [r7, #4]
 8004418:	683b      	ldr	r3, [r7, #0]
 800441a:	781b      	ldrb	r3, [r3, #0]
 800441c:	009b      	lsls	r3, r3, #2
 800441e:	4413      	add	r3, r2
 8004420:	881b      	ldrh	r3, [r3, #0]
 8004422:	b29b      	uxth	r3, r3
 8004424:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004428:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800442c:	b29c      	uxth	r4, r3
 800442e:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8004432:	b29c      	uxth	r4, r3
 8004434:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8004438:	b29c      	uxth	r4, r3
 800443a:	687a      	ldr	r2, [r7, #4]
 800443c:	683b      	ldr	r3, [r7, #0]
 800443e:	781b      	ldrb	r3, [r3, #0]
 8004440:	009b      	lsls	r3, r3, #2
 8004442:	441a      	add	r2, r3
 8004444:	4b49      	ldr	r3, [pc, #292]	; (800456c <USB_ActivateEndpoint+0x574>)
 8004446:	4323      	orrs	r3, r4
 8004448:	b29b      	uxth	r3, r3
 800444a:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800444c:	687a      	ldr	r2, [r7, #4]
 800444e:	683b      	ldr	r3, [r7, #0]
 8004450:	781b      	ldrb	r3, [r3, #0]
 8004452:	009b      	lsls	r3, r3, #2
 8004454:	4413      	add	r3, r2
 8004456:	881b      	ldrh	r3, [r3, #0]
 8004458:	b29b      	uxth	r3, r3
 800445a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800445e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004462:	b29c      	uxth	r4, r3
 8004464:	687a      	ldr	r2, [r7, #4]
 8004466:	683b      	ldr	r3, [r7, #0]
 8004468:	781b      	ldrb	r3, [r3, #0]
 800446a:	009b      	lsls	r3, r3, #2
 800446c:	441a      	add	r2, r3
 800446e:	4b3f      	ldr	r3, [pc, #252]	; (800456c <USB_ActivateEndpoint+0x574>)
 8004470:	4323      	orrs	r3, r4
 8004472:	b29b      	uxth	r3, r3
 8004474:	8013      	strh	r3, [r2, #0]
 8004476:	e0a5      	b.n	80045c4 <USB_ActivateEndpoint+0x5cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004478:	687a      	ldr	r2, [r7, #4]
 800447a:	683b      	ldr	r3, [r7, #0]
 800447c:	781b      	ldrb	r3, [r3, #0]
 800447e:	009b      	lsls	r3, r3, #2
 8004480:	4413      	add	r3, r2
 8004482:	881b      	ldrh	r3, [r3, #0]
 8004484:	b29c      	uxth	r4, r3
 8004486:	4623      	mov	r3, r4
 8004488:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800448c:	2b00      	cmp	r3, #0
 800448e:	d014      	beq.n	80044ba <USB_ActivateEndpoint+0x4c2>
 8004490:	687a      	ldr	r2, [r7, #4]
 8004492:	683b      	ldr	r3, [r7, #0]
 8004494:	781b      	ldrb	r3, [r3, #0]
 8004496:	009b      	lsls	r3, r3, #2
 8004498:	4413      	add	r3, r2
 800449a:	881b      	ldrh	r3, [r3, #0]
 800449c:	b29b      	uxth	r3, r3
 800449e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80044a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044a6:	b29c      	uxth	r4, r3
 80044a8:	687a      	ldr	r2, [r7, #4]
 80044aa:	683b      	ldr	r3, [r7, #0]
 80044ac:	781b      	ldrb	r3, [r3, #0]
 80044ae:	009b      	lsls	r3, r3, #2
 80044b0:	441a      	add	r2, r3
 80044b2:	4b2c      	ldr	r3, [pc, #176]	; (8004564 <USB_ActivateEndpoint+0x56c>)
 80044b4:	4323      	orrs	r3, r4
 80044b6:	b29b      	uxth	r3, r3
 80044b8:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80044ba:	687a      	ldr	r2, [r7, #4]
 80044bc:	683b      	ldr	r3, [r7, #0]
 80044be:	781b      	ldrb	r3, [r3, #0]
 80044c0:	009b      	lsls	r3, r3, #2
 80044c2:	4413      	add	r3, r2
 80044c4:	881b      	ldrh	r3, [r3, #0]
 80044c6:	b29c      	uxth	r4, r3
 80044c8:	4623      	mov	r3, r4
 80044ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d014      	beq.n	80044fc <USB_ActivateEndpoint+0x504>
 80044d2:	687a      	ldr	r2, [r7, #4]
 80044d4:	683b      	ldr	r3, [r7, #0]
 80044d6:	781b      	ldrb	r3, [r3, #0]
 80044d8:	009b      	lsls	r3, r3, #2
 80044da:	4413      	add	r3, r2
 80044dc:	881b      	ldrh	r3, [r3, #0]
 80044de:	b29b      	uxth	r3, r3
 80044e0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80044e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044e8:	b29c      	uxth	r4, r3
 80044ea:	687a      	ldr	r2, [r7, #4]
 80044ec:	683b      	ldr	r3, [r7, #0]
 80044ee:	781b      	ldrb	r3, [r3, #0]
 80044f0:	009b      	lsls	r3, r3, #2
 80044f2:	441a      	add	r2, r3
 80044f4:	4b1c      	ldr	r3, [pc, #112]	; (8004568 <USB_ActivateEndpoint+0x570>)
 80044f6:	4323      	orrs	r3, r4
 80044f8:	b29b      	uxth	r3, r3
 80044fa:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80044fc:	687a      	ldr	r2, [r7, #4]
 80044fe:	683b      	ldr	r3, [r7, #0]
 8004500:	781b      	ldrb	r3, [r3, #0]
 8004502:	009b      	lsls	r3, r3, #2
 8004504:	4413      	add	r3, r2
 8004506:	881b      	ldrh	r3, [r3, #0]
 8004508:	b29b      	uxth	r3, r3
 800450a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800450e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004512:	b29c      	uxth	r4, r3
 8004514:	687a      	ldr	r2, [r7, #4]
 8004516:	683b      	ldr	r3, [r7, #0]
 8004518:	781b      	ldrb	r3, [r3, #0]
 800451a:	009b      	lsls	r3, r3, #2
 800451c:	441a      	add	r2, r3
 800451e:	4b11      	ldr	r3, [pc, #68]	; (8004564 <USB_ActivateEndpoint+0x56c>)
 8004520:	4323      	orrs	r3, r4
 8004522:	b29b      	uxth	r3, r3
 8004524:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004526:	683b      	ldr	r3, [r7, #0]
 8004528:	78db      	ldrb	r3, [r3, #3]
 800452a:	2b01      	cmp	r3, #1
 800452c:	d020      	beq.n	8004570 <USB_ActivateEndpoint+0x578>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800452e:	687a      	ldr	r2, [r7, #4]
 8004530:	683b      	ldr	r3, [r7, #0]
 8004532:	781b      	ldrb	r3, [r3, #0]
 8004534:	009b      	lsls	r3, r3, #2
 8004536:	4413      	add	r3, r2
 8004538:	881b      	ldrh	r3, [r3, #0]
 800453a:	b29b      	uxth	r3, r3
 800453c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004540:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004544:	b29c      	uxth	r4, r3
 8004546:	f084 0320 	eor.w	r3, r4, #32
 800454a:	b29c      	uxth	r4, r3
 800454c:	687a      	ldr	r2, [r7, #4]
 800454e:	683b      	ldr	r3, [r7, #0]
 8004550:	781b      	ldrb	r3, [r3, #0]
 8004552:	009b      	lsls	r3, r3, #2
 8004554:	441a      	add	r2, r3
 8004556:	4b05      	ldr	r3, [pc, #20]	; (800456c <USB_ActivateEndpoint+0x574>)
 8004558:	4323      	orrs	r3, r4
 800455a:	b29b      	uxth	r3, r3
 800455c:	8013      	strh	r3, [r2, #0]
 800455e:	e01c      	b.n	800459a <USB_ActivateEndpoint+0x5a2>
 8004560:	ffff8180 	.word	0xffff8180
 8004564:	ffffc080 	.word	0xffffc080
 8004568:	ffff80c0 	.word	0xffff80c0
 800456c:	ffff8080 	.word	0xffff8080
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004570:	687a      	ldr	r2, [r7, #4]
 8004572:	683b      	ldr	r3, [r7, #0]
 8004574:	781b      	ldrb	r3, [r3, #0]
 8004576:	009b      	lsls	r3, r3, #2
 8004578:	4413      	add	r3, r2
 800457a:	881b      	ldrh	r3, [r3, #0]
 800457c:	b29b      	uxth	r3, r3
 800457e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004582:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004586:	b29c      	uxth	r4, r3
 8004588:	687a      	ldr	r2, [r7, #4]
 800458a:	683b      	ldr	r3, [r7, #0]
 800458c:	781b      	ldrb	r3, [r3, #0]
 800458e:	009b      	lsls	r3, r3, #2
 8004590:	441a      	add	r2, r3
 8004592:	4b0f      	ldr	r3, [pc, #60]	; (80045d0 <USB_ActivateEndpoint+0x5d8>)
 8004594:	4323      	orrs	r3, r4
 8004596:	b29b      	uxth	r3, r3
 8004598:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800459a:	687a      	ldr	r2, [r7, #4]
 800459c:	683b      	ldr	r3, [r7, #0]
 800459e:	781b      	ldrb	r3, [r3, #0]
 80045a0:	009b      	lsls	r3, r3, #2
 80045a2:	4413      	add	r3, r2
 80045a4:	881b      	ldrh	r3, [r3, #0]
 80045a6:	b29b      	uxth	r3, r3
 80045a8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80045ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045b0:	b29c      	uxth	r4, r3
 80045b2:	687a      	ldr	r2, [r7, #4]
 80045b4:	683b      	ldr	r3, [r7, #0]
 80045b6:	781b      	ldrb	r3, [r3, #0]
 80045b8:	009b      	lsls	r3, r3, #2
 80045ba:	441a      	add	r2, r3
 80045bc:	4b04      	ldr	r3, [pc, #16]	; (80045d0 <USB_ActivateEndpoint+0x5d8>)
 80045be:	4323      	orrs	r3, r4
 80045c0:	b29b      	uxth	r3, r3
 80045c2:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 80045c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80045c6:	4618      	mov	r0, r3
 80045c8:	3710      	adds	r7, #16
 80045ca:	46bd      	mov	sp, r7
 80045cc:	bc90      	pop	{r4, r7}
 80045ce:	4770      	bx	lr
 80045d0:	ffff8080 	.word	0xffff8080

080045d4 <USB_DeactivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80045d4:	b490      	push	{r4, r7}
 80045d6:	b082      	sub	sp, #8
 80045d8:	af00      	add	r7, sp, #0
 80045da:	6078      	str	r0, [r7, #4]
 80045dc:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80045de:	683b      	ldr	r3, [r7, #0]
 80045e0:	7b1b      	ldrb	r3, [r3, #12]
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d171      	bne.n	80046ca <USB_DeactivateEndpoint+0xf6>
  {
    if (ep->is_in != 0U)
 80045e6:	683b      	ldr	r3, [r7, #0]
 80045e8:	785b      	ldrb	r3, [r3, #1]
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d036      	beq.n	800465c <USB_DeactivateEndpoint+0x88>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80045ee:	687a      	ldr	r2, [r7, #4]
 80045f0:	683b      	ldr	r3, [r7, #0]
 80045f2:	781b      	ldrb	r3, [r3, #0]
 80045f4:	009b      	lsls	r3, r3, #2
 80045f6:	4413      	add	r3, r2
 80045f8:	881b      	ldrh	r3, [r3, #0]
 80045fa:	b29c      	uxth	r4, r3
 80045fc:	4623      	mov	r3, r4
 80045fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004602:	2b00      	cmp	r3, #0
 8004604:	d014      	beq.n	8004630 <USB_DeactivateEndpoint+0x5c>
 8004606:	687a      	ldr	r2, [r7, #4]
 8004608:	683b      	ldr	r3, [r7, #0]
 800460a:	781b      	ldrb	r3, [r3, #0]
 800460c:	009b      	lsls	r3, r3, #2
 800460e:	4413      	add	r3, r2
 8004610:	881b      	ldrh	r3, [r3, #0]
 8004612:	b29b      	uxth	r3, r3
 8004614:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004618:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800461c:	b29c      	uxth	r4, r3
 800461e:	687a      	ldr	r2, [r7, #4]
 8004620:	683b      	ldr	r3, [r7, #0]
 8004622:	781b      	ldrb	r3, [r3, #0]
 8004624:	009b      	lsls	r3, r3, #2
 8004626:	441a      	add	r2, r3
 8004628:	4b6b      	ldr	r3, [pc, #428]	; (80047d8 <USB_DeactivateEndpoint+0x204>)
 800462a:	4323      	orrs	r3, r4
 800462c:	b29b      	uxth	r3, r3
 800462e:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004630:	687a      	ldr	r2, [r7, #4]
 8004632:	683b      	ldr	r3, [r7, #0]
 8004634:	781b      	ldrb	r3, [r3, #0]
 8004636:	009b      	lsls	r3, r3, #2
 8004638:	4413      	add	r3, r2
 800463a:	881b      	ldrh	r3, [r3, #0]
 800463c:	b29b      	uxth	r3, r3
 800463e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004642:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004646:	b29c      	uxth	r4, r3
 8004648:	687a      	ldr	r2, [r7, #4]
 800464a:	683b      	ldr	r3, [r7, #0]
 800464c:	781b      	ldrb	r3, [r3, #0]
 800464e:	009b      	lsls	r3, r3, #2
 8004650:	441a      	add	r2, r3
 8004652:	4b62      	ldr	r3, [pc, #392]	; (80047dc <USB_DeactivateEndpoint+0x208>)
 8004654:	4323      	orrs	r3, r4
 8004656:	b29b      	uxth	r3, r3
 8004658:	8013      	strh	r3, [r2, #0]
 800465a:	e144      	b.n	80048e6 <USB_DeactivateEndpoint+0x312>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800465c:	687a      	ldr	r2, [r7, #4]
 800465e:	683b      	ldr	r3, [r7, #0]
 8004660:	781b      	ldrb	r3, [r3, #0]
 8004662:	009b      	lsls	r3, r3, #2
 8004664:	4413      	add	r3, r2
 8004666:	881b      	ldrh	r3, [r3, #0]
 8004668:	b29c      	uxth	r4, r3
 800466a:	4623      	mov	r3, r4
 800466c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004670:	2b00      	cmp	r3, #0
 8004672:	d014      	beq.n	800469e <USB_DeactivateEndpoint+0xca>
 8004674:	687a      	ldr	r2, [r7, #4]
 8004676:	683b      	ldr	r3, [r7, #0]
 8004678:	781b      	ldrb	r3, [r3, #0]
 800467a:	009b      	lsls	r3, r3, #2
 800467c:	4413      	add	r3, r2
 800467e:	881b      	ldrh	r3, [r3, #0]
 8004680:	b29b      	uxth	r3, r3
 8004682:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004686:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800468a:	b29c      	uxth	r4, r3
 800468c:	687a      	ldr	r2, [r7, #4]
 800468e:	683b      	ldr	r3, [r7, #0]
 8004690:	781b      	ldrb	r3, [r3, #0]
 8004692:	009b      	lsls	r3, r3, #2
 8004694:	441a      	add	r2, r3
 8004696:	4b52      	ldr	r3, [pc, #328]	; (80047e0 <USB_DeactivateEndpoint+0x20c>)
 8004698:	4323      	orrs	r3, r4
 800469a:	b29b      	uxth	r3, r3
 800469c:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800469e:	687a      	ldr	r2, [r7, #4]
 80046a0:	683b      	ldr	r3, [r7, #0]
 80046a2:	781b      	ldrb	r3, [r3, #0]
 80046a4:	009b      	lsls	r3, r3, #2
 80046a6:	4413      	add	r3, r2
 80046a8:	881b      	ldrh	r3, [r3, #0]
 80046aa:	b29b      	uxth	r3, r3
 80046ac:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80046b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046b4:	b29c      	uxth	r4, r3
 80046b6:	687a      	ldr	r2, [r7, #4]
 80046b8:	683b      	ldr	r3, [r7, #0]
 80046ba:	781b      	ldrb	r3, [r3, #0]
 80046bc:	009b      	lsls	r3, r3, #2
 80046be:	441a      	add	r2, r3
 80046c0:	4b46      	ldr	r3, [pc, #280]	; (80047dc <USB_DeactivateEndpoint+0x208>)
 80046c2:	4323      	orrs	r3, r4
 80046c4:	b29b      	uxth	r3, r3
 80046c6:	8013      	strh	r3, [r2, #0]
 80046c8:	e10d      	b.n	80048e6 <USB_DeactivateEndpoint+0x312>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 80046ca:	683b      	ldr	r3, [r7, #0]
 80046cc:	785b      	ldrb	r3, [r3, #1]
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	f040 8088 	bne.w	80047e4 <USB_DeactivateEndpoint+0x210>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80046d4:	687a      	ldr	r2, [r7, #4]
 80046d6:	683b      	ldr	r3, [r7, #0]
 80046d8:	781b      	ldrb	r3, [r3, #0]
 80046da:	009b      	lsls	r3, r3, #2
 80046dc:	4413      	add	r3, r2
 80046de:	881b      	ldrh	r3, [r3, #0]
 80046e0:	b29c      	uxth	r4, r3
 80046e2:	4623      	mov	r3, r4
 80046e4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d014      	beq.n	8004716 <USB_DeactivateEndpoint+0x142>
 80046ec:	687a      	ldr	r2, [r7, #4]
 80046ee:	683b      	ldr	r3, [r7, #0]
 80046f0:	781b      	ldrb	r3, [r3, #0]
 80046f2:	009b      	lsls	r3, r3, #2
 80046f4:	4413      	add	r3, r2
 80046f6:	881b      	ldrh	r3, [r3, #0]
 80046f8:	b29b      	uxth	r3, r3
 80046fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80046fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004702:	b29c      	uxth	r4, r3
 8004704:	687a      	ldr	r2, [r7, #4]
 8004706:	683b      	ldr	r3, [r7, #0]
 8004708:	781b      	ldrb	r3, [r3, #0]
 800470a:	009b      	lsls	r3, r3, #2
 800470c:	441a      	add	r2, r3
 800470e:	4b34      	ldr	r3, [pc, #208]	; (80047e0 <USB_DeactivateEndpoint+0x20c>)
 8004710:	4323      	orrs	r3, r4
 8004712:	b29b      	uxth	r3, r3
 8004714:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004716:	687a      	ldr	r2, [r7, #4]
 8004718:	683b      	ldr	r3, [r7, #0]
 800471a:	781b      	ldrb	r3, [r3, #0]
 800471c:	009b      	lsls	r3, r3, #2
 800471e:	4413      	add	r3, r2
 8004720:	881b      	ldrh	r3, [r3, #0]
 8004722:	b29c      	uxth	r4, r3
 8004724:	4623      	mov	r3, r4
 8004726:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800472a:	2b00      	cmp	r3, #0
 800472c:	d014      	beq.n	8004758 <USB_DeactivateEndpoint+0x184>
 800472e:	687a      	ldr	r2, [r7, #4]
 8004730:	683b      	ldr	r3, [r7, #0]
 8004732:	781b      	ldrb	r3, [r3, #0]
 8004734:	009b      	lsls	r3, r3, #2
 8004736:	4413      	add	r3, r2
 8004738:	881b      	ldrh	r3, [r3, #0]
 800473a:	b29b      	uxth	r3, r3
 800473c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004740:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004744:	b29c      	uxth	r4, r3
 8004746:	687a      	ldr	r2, [r7, #4]
 8004748:	683b      	ldr	r3, [r7, #0]
 800474a:	781b      	ldrb	r3, [r3, #0]
 800474c:	009b      	lsls	r3, r3, #2
 800474e:	441a      	add	r2, r3
 8004750:	4b21      	ldr	r3, [pc, #132]	; (80047d8 <USB_DeactivateEndpoint+0x204>)
 8004752:	4323      	orrs	r3, r4
 8004754:	b29b      	uxth	r3, r3
 8004756:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8004758:	687a      	ldr	r2, [r7, #4]
 800475a:	683b      	ldr	r3, [r7, #0]
 800475c:	781b      	ldrb	r3, [r3, #0]
 800475e:	009b      	lsls	r3, r3, #2
 8004760:	4413      	add	r3, r2
 8004762:	881b      	ldrh	r3, [r3, #0]
 8004764:	b29b      	uxth	r3, r3
 8004766:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800476a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800476e:	b29c      	uxth	r4, r3
 8004770:	687a      	ldr	r2, [r7, #4]
 8004772:	683b      	ldr	r3, [r7, #0]
 8004774:	781b      	ldrb	r3, [r3, #0]
 8004776:	009b      	lsls	r3, r3, #2
 8004778:	441a      	add	r2, r3
 800477a:	4b17      	ldr	r3, [pc, #92]	; (80047d8 <USB_DeactivateEndpoint+0x204>)
 800477c:	4323      	orrs	r3, r4
 800477e:	b29b      	uxth	r3, r3
 8004780:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004782:	687a      	ldr	r2, [r7, #4]
 8004784:	683b      	ldr	r3, [r7, #0]
 8004786:	781b      	ldrb	r3, [r3, #0]
 8004788:	009b      	lsls	r3, r3, #2
 800478a:	4413      	add	r3, r2
 800478c:	881b      	ldrh	r3, [r3, #0]
 800478e:	b29b      	uxth	r3, r3
 8004790:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004794:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004798:	b29c      	uxth	r4, r3
 800479a:	687a      	ldr	r2, [r7, #4]
 800479c:	683b      	ldr	r3, [r7, #0]
 800479e:	781b      	ldrb	r3, [r3, #0]
 80047a0:	009b      	lsls	r3, r3, #2
 80047a2:	441a      	add	r2, r3
 80047a4:	4b0d      	ldr	r3, [pc, #52]	; (80047dc <USB_DeactivateEndpoint+0x208>)
 80047a6:	4323      	orrs	r3, r4
 80047a8:	b29b      	uxth	r3, r3
 80047aa:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80047ac:	687a      	ldr	r2, [r7, #4]
 80047ae:	683b      	ldr	r3, [r7, #0]
 80047b0:	781b      	ldrb	r3, [r3, #0]
 80047b2:	009b      	lsls	r3, r3, #2
 80047b4:	4413      	add	r3, r2
 80047b6:	881b      	ldrh	r3, [r3, #0]
 80047b8:	b29b      	uxth	r3, r3
 80047ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80047be:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80047c2:	b29c      	uxth	r4, r3
 80047c4:	687a      	ldr	r2, [r7, #4]
 80047c6:	683b      	ldr	r3, [r7, #0]
 80047c8:	781b      	ldrb	r3, [r3, #0]
 80047ca:	009b      	lsls	r3, r3, #2
 80047cc:	441a      	add	r2, r3
 80047ce:	4b03      	ldr	r3, [pc, #12]	; (80047dc <USB_DeactivateEndpoint+0x208>)
 80047d0:	4323      	orrs	r3, r4
 80047d2:	b29b      	uxth	r3, r3
 80047d4:	8013      	strh	r3, [r2, #0]
 80047d6:	e086      	b.n	80048e6 <USB_DeactivateEndpoint+0x312>
 80047d8:	ffff80c0 	.word	0xffff80c0
 80047dc:	ffff8080 	.word	0xffff8080
 80047e0:	ffffc080 	.word	0xffffc080
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80047e4:	687a      	ldr	r2, [r7, #4]
 80047e6:	683b      	ldr	r3, [r7, #0]
 80047e8:	781b      	ldrb	r3, [r3, #0]
 80047ea:	009b      	lsls	r3, r3, #2
 80047ec:	4413      	add	r3, r2
 80047ee:	881b      	ldrh	r3, [r3, #0]
 80047f0:	b29c      	uxth	r4, r3
 80047f2:	4623      	mov	r3, r4
 80047f4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d014      	beq.n	8004826 <USB_DeactivateEndpoint+0x252>
 80047fc:	687a      	ldr	r2, [r7, #4]
 80047fe:	683b      	ldr	r3, [r7, #0]
 8004800:	781b      	ldrb	r3, [r3, #0]
 8004802:	009b      	lsls	r3, r3, #2
 8004804:	4413      	add	r3, r2
 8004806:	881b      	ldrh	r3, [r3, #0]
 8004808:	b29b      	uxth	r3, r3
 800480a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800480e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004812:	b29c      	uxth	r4, r3
 8004814:	687a      	ldr	r2, [r7, #4]
 8004816:	683b      	ldr	r3, [r7, #0]
 8004818:	781b      	ldrb	r3, [r3, #0]
 800481a:	009b      	lsls	r3, r3, #2
 800481c:	441a      	add	r2, r3
 800481e:	4b35      	ldr	r3, [pc, #212]	; (80048f4 <USB_DeactivateEndpoint+0x320>)
 8004820:	4323      	orrs	r3, r4
 8004822:	b29b      	uxth	r3, r3
 8004824:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004826:	687a      	ldr	r2, [r7, #4]
 8004828:	683b      	ldr	r3, [r7, #0]
 800482a:	781b      	ldrb	r3, [r3, #0]
 800482c:	009b      	lsls	r3, r3, #2
 800482e:	4413      	add	r3, r2
 8004830:	881b      	ldrh	r3, [r3, #0]
 8004832:	b29c      	uxth	r4, r3
 8004834:	4623      	mov	r3, r4
 8004836:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800483a:	2b00      	cmp	r3, #0
 800483c:	d014      	beq.n	8004868 <USB_DeactivateEndpoint+0x294>
 800483e:	687a      	ldr	r2, [r7, #4]
 8004840:	683b      	ldr	r3, [r7, #0]
 8004842:	781b      	ldrb	r3, [r3, #0]
 8004844:	009b      	lsls	r3, r3, #2
 8004846:	4413      	add	r3, r2
 8004848:	881b      	ldrh	r3, [r3, #0]
 800484a:	b29b      	uxth	r3, r3
 800484c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004850:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004854:	b29c      	uxth	r4, r3
 8004856:	687a      	ldr	r2, [r7, #4]
 8004858:	683b      	ldr	r3, [r7, #0]
 800485a:	781b      	ldrb	r3, [r3, #0]
 800485c:	009b      	lsls	r3, r3, #2
 800485e:	441a      	add	r2, r3
 8004860:	4b25      	ldr	r3, [pc, #148]	; (80048f8 <USB_DeactivateEndpoint+0x324>)
 8004862:	4323      	orrs	r3, r4
 8004864:	b29b      	uxth	r3, r3
 8004866:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8004868:	687a      	ldr	r2, [r7, #4]
 800486a:	683b      	ldr	r3, [r7, #0]
 800486c:	781b      	ldrb	r3, [r3, #0]
 800486e:	009b      	lsls	r3, r3, #2
 8004870:	4413      	add	r3, r2
 8004872:	881b      	ldrh	r3, [r3, #0]
 8004874:	b29b      	uxth	r3, r3
 8004876:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800487a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800487e:	b29c      	uxth	r4, r3
 8004880:	687a      	ldr	r2, [r7, #4]
 8004882:	683b      	ldr	r3, [r7, #0]
 8004884:	781b      	ldrb	r3, [r3, #0]
 8004886:	009b      	lsls	r3, r3, #2
 8004888:	441a      	add	r2, r3
 800488a:	4b1a      	ldr	r3, [pc, #104]	; (80048f4 <USB_DeactivateEndpoint+0x320>)
 800488c:	4323      	orrs	r3, r4
 800488e:	b29b      	uxth	r3, r3
 8004890:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004892:	687a      	ldr	r2, [r7, #4]
 8004894:	683b      	ldr	r3, [r7, #0]
 8004896:	781b      	ldrb	r3, [r3, #0]
 8004898:	009b      	lsls	r3, r3, #2
 800489a:	4413      	add	r3, r2
 800489c:	881b      	ldrh	r3, [r3, #0]
 800489e:	b29b      	uxth	r3, r3
 80048a0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80048a4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80048a8:	b29c      	uxth	r4, r3
 80048aa:	687a      	ldr	r2, [r7, #4]
 80048ac:	683b      	ldr	r3, [r7, #0]
 80048ae:	781b      	ldrb	r3, [r3, #0]
 80048b0:	009b      	lsls	r3, r3, #2
 80048b2:	441a      	add	r2, r3
 80048b4:	4b11      	ldr	r3, [pc, #68]	; (80048fc <USB_DeactivateEndpoint+0x328>)
 80048b6:	4323      	orrs	r3, r4
 80048b8:	b29b      	uxth	r3, r3
 80048ba:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80048bc:	687a      	ldr	r2, [r7, #4]
 80048be:	683b      	ldr	r3, [r7, #0]
 80048c0:	781b      	ldrb	r3, [r3, #0]
 80048c2:	009b      	lsls	r3, r3, #2
 80048c4:	4413      	add	r3, r2
 80048c6:	881b      	ldrh	r3, [r3, #0]
 80048c8:	b29b      	uxth	r3, r3
 80048ca:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80048ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048d2:	b29c      	uxth	r4, r3
 80048d4:	687a      	ldr	r2, [r7, #4]
 80048d6:	683b      	ldr	r3, [r7, #0]
 80048d8:	781b      	ldrb	r3, [r3, #0]
 80048da:	009b      	lsls	r3, r3, #2
 80048dc:	441a      	add	r2, r3
 80048de:	4b07      	ldr	r3, [pc, #28]	; (80048fc <USB_DeactivateEndpoint+0x328>)
 80048e0:	4323      	orrs	r3, r4
 80048e2:	b29b      	uxth	r3, r3
 80048e4:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80048e6:	2300      	movs	r3, #0
}
 80048e8:	4618      	mov	r0, r3
 80048ea:	3708      	adds	r7, #8
 80048ec:	46bd      	mov	sp, r7
 80048ee:	bc90      	pop	{r4, r7}
 80048f0:	4770      	bx	lr
 80048f2:	bf00      	nop
 80048f4:	ffffc080 	.word	0xffffc080
 80048f8:	ffff80c0 	.word	0xffff80c0
 80048fc:	ffff8080 	.word	0xffff8080

08004900 <USB_EPStartXfer>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004900:	b590      	push	{r4, r7, lr}
 8004902:	b08d      	sub	sp, #52	; 0x34
 8004904:	af00      	add	r7, sp, #0
 8004906:	6078      	str	r0, [r7, #4]
 8004908:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint32_t len;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800490a:	683b      	ldr	r3, [r7, #0]
 800490c:	785b      	ldrb	r3, [r3, #1]
 800490e:	2b01      	cmp	r3, #1
 8004910:	f040 8160 	bne.w	8004bd4 <USB_EPStartXfer+0x2d4>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8004914:	683b      	ldr	r3, [r7, #0]
 8004916:	699a      	ldr	r2, [r3, #24]
 8004918:	683b      	ldr	r3, [r7, #0]
 800491a:	691b      	ldr	r3, [r3, #16]
 800491c:	429a      	cmp	r2, r3
 800491e:	d909      	bls.n	8004934 <USB_EPStartXfer+0x34>
    {
      len = ep->maxpacket;
 8004920:	683b      	ldr	r3, [r7, #0]
 8004922:	691b      	ldr	r3, [r3, #16]
 8004924:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len -= len;
 8004926:	683b      	ldr	r3, [r7, #0]
 8004928:	699a      	ldr	r2, [r3, #24]
 800492a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800492c:	1ad2      	subs	r2, r2, r3
 800492e:	683b      	ldr	r3, [r7, #0]
 8004930:	619a      	str	r2, [r3, #24]
 8004932:	e005      	b.n	8004940 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 8004934:	683b      	ldr	r3, [r7, #0]
 8004936:	699b      	ldr	r3, [r3, #24]
 8004938:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len = 0U;
 800493a:	683b      	ldr	r3, [r7, #0]
 800493c:	2200      	movs	r2, #0
 800493e:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8004940:	683b      	ldr	r3, [r7, #0]
 8004942:	7b1b      	ldrb	r3, [r3, #12]
 8004944:	2b00      	cmp	r3, #0
 8004946:	d119      	bne.n	800497c <USB_EPStartXfer+0x7c>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8004948:	683b      	ldr	r3, [r7, #0]
 800494a:	6959      	ldr	r1, [r3, #20]
 800494c:	683b      	ldr	r3, [r7, #0]
 800494e:	88da      	ldrh	r2, [r3, #6]
 8004950:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004952:	b29b      	uxth	r3, r3
 8004954:	6878      	ldr	r0, [r7, #4]
 8004956:	f000 fba2 	bl	800509e <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800495a:	687c      	ldr	r4, [r7, #4]
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004962:	b29b      	uxth	r3, r3
 8004964:	441c      	add	r4, r3
 8004966:	683b      	ldr	r3, [r7, #0]
 8004968:	781b      	ldrb	r3, [r3, #0]
 800496a:	011b      	lsls	r3, r3, #4
 800496c:	4423      	add	r3, r4
 800496e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004972:	461c      	mov	r4, r3
 8004974:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004976:	b29b      	uxth	r3, r3
 8004978:	8023      	strh	r3, [r4, #0]
 800497a:	e10f      	b.n	8004b9c <USB_EPStartXfer+0x29c>
    }
    else
    {
      /* Write the data to the USB endpoint */
      if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800497c:	687a      	ldr	r2, [r7, #4]
 800497e:	683b      	ldr	r3, [r7, #0]
 8004980:	781b      	ldrb	r3, [r3, #0]
 8004982:	009b      	lsls	r3, r3, #2
 8004984:	4413      	add	r3, r2
 8004986:	881b      	ldrh	r3, [r3, #0]
 8004988:	b29b      	uxth	r3, r3
 800498a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800498e:	2b00      	cmp	r3, #0
 8004990:	d065      	beq.n	8004a5e <USB_EPStartXfer+0x15e>
      {
        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004992:	687c      	ldr	r4, [r7, #4]
 8004994:	683b      	ldr	r3, [r7, #0]
 8004996:	785b      	ldrb	r3, [r3, #1]
 8004998:	2b00      	cmp	r3, #0
 800499a:	d148      	bne.n	8004a2e <USB_EPStartXfer+0x12e>
 800499c:	687c      	ldr	r4, [r7, #4]
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80049a4:	b29b      	uxth	r3, r3
 80049a6:	441c      	add	r4, r3
 80049a8:	683b      	ldr	r3, [r7, #0]
 80049aa:	781b      	ldrb	r3, [r3, #0]
 80049ac:	011b      	lsls	r3, r3, #4
 80049ae:	4423      	add	r3, r4
 80049b0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80049b4:	461c      	mov	r4, r3
 80049b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d10e      	bne.n	80049da <USB_EPStartXfer+0xda>
 80049bc:	8823      	ldrh	r3, [r4, #0]
 80049be:	b29b      	uxth	r3, r3
 80049c0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80049c4:	b29b      	uxth	r3, r3
 80049c6:	8023      	strh	r3, [r4, #0]
 80049c8:	8823      	ldrh	r3, [r4, #0]
 80049ca:	b29b      	uxth	r3, r3
 80049cc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80049d0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80049d4:	b29b      	uxth	r3, r3
 80049d6:	8023      	strh	r3, [r4, #0]
 80049d8:	e03d      	b.n	8004a56 <USB_EPStartXfer+0x156>
 80049da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049dc:	2b3e      	cmp	r3, #62	; 0x3e
 80049de:	d810      	bhi.n	8004a02 <USB_EPStartXfer+0x102>
 80049e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049e2:	085b      	lsrs	r3, r3, #1
 80049e4:	627b      	str	r3, [r7, #36]	; 0x24
 80049e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049e8:	f003 0301 	and.w	r3, r3, #1
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d002      	beq.n	80049f6 <USB_EPStartXfer+0xf6>
 80049f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049f2:	3301      	adds	r3, #1
 80049f4:	627b      	str	r3, [r7, #36]	; 0x24
 80049f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049f8:	b29b      	uxth	r3, r3
 80049fa:	029b      	lsls	r3, r3, #10
 80049fc:	b29b      	uxth	r3, r3
 80049fe:	8023      	strh	r3, [r4, #0]
 8004a00:	e029      	b.n	8004a56 <USB_EPStartXfer+0x156>
 8004a02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a04:	095b      	lsrs	r3, r3, #5
 8004a06:	627b      	str	r3, [r7, #36]	; 0x24
 8004a08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a0a:	f003 031f 	and.w	r3, r3, #31
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d102      	bne.n	8004a18 <USB_EPStartXfer+0x118>
 8004a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a14:	3b01      	subs	r3, #1
 8004a16:	627b      	str	r3, [r7, #36]	; 0x24
 8004a18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a1a:	b29b      	uxth	r3, r3
 8004a1c:	029b      	lsls	r3, r3, #10
 8004a1e:	b29b      	uxth	r3, r3
 8004a20:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004a24:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004a28:	b29b      	uxth	r3, r3
 8004a2a:	8023      	strh	r3, [r4, #0]
 8004a2c:	e013      	b.n	8004a56 <USB_EPStartXfer+0x156>
 8004a2e:	683b      	ldr	r3, [r7, #0]
 8004a30:	785b      	ldrb	r3, [r3, #1]
 8004a32:	2b01      	cmp	r3, #1
 8004a34:	d10f      	bne.n	8004a56 <USB_EPStartXfer+0x156>
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004a3c:	b29b      	uxth	r3, r3
 8004a3e:	441c      	add	r4, r3
 8004a40:	683b      	ldr	r3, [r7, #0]
 8004a42:	781b      	ldrb	r3, [r3, #0]
 8004a44:	011b      	lsls	r3, r3, #4
 8004a46:	4423      	add	r3, r4
 8004a48:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004a4c:	60fb      	str	r3, [r7, #12]
 8004a4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a50:	b29a      	uxth	r2, r3
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	801a      	strh	r2, [r3, #0]
        pmabuffer = ep->pmaaddr1;
 8004a56:	683b      	ldr	r3, [r7, #0]
 8004a58:	895b      	ldrh	r3, [r3, #10]
 8004a5a:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004a5c:	e063      	b.n	8004b26 <USB_EPStartXfer+0x226>
      }
      else
      {
        /* Set the Double buffer counter for pmabuffer0 */
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004a5e:	683b      	ldr	r3, [r7, #0]
 8004a60:	785b      	ldrb	r3, [r3, #1]
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d148      	bne.n	8004af8 <USB_EPStartXfer+0x1f8>
 8004a66:	687c      	ldr	r4, [r7, #4]
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004a6e:	b29b      	uxth	r3, r3
 8004a70:	441c      	add	r4, r3
 8004a72:	683b      	ldr	r3, [r7, #0]
 8004a74:	781b      	ldrb	r3, [r3, #0]
 8004a76:	011b      	lsls	r3, r3, #4
 8004a78:	4423      	add	r3, r4
 8004a7a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004a7e:	461c      	mov	r4, r3
 8004a80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d10e      	bne.n	8004aa4 <USB_EPStartXfer+0x1a4>
 8004a86:	8823      	ldrh	r3, [r4, #0]
 8004a88:	b29b      	uxth	r3, r3
 8004a8a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004a8e:	b29b      	uxth	r3, r3
 8004a90:	8023      	strh	r3, [r4, #0]
 8004a92:	8823      	ldrh	r3, [r4, #0]
 8004a94:	b29b      	uxth	r3, r3
 8004a96:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004a9a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004a9e:	b29b      	uxth	r3, r3
 8004aa0:	8023      	strh	r3, [r4, #0]
 8004aa2:	e03d      	b.n	8004b20 <USB_EPStartXfer+0x220>
 8004aa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004aa6:	2b3e      	cmp	r3, #62	; 0x3e
 8004aa8:	d810      	bhi.n	8004acc <USB_EPStartXfer+0x1cc>
 8004aaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004aac:	085b      	lsrs	r3, r3, #1
 8004aae:	623b      	str	r3, [r7, #32]
 8004ab0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ab2:	f003 0301 	and.w	r3, r3, #1
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d002      	beq.n	8004ac0 <USB_EPStartXfer+0x1c0>
 8004aba:	6a3b      	ldr	r3, [r7, #32]
 8004abc:	3301      	adds	r3, #1
 8004abe:	623b      	str	r3, [r7, #32]
 8004ac0:	6a3b      	ldr	r3, [r7, #32]
 8004ac2:	b29b      	uxth	r3, r3
 8004ac4:	029b      	lsls	r3, r3, #10
 8004ac6:	b29b      	uxth	r3, r3
 8004ac8:	8023      	strh	r3, [r4, #0]
 8004aca:	e029      	b.n	8004b20 <USB_EPStartXfer+0x220>
 8004acc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ace:	095b      	lsrs	r3, r3, #5
 8004ad0:	623b      	str	r3, [r7, #32]
 8004ad2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ad4:	f003 031f 	and.w	r3, r3, #31
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d102      	bne.n	8004ae2 <USB_EPStartXfer+0x1e2>
 8004adc:	6a3b      	ldr	r3, [r7, #32]
 8004ade:	3b01      	subs	r3, #1
 8004ae0:	623b      	str	r3, [r7, #32]
 8004ae2:	6a3b      	ldr	r3, [r7, #32]
 8004ae4:	b29b      	uxth	r3, r3
 8004ae6:	029b      	lsls	r3, r3, #10
 8004ae8:	b29b      	uxth	r3, r3
 8004aea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004aee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004af2:	b29b      	uxth	r3, r3
 8004af4:	8023      	strh	r3, [r4, #0]
 8004af6:	e013      	b.n	8004b20 <USB_EPStartXfer+0x220>
 8004af8:	683b      	ldr	r3, [r7, #0]
 8004afa:	785b      	ldrb	r3, [r3, #1]
 8004afc:	2b01      	cmp	r3, #1
 8004afe:	d10f      	bne.n	8004b20 <USB_EPStartXfer+0x220>
 8004b00:	687c      	ldr	r4, [r7, #4]
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004b08:	b29b      	uxth	r3, r3
 8004b0a:	441c      	add	r4, r3
 8004b0c:	683b      	ldr	r3, [r7, #0]
 8004b0e:	781b      	ldrb	r3, [r3, #0]
 8004b10:	011b      	lsls	r3, r3, #4
 8004b12:	4423      	add	r3, r4
 8004b14:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004b18:	461c      	mov	r4, r3
 8004b1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b1c:	b29b      	uxth	r3, r3
 8004b1e:	8023      	strh	r3, [r4, #0]
        pmabuffer = ep->pmaaddr0;
 8004b20:	683b      	ldr	r3, [r7, #0]
 8004b22:	891b      	ldrh	r3, [r3, #8]
 8004b24:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }
      USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004b26:	683b      	ldr	r3, [r7, #0]
 8004b28:	6959      	ldr	r1, [r3, #20]
 8004b2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b2c:	b29b      	uxth	r3, r3
 8004b2e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8004b30:	6878      	ldr	r0, [r7, #4]
 8004b32:	f000 fab4 	bl	800509e <USB_WritePMA>
      PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8004b36:	683b      	ldr	r3, [r7, #0]
 8004b38:	785b      	ldrb	r3, [r3, #1]
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d115      	bne.n	8004b6a <USB_EPStartXfer+0x26a>
 8004b3e:	687a      	ldr	r2, [r7, #4]
 8004b40:	683b      	ldr	r3, [r7, #0]
 8004b42:	781b      	ldrb	r3, [r3, #0]
 8004b44:	009b      	lsls	r3, r3, #2
 8004b46:	4413      	add	r3, r2
 8004b48:	881b      	ldrh	r3, [r3, #0]
 8004b4a:	b29b      	uxth	r3, r3
 8004b4c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b50:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b54:	b29c      	uxth	r4, r3
 8004b56:	687a      	ldr	r2, [r7, #4]
 8004b58:	683b      	ldr	r3, [r7, #0]
 8004b5a:	781b      	ldrb	r3, [r3, #0]
 8004b5c:	009b      	lsls	r3, r3, #2
 8004b5e:	441a      	add	r2, r3
 8004b60:	4b9a      	ldr	r3, [pc, #616]	; (8004dcc <USB_EPStartXfer+0x4cc>)
 8004b62:	4323      	orrs	r3, r4
 8004b64:	b29b      	uxth	r3, r3
 8004b66:	8013      	strh	r3, [r2, #0]
 8004b68:	e018      	b.n	8004b9c <USB_EPStartXfer+0x29c>
 8004b6a:	683b      	ldr	r3, [r7, #0]
 8004b6c:	785b      	ldrb	r3, [r3, #1]
 8004b6e:	2b01      	cmp	r3, #1
 8004b70:	d114      	bne.n	8004b9c <USB_EPStartXfer+0x29c>
 8004b72:	687a      	ldr	r2, [r7, #4]
 8004b74:	683b      	ldr	r3, [r7, #0]
 8004b76:	781b      	ldrb	r3, [r3, #0]
 8004b78:	009b      	lsls	r3, r3, #2
 8004b7a:	4413      	add	r3, r2
 8004b7c:	881b      	ldrh	r3, [r3, #0]
 8004b7e:	b29b      	uxth	r3, r3
 8004b80:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b84:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b88:	b29c      	uxth	r4, r3
 8004b8a:	687a      	ldr	r2, [r7, #4]
 8004b8c:	683b      	ldr	r3, [r7, #0]
 8004b8e:	781b      	ldrb	r3, [r3, #0]
 8004b90:	009b      	lsls	r3, r3, #2
 8004b92:	441a      	add	r2, r3
 8004b94:	4b8e      	ldr	r3, [pc, #568]	; (8004dd0 <USB_EPStartXfer+0x4d0>)
 8004b96:	4323      	orrs	r3, r4
 8004b98:	b29b      	uxth	r3, r3
 8004b9a:	8013      	strh	r3, [r2, #0]
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8004b9c:	687a      	ldr	r2, [r7, #4]
 8004b9e:	683b      	ldr	r3, [r7, #0]
 8004ba0:	781b      	ldrb	r3, [r3, #0]
 8004ba2:	009b      	lsls	r3, r3, #2
 8004ba4:	4413      	add	r3, r2
 8004ba6:	881b      	ldrh	r3, [r3, #0]
 8004ba8:	b29b      	uxth	r3, r3
 8004baa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004bae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004bb2:	b29c      	uxth	r4, r3
 8004bb4:	f084 0310 	eor.w	r3, r4, #16
 8004bb8:	b29c      	uxth	r4, r3
 8004bba:	f084 0320 	eor.w	r3, r4, #32
 8004bbe:	b29c      	uxth	r4, r3
 8004bc0:	687a      	ldr	r2, [r7, #4]
 8004bc2:	683b      	ldr	r3, [r7, #0]
 8004bc4:	781b      	ldrb	r3, [r3, #0]
 8004bc6:	009b      	lsls	r3, r3, #2
 8004bc8:	441a      	add	r2, r3
 8004bca:	4b82      	ldr	r3, [pc, #520]	; (8004dd4 <USB_EPStartXfer+0x4d4>)
 8004bcc:	4323      	orrs	r3, r4
 8004bce:	b29b      	uxth	r3, r3
 8004bd0:	8013      	strh	r3, [r2, #0]
 8004bd2:	e146      	b.n	8004e62 <USB_EPStartXfer+0x562>
  }
  else /* OUT endpoint */
  {
    /* Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8004bd4:	683b      	ldr	r3, [r7, #0]
 8004bd6:	699a      	ldr	r2, [r3, #24]
 8004bd8:	683b      	ldr	r3, [r7, #0]
 8004bda:	691b      	ldr	r3, [r3, #16]
 8004bdc:	429a      	cmp	r2, r3
 8004bde:	d909      	bls.n	8004bf4 <USB_EPStartXfer+0x2f4>
    {
      len = ep->maxpacket;
 8004be0:	683b      	ldr	r3, [r7, #0]
 8004be2:	691b      	ldr	r3, [r3, #16]
 8004be4:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len -= len;
 8004be6:	683b      	ldr	r3, [r7, #0]
 8004be8:	699a      	ldr	r2, [r3, #24]
 8004bea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bec:	1ad2      	subs	r2, r2, r3
 8004bee:	683b      	ldr	r3, [r7, #0]
 8004bf0:	619a      	str	r2, [r3, #24]
 8004bf2:	e005      	b.n	8004c00 <USB_EPStartXfer+0x300>
    }
    else
    {
      len = ep->xfer_len;
 8004bf4:	683b      	ldr	r3, [r7, #0]
 8004bf6:	699b      	ldr	r3, [r3, #24]
 8004bf8:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len = 0U;
 8004bfa:	683b      	ldr	r3, [r7, #0]
 8004bfc:	2200      	movs	r2, #0
 8004bfe:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Rx endpoint */
    if (ep->doublebuffer == 0U)
 8004c00:	683b      	ldr	r3, [r7, #0]
 8004c02:	7b1b      	ldrb	r3, [r3, #12]
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d148      	bne.n	8004c9a <USB_EPStartXfer+0x39a>
    {
      /*Set RX buffer count*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8004c08:	687c      	ldr	r4, [r7, #4]
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004c10:	b29b      	uxth	r3, r3
 8004c12:	441c      	add	r4, r3
 8004c14:	683b      	ldr	r3, [r7, #0]
 8004c16:	781b      	ldrb	r3, [r3, #0]
 8004c18:	011b      	lsls	r3, r3, #4
 8004c1a:	4423      	add	r3, r4
 8004c1c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004c20:	461c      	mov	r4, r3
 8004c22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d10e      	bne.n	8004c46 <USB_EPStartXfer+0x346>
 8004c28:	8823      	ldrh	r3, [r4, #0]
 8004c2a:	b29b      	uxth	r3, r3
 8004c2c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004c30:	b29b      	uxth	r3, r3
 8004c32:	8023      	strh	r3, [r4, #0]
 8004c34:	8823      	ldrh	r3, [r4, #0]
 8004c36:	b29b      	uxth	r3, r3
 8004c38:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004c3c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004c40:	b29b      	uxth	r3, r3
 8004c42:	8023      	strh	r3, [r4, #0]
 8004c44:	e0f2      	b.n	8004e2c <USB_EPStartXfer+0x52c>
 8004c46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c48:	2b3e      	cmp	r3, #62	; 0x3e
 8004c4a:	d810      	bhi.n	8004c6e <USB_EPStartXfer+0x36e>
 8004c4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c4e:	085b      	lsrs	r3, r3, #1
 8004c50:	61fb      	str	r3, [r7, #28]
 8004c52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c54:	f003 0301 	and.w	r3, r3, #1
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d002      	beq.n	8004c62 <USB_EPStartXfer+0x362>
 8004c5c:	69fb      	ldr	r3, [r7, #28]
 8004c5e:	3301      	adds	r3, #1
 8004c60:	61fb      	str	r3, [r7, #28]
 8004c62:	69fb      	ldr	r3, [r7, #28]
 8004c64:	b29b      	uxth	r3, r3
 8004c66:	029b      	lsls	r3, r3, #10
 8004c68:	b29b      	uxth	r3, r3
 8004c6a:	8023      	strh	r3, [r4, #0]
 8004c6c:	e0de      	b.n	8004e2c <USB_EPStartXfer+0x52c>
 8004c6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c70:	095b      	lsrs	r3, r3, #5
 8004c72:	61fb      	str	r3, [r7, #28]
 8004c74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c76:	f003 031f 	and.w	r3, r3, #31
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d102      	bne.n	8004c84 <USB_EPStartXfer+0x384>
 8004c7e:	69fb      	ldr	r3, [r7, #28]
 8004c80:	3b01      	subs	r3, #1
 8004c82:	61fb      	str	r3, [r7, #28]
 8004c84:	69fb      	ldr	r3, [r7, #28]
 8004c86:	b29b      	uxth	r3, r3
 8004c88:	029b      	lsls	r3, r3, #10
 8004c8a:	b29b      	uxth	r3, r3
 8004c8c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004c90:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004c94:	b29b      	uxth	r3, r3
 8004c96:	8023      	strh	r3, [r4, #0]
 8004c98:	e0c8      	b.n	8004e2c <USB_EPStartXfer+0x52c>
    }
    else
    {
      /*Set the Double buffer counter*/
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8004c9a:	683b      	ldr	r3, [r7, #0]
 8004c9c:	785b      	ldrb	r3, [r3, #1]
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d148      	bne.n	8004d34 <USB_EPStartXfer+0x434>
 8004ca2:	687c      	ldr	r4, [r7, #4]
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004caa:	b29b      	uxth	r3, r3
 8004cac:	441c      	add	r4, r3
 8004cae:	683b      	ldr	r3, [r7, #0]
 8004cb0:	781b      	ldrb	r3, [r3, #0]
 8004cb2:	011b      	lsls	r3, r3, #4
 8004cb4:	4423      	add	r3, r4
 8004cb6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004cba:	461c      	mov	r4, r3
 8004cbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d10e      	bne.n	8004ce0 <USB_EPStartXfer+0x3e0>
 8004cc2:	8823      	ldrh	r3, [r4, #0]
 8004cc4:	b29b      	uxth	r3, r3
 8004cc6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004cca:	b29b      	uxth	r3, r3
 8004ccc:	8023      	strh	r3, [r4, #0]
 8004cce:	8823      	ldrh	r3, [r4, #0]
 8004cd0:	b29b      	uxth	r3, r3
 8004cd2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004cd6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004cda:	b29b      	uxth	r3, r3
 8004cdc:	8023      	strh	r3, [r4, #0]
 8004cde:	e03d      	b.n	8004d5c <USB_EPStartXfer+0x45c>
 8004ce0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ce2:	2b3e      	cmp	r3, #62	; 0x3e
 8004ce4:	d810      	bhi.n	8004d08 <USB_EPStartXfer+0x408>
 8004ce6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ce8:	085b      	lsrs	r3, r3, #1
 8004cea:	61bb      	str	r3, [r7, #24]
 8004cec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cee:	f003 0301 	and.w	r3, r3, #1
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d002      	beq.n	8004cfc <USB_EPStartXfer+0x3fc>
 8004cf6:	69bb      	ldr	r3, [r7, #24]
 8004cf8:	3301      	adds	r3, #1
 8004cfa:	61bb      	str	r3, [r7, #24]
 8004cfc:	69bb      	ldr	r3, [r7, #24]
 8004cfe:	b29b      	uxth	r3, r3
 8004d00:	029b      	lsls	r3, r3, #10
 8004d02:	b29b      	uxth	r3, r3
 8004d04:	8023      	strh	r3, [r4, #0]
 8004d06:	e029      	b.n	8004d5c <USB_EPStartXfer+0x45c>
 8004d08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d0a:	095b      	lsrs	r3, r3, #5
 8004d0c:	61bb      	str	r3, [r7, #24]
 8004d0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d10:	f003 031f 	and.w	r3, r3, #31
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d102      	bne.n	8004d1e <USB_EPStartXfer+0x41e>
 8004d18:	69bb      	ldr	r3, [r7, #24]
 8004d1a:	3b01      	subs	r3, #1
 8004d1c:	61bb      	str	r3, [r7, #24]
 8004d1e:	69bb      	ldr	r3, [r7, #24]
 8004d20:	b29b      	uxth	r3, r3
 8004d22:	029b      	lsls	r3, r3, #10
 8004d24:	b29b      	uxth	r3, r3
 8004d26:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004d2a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004d2e:	b29b      	uxth	r3, r3
 8004d30:	8023      	strh	r3, [r4, #0]
 8004d32:	e013      	b.n	8004d5c <USB_EPStartXfer+0x45c>
 8004d34:	683b      	ldr	r3, [r7, #0]
 8004d36:	785b      	ldrb	r3, [r3, #1]
 8004d38:	2b01      	cmp	r3, #1
 8004d3a:	d10f      	bne.n	8004d5c <USB_EPStartXfer+0x45c>
 8004d3c:	687c      	ldr	r4, [r7, #4]
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004d44:	b29b      	uxth	r3, r3
 8004d46:	441c      	add	r4, r3
 8004d48:	683b      	ldr	r3, [r7, #0]
 8004d4a:	781b      	ldrb	r3, [r3, #0]
 8004d4c:	011b      	lsls	r3, r3, #4
 8004d4e:	4423      	add	r3, r4
 8004d50:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004d54:	461c      	mov	r4, r3
 8004d56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d58:	b29b      	uxth	r3, r3
 8004d5a:	8023      	strh	r3, [r4, #0]
 8004d5c:	687c      	ldr	r4, [r7, #4]
 8004d5e:	683b      	ldr	r3, [r7, #0]
 8004d60:	785b      	ldrb	r3, [r3, #1]
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d14e      	bne.n	8004e04 <USB_EPStartXfer+0x504>
 8004d66:	687c      	ldr	r4, [r7, #4]
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004d6e:	b29b      	uxth	r3, r3
 8004d70:	441c      	add	r4, r3
 8004d72:	683b      	ldr	r3, [r7, #0]
 8004d74:	781b      	ldrb	r3, [r3, #0]
 8004d76:	011b      	lsls	r3, r3, #4
 8004d78:	4423      	add	r3, r4
 8004d7a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004d7e:	461c      	mov	r4, r3
 8004d80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d10e      	bne.n	8004da4 <USB_EPStartXfer+0x4a4>
 8004d86:	8823      	ldrh	r3, [r4, #0]
 8004d88:	b29b      	uxth	r3, r3
 8004d8a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004d8e:	b29b      	uxth	r3, r3
 8004d90:	8023      	strh	r3, [r4, #0]
 8004d92:	8823      	ldrh	r3, [r4, #0]
 8004d94:	b29b      	uxth	r3, r3
 8004d96:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004d9a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004d9e:	b29b      	uxth	r3, r3
 8004da0:	8023      	strh	r3, [r4, #0]
 8004da2:	e043      	b.n	8004e2c <USB_EPStartXfer+0x52c>
 8004da4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004da6:	2b3e      	cmp	r3, #62	; 0x3e
 8004da8:	d816      	bhi.n	8004dd8 <USB_EPStartXfer+0x4d8>
 8004daa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dac:	085b      	lsrs	r3, r3, #1
 8004dae:	617b      	str	r3, [r7, #20]
 8004db0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004db2:	f003 0301 	and.w	r3, r3, #1
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d002      	beq.n	8004dc0 <USB_EPStartXfer+0x4c0>
 8004dba:	697b      	ldr	r3, [r7, #20]
 8004dbc:	3301      	adds	r3, #1
 8004dbe:	617b      	str	r3, [r7, #20]
 8004dc0:	697b      	ldr	r3, [r7, #20]
 8004dc2:	b29b      	uxth	r3, r3
 8004dc4:	029b      	lsls	r3, r3, #10
 8004dc6:	b29b      	uxth	r3, r3
 8004dc8:	8023      	strh	r3, [r4, #0]
 8004dca:	e02f      	b.n	8004e2c <USB_EPStartXfer+0x52c>
 8004dcc:	ffff80c0 	.word	0xffff80c0
 8004dd0:	ffffc080 	.word	0xffffc080
 8004dd4:	ffff8080 	.word	0xffff8080
 8004dd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dda:	095b      	lsrs	r3, r3, #5
 8004ddc:	617b      	str	r3, [r7, #20]
 8004dde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004de0:	f003 031f 	and.w	r3, r3, #31
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d102      	bne.n	8004dee <USB_EPStartXfer+0x4ee>
 8004de8:	697b      	ldr	r3, [r7, #20]
 8004dea:	3b01      	subs	r3, #1
 8004dec:	617b      	str	r3, [r7, #20]
 8004dee:	697b      	ldr	r3, [r7, #20]
 8004df0:	b29b      	uxth	r3, r3
 8004df2:	029b      	lsls	r3, r3, #10
 8004df4:	b29b      	uxth	r3, r3
 8004df6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004dfa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004dfe:	b29b      	uxth	r3, r3
 8004e00:	8023      	strh	r3, [r4, #0]
 8004e02:	e013      	b.n	8004e2c <USB_EPStartXfer+0x52c>
 8004e04:	683b      	ldr	r3, [r7, #0]
 8004e06:	785b      	ldrb	r3, [r3, #1]
 8004e08:	2b01      	cmp	r3, #1
 8004e0a:	d10f      	bne.n	8004e2c <USB_EPStartXfer+0x52c>
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004e12:	b29b      	uxth	r3, r3
 8004e14:	441c      	add	r4, r3
 8004e16:	683b      	ldr	r3, [r7, #0]
 8004e18:	781b      	ldrb	r3, [r3, #0]
 8004e1a:	011b      	lsls	r3, r3, #4
 8004e1c:	4423      	add	r3, r4
 8004e1e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004e22:	613b      	str	r3, [r7, #16]
 8004e24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e26:	b29a      	uxth	r2, r3
 8004e28:	693b      	ldr	r3, [r7, #16]
 8004e2a:	801a      	strh	r2, [r3, #0]
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004e2c:	687a      	ldr	r2, [r7, #4]
 8004e2e:	683b      	ldr	r3, [r7, #0]
 8004e30:	781b      	ldrb	r3, [r3, #0]
 8004e32:	009b      	lsls	r3, r3, #2
 8004e34:	4413      	add	r3, r2
 8004e36:	881b      	ldrh	r3, [r3, #0]
 8004e38:	b29b      	uxth	r3, r3
 8004e3a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004e3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e42:	b29c      	uxth	r4, r3
 8004e44:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8004e48:	b29c      	uxth	r4, r3
 8004e4a:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8004e4e:	b29c      	uxth	r4, r3
 8004e50:	687a      	ldr	r2, [r7, #4]
 8004e52:	683b      	ldr	r3, [r7, #0]
 8004e54:	781b      	ldrb	r3, [r3, #0]
 8004e56:	009b      	lsls	r3, r3, #2
 8004e58:	441a      	add	r2, r3
 8004e5a:	4b04      	ldr	r3, [pc, #16]	; (8004e6c <USB_EPStartXfer+0x56c>)
 8004e5c:	4323      	orrs	r3, r4
 8004e5e:	b29b      	uxth	r3, r3
 8004e60:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8004e62:	2300      	movs	r3, #0
}
 8004e64:	4618      	mov	r0, r3
 8004e66:	3734      	adds	r7, #52	; 0x34
 8004e68:	46bd      	mov	sp, r7
 8004e6a:	bd90      	pop	{r4, r7, pc}
 8004e6c:	ffff8080 	.word	0xffff8080

08004e70 <USB_EPSetStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004e70:	b490      	push	{r4, r7}
 8004e72:	b082      	sub	sp, #8
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	6078      	str	r0, [r7, #4]
 8004e78:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8004e7a:	683b      	ldr	r3, [r7, #0]
 8004e7c:	785b      	ldrb	r3, [r3, #1]
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d018      	beq.n	8004eb4 <USB_EPSetStall+0x44>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8004e82:	687a      	ldr	r2, [r7, #4]
 8004e84:	683b      	ldr	r3, [r7, #0]
 8004e86:	781b      	ldrb	r3, [r3, #0]
 8004e88:	009b      	lsls	r3, r3, #2
 8004e8a:	4413      	add	r3, r2
 8004e8c:	881b      	ldrh	r3, [r3, #0]
 8004e8e:	b29b      	uxth	r3, r3
 8004e90:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e94:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004e98:	b29c      	uxth	r4, r3
 8004e9a:	f084 0310 	eor.w	r3, r4, #16
 8004e9e:	b29c      	uxth	r4, r3
 8004ea0:	687a      	ldr	r2, [r7, #4]
 8004ea2:	683b      	ldr	r3, [r7, #0]
 8004ea4:	781b      	ldrb	r3, [r3, #0]
 8004ea6:	009b      	lsls	r3, r3, #2
 8004ea8:	441a      	add	r2, r3
 8004eaa:	4b11      	ldr	r3, [pc, #68]	; (8004ef0 <USB_EPSetStall+0x80>)
 8004eac:	4323      	orrs	r3, r4
 8004eae:	b29b      	uxth	r3, r3
 8004eb0:	8013      	strh	r3, [r2, #0]
 8004eb2:	e017      	b.n	8004ee4 <USB_EPSetStall+0x74>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8004eb4:	687a      	ldr	r2, [r7, #4]
 8004eb6:	683b      	ldr	r3, [r7, #0]
 8004eb8:	781b      	ldrb	r3, [r3, #0]
 8004eba:	009b      	lsls	r3, r3, #2
 8004ebc:	4413      	add	r3, r2
 8004ebe:	881b      	ldrh	r3, [r3, #0]
 8004ec0:	b29b      	uxth	r3, r3
 8004ec2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004ec6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004eca:	b29c      	uxth	r4, r3
 8004ecc:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8004ed0:	b29c      	uxth	r4, r3
 8004ed2:	687a      	ldr	r2, [r7, #4]
 8004ed4:	683b      	ldr	r3, [r7, #0]
 8004ed6:	781b      	ldrb	r3, [r3, #0]
 8004ed8:	009b      	lsls	r3, r3, #2
 8004eda:	441a      	add	r2, r3
 8004edc:	4b04      	ldr	r3, [pc, #16]	; (8004ef0 <USB_EPSetStall+0x80>)
 8004ede:	4323      	orrs	r3, r4
 8004ee0:	b29b      	uxth	r3, r3
 8004ee2:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8004ee4:	2300      	movs	r3, #0
}
 8004ee6:	4618      	mov	r0, r3
 8004ee8:	3708      	adds	r7, #8
 8004eea:	46bd      	mov	sp, r7
 8004eec:	bc90      	pop	{r4, r7}
 8004eee:	4770      	bx	lr
 8004ef0:	ffff8080 	.word	0xffff8080

08004ef4 <USB_EPClearStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004ef4:	b490      	push	{r4, r7}
 8004ef6:	b082      	sub	sp, #8
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	6078      	str	r0, [r7, #4]
 8004efc:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8004efe:	683b      	ldr	r3, [r7, #0]
 8004f00:	7b1b      	ldrb	r3, [r3, #12]
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d17d      	bne.n	8005002 <USB_EPClearStall+0x10e>
  {
    if (ep->is_in != 0U)
 8004f06:	683b      	ldr	r3, [r7, #0]
 8004f08:	785b      	ldrb	r3, [r3, #1]
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d03d      	beq.n	8004f8a <USB_EPClearStall+0x96>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004f0e:	687a      	ldr	r2, [r7, #4]
 8004f10:	683b      	ldr	r3, [r7, #0]
 8004f12:	781b      	ldrb	r3, [r3, #0]
 8004f14:	009b      	lsls	r3, r3, #2
 8004f16:	4413      	add	r3, r2
 8004f18:	881b      	ldrh	r3, [r3, #0]
 8004f1a:	b29c      	uxth	r4, r3
 8004f1c:	4623      	mov	r3, r4
 8004f1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d014      	beq.n	8004f50 <USB_EPClearStall+0x5c>
 8004f26:	687a      	ldr	r2, [r7, #4]
 8004f28:	683b      	ldr	r3, [r7, #0]
 8004f2a:	781b      	ldrb	r3, [r3, #0]
 8004f2c:	009b      	lsls	r3, r3, #2
 8004f2e:	4413      	add	r3, r2
 8004f30:	881b      	ldrh	r3, [r3, #0]
 8004f32:	b29b      	uxth	r3, r3
 8004f34:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f38:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f3c:	b29c      	uxth	r4, r3
 8004f3e:	687a      	ldr	r2, [r7, #4]
 8004f40:	683b      	ldr	r3, [r7, #0]
 8004f42:	781b      	ldrb	r3, [r3, #0]
 8004f44:	009b      	lsls	r3, r3, #2
 8004f46:	441a      	add	r2, r3
 8004f48:	4b31      	ldr	r3, [pc, #196]	; (8005010 <USB_EPClearStall+0x11c>)
 8004f4a:	4323      	orrs	r3, r4
 8004f4c:	b29b      	uxth	r3, r3
 8004f4e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004f50:	683b      	ldr	r3, [r7, #0]
 8004f52:	78db      	ldrb	r3, [r3, #3]
 8004f54:	2b01      	cmp	r3, #1
 8004f56:	d054      	beq.n	8005002 <USB_EPClearStall+0x10e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004f58:	687a      	ldr	r2, [r7, #4]
 8004f5a:	683b      	ldr	r3, [r7, #0]
 8004f5c:	781b      	ldrb	r3, [r3, #0]
 8004f5e:	009b      	lsls	r3, r3, #2
 8004f60:	4413      	add	r3, r2
 8004f62:	881b      	ldrh	r3, [r3, #0]
 8004f64:	b29b      	uxth	r3, r3
 8004f66:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f6a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004f6e:	b29c      	uxth	r4, r3
 8004f70:	f084 0320 	eor.w	r3, r4, #32
 8004f74:	b29c      	uxth	r4, r3
 8004f76:	687a      	ldr	r2, [r7, #4]
 8004f78:	683b      	ldr	r3, [r7, #0]
 8004f7a:	781b      	ldrb	r3, [r3, #0]
 8004f7c:	009b      	lsls	r3, r3, #2
 8004f7e:	441a      	add	r2, r3
 8004f80:	4b24      	ldr	r3, [pc, #144]	; (8005014 <USB_EPClearStall+0x120>)
 8004f82:	4323      	orrs	r3, r4
 8004f84:	b29b      	uxth	r3, r3
 8004f86:	8013      	strh	r3, [r2, #0]
 8004f88:	e03b      	b.n	8005002 <USB_EPClearStall+0x10e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004f8a:	687a      	ldr	r2, [r7, #4]
 8004f8c:	683b      	ldr	r3, [r7, #0]
 8004f8e:	781b      	ldrb	r3, [r3, #0]
 8004f90:	009b      	lsls	r3, r3, #2
 8004f92:	4413      	add	r3, r2
 8004f94:	881b      	ldrh	r3, [r3, #0]
 8004f96:	b29c      	uxth	r4, r3
 8004f98:	4623      	mov	r3, r4
 8004f9a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d014      	beq.n	8004fcc <USB_EPClearStall+0xd8>
 8004fa2:	687a      	ldr	r2, [r7, #4]
 8004fa4:	683b      	ldr	r3, [r7, #0]
 8004fa6:	781b      	ldrb	r3, [r3, #0]
 8004fa8:	009b      	lsls	r3, r3, #2
 8004faa:	4413      	add	r3, r2
 8004fac:	881b      	ldrh	r3, [r3, #0]
 8004fae:	b29b      	uxth	r3, r3
 8004fb0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004fb4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fb8:	b29c      	uxth	r4, r3
 8004fba:	687a      	ldr	r2, [r7, #4]
 8004fbc:	683b      	ldr	r3, [r7, #0]
 8004fbe:	781b      	ldrb	r3, [r3, #0]
 8004fc0:	009b      	lsls	r3, r3, #2
 8004fc2:	441a      	add	r2, r3
 8004fc4:	4b14      	ldr	r3, [pc, #80]	; (8005018 <USB_EPClearStall+0x124>)
 8004fc6:	4323      	orrs	r3, r4
 8004fc8:	b29b      	uxth	r3, r3
 8004fca:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004fcc:	687a      	ldr	r2, [r7, #4]
 8004fce:	683b      	ldr	r3, [r7, #0]
 8004fd0:	781b      	ldrb	r3, [r3, #0]
 8004fd2:	009b      	lsls	r3, r3, #2
 8004fd4:	4413      	add	r3, r2
 8004fd6:	881b      	ldrh	r3, [r3, #0]
 8004fd8:	b29b      	uxth	r3, r3
 8004fda:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004fde:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fe2:	b29c      	uxth	r4, r3
 8004fe4:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8004fe8:	b29c      	uxth	r4, r3
 8004fea:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8004fee:	b29c      	uxth	r4, r3
 8004ff0:	687a      	ldr	r2, [r7, #4]
 8004ff2:	683b      	ldr	r3, [r7, #0]
 8004ff4:	781b      	ldrb	r3, [r3, #0]
 8004ff6:	009b      	lsls	r3, r3, #2
 8004ff8:	441a      	add	r2, r3
 8004ffa:	4b06      	ldr	r3, [pc, #24]	; (8005014 <USB_EPClearStall+0x120>)
 8004ffc:	4323      	orrs	r3, r4
 8004ffe:	b29b      	uxth	r3, r3
 8005000:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8005002:	2300      	movs	r3, #0
}
 8005004:	4618      	mov	r0, r3
 8005006:	3708      	adds	r7, #8
 8005008:	46bd      	mov	sp, r7
 800500a:	bc90      	pop	{r4, r7}
 800500c:	4770      	bx	lr
 800500e:	bf00      	nop
 8005010:	ffff80c0 	.word	0xffff80c0
 8005014:	ffff8080 	.word	0xffff8080
 8005018:	ffffc080 	.word	0xffffc080

0800501c <USB_SetDevAddress>:
  * @param  address : new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800501c:	b480      	push	{r7}
 800501e:	b083      	sub	sp, #12
 8005020:	af00      	add	r7, sp, #0
 8005022:	6078      	str	r0, [r7, #4]
 8005024:	460b      	mov	r3, r1
 8005026:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8005028:	78fb      	ldrb	r3, [r7, #3]
 800502a:	2b00      	cmp	r3, #0
 800502c:	d103      	bne.n	8005036 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = USB_DADDR_EF;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	2280      	movs	r2, #128	; 0x80
 8005032:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8005036:	2300      	movs	r3, #0
}
 8005038:	4618      	mov	r0, r3
 800503a:	370c      	adds	r7, #12
 800503c:	46bd      	mov	sp, r7
 800503e:	bc80      	pop	{r7}
 8005040:	4770      	bx	lr

08005042 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8005042:	b480      	push	{r7}
 8005044:	b083      	sub	sp, #12
 8005046:	af00      	add	r7, sp, #0
 8005048:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800504a:	2300      	movs	r3, #0
}
 800504c:	4618      	mov	r0, r3
 800504e:	370c      	adds	r7, #12
 8005050:	46bd      	mov	sp, r7
 8005052:	bc80      	pop	{r7}
 8005054:	4770      	bx	lr

08005056 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8005056:	b480      	push	{r7}
 8005058:	b083      	sub	sp, #12
 800505a:	af00      	add	r7, sp, #0
 800505c:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800505e:	2300      	movs	r3, #0
}
 8005060:	4618      	mov	r0, r3
 8005062:	370c      	adds	r7, #12
 8005064:	46bd      	mov	sp, r7
 8005066:	bc80      	pop	{r7}
 8005068:	4770      	bx	lr

0800506a <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx : Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 800506a:	b480      	push	{r7}
 800506c:	b085      	sub	sp, #20
 800506e:	af00      	add	r7, sp, #0
 8005070:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005078:	b29b      	uxth	r3, r3
 800507a:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800507c:	68fb      	ldr	r3, [r7, #12]
}
 800507e:	4618      	mov	r0, r3
 8005080:	3714      	adds	r7, #20
 8005082:	46bd      	mov	sp, r7
 8005084:	bc80      	pop	{r7}
 8005086:	4770      	bx	lr

08005088 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8005088:	b480      	push	{r7}
 800508a:	b083      	sub	sp, #12
 800508c:	af00      	add	r7, sp, #0
 800508e:	6078      	str	r0, [r7, #4]
 8005090:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8005092:	2300      	movs	r3, #0
}
 8005094:	4618      	mov	r0, r3
 8005096:	370c      	adds	r7, #12
 8005098:	46bd      	mov	sp, r7
 800509a:	bc80      	pop	{r7}
 800509c:	4770      	bx	lr

0800509e <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800509e:	b480      	push	{r7}
 80050a0:	b08d      	sub	sp, #52	; 0x34
 80050a2:	af00      	add	r7, sp, #0
 80050a4:	60f8      	str	r0, [r7, #12]
 80050a6:	60b9      	str	r1, [r7, #8]
 80050a8:	4611      	mov	r1, r2
 80050aa:	461a      	mov	r2, r3
 80050ac:	460b      	mov	r3, r1
 80050ae:	80fb      	strh	r3, [r7, #6]
 80050b0:	4613      	mov	r3, r2
 80050b2:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80050b4:	88bb      	ldrh	r3, [r7, #4]
 80050b6:	3301      	adds	r3, #1
 80050b8:	085b      	lsrs	r3, r3, #1
 80050ba:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80050c0:	68bb      	ldr	r3, [r7, #8]
 80050c2:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80050c4:	88fb      	ldrh	r3, [r7, #6]
 80050c6:	005a      	lsls	r2, r3, #1
 80050c8:	69fb      	ldr	r3, [r7, #28]
 80050ca:	4413      	add	r3, r2
 80050cc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80050d0:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 80050d2:	6a3b      	ldr	r3, [r7, #32]
 80050d4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80050d6:	e01e      	b.n	8005116 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 80050d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050da:	781b      	ldrb	r3, [r3, #0]
 80050dc:	61bb      	str	r3, [r7, #24]
    pBuf++;
 80050de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050e0:	3301      	adds	r3, #1
 80050e2:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 80050e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050e6:	781b      	ldrb	r3, [r3, #0]
 80050e8:	b29b      	uxth	r3, r3
 80050ea:	021b      	lsls	r3, r3, #8
 80050ec:	b29b      	uxth	r3, r3
 80050ee:	461a      	mov	r2, r3
 80050f0:	69bb      	ldr	r3, [r7, #24]
 80050f2:	4313      	orrs	r3, r2
 80050f4:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 80050f6:	697b      	ldr	r3, [r7, #20]
 80050f8:	b29a      	uxth	r2, r3
 80050fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050fc:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 80050fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005100:	3302      	adds	r3, #2
 8005102:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 8005104:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005106:	3302      	adds	r3, #2
 8005108:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 800510a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800510c:	3301      	adds	r3, #1
 800510e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8005110:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005112:	3b01      	subs	r3, #1
 8005114:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005116:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005118:	2b00      	cmp	r3, #0
 800511a:	d1dd      	bne.n	80050d8 <USB_WritePMA+0x3a>
  }
}
 800511c:	bf00      	nop
 800511e:	3734      	adds	r7, #52	; 0x34
 8005120:	46bd      	mov	sp, r7
 8005122:	bc80      	pop	{r7}
 8005124:	4770      	bx	lr

08005126 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8005126:	b480      	push	{r7}
 8005128:	b08b      	sub	sp, #44	; 0x2c
 800512a:	af00      	add	r7, sp, #0
 800512c:	60f8      	str	r0, [r7, #12]
 800512e:	60b9      	str	r1, [r7, #8]
 8005130:	4611      	mov	r1, r2
 8005132:	461a      	mov	r2, r3
 8005134:	460b      	mov	r3, r1
 8005136:	80fb      	strh	r3, [r7, #6]
 8005138:	4613      	mov	r3, r2
 800513a:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800513c:	88bb      	ldrh	r3, [r7, #4]
 800513e:	085b      	lsrs	r3, r3, #1
 8005140:	b29b      	uxth	r3, r3
 8005142:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8005148:	68bb      	ldr	r3, [r7, #8]
 800514a:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800514c:	88fb      	ldrh	r3, [r7, #6]
 800514e:	005a      	lsls	r2, r3, #1
 8005150:	697b      	ldr	r3, [r7, #20]
 8005152:	4413      	add	r3, r2
 8005154:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005158:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 800515a:	69bb      	ldr	r3, [r7, #24]
 800515c:	627b      	str	r3, [r7, #36]	; 0x24
 800515e:	e01b      	b.n	8005198 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8005160:	6a3b      	ldr	r3, [r7, #32]
 8005162:	881b      	ldrh	r3, [r3, #0]
 8005164:	b29b      	uxth	r3, r3
 8005166:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8005168:	6a3b      	ldr	r3, [r7, #32]
 800516a:	3302      	adds	r3, #2
 800516c:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800516e:	693b      	ldr	r3, [r7, #16]
 8005170:	b2da      	uxtb	r2, r3
 8005172:	69fb      	ldr	r3, [r7, #28]
 8005174:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8005176:	69fb      	ldr	r3, [r7, #28]
 8005178:	3301      	adds	r3, #1
 800517a:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 800517c:	693b      	ldr	r3, [r7, #16]
 800517e:	0a1b      	lsrs	r3, r3, #8
 8005180:	b2da      	uxtb	r2, r3
 8005182:	69fb      	ldr	r3, [r7, #28]
 8005184:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8005186:	69fb      	ldr	r3, [r7, #28]
 8005188:	3301      	adds	r3, #1
 800518a:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 800518c:	6a3b      	ldr	r3, [r7, #32]
 800518e:	3302      	adds	r3, #2
 8005190:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 8005192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005194:	3b01      	subs	r3, #1
 8005196:	627b      	str	r3, [r7, #36]	; 0x24
 8005198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800519a:	2b00      	cmp	r3, #0
 800519c:	d1e0      	bne.n	8005160 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 800519e:	88bb      	ldrh	r3, [r7, #4]
 80051a0:	f003 0301 	and.w	r3, r3, #1
 80051a4:	b29b      	uxth	r3, r3
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d007      	beq.n	80051ba <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 80051aa:	6a3b      	ldr	r3, [r7, #32]
 80051ac:	881b      	ldrh	r3, [r3, #0]
 80051ae:	b29b      	uxth	r3, r3
 80051b0:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80051b2:	693b      	ldr	r3, [r7, #16]
 80051b4:	b2da      	uxtb	r2, r3
 80051b6:	69fb      	ldr	r3, [r7, #28]
 80051b8:	701a      	strb	r2, [r3, #0]
  }
}
 80051ba:	bf00      	nop
 80051bc:	372c      	adds	r7, #44	; 0x2c
 80051be:	46bd      	mov	sp, r7
 80051c0:	bc80      	pop	{r7}
 80051c2:	4770      	bx	lr

080051c4 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80051c4:	b580      	push	{r7, lr}
 80051c6:	b084      	sub	sp, #16
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	6078      	str	r0, [r7, #4]
 80051cc:	460b      	mov	r3, r1
 80051ce:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80051d0:	2300      	movs	r3, #0
 80051d2:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	7c1b      	ldrb	r3, [r3, #16]
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d115      	bne.n	8005208 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80051dc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80051e0:	2202      	movs	r2, #2
 80051e2:	2181      	movs	r1, #129	; 0x81
 80051e4:	6878      	ldr	r0, [r7, #4]
 80051e6:	f001 fe7a 	bl	8006ede <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	2201      	movs	r2, #1
 80051ee:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80051f0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80051f4:	2202      	movs	r2, #2
 80051f6:	2101      	movs	r1, #1
 80051f8:	6878      	ldr	r0, [r7, #4]
 80051fa:	f001 fe70 	bl	8006ede <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	2201      	movs	r2, #1
 8005202:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8005206:	e012      	b.n	800522e <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005208:	2340      	movs	r3, #64	; 0x40
 800520a:	2202      	movs	r2, #2
 800520c:	2181      	movs	r1, #129	; 0x81
 800520e:	6878      	ldr	r0, [r7, #4]
 8005210:	f001 fe65 	bl	8006ede <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	2201      	movs	r2, #1
 8005218:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800521a:	2340      	movs	r3, #64	; 0x40
 800521c:	2202      	movs	r2, #2
 800521e:	2101      	movs	r1, #1
 8005220:	6878      	ldr	r0, [r7, #4]
 8005222:	f001 fe5c 	bl	8006ede <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	2201      	movs	r2, #1
 800522a:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800522e:	2308      	movs	r3, #8
 8005230:	2203      	movs	r2, #3
 8005232:	2182      	movs	r1, #130	; 0x82
 8005234:	6878      	ldr	r0, [r7, #4]
 8005236:	f001 fe52 	bl	8006ede <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	2201      	movs	r2, #1
 800523e:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8005240:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8005244:	f001 ff6c 	bl	8007120 <USBD_static_malloc>
 8005248:	4602      	mov	r2, r0
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005256:	2b00      	cmp	r3, #0
 8005258:	d102      	bne.n	8005260 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 800525a:	2301      	movs	r3, #1
 800525c:	73fb      	strb	r3, [r7, #15]
 800525e:	e026      	b.n	80052ae <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005266:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8005272:	68bb      	ldr	r3, [r7, #8]
 8005274:	2200      	movs	r2, #0
 8005276:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 800527a:	68bb      	ldr	r3, [r7, #8]
 800527c:	2200      	movs	r2, #0
 800527e:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	7c1b      	ldrb	r3, [r3, #16]
 8005286:	2b00      	cmp	r3, #0
 8005288:	d109      	bne.n	800529e <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800528a:	68bb      	ldr	r3, [r7, #8]
 800528c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005290:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005294:	2101      	movs	r1, #1
 8005296:	6878      	ldr	r0, [r7, #4]
 8005298:	f001 ff0b 	bl	80070b2 <USBD_LL_PrepareReceive>
 800529c:	e007      	b.n	80052ae <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800529e:	68bb      	ldr	r3, [r7, #8]
 80052a0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80052a4:	2340      	movs	r3, #64	; 0x40
 80052a6:	2101      	movs	r1, #1
 80052a8:	6878      	ldr	r0, [r7, #4]
 80052aa:	f001 ff02 	bl	80070b2 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 80052ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80052b0:	4618      	mov	r0, r3
 80052b2:	3710      	adds	r7, #16
 80052b4:	46bd      	mov	sp, r7
 80052b6:	bd80      	pop	{r7, pc}

080052b8 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80052b8:	b580      	push	{r7, lr}
 80052ba:	b084      	sub	sp, #16
 80052bc:	af00      	add	r7, sp, #0
 80052be:	6078      	str	r0, [r7, #4]
 80052c0:	460b      	mov	r3, r1
 80052c2:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80052c4:	2300      	movs	r3, #0
 80052c6:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80052c8:	2181      	movs	r1, #129	; 0x81
 80052ca:	6878      	ldr	r0, [r7, #4]
 80052cc:	f001 fe2d 	bl	8006f2a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	2200      	movs	r2, #0
 80052d4:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80052d6:	2101      	movs	r1, #1
 80052d8:	6878      	ldr	r0, [r7, #4]
 80052da:	f001 fe26 	bl	8006f2a <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	2200      	movs	r2, #0
 80052e2:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80052e6:	2182      	movs	r1, #130	; 0x82
 80052e8:	6878      	ldr	r0, [r7, #4]
 80052ea:	f001 fe1e 	bl	8006f2a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	2200      	movs	r2, #0
 80052f2:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d00e      	beq.n	800531c <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005304:	685b      	ldr	r3, [r3, #4]
 8005306:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800530e:	4618      	mov	r0, r3
 8005310:	f001 ff12 	bl	8007138 <USBD_static_free>
    pdev->pClassData = NULL;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	2200      	movs	r2, #0
 8005318:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 800531c:	7bfb      	ldrb	r3, [r7, #15]
}
 800531e:	4618      	mov	r0, r3
 8005320:	3710      	adds	r7, #16
 8005322:	46bd      	mov	sp, r7
 8005324:	bd80      	pop	{r7, pc}

08005326 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8005326:	b580      	push	{r7, lr}
 8005328:	b086      	sub	sp, #24
 800532a:	af00      	add	r7, sp, #0
 800532c:	6078      	str	r0, [r7, #4]
 800532e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005336:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8005338:	2300      	movs	r3, #0
 800533a:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800533c:	2300      	movs	r3, #0
 800533e:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8005340:	2300      	movs	r3, #0
 8005342:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005344:	683b      	ldr	r3, [r7, #0]
 8005346:	781b      	ldrb	r3, [r3, #0]
 8005348:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800534c:	2b00      	cmp	r3, #0
 800534e:	d039      	beq.n	80053c4 <USBD_CDC_Setup+0x9e>
 8005350:	2b20      	cmp	r3, #32
 8005352:	d17c      	bne.n	800544e <USBD_CDC_Setup+0x128>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8005354:	683b      	ldr	r3, [r7, #0]
 8005356:	88db      	ldrh	r3, [r3, #6]
 8005358:	2b00      	cmp	r3, #0
 800535a:	d029      	beq.n	80053b0 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 800535c:	683b      	ldr	r3, [r7, #0]
 800535e:	781b      	ldrb	r3, [r3, #0]
 8005360:	b25b      	sxtb	r3, r3
 8005362:	2b00      	cmp	r3, #0
 8005364:	da11      	bge.n	800538a <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800536c:	689b      	ldr	r3, [r3, #8]
 800536e:	683a      	ldr	r2, [r7, #0]
 8005370:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8005372:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005374:	683a      	ldr	r2, [r7, #0]
 8005376:	88d2      	ldrh	r2, [r2, #6]
 8005378:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800537a:	6939      	ldr	r1, [r7, #16]
 800537c:	683b      	ldr	r3, [r7, #0]
 800537e:	88db      	ldrh	r3, [r3, #6]
 8005380:	461a      	mov	r2, r3
 8005382:	6878      	ldr	r0, [r7, #4]
 8005384:	f001 f9f6 	bl	8006774 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8005388:	e068      	b.n	800545c <USBD_CDC_Setup+0x136>
          hcdc->CmdOpCode = req->bRequest;
 800538a:	683b      	ldr	r3, [r7, #0]
 800538c:	785a      	ldrb	r2, [r3, #1]
 800538e:	693b      	ldr	r3, [r7, #16]
 8005390:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8005394:	683b      	ldr	r3, [r7, #0]
 8005396:	88db      	ldrh	r3, [r3, #6]
 8005398:	b2da      	uxtb	r2, r3
 800539a:	693b      	ldr	r3, [r7, #16]
 800539c:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80053a0:	6939      	ldr	r1, [r7, #16]
 80053a2:	683b      	ldr	r3, [r7, #0]
 80053a4:	88db      	ldrh	r3, [r3, #6]
 80053a6:	461a      	mov	r2, r3
 80053a8:	6878      	ldr	r0, [r7, #4]
 80053aa:	f001 fa11 	bl	80067d0 <USBD_CtlPrepareRx>
      break;
 80053ae:	e055      	b.n	800545c <USBD_CDC_Setup+0x136>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80053b6:	689b      	ldr	r3, [r3, #8]
 80053b8:	683a      	ldr	r2, [r7, #0]
 80053ba:	7850      	ldrb	r0, [r2, #1]
 80053bc:	2200      	movs	r2, #0
 80053be:	6839      	ldr	r1, [r7, #0]
 80053c0:	4798      	blx	r3
      break;
 80053c2:	e04b      	b.n	800545c <USBD_CDC_Setup+0x136>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80053c4:	683b      	ldr	r3, [r7, #0]
 80053c6:	785b      	ldrb	r3, [r3, #1]
 80053c8:	2b0a      	cmp	r3, #10
 80053ca:	d017      	beq.n	80053fc <USBD_CDC_Setup+0xd6>
 80053cc:	2b0b      	cmp	r3, #11
 80053ce:	d029      	beq.n	8005424 <USBD_CDC_Setup+0xfe>
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d133      	bne.n	800543c <USBD_CDC_Setup+0x116>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80053da:	2b03      	cmp	r3, #3
 80053dc:	d107      	bne.n	80053ee <USBD_CDC_Setup+0xc8>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 80053de:	f107 030c 	add.w	r3, r7, #12
 80053e2:	2202      	movs	r2, #2
 80053e4:	4619      	mov	r1, r3
 80053e6:	6878      	ldr	r0, [r7, #4]
 80053e8:	f001 f9c4 	bl	8006774 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80053ec:	e02e      	b.n	800544c <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 80053ee:	6839      	ldr	r1, [r7, #0]
 80053f0:	6878      	ldr	r0, [r7, #4]
 80053f2:	f001 f955 	bl	80066a0 <USBD_CtlError>
            ret = USBD_FAIL;
 80053f6:	2302      	movs	r3, #2
 80053f8:	75fb      	strb	r3, [r7, #23]
          break;
 80053fa:	e027      	b.n	800544c <USBD_CDC_Setup+0x126>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005402:	2b03      	cmp	r3, #3
 8005404:	d107      	bne.n	8005416 <USBD_CDC_Setup+0xf0>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8005406:	f107 030f 	add.w	r3, r7, #15
 800540a:	2201      	movs	r2, #1
 800540c:	4619      	mov	r1, r3
 800540e:	6878      	ldr	r0, [r7, #4]
 8005410:	f001 f9b0 	bl	8006774 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005414:	e01a      	b.n	800544c <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 8005416:	6839      	ldr	r1, [r7, #0]
 8005418:	6878      	ldr	r0, [r7, #4]
 800541a:	f001 f941 	bl	80066a0 <USBD_CtlError>
            ret = USBD_FAIL;
 800541e:	2302      	movs	r3, #2
 8005420:	75fb      	strb	r3, [r7, #23]
          break;
 8005422:	e013      	b.n	800544c <USBD_CDC_Setup+0x126>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800542a:	2b03      	cmp	r3, #3
 800542c:	d00d      	beq.n	800544a <USBD_CDC_Setup+0x124>
          {
            USBD_CtlError(pdev, req);
 800542e:	6839      	ldr	r1, [r7, #0]
 8005430:	6878      	ldr	r0, [r7, #4]
 8005432:	f001 f935 	bl	80066a0 <USBD_CtlError>
            ret = USBD_FAIL;
 8005436:	2302      	movs	r3, #2
 8005438:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800543a:	e006      	b.n	800544a <USBD_CDC_Setup+0x124>

        default:
          USBD_CtlError(pdev, req);
 800543c:	6839      	ldr	r1, [r7, #0]
 800543e:	6878      	ldr	r0, [r7, #4]
 8005440:	f001 f92e 	bl	80066a0 <USBD_CtlError>
          ret = USBD_FAIL;
 8005444:	2302      	movs	r3, #2
 8005446:	75fb      	strb	r3, [r7, #23]
          break;
 8005448:	e000      	b.n	800544c <USBD_CDC_Setup+0x126>
          break;
 800544a:	bf00      	nop
      }
      break;
 800544c:	e006      	b.n	800545c <USBD_CDC_Setup+0x136>

    default:
      USBD_CtlError(pdev, req);
 800544e:	6839      	ldr	r1, [r7, #0]
 8005450:	6878      	ldr	r0, [r7, #4]
 8005452:	f001 f925 	bl	80066a0 <USBD_CtlError>
      ret = USBD_FAIL;
 8005456:	2302      	movs	r3, #2
 8005458:	75fb      	strb	r3, [r7, #23]
      break;
 800545a:	bf00      	nop
  }

  return ret;
 800545c:	7dfb      	ldrb	r3, [r7, #23]
}
 800545e:	4618      	mov	r0, r3
 8005460:	3718      	adds	r7, #24
 8005462:	46bd      	mov	sp, r7
 8005464:	bd80      	pop	{r7, pc}

08005466 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005466:	b580      	push	{r7, lr}
 8005468:	b084      	sub	sp, #16
 800546a:	af00      	add	r7, sp, #0
 800546c:	6078      	str	r0, [r7, #4]
 800546e:	460b      	mov	r3, r1
 8005470:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005478:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005480:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005488:	2b00      	cmp	r3, #0
 800548a:	d037      	beq.n	80054fc <USBD_CDC_DataIn+0x96>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800548c:	78fa      	ldrb	r2, [r7, #3]
 800548e:	6879      	ldr	r1, [r7, #4]
 8005490:	4613      	mov	r3, r2
 8005492:	009b      	lsls	r3, r3, #2
 8005494:	4413      	add	r3, r2
 8005496:	009b      	lsls	r3, r3, #2
 8005498:	440b      	add	r3, r1
 800549a:	331c      	adds	r3, #28
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d026      	beq.n	80054f0 <USBD_CDC_DataIn+0x8a>
 80054a2:	78fa      	ldrb	r2, [r7, #3]
 80054a4:	6879      	ldr	r1, [r7, #4]
 80054a6:	4613      	mov	r3, r2
 80054a8:	009b      	lsls	r3, r3, #2
 80054aa:	4413      	add	r3, r2
 80054ac:	009b      	lsls	r3, r3, #2
 80054ae:	440b      	add	r3, r1
 80054b0:	331c      	adds	r3, #28
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	78fa      	ldrb	r2, [r7, #3]
 80054b6:	68b9      	ldr	r1, [r7, #8]
 80054b8:	0152      	lsls	r2, r2, #5
 80054ba:	440a      	add	r2, r1
 80054bc:	3238      	adds	r2, #56	; 0x38
 80054be:	6812      	ldr	r2, [r2, #0]
 80054c0:	fbb3 f1f2 	udiv	r1, r3, r2
 80054c4:	fb02 f201 	mul.w	r2, r2, r1
 80054c8:	1a9b      	subs	r3, r3, r2
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d110      	bne.n	80054f0 <USBD_CDC_DataIn+0x8a>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 80054ce:	78fa      	ldrb	r2, [r7, #3]
 80054d0:	6879      	ldr	r1, [r7, #4]
 80054d2:	4613      	mov	r3, r2
 80054d4:	009b      	lsls	r3, r3, #2
 80054d6:	4413      	add	r3, r2
 80054d8:	009b      	lsls	r3, r3, #2
 80054da:	440b      	add	r3, r1
 80054dc:	331c      	adds	r3, #28
 80054de:	2200      	movs	r2, #0
 80054e0:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80054e2:	78f9      	ldrb	r1, [r7, #3]
 80054e4:	2300      	movs	r3, #0
 80054e6:	2200      	movs	r2, #0
 80054e8:	6878      	ldr	r0, [r7, #4]
 80054ea:	f001 fdbf 	bl	800706c <USBD_LL_Transmit>
 80054ee:	e003      	b.n	80054f8 <USBD_CDC_DataIn+0x92>
    }
    else
    {
      hcdc->TxState = 0U;
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	2200      	movs	r2, #0
 80054f4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 80054f8:	2300      	movs	r3, #0
 80054fa:	e000      	b.n	80054fe <USBD_CDC_DataIn+0x98>
  }
  else
  {
    return USBD_FAIL;
 80054fc:	2302      	movs	r3, #2
  }
}
 80054fe:	4618      	mov	r0, r3
 8005500:	3710      	adds	r7, #16
 8005502:	46bd      	mov	sp, r7
 8005504:	bd80      	pop	{r7, pc}

08005506 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005506:	b580      	push	{r7, lr}
 8005508:	b084      	sub	sp, #16
 800550a:	af00      	add	r7, sp, #0
 800550c:	6078      	str	r0, [r7, #4]
 800550e:	460b      	mov	r3, r1
 8005510:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005518:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800551a:	78fb      	ldrb	r3, [r7, #3]
 800551c:	4619      	mov	r1, r3
 800551e:	6878      	ldr	r0, [r7, #4]
 8005520:	f001 fdea 	bl	80070f8 <USBD_LL_GetRxDataSize>
 8005524:	4602      	mov	r2, r0
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005532:	2b00      	cmp	r3, #0
 8005534:	d00d      	beq.n	8005552 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800553c:	68db      	ldr	r3, [r3, #12]
 800553e:	68fa      	ldr	r2, [r7, #12]
 8005540:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8005544:	68fa      	ldr	r2, [r7, #12]
 8005546:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800554a:	4611      	mov	r1, r2
 800554c:	4798      	blx	r3

    return USBD_OK;
 800554e:	2300      	movs	r3, #0
 8005550:	e000      	b.n	8005554 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8005552:	2302      	movs	r3, #2
  }
}
 8005554:	4618      	mov	r0, r3
 8005556:	3710      	adds	r7, #16
 8005558:	46bd      	mov	sp, r7
 800555a:	bd80      	pop	{r7, pc}

0800555c <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800555c:	b580      	push	{r7, lr}
 800555e:	b084      	sub	sp, #16
 8005560:	af00      	add	r7, sp, #0
 8005562:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800556a:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005572:	2b00      	cmp	r3, #0
 8005574:	d015      	beq.n	80055a2 <USBD_CDC_EP0_RxReady+0x46>
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800557c:	2bff      	cmp	r3, #255	; 0xff
 800557e:	d010      	beq.n	80055a2 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005586:	689b      	ldr	r3, [r3, #8]
 8005588:	68fa      	ldr	r2, [r7, #12]
 800558a:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 800558e:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8005590:	68fa      	ldr	r2, [r7, #12]
 8005592:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8005596:	b292      	uxth	r2, r2
 8005598:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	22ff      	movs	r2, #255	; 0xff
 800559e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 80055a2:	2300      	movs	r3, #0
}
 80055a4:	4618      	mov	r0, r3
 80055a6:	3710      	adds	r7, #16
 80055a8:	46bd      	mov	sp, r7
 80055aa:	bd80      	pop	{r7, pc}

080055ac <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80055ac:	b480      	push	{r7}
 80055ae:	b083      	sub	sp, #12
 80055b0:	af00      	add	r7, sp, #0
 80055b2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	2243      	movs	r2, #67	; 0x43
 80055b8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 80055ba:	4b03      	ldr	r3, [pc, #12]	; (80055c8 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 80055bc:	4618      	mov	r0, r3
 80055be:	370c      	adds	r7, #12
 80055c0:	46bd      	mov	sp, r7
 80055c2:	bc80      	pop	{r7}
 80055c4:	4770      	bx	lr
 80055c6:	bf00      	nop
 80055c8:	20000098 	.word	0x20000098

080055cc <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80055cc:	b480      	push	{r7}
 80055ce:	b083      	sub	sp, #12
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	2243      	movs	r2, #67	; 0x43
 80055d8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 80055da:	4b03      	ldr	r3, [pc, #12]	; (80055e8 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 80055dc:	4618      	mov	r0, r3
 80055de:	370c      	adds	r7, #12
 80055e0:	46bd      	mov	sp, r7
 80055e2:	bc80      	pop	{r7}
 80055e4:	4770      	bx	lr
 80055e6:	bf00      	nop
 80055e8:	20000054 	.word	0x20000054

080055ec <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80055ec:	b480      	push	{r7}
 80055ee:	b083      	sub	sp, #12
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	2243      	movs	r2, #67	; 0x43
 80055f8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 80055fa:	4b03      	ldr	r3, [pc, #12]	; (8005608 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80055fc:	4618      	mov	r0, r3
 80055fe:	370c      	adds	r7, #12
 8005600:	46bd      	mov	sp, r7
 8005602:	bc80      	pop	{r7}
 8005604:	4770      	bx	lr
 8005606:	bf00      	nop
 8005608:	200000dc 	.word	0x200000dc

0800560c <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800560c:	b480      	push	{r7}
 800560e:	b083      	sub	sp, #12
 8005610:	af00      	add	r7, sp, #0
 8005612:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	220a      	movs	r2, #10
 8005618:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800561a:	4b03      	ldr	r3, [pc, #12]	; (8005628 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800561c:	4618      	mov	r0, r3
 800561e:	370c      	adds	r7, #12
 8005620:	46bd      	mov	sp, r7
 8005622:	bc80      	pop	{r7}
 8005624:	4770      	bx	lr
 8005626:	bf00      	nop
 8005628:	20000010 	.word	0x20000010

0800562c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 800562c:	b480      	push	{r7}
 800562e:	b085      	sub	sp, #20
 8005630:	af00      	add	r7, sp, #0
 8005632:	6078      	str	r0, [r7, #4]
 8005634:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8005636:	2302      	movs	r3, #2
 8005638:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 800563a:	683b      	ldr	r3, [r7, #0]
 800563c:	2b00      	cmp	r3, #0
 800563e:	d005      	beq.n	800564c <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	683a      	ldr	r2, [r7, #0]
 8005644:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8005648:	2300      	movs	r3, #0
 800564a:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800564c:	7bfb      	ldrb	r3, [r7, #15]
}
 800564e:	4618      	mov	r0, r3
 8005650:	3714      	adds	r7, #20
 8005652:	46bd      	mov	sp, r7
 8005654:	bc80      	pop	{r7}
 8005656:	4770      	bx	lr

08005658 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8005658:	b480      	push	{r7}
 800565a:	b087      	sub	sp, #28
 800565c:	af00      	add	r7, sp, #0
 800565e:	60f8      	str	r0, [r7, #12]
 8005660:	60b9      	str	r1, [r7, #8]
 8005662:	4613      	mov	r3, r2
 8005664:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800566c:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800566e:	697b      	ldr	r3, [r7, #20]
 8005670:	68ba      	ldr	r2, [r7, #8]
 8005672:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8005676:	88fa      	ldrh	r2, [r7, #6]
 8005678:	697b      	ldr	r3, [r7, #20]
 800567a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 800567e:	2300      	movs	r3, #0
}
 8005680:	4618      	mov	r0, r3
 8005682:	371c      	adds	r7, #28
 8005684:	46bd      	mov	sp, r7
 8005686:	bc80      	pop	{r7}
 8005688:	4770      	bx	lr

0800568a <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 800568a:	b480      	push	{r7}
 800568c:	b085      	sub	sp, #20
 800568e:	af00      	add	r7, sp, #0
 8005690:	6078      	str	r0, [r7, #4]
 8005692:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800569a:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	683a      	ldr	r2, [r7, #0]
 80056a0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 80056a4:	2300      	movs	r3, #0
}
 80056a6:	4618      	mov	r0, r3
 80056a8:	3714      	adds	r7, #20
 80056aa:	46bd      	mov	sp, r7
 80056ac:	bc80      	pop	{r7}
 80056ae:	4770      	bx	lr

080056b0 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80056b0:	b580      	push	{r7, lr}
 80056b2:	b084      	sub	sp, #16
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80056be:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d01c      	beq.n	8005704 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d115      	bne.n	8005700 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	2201      	movs	r2, #1
 80056d8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80056f2:	b29b      	uxth	r3, r3
 80056f4:	2181      	movs	r1, #129	; 0x81
 80056f6:	6878      	ldr	r0, [r7, #4]
 80056f8:	f001 fcb8 	bl	800706c <USBD_LL_Transmit>

      return USBD_OK;
 80056fc:	2300      	movs	r3, #0
 80056fe:	e002      	b.n	8005706 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8005700:	2301      	movs	r3, #1
 8005702:	e000      	b.n	8005706 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8005704:	2302      	movs	r3, #2
  }
}
 8005706:	4618      	mov	r0, r3
 8005708:	3710      	adds	r7, #16
 800570a:	46bd      	mov	sp, r7
 800570c:	bd80      	pop	{r7, pc}

0800570e <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800570e:	b580      	push	{r7, lr}
 8005710:	b084      	sub	sp, #16
 8005712:	af00      	add	r7, sp, #0
 8005714:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800571c:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005724:	2b00      	cmp	r3, #0
 8005726:	d017      	beq.n	8005758 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	7c1b      	ldrb	r3, [r3, #16]
 800572c:	2b00      	cmp	r3, #0
 800572e:	d109      	bne.n	8005744 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005736:	f44f 7300 	mov.w	r3, #512	; 0x200
 800573a:	2101      	movs	r1, #1
 800573c:	6878      	ldr	r0, [r7, #4]
 800573e:	f001 fcb8 	bl	80070b2 <USBD_LL_PrepareReceive>
 8005742:	e007      	b.n	8005754 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800574a:	2340      	movs	r3, #64	; 0x40
 800574c:	2101      	movs	r1, #1
 800574e:	6878      	ldr	r0, [r7, #4]
 8005750:	f001 fcaf 	bl	80070b2 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8005754:	2300      	movs	r3, #0
 8005756:	e000      	b.n	800575a <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8005758:	2302      	movs	r3, #2
  }
}
 800575a:	4618      	mov	r0, r3
 800575c:	3710      	adds	r7, #16
 800575e:	46bd      	mov	sp, r7
 8005760:	bd80      	pop	{r7, pc}

08005762 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005762:	b580      	push	{r7, lr}
 8005764:	b084      	sub	sp, #16
 8005766:	af00      	add	r7, sp, #0
 8005768:	60f8      	str	r0, [r7, #12]
 800576a:	60b9      	str	r1, [r7, #8]
 800576c:	4613      	mov	r3, r2
 800576e:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	2b00      	cmp	r3, #0
 8005774:	d101      	bne.n	800577a <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8005776:	2302      	movs	r3, #2
 8005778:	e01a      	b.n	80057b0 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005780:	2b00      	cmp	r3, #0
 8005782:	d003      	beq.n	800578c <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	2200      	movs	r2, #0
 8005788:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800578c:	68bb      	ldr	r3, [r7, #8]
 800578e:	2b00      	cmp	r3, #0
 8005790:	d003      	beq.n	800579a <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	68ba      	ldr	r2, [r7, #8]
 8005796:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	2201      	movs	r2, #1
 800579e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	79fa      	ldrb	r2, [r7, #7]
 80057a6:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 80057a8:	68f8      	ldr	r0, [r7, #12]
 80057aa:	f001 fb23 	bl	8006df4 <USBD_LL_Init>

  return USBD_OK;
 80057ae:	2300      	movs	r3, #0
}
 80057b0:	4618      	mov	r0, r3
 80057b2:	3710      	adds	r7, #16
 80057b4:	46bd      	mov	sp, r7
 80057b6:	bd80      	pop	{r7, pc}

080057b8 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80057b8:	b480      	push	{r7}
 80057ba:	b085      	sub	sp, #20
 80057bc:	af00      	add	r7, sp, #0
 80057be:	6078      	str	r0, [r7, #4]
 80057c0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 80057c2:	2300      	movs	r3, #0
 80057c4:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 80057c6:	683b      	ldr	r3, [r7, #0]
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d006      	beq.n	80057da <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	683a      	ldr	r2, [r7, #0]
 80057d0:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 80057d4:	2300      	movs	r3, #0
 80057d6:	73fb      	strb	r3, [r7, #15]
 80057d8:	e001      	b.n	80057de <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 80057da:	2302      	movs	r3, #2
 80057dc:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80057de:	7bfb      	ldrb	r3, [r7, #15]
}
 80057e0:	4618      	mov	r0, r3
 80057e2:	3714      	adds	r7, #20
 80057e4:	46bd      	mov	sp, r7
 80057e6:	bc80      	pop	{r7}
 80057e8:	4770      	bx	lr

080057ea <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 80057ea:	b580      	push	{r7, lr}
 80057ec:	b082      	sub	sp, #8
 80057ee:	af00      	add	r7, sp, #0
 80057f0:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 80057f2:	6878      	ldr	r0, [r7, #4]
 80057f4:	f001 fb58 	bl	8006ea8 <USBD_LL_Start>

  return USBD_OK;
 80057f8:	2300      	movs	r3, #0
}
 80057fa:	4618      	mov	r0, r3
 80057fc:	3708      	adds	r7, #8
 80057fe:	46bd      	mov	sp, r7
 8005800:	bd80      	pop	{r7, pc}

08005802 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8005802:	b480      	push	{r7}
 8005804:	b083      	sub	sp, #12
 8005806:	af00      	add	r7, sp, #0
 8005808:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800580a:	2300      	movs	r3, #0
}
 800580c:	4618      	mov	r0, r3
 800580e:	370c      	adds	r7, #12
 8005810:	46bd      	mov	sp, r7
 8005812:	bc80      	pop	{r7}
 8005814:	4770      	bx	lr

08005816 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8005816:	b580      	push	{r7, lr}
 8005818:	b084      	sub	sp, #16
 800581a:	af00      	add	r7, sp, #0
 800581c:	6078      	str	r0, [r7, #4]
 800581e:	460b      	mov	r3, r1
 8005820:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8005822:	2302      	movs	r3, #2
 8005824:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800582c:	2b00      	cmp	r3, #0
 800582e:	d00c      	beq.n	800584a <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	78fa      	ldrb	r2, [r7, #3]
 800583a:	4611      	mov	r1, r2
 800583c:	6878      	ldr	r0, [r7, #4]
 800583e:	4798      	blx	r3
 8005840:	4603      	mov	r3, r0
 8005842:	2b00      	cmp	r3, #0
 8005844:	d101      	bne.n	800584a <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8005846:	2300      	movs	r3, #0
 8005848:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800584a:	7bfb      	ldrb	r3, [r7, #15]
}
 800584c:	4618      	mov	r0, r3
 800584e:	3710      	adds	r7, #16
 8005850:	46bd      	mov	sp, r7
 8005852:	bd80      	pop	{r7, pc}

08005854 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8005854:	b580      	push	{r7, lr}
 8005856:	b082      	sub	sp, #8
 8005858:	af00      	add	r7, sp, #0
 800585a:	6078      	str	r0, [r7, #4]
 800585c:	460b      	mov	r3, r1
 800585e:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005866:	685b      	ldr	r3, [r3, #4]
 8005868:	78fa      	ldrb	r2, [r7, #3]
 800586a:	4611      	mov	r1, r2
 800586c:	6878      	ldr	r0, [r7, #4]
 800586e:	4798      	blx	r3

  return USBD_OK;
 8005870:	2300      	movs	r3, #0
}
 8005872:	4618      	mov	r0, r3
 8005874:	3708      	adds	r7, #8
 8005876:	46bd      	mov	sp, r7
 8005878:	bd80      	pop	{r7, pc}

0800587a <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800587a:	b580      	push	{r7, lr}
 800587c:	b082      	sub	sp, #8
 800587e:	af00      	add	r7, sp, #0
 8005880:	6078      	str	r0, [r7, #4]
 8005882:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800588a:	6839      	ldr	r1, [r7, #0]
 800588c:	4618      	mov	r0, r3
 800588e:	f000 fecb 	bl	8006628 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	2201      	movs	r2, #1
 8005896:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80058a0:	461a      	mov	r2, r3
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80058ae:	f003 031f 	and.w	r3, r3, #31
 80058b2:	2b01      	cmp	r3, #1
 80058b4:	d00c      	beq.n	80058d0 <USBD_LL_SetupStage+0x56>
 80058b6:	2b01      	cmp	r3, #1
 80058b8:	d302      	bcc.n	80058c0 <USBD_LL_SetupStage+0x46>
 80058ba:	2b02      	cmp	r3, #2
 80058bc:	d010      	beq.n	80058e0 <USBD_LL_SetupStage+0x66>
 80058be:	e017      	b.n	80058f0 <USBD_LL_SetupStage+0x76>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80058c6:	4619      	mov	r1, r3
 80058c8:	6878      	ldr	r0, [r7, #4]
 80058ca:	f000 f9cb 	bl	8005c64 <USBD_StdDevReq>
      break;
 80058ce:	e01a      	b.n	8005906 <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80058d6:	4619      	mov	r1, r3
 80058d8:	6878      	ldr	r0, [r7, #4]
 80058da:	f000 fa2d 	bl	8005d38 <USBD_StdItfReq>
      break;
 80058de:	e012      	b.n	8005906 <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80058e6:	4619      	mov	r1, r3
 80058e8:	6878      	ldr	r0, [r7, #4]
 80058ea:	f000 fa6b 	bl	8005dc4 <USBD_StdEPReq>
      break;
 80058ee:	e00a      	b.n	8005906 <USBD_LL_SetupStage+0x8c>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80058f6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80058fa:	b2db      	uxtb	r3, r3
 80058fc:	4619      	mov	r1, r3
 80058fe:	6878      	ldr	r0, [r7, #4]
 8005900:	f001 fb32 	bl	8006f68 <USBD_LL_StallEP>
      break;
 8005904:	bf00      	nop
  }

  return USBD_OK;
 8005906:	2300      	movs	r3, #0
}
 8005908:	4618      	mov	r0, r3
 800590a:	3708      	adds	r7, #8
 800590c:	46bd      	mov	sp, r7
 800590e:	bd80      	pop	{r7, pc}

08005910 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8005910:	b580      	push	{r7, lr}
 8005912:	b086      	sub	sp, #24
 8005914:	af00      	add	r7, sp, #0
 8005916:	60f8      	str	r0, [r7, #12]
 8005918:	460b      	mov	r3, r1
 800591a:	607a      	str	r2, [r7, #4]
 800591c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800591e:	7afb      	ldrb	r3, [r7, #11]
 8005920:	2b00      	cmp	r3, #0
 8005922:	d14b      	bne.n	80059bc <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800592a:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005932:	2b03      	cmp	r3, #3
 8005934:	d134      	bne.n	80059a0 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8005936:	697b      	ldr	r3, [r7, #20]
 8005938:	68da      	ldr	r2, [r3, #12]
 800593a:	697b      	ldr	r3, [r7, #20]
 800593c:	691b      	ldr	r3, [r3, #16]
 800593e:	429a      	cmp	r2, r3
 8005940:	d919      	bls.n	8005976 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8005942:	697b      	ldr	r3, [r7, #20]
 8005944:	68da      	ldr	r2, [r3, #12]
 8005946:	697b      	ldr	r3, [r7, #20]
 8005948:	691b      	ldr	r3, [r3, #16]
 800594a:	1ad2      	subs	r2, r2, r3
 800594c:	697b      	ldr	r3, [r7, #20]
 800594e:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8005950:	697b      	ldr	r3, [r7, #20]
 8005952:	68da      	ldr	r2, [r3, #12]
 8005954:	697b      	ldr	r3, [r7, #20]
 8005956:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8005958:	429a      	cmp	r2, r3
 800595a:	d203      	bcs.n	8005964 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800595c:	697b      	ldr	r3, [r7, #20]
 800595e:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8005960:	b29b      	uxth	r3, r3
 8005962:	e002      	b.n	800596a <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8005964:	697b      	ldr	r3, [r7, #20]
 8005966:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8005968:	b29b      	uxth	r3, r3
 800596a:	461a      	mov	r2, r3
 800596c:	6879      	ldr	r1, [r7, #4]
 800596e:	68f8      	ldr	r0, [r7, #12]
 8005970:	f000 ff4c 	bl	800680c <USBD_CtlContinueRx>
 8005974:	e038      	b.n	80059e8 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800597c:	691b      	ldr	r3, [r3, #16]
 800597e:	2b00      	cmp	r3, #0
 8005980:	d00a      	beq.n	8005998 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8005988:	2b03      	cmp	r3, #3
 800598a:	d105      	bne.n	8005998 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005992:	691b      	ldr	r3, [r3, #16]
 8005994:	68f8      	ldr	r0, [r7, #12]
 8005996:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8005998:	68f8      	ldr	r0, [r7, #12]
 800599a:	f000 ff49 	bl	8006830 <USBD_CtlSendStatus>
 800599e:	e023      	b.n	80059e8 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80059a6:	2b05      	cmp	r3, #5
 80059a8:	d11e      	bne.n	80059e8 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	2200      	movs	r2, #0
 80059ae:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 80059b2:	2100      	movs	r1, #0
 80059b4:	68f8      	ldr	r0, [r7, #12]
 80059b6:	f001 fad7 	bl	8006f68 <USBD_LL_StallEP>
 80059ba:	e015      	b.n	80059e8 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80059c2:	699b      	ldr	r3, [r3, #24]
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d00d      	beq.n	80059e4 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 80059ce:	2b03      	cmp	r3, #3
 80059d0:	d108      	bne.n	80059e4 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80059d8:	699b      	ldr	r3, [r3, #24]
 80059da:	7afa      	ldrb	r2, [r7, #11]
 80059dc:	4611      	mov	r1, r2
 80059de:	68f8      	ldr	r0, [r7, #12]
 80059e0:	4798      	blx	r3
 80059e2:	e001      	b.n	80059e8 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80059e4:	2302      	movs	r3, #2
 80059e6:	e000      	b.n	80059ea <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 80059e8:	2300      	movs	r3, #0
}
 80059ea:	4618      	mov	r0, r3
 80059ec:	3718      	adds	r7, #24
 80059ee:	46bd      	mov	sp, r7
 80059f0:	bd80      	pop	{r7, pc}

080059f2 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80059f2:	b580      	push	{r7, lr}
 80059f4:	b086      	sub	sp, #24
 80059f6:	af00      	add	r7, sp, #0
 80059f8:	60f8      	str	r0, [r7, #12]
 80059fa:	460b      	mov	r3, r1
 80059fc:	607a      	str	r2, [r7, #4]
 80059fe:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8005a00:	7afb      	ldrb	r3, [r7, #11]
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d17f      	bne.n	8005b06 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	3314      	adds	r3, #20
 8005a0a:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005a12:	2b02      	cmp	r3, #2
 8005a14:	d15c      	bne.n	8005ad0 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8005a16:	697b      	ldr	r3, [r7, #20]
 8005a18:	68da      	ldr	r2, [r3, #12]
 8005a1a:	697b      	ldr	r3, [r7, #20]
 8005a1c:	691b      	ldr	r3, [r3, #16]
 8005a1e:	429a      	cmp	r2, r3
 8005a20:	d915      	bls.n	8005a4e <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8005a22:	697b      	ldr	r3, [r7, #20]
 8005a24:	68da      	ldr	r2, [r3, #12]
 8005a26:	697b      	ldr	r3, [r7, #20]
 8005a28:	691b      	ldr	r3, [r3, #16]
 8005a2a:	1ad2      	subs	r2, r2, r3
 8005a2c:	697b      	ldr	r3, [r7, #20]
 8005a2e:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8005a30:	697b      	ldr	r3, [r7, #20]
 8005a32:	68db      	ldr	r3, [r3, #12]
 8005a34:	b29b      	uxth	r3, r3
 8005a36:	461a      	mov	r2, r3
 8005a38:	6879      	ldr	r1, [r7, #4]
 8005a3a:	68f8      	ldr	r0, [r7, #12]
 8005a3c:	f000 feb6 	bl	80067ac <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005a40:	2300      	movs	r3, #0
 8005a42:	2200      	movs	r2, #0
 8005a44:	2100      	movs	r1, #0
 8005a46:	68f8      	ldr	r0, [r7, #12]
 8005a48:	f001 fb33 	bl	80070b2 <USBD_LL_PrepareReceive>
 8005a4c:	e04e      	b.n	8005aec <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8005a4e:	697b      	ldr	r3, [r7, #20]
 8005a50:	689b      	ldr	r3, [r3, #8]
 8005a52:	697a      	ldr	r2, [r7, #20]
 8005a54:	6912      	ldr	r2, [r2, #16]
 8005a56:	fbb3 f1f2 	udiv	r1, r3, r2
 8005a5a:	fb02 f201 	mul.w	r2, r2, r1
 8005a5e:	1a9b      	subs	r3, r3, r2
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d11c      	bne.n	8005a9e <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8005a64:	697b      	ldr	r3, [r7, #20]
 8005a66:	689a      	ldr	r2, [r3, #8]
 8005a68:	697b      	ldr	r3, [r7, #20]
 8005a6a:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8005a6c:	429a      	cmp	r2, r3
 8005a6e:	d316      	bcc.n	8005a9e <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8005a70:	697b      	ldr	r3, [r7, #20]
 8005a72:	689a      	ldr	r2, [r3, #8]
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8005a7a:	429a      	cmp	r2, r3
 8005a7c:	d20f      	bcs.n	8005a9e <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8005a7e:	2200      	movs	r2, #0
 8005a80:	2100      	movs	r1, #0
 8005a82:	68f8      	ldr	r0, [r7, #12]
 8005a84:	f000 fe92 	bl	80067ac <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	2200      	movs	r2, #0
 8005a8c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005a90:	2300      	movs	r3, #0
 8005a92:	2200      	movs	r2, #0
 8005a94:	2100      	movs	r1, #0
 8005a96:	68f8      	ldr	r0, [r7, #12]
 8005a98:	f001 fb0b 	bl	80070b2 <USBD_LL_PrepareReceive>
 8005a9c:	e026      	b.n	8005aec <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005aa4:	68db      	ldr	r3, [r3, #12]
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d00a      	beq.n	8005ac0 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8005ab0:	2b03      	cmp	r3, #3
 8005ab2:	d105      	bne.n	8005ac0 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005aba:	68db      	ldr	r3, [r3, #12]
 8005abc:	68f8      	ldr	r0, [r7, #12]
 8005abe:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8005ac0:	2180      	movs	r1, #128	; 0x80
 8005ac2:	68f8      	ldr	r0, [r7, #12]
 8005ac4:	f001 fa50 	bl	8006f68 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8005ac8:	68f8      	ldr	r0, [r7, #12]
 8005aca:	f000 fec4 	bl	8006856 <USBD_CtlReceiveStatus>
 8005ace:	e00d      	b.n	8005aec <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005ad6:	2b04      	cmp	r3, #4
 8005ad8:	d004      	beq.n	8005ae4 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d103      	bne.n	8005aec <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8005ae4:	2180      	movs	r1, #128	; 0x80
 8005ae6:	68f8      	ldr	r0, [r7, #12]
 8005ae8:	f001 fa3e 	bl	8006f68 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8005af2:	2b01      	cmp	r3, #1
 8005af4:	d11d      	bne.n	8005b32 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8005af6:	68f8      	ldr	r0, [r7, #12]
 8005af8:	f7ff fe83 	bl	8005802 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	2200      	movs	r2, #0
 8005b00:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8005b04:	e015      	b.n	8005b32 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005b0c:	695b      	ldr	r3, [r3, #20]
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d00d      	beq.n	8005b2e <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8005b18:	2b03      	cmp	r3, #3
 8005b1a:	d108      	bne.n	8005b2e <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005b22:	695b      	ldr	r3, [r3, #20]
 8005b24:	7afa      	ldrb	r2, [r7, #11]
 8005b26:	4611      	mov	r1, r2
 8005b28:	68f8      	ldr	r0, [r7, #12]
 8005b2a:	4798      	blx	r3
 8005b2c:	e001      	b.n	8005b32 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8005b2e:	2302      	movs	r3, #2
 8005b30:	e000      	b.n	8005b34 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8005b32:	2300      	movs	r3, #0
}
 8005b34:	4618      	mov	r0, r3
 8005b36:	3718      	adds	r7, #24
 8005b38:	46bd      	mov	sp, r7
 8005b3a:	bd80      	pop	{r7, pc}

08005b3c <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8005b3c:	b580      	push	{r7, lr}
 8005b3e:	b082      	sub	sp, #8
 8005b40:	af00      	add	r7, sp, #0
 8005b42:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005b44:	2340      	movs	r3, #64	; 0x40
 8005b46:	2200      	movs	r2, #0
 8005b48:	2100      	movs	r1, #0
 8005b4a:	6878      	ldr	r0, [r7, #4]
 8005b4c:	f001 f9c7 	bl	8006ede <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	2201      	movs	r2, #1
 8005b54:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	2240      	movs	r2, #64	; 0x40
 8005b5c:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005b60:	2340      	movs	r3, #64	; 0x40
 8005b62:	2200      	movs	r2, #0
 8005b64:	2180      	movs	r1, #128	; 0x80
 8005b66:	6878      	ldr	r0, [r7, #4]
 8005b68:	f001 f9b9 	bl	8006ede <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	2201      	movs	r2, #1
 8005b70:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	2240      	movs	r2, #64	; 0x40
 8005b76:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	2201      	movs	r2, #1
 8005b7c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	2200      	movs	r2, #0
 8005b84:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	2200      	movs	r2, #0
 8005b8c:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	2200      	movs	r2, #0
 8005b92:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d009      	beq.n	8005bb4 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005ba6:	685b      	ldr	r3, [r3, #4]
 8005ba8:	687a      	ldr	r2, [r7, #4]
 8005baa:	6852      	ldr	r2, [r2, #4]
 8005bac:	b2d2      	uxtb	r2, r2
 8005bae:	4611      	mov	r1, r2
 8005bb0:	6878      	ldr	r0, [r7, #4]
 8005bb2:	4798      	blx	r3
  }

  return USBD_OK;
 8005bb4:	2300      	movs	r3, #0
}
 8005bb6:	4618      	mov	r0, r3
 8005bb8:	3708      	adds	r7, #8
 8005bba:	46bd      	mov	sp, r7
 8005bbc:	bd80      	pop	{r7, pc}

08005bbe <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8005bbe:	b480      	push	{r7}
 8005bc0:	b083      	sub	sp, #12
 8005bc2:	af00      	add	r7, sp, #0
 8005bc4:	6078      	str	r0, [r7, #4]
 8005bc6:	460b      	mov	r3, r1
 8005bc8:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	78fa      	ldrb	r2, [r7, #3]
 8005bce:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8005bd0:	2300      	movs	r3, #0
}
 8005bd2:	4618      	mov	r0, r3
 8005bd4:	370c      	adds	r7, #12
 8005bd6:	46bd      	mov	sp, r7
 8005bd8:	bc80      	pop	{r7}
 8005bda:	4770      	bx	lr

08005bdc <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8005bdc:	b480      	push	{r7}
 8005bde:	b083      	sub	sp, #12
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	2204      	movs	r2, #4
 8005bf4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8005bf8:	2300      	movs	r3, #0
}
 8005bfa:	4618      	mov	r0, r3
 8005bfc:	370c      	adds	r7, #12
 8005bfe:	46bd      	mov	sp, r7
 8005c00:	bc80      	pop	{r7}
 8005c02:	4770      	bx	lr

08005c04 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8005c04:	b480      	push	{r7}
 8005c06:	b083      	sub	sp, #12
 8005c08:	af00      	add	r7, sp, #0
 8005c0a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005c12:	2b04      	cmp	r3, #4
 8005c14:	d105      	bne.n	8005c22 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8005c22:	2300      	movs	r3, #0
}
 8005c24:	4618      	mov	r0, r3
 8005c26:	370c      	adds	r7, #12
 8005c28:	46bd      	mov	sp, r7
 8005c2a:	bc80      	pop	{r7}
 8005c2c:	4770      	bx	lr

08005c2e <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8005c2e:	b580      	push	{r7, lr}
 8005c30:	b082      	sub	sp, #8
 8005c32:	af00      	add	r7, sp, #0
 8005c34:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005c3c:	2b03      	cmp	r3, #3
 8005c3e:	d10b      	bne.n	8005c58 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005c46:	69db      	ldr	r3, [r3, #28]
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d005      	beq.n	8005c58 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005c52:	69db      	ldr	r3, [r3, #28]
 8005c54:	6878      	ldr	r0, [r7, #4]
 8005c56:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005c58:	2300      	movs	r3, #0
}
 8005c5a:	4618      	mov	r0, r3
 8005c5c:	3708      	adds	r7, #8
 8005c5e:	46bd      	mov	sp, r7
 8005c60:	bd80      	pop	{r7, pc}
	...

08005c64 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8005c64:	b580      	push	{r7, lr}
 8005c66:	b084      	sub	sp, #16
 8005c68:	af00      	add	r7, sp, #0
 8005c6a:	6078      	str	r0, [r7, #4]
 8005c6c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005c6e:	2300      	movs	r3, #0
 8005c70:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005c72:	683b      	ldr	r3, [r7, #0]
 8005c74:	781b      	ldrb	r3, [r3, #0]
 8005c76:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005c7a:	2b20      	cmp	r3, #32
 8005c7c:	d004      	beq.n	8005c88 <USBD_StdDevReq+0x24>
 8005c7e:	2b40      	cmp	r3, #64	; 0x40
 8005c80:	d002      	beq.n	8005c88 <USBD_StdDevReq+0x24>
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d008      	beq.n	8005c98 <USBD_StdDevReq+0x34>
 8005c86:	e04c      	b.n	8005d22 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005c8e:	689b      	ldr	r3, [r3, #8]
 8005c90:	6839      	ldr	r1, [r7, #0]
 8005c92:	6878      	ldr	r0, [r7, #4]
 8005c94:	4798      	blx	r3
      break;
 8005c96:	e049      	b.n	8005d2c <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005c98:	683b      	ldr	r3, [r7, #0]
 8005c9a:	785b      	ldrb	r3, [r3, #1]
 8005c9c:	2b09      	cmp	r3, #9
 8005c9e:	d83a      	bhi.n	8005d16 <USBD_StdDevReq+0xb2>
 8005ca0:	a201      	add	r2, pc, #4	; (adr r2, 8005ca8 <USBD_StdDevReq+0x44>)
 8005ca2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ca6:	bf00      	nop
 8005ca8:	08005cf9 	.word	0x08005cf9
 8005cac:	08005d0d 	.word	0x08005d0d
 8005cb0:	08005d17 	.word	0x08005d17
 8005cb4:	08005d03 	.word	0x08005d03
 8005cb8:	08005d17 	.word	0x08005d17
 8005cbc:	08005cdb 	.word	0x08005cdb
 8005cc0:	08005cd1 	.word	0x08005cd1
 8005cc4:	08005d17 	.word	0x08005d17
 8005cc8:	08005cef 	.word	0x08005cef
 8005ccc:	08005ce5 	.word	0x08005ce5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8005cd0:	6839      	ldr	r1, [r7, #0]
 8005cd2:	6878      	ldr	r0, [r7, #4]
 8005cd4:	f000 f9d4 	bl	8006080 <USBD_GetDescriptor>
          break;
 8005cd8:	e022      	b.n	8005d20 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8005cda:	6839      	ldr	r1, [r7, #0]
 8005cdc:	6878      	ldr	r0, [r7, #4]
 8005cde:	f000 fb37 	bl	8006350 <USBD_SetAddress>
          break;
 8005ce2:	e01d      	b.n	8005d20 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8005ce4:	6839      	ldr	r1, [r7, #0]
 8005ce6:	6878      	ldr	r0, [r7, #4]
 8005ce8:	f000 fb74 	bl	80063d4 <USBD_SetConfig>
          break;
 8005cec:	e018      	b.n	8005d20 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8005cee:	6839      	ldr	r1, [r7, #0]
 8005cf0:	6878      	ldr	r0, [r7, #4]
 8005cf2:	f000 fbfd 	bl	80064f0 <USBD_GetConfig>
          break;
 8005cf6:	e013      	b.n	8005d20 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8005cf8:	6839      	ldr	r1, [r7, #0]
 8005cfa:	6878      	ldr	r0, [r7, #4]
 8005cfc:	f000 fc2c 	bl	8006558 <USBD_GetStatus>
          break;
 8005d00:	e00e      	b.n	8005d20 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8005d02:	6839      	ldr	r1, [r7, #0]
 8005d04:	6878      	ldr	r0, [r7, #4]
 8005d06:	f000 fc5a 	bl	80065be <USBD_SetFeature>
          break;
 8005d0a:	e009      	b.n	8005d20 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8005d0c:	6839      	ldr	r1, [r7, #0]
 8005d0e:	6878      	ldr	r0, [r7, #4]
 8005d10:	f000 fc69 	bl	80065e6 <USBD_ClrFeature>
          break;
 8005d14:	e004      	b.n	8005d20 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8005d16:	6839      	ldr	r1, [r7, #0]
 8005d18:	6878      	ldr	r0, [r7, #4]
 8005d1a:	f000 fcc1 	bl	80066a0 <USBD_CtlError>
          break;
 8005d1e:	bf00      	nop
      }
      break;
 8005d20:	e004      	b.n	8005d2c <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8005d22:	6839      	ldr	r1, [r7, #0]
 8005d24:	6878      	ldr	r0, [r7, #4]
 8005d26:	f000 fcbb 	bl	80066a0 <USBD_CtlError>
      break;
 8005d2a:	bf00      	nop
  }

  return ret;
 8005d2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d2e:	4618      	mov	r0, r3
 8005d30:	3710      	adds	r7, #16
 8005d32:	46bd      	mov	sp, r7
 8005d34:	bd80      	pop	{r7, pc}
 8005d36:	bf00      	nop

08005d38 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8005d38:	b580      	push	{r7, lr}
 8005d3a:	b084      	sub	sp, #16
 8005d3c:	af00      	add	r7, sp, #0
 8005d3e:	6078      	str	r0, [r7, #4]
 8005d40:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005d42:	2300      	movs	r3, #0
 8005d44:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005d46:	683b      	ldr	r3, [r7, #0]
 8005d48:	781b      	ldrb	r3, [r3, #0]
 8005d4a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005d4e:	2b20      	cmp	r3, #32
 8005d50:	d003      	beq.n	8005d5a <USBD_StdItfReq+0x22>
 8005d52:	2b40      	cmp	r3, #64	; 0x40
 8005d54:	d001      	beq.n	8005d5a <USBD_StdItfReq+0x22>
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d12a      	bne.n	8005db0 <USBD_StdItfReq+0x78>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005d60:	3b01      	subs	r3, #1
 8005d62:	2b02      	cmp	r3, #2
 8005d64:	d81d      	bhi.n	8005da2 <USBD_StdItfReq+0x6a>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8005d66:	683b      	ldr	r3, [r7, #0]
 8005d68:	889b      	ldrh	r3, [r3, #4]
 8005d6a:	b2db      	uxtb	r3, r3
 8005d6c:	2b01      	cmp	r3, #1
 8005d6e:	d813      	bhi.n	8005d98 <USBD_StdItfReq+0x60>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005d76:	689b      	ldr	r3, [r3, #8]
 8005d78:	6839      	ldr	r1, [r7, #0]
 8005d7a:	6878      	ldr	r0, [r7, #4]
 8005d7c:	4798      	blx	r3
 8005d7e:	4603      	mov	r3, r0
 8005d80:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8005d82:	683b      	ldr	r3, [r7, #0]
 8005d84:	88db      	ldrh	r3, [r3, #6]
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d110      	bne.n	8005dac <USBD_StdItfReq+0x74>
 8005d8a:	7bfb      	ldrb	r3, [r7, #15]
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d10d      	bne.n	8005dac <USBD_StdItfReq+0x74>
            {
              USBD_CtlSendStatus(pdev);
 8005d90:	6878      	ldr	r0, [r7, #4]
 8005d92:	f000 fd4d 	bl	8006830 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8005d96:	e009      	b.n	8005dac <USBD_StdItfReq+0x74>
            USBD_CtlError(pdev, req);
 8005d98:	6839      	ldr	r1, [r7, #0]
 8005d9a:	6878      	ldr	r0, [r7, #4]
 8005d9c:	f000 fc80 	bl	80066a0 <USBD_CtlError>
          break;
 8005da0:	e004      	b.n	8005dac <USBD_StdItfReq+0x74>

        default:
          USBD_CtlError(pdev, req);
 8005da2:	6839      	ldr	r1, [r7, #0]
 8005da4:	6878      	ldr	r0, [r7, #4]
 8005da6:	f000 fc7b 	bl	80066a0 <USBD_CtlError>
          break;
 8005daa:	e000      	b.n	8005dae <USBD_StdItfReq+0x76>
          break;
 8005dac:	bf00      	nop
      }
      break;
 8005dae:	e004      	b.n	8005dba <USBD_StdItfReq+0x82>

    default:
      USBD_CtlError(pdev, req);
 8005db0:	6839      	ldr	r1, [r7, #0]
 8005db2:	6878      	ldr	r0, [r7, #4]
 8005db4:	f000 fc74 	bl	80066a0 <USBD_CtlError>
      break;
 8005db8:	bf00      	nop
  }

  return USBD_OK;
 8005dba:	2300      	movs	r3, #0
}
 8005dbc:	4618      	mov	r0, r3
 8005dbe:	3710      	adds	r7, #16
 8005dc0:	46bd      	mov	sp, r7
 8005dc2:	bd80      	pop	{r7, pc}

08005dc4 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8005dc4:	b580      	push	{r7, lr}
 8005dc6:	b084      	sub	sp, #16
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	6078      	str	r0, [r7, #4]
 8005dcc:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8005dce:	2300      	movs	r3, #0
 8005dd0:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8005dd2:	683b      	ldr	r3, [r7, #0]
 8005dd4:	889b      	ldrh	r3, [r3, #4]
 8005dd6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005dd8:	683b      	ldr	r3, [r7, #0]
 8005dda:	781b      	ldrb	r3, [r3, #0]
 8005ddc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005de0:	2b20      	cmp	r3, #32
 8005de2:	d004      	beq.n	8005dee <USBD_StdEPReq+0x2a>
 8005de4:	2b40      	cmp	r3, #64	; 0x40
 8005de6:	d002      	beq.n	8005dee <USBD_StdEPReq+0x2a>
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d008      	beq.n	8005dfe <USBD_StdEPReq+0x3a>
 8005dec:	e13d      	b.n	800606a <USBD_StdEPReq+0x2a6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005df4:	689b      	ldr	r3, [r3, #8]
 8005df6:	6839      	ldr	r1, [r7, #0]
 8005df8:	6878      	ldr	r0, [r7, #4]
 8005dfa:	4798      	blx	r3
      break;
 8005dfc:	e13a      	b.n	8006074 <USBD_StdEPReq+0x2b0>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8005dfe:	683b      	ldr	r3, [r7, #0]
 8005e00:	781b      	ldrb	r3, [r3, #0]
 8005e02:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005e06:	2b20      	cmp	r3, #32
 8005e08:	d10a      	bne.n	8005e20 <USBD_StdEPReq+0x5c>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005e10:	689b      	ldr	r3, [r3, #8]
 8005e12:	6839      	ldr	r1, [r7, #0]
 8005e14:	6878      	ldr	r0, [r7, #4]
 8005e16:	4798      	blx	r3
 8005e18:	4603      	mov	r3, r0
 8005e1a:	73fb      	strb	r3, [r7, #15]

        return ret;
 8005e1c:	7bfb      	ldrb	r3, [r7, #15]
 8005e1e:	e12a      	b.n	8006076 <USBD_StdEPReq+0x2b2>
      }

      switch (req->bRequest)
 8005e20:	683b      	ldr	r3, [r7, #0]
 8005e22:	785b      	ldrb	r3, [r3, #1]
 8005e24:	2b01      	cmp	r3, #1
 8005e26:	d03e      	beq.n	8005ea6 <USBD_StdEPReq+0xe2>
 8005e28:	2b03      	cmp	r3, #3
 8005e2a:	d002      	beq.n	8005e32 <USBD_StdEPReq+0x6e>
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d070      	beq.n	8005f12 <USBD_StdEPReq+0x14e>
 8005e30:	e115      	b.n	800605e <USBD_StdEPReq+0x29a>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005e38:	2b02      	cmp	r3, #2
 8005e3a:	d002      	beq.n	8005e42 <USBD_StdEPReq+0x7e>
 8005e3c:	2b03      	cmp	r3, #3
 8005e3e:	d015      	beq.n	8005e6c <USBD_StdEPReq+0xa8>
 8005e40:	e02b      	b.n	8005e9a <USBD_StdEPReq+0xd6>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005e42:	7bbb      	ldrb	r3, [r7, #14]
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d00c      	beq.n	8005e62 <USBD_StdEPReq+0x9e>
 8005e48:	7bbb      	ldrb	r3, [r7, #14]
 8005e4a:	2b80      	cmp	r3, #128	; 0x80
 8005e4c:	d009      	beq.n	8005e62 <USBD_StdEPReq+0x9e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8005e4e:	7bbb      	ldrb	r3, [r7, #14]
 8005e50:	4619      	mov	r1, r3
 8005e52:	6878      	ldr	r0, [r7, #4]
 8005e54:	f001 f888 	bl	8006f68 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8005e58:	2180      	movs	r1, #128	; 0x80
 8005e5a:	6878      	ldr	r0, [r7, #4]
 8005e5c:	f001 f884 	bl	8006f68 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005e60:	e020      	b.n	8005ea4 <USBD_StdEPReq+0xe0>
                USBD_CtlError(pdev, req);
 8005e62:	6839      	ldr	r1, [r7, #0]
 8005e64:	6878      	ldr	r0, [r7, #4]
 8005e66:	f000 fc1b 	bl	80066a0 <USBD_CtlError>
              break;
 8005e6a:	e01b      	b.n	8005ea4 <USBD_StdEPReq+0xe0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005e6c:	683b      	ldr	r3, [r7, #0]
 8005e6e:	885b      	ldrh	r3, [r3, #2]
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d10e      	bne.n	8005e92 <USBD_StdEPReq+0xce>
              {
                if ((ep_addr != 0x00U) &&
 8005e74:	7bbb      	ldrb	r3, [r7, #14]
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d00b      	beq.n	8005e92 <USBD_StdEPReq+0xce>
 8005e7a:	7bbb      	ldrb	r3, [r7, #14]
 8005e7c:	2b80      	cmp	r3, #128	; 0x80
 8005e7e:	d008      	beq.n	8005e92 <USBD_StdEPReq+0xce>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8005e80:	683b      	ldr	r3, [r7, #0]
 8005e82:	88db      	ldrh	r3, [r3, #6]
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d104      	bne.n	8005e92 <USBD_StdEPReq+0xce>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8005e88:	7bbb      	ldrb	r3, [r7, #14]
 8005e8a:	4619      	mov	r1, r3
 8005e8c:	6878      	ldr	r0, [r7, #4]
 8005e8e:	f001 f86b 	bl	8006f68 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8005e92:	6878      	ldr	r0, [r7, #4]
 8005e94:	f000 fccc 	bl	8006830 <USBD_CtlSendStatus>

              break;
 8005e98:	e004      	b.n	8005ea4 <USBD_StdEPReq+0xe0>

            default:
              USBD_CtlError(pdev, req);
 8005e9a:	6839      	ldr	r1, [r7, #0]
 8005e9c:	6878      	ldr	r0, [r7, #4]
 8005e9e:	f000 fbff 	bl	80066a0 <USBD_CtlError>
              break;
 8005ea2:	bf00      	nop
          }
          break;
 8005ea4:	e0e0      	b.n	8006068 <USBD_StdEPReq+0x2a4>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005eac:	2b02      	cmp	r3, #2
 8005eae:	d002      	beq.n	8005eb6 <USBD_StdEPReq+0xf2>
 8005eb0:	2b03      	cmp	r3, #3
 8005eb2:	d015      	beq.n	8005ee0 <USBD_StdEPReq+0x11c>
 8005eb4:	e026      	b.n	8005f04 <USBD_StdEPReq+0x140>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005eb6:	7bbb      	ldrb	r3, [r7, #14]
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d00c      	beq.n	8005ed6 <USBD_StdEPReq+0x112>
 8005ebc:	7bbb      	ldrb	r3, [r7, #14]
 8005ebe:	2b80      	cmp	r3, #128	; 0x80
 8005ec0:	d009      	beq.n	8005ed6 <USBD_StdEPReq+0x112>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8005ec2:	7bbb      	ldrb	r3, [r7, #14]
 8005ec4:	4619      	mov	r1, r3
 8005ec6:	6878      	ldr	r0, [r7, #4]
 8005ec8:	f001 f84e 	bl	8006f68 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8005ecc:	2180      	movs	r1, #128	; 0x80
 8005ece:	6878      	ldr	r0, [r7, #4]
 8005ed0:	f001 f84a 	bl	8006f68 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005ed4:	e01c      	b.n	8005f10 <USBD_StdEPReq+0x14c>
                USBD_CtlError(pdev, req);
 8005ed6:	6839      	ldr	r1, [r7, #0]
 8005ed8:	6878      	ldr	r0, [r7, #4]
 8005eda:	f000 fbe1 	bl	80066a0 <USBD_CtlError>
              break;
 8005ede:	e017      	b.n	8005f10 <USBD_StdEPReq+0x14c>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005ee0:	683b      	ldr	r3, [r7, #0]
 8005ee2:	885b      	ldrh	r3, [r3, #2]
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d112      	bne.n	8005f0e <USBD_StdEPReq+0x14a>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8005ee8:	7bbb      	ldrb	r3, [r7, #14]
 8005eea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d004      	beq.n	8005efc <USBD_StdEPReq+0x138>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8005ef2:	7bbb      	ldrb	r3, [r7, #14]
 8005ef4:	4619      	mov	r1, r3
 8005ef6:	6878      	ldr	r0, [r7, #4]
 8005ef8:	f001 f855 	bl	8006fa6 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8005efc:	6878      	ldr	r0, [r7, #4]
 8005efe:	f000 fc97 	bl	8006830 <USBD_CtlSendStatus>
              }
              break;
 8005f02:	e004      	b.n	8005f0e <USBD_StdEPReq+0x14a>

            default:
              USBD_CtlError(pdev, req);
 8005f04:	6839      	ldr	r1, [r7, #0]
 8005f06:	6878      	ldr	r0, [r7, #4]
 8005f08:	f000 fbca 	bl	80066a0 <USBD_CtlError>
              break;
 8005f0c:	e000      	b.n	8005f10 <USBD_StdEPReq+0x14c>
              break;
 8005f0e:	bf00      	nop
          }
          break;
 8005f10:	e0aa      	b.n	8006068 <USBD_StdEPReq+0x2a4>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005f18:	2b02      	cmp	r3, #2
 8005f1a:	d002      	beq.n	8005f22 <USBD_StdEPReq+0x15e>
 8005f1c:	2b03      	cmp	r3, #3
 8005f1e:	d032      	beq.n	8005f86 <USBD_StdEPReq+0x1c2>
 8005f20:	e097      	b.n	8006052 <USBD_StdEPReq+0x28e>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005f22:	7bbb      	ldrb	r3, [r7, #14]
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d007      	beq.n	8005f38 <USBD_StdEPReq+0x174>
 8005f28:	7bbb      	ldrb	r3, [r7, #14]
 8005f2a:	2b80      	cmp	r3, #128	; 0x80
 8005f2c:	d004      	beq.n	8005f38 <USBD_StdEPReq+0x174>
              {
                USBD_CtlError(pdev, req);
 8005f2e:	6839      	ldr	r1, [r7, #0]
 8005f30:	6878      	ldr	r0, [r7, #4]
 8005f32:	f000 fbb5 	bl	80066a0 <USBD_CtlError>
                break;
 8005f36:	e091      	b.n	800605c <USBD_StdEPReq+0x298>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005f38:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	da0b      	bge.n	8005f58 <USBD_StdEPReq+0x194>
 8005f40:	7bbb      	ldrb	r3, [r7, #14]
 8005f42:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005f46:	4613      	mov	r3, r2
 8005f48:	009b      	lsls	r3, r3, #2
 8005f4a:	4413      	add	r3, r2
 8005f4c:	009b      	lsls	r3, r3, #2
 8005f4e:	3310      	adds	r3, #16
 8005f50:	687a      	ldr	r2, [r7, #4]
 8005f52:	4413      	add	r3, r2
 8005f54:	3304      	adds	r3, #4
 8005f56:	e00b      	b.n	8005f70 <USBD_StdEPReq+0x1ac>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8005f58:	7bbb      	ldrb	r3, [r7, #14]
 8005f5a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005f5e:	4613      	mov	r3, r2
 8005f60:	009b      	lsls	r3, r3, #2
 8005f62:	4413      	add	r3, r2
 8005f64:	009b      	lsls	r3, r3, #2
 8005f66:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8005f6a:	687a      	ldr	r2, [r7, #4]
 8005f6c:	4413      	add	r3, r2
 8005f6e:	3304      	adds	r3, #4
 8005f70:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8005f72:	68bb      	ldr	r3, [r7, #8]
 8005f74:	2200      	movs	r2, #0
 8005f76:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8005f78:	68bb      	ldr	r3, [r7, #8]
 8005f7a:	2202      	movs	r2, #2
 8005f7c:	4619      	mov	r1, r3
 8005f7e:	6878      	ldr	r0, [r7, #4]
 8005f80:	f000 fbf8 	bl	8006774 <USBD_CtlSendData>
              break;
 8005f84:	e06a      	b.n	800605c <USBD_StdEPReq+0x298>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8005f86:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	da11      	bge.n	8005fb2 <USBD_StdEPReq+0x1ee>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8005f8e:	7bbb      	ldrb	r3, [r7, #14]
 8005f90:	f003 020f 	and.w	r2, r3, #15
 8005f94:	6879      	ldr	r1, [r7, #4]
 8005f96:	4613      	mov	r3, r2
 8005f98:	009b      	lsls	r3, r3, #2
 8005f9a:	4413      	add	r3, r2
 8005f9c:	009b      	lsls	r3, r3, #2
 8005f9e:	440b      	add	r3, r1
 8005fa0:	3318      	adds	r3, #24
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d117      	bne.n	8005fd8 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 8005fa8:	6839      	ldr	r1, [r7, #0]
 8005faa:	6878      	ldr	r0, [r7, #4]
 8005fac:	f000 fb78 	bl	80066a0 <USBD_CtlError>
                  break;
 8005fb0:	e054      	b.n	800605c <USBD_StdEPReq+0x298>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8005fb2:	7bbb      	ldrb	r3, [r7, #14]
 8005fb4:	f003 020f 	and.w	r2, r3, #15
 8005fb8:	6879      	ldr	r1, [r7, #4]
 8005fba:	4613      	mov	r3, r2
 8005fbc:	009b      	lsls	r3, r3, #2
 8005fbe:	4413      	add	r3, r2
 8005fc0:	009b      	lsls	r3, r3, #2
 8005fc2:	440b      	add	r3, r1
 8005fc4:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d104      	bne.n	8005fd8 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 8005fce:	6839      	ldr	r1, [r7, #0]
 8005fd0:	6878      	ldr	r0, [r7, #4]
 8005fd2:	f000 fb65 	bl	80066a0 <USBD_CtlError>
                  break;
 8005fd6:	e041      	b.n	800605c <USBD_StdEPReq+0x298>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005fd8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	da0b      	bge.n	8005ff8 <USBD_StdEPReq+0x234>
 8005fe0:	7bbb      	ldrb	r3, [r7, #14]
 8005fe2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005fe6:	4613      	mov	r3, r2
 8005fe8:	009b      	lsls	r3, r3, #2
 8005fea:	4413      	add	r3, r2
 8005fec:	009b      	lsls	r3, r3, #2
 8005fee:	3310      	adds	r3, #16
 8005ff0:	687a      	ldr	r2, [r7, #4]
 8005ff2:	4413      	add	r3, r2
 8005ff4:	3304      	adds	r3, #4
 8005ff6:	e00b      	b.n	8006010 <USBD_StdEPReq+0x24c>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8005ff8:	7bbb      	ldrb	r3, [r7, #14]
 8005ffa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005ffe:	4613      	mov	r3, r2
 8006000:	009b      	lsls	r3, r3, #2
 8006002:	4413      	add	r3, r2
 8006004:	009b      	lsls	r3, r3, #2
 8006006:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800600a:	687a      	ldr	r2, [r7, #4]
 800600c:	4413      	add	r3, r2
 800600e:	3304      	adds	r3, #4
 8006010:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006012:	7bbb      	ldrb	r3, [r7, #14]
 8006014:	2b00      	cmp	r3, #0
 8006016:	d002      	beq.n	800601e <USBD_StdEPReq+0x25a>
 8006018:	7bbb      	ldrb	r3, [r7, #14]
 800601a:	2b80      	cmp	r3, #128	; 0x80
 800601c:	d103      	bne.n	8006026 <USBD_StdEPReq+0x262>
              {
                pep->status = 0x0000U;
 800601e:	68bb      	ldr	r3, [r7, #8]
 8006020:	2200      	movs	r2, #0
 8006022:	601a      	str	r2, [r3, #0]
 8006024:	e00e      	b.n	8006044 <USBD_StdEPReq+0x280>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8006026:	7bbb      	ldrb	r3, [r7, #14]
 8006028:	4619      	mov	r1, r3
 800602a:	6878      	ldr	r0, [r7, #4]
 800602c:	f000 ffda 	bl	8006fe4 <USBD_LL_IsStallEP>
 8006030:	4603      	mov	r3, r0
 8006032:	2b00      	cmp	r3, #0
 8006034:	d003      	beq.n	800603e <USBD_StdEPReq+0x27a>
              {
                pep->status = 0x0001U;
 8006036:	68bb      	ldr	r3, [r7, #8]
 8006038:	2201      	movs	r2, #1
 800603a:	601a      	str	r2, [r3, #0]
 800603c:	e002      	b.n	8006044 <USBD_StdEPReq+0x280>
              }
              else
              {
                pep->status = 0x0000U;
 800603e:	68bb      	ldr	r3, [r7, #8]
 8006040:	2200      	movs	r2, #0
 8006042:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8006044:	68bb      	ldr	r3, [r7, #8]
 8006046:	2202      	movs	r2, #2
 8006048:	4619      	mov	r1, r3
 800604a:	6878      	ldr	r0, [r7, #4]
 800604c:	f000 fb92 	bl	8006774 <USBD_CtlSendData>
              break;
 8006050:	e004      	b.n	800605c <USBD_StdEPReq+0x298>

            default:
              USBD_CtlError(pdev, req);
 8006052:	6839      	ldr	r1, [r7, #0]
 8006054:	6878      	ldr	r0, [r7, #4]
 8006056:	f000 fb23 	bl	80066a0 <USBD_CtlError>
              break;
 800605a:	bf00      	nop
          }
          break;
 800605c:	e004      	b.n	8006068 <USBD_StdEPReq+0x2a4>

        default:
          USBD_CtlError(pdev, req);
 800605e:	6839      	ldr	r1, [r7, #0]
 8006060:	6878      	ldr	r0, [r7, #4]
 8006062:	f000 fb1d 	bl	80066a0 <USBD_CtlError>
          break;
 8006066:	bf00      	nop
      }
      break;
 8006068:	e004      	b.n	8006074 <USBD_StdEPReq+0x2b0>

    default:
      USBD_CtlError(pdev, req);
 800606a:	6839      	ldr	r1, [r7, #0]
 800606c:	6878      	ldr	r0, [r7, #4]
 800606e:	f000 fb17 	bl	80066a0 <USBD_CtlError>
      break;
 8006072:	bf00      	nop
  }

  return ret;
 8006074:	7bfb      	ldrb	r3, [r7, #15]
}
 8006076:	4618      	mov	r0, r3
 8006078:	3710      	adds	r7, #16
 800607a:	46bd      	mov	sp, r7
 800607c:	bd80      	pop	{r7, pc}
	...

08006080 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8006080:	b580      	push	{r7, lr}
 8006082:	b084      	sub	sp, #16
 8006084:	af00      	add	r7, sp, #0
 8006086:	6078      	str	r0, [r7, #4]
 8006088:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800608a:	2300      	movs	r3, #0
 800608c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800608e:	2300      	movs	r3, #0
 8006090:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8006092:	2300      	movs	r3, #0
 8006094:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8006096:	683b      	ldr	r3, [r7, #0]
 8006098:	885b      	ldrh	r3, [r3, #2]
 800609a:	0a1b      	lsrs	r3, r3, #8
 800609c:	b29b      	uxth	r3, r3
 800609e:	3b01      	subs	r3, #1
 80060a0:	2b06      	cmp	r3, #6
 80060a2:	f200 8128 	bhi.w	80062f6 <USBD_GetDescriptor+0x276>
 80060a6:	a201      	add	r2, pc, #4	; (adr r2, 80060ac <USBD_GetDescriptor+0x2c>)
 80060a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060ac:	080060c9 	.word	0x080060c9
 80060b0:	080060e1 	.word	0x080060e1
 80060b4:	08006121 	.word	0x08006121
 80060b8:	080062f7 	.word	0x080062f7
 80060bc:	080062f7 	.word	0x080062f7
 80060c0:	08006297 	.word	0x08006297
 80060c4:	080062c3 	.word	0x080062c3
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	687a      	ldr	r2, [r7, #4]
 80060d2:	7c12      	ldrb	r2, [r2, #16]
 80060d4:	f107 0108 	add.w	r1, r7, #8
 80060d8:	4610      	mov	r0, r2
 80060da:	4798      	blx	r3
 80060dc:	60f8      	str	r0, [r7, #12]
      break;
 80060de:	e112      	b.n	8006306 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	7c1b      	ldrb	r3, [r3, #16]
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d10d      	bne.n	8006104 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80060ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060f0:	f107 0208 	add.w	r2, r7, #8
 80060f4:	4610      	mov	r0, r2
 80060f6:	4798      	blx	r3
 80060f8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	3301      	adds	r3, #1
 80060fe:	2202      	movs	r2, #2
 8006100:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8006102:	e100      	b.n	8006306 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800610a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800610c:	f107 0208 	add.w	r2, r7, #8
 8006110:	4610      	mov	r0, r2
 8006112:	4798      	blx	r3
 8006114:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	3301      	adds	r3, #1
 800611a:	2202      	movs	r2, #2
 800611c:	701a      	strb	r2, [r3, #0]
      break;
 800611e:	e0f2      	b.n	8006306 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8006120:	683b      	ldr	r3, [r7, #0]
 8006122:	885b      	ldrh	r3, [r3, #2]
 8006124:	b2db      	uxtb	r3, r3
 8006126:	2b05      	cmp	r3, #5
 8006128:	f200 80ac 	bhi.w	8006284 <USBD_GetDescriptor+0x204>
 800612c:	a201      	add	r2, pc, #4	; (adr r2, 8006134 <USBD_GetDescriptor+0xb4>)
 800612e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006132:	bf00      	nop
 8006134:	0800614d 	.word	0x0800614d
 8006138:	08006181 	.word	0x08006181
 800613c:	080061b5 	.word	0x080061b5
 8006140:	080061e9 	.word	0x080061e9
 8006144:	0800621d 	.word	0x0800621d
 8006148:	08006251 	.word	0x08006251
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006152:	685b      	ldr	r3, [r3, #4]
 8006154:	2b00      	cmp	r3, #0
 8006156:	d00b      	beq.n	8006170 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800615e:	685b      	ldr	r3, [r3, #4]
 8006160:	687a      	ldr	r2, [r7, #4]
 8006162:	7c12      	ldrb	r2, [r2, #16]
 8006164:	f107 0108 	add.w	r1, r7, #8
 8006168:	4610      	mov	r0, r2
 800616a:	4798      	blx	r3
 800616c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800616e:	e091      	b.n	8006294 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006170:	6839      	ldr	r1, [r7, #0]
 8006172:	6878      	ldr	r0, [r7, #4]
 8006174:	f000 fa94 	bl	80066a0 <USBD_CtlError>
            err++;
 8006178:	7afb      	ldrb	r3, [r7, #11]
 800617a:	3301      	adds	r3, #1
 800617c:	72fb      	strb	r3, [r7, #11]
          break;
 800617e:	e089      	b.n	8006294 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006186:	689b      	ldr	r3, [r3, #8]
 8006188:	2b00      	cmp	r3, #0
 800618a:	d00b      	beq.n	80061a4 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006192:	689b      	ldr	r3, [r3, #8]
 8006194:	687a      	ldr	r2, [r7, #4]
 8006196:	7c12      	ldrb	r2, [r2, #16]
 8006198:	f107 0108 	add.w	r1, r7, #8
 800619c:	4610      	mov	r0, r2
 800619e:	4798      	blx	r3
 80061a0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80061a2:	e077      	b.n	8006294 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80061a4:	6839      	ldr	r1, [r7, #0]
 80061a6:	6878      	ldr	r0, [r7, #4]
 80061a8:	f000 fa7a 	bl	80066a0 <USBD_CtlError>
            err++;
 80061ac:	7afb      	ldrb	r3, [r7, #11]
 80061ae:	3301      	adds	r3, #1
 80061b0:	72fb      	strb	r3, [r7, #11]
          break;
 80061b2:	e06f      	b.n	8006294 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80061ba:	68db      	ldr	r3, [r3, #12]
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d00b      	beq.n	80061d8 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80061c6:	68db      	ldr	r3, [r3, #12]
 80061c8:	687a      	ldr	r2, [r7, #4]
 80061ca:	7c12      	ldrb	r2, [r2, #16]
 80061cc:	f107 0108 	add.w	r1, r7, #8
 80061d0:	4610      	mov	r0, r2
 80061d2:	4798      	blx	r3
 80061d4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80061d6:	e05d      	b.n	8006294 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80061d8:	6839      	ldr	r1, [r7, #0]
 80061da:	6878      	ldr	r0, [r7, #4]
 80061dc:	f000 fa60 	bl	80066a0 <USBD_CtlError>
            err++;
 80061e0:	7afb      	ldrb	r3, [r7, #11]
 80061e2:	3301      	adds	r3, #1
 80061e4:	72fb      	strb	r3, [r7, #11]
          break;
 80061e6:	e055      	b.n	8006294 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80061ee:	691b      	ldr	r3, [r3, #16]
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d00b      	beq.n	800620c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80061fa:	691b      	ldr	r3, [r3, #16]
 80061fc:	687a      	ldr	r2, [r7, #4]
 80061fe:	7c12      	ldrb	r2, [r2, #16]
 8006200:	f107 0108 	add.w	r1, r7, #8
 8006204:	4610      	mov	r0, r2
 8006206:	4798      	blx	r3
 8006208:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800620a:	e043      	b.n	8006294 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800620c:	6839      	ldr	r1, [r7, #0]
 800620e:	6878      	ldr	r0, [r7, #4]
 8006210:	f000 fa46 	bl	80066a0 <USBD_CtlError>
            err++;
 8006214:	7afb      	ldrb	r3, [r7, #11]
 8006216:	3301      	adds	r3, #1
 8006218:	72fb      	strb	r3, [r7, #11]
          break;
 800621a:	e03b      	b.n	8006294 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006222:	695b      	ldr	r3, [r3, #20]
 8006224:	2b00      	cmp	r3, #0
 8006226:	d00b      	beq.n	8006240 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800622e:	695b      	ldr	r3, [r3, #20]
 8006230:	687a      	ldr	r2, [r7, #4]
 8006232:	7c12      	ldrb	r2, [r2, #16]
 8006234:	f107 0108 	add.w	r1, r7, #8
 8006238:	4610      	mov	r0, r2
 800623a:	4798      	blx	r3
 800623c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800623e:	e029      	b.n	8006294 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006240:	6839      	ldr	r1, [r7, #0]
 8006242:	6878      	ldr	r0, [r7, #4]
 8006244:	f000 fa2c 	bl	80066a0 <USBD_CtlError>
            err++;
 8006248:	7afb      	ldrb	r3, [r7, #11]
 800624a:	3301      	adds	r3, #1
 800624c:	72fb      	strb	r3, [r7, #11]
          break;
 800624e:	e021      	b.n	8006294 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006256:	699b      	ldr	r3, [r3, #24]
 8006258:	2b00      	cmp	r3, #0
 800625a:	d00b      	beq.n	8006274 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006262:	699b      	ldr	r3, [r3, #24]
 8006264:	687a      	ldr	r2, [r7, #4]
 8006266:	7c12      	ldrb	r2, [r2, #16]
 8006268:	f107 0108 	add.w	r1, r7, #8
 800626c:	4610      	mov	r0, r2
 800626e:	4798      	blx	r3
 8006270:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006272:	e00f      	b.n	8006294 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006274:	6839      	ldr	r1, [r7, #0]
 8006276:	6878      	ldr	r0, [r7, #4]
 8006278:	f000 fa12 	bl	80066a0 <USBD_CtlError>
            err++;
 800627c:	7afb      	ldrb	r3, [r7, #11]
 800627e:	3301      	adds	r3, #1
 8006280:	72fb      	strb	r3, [r7, #11]
          break;
 8006282:	e007      	b.n	8006294 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8006284:	6839      	ldr	r1, [r7, #0]
 8006286:	6878      	ldr	r0, [r7, #4]
 8006288:	f000 fa0a 	bl	80066a0 <USBD_CtlError>
          err++;
 800628c:	7afb      	ldrb	r3, [r7, #11]
 800628e:	3301      	adds	r3, #1
 8006290:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8006292:	e038      	b.n	8006306 <USBD_GetDescriptor+0x286>
 8006294:	e037      	b.n	8006306 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	7c1b      	ldrb	r3, [r3, #16]
 800629a:	2b00      	cmp	r3, #0
 800629c:	d109      	bne.n	80062b2 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80062a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062a6:	f107 0208 	add.w	r2, r7, #8
 80062aa:	4610      	mov	r0, r2
 80062ac:	4798      	blx	r3
 80062ae:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80062b0:	e029      	b.n	8006306 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80062b2:	6839      	ldr	r1, [r7, #0]
 80062b4:	6878      	ldr	r0, [r7, #4]
 80062b6:	f000 f9f3 	bl	80066a0 <USBD_CtlError>
        err++;
 80062ba:	7afb      	ldrb	r3, [r7, #11]
 80062bc:	3301      	adds	r3, #1
 80062be:	72fb      	strb	r3, [r7, #11]
      break;
 80062c0:	e021      	b.n	8006306 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	7c1b      	ldrb	r3, [r3, #16]
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d10d      	bne.n	80062e6 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80062d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062d2:	f107 0208 	add.w	r2, r7, #8
 80062d6:	4610      	mov	r0, r2
 80062d8:	4798      	blx	r3
 80062da:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	3301      	adds	r3, #1
 80062e0:	2207      	movs	r2, #7
 80062e2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80062e4:	e00f      	b.n	8006306 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80062e6:	6839      	ldr	r1, [r7, #0]
 80062e8:	6878      	ldr	r0, [r7, #4]
 80062ea:	f000 f9d9 	bl	80066a0 <USBD_CtlError>
        err++;
 80062ee:	7afb      	ldrb	r3, [r7, #11]
 80062f0:	3301      	adds	r3, #1
 80062f2:	72fb      	strb	r3, [r7, #11]
      break;
 80062f4:	e007      	b.n	8006306 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80062f6:	6839      	ldr	r1, [r7, #0]
 80062f8:	6878      	ldr	r0, [r7, #4]
 80062fa:	f000 f9d1 	bl	80066a0 <USBD_CtlError>
      err++;
 80062fe:	7afb      	ldrb	r3, [r7, #11]
 8006300:	3301      	adds	r3, #1
 8006302:	72fb      	strb	r3, [r7, #11]
      break;
 8006304:	bf00      	nop
  }

  if (err != 0U)
 8006306:	7afb      	ldrb	r3, [r7, #11]
 8006308:	2b00      	cmp	r3, #0
 800630a:	d11c      	bne.n	8006346 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800630c:	893b      	ldrh	r3, [r7, #8]
 800630e:	2b00      	cmp	r3, #0
 8006310:	d011      	beq.n	8006336 <USBD_GetDescriptor+0x2b6>
 8006312:	683b      	ldr	r3, [r7, #0]
 8006314:	88db      	ldrh	r3, [r3, #6]
 8006316:	2b00      	cmp	r3, #0
 8006318:	d00d      	beq.n	8006336 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800631a:	683b      	ldr	r3, [r7, #0]
 800631c:	88da      	ldrh	r2, [r3, #6]
 800631e:	893b      	ldrh	r3, [r7, #8]
 8006320:	4293      	cmp	r3, r2
 8006322:	bf28      	it	cs
 8006324:	4613      	movcs	r3, r2
 8006326:	b29b      	uxth	r3, r3
 8006328:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800632a:	893b      	ldrh	r3, [r7, #8]
 800632c:	461a      	mov	r2, r3
 800632e:	68f9      	ldr	r1, [r7, #12]
 8006330:	6878      	ldr	r0, [r7, #4]
 8006332:	f000 fa1f 	bl	8006774 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8006336:	683b      	ldr	r3, [r7, #0]
 8006338:	88db      	ldrh	r3, [r3, #6]
 800633a:	2b00      	cmp	r3, #0
 800633c:	d104      	bne.n	8006348 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800633e:	6878      	ldr	r0, [r7, #4]
 8006340:	f000 fa76 	bl	8006830 <USBD_CtlSendStatus>
 8006344:	e000      	b.n	8006348 <USBD_GetDescriptor+0x2c8>
    return;
 8006346:	bf00      	nop
    }
  }
}
 8006348:	3710      	adds	r7, #16
 800634a:	46bd      	mov	sp, r7
 800634c:	bd80      	pop	{r7, pc}
 800634e:	bf00      	nop

08006350 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8006350:	b580      	push	{r7, lr}
 8006352:	b084      	sub	sp, #16
 8006354:	af00      	add	r7, sp, #0
 8006356:	6078      	str	r0, [r7, #4]
 8006358:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800635a:	683b      	ldr	r3, [r7, #0]
 800635c:	889b      	ldrh	r3, [r3, #4]
 800635e:	2b00      	cmp	r3, #0
 8006360:	d130      	bne.n	80063c4 <USBD_SetAddress+0x74>
 8006362:	683b      	ldr	r3, [r7, #0]
 8006364:	88db      	ldrh	r3, [r3, #6]
 8006366:	2b00      	cmp	r3, #0
 8006368:	d12c      	bne.n	80063c4 <USBD_SetAddress+0x74>
 800636a:	683b      	ldr	r3, [r7, #0]
 800636c:	885b      	ldrh	r3, [r3, #2]
 800636e:	2b7f      	cmp	r3, #127	; 0x7f
 8006370:	d828      	bhi.n	80063c4 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8006372:	683b      	ldr	r3, [r7, #0]
 8006374:	885b      	ldrh	r3, [r3, #2]
 8006376:	b2db      	uxtb	r3, r3
 8006378:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800637c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006384:	2b03      	cmp	r3, #3
 8006386:	d104      	bne.n	8006392 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8006388:	6839      	ldr	r1, [r7, #0]
 800638a:	6878      	ldr	r0, [r7, #4]
 800638c:	f000 f988 	bl	80066a0 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006390:	e01c      	b.n	80063cc <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	7bfa      	ldrb	r2, [r7, #15]
 8006396:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800639a:	7bfb      	ldrb	r3, [r7, #15]
 800639c:	4619      	mov	r1, r3
 800639e:	6878      	ldr	r0, [r7, #4]
 80063a0:	f000 fe45 	bl	800702e <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 80063a4:	6878      	ldr	r0, [r7, #4]
 80063a6:	f000 fa43 	bl	8006830 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80063aa:	7bfb      	ldrb	r3, [r7, #15]
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d004      	beq.n	80063ba <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	2202      	movs	r2, #2
 80063b4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80063b8:	e008      	b.n	80063cc <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	2201      	movs	r2, #1
 80063be:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80063c2:	e003      	b.n	80063cc <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80063c4:	6839      	ldr	r1, [r7, #0]
 80063c6:	6878      	ldr	r0, [r7, #4]
 80063c8:	f000 f96a 	bl	80066a0 <USBD_CtlError>
  }
}
 80063cc:	bf00      	nop
 80063ce:	3710      	adds	r7, #16
 80063d0:	46bd      	mov	sp, r7
 80063d2:	bd80      	pop	{r7, pc}

080063d4 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80063d4:	b580      	push	{r7, lr}
 80063d6:	b082      	sub	sp, #8
 80063d8:	af00      	add	r7, sp, #0
 80063da:	6078      	str	r0, [r7, #4]
 80063dc:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80063de:	683b      	ldr	r3, [r7, #0]
 80063e0:	885b      	ldrh	r3, [r3, #2]
 80063e2:	b2da      	uxtb	r2, r3
 80063e4:	4b41      	ldr	r3, [pc, #260]	; (80064ec <USBD_SetConfig+0x118>)
 80063e6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80063e8:	4b40      	ldr	r3, [pc, #256]	; (80064ec <USBD_SetConfig+0x118>)
 80063ea:	781b      	ldrb	r3, [r3, #0]
 80063ec:	2b01      	cmp	r3, #1
 80063ee:	d904      	bls.n	80063fa <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 80063f0:	6839      	ldr	r1, [r7, #0]
 80063f2:	6878      	ldr	r0, [r7, #4]
 80063f4:	f000 f954 	bl	80066a0 <USBD_CtlError>
 80063f8:	e075      	b.n	80064e6 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006400:	2b02      	cmp	r3, #2
 8006402:	d002      	beq.n	800640a <USBD_SetConfig+0x36>
 8006404:	2b03      	cmp	r3, #3
 8006406:	d023      	beq.n	8006450 <USBD_SetConfig+0x7c>
 8006408:	e062      	b.n	80064d0 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800640a:	4b38      	ldr	r3, [pc, #224]	; (80064ec <USBD_SetConfig+0x118>)
 800640c:	781b      	ldrb	r3, [r3, #0]
 800640e:	2b00      	cmp	r3, #0
 8006410:	d01a      	beq.n	8006448 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8006412:	4b36      	ldr	r3, [pc, #216]	; (80064ec <USBD_SetConfig+0x118>)
 8006414:	781b      	ldrb	r3, [r3, #0]
 8006416:	461a      	mov	r2, r3
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	2203      	movs	r2, #3
 8006420:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8006424:	4b31      	ldr	r3, [pc, #196]	; (80064ec <USBD_SetConfig+0x118>)
 8006426:	781b      	ldrb	r3, [r3, #0]
 8006428:	4619      	mov	r1, r3
 800642a:	6878      	ldr	r0, [r7, #4]
 800642c:	f7ff f9f3 	bl	8005816 <USBD_SetClassConfig>
 8006430:	4603      	mov	r3, r0
 8006432:	2b02      	cmp	r3, #2
 8006434:	d104      	bne.n	8006440 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8006436:	6839      	ldr	r1, [r7, #0]
 8006438:	6878      	ldr	r0, [r7, #4]
 800643a:	f000 f931 	bl	80066a0 <USBD_CtlError>
            return;
 800643e:	e052      	b.n	80064e6 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8006440:	6878      	ldr	r0, [r7, #4]
 8006442:	f000 f9f5 	bl	8006830 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8006446:	e04e      	b.n	80064e6 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8006448:	6878      	ldr	r0, [r7, #4]
 800644a:	f000 f9f1 	bl	8006830 <USBD_CtlSendStatus>
        break;
 800644e:	e04a      	b.n	80064e6 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8006450:	4b26      	ldr	r3, [pc, #152]	; (80064ec <USBD_SetConfig+0x118>)
 8006452:	781b      	ldrb	r3, [r3, #0]
 8006454:	2b00      	cmp	r3, #0
 8006456:	d112      	bne.n	800647e <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	2202      	movs	r2, #2
 800645c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8006460:	4b22      	ldr	r3, [pc, #136]	; (80064ec <USBD_SetConfig+0x118>)
 8006462:	781b      	ldrb	r3, [r3, #0]
 8006464:	461a      	mov	r2, r3
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800646a:	4b20      	ldr	r3, [pc, #128]	; (80064ec <USBD_SetConfig+0x118>)
 800646c:	781b      	ldrb	r3, [r3, #0]
 800646e:	4619      	mov	r1, r3
 8006470:	6878      	ldr	r0, [r7, #4]
 8006472:	f7ff f9ef 	bl	8005854 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8006476:	6878      	ldr	r0, [r7, #4]
 8006478:	f000 f9da 	bl	8006830 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800647c:	e033      	b.n	80064e6 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800647e:	4b1b      	ldr	r3, [pc, #108]	; (80064ec <USBD_SetConfig+0x118>)
 8006480:	781b      	ldrb	r3, [r3, #0]
 8006482:	461a      	mov	r2, r3
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	685b      	ldr	r3, [r3, #4]
 8006488:	429a      	cmp	r2, r3
 800648a:	d01d      	beq.n	80064c8 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	685b      	ldr	r3, [r3, #4]
 8006490:	b2db      	uxtb	r3, r3
 8006492:	4619      	mov	r1, r3
 8006494:	6878      	ldr	r0, [r7, #4]
 8006496:	f7ff f9dd 	bl	8005854 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800649a:	4b14      	ldr	r3, [pc, #80]	; (80064ec <USBD_SetConfig+0x118>)
 800649c:	781b      	ldrb	r3, [r3, #0]
 800649e:	461a      	mov	r2, r3
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80064a4:	4b11      	ldr	r3, [pc, #68]	; (80064ec <USBD_SetConfig+0x118>)
 80064a6:	781b      	ldrb	r3, [r3, #0]
 80064a8:	4619      	mov	r1, r3
 80064aa:	6878      	ldr	r0, [r7, #4]
 80064ac:	f7ff f9b3 	bl	8005816 <USBD_SetClassConfig>
 80064b0:	4603      	mov	r3, r0
 80064b2:	2b02      	cmp	r3, #2
 80064b4:	d104      	bne.n	80064c0 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 80064b6:	6839      	ldr	r1, [r7, #0]
 80064b8:	6878      	ldr	r0, [r7, #4]
 80064ba:	f000 f8f1 	bl	80066a0 <USBD_CtlError>
            return;
 80064be:	e012      	b.n	80064e6 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80064c0:	6878      	ldr	r0, [r7, #4]
 80064c2:	f000 f9b5 	bl	8006830 <USBD_CtlSendStatus>
        break;
 80064c6:	e00e      	b.n	80064e6 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80064c8:	6878      	ldr	r0, [r7, #4]
 80064ca:	f000 f9b1 	bl	8006830 <USBD_CtlSendStatus>
        break;
 80064ce:	e00a      	b.n	80064e6 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 80064d0:	6839      	ldr	r1, [r7, #0]
 80064d2:	6878      	ldr	r0, [r7, #4]
 80064d4:	f000 f8e4 	bl	80066a0 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 80064d8:	4b04      	ldr	r3, [pc, #16]	; (80064ec <USBD_SetConfig+0x118>)
 80064da:	781b      	ldrb	r3, [r3, #0]
 80064dc:	4619      	mov	r1, r3
 80064de:	6878      	ldr	r0, [r7, #4]
 80064e0:	f7ff f9b8 	bl	8005854 <USBD_ClrClassConfig>
        break;
 80064e4:	bf00      	nop
    }
  }
}
 80064e6:	3708      	adds	r7, #8
 80064e8:	46bd      	mov	sp, r7
 80064ea:	bd80      	pop	{r7, pc}
 80064ec:	2000037c 	.word	0x2000037c

080064f0 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80064f0:	b580      	push	{r7, lr}
 80064f2:	b082      	sub	sp, #8
 80064f4:	af00      	add	r7, sp, #0
 80064f6:	6078      	str	r0, [r7, #4]
 80064f8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80064fa:	683b      	ldr	r3, [r7, #0]
 80064fc:	88db      	ldrh	r3, [r3, #6]
 80064fe:	2b01      	cmp	r3, #1
 8006500:	d004      	beq.n	800650c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8006502:	6839      	ldr	r1, [r7, #0]
 8006504:	6878      	ldr	r0, [r7, #4]
 8006506:	f000 f8cb 	bl	80066a0 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800650a:	e021      	b.n	8006550 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006512:	2b01      	cmp	r3, #1
 8006514:	db17      	blt.n	8006546 <USBD_GetConfig+0x56>
 8006516:	2b02      	cmp	r3, #2
 8006518:	dd02      	ble.n	8006520 <USBD_GetConfig+0x30>
 800651a:	2b03      	cmp	r3, #3
 800651c:	d00b      	beq.n	8006536 <USBD_GetConfig+0x46>
 800651e:	e012      	b.n	8006546 <USBD_GetConfig+0x56>
        pdev->dev_default_config = 0U;
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	2200      	movs	r2, #0
 8006524:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	3308      	adds	r3, #8
 800652a:	2201      	movs	r2, #1
 800652c:	4619      	mov	r1, r3
 800652e:	6878      	ldr	r0, [r7, #4]
 8006530:	f000 f920 	bl	8006774 <USBD_CtlSendData>
        break;
 8006534:	e00c      	b.n	8006550 <USBD_GetConfig+0x60>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	3304      	adds	r3, #4
 800653a:	2201      	movs	r2, #1
 800653c:	4619      	mov	r1, r3
 800653e:	6878      	ldr	r0, [r7, #4]
 8006540:	f000 f918 	bl	8006774 <USBD_CtlSendData>
        break;
 8006544:	e004      	b.n	8006550 <USBD_GetConfig+0x60>
        USBD_CtlError(pdev, req);
 8006546:	6839      	ldr	r1, [r7, #0]
 8006548:	6878      	ldr	r0, [r7, #4]
 800654a:	f000 f8a9 	bl	80066a0 <USBD_CtlError>
        break;
 800654e:	bf00      	nop
}
 8006550:	bf00      	nop
 8006552:	3708      	adds	r7, #8
 8006554:	46bd      	mov	sp, r7
 8006556:	bd80      	pop	{r7, pc}

08006558 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006558:	b580      	push	{r7, lr}
 800655a:	b082      	sub	sp, #8
 800655c:	af00      	add	r7, sp, #0
 800655e:	6078      	str	r0, [r7, #4]
 8006560:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006568:	3b01      	subs	r3, #1
 800656a:	2b02      	cmp	r3, #2
 800656c:	d81e      	bhi.n	80065ac <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800656e:	683b      	ldr	r3, [r7, #0]
 8006570:	88db      	ldrh	r3, [r3, #6]
 8006572:	2b02      	cmp	r3, #2
 8006574:	d004      	beq.n	8006580 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8006576:	6839      	ldr	r1, [r7, #0]
 8006578:	6878      	ldr	r0, [r7, #4]
 800657a:	f000 f891 	bl	80066a0 <USBD_CtlError>
        break;
 800657e:	e01a      	b.n	80065b6 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	2201      	movs	r2, #1
 8006584:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800658c:	2b00      	cmp	r3, #0
 800658e:	d005      	beq.n	800659c <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	68db      	ldr	r3, [r3, #12]
 8006594:	f043 0202 	orr.w	r2, r3, #2
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	330c      	adds	r3, #12
 80065a0:	2202      	movs	r2, #2
 80065a2:	4619      	mov	r1, r3
 80065a4:	6878      	ldr	r0, [r7, #4]
 80065a6:	f000 f8e5 	bl	8006774 <USBD_CtlSendData>
      break;
 80065aa:	e004      	b.n	80065b6 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 80065ac:	6839      	ldr	r1, [r7, #0]
 80065ae:	6878      	ldr	r0, [r7, #4]
 80065b0:	f000 f876 	bl	80066a0 <USBD_CtlError>
      break;
 80065b4:	bf00      	nop
  }
}
 80065b6:	bf00      	nop
 80065b8:	3708      	adds	r7, #8
 80065ba:	46bd      	mov	sp, r7
 80065bc:	bd80      	pop	{r7, pc}

080065be <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80065be:	b580      	push	{r7, lr}
 80065c0:	b082      	sub	sp, #8
 80065c2:	af00      	add	r7, sp, #0
 80065c4:	6078      	str	r0, [r7, #4]
 80065c6:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80065c8:	683b      	ldr	r3, [r7, #0]
 80065ca:	885b      	ldrh	r3, [r3, #2]
 80065cc:	2b01      	cmp	r3, #1
 80065ce:	d106      	bne.n	80065de <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	2201      	movs	r2, #1
 80065d4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 80065d8:	6878      	ldr	r0, [r7, #4]
 80065da:	f000 f929 	bl	8006830 <USBD_CtlSendStatus>
  }
}
 80065de:	bf00      	nop
 80065e0:	3708      	adds	r7, #8
 80065e2:	46bd      	mov	sp, r7
 80065e4:	bd80      	pop	{r7, pc}

080065e6 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80065e6:	b580      	push	{r7, lr}
 80065e8:	b082      	sub	sp, #8
 80065ea:	af00      	add	r7, sp, #0
 80065ec:	6078      	str	r0, [r7, #4]
 80065ee:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80065f6:	3b01      	subs	r3, #1
 80065f8:	2b02      	cmp	r3, #2
 80065fa:	d80b      	bhi.n	8006614 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80065fc:	683b      	ldr	r3, [r7, #0]
 80065fe:	885b      	ldrh	r3, [r3, #2]
 8006600:	2b01      	cmp	r3, #1
 8006602:	d10c      	bne.n	800661e <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	2200      	movs	r2, #0
 8006608:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 800660c:	6878      	ldr	r0, [r7, #4]
 800660e:	f000 f90f 	bl	8006830 <USBD_CtlSendStatus>
      }
      break;
 8006612:	e004      	b.n	800661e <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8006614:	6839      	ldr	r1, [r7, #0]
 8006616:	6878      	ldr	r0, [r7, #4]
 8006618:	f000 f842 	bl	80066a0 <USBD_CtlError>
      break;
 800661c:	e000      	b.n	8006620 <USBD_ClrFeature+0x3a>
      break;
 800661e:	bf00      	nop
  }
}
 8006620:	bf00      	nop
 8006622:	3708      	adds	r7, #8
 8006624:	46bd      	mov	sp, r7
 8006626:	bd80      	pop	{r7, pc}

08006628 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8006628:	b480      	push	{r7}
 800662a:	b083      	sub	sp, #12
 800662c:	af00      	add	r7, sp, #0
 800662e:	6078      	str	r0, [r7, #4]
 8006630:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8006632:	683b      	ldr	r3, [r7, #0]
 8006634:	781a      	ldrb	r2, [r3, #0]
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800663a:	683b      	ldr	r3, [r7, #0]
 800663c:	785a      	ldrb	r2, [r3, #1]
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8006642:	683b      	ldr	r3, [r7, #0]
 8006644:	3302      	adds	r3, #2
 8006646:	781b      	ldrb	r3, [r3, #0]
 8006648:	b29a      	uxth	r2, r3
 800664a:	683b      	ldr	r3, [r7, #0]
 800664c:	3303      	adds	r3, #3
 800664e:	781b      	ldrb	r3, [r3, #0]
 8006650:	b29b      	uxth	r3, r3
 8006652:	021b      	lsls	r3, r3, #8
 8006654:	b29b      	uxth	r3, r3
 8006656:	4413      	add	r3, r2
 8006658:	b29a      	uxth	r2, r3
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800665e:	683b      	ldr	r3, [r7, #0]
 8006660:	3304      	adds	r3, #4
 8006662:	781b      	ldrb	r3, [r3, #0]
 8006664:	b29a      	uxth	r2, r3
 8006666:	683b      	ldr	r3, [r7, #0]
 8006668:	3305      	adds	r3, #5
 800666a:	781b      	ldrb	r3, [r3, #0]
 800666c:	b29b      	uxth	r3, r3
 800666e:	021b      	lsls	r3, r3, #8
 8006670:	b29b      	uxth	r3, r3
 8006672:	4413      	add	r3, r2
 8006674:	b29a      	uxth	r2, r3
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800667a:	683b      	ldr	r3, [r7, #0]
 800667c:	3306      	adds	r3, #6
 800667e:	781b      	ldrb	r3, [r3, #0]
 8006680:	b29a      	uxth	r2, r3
 8006682:	683b      	ldr	r3, [r7, #0]
 8006684:	3307      	adds	r3, #7
 8006686:	781b      	ldrb	r3, [r3, #0]
 8006688:	b29b      	uxth	r3, r3
 800668a:	021b      	lsls	r3, r3, #8
 800668c:	b29b      	uxth	r3, r3
 800668e:	4413      	add	r3, r2
 8006690:	b29a      	uxth	r2, r3
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	80da      	strh	r2, [r3, #6]

}
 8006696:	bf00      	nop
 8006698:	370c      	adds	r7, #12
 800669a:	46bd      	mov	sp, r7
 800669c:	bc80      	pop	{r7}
 800669e:	4770      	bx	lr

080066a0 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 80066a0:	b580      	push	{r7, lr}
 80066a2:	b082      	sub	sp, #8
 80066a4:	af00      	add	r7, sp, #0
 80066a6:	6078      	str	r0, [r7, #4]
 80066a8:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 80066aa:	2180      	movs	r1, #128	; 0x80
 80066ac:	6878      	ldr	r0, [r7, #4]
 80066ae:	f000 fc5b 	bl	8006f68 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 80066b2:	2100      	movs	r1, #0
 80066b4:	6878      	ldr	r0, [r7, #4]
 80066b6:	f000 fc57 	bl	8006f68 <USBD_LL_StallEP>
}
 80066ba:	bf00      	nop
 80066bc:	3708      	adds	r7, #8
 80066be:	46bd      	mov	sp, r7
 80066c0:	bd80      	pop	{r7, pc}

080066c2 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80066c2:	b580      	push	{r7, lr}
 80066c4:	b086      	sub	sp, #24
 80066c6:	af00      	add	r7, sp, #0
 80066c8:	60f8      	str	r0, [r7, #12]
 80066ca:	60b9      	str	r1, [r7, #8]
 80066cc:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80066ce:	2300      	movs	r3, #0
 80066d0:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d032      	beq.n	800673e <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 80066d8:	68f8      	ldr	r0, [r7, #12]
 80066da:	f000 f834 	bl	8006746 <USBD_GetLen>
 80066de:	4603      	mov	r3, r0
 80066e0:	3301      	adds	r3, #1
 80066e2:	b29b      	uxth	r3, r3
 80066e4:	005b      	lsls	r3, r3, #1
 80066e6:	b29a      	uxth	r2, r3
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 80066ec:	7dfb      	ldrb	r3, [r7, #23]
 80066ee:	1c5a      	adds	r2, r3, #1
 80066f0:	75fa      	strb	r2, [r7, #23]
 80066f2:	461a      	mov	r2, r3
 80066f4:	68bb      	ldr	r3, [r7, #8]
 80066f6:	4413      	add	r3, r2
 80066f8:	687a      	ldr	r2, [r7, #4]
 80066fa:	7812      	ldrb	r2, [r2, #0]
 80066fc:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 80066fe:	7dfb      	ldrb	r3, [r7, #23]
 8006700:	1c5a      	adds	r2, r3, #1
 8006702:	75fa      	strb	r2, [r7, #23]
 8006704:	461a      	mov	r2, r3
 8006706:	68bb      	ldr	r3, [r7, #8]
 8006708:	4413      	add	r3, r2
 800670a:	2203      	movs	r2, #3
 800670c:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800670e:	e012      	b.n	8006736 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	1c5a      	adds	r2, r3, #1
 8006714:	60fa      	str	r2, [r7, #12]
 8006716:	7dfa      	ldrb	r2, [r7, #23]
 8006718:	1c51      	adds	r1, r2, #1
 800671a:	75f9      	strb	r1, [r7, #23]
 800671c:	4611      	mov	r1, r2
 800671e:	68ba      	ldr	r2, [r7, #8]
 8006720:	440a      	add	r2, r1
 8006722:	781b      	ldrb	r3, [r3, #0]
 8006724:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8006726:	7dfb      	ldrb	r3, [r7, #23]
 8006728:	1c5a      	adds	r2, r3, #1
 800672a:	75fa      	strb	r2, [r7, #23]
 800672c:	461a      	mov	r2, r3
 800672e:	68bb      	ldr	r3, [r7, #8]
 8006730:	4413      	add	r3, r2
 8006732:	2200      	movs	r2, #0
 8006734:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	781b      	ldrb	r3, [r3, #0]
 800673a:	2b00      	cmp	r3, #0
 800673c:	d1e8      	bne.n	8006710 <USBD_GetString+0x4e>
    }
  }
}
 800673e:	bf00      	nop
 8006740:	3718      	adds	r7, #24
 8006742:	46bd      	mov	sp, r7
 8006744:	bd80      	pop	{r7, pc}

08006746 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8006746:	b480      	push	{r7}
 8006748:	b085      	sub	sp, #20
 800674a:	af00      	add	r7, sp, #0
 800674c:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800674e:	2300      	movs	r3, #0
 8006750:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8006752:	e005      	b.n	8006760 <USBD_GetLen+0x1a>
  {
    len++;
 8006754:	7bfb      	ldrb	r3, [r7, #15]
 8006756:	3301      	adds	r3, #1
 8006758:	73fb      	strb	r3, [r7, #15]
    buf++;
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	3301      	adds	r3, #1
 800675e:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	781b      	ldrb	r3, [r3, #0]
 8006764:	2b00      	cmp	r3, #0
 8006766:	d1f5      	bne.n	8006754 <USBD_GetLen+0xe>
  }

  return len;
 8006768:	7bfb      	ldrb	r3, [r7, #15]
}
 800676a:	4618      	mov	r0, r3
 800676c:	3714      	adds	r7, #20
 800676e:	46bd      	mov	sp, r7
 8006770:	bc80      	pop	{r7}
 8006772:	4770      	bx	lr

08006774 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8006774:	b580      	push	{r7, lr}
 8006776:	b084      	sub	sp, #16
 8006778:	af00      	add	r7, sp, #0
 800677a:	60f8      	str	r0, [r7, #12]
 800677c:	60b9      	str	r1, [r7, #8]
 800677e:	4613      	mov	r3, r2
 8006780:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	2202      	movs	r2, #2
 8006786:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800678a:	88fa      	ldrh	r2, [r7, #6]
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8006790:	88fa      	ldrh	r2, [r7, #6]
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006796:	88fb      	ldrh	r3, [r7, #6]
 8006798:	68ba      	ldr	r2, [r7, #8]
 800679a:	2100      	movs	r1, #0
 800679c:	68f8      	ldr	r0, [r7, #12]
 800679e:	f000 fc65 	bl	800706c <USBD_LL_Transmit>

  return USBD_OK;
 80067a2:	2300      	movs	r3, #0
}
 80067a4:	4618      	mov	r0, r3
 80067a6:	3710      	adds	r7, #16
 80067a8:	46bd      	mov	sp, r7
 80067aa:	bd80      	pop	{r7, pc}

080067ac <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 80067ac:	b580      	push	{r7, lr}
 80067ae:	b084      	sub	sp, #16
 80067b0:	af00      	add	r7, sp, #0
 80067b2:	60f8      	str	r0, [r7, #12]
 80067b4:	60b9      	str	r1, [r7, #8]
 80067b6:	4613      	mov	r3, r2
 80067b8:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80067ba:	88fb      	ldrh	r3, [r7, #6]
 80067bc:	68ba      	ldr	r2, [r7, #8]
 80067be:	2100      	movs	r1, #0
 80067c0:	68f8      	ldr	r0, [r7, #12]
 80067c2:	f000 fc53 	bl	800706c <USBD_LL_Transmit>

  return USBD_OK;
 80067c6:	2300      	movs	r3, #0
}
 80067c8:	4618      	mov	r0, r3
 80067ca:	3710      	adds	r7, #16
 80067cc:	46bd      	mov	sp, r7
 80067ce:	bd80      	pop	{r7, pc}

080067d0 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 80067d0:	b580      	push	{r7, lr}
 80067d2:	b084      	sub	sp, #16
 80067d4:	af00      	add	r7, sp, #0
 80067d6:	60f8      	str	r0, [r7, #12]
 80067d8:	60b9      	str	r1, [r7, #8]
 80067da:	4613      	mov	r3, r2
 80067dc:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	2203      	movs	r2, #3
 80067e2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80067e6:	88fa      	ldrh	r2, [r7, #6]
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 80067ee:	88fa      	ldrh	r2, [r7, #6]
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80067f6:	88fb      	ldrh	r3, [r7, #6]
 80067f8:	68ba      	ldr	r2, [r7, #8]
 80067fa:	2100      	movs	r1, #0
 80067fc:	68f8      	ldr	r0, [r7, #12]
 80067fe:	f000 fc58 	bl	80070b2 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006802:	2300      	movs	r3, #0
}
 8006804:	4618      	mov	r0, r3
 8006806:	3710      	adds	r7, #16
 8006808:	46bd      	mov	sp, r7
 800680a:	bd80      	pop	{r7, pc}

0800680c <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800680c:	b580      	push	{r7, lr}
 800680e:	b084      	sub	sp, #16
 8006810:	af00      	add	r7, sp, #0
 8006812:	60f8      	str	r0, [r7, #12]
 8006814:	60b9      	str	r1, [r7, #8]
 8006816:	4613      	mov	r3, r2
 8006818:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800681a:	88fb      	ldrh	r3, [r7, #6]
 800681c:	68ba      	ldr	r2, [r7, #8]
 800681e:	2100      	movs	r1, #0
 8006820:	68f8      	ldr	r0, [r7, #12]
 8006822:	f000 fc46 	bl	80070b2 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006826:	2300      	movs	r3, #0
}
 8006828:	4618      	mov	r0, r3
 800682a:	3710      	adds	r7, #16
 800682c:	46bd      	mov	sp, r7
 800682e:	bd80      	pop	{r7, pc}

08006830 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8006830:	b580      	push	{r7, lr}
 8006832:	b082      	sub	sp, #8
 8006834:	af00      	add	r7, sp, #0
 8006836:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	2204      	movs	r2, #4
 800683c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8006840:	2300      	movs	r3, #0
 8006842:	2200      	movs	r2, #0
 8006844:	2100      	movs	r1, #0
 8006846:	6878      	ldr	r0, [r7, #4]
 8006848:	f000 fc10 	bl	800706c <USBD_LL_Transmit>

  return USBD_OK;
 800684c:	2300      	movs	r3, #0
}
 800684e:	4618      	mov	r0, r3
 8006850:	3708      	adds	r7, #8
 8006852:	46bd      	mov	sp, r7
 8006854:	bd80      	pop	{r7, pc}

08006856 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8006856:	b580      	push	{r7, lr}
 8006858:	b082      	sub	sp, #8
 800685a:	af00      	add	r7, sp, #0
 800685c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	2205      	movs	r2, #5
 8006862:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006866:	2300      	movs	r3, #0
 8006868:	2200      	movs	r2, #0
 800686a:	2100      	movs	r1, #0
 800686c:	6878      	ldr	r0, [r7, #4]
 800686e:	f000 fc20 	bl	80070b2 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006872:	2300      	movs	r3, #0
}
 8006874:	4618      	mov	r0, r3
 8006876:	3708      	adds	r7, #8
 8006878:	46bd      	mov	sp, r7
 800687a:	bd80      	pop	{r7, pc}

0800687c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800687c:	b580      	push	{r7, lr}
 800687e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8006880:	2200      	movs	r2, #0
 8006882:	4912      	ldr	r1, [pc, #72]	; (80068cc <MX_USB_DEVICE_Init+0x50>)
 8006884:	4812      	ldr	r0, [pc, #72]	; (80068d0 <MX_USB_DEVICE_Init+0x54>)
 8006886:	f7fe ff6c 	bl	8005762 <USBD_Init>
 800688a:	4603      	mov	r3, r0
 800688c:	2b00      	cmp	r3, #0
 800688e:	d001      	beq.n	8006894 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8006890:	f7fa f898 	bl	80009c4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8006894:	490f      	ldr	r1, [pc, #60]	; (80068d4 <MX_USB_DEVICE_Init+0x58>)
 8006896:	480e      	ldr	r0, [pc, #56]	; (80068d0 <MX_USB_DEVICE_Init+0x54>)
 8006898:	f7fe ff8e 	bl	80057b8 <USBD_RegisterClass>
 800689c:	4603      	mov	r3, r0
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d001      	beq.n	80068a6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80068a2:	f7fa f88f 	bl	80009c4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80068a6:	490c      	ldr	r1, [pc, #48]	; (80068d8 <MX_USB_DEVICE_Init+0x5c>)
 80068a8:	4809      	ldr	r0, [pc, #36]	; (80068d0 <MX_USB_DEVICE_Init+0x54>)
 80068aa:	f7fe febf 	bl	800562c <USBD_CDC_RegisterInterface>
 80068ae:	4603      	mov	r3, r0
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d001      	beq.n	80068b8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80068b4:	f7fa f886 	bl	80009c4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80068b8:	4805      	ldr	r0, [pc, #20]	; (80068d0 <MX_USB_DEVICE_Init+0x54>)
 80068ba:	f7fe ff96 	bl	80057ea <USBD_Start>
 80068be:	4603      	mov	r3, r0
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d001      	beq.n	80068c8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80068c4:	f7fa f87e 	bl	80009c4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80068c8:	bf00      	nop
 80068ca:	bd80      	pop	{r7, pc}
 80068cc:	20000130 	.word	0x20000130
 80068d0:	20002e88 	.word	0x20002e88
 80068d4:	2000001c 	.word	0x2000001c
 80068d8:	20000120 	.word	0x20000120

080068dc <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80068dc:	b580      	push	{r7, lr}
 80068de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80068e0:	2200      	movs	r2, #0
 80068e2:	4905      	ldr	r1, [pc, #20]	; (80068f8 <CDC_Init_FS+0x1c>)
 80068e4:	4805      	ldr	r0, [pc, #20]	; (80068fc <CDC_Init_FS+0x20>)
 80068e6:	f7fe feb7 	bl	8005658 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80068ea:	4905      	ldr	r1, [pc, #20]	; (8006900 <CDC_Init_FS+0x24>)
 80068ec:	4803      	ldr	r0, [pc, #12]	; (80068fc <CDC_Init_FS+0x20>)
 80068ee:	f7fe fecc 	bl	800568a <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80068f2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80068f4:	4618      	mov	r0, r3
 80068f6:	bd80      	pop	{r7, pc}
 80068f8:	2000318c 	.word	0x2000318c
 80068fc:	20002e88 	.word	0x20002e88
 8006900:	2000314c 	.word	0x2000314c

08006904 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8006904:	b480      	push	{r7}
 8006906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8006908:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800690a:	4618      	mov	r0, r3
 800690c:	46bd      	mov	sp, r7
 800690e:	bc80      	pop	{r7}
 8006910:	4770      	bx	lr
	...

08006914 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8006914:	b480      	push	{r7}
 8006916:	b083      	sub	sp, #12
 8006918:	af00      	add	r7, sp, #0
 800691a:	4603      	mov	r3, r0
 800691c:	6039      	str	r1, [r7, #0]
 800691e:	71fb      	strb	r3, [r7, #7]
 8006920:	4613      	mov	r3, r2
 8006922:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8006924:	79fb      	ldrb	r3, [r7, #7]
 8006926:	2b23      	cmp	r3, #35	; 0x23
 8006928:	d84a      	bhi.n	80069c0 <CDC_Control_FS+0xac>
 800692a:	a201      	add	r2, pc, #4	; (adr r2, 8006930 <CDC_Control_FS+0x1c>)
 800692c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006930:	080069c1 	.word	0x080069c1
 8006934:	080069c1 	.word	0x080069c1
 8006938:	080069c1 	.word	0x080069c1
 800693c:	080069c1 	.word	0x080069c1
 8006940:	080069c1 	.word	0x080069c1
 8006944:	080069c1 	.word	0x080069c1
 8006948:	080069c1 	.word	0x080069c1
 800694c:	080069c1 	.word	0x080069c1
 8006950:	080069c1 	.word	0x080069c1
 8006954:	080069c1 	.word	0x080069c1
 8006958:	080069c1 	.word	0x080069c1
 800695c:	080069c1 	.word	0x080069c1
 8006960:	080069c1 	.word	0x080069c1
 8006964:	080069c1 	.word	0x080069c1
 8006968:	080069c1 	.word	0x080069c1
 800696c:	080069c1 	.word	0x080069c1
 8006970:	080069c1 	.word	0x080069c1
 8006974:	080069c1 	.word	0x080069c1
 8006978:	080069c1 	.word	0x080069c1
 800697c:	080069c1 	.word	0x080069c1
 8006980:	080069c1 	.word	0x080069c1
 8006984:	080069c1 	.word	0x080069c1
 8006988:	080069c1 	.word	0x080069c1
 800698c:	080069c1 	.word	0x080069c1
 8006990:	080069c1 	.word	0x080069c1
 8006994:	080069c1 	.word	0x080069c1
 8006998:	080069c1 	.word	0x080069c1
 800699c:	080069c1 	.word	0x080069c1
 80069a0:	080069c1 	.word	0x080069c1
 80069a4:	080069c1 	.word	0x080069c1
 80069a8:	080069c1 	.word	0x080069c1
 80069ac:	080069c1 	.word	0x080069c1
 80069b0:	080069c1 	.word	0x080069c1
 80069b4:	080069c1 	.word	0x080069c1
 80069b8:	080069c1 	.word	0x080069c1
 80069bc:	080069c1 	.word	0x080069c1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80069c0:	bf00      	nop
  }

  return (USBD_OK);
 80069c2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80069c4:	4618      	mov	r0, r3
 80069c6:	370c      	adds	r7, #12
 80069c8:	46bd      	mov	sp, r7
 80069ca:	bc80      	pop	{r7}
 80069cc:	4770      	bx	lr
 80069ce:	bf00      	nop

080069d0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80069d0:	b580      	push	{r7, lr}
 80069d2:	b082      	sub	sp, #8
 80069d4:	af00      	add	r7, sp, #0
 80069d6:	6078      	str	r0, [r7, #4]
 80069d8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80069da:	6879      	ldr	r1, [r7, #4]
 80069dc:	4808      	ldr	r0, [pc, #32]	; (8006a00 <CDC_Receive_FS+0x30>)
 80069de:	f7fe fe54 	bl	800568a <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80069e2:	4807      	ldr	r0, [pc, #28]	; (8006a00 <CDC_Receive_FS+0x30>)
 80069e4:	f7fe fe93 	bl	800570e <USBD_CDC_ReceivePacket>
  CDC_ReciveCallBack(Buf, *Len);
 80069e8:	683b      	ldr	r3, [r7, #0]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	4619      	mov	r1, r3
 80069ee:	6878      	ldr	r0, [r7, #4]
 80069f0:	f7f9 fe7a 	bl	80006e8 <CDC_ReciveCallBack>
  return (USBD_OK);
 80069f4:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80069f6:	4618      	mov	r0, r3
 80069f8:	3708      	adds	r7, #8
 80069fa:	46bd      	mov	sp, r7
 80069fc:	bd80      	pop	{r7, pc}
 80069fe:	bf00      	nop
 8006a00:	20002e88 	.word	0x20002e88

08006a04 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8006a04:	b580      	push	{r7, lr}
 8006a06:	b084      	sub	sp, #16
 8006a08:	af00      	add	r7, sp, #0
 8006a0a:	6078      	str	r0, [r7, #4]
 8006a0c:	460b      	mov	r3, r1
 8006a0e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8006a10:	2300      	movs	r3, #0
 8006a12:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8006a14:	4b0d      	ldr	r3, [pc, #52]	; (8006a4c <CDC_Transmit_FS+0x48>)
 8006a16:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a1a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8006a1c:	68bb      	ldr	r3, [r7, #8]
 8006a1e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d001      	beq.n	8006a2a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8006a26:	2301      	movs	r3, #1
 8006a28:	e00b      	b.n	8006a42 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8006a2a:	887b      	ldrh	r3, [r7, #2]
 8006a2c:	461a      	mov	r2, r3
 8006a2e:	6879      	ldr	r1, [r7, #4]
 8006a30:	4806      	ldr	r0, [pc, #24]	; (8006a4c <CDC_Transmit_FS+0x48>)
 8006a32:	f7fe fe11 	bl	8005658 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8006a36:	4805      	ldr	r0, [pc, #20]	; (8006a4c <CDC_Transmit_FS+0x48>)
 8006a38:	f7fe fe3a 	bl	80056b0 <USBD_CDC_TransmitPacket>
 8006a3c:	4603      	mov	r3, r0
 8006a3e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8006a40:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a42:	4618      	mov	r0, r3
 8006a44:	3710      	adds	r7, #16
 8006a46:	46bd      	mov	sp, r7
 8006a48:	bd80      	pop	{r7, pc}
 8006a4a:	bf00      	nop
 8006a4c:	20002e88 	.word	0x20002e88

08006a50 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006a50:	b480      	push	{r7}
 8006a52:	b083      	sub	sp, #12
 8006a54:	af00      	add	r7, sp, #0
 8006a56:	4603      	mov	r3, r0
 8006a58:	6039      	str	r1, [r7, #0]
 8006a5a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8006a5c:	683b      	ldr	r3, [r7, #0]
 8006a5e:	2212      	movs	r2, #18
 8006a60:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8006a62:	4b03      	ldr	r3, [pc, #12]	; (8006a70 <USBD_FS_DeviceDescriptor+0x20>)
}
 8006a64:	4618      	mov	r0, r3
 8006a66:	370c      	adds	r7, #12
 8006a68:	46bd      	mov	sp, r7
 8006a6a:	bc80      	pop	{r7}
 8006a6c:	4770      	bx	lr
 8006a6e:	bf00      	nop
 8006a70:	2000014c 	.word	0x2000014c

08006a74 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006a74:	b480      	push	{r7}
 8006a76:	b083      	sub	sp, #12
 8006a78:	af00      	add	r7, sp, #0
 8006a7a:	4603      	mov	r3, r0
 8006a7c:	6039      	str	r1, [r7, #0]
 8006a7e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8006a80:	683b      	ldr	r3, [r7, #0]
 8006a82:	2204      	movs	r2, #4
 8006a84:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8006a86:	4b03      	ldr	r3, [pc, #12]	; (8006a94 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8006a88:	4618      	mov	r0, r3
 8006a8a:	370c      	adds	r7, #12
 8006a8c:	46bd      	mov	sp, r7
 8006a8e:	bc80      	pop	{r7}
 8006a90:	4770      	bx	lr
 8006a92:	bf00      	nop
 8006a94:	20000160 	.word	0x20000160

08006a98 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006a98:	b580      	push	{r7, lr}
 8006a9a:	b082      	sub	sp, #8
 8006a9c:	af00      	add	r7, sp, #0
 8006a9e:	4603      	mov	r3, r0
 8006aa0:	6039      	str	r1, [r7, #0]
 8006aa2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006aa4:	79fb      	ldrb	r3, [r7, #7]
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d105      	bne.n	8006ab6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006aaa:	683a      	ldr	r2, [r7, #0]
 8006aac:	4907      	ldr	r1, [pc, #28]	; (8006acc <USBD_FS_ProductStrDescriptor+0x34>)
 8006aae:	4808      	ldr	r0, [pc, #32]	; (8006ad0 <USBD_FS_ProductStrDescriptor+0x38>)
 8006ab0:	f7ff fe07 	bl	80066c2 <USBD_GetString>
 8006ab4:	e004      	b.n	8006ac0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006ab6:	683a      	ldr	r2, [r7, #0]
 8006ab8:	4904      	ldr	r1, [pc, #16]	; (8006acc <USBD_FS_ProductStrDescriptor+0x34>)
 8006aba:	4805      	ldr	r0, [pc, #20]	; (8006ad0 <USBD_FS_ProductStrDescriptor+0x38>)
 8006abc:	f7ff fe01 	bl	80066c2 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006ac0:	4b02      	ldr	r3, [pc, #8]	; (8006acc <USBD_FS_ProductStrDescriptor+0x34>)
}
 8006ac2:	4618      	mov	r0, r3
 8006ac4:	3708      	adds	r7, #8
 8006ac6:	46bd      	mov	sp, r7
 8006ac8:	bd80      	pop	{r7, pc}
 8006aca:	bf00      	nop
 8006acc:	200031cc 	.word	0x200031cc
 8006ad0:	080073d4 	.word	0x080073d4

08006ad4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006ad4:	b580      	push	{r7, lr}
 8006ad6:	b082      	sub	sp, #8
 8006ad8:	af00      	add	r7, sp, #0
 8006ada:	4603      	mov	r3, r0
 8006adc:	6039      	str	r1, [r7, #0]
 8006ade:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8006ae0:	683a      	ldr	r2, [r7, #0]
 8006ae2:	4904      	ldr	r1, [pc, #16]	; (8006af4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8006ae4:	4804      	ldr	r0, [pc, #16]	; (8006af8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8006ae6:	f7ff fdec 	bl	80066c2 <USBD_GetString>
  return USBD_StrDesc;
 8006aea:	4b02      	ldr	r3, [pc, #8]	; (8006af4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8006aec:	4618      	mov	r0, r3
 8006aee:	3708      	adds	r7, #8
 8006af0:	46bd      	mov	sp, r7
 8006af2:	bd80      	pop	{r7, pc}
 8006af4:	200031cc 	.word	0x200031cc
 8006af8:	080073ec 	.word	0x080073ec

08006afc <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006afc:	b580      	push	{r7, lr}
 8006afe:	b082      	sub	sp, #8
 8006b00:	af00      	add	r7, sp, #0
 8006b02:	4603      	mov	r3, r0
 8006b04:	6039      	str	r1, [r7, #0]
 8006b06:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8006b08:	683b      	ldr	r3, [r7, #0]
 8006b0a:	221a      	movs	r2, #26
 8006b0c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8006b0e:	f000 f843 	bl	8006b98 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8006b12:	4b02      	ldr	r3, [pc, #8]	; (8006b1c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8006b14:	4618      	mov	r0, r3
 8006b16:	3708      	adds	r7, #8
 8006b18:	46bd      	mov	sp, r7
 8006b1a:	bd80      	pop	{r7, pc}
 8006b1c:	20000164 	.word	0x20000164

08006b20 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006b20:	b580      	push	{r7, lr}
 8006b22:	b082      	sub	sp, #8
 8006b24:	af00      	add	r7, sp, #0
 8006b26:	4603      	mov	r3, r0
 8006b28:	6039      	str	r1, [r7, #0]
 8006b2a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8006b2c:	79fb      	ldrb	r3, [r7, #7]
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d105      	bne.n	8006b3e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006b32:	683a      	ldr	r2, [r7, #0]
 8006b34:	4907      	ldr	r1, [pc, #28]	; (8006b54 <USBD_FS_ConfigStrDescriptor+0x34>)
 8006b36:	4808      	ldr	r0, [pc, #32]	; (8006b58 <USBD_FS_ConfigStrDescriptor+0x38>)
 8006b38:	f7ff fdc3 	bl	80066c2 <USBD_GetString>
 8006b3c:	e004      	b.n	8006b48 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006b3e:	683a      	ldr	r2, [r7, #0]
 8006b40:	4904      	ldr	r1, [pc, #16]	; (8006b54 <USBD_FS_ConfigStrDescriptor+0x34>)
 8006b42:	4805      	ldr	r0, [pc, #20]	; (8006b58 <USBD_FS_ConfigStrDescriptor+0x38>)
 8006b44:	f7ff fdbd 	bl	80066c2 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006b48:	4b02      	ldr	r3, [pc, #8]	; (8006b54 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8006b4a:	4618      	mov	r0, r3
 8006b4c:	3708      	adds	r7, #8
 8006b4e:	46bd      	mov	sp, r7
 8006b50:	bd80      	pop	{r7, pc}
 8006b52:	bf00      	nop
 8006b54:	200031cc 	.word	0x200031cc
 8006b58:	08007400 	.word	0x08007400

08006b5c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006b5c:	b580      	push	{r7, lr}
 8006b5e:	b082      	sub	sp, #8
 8006b60:	af00      	add	r7, sp, #0
 8006b62:	4603      	mov	r3, r0
 8006b64:	6039      	str	r1, [r7, #0]
 8006b66:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006b68:	79fb      	ldrb	r3, [r7, #7]
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d105      	bne.n	8006b7a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006b6e:	683a      	ldr	r2, [r7, #0]
 8006b70:	4907      	ldr	r1, [pc, #28]	; (8006b90 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006b72:	4808      	ldr	r0, [pc, #32]	; (8006b94 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006b74:	f7ff fda5 	bl	80066c2 <USBD_GetString>
 8006b78:	e004      	b.n	8006b84 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006b7a:	683a      	ldr	r2, [r7, #0]
 8006b7c:	4904      	ldr	r1, [pc, #16]	; (8006b90 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006b7e:	4805      	ldr	r0, [pc, #20]	; (8006b94 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006b80:	f7ff fd9f 	bl	80066c2 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006b84:	4b02      	ldr	r3, [pc, #8]	; (8006b90 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8006b86:	4618      	mov	r0, r3
 8006b88:	3708      	adds	r7, #8
 8006b8a:	46bd      	mov	sp, r7
 8006b8c:	bd80      	pop	{r7, pc}
 8006b8e:	bf00      	nop
 8006b90:	200031cc 	.word	0x200031cc
 8006b94:	0800740c 	.word	0x0800740c

08006b98 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8006b98:	b580      	push	{r7, lr}
 8006b9a:	b084      	sub	sp, #16
 8006b9c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8006b9e:	4b0f      	ldr	r3, [pc, #60]	; (8006bdc <Get_SerialNum+0x44>)
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8006ba4:	4b0e      	ldr	r3, [pc, #56]	; (8006be0 <Get_SerialNum+0x48>)
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8006baa:	4b0e      	ldr	r3, [pc, #56]	; (8006be4 <Get_SerialNum+0x4c>)
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8006bb0:	68fa      	ldr	r2, [r7, #12]
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	4413      	add	r3, r2
 8006bb6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d009      	beq.n	8006bd2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8006bbe:	2208      	movs	r2, #8
 8006bc0:	4909      	ldr	r1, [pc, #36]	; (8006be8 <Get_SerialNum+0x50>)
 8006bc2:	68f8      	ldr	r0, [r7, #12]
 8006bc4:	f000 f814 	bl	8006bf0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8006bc8:	2204      	movs	r2, #4
 8006bca:	4908      	ldr	r1, [pc, #32]	; (8006bec <Get_SerialNum+0x54>)
 8006bcc:	68b8      	ldr	r0, [r7, #8]
 8006bce:	f000 f80f 	bl	8006bf0 <IntToUnicode>
  }
}
 8006bd2:	bf00      	nop
 8006bd4:	3710      	adds	r7, #16
 8006bd6:	46bd      	mov	sp, r7
 8006bd8:	bd80      	pop	{r7, pc}
 8006bda:	bf00      	nop
 8006bdc:	1ffff7e8 	.word	0x1ffff7e8
 8006be0:	1ffff7ec 	.word	0x1ffff7ec
 8006be4:	1ffff7f0 	.word	0x1ffff7f0
 8006be8:	20000166 	.word	0x20000166
 8006bec:	20000176 	.word	0x20000176

08006bf0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8006bf0:	b480      	push	{r7}
 8006bf2:	b087      	sub	sp, #28
 8006bf4:	af00      	add	r7, sp, #0
 8006bf6:	60f8      	str	r0, [r7, #12]
 8006bf8:	60b9      	str	r1, [r7, #8]
 8006bfa:	4613      	mov	r3, r2
 8006bfc:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8006bfe:	2300      	movs	r3, #0
 8006c00:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8006c02:	2300      	movs	r3, #0
 8006c04:	75fb      	strb	r3, [r7, #23]
 8006c06:	e027      	b.n	8006c58 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	0f1b      	lsrs	r3, r3, #28
 8006c0c:	2b09      	cmp	r3, #9
 8006c0e:	d80b      	bhi.n	8006c28 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	0f1b      	lsrs	r3, r3, #28
 8006c14:	b2da      	uxtb	r2, r3
 8006c16:	7dfb      	ldrb	r3, [r7, #23]
 8006c18:	005b      	lsls	r3, r3, #1
 8006c1a:	4619      	mov	r1, r3
 8006c1c:	68bb      	ldr	r3, [r7, #8]
 8006c1e:	440b      	add	r3, r1
 8006c20:	3230      	adds	r2, #48	; 0x30
 8006c22:	b2d2      	uxtb	r2, r2
 8006c24:	701a      	strb	r2, [r3, #0]
 8006c26:	e00a      	b.n	8006c3e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	0f1b      	lsrs	r3, r3, #28
 8006c2c:	b2da      	uxtb	r2, r3
 8006c2e:	7dfb      	ldrb	r3, [r7, #23]
 8006c30:	005b      	lsls	r3, r3, #1
 8006c32:	4619      	mov	r1, r3
 8006c34:	68bb      	ldr	r3, [r7, #8]
 8006c36:	440b      	add	r3, r1
 8006c38:	3237      	adds	r2, #55	; 0x37
 8006c3a:	b2d2      	uxtb	r2, r2
 8006c3c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	011b      	lsls	r3, r3, #4
 8006c42:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8006c44:	7dfb      	ldrb	r3, [r7, #23]
 8006c46:	005b      	lsls	r3, r3, #1
 8006c48:	3301      	adds	r3, #1
 8006c4a:	68ba      	ldr	r2, [r7, #8]
 8006c4c:	4413      	add	r3, r2
 8006c4e:	2200      	movs	r2, #0
 8006c50:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8006c52:	7dfb      	ldrb	r3, [r7, #23]
 8006c54:	3301      	adds	r3, #1
 8006c56:	75fb      	strb	r3, [r7, #23]
 8006c58:	7dfa      	ldrb	r2, [r7, #23]
 8006c5a:	79fb      	ldrb	r3, [r7, #7]
 8006c5c:	429a      	cmp	r2, r3
 8006c5e:	d3d3      	bcc.n	8006c08 <IntToUnicode+0x18>
  }
}
 8006c60:	bf00      	nop
 8006c62:	371c      	adds	r7, #28
 8006c64:	46bd      	mov	sp, r7
 8006c66:	bc80      	pop	{r7}
 8006c68:	4770      	bx	lr
	...

08006c6c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8006c6c:	b580      	push	{r7, lr}
 8006c6e:	b084      	sub	sp, #16
 8006c70:	af00      	add	r7, sp, #0
 8006c72:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	4a11      	ldr	r2, [pc, #68]	; (8006cc0 <HAL_PCD_MspInit+0x54>)
 8006c7a:	4293      	cmp	r3, r2
 8006c7c:	d11b      	bne.n	8006cb6 <HAL_PCD_MspInit+0x4a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8006c7e:	4b11      	ldr	r3, [pc, #68]	; (8006cc4 <HAL_PCD_MspInit+0x58>)
 8006c80:	69db      	ldr	r3, [r3, #28]
 8006c82:	4a10      	ldr	r2, [pc, #64]	; (8006cc4 <HAL_PCD_MspInit+0x58>)
 8006c84:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006c88:	61d3      	str	r3, [r2, #28]
 8006c8a:	4b0e      	ldr	r3, [pc, #56]	; (8006cc4 <HAL_PCD_MspInit+0x58>)
 8006c8c:	69db      	ldr	r3, [r3, #28]
 8006c8e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006c92:	60fb      	str	r3, [r7, #12]
 8006c94:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_HP_CAN1_TX_IRQn, 1, 0);
 8006c96:	2200      	movs	r2, #0
 8006c98:	2101      	movs	r1, #1
 8006c9a:	2013      	movs	r0, #19
 8006c9c:	f7fa fed7 	bl	8001a4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_HP_CAN1_TX_IRQn);
 8006ca0:	2013      	movs	r0, #19
 8006ca2:	f7fa fef0 	bl	8001a86 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 1, 0);
 8006ca6:	2200      	movs	r2, #0
 8006ca8:	2101      	movs	r1, #1
 8006caa:	2014      	movs	r0, #20
 8006cac:	f7fa fecf 	bl	8001a4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8006cb0:	2014      	movs	r0, #20
 8006cb2:	f7fa fee8 	bl	8001a86 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8006cb6:	bf00      	nop
 8006cb8:	3710      	adds	r7, #16
 8006cba:	46bd      	mov	sp, r7
 8006cbc:	bd80      	pop	{r7, pc}
 8006cbe:	bf00      	nop
 8006cc0:	40005c00 	.word	0x40005c00
 8006cc4:	40021000 	.word	0x40021000

08006cc8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006cc8:	b580      	push	{r7, lr}
 8006cca:	b082      	sub	sp, #8
 8006ccc:	af00      	add	r7, sp, #0
 8006cce:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	f8d3 2268 	ldr.w	r2, [r3, #616]	; 0x268
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8006cdc:	4619      	mov	r1, r3
 8006cde:	4610      	mov	r0, r2
 8006ce0:	f7fe fdcb 	bl	800587a <USBD_LL_SetupStage>
}
 8006ce4:	bf00      	nop
 8006ce6:	3708      	adds	r7, #8
 8006ce8:	46bd      	mov	sp, r7
 8006cea:	bd80      	pop	{r7, pc}

08006cec <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006cec:	b580      	push	{r7, lr}
 8006cee:	b082      	sub	sp, #8
 8006cf0:	af00      	add	r7, sp, #0
 8006cf2:	6078      	str	r0, [r7, #4]
 8006cf4:	460b      	mov	r3, r1
 8006cf6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	f8d3 0268 	ldr.w	r0, [r3, #616]	; 0x268
 8006cfe:	78fb      	ldrb	r3, [r7, #3]
 8006d00:	687a      	ldr	r2, [r7, #4]
 8006d02:	015b      	lsls	r3, r3, #5
 8006d04:	4413      	add	r3, r2
 8006d06:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8006d0a:	681a      	ldr	r2, [r3, #0]
 8006d0c:	78fb      	ldrb	r3, [r7, #3]
 8006d0e:	4619      	mov	r1, r3
 8006d10:	f7fe fdfe 	bl	8005910 <USBD_LL_DataOutStage>
}
 8006d14:	bf00      	nop
 8006d16:	3708      	adds	r7, #8
 8006d18:	46bd      	mov	sp, r7
 8006d1a:	bd80      	pop	{r7, pc}

08006d1c <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006d1c:	b580      	push	{r7, lr}
 8006d1e:	b082      	sub	sp, #8
 8006d20:	af00      	add	r7, sp, #0
 8006d22:	6078      	str	r0, [r7, #4]
 8006d24:	460b      	mov	r3, r1
 8006d26:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	f8d3 0268 	ldr.w	r0, [r3, #616]	; 0x268
 8006d2e:	78fb      	ldrb	r3, [r7, #3]
 8006d30:	687a      	ldr	r2, [r7, #4]
 8006d32:	015b      	lsls	r3, r3, #5
 8006d34:	4413      	add	r3, r2
 8006d36:	333c      	adds	r3, #60	; 0x3c
 8006d38:	681a      	ldr	r2, [r3, #0]
 8006d3a:	78fb      	ldrb	r3, [r7, #3]
 8006d3c:	4619      	mov	r1, r3
 8006d3e:	f7fe fe58 	bl	80059f2 <USBD_LL_DataInStage>
}
 8006d42:	bf00      	nop
 8006d44:	3708      	adds	r7, #8
 8006d46:	46bd      	mov	sp, r7
 8006d48:	bd80      	pop	{r7, pc}

08006d4a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006d4a:	b580      	push	{r7, lr}
 8006d4c:	b082      	sub	sp, #8
 8006d4e:	af00      	add	r7, sp, #0
 8006d50:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8006d58:	4618      	mov	r0, r3
 8006d5a:	f7fe ff68 	bl	8005c2e <USBD_LL_SOF>
}
 8006d5e:	bf00      	nop
 8006d60:	3708      	adds	r7, #8
 8006d62:	46bd      	mov	sp, r7
 8006d64:	bd80      	pop	{r7, pc}

08006d66 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006d66:	b580      	push	{r7, lr}
 8006d68:	b084      	sub	sp, #16
 8006d6a:	af00      	add	r7, sp, #0
 8006d6c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8006d6e:	2301      	movs	r3, #1
 8006d70:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	689b      	ldr	r3, [r3, #8]
 8006d76:	2b02      	cmp	r3, #2
 8006d78:	d001      	beq.n	8006d7e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8006d7a:	f7f9 fe23 	bl	80009c4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8006d84:	7bfa      	ldrb	r2, [r7, #15]
 8006d86:	4611      	mov	r1, r2
 8006d88:	4618      	mov	r0, r3
 8006d8a:	f7fe ff18 	bl	8005bbe <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8006d94:	4618      	mov	r0, r3
 8006d96:	f7fe fed1 	bl	8005b3c <USBD_LL_Reset>
}
 8006d9a:	bf00      	nop
 8006d9c:	3710      	adds	r7, #16
 8006d9e:	46bd      	mov	sp, r7
 8006da0:	bd80      	pop	{r7, pc}
	...

08006da4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006da4:	b580      	push	{r7, lr}
 8006da6:	b082      	sub	sp, #8
 8006da8:	af00      	add	r7, sp, #0
 8006daa:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8006db2:	4618      	mov	r0, r3
 8006db4:	f7fe ff12 	bl	8005bdc <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	699b      	ldr	r3, [r3, #24]
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d005      	beq.n	8006dcc <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8006dc0:	4b04      	ldr	r3, [pc, #16]	; (8006dd4 <HAL_PCD_SuspendCallback+0x30>)
 8006dc2:	691b      	ldr	r3, [r3, #16]
 8006dc4:	4a03      	ldr	r2, [pc, #12]	; (8006dd4 <HAL_PCD_SuspendCallback+0x30>)
 8006dc6:	f043 0306 	orr.w	r3, r3, #6
 8006dca:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8006dcc:	bf00      	nop
 8006dce:	3708      	adds	r7, #8
 8006dd0:	46bd      	mov	sp, r7
 8006dd2:	bd80      	pop	{r7, pc}
 8006dd4:	e000ed00 	.word	0xe000ed00

08006dd8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006dd8:	b580      	push	{r7, lr}
 8006dda:	b082      	sub	sp, #8
 8006ddc:	af00      	add	r7, sp, #0
 8006dde:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8006de6:	4618      	mov	r0, r3
 8006de8:	f7fe ff0c 	bl	8005c04 <USBD_LL_Resume>
}
 8006dec:	bf00      	nop
 8006dee:	3708      	adds	r7, #8
 8006df0:	46bd      	mov	sp, r7
 8006df2:	bd80      	pop	{r7, pc}

08006df4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8006df4:	b580      	push	{r7, lr}
 8006df6:	b082      	sub	sp, #8
 8006df8:	af00      	add	r7, sp, #0
 8006dfa:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8006dfc:	4a28      	ldr	r2, [pc, #160]	; (8006ea0 <USBD_LL_Init+0xac>)
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	f8c2 3268 	str.w	r3, [r2, #616]	; 0x268
  pdev->pData = &hpcd_USB_FS;
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	4a26      	ldr	r2, [pc, #152]	; (8006ea0 <USBD_LL_Init+0xac>)
 8006e08:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 8006e0c:	4b24      	ldr	r3, [pc, #144]	; (8006ea0 <USBD_LL_Init+0xac>)
 8006e0e:	4a25      	ldr	r2, [pc, #148]	; (8006ea4 <USBD_LL_Init+0xb0>)
 8006e10:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8006e12:	4b23      	ldr	r3, [pc, #140]	; (8006ea0 <USBD_LL_Init+0xac>)
 8006e14:	2208      	movs	r2, #8
 8006e16:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8006e18:	4b21      	ldr	r3, [pc, #132]	; (8006ea0 <USBD_LL_Init+0xac>)
 8006e1a:	2202      	movs	r2, #2
 8006e1c:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8006e1e:	4b20      	ldr	r3, [pc, #128]	; (8006ea0 <USBD_LL_Init+0xac>)
 8006e20:	2200      	movs	r2, #0
 8006e22:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8006e24:	4b1e      	ldr	r3, [pc, #120]	; (8006ea0 <USBD_LL_Init+0xac>)
 8006e26:	2200      	movs	r2, #0
 8006e28:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8006e2a:	4b1d      	ldr	r3, [pc, #116]	; (8006ea0 <USBD_LL_Init+0xac>)
 8006e2c:	2200      	movs	r2, #0
 8006e2e:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8006e30:	481b      	ldr	r0, [pc, #108]	; (8006ea0 <USBD_LL_Init+0xac>)
 8006e32:	f7fb f9f5 	bl	8002220 <HAL_PCD_Init>
 8006e36:	4603      	mov	r3, r0
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d001      	beq.n	8006e40 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8006e3c:	f7f9 fdc2 	bl	80009c4 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8006e46:	2318      	movs	r3, #24
 8006e48:	2200      	movs	r2, #0
 8006e4a:	2100      	movs	r1, #0
 8006e4c:	f7fc f88e 	bl	8002f6c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8006e56:	2358      	movs	r3, #88	; 0x58
 8006e58:	2200      	movs	r2, #0
 8006e5a:	2180      	movs	r1, #128	; 0x80
 8006e5c:	f7fc f886 	bl	8002f6c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8006e66:	23c0      	movs	r3, #192	; 0xc0
 8006e68:	2200      	movs	r2, #0
 8006e6a:	2181      	movs	r1, #129	; 0x81
 8006e6c:	f7fc f87e 	bl	8002f6c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8006e76:	f44f 7388 	mov.w	r3, #272	; 0x110
 8006e7a:	2200      	movs	r2, #0
 8006e7c:	2101      	movs	r1, #1
 8006e7e:	f7fc f875 	bl	8002f6c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8006e88:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006e8c:	2200      	movs	r2, #0
 8006e8e:	2182      	movs	r1, #130	; 0x82
 8006e90:	f7fc f86c 	bl	8002f6c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8006e94:	2300      	movs	r3, #0
}
 8006e96:	4618      	mov	r0, r3
 8006e98:	3708      	adds	r7, #8
 8006e9a:	46bd      	mov	sp, r7
 8006e9c:	bd80      	pop	{r7, pc}
 8006e9e:	bf00      	nop
 8006ea0:	200033cc 	.word	0x200033cc
 8006ea4:	40005c00 	.word	0x40005c00

08006ea8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8006ea8:	b580      	push	{r7, lr}
 8006eaa:	b084      	sub	sp, #16
 8006eac:	af00      	add	r7, sp, #0
 8006eae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006eb0:	2300      	movs	r3, #0
 8006eb2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006eb4:	2300      	movs	r3, #0
 8006eb6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006ebe:	4618      	mov	r0, r3
 8006ec0:	f7fb fa8f 	bl	80023e2 <HAL_PCD_Start>
 8006ec4:	4603      	mov	r3, r0
 8006ec6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006ec8:	7bfb      	ldrb	r3, [r7, #15]
 8006eca:	4618      	mov	r0, r3
 8006ecc:	f000 f948 	bl	8007160 <USBD_Get_USB_Status>
 8006ed0:	4603      	mov	r3, r0
 8006ed2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006ed4:	7bbb      	ldrb	r3, [r7, #14]
}
 8006ed6:	4618      	mov	r0, r3
 8006ed8:	3710      	adds	r7, #16
 8006eda:	46bd      	mov	sp, r7
 8006edc:	bd80      	pop	{r7, pc}

08006ede <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8006ede:	b580      	push	{r7, lr}
 8006ee0:	b084      	sub	sp, #16
 8006ee2:	af00      	add	r7, sp, #0
 8006ee4:	6078      	str	r0, [r7, #4]
 8006ee6:	4608      	mov	r0, r1
 8006ee8:	4611      	mov	r1, r2
 8006eea:	461a      	mov	r2, r3
 8006eec:	4603      	mov	r3, r0
 8006eee:	70fb      	strb	r3, [r7, #3]
 8006ef0:	460b      	mov	r3, r1
 8006ef2:	70bb      	strb	r3, [r7, #2]
 8006ef4:	4613      	mov	r3, r2
 8006ef6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006ef8:	2300      	movs	r3, #0
 8006efa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006efc:	2300      	movs	r3, #0
 8006efe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8006f06:	78bb      	ldrb	r3, [r7, #2]
 8006f08:	883a      	ldrh	r2, [r7, #0]
 8006f0a:	78f9      	ldrb	r1, [r7, #3]
 8006f0c:	f7fb fbc2 	bl	8002694 <HAL_PCD_EP_Open>
 8006f10:	4603      	mov	r3, r0
 8006f12:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006f14:	7bfb      	ldrb	r3, [r7, #15]
 8006f16:	4618      	mov	r0, r3
 8006f18:	f000 f922 	bl	8007160 <USBD_Get_USB_Status>
 8006f1c:	4603      	mov	r3, r0
 8006f1e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006f20:	7bbb      	ldrb	r3, [r7, #14]
}
 8006f22:	4618      	mov	r0, r3
 8006f24:	3710      	adds	r7, #16
 8006f26:	46bd      	mov	sp, r7
 8006f28:	bd80      	pop	{r7, pc}

08006f2a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006f2a:	b580      	push	{r7, lr}
 8006f2c:	b084      	sub	sp, #16
 8006f2e:	af00      	add	r7, sp, #0
 8006f30:	6078      	str	r0, [r7, #4]
 8006f32:	460b      	mov	r3, r1
 8006f34:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006f36:	2300      	movs	r3, #0
 8006f38:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006f3a:	2300      	movs	r3, #0
 8006f3c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006f44:	78fa      	ldrb	r2, [r7, #3]
 8006f46:	4611      	mov	r1, r2
 8006f48:	4618      	mov	r0, r3
 8006f4a:	f7fb fc03 	bl	8002754 <HAL_PCD_EP_Close>
 8006f4e:	4603      	mov	r3, r0
 8006f50:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006f52:	7bfb      	ldrb	r3, [r7, #15]
 8006f54:	4618      	mov	r0, r3
 8006f56:	f000 f903 	bl	8007160 <USBD_Get_USB_Status>
 8006f5a:	4603      	mov	r3, r0
 8006f5c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006f5e:	7bbb      	ldrb	r3, [r7, #14]
}
 8006f60:	4618      	mov	r0, r3
 8006f62:	3710      	adds	r7, #16
 8006f64:	46bd      	mov	sp, r7
 8006f66:	bd80      	pop	{r7, pc}

08006f68 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006f68:	b580      	push	{r7, lr}
 8006f6a:	b084      	sub	sp, #16
 8006f6c:	af00      	add	r7, sp, #0
 8006f6e:	6078      	str	r0, [r7, #4]
 8006f70:	460b      	mov	r3, r1
 8006f72:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006f74:	2300      	movs	r3, #0
 8006f76:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006f78:	2300      	movs	r3, #0
 8006f7a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006f82:	78fa      	ldrb	r2, [r7, #3]
 8006f84:	4611      	mov	r1, r2
 8006f86:	4618      	mov	r0, r3
 8006f88:	f7fb fcad 	bl	80028e6 <HAL_PCD_EP_SetStall>
 8006f8c:	4603      	mov	r3, r0
 8006f8e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006f90:	7bfb      	ldrb	r3, [r7, #15]
 8006f92:	4618      	mov	r0, r3
 8006f94:	f000 f8e4 	bl	8007160 <USBD_Get_USB_Status>
 8006f98:	4603      	mov	r3, r0
 8006f9a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006f9c:	7bbb      	ldrb	r3, [r7, #14]
}
 8006f9e:	4618      	mov	r0, r3
 8006fa0:	3710      	adds	r7, #16
 8006fa2:	46bd      	mov	sp, r7
 8006fa4:	bd80      	pop	{r7, pc}

08006fa6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006fa6:	b580      	push	{r7, lr}
 8006fa8:	b084      	sub	sp, #16
 8006faa:	af00      	add	r7, sp, #0
 8006fac:	6078      	str	r0, [r7, #4]
 8006fae:	460b      	mov	r3, r1
 8006fb0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006fb2:	2300      	movs	r3, #0
 8006fb4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006fb6:	2300      	movs	r3, #0
 8006fb8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006fc0:	78fa      	ldrb	r2, [r7, #3]
 8006fc2:	4611      	mov	r1, r2
 8006fc4:	4618      	mov	r0, r3
 8006fc6:	f7fb fce8 	bl	800299a <HAL_PCD_EP_ClrStall>
 8006fca:	4603      	mov	r3, r0
 8006fcc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006fce:	7bfb      	ldrb	r3, [r7, #15]
 8006fd0:	4618      	mov	r0, r3
 8006fd2:	f000 f8c5 	bl	8007160 <USBD_Get_USB_Status>
 8006fd6:	4603      	mov	r3, r0
 8006fd8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006fda:	7bbb      	ldrb	r3, [r7, #14]
}
 8006fdc:	4618      	mov	r0, r3
 8006fde:	3710      	adds	r7, #16
 8006fe0:	46bd      	mov	sp, r7
 8006fe2:	bd80      	pop	{r7, pc}

08006fe4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006fe4:	b480      	push	{r7}
 8006fe6:	b085      	sub	sp, #20
 8006fe8:	af00      	add	r7, sp, #0
 8006fea:	6078      	str	r0, [r7, #4]
 8006fec:	460b      	mov	r3, r1
 8006fee:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006ff6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8006ff8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	da08      	bge.n	8007012 <USBD_LL_IsStallEP+0x2e>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007000:	78fb      	ldrb	r3, [r7, #3]
 8007002:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007006:	68fa      	ldr	r2, [r7, #12]
 8007008:	015b      	lsls	r3, r3, #5
 800700a:	4413      	add	r3, r2
 800700c:	332a      	adds	r3, #42	; 0x2a
 800700e:	781b      	ldrb	r3, [r3, #0]
 8007010:	e008      	b.n	8007024 <USBD_LL_IsStallEP+0x40>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8007012:	78fb      	ldrb	r3, [r7, #3]
 8007014:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007018:	68fa      	ldr	r2, [r7, #12]
 800701a:	015b      	lsls	r3, r3, #5
 800701c:	4413      	add	r3, r2
 800701e:	f503 7395 	add.w	r3, r3, #298	; 0x12a
 8007022:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007024:	4618      	mov	r0, r3
 8007026:	3714      	adds	r7, #20
 8007028:	46bd      	mov	sp, r7
 800702a:	bc80      	pop	{r7}
 800702c:	4770      	bx	lr

0800702e <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800702e:	b580      	push	{r7, lr}
 8007030:	b084      	sub	sp, #16
 8007032:	af00      	add	r7, sp, #0
 8007034:	6078      	str	r0, [r7, #4]
 8007036:	460b      	mov	r3, r1
 8007038:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800703a:	2300      	movs	r3, #0
 800703c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800703e:	2300      	movs	r3, #0
 8007040:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007048:	78fa      	ldrb	r2, [r7, #3]
 800704a:	4611      	mov	r1, r2
 800704c:	4618      	mov	r0, r3
 800704e:	f7fb fafc 	bl	800264a <HAL_PCD_SetAddress>
 8007052:	4603      	mov	r3, r0
 8007054:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007056:	7bfb      	ldrb	r3, [r7, #15]
 8007058:	4618      	mov	r0, r3
 800705a:	f000 f881 	bl	8007160 <USBD_Get_USB_Status>
 800705e:	4603      	mov	r3, r0
 8007060:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007062:	7bbb      	ldrb	r3, [r7, #14]
}
 8007064:	4618      	mov	r0, r3
 8007066:	3710      	adds	r7, #16
 8007068:	46bd      	mov	sp, r7
 800706a:	bd80      	pop	{r7, pc}

0800706c <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800706c:	b580      	push	{r7, lr}
 800706e:	b086      	sub	sp, #24
 8007070:	af00      	add	r7, sp, #0
 8007072:	60f8      	str	r0, [r7, #12]
 8007074:	607a      	str	r2, [r7, #4]
 8007076:	461a      	mov	r2, r3
 8007078:	460b      	mov	r3, r1
 800707a:	72fb      	strb	r3, [r7, #11]
 800707c:	4613      	mov	r3, r2
 800707e:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007080:	2300      	movs	r3, #0
 8007082:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007084:	2300      	movs	r3, #0
 8007086:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800708e:	893b      	ldrh	r3, [r7, #8]
 8007090:	7af9      	ldrb	r1, [r7, #11]
 8007092:	687a      	ldr	r2, [r7, #4]
 8007094:	f7fb fbee 	bl	8002874 <HAL_PCD_EP_Transmit>
 8007098:	4603      	mov	r3, r0
 800709a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800709c:	7dfb      	ldrb	r3, [r7, #23]
 800709e:	4618      	mov	r0, r3
 80070a0:	f000 f85e 	bl	8007160 <USBD_Get_USB_Status>
 80070a4:	4603      	mov	r3, r0
 80070a6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80070a8:	7dbb      	ldrb	r3, [r7, #22]
}
 80070aa:	4618      	mov	r0, r3
 80070ac:	3718      	adds	r7, #24
 80070ae:	46bd      	mov	sp, r7
 80070b0:	bd80      	pop	{r7, pc}

080070b2 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80070b2:	b580      	push	{r7, lr}
 80070b4:	b086      	sub	sp, #24
 80070b6:	af00      	add	r7, sp, #0
 80070b8:	60f8      	str	r0, [r7, #12]
 80070ba:	607a      	str	r2, [r7, #4]
 80070bc:	461a      	mov	r2, r3
 80070be:	460b      	mov	r3, r1
 80070c0:	72fb      	strb	r3, [r7, #11]
 80070c2:	4613      	mov	r3, r2
 80070c4:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80070c6:	2300      	movs	r3, #0
 80070c8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80070ca:	2300      	movs	r3, #0
 80070cc:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80070d4:	893b      	ldrh	r3, [r7, #8]
 80070d6:	7af9      	ldrb	r1, [r7, #11]
 80070d8:	687a      	ldr	r2, [r7, #4]
 80070da:	f7fb fb7d 	bl	80027d8 <HAL_PCD_EP_Receive>
 80070de:	4603      	mov	r3, r0
 80070e0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80070e2:	7dfb      	ldrb	r3, [r7, #23]
 80070e4:	4618      	mov	r0, r3
 80070e6:	f000 f83b 	bl	8007160 <USBD_Get_USB_Status>
 80070ea:	4603      	mov	r3, r0
 80070ec:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80070ee:	7dbb      	ldrb	r3, [r7, #22]
}
 80070f0:	4618      	mov	r0, r3
 80070f2:	3718      	adds	r7, #24
 80070f4:	46bd      	mov	sp, r7
 80070f6:	bd80      	pop	{r7, pc}

080070f8 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80070f8:	b580      	push	{r7, lr}
 80070fa:	b082      	sub	sp, #8
 80070fc:	af00      	add	r7, sp, #0
 80070fe:	6078      	str	r0, [r7, #4]
 8007100:	460b      	mov	r3, r1
 8007102:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800710a:	78fa      	ldrb	r2, [r7, #3]
 800710c:	4611      	mov	r1, r2
 800710e:	4618      	mov	r0, r3
 8007110:	f7fb fb9c 	bl	800284c <HAL_PCD_EP_GetRxCount>
 8007114:	4603      	mov	r3, r0
}
 8007116:	4618      	mov	r0, r3
 8007118:	3708      	adds	r7, #8
 800711a:	46bd      	mov	sp, r7
 800711c:	bd80      	pop	{r7, pc}
	...

08007120 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8007120:	b480      	push	{r7}
 8007122:	b083      	sub	sp, #12
 8007124:	af00      	add	r7, sp, #0
 8007126:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8007128:	4b02      	ldr	r3, [pc, #8]	; (8007134 <USBD_static_malloc+0x14>)
}
 800712a:	4618      	mov	r0, r3
 800712c:	370c      	adds	r7, #12
 800712e:	46bd      	mov	sp, r7
 8007130:	bc80      	pop	{r7}
 8007132:	4770      	bx	lr
 8007134:	20000380 	.word	0x20000380

08007138 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8007138:	b480      	push	{r7}
 800713a:	b083      	sub	sp, #12
 800713c:	af00      	add	r7, sp, #0
 800713e:	6078      	str	r0, [r7, #4]

}
 8007140:	bf00      	nop
 8007142:	370c      	adds	r7, #12
 8007144:	46bd      	mov	sp, r7
 8007146:	bc80      	pop	{r7}
 8007148:	4770      	bx	lr

0800714a <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800714a:	b480      	push	{r7}
 800714c:	b083      	sub	sp, #12
 800714e:	af00      	add	r7, sp, #0
 8007150:	6078      	str	r0, [r7, #4]
 8007152:	460b      	mov	r3, r1
 8007154:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8007156:	bf00      	nop
 8007158:	370c      	adds	r7, #12
 800715a:	46bd      	mov	sp, r7
 800715c:	bc80      	pop	{r7}
 800715e:	4770      	bx	lr

08007160 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007160:	b480      	push	{r7}
 8007162:	b085      	sub	sp, #20
 8007164:	af00      	add	r7, sp, #0
 8007166:	4603      	mov	r3, r0
 8007168:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800716a:	2300      	movs	r3, #0
 800716c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800716e:	79fb      	ldrb	r3, [r7, #7]
 8007170:	2b03      	cmp	r3, #3
 8007172:	d817      	bhi.n	80071a4 <USBD_Get_USB_Status+0x44>
 8007174:	a201      	add	r2, pc, #4	; (adr r2, 800717c <USBD_Get_USB_Status+0x1c>)
 8007176:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800717a:	bf00      	nop
 800717c:	0800718d 	.word	0x0800718d
 8007180:	08007193 	.word	0x08007193
 8007184:	08007199 	.word	0x08007199
 8007188:	0800719f 	.word	0x0800719f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800718c:	2300      	movs	r3, #0
 800718e:	73fb      	strb	r3, [r7, #15]
    break;
 8007190:	e00b      	b.n	80071aa <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007192:	2302      	movs	r3, #2
 8007194:	73fb      	strb	r3, [r7, #15]
    break;
 8007196:	e008      	b.n	80071aa <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007198:	2301      	movs	r3, #1
 800719a:	73fb      	strb	r3, [r7, #15]
    break;
 800719c:	e005      	b.n	80071aa <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800719e:	2302      	movs	r3, #2
 80071a0:	73fb      	strb	r3, [r7, #15]
    break;
 80071a2:	e002      	b.n	80071aa <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80071a4:	2302      	movs	r3, #2
 80071a6:	73fb      	strb	r3, [r7, #15]
    break;
 80071a8:	bf00      	nop
  }
  return usb_status;
 80071aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80071ac:	4618      	mov	r0, r3
 80071ae:	3714      	adds	r7, #20
 80071b0:	46bd      	mov	sp, r7
 80071b2:	bc80      	pop	{r7}
 80071b4:	4770      	bx	lr
 80071b6:	bf00      	nop

080071b8 <atoi>:
 80071b8:	220a      	movs	r2, #10
 80071ba:	2100      	movs	r1, #0
 80071bc:	f000 b8b2 	b.w	8007324 <strtol>

080071c0 <__libc_init_array>:
 80071c0:	b570      	push	{r4, r5, r6, lr}
 80071c2:	2500      	movs	r5, #0
 80071c4:	4e0c      	ldr	r6, [pc, #48]	; (80071f8 <__libc_init_array+0x38>)
 80071c6:	4c0d      	ldr	r4, [pc, #52]	; (80071fc <__libc_init_array+0x3c>)
 80071c8:	1ba4      	subs	r4, r4, r6
 80071ca:	10a4      	asrs	r4, r4, #2
 80071cc:	42a5      	cmp	r5, r4
 80071ce:	d109      	bne.n	80071e4 <__libc_init_array+0x24>
 80071d0:	f000 f8e0 	bl	8007394 <_init>
 80071d4:	2500      	movs	r5, #0
 80071d6:	4e0a      	ldr	r6, [pc, #40]	; (8007200 <__libc_init_array+0x40>)
 80071d8:	4c0a      	ldr	r4, [pc, #40]	; (8007204 <__libc_init_array+0x44>)
 80071da:	1ba4      	subs	r4, r4, r6
 80071dc:	10a4      	asrs	r4, r4, #2
 80071de:	42a5      	cmp	r5, r4
 80071e0:	d105      	bne.n	80071ee <__libc_init_array+0x2e>
 80071e2:	bd70      	pop	{r4, r5, r6, pc}
 80071e4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80071e8:	4798      	blx	r3
 80071ea:	3501      	adds	r5, #1
 80071ec:	e7ee      	b.n	80071cc <__libc_init_array+0xc>
 80071ee:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80071f2:	4798      	blx	r3
 80071f4:	3501      	adds	r5, #1
 80071f6:	e7f2      	b.n	80071de <__libc_init_array+0x1e>
 80071f8:	08007540 	.word	0x08007540
 80071fc:	08007540 	.word	0x08007540
 8007200:	08007540 	.word	0x08007540
 8007204:	08007544 	.word	0x08007544

08007208 <memcpy>:
 8007208:	b510      	push	{r4, lr}
 800720a:	1e43      	subs	r3, r0, #1
 800720c:	440a      	add	r2, r1
 800720e:	4291      	cmp	r1, r2
 8007210:	d100      	bne.n	8007214 <memcpy+0xc>
 8007212:	bd10      	pop	{r4, pc}
 8007214:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007218:	f803 4f01 	strb.w	r4, [r3, #1]!
 800721c:	e7f7      	b.n	800720e <memcpy+0x6>

0800721e <memset>:
 800721e:	4603      	mov	r3, r0
 8007220:	4402      	add	r2, r0
 8007222:	4293      	cmp	r3, r2
 8007224:	d100      	bne.n	8007228 <memset+0xa>
 8007226:	4770      	bx	lr
 8007228:	f803 1b01 	strb.w	r1, [r3], #1
 800722c:	e7f9      	b.n	8007222 <memset+0x4>

0800722e <_strtol_l.isra.0>:
 800722e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007232:	4680      	mov	r8, r0
 8007234:	4689      	mov	r9, r1
 8007236:	4692      	mov	sl, r2
 8007238:	461e      	mov	r6, r3
 800723a:	460f      	mov	r7, r1
 800723c:	463d      	mov	r5, r7
 800723e:	9808      	ldr	r0, [sp, #32]
 8007240:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007244:	f000 f884 	bl	8007350 <__locale_ctype_ptr_l>
 8007248:	4420      	add	r0, r4
 800724a:	7843      	ldrb	r3, [r0, #1]
 800724c:	f013 0308 	ands.w	r3, r3, #8
 8007250:	d132      	bne.n	80072b8 <_strtol_l.isra.0+0x8a>
 8007252:	2c2d      	cmp	r4, #45	; 0x2d
 8007254:	d132      	bne.n	80072bc <_strtol_l.isra.0+0x8e>
 8007256:	2201      	movs	r2, #1
 8007258:	787c      	ldrb	r4, [r7, #1]
 800725a:	1cbd      	adds	r5, r7, #2
 800725c:	2e00      	cmp	r6, #0
 800725e:	d05d      	beq.n	800731c <_strtol_l.isra.0+0xee>
 8007260:	2e10      	cmp	r6, #16
 8007262:	d109      	bne.n	8007278 <_strtol_l.isra.0+0x4a>
 8007264:	2c30      	cmp	r4, #48	; 0x30
 8007266:	d107      	bne.n	8007278 <_strtol_l.isra.0+0x4a>
 8007268:	782b      	ldrb	r3, [r5, #0]
 800726a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800726e:	2b58      	cmp	r3, #88	; 0x58
 8007270:	d14f      	bne.n	8007312 <_strtol_l.isra.0+0xe4>
 8007272:	2610      	movs	r6, #16
 8007274:	786c      	ldrb	r4, [r5, #1]
 8007276:	3502      	adds	r5, #2
 8007278:	2a00      	cmp	r2, #0
 800727a:	bf14      	ite	ne
 800727c:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8007280:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8007284:	2700      	movs	r7, #0
 8007286:	fbb1 fcf6 	udiv	ip, r1, r6
 800728a:	4638      	mov	r0, r7
 800728c:	fb06 1e1c 	mls	lr, r6, ip, r1
 8007290:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8007294:	2b09      	cmp	r3, #9
 8007296:	d817      	bhi.n	80072c8 <_strtol_l.isra.0+0x9a>
 8007298:	461c      	mov	r4, r3
 800729a:	42a6      	cmp	r6, r4
 800729c:	dd23      	ble.n	80072e6 <_strtol_l.isra.0+0xb8>
 800729e:	1c7b      	adds	r3, r7, #1
 80072a0:	d007      	beq.n	80072b2 <_strtol_l.isra.0+0x84>
 80072a2:	4584      	cmp	ip, r0
 80072a4:	d31c      	bcc.n	80072e0 <_strtol_l.isra.0+0xb2>
 80072a6:	d101      	bne.n	80072ac <_strtol_l.isra.0+0x7e>
 80072a8:	45a6      	cmp	lr, r4
 80072aa:	db19      	blt.n	80072e0 <_strtol_l.isra.0+0xb2>
 80072ac:	2701      	movs	r7, #1
 80072ae:	fb00 4006 	mla	r0, r0, r6, r4
 80072b2:	f815 4b01 	ldrb.w	r4, [r5], #1
 80072b6:	e7eb      	b.n	8007290 <_strtol_l.isra.0+0x62>
 80072b8:	462f      	mov	r7, r5
 80072ba:	e7bf      	b.n	800723c <_strtol_l.isra.0+0xe>
 80072bc:	2c2b      	cmp	r4, #43	; 0x2b
 80072be:	bf04      	itt	eq
 80072c0:	1cbd      	addeq	r5, r7, #2
 80072c2:	787c      	ldrbeq	r4, [r7, #1]
 80072c4:	461a      	mov	r2, r3
 80072c6:	e7c9      	b.n	800725c <_strtol_l.isra.0+0x2e>
 80072c8:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 80072cc:	2b19      	cmp	r3, #25
 80072ce:	d801      	bhi.n	80072d4 <_strtol_l.isra.0+0xa6>
 80072d0:	3c37      	subs	r4, #55	; 0x37
 80072d2:	e7e2      	b.n	800729a <_strtol_l.isra.0+0x6c>
 80072d4:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 80072d8:	2b19      	cmp	r3, #25
 80072da:	d804      	bhi.n	80072e6 <_strtol_l.isra.0+0xb8>
 80072dc:	3c57      	subs	r4, #87	; 0x57
 80072de:	e7dc      	b.n	800729a <_strtol_l.isra.0+0x6c>
 80072e0:	f04f 37ff 	mov.w	r7, #4294967295
 80072e4:	e7e5      	b.n	80072b2 <_strtol_l.isra.0+0x84>
 80072e6:	1c7b      	adds	r3, r7, #1
 80072e8:	d108      	bne.n	80072fc <_strtol_l.isra.0+0xce>
 80072ea:	2322      	movs	r3, #34	; 0x22
 80072ec:	4608      	mov	r0, r1
 80072ee:	f8c8 3000 	str.w	r3, [r8]
 80072f2:	f1ba 0f00 	cmp.w	sl, #0
 80072f6:	d107      	bne.n	8007308 <_strtol_l.isra.0+0xda>
 80072f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80072fc:	b102      	cbz	r2, 8007300 <_strtol_l.isra.0+0xd2>
 80072fe:	4240      	negs	r0, r0
 8007300:	f1ba 0f00 	cmp.w	sl, #0
 8007304:	d0f8      	beq.n	80072f8 <_strtol_l.isra.0+0xca>
 8007306:	b10f      	cbz	r7, 800730c <_strtol_l.isra.0+0xde>
 8007308:	f105 39ff 	add.w	r9, r5, #4294967295
 800730c:	f8ca 9000 	str.w	r9, [sl]
 8007310:	e7f2      	b.n	80072f8 <_strtol_l.isra.0+0xca>
 8007312:	2430      	movs	r4, #48	; 0x30
 8007314:	2e00      	cmp	r6, #0
 8007316:	d1af      	bne.n	8007278 <_strtol_l.isra.0+0x4a>
 8007318:	2608      	movs	r6, #8
 800731a:	e7ad      	b.n	8007278 <_strtol_l.isra.0+0x4a>
 800731c:	2c30      	cmp	r4, #48	; 0x30
 800731e:	d0a3      	beq.n	8007268 <_strtol_l.isra.0+0x3a>
 8007320:	260a      	movs	r6, #10
 8007322:	e7a9      	b.n	8007278 <_strtol_l.isra.0+0x4a>

08007324 <strtol>:
 8007324:	4b08      	ldr	r3, [pc, #32]	; (8007348 <strtol+0x24>)
 8007326:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007328:	681c      	ldr	r4, [r3, #0]
 800732a:	4d08      	ldr	r5, [pc, #32]	; (800734c <strtol+0x28>)
 800732c:	6a23      	ldr	r3, [r4, #32]
 800732e:	2b00      	cmp	r3, #0
 8007330:	bf08      	it	eq
 8007332:	462b      	moveq	r3, r5
 8007334:	9300      	str	r3, [sp, #0]
 8007336:	4613      	mov	r3, r2
 8007338:	460a      	mov	r2, r1
 800733a:	4601      	mov	r1, r0
 800733c:	4620      	mov	r0, r4
 800733e:	f7ff ff76 	bl	800722e <_strtol_l.isra.0>
 8007342:	b003      	add	sp, #12
 8007344:	bd30      	pop	{r4, r5, pc}
 8007346:	bf00      	nop
 8007348:	20000180 	.word	0x20000180
 800734c:	200001e4 	.word	0x200001e4

08007350 <__locale_ctype_ptr_l>:
 8007350:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8007354:	4770      	bx	lr

08007356 <__ascii_mbtowc>:
 8007356:	b082      	sub	sp, #8
 8007358:	b901      	cbnz	r1, 800735c <__ascii_mbtowc+0x6>
 800735a:	a901      	add	r1, sp, #4
 800735c:	b142      	cbz	r2, 8007370 <__ascii_mbtowc+0x1a>
 800735e:	b14b      	cbz	r3, 8007374 <__ascii_mbtowc+0x1e>
 8007360:	7813      	ldrb	r3, [r2, #0]
 8007362:	600b      	str	r3, [r1, #0]
 8007364:	7812      	ldrb	r2, [r2, #0]
 8007366:	1c10      	adds	r0, r2, #0
 8007368:	bf18      	it	ne
 800736a:	2001      	movne	r0, #1
 800736c:	b002      	add	sp, #8
 800736e:	4770      	bx	lr
 8007370:	4610      	mov	r0, r2
 8007372:	e7fb      	b.n	800736c <__ascii_mbtowc+0x16>
 8007374:	f06f 0001 	mvn.w	r0, #1
 8007378:	e7f8      	b.n	800736c <__ascii_mbtowc+0x16>

0800737a <__ascii_wctomb>:
 800737a:	b149      	cbz	r1, 8007390 <__ascii_wctomb+0x16>
 800737c:	2aff      	cmp	r2, #255	; 0xff
 800737e:	bf8b      	itete	hi
 8007380:	238a      	movhi	r3, #138	; 0x8a
 8007382:	700a      	strbls	r2, [r1, #0]
 8007384:	6003      	strhi	r3, [r0, #0]
 8007386:	2001      	movls	r0, #1
 8007388:	bf88      	it	hi
 800738a:	f04f 30ff 	movhi.w	r0, #4294967295
 800738e:	4770      	bx	lr
 8007390:	4608      	mov	r0, r1
 8007392:	4770      	bx	lr

08007394 <_init>:
 8007394:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007396:	bf00      	nop
 8007398:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800739a:	bc08      	pop	{r3}
 800739c:	469e      	mov	lr, r3
 800739e:	4770      	bx	lr

080073a0 <_fini>:
 80073a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073a2:	bf00      	nop
 80073a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80073a6:	bc08      	pop	{r3}
 80073a8:	469e      	mov	lr, r3
 80073aa:	4770      	bx	lr
